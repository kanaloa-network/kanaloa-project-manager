/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n,r,s={724:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var r=n(537),s=n.n(r),i=n(645),a=n.n(i),o=n(667),l=n.n(o),c=new URL(n(816),n.b),u=a()(s()),h=l()(c);u.push([e.id,"@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url("+h+") format('truetype');\n}\n\n.gRd1oYHIxDKN1uv1lRRm {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n","",{version:3,sources:["webpack://./css/material-icons.module.css"],names:[],mappings:"AAAA;EACE,6BAA6B;EAC7B,kBAAkB;EAClB,gBAAgB;EAChB,+DAAiD;AACnD;;AAEA;EACE,6BAA6B;EAC7B,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,sBAAsB;EACtB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,cAAc;AAChB",sourcesContent:["@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(\"material-icons.ttf\") format('truetype');\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n"],sourceRoot:""}]),u.locals={"material-icons":"gRd1oYHIxDKN1uv1lRRm"};const d=u},590:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(537),s=n.n(r),i=n(645),a=n.n(i)()(s());a.push([e.id,'*,\n*::before,\n*::after {\n  box-sizing: inherit;\n  padding: 0;\n  margin: 0;\n}\n\nhtml {\n  line-height: 1.15;\n  box-sizing: border-box;\n  font-family: sans-serif;\n}\n\nmain {\n  display: block;\n}\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\np + p {\n  margin-top: 1rem;\n}\n\na {\n  background-color: transparent;\n}\n\nabbr[title] {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  line-height: inherit;\n  border: 1px solid currentColor;\n}\n\nbutton {\n  overflow: visible;\n  text-transform: none;\n}\n\nbutton,\n[type=button],\n[type=reset],\n[type=submit] {\n  -webkit-appearance: button;\n  padding: 1px 6px;\n}\n\ninput {\n  overflow: visible;\n}\n\ninput,\ntextarea {\n  padding: 1px;\n}\n\nfieldset {\n  border: 1px solid currentColor;\n  margin: 0 2px;\n}\n\nlegend {\n  color: inherit;\n  display: table;\n  max-width: 100%;\n  white-space: normal;\n}\n\nprogress {\n  display: inline-block;\n  vertical-align: baseline;\n}\n\nselect {\n  text-transform: none;\n}\n\ntextarea {\n  overflow: auto;\n  vertical-align: top;\n}\n\n[type=search] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n\n[type=color] {\n  background: inherit;\n}\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.5;\n}\n\n::-webkit-search-decoration,\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n\n::-moz-focus-inner {\n  border: 0;\n}\n\n:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n  color: inherit;\n  overflow: visible;\n}\n\ndl,\nol,\nul {\n  margin: 0;\n}\n\nol ol,\nol ul,\nol dl,\nul ol,\nul ul,\nul dl,\ndl ol,\ndl ul,\ndl dl {\n  margin: 0;\n}\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\naudio,\nvideo {\n  display: inline-block;\n}\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\nimg {\n  border: 0;\n}\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\ntable {\n  text-indent: 0;\n  border-color: inherit;\n}\n\ndetails {\n  display: block;\n}\n\ndialog {\n  background-color: inherit;\n  border: solid;\n  color: inherit;\n  display: block;\n  height: fit-content;\n  left: 0;\n  margin: auto;\n  padding: 1em;\n  position: absolute;\n  right: 0;\n  width: fit-content;\n}\n\ndialog:not([open]) {\n  display: none;\n}\n\nsummary {\n  display: list-item;\n}\n\ncanvas {\n  display: inline-block;\n}\n\ntemplate {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}\n\n:root {\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n}\n',"",{version:3,sources:["webpack://./css/reseter.module.css"],names:[],mappings:"AAAA;;;EAGE,mBAAmB;EACnB,UAAU;EACV,SAAS;AACX;;AAEA;EACE,iBAAiB;EACjB,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,yCAAyC;UACjC,iCAAiC;AAC3C;;AAEA;;;;EAIE,iCAAiC;EACjC,cAAc;AAChB;;AAEA;;EAEE,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;;;;;EAKE,oBAAoB;EACpB,8BAA8B;AAChC;;AAEA;EACE,iBAAiB;EACjB,oBAAoB;AACtB;;AAEA;;;;EAIE,0BAA0B;EAC1B,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B,aAAa;AACf;;AAEA;EACE,cAAc;EACd,cAAc;EACd,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,wBAAwB;AAC1B;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,cAAc;EACd,mBAAmB;AACrB;;AAEA;EACE,6BAA6B;EAC7B,oBAAoB;AACtB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,cAAc;EACd,YAAY;AACd;;AAEA;;EAEE,0BAA0B;EAC1B,aAAa;AACf;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,SAAS;EACT,cAAc;EACd,iBAAiB;AACnB;;AAEA;;;EAGE,SAAS;AACX;;AAEA;;;;;;;;;EASE,SAAS;AACX;;AAEA;;EAEE,mBAAmB;AACrB;;AAEA;;EAEE,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,qBAAqB;AACvB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,cAAc;EACd,cAAc;EACd,mBAAmB;EACnB,OAAO;EACP,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,QAAQ;EACR,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,wIAAwI;AAC1I",sourcesContent:['*,\n*::before,\n*::after {\n  box-sizing: inherit;\n  padding: 0;\n  margin: 0;\n}\n\nhtml {\n  line-height: 1.15;\n  box-sizing: border-box;\n  font-family: sans-serif;\n}\n\nmain {\n  display: block;\n}\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\np + p {\n  margin-top: 1rem;\n}\n\na {\n  background-color: transparent;\n}\n\nabbr[title] {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  line-height: inherit;\n  border: 1px solid currentColor;\n}\n\nbutton {\n  overflow: visible;\n  text-transform: none;\n}\n\nbutton,\n[type=button],\n[type=reset],\n[type=submit] {\n  -webkit-appearance: button;\n  padding: 1px 6px;\n}\n\ninput {\n  overflow: visible;\n}\n\ninput,\ntextarea {\n  padding: 1px;\n}\n\nfieldset {\n  border: 1px solid currentColor;\n  margin: 0 2px;\n}\n\nlegend {\n  color: inherit;\n  display: table;\n  max-width: 100%;\n  white-space: normal;\n}\n\nprogress {\n  display: inline-block;\n  vertical-align: baseline;\n}\n\nselect {\n  text-transform: none;\n}\n\ntextarea {\n  overflow: auto;\n  vertical-align: top;\n}\n\n[type=search] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n\n[type=color] {\n  background: inherit;\n}\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.5;\n}\n\n::-webkit-search-decoration,\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n\n::-moz-focus-inner {\n  border: 0;\n}\n\n:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n  color: inherit;\n  overflow: visible;\n}\n\ndl,\nol,\nul {\n  margin: 0;\n}\n\nol ol,\nol ul,\nol dl,\nul ol,\nul ul,\nul dl,\ndl ol,\ndl ul,\ndl dl {\n  margin: 0;\n}\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\naudio,\nvideo {\n  display: inline-block;\n}\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\nimg {\n  border: 0;\n}\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\ntable {\n  text-indent: 0;\n  border-color: inherit;\n}\n\ndetails {\n  display: block;\n}\n\ndialog {\n  background-color: inherit;\n  border: solid;\n  color: inherit;\n  display: block;\n  height: fit-content;\n  left: 0;\n  margin: auto;\n  padding: 1em;\n  position: absolute;\n  right: 0;\n  width: fit-content;\n}\n\ndialog:not([open]) {\n  display: none;\n}\n\nsummary {\n  display: list-item;\n}\n\ncanvas {\n  display: inline-block;\n}\n\ntemplate {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}\n\n:root {\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n}\n'],sourceRoot:""}]),a.locals={};const o=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,s,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),s&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=s):u[4]="".concat(s)),t.push(u))}},t}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(s," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},816:(e,t,n)=>{"use strict";e.exports=n.p+"f20305dee9d396fea5c7.ttf"},856:()=>{}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={id:e,exports:{}};return s[e](n,n.exports,a),n.exports}a.m=s,a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var s=Object.create(null);a.r(s);var i={};e=e||[null,t({}),t([]),t(t)];for(var o=2&r&&n;"object"==typeof o&&!~e.indexOf(o);o=t(o))Object.getOwnPropertyNames(o).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(s,i),s},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((t,n)=>(a.f[n](e,t),t)),[])),a.u=e=>e+".bundle.js",a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},r="kanaloa-project-manager:",a.l=(e,t,s,i)=>{if(n[e])n[e].push(t);else{var o,l;if(void 0!==s)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var h=c[u];if(h.getAttribute("src")==e||h.getAttribute("data-webpack")==r+s){o=h;break}}o||(l=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,a.nc&&o.setAttribute("nonce",a.nc),o.setAttribute("data-webpack",r+s),o.src=e),n[e]=[t];var d=(t,r)=>{o.onerror=o.onload=null,clearTimeout(p);var s=n[e];if(delete n[e],o.parentNode&&o.parentNode.removeChild(o),s&&s.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=d.bind(null,o.onerror),o.onload=d.bind(null,o.onload),l&&document.head.appendChild(o)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.p="/",(()=>{a.b=document.baseURI||self.location.href;var e={179:0};a.f.j=(t,n)=>{var r=a.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var s=new Promise(((n,s)=>r=e[t]=[n,s]));n.push(r[2]=s);var i=a.p+a.u(t),o=new Error;a.l(i,(n=>{if(a.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var s=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;o.message="Loading chunk "+t+" failed.\n("+s+": "+i+")",o.name="ChunkLoadError",o.type=s,o.request=i,r[1](o)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,s,[i,o,l]=n,c=0;if(i.some((t=>0!==e[t]))){for(r in o)a.o(o,r)&&(a.m[r]=o[r]);l&&l(a)}for(t&&t(n);c<i.length;c++)s=i[c],a.o(e,s)&&e[s]&&e[s][0](),e[s]=0},n=self.webpackChunkkanaloa_project_manager=self.webpackChunkkanaloa_project_manager||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";const e=window,t=e.ShadowRoot&&(void 0===e.ShadyCSS||e.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,n=Symbol(),r=new WeakMap;class s{constructor(e,t,r){if(this._$cssResult$=!0,r!==n)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const n=this.t;if(t&&void 0===e){const t=void 0!==n&&1===n.length;t&&(e=r.get(n)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),t&&r.set(n,e))}return e}toString(){return this.cssText}}const i=e=>new s("string"==typeof e?e:e+"",void 0,n),o=(e,...t)=>{const r=1===e.length?e[0]:t.reduce(((t,n,r)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(n)+e[r+1]),e[0]);return new s(r,e,n)},l=(n,r)=>{t?n.adoptedStyleSheets=r.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):r.forEach((t=>{const r=document.createElement("style"),s=e.litNonce;void 0!==s&&r.setAttribute("nonce",s),r.textContent=t.cssText,n.appendChild(r)}))},c=t?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const n of e.cssRules)t+=n.cssText;return i(t)})(e):e;var u;const h=window,d=h.trustedTypes,p=d?d.emptyScript:"",f=h.reactiveElementPolyfillSupport,g={toAttribute(e,t){switch(t){case Boolean:e=e?p:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let n=e;switch(t){case Boolean:n=null!==e;break;case Number:n=null===e?null:Number(e);break;case Object:case Array:try{n=JSON.parse(e)}catch(e){n=null}}return n}},m=(e,t)=>t!==e&&(t==t||e==e),y={attribute:!0,type:String,converter:g,reflect:!1,hasChanged:m};class b extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(e){var t;this.finalize(),(null!==(t=this.h)&&void 0!==t?t:this.h=[]).push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,n)=>{const r=this._$Ep(n,t);void 0!==r&&(this._$Ev.set(r,n),e.push(r))})),e}static createProperty(e,t=y){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const n="symbol"==typeof e?Symbol():"__"+e,r=this.getPropertyDescriptor(e,n,t);void 0!==r&&Object.defineProperty(this.prototype,e,r)}}static getPropertyDescriptor(e,t,n){return{get(){return this[t]},set(r){const s=this[e];this[t]=r,this.requestUpdate(e,s,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||y}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),void 0!==e.h&&(this.h=[...e.h]),this.elementProperties=new Map(e.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const n of t)this.createProperty(n,e[n])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const n=new Set(e.flat(1/0).reverse());for(const e of n)t.unshift(c(e))}else void 0!==e&&t.push(c(e));return t}static _$Ep(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}u(){var e;this._$E_=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(e=this.constructor.h)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,n;(null!==(t=this._$ES)&&void 0!==t?t:this._$ES=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(n=e.hostConnected)||void 0===n||n.call(e))}removeController(e){var t;null===(t=this._$ES)||void 0===t||t.splice(this._$ES.indexOf(e)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Ei.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return l(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,n){this._$AK(e,n)}_$EO(e,t,n=y){var r;const s=this.constructor._$Ep(e,n);if(void 0!==s&&!0===n.reflect){const i=(void 0!==(null===(r=n.converter)||void 0===r?void 0:r.toAttribute)?n.converter:g).toAttribute(t,n.type);this._$El=e,null==i?this.removeAttribute(s):this.setAttribute(s,i),this._$El=null}}_$AK(e,t){var n;const r=this.constructor,s=r._$Ev.get(e);if(void 0!==s&&this._$El!==s){const e=r.getPropertyOptions(s),i="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(n=e.converter)||void 0===n?void 0:n.fromAttribute)?e.converter:g;this._$El=s,this[s]=i.fromAttribute(t,e.type),this._$El=null}}requestUpdate(e,t,n){let r=!0;void 0!==e&&(((n=n||this.constructor.getPropertyOptions(e)).hasChanged||m)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===n.reflect&&this._$El!==e&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(e,n))):r=!1),!this.isUpdatePending&&r&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((e,t)=>this[t]=e)),this._$Ei=void 0);let t=!1;const n=this._$AL;try{t=this.shouldUpdate(n),t?(this.willUpdate(n),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(n)):this._$Ek()}catch(e){throw t=!1,this._$Ek(),e}t&&this._$AE(n)}willUpdate(e){}_$AE(e){var t;null===(t=this._$ES)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(e){return!0}update(e){void 0!==this._$EC&&(this._$EC.forEach(((e,t)=>this._$EO(t,this[t],e))),this._$EC=void 0),this._$Ek()}updated(e){}firstUpdated(e){}}var v;b.finalized=!0,b.elementProperties=new Map,b.elementStyles=[],b.shadowRootOptions={mode:"open"},null==f||f({ReactiveElement:b}),(null!==(u=h.reactiveElementVersions)&&void 0!==u?u:h.reactiveElementVersions=[]).push("1.6.1");const w=window,A=w.trustedTypes,_=A?A.createPolicy("lit-html",{createHTML:e=>e}):void 0,E="$lit$",k=`lit$${(Math.random()+"").slice(9)}$`,x="?"+k,C=`<${x}>`,N=document,P=()=>N.createComment(""),S=e=>null===e||"object"!=typeof e&&"function"!=typeof e,O=Array.isArray,B=e=>O(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]),R="[ \t\n\f\r]",T=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,I=/-->/g,F=/>/g,L=RegExp(`>|${R}(?:([^\\s"'>=/]+)(${R}*=${R}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),U=/'/g,D=/"/g,M=/^(?:script|style|textarea|title)$/i,j=e=>(t,...n)=>({_$litType$:e,strings:t,values:n}),V=j(1),H=(j(2),Symbol.for("lit-noChange")),$=Symbol.for("lit-nothing"),G=new WeakMap,z=N.createTreeWalker(N,129,null,!1),q=(e,t)=>{const n=e.length-1,r=[];let s,i=2===t?"<svg>":"",a=T;for(let t=0;t<n;t++){const n=e[t];let o,l,c=-1,u=0;for(;u<n.length&&(a.lastIndex=u,l=a.exec(n),null!==l);)u=a.lastIndex,a===T?"!--"===l[1]?a=I:void 0!==l[1]?a=F:void 0!==l[2]?(M.test(l[2])&&(s=RegExp("</"+l[2],"g")),a=L):void 0!==l[3]&&(a=L):a===L?">"===l[0]?(a=null!=s?s:T,c=-1):void 0===l[1]?c=-2:(c=a.lastIndex-l[2].length,o=l[1],a=void 0===l[3]?L:'"'===l[3]?D:U):a===D||a===U?a=L:a===I||a===F?a=T:(a=L,s=void 0);const h=a===L&&e[t+1].startsWith("/>")?" ":"";i+=a===T?n+C:c>=0?(r.push(o),n.slice(0,c)+E+n.slice(c)+k+h):n+k+(-2===c?(r.push(void 0),t):h)}const o=i+(e[n]||"<?>")+(2===t?"</svg>":"");if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==_?_.createHTML(o):o,r]};class Q{constructor({strings:e,_$litType$:t},n){let r;this.parts=[];let s=0,i=0;const a=e.length-1,o=this.parts,[l,c]=q(e,t);if(this.el=Q.createElement(l,n),z.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(r=z.nextNode())&&o.length<a;){if(1===r.nodeType){if(r.hasAttributes()){const e=[];for(const t of r.getAttributeNames())if(t.endsWith(E)||t.startsWith(k)){const n=c[i++];if(e.push(t),void 0!==n){const e=r.getAttribute(n.toLowerCase()+E).split(k),t=/([.?@])?(.*)/.exec(n);o.push({type:1,index:s,name:t[2],strings:e,ctor:"."===t[1]?Z:"?"===t[1]?ee:"@"===t[1]?te:Y})}else o.push({type:6,index:s})}for(const t of e)r.removeAttribute(t)}if(M.test(r.tagName)){const e=r.textContent.split(k),t=e.length-1;if(t>0){r.textContent=A?A.emptyScript:"";for(let n=0;n<t;n++)r.append(e[n],P()),z.nextNode(),o.push({type:2,index:++s});r.append(e[t],P())}}}else if(8===r.nodeType)if(r.data===x)o.push({type:2,index:s});else{let e=-1;for(;-1!==(e=r.data.indexOf(k,e+1));)o.push({type:7,index:s}),e+=k.length-1}s++}}static createElement(e,t){const n=N.createElement("template");return n.innerHTML=e,n}}function J(e,t,n=e,r){var s,i,a,o;if(t===H)return t;let l=void 0!==r?null===(s=n._$Co)||void 0===s?void 0:s[r]:n._$Cl;const c=S(t)?void 0:t._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(i=null==l?void 0:l._$AO)||void 0===i||i.call(l,!1),void 0===c?l=void 0:(l=new c(e),l._$AT(e,n,r)),void 0!==r?(null!==(a=(o=n)._$Co)&&void 0!==a?a:o._$Co=[])[r]=l:n._$Cl=l),void 0!==l&&(t=J(e,l._$AS(e,t.values),l,r)),t}class K{constructor(e,t){this._$AV=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){var t;const{el:{content:n},parts:r}=this._$AD,s=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:N).importNode(n,!0);z.currentNode=s;let i=z.nextNode(),a=0,o=0,l=r[0];for(;void 0!==l;){if(a===l.index){let t;2===l.type?t=new W(i,i.nextSibling,this,e):1===l.type?t=new l.ctor(i,l.name,l.strings,this,e):6===l.type&&(t=new ne(i,this,e)),this._$AV.push(t),l=r[++o]}a!==(null==l?void 0:l.index)&&(i=z.nextNode(),a++)}return s}v(e){let t=0;for(const n of this._$AV)void 0!==n&&(void 0!==n.strings?(n._$AI(e,n,t),t+=n.strings.length-2):n._$AI(e[t])),t++}}class W{constructor(e,t,n,r){var s;this.type=2,this._$AH=$,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=n,this.options=r,this._$Cp=null===(s=null==r?void 0:r.isConnected)||void 0===s||s}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cp}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===(null==e?void 0:e.nodeType)&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=J(this,e,t),S(e)?e===$||null==e||""===e?(this._$AH!==$&&this._$AR(),this._$AH=$):e!==this._$AH&&e!==H&&this._(e):void 0!==e._$litType$?this.g(e):void 0!==e.nodeType?this.$(e):B(e)?this.T(e):this._(e)}k(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}$(e){this._$AH!==e&&(this._$AR(),this._$AH=this.k(e))}_(e){this._$AH!==$&&S(this._$AH)?this._$AA.nextSibling.data=e:this.$(N.createTextNode(e)),this._$AH=e}g(e){var t;const{values:n,_$litType$:r}=e,s="number"==typeof r?this._$AC(e):(void 0===r.el&&(r.el=Q.createElement(r.h,this.options)),r);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===s)this._$AH.v(n);else{const e=new K(s,this),t=e.u(this.options);e.v(n),this.$(t),this._$AH=e}}_$AC(e){let t=G.get(e.strings);return void 0===t&&G.set(e.strings,t=new Q(e)),t}T(e){O(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let n,r=0;for(const s of e)r===t.length?t.push(n=new W(this.k(P()),this.k(P()),this,this.options)):n=t[r],n._$AI(s),r++;r<t.length&&(this._$AR(n&&n._$AB.nextSibling,r),t.length=r)}_$AR(e=this._$AA.nextSibling,t){var n;for(null===(n=this._$AP)||void 0===n||n.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cp=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class Y{constructor(e,t,n,r,s){this.type=1,this._$AH=$,this._$AN=void 0,this.element=e,this.name=t,this._$AM=r,this.options=s,n.length>2||""!==n[0]||""!==n[1]?(this._$AH=Array(n.length-1).fill(new String),this.strings=n):this._$AH=$}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,n,r){const s=this.strings;let i=!1;if(void 0===s)e=J(this,e,t,0),i=!S(e)||e!==this._$AH&&e!==H,i&&(this._$AH=e);else{const r=e;let a,o;for(e=s[0],a=0;a<s.length-1;a++)o=J(this,r[n+a],t,a),o===H&&(o=this._$AH[a]),i||(i=!S(o)||o!==this._$AH[a]),o===$?e=$:e!==$&&(e+=(null!=o?o:"")+s[a+1]),this._$AH[a]=o}i&&!r&&this.j(e)}j(e){e===$?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class Z extends Y{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===$?void 0:e}}const X=A?A.emptyScript:"";class ee extends Y{constructor(){super(...arguments),this.type=4}j(e){e&&e!==$?this.element.setAttribute(this.name,X):this.element.removeAttribute(this.name)}}class te extends Y{constructor(e,t,n,r,s){super(e,t,n,r,s),this.type=5}_$AI(e,t=this){var n;if((e=null!==(n=J(this,e,t,0))&&void 0!==n?n:$)===H)return;const r=this._$AH,s=e===$&&r!==$||e.capture!==r.capture||e.once!==r.once||e.passive!==r.passive,i=e!==$&&(r===$||s);s&&this.element.removeEventListener(this.name,this,r),i&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,n;"function"==typeof this._$AH?this._$AH.call(null!==(n=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==n?n:this.element,e):this._$AH.handleEvent(e)}}class ne{constructor(e,t,n){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=n}get _$AU(){return this._$AM._$AU}_$AI(e){J(this,e)}}const re={O:E,P:k,A:x,C:1,M:q,L:K,D:B,R:J,I:W,V:Y,H:ee,N:te,U:Z,F:ne},se=w.litHtmlPolyfillSupport;null==se||se(Q,W),(null!==(v=w.litHtmlVersions)&&void 0!==v?v:w.litHtmlVersions=[]).push("2.7.3");const ie=(e,t,n)=>{var r,s;const i=null!==(r=null==n?void 0:n.renderBefore)&&void 0!==r?r:t;let a=i._$litPart$;if(void 0===a){const e=null!==(s=null==n?void 0:n.renderBefore)&&void 0!==s?s:null;i._$litPart$=a=new W(t.insertBefore(P(),e),e,void 0,null!=n?n:{})}return a._$AI(e),a};var ae,oe;class le extends b{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e,t;const n=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=n.firstChild),n}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=ie(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!1)}render(){return H}}le.finalized=!0,le._$litElement$=!0,null===(ae=globalThis.litElementHydrateSupport)||void 0===ae||ae.call(globalThis,{LitElement:le});const ce=globalThis.litElementPolyfillSupport;null==ce||ce({LitElement:le}),(null!==(oe=globalThis.litElementVersions)&&void 0!==oe?oe:globalThis.litElementVersions=[]).push("3.3.2");const ue=e=>t=>"function"==typeof t?((e,t)=>(customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:n,elements:r}=t;return{kind:n,elements:r,finisher(t){customElements.define(e,t)}}})(e,t),he=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?{...t,finisher(n){n.createProperty(t.key,e)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:t.key,initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(n){n.createProperty(t.key,e)}};function de(e){return(t,n)=>void 0!==n?((e,t,n)=>{t.constructor.createProperty(n,e)})(e,t,n):he(e,t)}function pe(e){return de({...e,state:!0})}var fe;null===(fe=window.HTMLSlotElement)||void 0===fe||fe.prototype.assignedElements;const ge=o`
    :host {
        /* Primary colors */
        --primary-color: #514983;
        --primary-light-color: #8274b3;
        --primary-dark-color: #2a2b4f;

        /* Highlighted colors */
        --highlighted-color: #EA3757;
        --highlighted-light-color: #ff6a84;
        --highlighted-dark-color: #b30033;

        /* Background colors */
        --background-color: #261F47;
        --background-light-color: #4a3b6a;
        --background-dark-color: #17102e;
    
        /* Foreground colors */
        --foreground-color: #ffffff;
        --foreground-light-color: #f1f1f1;
        --foreground-dark-color: #d0d0d0;
    }
`,me=o`
    h1 {
        font-size: 3rem;
        display: block;
        width: 100%;
    }

    h2 {
        font-size: 2rem;
        margin: 0.5rem 0 0.5rem;
    }

    h3 {
        font-size: 1.5rem;
        margin: 0;
    }

    hr {
        border: none;
        height: 2px;
        background-color: var(--background-light-color);
        margin: 0.5rem 0 1rem;
    }
`;function ye(e=""){return o`
        :host {
            background-color: var(--background${i(e)}-color);
            color: var(--foreground${i(e)}-color);
        }
    `}function be(e=""){return o`
        :host {
            background-color: var(--foreground${i(e)}-color);
            color: var(--background${i(e)}-color);
        }
    `}const ve=4,we=12,Ae=50,_e=50,Ee=16777619,ke=2166136261;HTMLElement;var xe=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};let Ce=class extends le{static get styles(){return o`
            img {
                width: auto;
                height: 100%;
            }
        `}constructor(){super()}render(){return V`
            <img src="${Ne(this.hash)}"/>
        `}};function Ne(e){return`data:image/svg+xml;utf8,${encodeURIComponent(function(e="",t=Ae,n=_e){const r=e.split("").reduce(((e,t)=>((e^t.charCodeAt(0))>>>0)*Ee),ke),s=r/Ee%we*(360/we);return[...Array(e?25:0)].reduce(((e,t,n)=>r%(16-n%15)<ve?e+`<rect x="${n>14?7-~~(n/5):~~(n/5)}" y="${n%5}" width="1" height="1"/>`:e),`<svg viewBox="-1.5 -1.5 8 8" xmlns="http://www.w3.org/2000/svg" fill="hsl(${s} ${t}% ${n}%)">`)+"</svg>"}(e||""))}`}xe([de({type:String})],Ce.prototype,"hash",void 0),Ce=xe([ue("identicon-img")],Ce);const Pe=e=>null!=e?e:$;var Se=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};let Oe=class extends le{constructor(e){super(),e&&(this.name=e.name||this.name,this.description=e.description||this.description,this.images=e.images||this.images||[],this.button=e.button||this.button,this.address=e.address)}static get styles(){return[o`
                :host {
                    display: block;
                    background-color: var(--foreground-color);
                    border-radius: 8px;
                    padding: 1rem;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                    width: 270px;
                    height: 370px;
                    margin-bottom: 1rem;
                }

                .title-row {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }

                .description {
                    height: 4rem;
                    max-width: 100%;
                    overflow: scroll;
                    overflow-wrap: break-word;
                    position: relative;
                }

                .description::after {
                    content: "";
                    position: absolute;
                    bottom: 0;
                    left: 0;
                    right: 0;
                    height: 2rem;
                    background-image: linear-gradient(to top, var(--foreground-color), transparent);
                }

                .images {
                    display: flex;
                    flex-wrap: wrap;
                    gap: 1rem;
                    margin-top: 1rem;
                    margin-bottom: 1rem;
                    height: 128px;
                    justify-content: center;
                }

                identicon-img {
                    height: 100%;
                    border-radius: 8px;
                    object-fit: cover;
                }

                kana-button {
                    display: block;
                    margin-top: 1rem;
                }

                a {
                    text-decoration: none;
                }
            `,be()]}render(){return V`
            <div class="title-row">
                <h2>${this.name}</h2>
                ${""}
            </div>
            <div class="description">
                ${this.description}
            </div>
            <div class="images">
                <identicon-img hash="${Pe(this.address)}">
                </identicon-img>
            </div>
            <a href="${Pe(this.button.link)}">
                <kana-button>
                    ${this.button.text}
                </kana-button>
            </a>
        `}};Se([de({type:String})],Oe.prototype,"name",void 0),Se([de({type:String})],Oe.prototype,"description",void 0),Se([de({type:Array})],Oe.prototype,"images",void 0),Se([de()],Oe.prototype,"button",void 0),Se([de({type:String})],Oe.prototype,"address",void 0),Oe=Se([ue("kana-card")],Oe);const Be=new WeakMap;function Re(e){return t=>{if(function(e,t){let n=t;for(;n;){if(Be.get(n)===e)return!0;n=Object.getPrototypeOf(n)}return!1}(e,t))return t;const n=e(t);return Be.set(n,e),n}}const Te=Re((e=>class extends e{static get properties(){return{disabled:{type:Boolean,reflect:!0}}}constructor(){super(),this._requestedToBeDisabled=!1,this.__isUserSettingDisabled=!0,this.__restoreDisabledTo=!1,this.disabled=!1}makeRequestToBeDisabled(){!1===this._requestedToBeDisabled&&(this._requestedToBeDisabled=!0,this.__restoreDisabledTo=this.disabled,this.__internalSetDisabled(!0))}retractRequestToBeDisabled(){!0===this._requestedToBeDisabled&&(this._requestedToBeDisabled=!1,this.__internalSetDisabled(this.__restoreDisabledTo))}__internalSetDisabled(e){this.__isUserSettingDisabled=!1,this.disabled=e,this.__isUserSettingDisabled=!0}requestUpdate(e,t){super.requestUpdate(e,t),"disabled"===e&&(this.__isUserSettingDisabled&&(this.__restoreDisabledTo=this.disabled),!1===this.disabled&&!0===this._requestedToBeDisabled&&this.__internalSetDisabled(!0))}})),Ie=Re((e=>class extends(Te(e)){static get properties(){return{tabIndex:{type:Number,reflect:!0,attribute:"tabindex"}}}constructor(){super(),this.__isUserSettingTabIndex=!0,this.__restoreTabIndexTo=0,this.__internalSetTabIndex(0)}makeRequestToBeDisabled(){super.makeRequestToBeDisabled(),!1===this._requestedToBeDisabled&&null!=this.tabIndex&&(this.__restoreTabIndexTo=this.tabIndex)}retractRequestToBeDisabled(){super.retractRequestToBeDisabled(),!0===this._requestedToBeDisabled&&this.__internalSetTabIndex(this.__restoreTabIndexTo)}__internalSetTabIndex(e){this.__isUserSettingTabIndex=!1,this.tabIndex=e,this.__isUserSettingTabIndex=!0}requestUpdate(e,t){super.requestUpdate(e,t),"disabled"===e&&(this.disabled?this.__internalSetTabIndex(-1):this.__internalSetTabIndex(this.__restoreTabIndexTo)),"tabIndex"===e&&(this.__isUserSettingTabIndex&&null!=this.tabIndex&&(this.__restoreTabIndexTo=this.tabIndex),-1!==this.tabIndex&&!0===this._requestedToBeDisabled&&this.__internalSetTabIndex(-1))}firstUpdated(e){super.firstUpdated(e),this.disabled&&this.__internalSetTabIndex(-1)}}));function Fe(e="google-chrome"){const t=window.chrome;if("chromium"===e)return t;const n=window.navigator,r=n.vendor,s=void 0!==window.opr,i=n.userAgent.indexOf("Edge")>-1,a=n.userAgent.match("CriOS");return"ios"===e?a:"google-chrome"===e?null!=t&&"Google Inc."===r&&!1===s&&!1===i:void 0}const Le=/Trident/.test(window.navigator.userAgent),Ue=(Fe(),Fe("ios"),Fe("chromium"),navigator.appVersion.indexOf("Mac"),e=>" "===e.key||"Enter"===e.key),De=e=>" "===e.key;class Me extends(Ie(le)){static get properties(){return{active:{type:Boolean,reflect:!0},type:{type:String,reflect:!0}}}render(){return V` <div class="button-content" id="${this._buttonId}"><slot></slot></div> `}static get styles(){return[o`
        :host {
          position: relative;
          display: inline-flex;
          box-sizing: border-box;
          vertical-align: middle;
          line-height: 24px;
          background: #eee; /* minimal styling to make it recognizable as btn */
          padding: 8px; /* padding to fix with min-height */
          outline: none; /* focus style handled below */
          cursor: default; /* we should always see the default arrow, never a caret */
          /* TODO: remove, native button also allows selection. Could be usability concern... */
          user-select: none;
          -webkit-user-select: none;
          -moz-user-select: none;
          -ms-user-select: none;
        }

        :host::before {
          content: '';

          /* center vertically and horizontally */
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);

          /* Minimum click area to meet [WCAG Success Criterion 2.5.5 Target Size (Enhanced)](https://www.w3.org/TR/WCAG22/#target-size-enhanced) */
          min-height: 44px;
          min-width: 44px;
          width: 100%;
          height: 100%;
        }

        .button-content {
          display: flex;
          align-items: center;
          justify-content: center;
        }

        /* Show focus styles on keyboard focus. */
        :host(:focus:not([disabled])),
        :host(:focus-visible) {
          /* if you extend, please overwrite */
          outline: 2px solid #bde4ff;
        }

        /* Hide focus styles if they're not needed, for example,
        when an element receives focus via the mouse. */
        :host(:focus:not(:focus-visible)) {
          outline: 0;
        }

        :host(:hover) {
          /* if you extend, please overwrite */
          background: #f4f6f7;
        }

        :host(:active), /* keep native :active to render quickly where possible */
        :host([active]) /* use custom [active] to fix IE11 */ {
          /* if you extend, please overwrite */
          background: gray;
        }

        :host([hidden]) {
          display: none;
        }

        :host([disabled]) {
          pointer-events: none;
          /* if you extend, please overwrite */
          background: lightgray;
          color: #adadad;
          fill: #adadad;
        }
      `]}constructor(){super(),this.type="button",this.active=!1,this._buttonId=`button-${Math.random().toString(36).substr(2,10)}`,Le&&this.updateComplete.then((()=>{this.hasAttribute("aria-labelledby")||this.setAttribute("aria-labelledby",this._buttonId)})),this.__setupEvents()}connectedCallback(){super.connectedCallback(),this.hasAttribute("role")||this.setAttribute("role","button")}updated(e){super.updated(e),e.has("disabled")&&this.setAttribute("aria-disabled",`${this.disabled}`)}__setupEvents(){this.addEventListener("mousedown",this.__mousedownHandler),this.addEventListener("keydown",this.__keydownHandler),this.addEventListener("keyup",this.__keyupHandler)}__mousedownHandler(){this.active=!0;const e=()=>{this.active=!1,document.removeEventListener("mouseup",e),this.removeEventListener("mouseup",e)};document.addEventListener("mouseup",e),this.addEventListener("mouseup",e)}__keydownHandler(e){if(this.active||!Ue(e))return void(De(e)&&e.preventDefault());De(e)&&e.preventDefault(),this.active=!0;const t=e=>{Ue(e)&&(this.active=!1,document.removeEventListener("keyup",t,!0))};document.addEventListener("keyup",t,!0)}__keyupHandler(e){if(Ue(e)){if(e.target&&e.target!==this)return;this.click()}}}class je extends Me{constructor(){super(),this.type="reset",this.__setupDelegationInConstructor(),this.__submitAndResetHelperButton=document.createElement("button"),this.__preventEventLeakage=this.__preventEventLeakage.bind(this)}connectedCallback(){super.connectedCallback(),this.updateComplete.then((()=>{this._setupSubmitAndResetHelperOnConnected()}))}disconnectedCallback(){super.disconnectedCallback(),this._teardownSubmitAndResetHelperOnDisconnected()}__preventEventLeakage(e){e.target===this.__submitAndResetHelperButton&&e.stopImmediatePropagation()}_setupSubmitAndResetHelperOnConnected(){this.appendChild(this.__submitAndResetHelperButton),this._form=this.__submitAndResetHelperButton.form,this.removeChild(this.__submitAndResetHelperButton),this._form&&this._form.addEventListener("click",this.__preventEventLeakage)}_teardownSubmitAndResetHelperOnDisconnected(){this._form&&this._form.removeEventListener("click",this.__preventEventLeakage)}async __clickDelegationHandler(e){this._form||await this.updateComplete,"submit"!==this.type&&"reset"!==this.type||e.target!==this||!this._form||(this.__submitAndResetHelperButton.type=this.type,this._form.appendChild(this.__submitAndResetHelperButton),this.__submitAndResetHelperButton.click(),this._form.removeChild(this.__submitAndResetHelperButton))}__setupDelegationInConstructor(){this.addEventListener("click",this.__clickDelegationHandler,!0)}}const Ve=new WeakMap;class He extends je{get _nativeButtonNode(){return Ve.get(this._form)?.helper||null}constructor(){super(),this.type="submit",this.__implicitSubmitHelperButton=null}_setupSubmitAndResetHelperOnConnected(){if(super._setupSubmitAndResetHelperOnConnected(),!this._form||"submit"!==this.type)return;const e=this._form;if(!Ve.get(this._form)){const t=function(){const e=document.createElement("button");return e.tabIndex=-1,e.type="submit",e.setAttribute("aria-hidden","true"),e.style.cssText="\n    position: absolute;\n    top: 0;\n    left: 0;\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    overflow: hidden;\n    white-space: nowrap;\n    height: 1px;\n    width: 1px;\n    padding: 0; /* reset default agent styles */\n    border: 0; /* reset default agent styles */\n  ",e}(),n=document.createElement("div");n.appendChild(t),Ve.set(this._form,{lionButtons:new Set,helper:t,observer:new MutationObserver((()=>{e.appendChild(n)}))}),e.appendChild(n),Ve.get(e)?.observer.observe(n,{childList:!0})}Ve.get(e)?.lionButtons.add(this)}_teardownSubmitAndResetHelperOnDisconnected(){if(super._teardownSubmitAndResetHelperOnDisconnected(),this._form){const e=Ve.get(this._form);e&&(e.lionButtons.delete(this),e.lionButtons.size||(this._form.contains(e.helper)&&e.helper.remove(),Ve.get(this._form)?.observer.disconnect(),Ve.delete(this._form)))}}}var $e=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};const Ge=[o`
        :host(:hover) {
            background-color: var(--highlighted-light-color);
            color: var(--background-light-color);
        }

        :host(:active), :host([active]) {
            background-color: var(--highlighted-dark-color);
            color: var(--foreground-color);
        }

        :host {
            justify-content: center;
            align-items: center;
            border-radius: 5px;
        }
    `,function(e=""){return o`
        :host {
            background-color: var(--highlighted${i(e)}-color);
            color: var(--foreground${i(e)}-color);
        }
    `}()];let ze=class extends Me{static get styles(){return[...super.styles,...Ge]}};ze.formAssociated=!0,ze=$e([ue("kana-button")],ze);let qe=class extends He{constructor(){super()}static get styles(){return[...super.styles,...Ge]}};qe.formAssociated=!0,qe=$e([ue("kana-button-submit")],qe);let Qe=class extends le{static get styles(){return[o`
                @font-face {
                    font-family: 'Material Icons';
                    font-style: normal;
                    font-weight: 400;
                    src: url("material-icons.ttf") format('truetype');
                }
                
                :host {
                    font-family: 'Material Icons';
                    font-weight: normal;
                    font-style: normal;
                    font-size: 24px;
                    line-height: 1;
                    letter-spacing: normal;
                    text-transform: none;
                    display: inline-block;
                    white-space: nowrap;
                    word-wrap: normal;
                    direction: ltr;
                }
            `]}render(){return V`<span><slot></slot></span>`}};Qe=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}([ue("kana-icon")],Qe);let Je=class extends le{static get styles(){return o`
      :host {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        flex: 1;
        z-index: 1;
      }

      .loader {
        display: inline-block;
        font-size: 8rem;
        color: #fff;
        animation: rotation 1.5s linear infinite;
      }

      @keyframes rotation {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(359deg);
        }
      }
    `}render(){return V`
      <kana-icon class="loader">
        sync
      </kana-icon>
    `}};Je=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}([ue("kana-loading-screen")],Je);const Ke=e=>(...t)=>({_$litDirective$:e,values:t});class We{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,n){this._$Ct=e,this._$AM=t,this._$Ci=n}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}const{I:Ye}=re,Ze=()=>document.createComment(""),Xe=(e,t,n)=>{var r;const s=e._$AA.parentNode,i=void 0===t?e._$AB:t._$AA;if(void 0===n){const t=s.insertBefore(Ze(),i),r=s.insertBefore(Ze(),i);n=new Ye(t,r,e,e.options)}else{const t=n._$AB.nextSibling,a=n._$AM,o=a!==e;if(o){let t;null===(r=n._$AQ)||void 0===r||r.call(n,e),n._$AM=e,void 0!==n._$AP&&(t=e._$AU)!==a._$AU&&n._$AP(t)}if(t!==i||o){let e=n._$AA;for(;e!==t;){const t=e.nextSibling;s.insertBefore(e,i),e=t}}}return n},et=(e,t,n=e)=>(e._$AI(t,n),e),tt={},nt=e=>{var t;null===(t=e._$AP)||void 0===t||t.call(e,!1,!0);let n=e._$AA;const r=e._$AB.nextSibling;for(;n!==r;){const e=n.nextSibling;n.remove(),n=e}},rt=(e,t,n)=>{const r=new Map;for(let s=t;s<=n;s++)r.set(e[s],s);return r},st=Ke(class extends We{constructor(e){if(super(e),2!==e.type)throw Error("repeat() can only be used in text expressions")}dt(e,t,n){let r;void 0===n?n=t:void 0!==t&&(r=t);const s=[],i=[];let a=0;for(const t of e)s[a]=r?r(t,a):a,i[a]=n(t,a),a++;return{values:i,keys:s}}render(e,t,n){return this.dt(e,t,n).values}update(e,[t,n,r]){var s;const i=e._$AH,{values:a,keys:o}=this.dt(t,n,r);if(!Array.isArray(i))return this.ht=o,a;const l=null!==(s=this.ht)&&void 0!==s?s:this.ht=[],c=[];let u,h,d=0,p=i.length-1,f=0,g=a.length-1;for(;d<=p&&f<=g;)if(null===i[d])d++;else if(null===i[p])p--;else if(l[d]===o[f])c[f]=et(i[d],a[f]),d++,f++;else if(l[p]===o[g])c[g]=et(i[p],a[g]),p--,g--;else if(l[d]===o[g])c[g]=et(i[d],a[g]),Xe(e,c[g+1],i[d]),d++,g--;else if(l[p]===o[f])c[f]=et(i[p],a[f]),Xe(e,i[d],i[p]),p--,f++;else if(void 0===u&&(u=rt(o,f,g),h=rt(l,d,p)),u.has(l[d]))if(u.has(l[p])){const t=h.get(o[f]),n=void 0!==t?i[t]:null;if(null===n){const t=Xe(e,i[d]);et(t,a[f]),c[f]=t}else c[f]=et(n,a[f]),Xe(e,i[d],n),i[t]=null;f++}else nt(i[p]),p--;else nt(i[d]),d++;for(;f<=g;){const t=Xe(e,c[g+1]);et(t,a[f]),c[f++]=t}for(;d<=p;){const e=i[d++];null!==e&&nt(e)}return this.ht=o,((e,t=tt)=>{e._$AH=t})(e,c),H}});function it(e,t,n){return e?t():null==n?void 0:n()}const at="6.7.1";function ot(e,t,n){const r=t.split("|").map((e=>e.trim()));for(let n=0;n<r.length;n++)switch(t){case"any":return;case"bigint":case"boolean":case"number":case"string":if(typeof e===t)return}const s=new Error(`invalid value for type ${t}`);throw s.code="INVALID_ARGUMENT",s.argument=`value.${n}`,s.value=e,s}async function lt(e){const t=Object.keys(e),n=await Promise.all(t.map((t=>Promise.resolve(e[t]))));return n.reduce(((e,n,r)=>(e[t[r]]=n,e)),{})}function ct(e,t,n){for(let r in t){let s=t[r];const i=n?n[r]:null;i&&ot(s,i,r),Object.defineProperty(e,r,{enumerable:!0,value:s,writable:!1})}}function ut(e){if(null==e)return"null";if(Array.isArray(e))return"[ "+e.map(ut).join(", ")+" ]";if(e instanceof Uint8Array){const t="0123456789abcdef";let n="0x";for(let r=0;r<e.length;r++)n+=t[e[r]>>4],n+=t[15&e[r]];return n}if("object"==typeof e&&"function"==typeof e.toJSON)return ut(e.toJSON());switch(typeof e){case"boolean":case"symbol":case"number":return e.toString();case"bigint":return BigInt(e).toString();case"string":return JSON.stringify(e);case"object":{const t=Object.keys(e);return t.sort(),"{ "+t.map((t=>`${ut(t)}: ${ut(e[t])}`)).join(", ")+" }"}}return"[ COULD NOT SERIALIZE ]"}function ht(e,t){return e&&e.code===t}function dt(e){return ht(e,"CALL_EXCEPTION")}function pt(e,t,n){{const r=[];if(n){if("message"in n||"code"in n||"name"in n)throw new Error(`value will overwrite populated values: ${ut(n)}`);for(const e in n){const t=n[e];r.push(e+"="+ut(t))}}r.push(`code=${t}`),r.push(`version=${at}`),r.length&&(e+=" ("+r.join(", ")+")")}let r;switch(t){case"INVALID_ARGUMENT":r=new TypeError(e);break;case"NUMERIC_FAULT":case"BUFFER_OVERRUN":r=new RangeError(e);break;default:r=new Error(e)}return ct(r,{code:t}),n&&Object.assign(r,n),r}function ft(e,t,n,r){if(!e)throw pt(t,n,r)}function gt(e,t,n,r){ft(e,t,"INVALID_ARGUMENT",{argument:n,value:r})}function mt(e,t,n){null==n&&(n=""),n&&(n=": "+n),ft(e>=t,"missing arguemnt"+n,"MISSING_ARGUMENT",{count:e,expectedCount:t}),ft(e<=t,"too many arguemnts"+n,"UNEXPECTED_ARGUMENT",{count:e,expectedCount:t})}const yt=["NFD","NFC","NFKD","NFKC"].reduce(((e,t)=>{try{if("test"!=="test".normalize(t))throw new Error("bad");if("NFD"===t){if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken")}e.push(t)}catch(e){}return e}),[]);function bt(e,t,n){if(null==n&&(n=""),e!==t){let e=n,t="new";n&&(e+=".",t+=" "+n),ft(!1,`private constructor; use ${e}from* methods`,"UNSUPPORTED_OPERATION",{operation:t})}}function vt(e,t,n){if(e instanceof Uint8Array)return n?new Uint8Array(e):e;if("string"==typeof e&&e.match(/^0x([0-9a-f][0-9a-f])*$/i)){const t=new Uint8Array((e.length-2)/2);let n=2;for(let r=0;r<t.length;r++)t[r]=parseInt(e.substring(n,n+2),16),n+=2;return t}gt(!1,"invalid BytesLike value",t||"value",e)}function wt(e,t){return vt(e,t,!1)}function At(e,t){return vt(e,t,!0)}function _t(e,t){return!("string"!=typeof e||!e.match(/^0x[0-9A-Fa-f]*$/)||"number"==typeof t&&e.length!==2+2*t||!0===t&&e.length%2!=0)}const Et="0123456789abcdef";function kt(e){const t=wt(e);let n="0x";for(let e=0;e<t.length;e++){const r=t[e];n+=Et[(240&r)>>4]+Et[15&r]}return n}function xt(e){return"0x"+e.map((e=>kt(e).substring(2))).join("")}function Ct(e){return _t(e,!0)?(e.length-2)/2:wt(e).length}function Nt(e,t,n){const r=wt(e);return null!=n&&n>r.length&&ft(!1,"cannot slice beyond data bounds","BUFFER_OVERRUN",{buffer:r,length:r.length,offset:n}),kt(r.slice(null==t?0:t,null==n?r.length:n))}function Pt(e,t,n){const r=wt(e);ft(t>=r.length,"padding exceeds data length","BUFFER_OVERRUN",{buffer:new Uint8Array(r),length:t,offset:t+1});const s=new Uint8Array(t);return s.fill(0),n?s.set(r,t-r.length):s.set(r,0),kt(s)}function St(e,t){return Pt(e,t,!0)}const Ot=BigInt(0),Bt=BigInt(1),Rt=9007199254740991;function Tt(e,t){const n=Ut(e,"value"),r=BigInt(jt(t,"width"));return ft(n>>r===Ot,"overflow","NUMERIC_FAULT",{operation:"fromTwos",fault:"overflow",value:e}),n>>r-Bt?-((~n&(Bt<<r)-Bt)+Bt):n}function It(e,t){let n=Lt(e,"value");const r=BigInt(jt(t,"width")),s=Bt<<r-Bt;return n<Ot?(n=-n,ft(n<=s,"too low","NUMERIC_FAULT",{operation:"toTwos",fault:"overflow",value:e}),(~n&(Bt<<r)-Bt)+Bt):(ft(n<s,"too high","NUMERIC_FAULT",{operation:"toTwos",fault:"overflow",value:e}),n)}function Ft(e,t){const n=Ut(e,"value"),r=BigInt(jt(t,"bits"));return n&(Bt<<r)-Bt}function Lt(e,t){switch(typeof e){case"bigint":return e;case"number":return gt(Number.isInteger(e),"underflow",t||"value",e),gt(e>=-Rt&&e<=Rt,"overflow",t||"value",e),BigInt(e);case"string":try{if(""===e)throw new Error("empty string");return"-"===e[0]&&"-"!==e[1]?-BigInt(e.substring(1)):BigInt(e)}catch(n){gt(!1,`invalid BigNumberish string: ${n.message}`,t||"value",e)}}gt(!1,"invalid BigNumberish value",t||"value",e)}function Ut(e,t){const n=Lt(e,t);return ft(n>=Ot,"unsigned value cannot be negative","NUMERIC_FAULT",{fault:"overflow",operation:"getUint",value:e}),n}const Dt="0123456789abcdef";function Mt(e){if(e instanceof Uint8Array){let t="0x0";for(const n of e)t+=Dt[n>>4],t+=Dt[15&n];return BigInt(t)}return Lt(e)}function jt(e,t){switch(typeof e){case"bigint":return gt(e>=-Rt&&e<=Rt,"overflow",t||"value",e),Number(e);case"number":return gt(Number.isInteger(e),"underflow",t||"value",e),gt(e>=-Rt&&e<=Rt,"overflow",t||"value",e),e;case"string":try{if(""===e)throw new Error("empty string");return jt(BigInt(e),t)}catch(n){gt(!1,`invalid numeric string: ${n.message}`,t||"value",e)}}gt(!1,"invalid numeric value",t||"value",e)}function Vt(e,t){let n=Ut(e,"value").toString(16);if(null==t)n.length%2&&(n="0"+n);else{const r=jt(t,"width");for(ft(2*r>=n.length,`value exceeds width (${r} bits)`,"NUMERIC_FAULT",{operation:"toBeHex",fault:"overflow",value:e});n.length<2*r;)n="0"+n}return"0x"+n}function Ht(e){const t=Ut(e,"value");if(t===Ot)return new Uint8Array([]);let n=t.toString(16);n.length%2&&(n="0"+n);const r=new Uint8Array(n.length/2);for(let e=0;e<r.length;e++){const t=2*e;r[e]=parseInt(n.substring(t,t+2),16)}return r}function $t(e){let t=kt(function(e){return _t(e,!0)||e instanceof Uint8Array}(e)?e:Ht(e)).substring(2);for(;t.startsWith("0");)t=t.substring(1);return""===t&&(t="0"),"0x"+t}const Gt=32,zt=new Uint8Array(Gt),qt=["then"],Qt={};function Jt(e,t){const n=new Error(`deferred error during ABI decoding triggered accessing ${e}`);throw n.error=t,n}class Kt extends Array{#e;constructor(...e){const t=e[0];let n=e[1],r=(e[2]||[]).slice(),s=!0;t!==Qt&&(n=e,r=[],s=!1),super(n.length),n.forEach(((e,t)=>{this[t]=e}));const i=r.reduce(((e,t)=>("string"==typeof t&&e.set(t,(e.get(t)||0)+1),e)),new Map);if(this.#e=Object.freeze(n.map(((e,t)=>{const n=r[t];return null!=n&&1===i.get(n)?n:null}))),s)return Object.freeze(this),new Proxy(this,{get:(e,t,n)=>{if("string"==typeof t){if(t.match(/^[0-9]+$/)){const n=jt(t,"%index");if(n<0||n>=this.length)throw new RangeError("out of result range");const r=e[n];return r instanceof Error&&Jt(`index ${n}`,r),r}if(qt.indexOf(t)>=0)return Reflect.get(e,t,n);const r=e[t];if(r instanceof Function)return function(...t){return r.apply(this===n?e:this,t)};if(!(t in e))return e.getValue.apply(this===n?e:this,[t])}return Reflect.get(e,t,n)}})}toArray(){const e=[];return this.forEach(((t,n)=>{t instanceof Error&&Jt(`index ${n}`,t),e.push(t)})),e}toObject(){return this.#e.reduce(((e,t,n)=>(ft(null!=t,"value at index ${ index } unnamed","UNSUPPORTED_OPERATION",{operation:"toObject()"}),t in e||(e[t]=this.getValue(t)),e)),{})}slice(e,t){null==e&&(e=0),e<0&&(e+=this.length)<0&&(e=0),null==t&&(t=this.length),t<0&&(t+=this.length)<0&&(t=0),t>this.length&&(t=this.length);const n=[],r=[];for(let s=e;s<t;s++)n.push(this[s]),r.push(this.#e[s]);return new Kt(Qt,n,r)}filter(e,t){const n=[],r=[];for(let s=0;s<this.length;s++){const i=this[s];i instanceof Error&&Jt(`index ${s}`,i),e.call(t,i,s,this)&&(n.push(i),r.push(this.#e[s]))}return new Kt(Qt,n,r)}map(e,t){const n=[];for(let r=0;r<this.length;r++){const s=this[r];s instanceof Error&&Jt(`index ${r}`,s),n.push(e.call(t,s,r,this))}return n}getValue(e){const t=this.#e.indexOf(e);if(-1===t)return;const n=this[t];return n instanceof Error&&Jt(`property ${JSON.stringify(e)}`,n.error),n}static fromItems(e,t){return new Kt(Qt,e,t)}}function Wt(e){let t=Ht(e);return ft(t.length<=Gt,"value out-of-bounds","BUFFER_OVERRUN",{buffer:t,length:Gt,offset:t.length}),t.length!==Gt&&(t=At(xt([zt.slice(t.length%Gt),t]))),t}class Yt{name;type;localName;dynamic;constructor(e,t,n,r){ct(this,{name:e,type:t,localName:n,dynamic:r},{name:"string",type:"string",localName:"string",dynamic:"boolean"})}_throwError(e,t){gt(!1,e,this.localName,t)}}class Zt{#t;#n;constructor(){this.#t=[],this.#n=0}get data(){return xt(this.#t)}get length(){return this.#n}#r(e){return this.#t.push(e),this.#n+=e.length,e.length}appendWriter(e){return this.#r(At(e.data))}writeBytes(e){let t=At(e);const n=t.length%Gt;return n&&(t=At(xt([t,zt.slice(n)]))),this.#r(t)}writeValue(e){return this.#r(Wt(e))}writeUpdatableValue(){const e=this.#t.length;return this.#t.push(zt),this.#n+=Gt,t=>{this.#t[e]=Wt(t)}}}class Xt{allowLoose;#t;#s;constructor(e,t){ct(this,{allowLoose:!!t}),this.#t=At(e),this.#s=0}get data(){return kt(this.#t)}get dataLength(){return this.#t.length}get consumed(){return this.#s}get bytes(){return new Uint8Array(this.#t)}#i(e,t,n){let r=Math.ceil(t/Gt)*Gt;return this.#s+r>this.#t.length&&(this.allowLoose&&n&&this.#s+t<=this.#t.length?r=t:ft(!1,"data out-of-bounds","BUFFER_OVERRUN",{buffer:At(this.#t),length:this.#t.length,offset:this.#s+r})),this.#t.slice(this.#s,this.#s+r)}subReader(e){return new Xt(this.#t.slice(this.#s+e),this.allowLoose)}readBytes(e,t){let n=this.#i(0,e,!!t);return this.#s+=n.length,n.slice(0,e)}readValue(){return Mt(this.readBytes(Gt))}readIndex(){return jt(Mt(this.readBytes(Gt)))}}function en(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}function tn(e,...t){if(!(e instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(t.length>0&&!t.includes(e.length))throw new TypeError(`Expected Uint8Array of length ${t}, not of length=${e.length}`)}const nn={number:en,bool:function(e){if("boolean"!=typeof e)throw new Error(`Expected boolean, not ${e}`)},bytes:tn,hash:function(e){if("function"!=typeof e||"function"!=typeof e.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");en(e.outputLen),en(e.blockLen)},exists:function(e,t=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(t&&e.finished)throw new Error("Hash#digest() has already been called")},output:function(e,t){tn(e);const n=t.outputLen;if(e.length<n)throw new Error(`digestInto() expects output buffer of length at least ${n}`)}},rn=BigInt(2**32-1),sn=BigInt(32);function an(e,t=!1){return t?{h:Number(e&rn),l:Number(e>>sn&rn)}:{h:0|Number(e>>sn&rn),l:0|Number(e&rn)}}const on={fromBig:an,split:function(e,t=!1){let n=new Uint32Array(e.length),r=new Uint32Array(e.length);for(let s=0;s<e.length;s++){const{h:i,l:a}=an(e[s],t);[n[s],r[s]]=[i,a]}return[n,r]},toBig:(e,t)=>BigInt(e>>>0)<<sn|BigInt(t>>>0),shrSH:(e,t,n)=>e>>>n,shrSL:(e,t,n)=>e<<32-n|t>>>n,rotrSH:(e,t,n)=>e>>>n|t<<32-n,rotrSL:(e,t,n)=>e<<32-n|t>>>n,rotrBH:(e,t,n)=>e<<64-n|t>>>n-32,rotrBL:(e,t,n)=>e>>>n-32|t<<64-n,rotr32H:(e,t)=>t,rotr32L:(e,t)=>e,rotlSH:(e,t,n)=>e<<n|t>>>32-n,rotlSL:(e,t,n)=>t<<n|e>>>32-n,rotlBH:(e,t,n)=>t<<n-32|e>>>64-n,rotlBL:(e,t,n)=>e<<n-32|t>>>64-n,add:function(e,t,n,r){const s=(t>>>0)+(r>>>0);return{h:e+n+(s/2**32|0)|0,l:0|s}},add3L:(e,t,n)=>(e>>>0)+(t>>>0)+(n>>>0),add3H:(e,t,n,r)=>t+n+r+(e/2**32|0)|0,add4L:(e,t,n,r)=>(e>>>0)+(t>>>0)+(n>>>0)+(r>>>0),add4H:(e,t,n,r,s)=>t+n+r+s+(e/2**32|0)|0,add5H:(e,t,n,r,s,i)=>t+n+r+s+i+(e/2**32|0)|0,add5L:(e,t,n,r,s)=>(e>>>0)+(t>>>0)+(n>>>0)+(r>>>0)+(s>>>0)},ln=on,cn=("object"==typeof self&&"crypto"in self&&self.crypto,e=>new DataView(e.buffer,e.byteOffset,e.byteLength)),un=(e,t)=>e<<32-t|e>>>t;if(68!==new Uint8Array(new Uint32Array([287454020]).buffer)[0])throw new Error("Non little-endian hardware is not supported");function hn(e){if("string"==typeof e&&(e=function(e){if("string"!=typeof e)throw new TypeError("utf8ToBytes expected string, got "+typeof e);return(new TextEncoder).encode(e)}(e)),!(e instanceof Uint8Array))throw new TypeError(`Expected input type is Uint8Array (got ${typeof e})`);return e}Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));class dn{clone(){return this._cloneInto()}}function pn(e){const t=t=>e().update(hn(t)).digest(),n=e();return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=()=>e(),t}const[fn,gn,mn]=[[],[],[]],yn=BigInt(0),bn=BigInt(1),vn=BigInt(2),wn=BigInt(7),An=BigInt(256),_n=BigInt(113);for(let e=0,t=bn,n=1,r=0;e<24;e++){[n,r]=[r,(2*n+3*r)%5],fn.push(2*(5*r+n)),gn.push((e+1)*(e+2)/2%64);let s=yn;for(let e=0;e<7;e++)t=(t<<bn^(t>>wn)*_n)%An,t&vn&&(s^=bn<<(bn<<BigInt(e))-bn);mn.push(s)}const[En,kn]=ln.split(mn,!0),xn=(e,t,n)=>n>32?ln.rotlBH(e,t,n):ln.rotlSH(e,t,n),Cn=(e,t,n)=>n>32?ln.rotlBL(e,t,n):ln.rotlSL(e,t,n);class Nn extends dn{constructor(e,t,n,r=!1,s=24){if(super(),this.blockLen=e,this.suffix=t,this.outputLen=n,this.enableXOF=r,this.rounds=s,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,nn.number(n),0>=this.blockLen||this.blockLen>=200)throw new Error("Sha3 supports only keccak-f1600 function");var i;this.state=new Uint8Array(200),this.state32=(i=this.state,new Uint32Array(i.buffer,i.byteOffset,Math.floor(i.byteLength/4)))}keccak(){!function(e,t=24){const n=new Uint32Array(10);for(let r=24-t;r<24;r++){for(let t=0;t<10;t++)n[t]=e[t]^e[t+10]^e[t+20]^e[t+30]^e[t+40];for(let t=0;t<10;t+=2){const r=(t+8)%10,s=(t+2)%10,i=n[s],a=n[s+1],o=xn(i,a,1)^n[r],l=Cn(i,a,1)^n[r+1];for(let n=0;n<50;n+=10)e[t+n]^=o,e[t+n+1]^=l}let t=e[2],s=e[3];for(let n=0;n<24;n++){const r=gn[n],i=xn(t,s,r),a=Cn(t,s,r),o=fn[n];t=e[o],s=e[o+1],e[o]=i,e[o+1]=a}for(let t=0;t<50;t+=10){for(let r=0;r<10;r++)n[r]=e[t+r];for(let r=0;r<10;r++)e[t+r]^=~n[(r+2)%10]&n[(r+4)%10]}e[0]^=En[r],e[1]^=kn[r]}n.fill(0)}(this.state32,this.rounds),this.posOut=0,this.pos=0}update(e){nn.exists(this);const{blockLen:t,state:n}=this,r=(e=hn(e)).length;for(let s=0;s<r;){const i=Math.min(t-this.pos,r-s);for(let t=0;t<i;t++)n[this.pos++]^=e[s++];this.pos===t&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;const{state:e,suffix:t,pos:n,blockLen:r}=this;e[n]^=t,0!=(128&t)&&n===r-1&&this.keccak(),e[r-1]^=128,this.keccak()}writeInto(e){nn.exists(this,!1),nn.bytes(e),this.finish();const t=this.state,{blockLen:n}=this;for(let r=0,s=e.length;r<s;){this.posOut>=n&&this.keccak();const i=Math.min(n-this.posOut,s-r);e.set(t.subarray(this.posOut,this.posOut+i),r),this.posOut+=i,r+=i}return e}xofInto(e){if(!this.enableXOF)throw new Error("XOF is not possible for this instance");return this.writeInto(e)}xof(e){return nn.number(e),this.xofInto(new Uint8Array(e))}digestInto(e){if(nn.output(e,this),this.finished)throw new Error("digest() was already called");return this.writeInto(e),this.destroy(),e}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(e){const{blockLen:t,suffix:n,outputLen:r,rounds:s,enableXOF:i}=this;return e||(e=new Nn(t,n,r,i,s)),e.state32.set(this.state32),e.pos=this.pos,e.posOut=this.posOut,e.finished=this.finished,e.rounds=s,e.suffix=n,e.outputLen=r,e.enableXOF=i,e.destroyed=this.destroyed,e}}const Pn=(e,t,n)=>pn((()=>new Nn(t,e,n))),Sn=(Pn(6,144,28),Pn(6,136,32),Pn(6,104,48),Pn(6,72,64),Pn(1,144,28),Pn(1,136,32)),On=(Pn(1,104,48),Pn(1,72,64),(e,t,n)=>function(e){const t=(t,n)=>e(n).update(hn(t)).digest(),n=e({});return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=t=>e(t),t}(((r={})=>new Nn(t,e,void 0===r.dkLen?n:r.dkLen,!0))));On(31,168,16),On(31,136,32);let Bn=!1;const Rn=function(e){return Sn(e)};let Tn=Rn;function In(e){const t=wt(e,"data");return kt(Tn(t))}In._=Rn,In.lock=function(){Bn=!0},In.register=function(e){if(Bn)throw new TypeError("keccak256 is locked");Tn=e},Object.freeze(In);const Fn=BigInt(0),Ln=BigInt(36);function Un(e){const t=(e=e.toLowerCase()).substring(2).split(""),n=new Uint8Array(40);for(let e=0;e<40;e++)n[e]=t[e].charCodeAt(0);const r=wt(In(n));for(let e=0;e<40;e+=2)r[e>>1]>>4>=8&&(t[e]=t[e].toUpperCase()),(15&r[e>>1])>=8&&(t[e+1]=t[e+1].toUpperCase());return"0x"+t.join("")}const Dn={};for(let e=0;e<10;e++)Dn[String(e)]=String(e);for(let e=0;e<26;e++)Dn[String.fromCharCode(65+e)]=String(10+e);const Mn=15;const jn=function(){const e={};for(let t=0;t<36;t++)e["0123456789abcdefghijklmnopqrstuvwxyz"[t]]=BigInt(t);return e}();function Vn(e){if(gt("string"==typeof e,"invalid address","address",e),e.match(/^(0x)?[0-9a-fA-F]{40}$/)){e.startsWith("0x")||(e="0x"+e);const t=Un(e);return gt(!e.match(/([A-F].*[a-f])|([a-f].*[A-F])/)||t===e,"bad address checksum","address",e),t}if(e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){gt(e.substring(2,4)===function(e){let t=(e=(e=e.toUpperCase()).substring(4)+e.substring(0,2)+"00").split("").map((e=>Dn[e])).join("");for(;t.length>=Mn;){let e=t.substring(0,Mn);t=parseInt(e,10)%97+t.substring(e.length)}let n=String(98-parseInt(t,10)%97);for(;n.length<2;)n="0"+n;return n}(e),"bad icap checksum","address",e);let t=function(e){e=e.toLowerCase();let t=Fn;for(let n=0;n<e.length;n++)t=t*Ln+jn[e[n]];return t}(e.substring(4)).toString(16);for(;t.length<40;)t="0"+t;return Un("0x"+t)}gt(!1,"invalid address","address",e)}const Hn={};function $n(e,t){let n=!1;return t<0&&(n=!0,t*=-1),new qn(Hn,`${n?"":"u"}int${t}`,e,{signed:n,width:t})}function Gn(e,t){return new qn(Hn,`bytes${t||""}`,e,{size:t})}const zn=Symbol.for("_ethers_typed");class qn{type;value;#a;_typedSymbol;constructor(e,t,n,r){null==r&&(r=null),bt(Hn,e,"Typed"),ct(this,{_typedSymbol:zn,type:t,value:n}),this.#a=r,this.format()}format(){if("array"===this.type)throw new Error("");if("dynamicArray"===this.type)throw new Error("");return"tuple"===this.type?`tuple(${this.value.map((e=>e.format())).join(",")})`:this.type}defaultValue(){return 0}minValue(){return 0}maxValue(){return 0}isBigInt(){return!!this.type.match(/^u?int[0-9]+$/)}isData(){return this.type.startsWith("bytes")}isString(){return"string"===this.type}get tupleName(){if("tuple"!==this.type)throw TypeError("not a tuple");return this.#a}get arrayLength(){if("array"!==this.type)throw TypeError("not an array");return!0===this.#a?-1:!1===this.#a?this.value.length:null}static from(e,t){return new qn(Hn,e,t)}static uint8(e){return $n(e,8)}static uint16(e){return $n(e,16)}static uint24(e){return $n(e,24)}static uint32(e){return $n(e,32)}static uint40(e){return $n(e,40)}static uint48(e){return $n(e,48)}static uint56(e){return $n(e,56)}static uint64(e){return $n(e,64)}static uint72(e){return $n(e,72)}static uint80(e){return $n(e,80)}static uint88(e){return $n(e,88)}static uint96(e){return $n(e,96)}static uint104(e){return $n(e,104)}static uint112(e){return $n(e,112)}static uint120(e){return $n(e,120)}static uint128(e){return $n(e,128)}static uint136(e){return $n(e,136)}static uint144(e){return $n(e,144)}static uint152(e){return $n(e,152)}static uint160(e){return $n(e,160)}static uint168(e){return $n(e,168)}static uint176(e){return $n(e,176)}static uint184(e){return $n(e,184)}static uint192(e){return $n(e,192)}static uint200(e){return $n(e,200)}static uint208(e){return $n(e,208)}static uint216(e){return $n(e,216)}static uint224(e){return $n(e,224)}static uint232(e){return $n(e,232)}static uint240(e){return $n(e,240)}static uint248(e){return $n(e,248)}static uint256(e){return $n(e,256)}static uint(e){return $n(e,256)}static int8(e){return $n(e,-8)}static int16(e){return $n(e,-16)}static int24(e){return $n(e,-24)}static int32(e){return $n(e,-32)}static int40(e){return $n(e,-40)}static int48(e){return $n(e,-48)}static int56(e){return $n(e,-56)}static int64(e){return $n(e,-64)}static int72(e){return $n(e,-72)}static int80(e){return $n(e,-80)}static int88(e){return $n(e,-88)}static int96(e){return $n(e,-96)}static int104(e){return $n(e,-104)}static int112(e){return $n(e,-112)}static int120(e){return $n(e,-120)}static int128(e){return $n(e,-128)}static int136(e){return $n(e,-136)}static int144(e){return $n(e,-144)}static int152(e){return $n(e,-152)}static int160(e){return $n(e,-160)}static int168(e){return $n(e,-168)}static int176(e){return $n(e,-176)}static int184(e){return $n(e,-184)}static int192(e){return $n(e,-192)}static int200(e){return $n(e,-200)}static int208(e){return $n(e,-208)}static int216(e){return $n(e,-216)}static int224(e){return $n(e,-224)}static int232(e){return $n(e,-232)}static int240(e){return $n(e,-240)}static int248(e){return $n(e,-248)}static int256(e){return $n(e,-256)}static int(e){return $n(e,-256)}static bytes1(e){return Gn(e,1)}static bytes2(e){return Gn(e,2)}static bytes3(e){return Gn(e,3)}static bytes4(e){return Gn(e,4)}static bytes5(e){return Gn(e,5)}static bytes6(e){return Gn(e,6)}static bytes7(e){return Gn(e,7)}static bytes8(e){return Gn(e,8)}static bytes9(e){return Gn(e,9)}static bytes10(e){return Gn(e,10)}static bytes11(e){return Gn(e,11)}static bytes12(e){return Gn(e,12)}static bytes13(e){return Gn(e,13)}static bytes14(e){return Gn(e,14)}static bytes15(e){return Gn(e,15)}static bytes16(e){return Gn(e,16)}static bytes17(e){return Gn(e,17)}static bytes18(e){return Gn(e,18)}static bytes19(e){return Gn(e,19)}static bytes20(e){return Gn(e,20)}static bytes21(e){return Gn(e,21)}static bytes22(e){return Gn(e,22)}static bytes23(e){return Gn(e,23)}static bytes24(e){return Gn(e,24)}static bytes25(e){return Gn(e,25)}static bytes26(e){return Gn(e,26)}static bytes27(e){return Gn(e,27)}static bytes28(e){return Gn(e,28)}static bytes29(e){return Gn(e,29)}static bytes30(e){return Gn(e,30)}static bytes31(e){return Gn(e,31)}static bytes32(e){return Gn(e,32)}static address(e){return new qn(Hn,"address",e)}static bool(e){return new qn(Hn,"bool",!!e)}static bytes(e){return new qn(Hn,"bytes",e)}static string(e){return new qn(Hn,"string",e)}static array(e,t){throw new Error("not implemented yet")}static tuple(e,t){throw new Error("not implemented yet")}static overrides(e){return new qn(Hn,"overrides",Object.assign({},e))}static isTyped(e){return e&&"object"==typeof e&&"_typedSymbol"in e&&e._typedSymbol===zn}static dereference(e,t){if(qn.isTyped(e)){if(e.type!==t)throw new Error(`invalid type: expecetd ${t}, got ${e.type}`);return e.value}return e}}class Qn extends Yt{constructor(e){super("address","address",e,!1)}defaultValue(){return"0x0000000000000000000000000000000000000000"}encode(e,t){let n=qn.dereference(t,"string");try{n=Vn(n)}catch(e){return this._throwError(e.message,t)}return e.writeValue(n)}decode(e){return Vn(Vt(e.readValue(),20))}}class Jn extends Yt{coder;constructor(e){super(e.name,e.type,"_",e.dynamic),this.coder=e}defaultValue(){return this.coder.defaultValue()}encode(e,t){return this.coder.encode(e,t)}decode(e){return this.coder.decode(e)}}function Kn(e,t,n){let r=[];if(Array.isArray(n))r=n;else if(n&&"object"==typeof n){let e={};r=t.map((t=>{const r=t.localName;return ft(r,"cannot encode object for signature with missing names","INVALID_ARGUMENT",{argument:"values",info:{coder:t},value:n}),ft(!e[r],"cannot encode object for signature with duplicate names","INVALID_ARGUMENT",{argument:"values",info:{coder:t},value:n}),e[r]=!0,n[r]}))}else gt(!1,"invalid tuple value","tuple",n);gt(t.length===r.length,"types/value length mismatch","tuple",n);let s=new Zt,i=new Zt,a=[];t.forEach(((e,t)=>{let n=r[t];if(e.dynamic){let t=i.length;e.encode(i,n);let r=s.writeUpdatableValue();a.push((e=>{r(e+t)}))}else e.encode(s,n)})),a.forEach((e=>{e(s.length)}));let o=e.appendWriter(s);return o+=e.appendWriter(i),o}function Wn(e,t){let n=[],r=[],s=e.subReader(0);return t.forEach((t=>{let i=null;if(t.dynamic){let n=e.readIndex(),r=s.subReader(n);try{i=t.decode(r)}catch(e){if(ht(e,"BUFFER_OVERRUN"))throw e;i=e,i.baseType=t.name,i.name=t.localName,i.type=t.type}}else try{i=t.decode(e)}catch(e){if(ht(e,"BUFFER_OVERRUN"))throw e;i=e,i.baseType=t.name,i.name=t.localName,i.type=t.type}if(null==i)throw new Error("investigate");n.push(i),r.push(t.localName||null)})),Kt.fromItems(n,r)}class Yn extends Yt{coder;length;constructor(e,t,n){super("array",e.type+"["+(t>=0?t:"")+"]",n,-1===t||e.dynamic),ct(this,{coder:e,length:t})}defaultValue(){const e=this.coder.defaultValue(),t=[];for(let n=0;n<this.length;n++)t.push(e);return t}encode(e,t){const n=qn.dereference(t,"array");Array.isArray(n)||this._throwError("expected array value",n);let r=this.length;-1===r&&(r=n.length,e.writeValue(n.length)),mt(n.length,r,"coder array"+(this.localName?" "+this.localName:""));let s=[];for(let e=0;e<n.length;e++)s.push(this.coder);return Kn(e,s,n)}decode(e){let t=this.length;-1===t&&(t=e.readIndex(),ft(t*Gt<=e.dataLength,"insufficient data length","BUFFER_OVERRUN",{buffer:e.bytes,offset:t*Gt,length:e.dataLength}));let n=[];for(let e=0;e<t;e++)n.push(new Jn(this.coder));return Wn(e,n)}}class Zn extends Yt{constructor(e){super("bool","bool",e,!1)}defaultValue(){return!1}encode(e,t){const n=qn.dereference(t,"bool");return e.writeValue(n?1:0)}decode(e){return!!e.readValue()}}class Xn extends Yt{constructor(e,t){super(e,e,t,!0)}defaultValue(){return"0x"}encode(e,t){t=At(t);let n=e.writeValue(t.length);return n+=e.writeBytes(t),n}decode(e){return e.readBytes(e.readIndex(),!0)}}class er extends Xn{constructor(e){super("bytes",e)}decode(e){return kt(super.decode(e))}}class tr extends Yt{size;constructor(e,t){let n="bytes"+String(e);super(n,n,t,!1),ct(this,{size:e},{size:"number"})}defaultValue(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+2*this.size)}encode(e,t){let n=At(qn.dereference(t,this.type));return n.length!==this.size&&this._throwError("incorrect data length",t),e.writeBytes(n)}decode(e){return kt(e.readBytes(this.size))}}const nr=new Uint8Array([]);class rr extends Yt{constructor(e){super("null","",e,!1)}defaultValue(){return null}encode(e,t){return null!=t&&this._throwError("not null",t),e.writeBytes(nr)}decode(e){return e.readBytes(0),null}}const sr=BigInt(0),ir=BigInt(1),ar=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");class or extends Yt{size;signed;constructor(e,t,n){const r=(t?"int":"uint")+8*e;super(r,r,n,!1),ct(this,{size:e,signed:t},{size:"number",signed:"boolean"})}defaultValue(){return 0}encode(e,t){let n=Lt(qn.dereference(t,this.type)),r=Ft(ar,8*Gt);if(this.signed){let e=Ft(r,8*this.size-1);(n>e||n<-(e+ir))&&this._throwError("value out-of-bounds",t),n=It(n,8*Gt)}else(n<sr||n>Ft(r,8*this.size))&&this._throwError("value out-of-bounds",t);return e.writeValue(n)}decode(e){let t=Ft(e.readValue(),8*this.size);return this.signed&&(t=Tt(t,8*this.size)),t}}function lr(e,t,n,r,s){if("BAD_PREFIX"===e||"UNEXPECTED_CONTINUE"===e){let e=0;for(let r=t+1;r<n.length&&n[r]>>6==2;r++)e++;return e}return"OVERRUN"===e?n.length-t-1:0}const cr=Object.freeze({error:function(e,t,n,r,s){gt(!1,`invalid codepoint at offset ${t}; ${e}`,"bytes",n)},ignore:lr,replace:function(e,t,n,r,s){return"OVERLONG"===e?(gt("number"==typeof s,"invalid bad code point for replacement","badCodepoint",s),r.push(s),0):(r.push(65533),lr(e,t,n))}});function ur(e,t){null!=t&&(function(e){ft(yt.indexOf(e)>=0,"platform missing String.prototype.normalize","UNSUPPORTED_OPERATION",{operation:"String.prototype.normalize",info:{form:e}})}(t),e=e.normalize(t));let n=[];for(let t=0;t<e.length;t++){const r=e.charCodeAt(t);if(r<128)n.push(r);else if(r<2048)n.push(r>>6|192),n.push(63&r|128);else if(55296==(64512&r)){t++;const s=e.charCodeAt(t);gt(t<e.length&&56320==(64512&s),"invalid surrogate pair","str",e);const i=65536+((1023&r)<<10)+(1023&s);n.push(i>>18|240),n.push(i>>12&63|128),n.push(i>>6&63|128),n.push(63&i|128)}else n.push(r>>12|224),n.push(r>>6&63|128),n.push(63&r|128)}return new Uint8Array(n)}function hr(e,t){return function(e,t){null==t&&(t=cr.error);const n=wt(e,"bytes"),r=[];let s=0;for(;s<n.length;){const e=n[s++];if(e>>7==0){r.push(e);continue}let i=null,a=null;if(192==(224&e))i=1,a=127;else if(224==(240&e))i=2,a=2047;else{if(240!=(248&e)){s+=t(128==(192&e)?"UNEXPECTED_CONTINUE":"BAD_PREFIX",s-1,n,r);continue}i=3,a=65535}if(s-1+i>=n.length){s+=t("OVERRUN",s-1,n,r);continue}let o=e&(1<<8-i-1)-1;for(let e=0;e<i;e++){let e=n[s];if(128!=(192&e)){s+=t("MISSING_CONTINUE",s,n,r),o=null;break}o=o<<6|63&e,s++}null!==o&&(o>1114111?s+=t("OUT_OF_RANGE",s-1-i,n,r,o):o>=55296&&o<=57343?s+=t("UTF16_SURROGATE",s-1-i,n,r,o):o<=a?s+=t("OVERLONG",s-1-i,n,r,o):r.push(o))}return r}(e,t).map((e=>e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10&1023),56320+(1023&e))))).join("")}class dr extends Xn{constructor(e){super("string",e)}defaultValue(){return""}encode(e,t){return super.encode(e,ur(qn.dereference(t,"string")))}decode(e){return hr(super.decode(e))}}class pr extends Yt{coders;constructor(e,t){let n=!1;const r=[];e.forEach((e=>{e.dynamic&&(n=!0),r.push(e.type)})),super("tuple","tuple("+r.join(",")+")",t,n),ct(this,{coders:Object.freeze(e.slice())})}defaultValue(){const e=[];this.coders.forEach((t=>{e.push(t.defaultValue())}));const t=this.coders.reduce(((e,t)=>{const n=t.localName;return n&&(e[n]||(e[n]=0),e[n]++),e}),{});return this.coders.forEach(((n,r)=>{let s=n.localName;s&&1===t[s]&&("length"===s&&(s="_length"),null==e[s]&&(e[s]=e[r]))})),Object.freeze(e)}encode(e,t){const n=qn.dereference(t,"tuple");return Kn(e,this.coders,n)}decode(e){return Wn(e,this.coders)}}function fr(e){return In(ur(e))}function gr(e){const t=new Set;return e.forEach((e=>t.add(e))),Object.freeze(t)}const mr=gr("external public payable".split(" ")),yr="constant external internal payable private public pure view",br=gr(yr.split(" ")),vr="constructor error event fallback function receive struct",wr=gr(vr.split(" ")),Ar="calldata memory storage payable indexed",_r=gr(Ar.split(" ")),Er=gr([vr,Ar,"tuple returns",yr].join(" ").split(" ")),kr={"(":"OPEN_PAREN",")":"CLOSE_PAREN","[":"OPEN_BRACKET","]":"CLOSE_BRACKET",",":"COMMA","@":"AT"},xr=new RegExp("^(\\s*)"),Cr=new RegExp("^([0-9]+)"),Nr=new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"),Pr=new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"),Sr=new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");class Or{#s;#o;get offset(){return this.#s}get length(){return this.#o.length-this.#s}constructor(e){this.#s=0,this.#o=e.slice()}clone(){return new Or(this.#o)}reset(){this.#s=0}#l(e=0,t=0){return new Or(this.#o.slice(e,t).map((t=>Object.freeze(Object.assign({},t,{match:t.match-e,linkBack:t.linkBack-e,linkNext:t.linkNext-e})))))}popKeyword(e){const t=this.peek();if("KEYWORD"!==t.type||!e.has(t.text))throw new Error(`expected keyword ${t.text}`);return this.pop().text}popType(e){if(this.peek().type!==e)throw new Error(`expected ${e}; got ${JSON.stringify(this.peek())}`);return this.pop().text}popParen(){const e=this.peek();if("OPEN_PAREN"!==e.type)throw new Error("bad start");const t=this.#l(this.#s+1,e.match+1);return this.#s=e.match+1,t}popParams(){const e=this.peek();if("OPEN_PAREN"!==e.type)throw new Error("bad start");const t=[];for(;this.#s<e.match-1;){const e=this.peek().linkNext;t.push(this.#l(this.#s+1,e)),this.#s=e}return this.#s=e.match+1,t}peek(){if(this.#s>=this.#o.length)throw new Error("out-of-bounds");return this.#o[this.#s]}peekKeyword(e){const t=this.peekType("KEYWORD");return null!=t&&e.has(t)?t:null}peekType(e){if(0===this.length)return null;const t=this.peek();return t.type===e?t.text:null}pop(){const e=this.peek();return this.#s++,e}toString(){const e=[];for(let t=this.#s;t<this.#o.length;t++){const n=this.#o[t];e.push(`${n.type}:${n.text}`)}return`<TokenString ${e.join(" ")}>`}}function Br(e){const t=[],n=t=>{const n=i<e.length?JSON.stringify(e[i]):"$EOI";throw new Error(`invalid token ${n} at ${i}: ${t}`)};let r=[],s=[],i=0;for(;i<e.length;){let a=e.substring(i),o=a.match(xr);o&&(i+=o[1].length,a=e.substring(i));const l={depth:r.length,linkBack:-1,linkNext:-1,match:-1,type:"",text:"",offset:i,value:-1};t.push(l);let c=kr[a[0]]||"";if(c){if(l.type=c,l.text=a[0],i++,"OPEN_PAREN"===c)r.push(t.length-1),s.push(t.length-1);else if("CLOSE_PAREN"==c)0===r.length&&n("no matching open bracket"),l.match=r.pop(),t[l.match].match=t.length-1,l.depth--,l.linkBack=s.pop(),t[l.linkBack].linkNext=t.length-1;else if("COMMA"===c)l.linkBack=s.pop(),t[l.linkBack].linkNext=t.length-1,s.push(t.length-1);else if("OPEN_BRACKET"===c)l.type="BRACKET";else if("CLOSE_BRACKET"===c){let e=t.pop().text;if(t.length>0&&"NUMBER"===t[t.length-1].type){const n=t.pop().text;e=n+e,t[t.length-1].value=jt(n)}if(0===t.length||"BRACKET"!==t[t.length-1].type)throw new Error("missing opening bracket");t[t.length-1].text+=e}}else if(o=a.match(Nr),o){if(l.text=o[1],i+=l.text.length,Er.has(l.text)){l.type="KEYWORD";continue}if(l.text.match(Sr)){l.type="TYPE";continue}l.type="ID"}else{if(o=a.match(Cr),!o)throw new Error(`unexpected token ${JSON.stringify(a[0])} at position ${i}`);l.text=o[1],l.type="NUMBER",i+=l.text.length}}return new Or(t.map((e=>Object.freeze(e))))}function Rr(e,t){let n=[];for(const r in t.keys())e.has(r)&&n.push(r);if(n.length>1)throw new Error(`conflicting types: ${n.join(", ")}`)}function Tr(e,t){if(t.peekKeyword(wr)){const n=t.pop().text;if(n!==e)throw new Error(`expected ${e}, got ${n}`)}return t.popType("ID")}function Ir(e,t){const n=new Set;for(;;){const r=e.peekType("KEYWORD");if(null==r||t&&!t.has(r))break;if(e.pop(),n.has(r))throw new Error(`duplicate keywords: ${JSON.stringify(r)}`);n.add(r)}return Object.freeze(n)}function Fr(e){let t=Ir(e,br);return Rr(t,gr("constant payable nonpayable".split(" "))),Rr(t,gr("pure view payable nonpayable".split(" "))),t.has("view")?"view":t.has("pure")?"pure":t.has("payable")?"payable":t.has("nonpayable")?"nonpayable":t.has("constant")?"view":"nonpayable"}function Lr(e,t){return e.popParams().map((e=>Wr.from(e,t)))}function Ur(e){if(e.peekType("AT")){if(e.pop(),e.peekType("NUMBER"))return Lt(e.pop().text);throw new Error("invalid gas")}return null}function Dr(e){if(e.length)throw new Error(`unexpected tokens: ${e.toString()}`)}const Mr=new RegExp(/^(.*)\[([0-9]*)\]$/);function jr(e){const t=e.match(Sr);if(gt(t,"invalid type","type",e),"uint"===e)return"uint256";if("int"===e)return"int256";if(t[2]){const n=parseInt(t[2]);gt(0!==n&&n<=32,"invalid bytes length","type",e)}else if(t[3]){const n=parseInt(t[3]);gt(0!==n&&n<=256&&n%8==0,"invalid numeric width","type",e)}return e}const Vr={},Hr=Symbol.for("_ethers_internal"),$r="_ParamTypeInternal",Gr="_ErrorInternal",zr="_EventInternal",qr="_ConstructorInternal",Qr="_FallbackInternal",Jr="_FunctionInternal",Kr="_StructInternal";class Wr{name;type;baseType;indexed;components;arrayLength;arrayChildren;constructor(e,t,n,r,s,i,a,o){if(bt(e,Vr,"ParamType"),Object.defineProperty(this,Hr,{value:$r}),i&&(i=Object.freeze(i.slice())),"array"===r){if(null==a||null==o)throw new Error("")}else if(null!=a||null!=o)throw new Error("");if("tuple"===r){if(null==i)throw new Error("")}else if(null!=i)throw new Error("");ct(this,{name:t,type:n,baseType:r,indexed:s,components:i,arrayLength:a,arrayChildren:o})}format(e){if(null==e&&(e="sighash"),"json"===e){const t=this.name||"";if(this.isArray()){const e=JSON.parse(this.arrayChildren.format("json"));return e.name=t,e.type+=`[${this.arrayLength<0?"":String(this.arrayLength)}]`,JSON.stringify(e)}const n={type:"tuple"===this.baseType?"tuple":this.type,name:t};return"boolean"==typeof this.indexed&&(n.indexed=this.indexed),this.isTuple()&&(n.components=this.components.map((t=>JSON.parse(t.format(e))))),JSON.stringify(n)}let t="";return this.isArray()?(t+=this.arrayChildren.format(e),t+=`[${this.arrayLength<0?"":String(this.arrayLength)}]`):this.isTuple()?("sighash"!==e&&(t+=this.type),t+="("+this.components.map((t=>t.format(e))).join("full"===e?", ":",")+")"):t+=this.type,"sighash"!==e&&(!0===this.indexed&&(t+=" indexed"),"full"===e&&this.name&&(t+=" "+this.name)),t}isArray(){return"array"===this.baseType}isTuple(){return"tuple"===this.baseType}isIndexable(){return null!=this.indexed}walk(e,t){if(this.isArray()){if(!Array.isArray(e))throw new Error("invalid array value");if(-1!==this.arrayLength&&e.length!==this.arrayLength)throw new Error("array is wrong length");const n=this;return e.map((e=>n.arrayChildren.walk(e,t)))}if(this.isTuple()){if(!Array.isArray(e))throw new Error("invalid tuple value");if(e.length!==this.components.length)throw new Error("array is wrong length");const n=this;return e.map(((e,r)=>n.components[r].walk(e,t)))}return t(this.type,e)}#c(e,t,n,r){if(this.isArray()){if(!Array.isArray(t))throw new Error("invalid array value");if(-1!==this.arrayLength&&t.length!==this.arrayLength)throw new Error("array is wrong length");const s=this.arrayChildren,i=t.slice();return i.forEach(((t,r)=>{s.#c(e,t,n,(e=>{i[r]=e}))})),void r(i)}if(this.isTuple()){const s=this.components;let i;if(Array.isArray(t))i=t.slice();else{if(null==t||"object"!=typeof t)throw new Error("invalid tuple value");i=s.map((e=>{if(!e.name)throw new Error("cannot use object value with unnamed components");if(!(e.name in t))throw new Error(`missing value for component ${e.name}`);return t[e.name]}))}if(i.length!==this.components.length)throw new Error("array is wrong length");return i.forEach(((t,r)=>{s[r].#c(e,t,n,(e=>{i[r]=e}))})),void r(i)}const s=n(this.type,t);s.then?e.push(async function(){r(await s)}()):r(s)}async walkAsync(e,t){const n=[],r=[e];return this.#c(n,e,t,(e=>{r[0]=e})),n.length&&await Promise.all(n),r[0]}static from(e,t){if(Wr.isParamType(e))return e;if("string"==typeof e)try{return Wr.from(Br(e),t)}catch(t){gt(!1,"invalid param type","obj",e)}else if(e instanceof Or){let n="",r="",s=null;Ir(e,gr(["tuple"])).has("tuple")||e.peekType("OPEN_PAREN")?(r="tuple",s=e.popParams().map((e=>Wr.from(e))),n=`tuple(${s.map((e=>e.format())).join(",")})`):(n=jr(e.popType("TYPE")),r=n);let i=null,a=null;for(;e.length&&e.peekType("BRACKET");){const t=e.pop();i=new Wr(Vr,"",n,r,null,s,a,i),a=t.value,n+=t.text,r="array",s=null}let o=null;if(Ir(e,_r).has("indexed")){if(!t)throw new Error("");o=!0}const l=e.peekType("ID")?e.pop().text:"";if(e.length)throw new Error("leftover tokens");return new Wr(Vr,l,n,r,o,s,a,i)}const n=e.name;gt(!n||"string"==typeof n&&n.match(Pr),"invalid name","obj.name",n);let r=e.indexed;null!=r&&(gt(t,"parameter cannot be indexed","obj.indexed",e.indexed),r=!!r);let s=e.type,i=s.match(Mr);if(i){const t=parseInt(i[2]||"-1"),a=Wr.from({type:i[1],components:e.components});return new Wr(Vr,n||"",s,"array",r,null,t,a)}if("tuple"===s||s.startsWith("tuple(")||s.startsWith("(")){const t=null!=e.components?e.components.map((e=>Wr.from(e))):null;return new Wr(Vr,n||"",s,"tuple",r,t,null,null)}return s=jr(e.type),new Wr(Vr,n||"",s,s,r,null,null,null)}static isParamType(e){return e&&e[Hr]===$r}}class Yr{type;inputs;constructor(e,t,n){bt(e,Vr,"Fragment"),ct(this,{type:t,inputs:n=Object.freeze(n.slice())})}static from(e){if("string"==typeof e){try{Yr.from(JSON.parse(e))}catch(e){}return Yr.from(Br(e))}if(e instanceof Or)switch(e.peekKeyword(wr)){case"constructor":return ns.from(e);case"error":return es.from(e);case"event":return ts.from(e);case"fallback":case"receive":return rs.from(e);case"function":return ss.from(e);case"struct":return is.from(e)}else if("object"==typeof e){switch(e.type){case"constructor":return ns.from(e);case"error":return es.from(e);case"event":return ts.from(e);case"fallback":case"receive":return rs.from(e);case"function":return ss.from(e);case"struct":return is.from(e)}ft(!1,`unsupported type: ${e.type}`,"UNSUPPORTED_OPERATION",{operation:"Fragment.from"})}gt(!1,"unsupported frgament object","obj",e)}static isConstructor(e){return ns.isFragment(e)}static isError(e){return es.isFragment(e)}static isEvent(e){return ts.isFragment(e)}static isFunction(e){return ss.isFragment(e)}static isStruct(e){return is.isFragment(e)}}class Zr extends Yr{name;constructor(e,t,n,r){super(e,t,r),gt("string"==typeof n&&n.match(Pr),"invalid identifier","name",n),r=Object.freeze(r.slice()),ct(this,{name:n})}}function Xr(e,t){return"("+t.map((t=>t.format(e))).join("full"===e?", ":",")+")"}class es extends Zr{constructor(e,t,n){super(e,"error",t,n),Object.defineProperty(this,Hr,{value:Gr})}get selector(){return fr(this.format("sighash")).substring(0,10)}format(e){if(null==e&&(e="sighash"),"json"===e)return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});const t=[];return"sighash"!==e&&t.push("error"),t.push(this.name+Xr(e,this.inputs)),t.join(" ")}static from(e){if(es.isFragment(e))return e;if("string"==typeof e)return es.from(Br(e));if(e instanceof Or){const t=Tr("error",e),n=Lr(e);return Dr(e),new es(Vr,t,n)}return new es(Vr,e.name,e.inputs?e.inputs.map(Wr.from):[])}static isFragment(e){return e&&e[Hr]===Gr}}class ts extends Zr{anonymous;constructor(e,t,n,r){super(e,"event",t,n),Object.defineProperty(this,Hr,{value:zr}),ct(this,{anonymous:r})}get topicHash(){return fr(this.format("sighash"))}format(e){if(null==e&&(e="sighash"),"json"===e)return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});const t=[];return"sighash"!==e&&t.push("event"),t.push(this.name+Xr(e,this.inputs)),"sighash"!==e&&this.anonymous&&t.push("anonymous"),t.join(" ")}static getTopicHash(e,t){return t=(t||[]).map((e=>Wr.from(e))),new ts(Vr,e,t,!1).topicHash}static from(e){if(ts.isFragment(e))return e;if("string"==typeof e)try{return ts.from(Br(e))}catch(t){gt(!1,"invalid event fragment","obj",e)}else if(e instanceof Or){const t=Tr("event",e),n=Lr(e,!0),r=!!Ir(e,gr(["anonymous"])).has("anonymous");return Dr(e),new ts(Vr,t,n,r)}return new ts(Vr,e.name,e.inputs?e.inputs.map((e=>Wr.from(e,!0))):[],!!e.anonymous)}static isFragment(e){return e&&e[Hr]===zr}}class ns extends Yr{payable;gas;constructor(e,t,n,r,s){super(e,t,n),Object.defineProperty(this,Hr,{value:qr}),ct(this,{payable:r,gas:s})}format(e){if(ft(null!=e&&"sighash"!==e,"cannot format a constructor for sighash","UNSUPPORTED_OPERATION",{operation:"format(sighash)"}),"json"===e)return JSON.stringify({type:"constructor",stateMutability:this.payable?"payable":"undefined",payable:this.payable,gas:null!=this.gas?this.gas:void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});const t=[`constructor${Xr(e,this.inputs)}`];return t.push(this.payable?"payable":"nonpayable"),null!=this.gas&&t.push(`@${this.gas.toString()}`),t.join(" ")}static from(e){if(ns.isFragment(e))return e;if("string"==typeof e)try{return ns.from(Br(e))}catch(t){gt(!1,"invalid constuctor fragment","obj",e)}else if(e instanceof Or){Ir(e,gr(["constructor"]));const t=Lr(e),n=!!Ir(e,mr).has("payable"),r=Ur(e);return Dr(e),new ns(Vr,"constructor",t,n,r)}return new ns(Vr,"constructor",e.inputs?e.inputs.map(Wr.from):[],!!e.payable,null!=e.gas?e.gas:null)}static isFragment(e){return e&&e[Hr]===qr}}class rs extends Yr{payable;constructor(e,t,n){super(e,"fallback",t),Object.defineProperty(this,Hr,{value:Qr}),ct(this,{payable:n})}format(e){const t=0===this.inputs.length?"receive":"fallback";if("json"===e){const e=this.payable?"payable":"nonpayable";return JSON.stringify({type:t,stateMutability:e})}return`${t}()${this.payable?" payable":""}`}static from(e){if(rs.isFragment(e))return e;if("string"==typeof e)try{return rs.from(Br(e))}catch(t){gt(!1,"invalid fallback fragment","obj",e)}else if(e instanceof Or){const t=e.toString();if(gt(e.peekKeyword(gr(["fallback","receive"])),"type must be fallback or receive","obj",t),"receive"===e.popKeyword(gr(["fallback","receive"]))){const t=Lr(e);return gt(0===t.length,"receive cannot have arguments","obj.inputs",t),Ir(e,gr(["payable"])),Dr(e),new rs(Vr,[],!0)}let n=Lr(e);n.length?gt(1===n.length&&"bytes"===n[0].type,"invalid fallback inputs","obj.inputs",n.map((e=>e.format("minimal"))).join(", ")):n=[Wr.from("bytes")];const r=Fr(e);if(gt("nonpayable"===r||"payable"===r,"fallback cannot be constants","obj.stateMutability",r),Ir(e,gr(["returns"])).has("returns")){const t=Lr(e);gt(1===t.length&&"bytes"===t[0].type,"invalid fallback outputs","obj.outputs",t.map((e=>e.format("minimal"))).join(", "))}return Dr(e),new rs(Vr,n,"payable"===r)}if("receive"===e.type)return new rs(Vr,[],!0);if("fallback"===e.type){const t=[Wr.from("bytes")],n="payable"===e.stateMutability;return new rs(Vr,t,n)}gt(!1,"invalid fallback description","obj",e)}static isFragment(e){return e&&e[Hr]===Qr}}class ss extends Zr{constant;outputs;stateMutability;payable;gas;constructor(e,t,n,r,s,i){super(e,"function",t,r),Object.defineProperty(this,Hr,{value:Jr}),ct(this,{constant:"view"===n||"pure"===n,gas:i,outputs:s=Object.freeze(s.slice()),payable:"payable"===n,stateMutability:n})}get selector(){return fr(this.format("sighash")).substring(0,10)}format(e){if(null==e&&(e="sighash"),"json"===e)return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:null!=this.gas?this.gas:void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e)))),outputs:this.outputs.map((t=>JSON.parse(t.format(e))))});const t=[];return"sighash"!==e&&t.push("function"),t.push(this.name+Xr(e,this.inputs)),"sighash"!==e&&("nonpayable"!==this.stateMutability&&t.push(this.stateMutability),this.outputs&&this.outputs.length&&(t.push("returns"),t.push(Xr(e,this.outputs))),null!=this.gas&&t.push(`@${this.gas.toString()}`)),t.join(" ")}static getSelector(e,t){return t=(t||[]).map((e=>Wr.from(e))),new ss(Vr,e,"view",t,[],null).selector}static from(e){if(ss.isFragment(e))return e;if("string"==typeof e)try{return ss.from(Br(e))}catch(t){gt(!1,"invalid function fragment","obj",e)}else if(e instanceof Or){const t=Tr("function",e),n=Lr(e),r=Fr(e);let s=[];Ir(e,gr(["returns"])).has("returns")&&(s=Lr(e));const i=Ur(e);return Dr(e),new ss(Vr,t,r,n,s,i)}let t=e.stateMutability;return null==t&&(t="payable","boolean"==typeof e.constant?(t="view",e.constant||(t="payable","boolean"!=typeof e.payable||e.payable||(t="nonpayable"))):"boolean"!=typeof e.payable||e.payable||(t="nonpayable")),new ss(Vr,e.name,t,e.inputs?e.inputs.map(Wr.from):[],e.outputs?e.outputs.map(Wr.from):[],null!=e.gas?e.gas:null)}static isFragment(e){return e&&e[Hr]===Jr}}class is extends Zr{constructor(e,t,n){super(e,"struct",t,n),Object.defineProperty(this,Hr,{value:Kr})}format(){throw new Error("@TODO")}static from(e){if("string"==typeof e)try{return is.from(Br(e))}catch(t){gt(!1,"invalid struct fragment","obj",e)}else if(e instanceof Or){const t=Tr("struct",e),n=Lr(e);return Dr(e),new is(Vr,t,n)}return new is(Vr,e.name,e.inputs?e.inputs.map(Wr.from):[])}static isFragment(e){return e&&e[Hr]===Kr}}const as=new Map;as.set(0,"GENERIC_PANIC"),as.set(1,"ASSERT_FALSE"),as.set(17,"OVERFLOW"),as.set(18,"DIVIDE_BY_ZERO"),as.set(33,"ENUM_RANGE_ERROR"),as.set(34,"BAD_STORAGE_DATA"),as.set(49,"STACK_UNDERFLOW"),as.set(50,"ARRAY_RANGE_ERROR"),as.set(65,"OUT_OF_MEMORY"),as.set(81,"UNINITIALIZED_FUNCTION_CALL");const os=new RegExp(/^bytes([0-9]*)$/),ls=new RegExp(/^(u?int)([0-9]*)$/);let cs=null;class us{#u(e){if(e.isArray())return new Yn(this.#u(e.arrayChildren),e.arrayLength,e.name);if(e.isTuple())return new pr(e.components.map((e=>this.#u(e))),e.name);switch(e.baseType){case"address":return new Qn(e.name);case"bool":return new Zn(e.name);case"string":return new dr(e.name);case"bytes":return new er(e.name);case"":return new rr(e.name)}let t=e.type.match(ls);if(t){let n=parseInt(t[2]||"256");return gt(0!==n&&n<=256&&n%8==0,"invalid "+t[1]+" bit length","param",e),new or(n/8,"int"===t[1],e.name)}if(t=e.type.match(os),t){let n=parseInt(t[1]);return gt(0!==n&&n<=32,"invalid bytes length","param",e),new tr(n,e.name)}gt(!1,"invalid type","type",e.type)}getDefaultValue(e){const t=e.map((e=>this.#u(Wr.from(e))));return new pr(t,"_").defaultValue()}encode(e,t){mt(t.length,e.length,"types/values length mismatch");const n=e.map((e=>this.#u(Wr.from(e)))),r=new pr(n,"_"),s=new Zt;return r.encode(s,t),s.data}decode(e,t,n){const r=e.map((e=>this.#u(Wr.from(e))));return new pr(r,"_").decode(new Xt(t,n))}static defaultAbiCoder(){return null==cs&&(cs=new us),cs}static getBuiltinCallException(e,t,n){return function(e,t,n,r){let s="missing revert data",i=null,a=null;if(n){s="execution reverted";const e=wt(n);if(n=kt(n),0===e.length)s+=" (no data present; likely require(false) occurred",i="require(false)";else if(e.length%32!=4)s+=" (could not decode reason; invalid data length)";else if("0x08c379a0"===kt(e.slice(0,4)))try{i=r.decode(["string"],e.slice(4))[0],a={signature:"Error(string)",name:"Error",args:[i]},s+=`: ${JSON.stringify(i)}`}catch(e){s+=" (could not decode reason; invalid string data)"}else if("0x4e487b71"===kt(e.slice(0,4)))try{const t=Number(r.decode(["uint256"],e.slice(4))[0]);a={signature:"Panic(uint256)",name:"Panic",args:[t]},i=`Panic due to ${as.get(t)||"UNKNOWN"}(${t})`,s+=`: ${i}`}catch(e){s+=" (could not decode panic code)"}else s+=" (unknown custom error)"}const o={to:t.to?Vn(t.to):null,data:t.data||"0x"};return t.from&&(o.from=Vn(t.from)),pt(s,"CALL_EXCEPTION",{action:e,data:n,reason:i,transaction:o,invocation:null,revert:a})}(e,t,n,us.defaultAbiCoder())}}function hs(e){return e&&"function"==typeof e.getAddress}async function ds(e,t){const n=await t;return null!=n&&"0x0000000000000000000000000000000000000000"!==n||(ft("string"!=typeof e,"unconfigured name","UNCONFIGURED_NAME",{value:e}),gt(!1,"invalid AddressLike value; did not resolve to a value address","target",e)),Vn(n)}function ps(e,t){return"string"==typeof e?e.match(/^0x[0-9a-f]{40}$/i)?Vn(e):(ft(null!=t,"ENS resolution requires a provider","UNSUPPORTED_OPERATION",{operation:"resolveName"}),ds(e,t.resolveName(e))):hs(e)?ds(e,e.getAddress()):e&&"function"==typeof e.then?ds(e,e):void gt(!1,"unsupported addressable value","target",e)}const fs=new Uint8Array(32);fs.fill(0);const gs=BigInt(-1),ms=BigInt(0),ys=BigInt(1),bs=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),vs=Vt(ys,32),ws=Vt(ms,32),As={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},_s=["name","version","chainId","verifyingContract","salt"];function Es(e){return function(t){return gt("string"==typeof t,`invalid domain value for ${JSON.stringify(e)}`,`domain.${e}`,t),t}}const ks={name:Es("name"),version:Es("version"),chainId:function(e){const t=Lt(e,"domain.chainId");return gt(t>=0,"invalid chain ID","domain.chainId",e),Number.isSafeInteger(t)?Number(t):$t(t)},verifyingContract:function(e){try{return Vn(e).toLowerCase()}catch(e){}gt(!1,'invalid domain value "verifyingContract"',"domain.verifyingContract",e)},salt:function(e){const t=wt(e,"domain.salt");return gt(32===t.length,'invalid domain value "salt"',"domain.salt",e),kt(t)}};function xs(e){{const t=e.match(/^(u?)int(\d*)$/);if(t){const n=""===t[1],r=parseInt(t[2]||"256");gt(r%8==0&&0!==r&&r<=256&&(null==t[2]||t[2]===String(r)),"invalid numeric width","type",e);const s=Ft(bs,n?r-1:r),i=n?(s+ys)*gs:ms;return function(t){const r=Lt(t,"value");return gt(r>=i&&r<=s,`value out-of-bounds for ${e}`,"value",r),Vt(n?It(r,256):r,32)}}}{const t=e.match(/^bytes(\d+)$/);if(t){const n=parseInt(t[1]);return gt(0!==n&&n<=32&&t[1]===String(n),"invalid bytes width","type",e),function(t){return gt(wt(t).length===n,`invalid length for ${e}`,"value",t),function(e){const t=wt(e),n=t.length%32;return n?xt([t,fs.slice(n)]):kt(t)}(t)}}}switch(e){case"address":return function(e){return St(Vn(e),32)};case"bool":return function(e){return e?vs:ws};case"bytes":return function(e){return In(e)};case"string":return function(e){return fr(e)}}return null}function Cs(e,t){return`${e}(${t.map((({name:e,type:t})=>t+" "+e)).join(",")})`}class Ns{primaryType;#h;get types(){return JSON.parse(this.#h)}#d;#p;constructor(e){this.#h=JSON.stringify(e),this.#d=new Map,this.#p=new Map;const t=new Map,n=new Map,r=new Map;Object.keys(e).forEach((e=>{t.set(e,new Set),n.set(e,[]),r.set(e,new Set)}));for(const r in e){const s=new Set;for(const i of e[r]){gt(!s.has(i.name),`duplicate variable name ${JSON.stringify(i.name)} in ${JSON.stringify(r)}`,"types",e),s.add(i.name);const a=i.type.match(/^([^\x5b]*)(\x5b|$)/)[1]||null;gt(a!==r,`circular type reference to ${JSON.stringify(a)}`,"types",e),xs(a)||(gt(n.has(a),`unknown type ${JSON.stringify(a)}`,"types",e),n.get(a).push(r),t.get(r).add(a))}}const s=Array.from(n.keys()).filter((e=>0===n.get(e).length));gt(0!==s.length,"missing primary type","types",e),gt(1===s.length,`ambiguous primary types or unused types: ${s.map((e=>JSON.stringify(e))).join(", ")}`,"types",e),ct(this,{primaryType:s[0]}),function s(i,a){gt(!a.has(i),`circular type reference to ${JSON.stringify(i)}`,"types",e),a.add(i);for(const e of t.get(i))if(n.has(e)){s(e,a);for(const t of a)r.get(t).add(e)}a.delete(i)}(this.primaryType,new Set);for(const[t,n]of r){const r=Array.from(n);r.sort(),this.#d.set(t,Cs(t,e[t])+r.map((t=>Cs(t,e[t]))).join(""))}}getEncoder(e){let t=this.#p.get(e);return t||(t=this.#f(e),this.#p.set(e,t)),t}#f(e){{const t=xs(e);if(t)return t}const t=e.match(/^(.*)(\x5b(\d*)\x5d)$/);if(t){const e=t[1],n=this.getEncoder(e);return r=>{gt(!t[3]||parseInt(t[3])===r.length,`array length mismatch; expected length ${parseInt(t[3])}`,"value",r);let s=r.map(n);return this.#d.has(e)&&(s=s.map(In)),In(xt(s))}}const n=this.types[e];if(n){const t=fr(this.#d.get(e));return e=>{const r=n.map((({name:t,type:n})=>{const r=this.getEncoder(n)(e[t]);return this.#d.has(n)?In(r):r}));return r.unshift(t),xt(r)}}gt(!1,`unknown type: ${e}`,"type",e)}encodeType(e){const t=this.#d.get(e);return gt(t,`unknown type: ${JSON.stringify(e)}`,"name",e),t}encodeData(e,t){return this.getEncoder(e)(t)}hashStruct(e,t){return In(this.encodeData(e,t))}encode(e){return this.encodeData(this.primaryType,e)}hash(e){return this.hashStruct(this.primaryType,e)}_visit(e,t,n){if(xs(e))return n(e,t);const r=e.match(/^(.*)(\x5b(\d*)\x5d)$/);if(r)return gt(!r[3]||parseInt(r[3])===t.length,`array length mismatch; expected length ${parseInt(r[3])}`,"value",t),t.map((e=>this._visit(r[1],e,n)));const s=this.types[e];if(s)return s.reduce(((e,{name:r,type:s})=>(e[r]=this._visit(s,t[r],n),e)),{});gt(!1,`unknown type: ${e}`,"type",e)}visit(e,t){return this._visit(this.primaryType,e,t)}static from(e){return new Ns(e)}static getPrimaryType(e){return Ns.from(e).primaryType}static hashStruct(e,t,n){return Ns.from(t).hashStruct(e,n)}static hashDomain(e){const t=[];for(const n in e){if(null==e[n])continue;const r=As[n];gt(r,`invalid typed-data domain key: ${JSON.stringify(n)}`,"domain",e),t.push({name:n,type:r})}return t.sort(((e,t)=>_s.indexOf(e.name)-_s.indexOf(t.name))),Ns.hashStruct("EIP712Domain",{EIP712Domain:t},e)}static encode(e,t,n){return xt(["0x1901",Ns.hashDomain(e),Ns.from(t).hash(n)])}static hash(e,t,n){return In(Ns.encode(e,t,n))}static async resolveNames(e,t,n,r){e=Object.assign({},e);for(const t in e)null==e[t]&&delete e[t];const s={};e.verifyingContract&&!_t(e.verifyingContract,20)&&(s[e.verifyingContract]="0x");const i=Ns.from(t);i.visit(n,((e,t)=>("address"!==e||_t(t,20)||(s[t]="0x"),t)));for(const e in s)s[e]=await r(e);return e.verifyingContract&&s[e.verifyingContract]&&(e.verifyingContract=s[e.verifyingContract]),{domain:e,value:n=i.visit(n,((e,t)=>"address"===e&&s[t]?s[t]:t))}}static getPayload(e,t,n){Ns.hashDomain(e);const r={},s=[];_s.forEach((t=>{const n=e[t];null!=n&&(r[t]=ks[t](n),s.push({name:t,type:As[t]}))}));const i=Ns.from(t),a=Object.assign({},t);return gt(null==a.EIP712Domain,"types must not contain EIP712Domain type","types.EIP712Domain",t),a.EIP712Domain=s,i.encode(n),{types:a,domain:r,primaryType:i.primaryType,message:i.visit(n,((e,t)=>{if(e.match(/^bytes(\d*)/))return kt(wt(t));if(e.match(/^u?int/))return Lt(t).toString();switch(e){case"address":return t.toLowerCase();case"bool":return!!t;case"string":return gt("string"==typeof t,"invalid string","value",t),t}gt(!1,"unsupported type","type",e)}))}}}function Ps(e,t){return{address:Vn(e),storageKeys:t.map(((e,t)=>(gt(_t(e,32),"invalid slot",`storageKeys[${t}]`,e),e.toLowerCase())))}}function Ss(e){if(Array.isArray(e))return e.map(((t,n)=>Array.isArray(t)?(gt(2===t.length,"invalid slot set",`value[${n}]`,t),Ps(t[0],t[1])):(gt(null!=t&&"object"==typeof t,"invalid address-slot set","value",e),Ps(t.address,t.storageKeys))));gt(null!=e&&"object"==typeof e,"invalid access list","value",e);const t=Object.keys(e).map((t=>{const n=e[t].reduce(((e,t)=>(e[t]=!0,e)),{});return Ps(t,Object.keys(n).sort())}));return t.sort(((e,t)=>e.address.localeCompare(t.address))),t}let Os=async function(e,t){const n=e.url.split(":")[0].toLowerCase();let r;if(ft("http"===n||"https"===n,`unsupported protocol ${n}`,"UNSUPPORTED_OPERATION",{info:{protocol:n},operation:"request"}),ft("https"===n||!e.credentials||e.allowInsecureAuthentication,"insecure authorized connections unsupported","UNSUPPORTED_OPERATION",{operation:"request"}),t){const e=new AbortController;r=e.signal,t.addListener((()=>{e.abort()}))}const s={method:e.method,headers:new Headers(Array.from(e)),body:e.body||void 0,signal:r},i=await fetch(e.url,s),a={};i.headers.forEach(((e,t)=>{a[t.toLowerCase()]=e}));const o=await i.arrayBuffer(),l=null==o?null:new Uint8Array(o);return{statusCode:i.status,statusMessage:i.statusText,headers:a,body:l}};const Bs=new RegExp("^data:([^;:]*)?(;base64)?,(.*)$","i"),Rs=new RegExp("^ipfs://(ipfs/)?(.*)$","i");let Ts=!1;async function Is(e,t){try{const t=e.match(Bs);if(!t)throw new Error("invalid data");return new Vs(200,"OK",{"content-type":t[1]||"text/plain"},t[2]?function(e){e=atob(e);const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return wt(t)}(t[3]):ur(t[3].replace(/%([0-9a-f][0-9a-f])/gi,((e,t)=>String.fromCharCode(parseInt(t,16))))))}catch(t){return new Vs(599,"BAD REQUEST (invalid data: URI)",{},null,new js(e))}}function Fs(e){return async function(t,n){try{const n=t.match(Rs);if(!n)throw new Error("invalid link");return new js(`${e}${n[2]}`)}catch(e){return new Vs(599,"BAD REQUEST (invalid IPFS URI)",{},null,new js(t))}}}const Ls={data:Is,ipfs:Fs("https://gateway.ipfs.io/ipfs/")},Us=new WeakMap;class Ds{#g;#m;constructor(e){this.#g=[],this.#m=!1,Us.set(e,(()=>{if(!this.#m){this.#m=!0;for(const e of this.#g)setTimeout((()=>{e()}),0);this.#g=[]}}))}addListener(e){ft(!this.#m,"singal already cancelled","UNSUPPORTED_OPERATION",{operation:"fetchCancelSignal.addCancelListener"}),this.#g.push(e)}get cancelled(){return this.#m}checkSignal(){ft(!this.cancelled,"cancelled","CANCELLED",{})}}function Ms(e){if(null==e)throw new Error("missing signal; should not happen");return e.checkSignal(),e}class js{#y;#b;#v;#w;#A;#_;#E;#k;#x;#C;#N;#P;#S;#O;get url(){return this.#_}set url(e){this.#_=String(e)}get body(){return null==this.#E?null:new Uint8Array(this.#E)}set body(e){if(null==e)this.#E=void 0,this.#k=void 0;else if("string"==typeof e)this.#E=ur(e),this.#k="text/plain";else if(e instanceof Uint8Array)this.#E=e,this.#k="application/octet-stream";else{if("object"!=typeof e)throw new Error("invalid body");this.#E=ur(JSON.stringify(e)),this.#k="application/json"}}hasBody(){return null!=this.#E}get method(){return this.#w?this.#w:this.hasBody()?"POST":"GET"}set method(e){null==e&&(e=""),this.#w=String(e).toUpperCase()}get headers(){const e=Object.assign({},this.#v);return this.#x&&(e.authorization=`Basic ${function(e){const t=wt(e);let n="";for(let e=0;e<t.length;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(ur(this.#x))}`),this.allowGzip&&(e["accept-encoding"]="gzip"),null==e["content-type"]&&this.#k&&(e["content-type"]=this.#k),this.body&&(e["content-length"]=String(this.body.length)),e}getHeader(e){return this.headers[e.toLowerCase()]}setHeader(e,t){this.#v[String(e).toLowerCase()]=String(t)}clearHeaders(){this.#v={}}[Symbol.iterator](){const e=this.headers,t=Object.keys(e);let n=0;return{next:()=>{if(n<t.length){const r=t[n++];return{value:[r,e[r]],done:!1}}return{value:void 0,done:!0}}}}get credentials(){return this.#x||null}setCredentials(e,t){gt(!e.match(/:/),"invalid basic authentication username","username","[REDACTED]"),this.#x=`${e}:${t}`}get allowGzip(){return this.#b}set allowGzip(e){this.#b=!!e}get allowInsecureAuthentication(){return!!this.#y}set allowInsecureAuthentication(e){this.#y=!!e}get timeout(){return this.#A}set timeout(e){gt(e>=0,"timeout must be non-zero","timeout",e),this.#A=e}get preflightFunc(){return this.#C||null}set preflightFunc(e){this.#C=e}get processFunc(){return this.#N||null}set processFunc(e){this.#N=e}get retryFunc(){return this.#P||null}set retryFunc(e){this.#P=e}constructor(e){this.#_=String(e),this.#y=!1,this.#b=!0,this.#v={},this.#w="",this.#A=3e5,this.#O={slotInterval:250,maxAttempts:12}}toString(){return`<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#E?kt(this.#E):"null"}>`}setThrottleParams(e){null!=e.slotInterval&&(this.#O.slotInterval=e.slotInterval),null!=e.maxAttempts&&(this.#O.maxAttempts=e.maxAttempts)}async#B(e,t,n,r,s){if(e>=this.#O.maxAttempts)return s.makeServerError("exceeded maximum retry limit");ft(Hs()<=t,"timeout","TIMEOUT",{operation:"request.send",reason:"timeout",request:r}),n>0&&await function(e){return new Promise((t=>setTimeout(t,e)))}(n);let i=this.clone();const a=(i.url.split(":")[0]||"").toLowerCase();if(a in Ls){const e=await Ls[a](i.url,Ms(r.#S));if(e instanceof Vs){let t=e;if(this.processFunc){Ms(r.#S);try{t=await this.processFunc(i,t)}catch(e){null!=e.throttle&&"number"==typeof e.stall||t.makeServerError("error in post-processing function",e).assertOk()}}return t}i=e}this.preflightFunc&&(i=await this.preflightFunc(i));const o=await Os(i,Ms(r.#S));let l=new Vs(o.statusCode,o.statusMessage,o.headers,o.body,r);if(301===l.statusCode||302===l.statusCode){try{const n=l.headers.location||"";return i.redirect(n).#B(e+1,t,0,r,l)}catch(e){}return l}if(429===l.statusCode&&(null==this.retryFunc||await this.retryFunc(i,l,e))){const n=l.headers["retry-after"];let s=this.#O.slotInterval*Math.trunc(Math.random()*Math.pow(2,e));return"string"==typeof n&&n.match(/^[1-9][0-9]*$/)&&(s=parseInt(n)),i.clone().#B(e+1,t,s,r,l)}if(this.processFunc){Ms(r.#S);try{l=await this.processFunc(i,l)}catch(n){null!=n.throttle&&"number"==typeof n.stall||l.makeServerError("error in post-processing function",n).assertOk();let s=this.#O.slotInterval*Math.trunc(Math.random()*Math.pow(2,e));return n.stall>=0&&(s=n.stall),i.clone().#B(e+1,t,s,r,l)}}return l}send(){return ft(null==this.#S,"request already sent","UNSUPPORTED_OPERATION",{operation:"fetchRequest.send"}),this.#S=new Ds(this),this.#B(0,Hs()+this.timeout,0,this,new Vs(0,"",{},null,this))}cancel(){ft(null!=this.#S,"request has not been sent","UNSUPPORTED_OPERATION",{operation:"fetchRequest.cancel"});const e=Us.get(this);if(!e)throw new Error("missing signal; should not happen");e()}redirect(e){const t=this.url.split(":")[0].toLowerCase(),n=e.split(":")[0].toLowerCase();ft("GET"===this.method&&("https"!==t||"http"!==n)&&e.match(/^https?:/),"unsupported redirect","UNSUPPORTED_OPERATION",{operation:`redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(e)})`});const r=new js(e);return r.method="GET",r.allowGzip=this.allowGzip,r.timeout=this.timeout,r.#v=Object.assign({},this.#v),this.#E&&(r.#E=new Uint8Array(this.#E)),r.#k=this.#k,r}clone(){const e=new js(this.url);return e.#w=this.#w,this.#E&&(e.#E=this.#E),e.#k=this.#k,e.#v=Object.assign({},this.#v),e.#x=this.#x,this.allowGzip&&(e.allowGzip=!0),e.timeout=this.timeout,this.allowInsecureAuthentication&&(e.allowInsecureAuthentication=!0),e.#C=this.#C,e.#N=this.#N,e.#P=this.#P,e}static lockConfig(){Ts=!0}static getGateway(e){return Ls[e.toLowerCase()]||null}static registerGateway(e,t){if("http"===(e=e.toLowerCase())||"https"===e)throw new Error(`cannot intercept ${e}; use registerGetUrl`);if(Ts)throw new Error("gateways locked");Ls[e]=t}static registerGetUrl(e){if(Ts)throw new Error("gateways locked");Os=e}static createDataGateway(){return Is}static createIpfsGatewayFunc(e){return Fs(e)}}class Vs{#R;#T;#v;#E;#I;#F;toString(){return`<FetchResponse status=${this.statusCode} body=${this.#E?kt(this.#E):"null"}>`}get statusCode(){return this.#R}get statusMessage(){return this.#T}get headers(){return Object.assign({},this.#v)}get body(){return null==this.#E?null:new Uint8Array(this.#E)}get bodyText(){try{return null==this.#E?"":hr(this.#E)}catch(e){ft(!1,"response body is not valid UTF-8 data","UNSUPPORTED_OPERATION",{operation:"bodyText",info:{response:this}})}}get bodyJson(){try{return JSON.parse(this.bodyText)}catch(e){ft(!1,"response body is not valid JSON","UNSUPPORTED_OPERATION",{operation:"bodyJson",info:{response:this}})}}[Symbol.iterator](){const e=this.headers,t=Object.keys(e);let n=0;return{next:()=>{if(n<t.length){const r=t[n++];return{value:[r,e[r]],done:!1}}return{value:void 0,done:!0}}}}constructor(e,t,n,r,s){this.#R=e,this.#T=t,this.#v=Object.keys(n).reduce(((e,t)=>(e[t.toLowerCase()]=String(n[t]),e)),{}),this.#E=null==r?null:new Uint8Array(r),this.#I=s||null,this.#F={message:""}}makeServerError(e,t){let n;n=e?`CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${e})`:`CLIENT ESCALATED SERVER ERROR (${e=`${this.statusCode} ${this.statusMessage}`})`;const r=new Vs(599,n,this.headers,this.body,this.#I||void 0);return r.#F={message:e,error:t},r}throwThrottleError(e,t){null==t?t=-1:gt(Number.isInteger(t)&&t>=0,"invalid stall timeout","stall",t);const n=new Error(e||"throttling requests");throw ct(n,{stall:t,throttle:!0}),n}getHeader(e){return this.headers[e.toLowerCase()]}hasBody(){return null!=this.#E}get request(){return this.#I}ok(){return""===this.#F.message&&this.statusCode>=200&&this.statusCode<300}assertOk(){if(this.ok())return;let{message:e,error:t}=this.#F;""===e&&(e=`server response ${this.statusCode} ${this.statusMessage}`),ft(!1,e,"SERVER_ERROR",{request:this.request||"unknown request",response:this,error:t})}}function Hs(){return(new Date).getTime()}const $s="0x0000000000000000000000000000000000000000";class Gs{fragment;name;signature;topic;args;constructor(e,t,n){const r=e.name,s=e.format();ct(this,{fragment:e,name:r,signature:s,topic:t,args:n})}}class zs{fragment;name;args;signature;selector;value;constructor(e,t,n,r){const s=e.name,i=e.format();ct(this,{fragment:e,name:s,args:n,signature:i,selector:t,value:r})}}class qs{fragment;name;args;signature;selector;constructor(e,t,n){const r=e.name,s=e.format();ct(this,{fragment:e,name:r,args:n,signature:s,selector:t})}}class Qs{hash;_isIndexed;static isIndexed(e){return!(!e||!e._isIndexed)}constructor(e){ct(this,{hash:e,_isIndexed:!0})}}const Js={0:"generic panic",1:"assert(false)",17:"arithmetic overflow",18:"division or modulo by zero",33:"enum overflow",34:"invalid encoded storage byte array accessed",49:"out-of-bounds array access; popping on an empty array",50:"out-of-bounds access of an array or bytesN",65:"out of memory",81:"uninitialized function"},Ks={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:e=>`reverted with reason string ${JSON.stringify(e)}`},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"],reason:e=>{let t="unknown panic code";return e>=0&&e<=255&&Js[e.toString()]&&(t=Js[e.toString()]),`reverted with panic code 0x${e.toString(16)} (${t})`}}};class Ws{fragments;deploy;fallback;receive;#L;#U;#D;#M;constructor(e){let t=[];t="string"==typeof e?JSON.parse(e):e,this.#D=new Map,this.#L=new Map,this.#U=new Map;const n=[];for(const e of t)try{n.push(Yr.from(e))}catch(e){console.log("EE",e)}ct(this,{fragments:Object.freeze(n)});let r=null,s=!1;this.#M=this.getAbiCoder(),this.fragments.forEach(((e,t)=>{let n;switch(e.type){case"constructor":return this.deploy?void console.log("duplicate definition - constructor"):void ct(this,{deploy:e});case"fallback":return void(0===e.inputs.length?s=!0:(gt(!r||e.payable!==r.payable,"conflicting fallback fragments",`fragments[${t}]`,e),r=e,s=r.payable));case"function":n=this.#D;break;case"event":n=this.#U;break;case"error":n=this.#L;break;default:return}const i=e.format();n.has(i)||n.set(i,e)})),this.deploy||ct(this,{deploy:ns.from("constructor()")}),ct(this,{fallback:r,receive:s})}format(e){const t=e?"minimal":"full",n=this.fragments.map((e=>e.format(t)));return n}formatJson(){const e=this.fragments.map((e=>e.format("json")));return JSON.stringify(e.map((e=>JSON.parse(e))))}getAbiCoder(){return us.defaultAbiCoder()}#j(e,t,n){if(_t(e)){const t=e.toLowerCase();for(const e of this.#D.values())if(t===e.selector)return e;return null}if(-1===e.indexOf("(")){const r=[];for(const[t,n]of this.#D)t.split("(")[0]===e&&r.push(n);if(t){const e=t.length>0?t[t.length-1]:null;let n=t.length,s=!0;qn.isTyped(e)&&"overrides"===e.type&&(s=!1,n--);for(let e=r.length-1;e>=0;e--){const t=r[e].inputs.length;t===n||s&&t===n-1||r.splice(e,1)}for(let e=r.length-1;e>=0;e--){const n=r[e].inputs;for(let s=0;s<t.length;s++)if(qn.isTyped(t[s])){if(s>=n.length){if("overrides"===t[s].type)continue;r.splice(e,1);break}if(t[s].type!==n[s].baseType){r.splice(e,1);break}}}}if(1===r.length&&t&&t.length!==r[0].inputs.length){const e=t[t.length-1];(null==e||Array.isArray(e)||"object"!=typeof e)&&r.splice(0,1)}if(0===r.length)return null;if(r.length>1&&n){const t=r.map((e=>JSON.stringify(e.format()))).join(", ");gt(!1,`ambiguous function description (i.e. matches ${t})`,"key",e)}return r[0]}return this.#D.get(ss.from(e).format())||null}getFunctionName(e){const t=this.#j(e,null,!1);return gt(t,"no matching function","key",e),t.name}hasFunction(e){return!!this.#j(e,null,!1)}getFunction(e,t){return this.#j(e,t||null,!0)}forEachFunction(e){const t=Array.from(this.#D.keys());t.sort(((e,t)=>e.localeCompare(t)));for(let n=0;n<t.length;n++){const r=t[n];e(this.#D.get(r),n)}}#V(e,t,n){if(_t(e)){const t=e.toLowerCase();for(const e of this.#U.values())if(t===e.topicHash)return e;return null}if(-1===e.indexOf("(")){const r=[];for(const[t,n]of this.#U)t.split("(")[0]===e&&r.push(n);if(t){for(let e=r.length-1;e>=0;e--)r[e].inputs.length<t.length&&r.splice(e,1);for(let e=r.length-1;e>=0;e--){const n=r[e].inputs;for(let s=0;s<t.length;s++)if(qn.isTyped(t[s])&&t[s].type!==n[s].baseType){r.splice(e,1);break}}}if(0===r.length)return null;if(r.length>1&&n){const t=r.map((e=>JSON.stringify(e.format()))).join(", ");gt(!1,`ambiguous event description (i.e. matches ${t})`,"key",e)}return r[0]}return this.#U.get(ts.from(e).format())||null}getEventName(e){const t=this.#V(e,null,!1);return gt(t,"no matching event","key",e),t.name}hasEvent(e){return!!this.#V(e,null,!1)}getEvent(e,t){return this.#V(e,t||null,!0)}forEachEvent(e){const t=Array.from(this.#U.keys());t.sort(((e,t)=>e.localeCompare(t)));for(let n=0;n<t.length;n++){const r=t[n];e(this.#U.get(r),n)}}getError(e,t){if(_t(e)){const t=e.toLowerCase();if(Ks[t])return es.from(Ks[t].signature);for(const e of this.#L.values())if(t===e.selector)return e;return null}if(-1===e.indexOf("(")){const t=[];for(const[n,r]of this.#L)n.split("(")[0]===e&&t.push(r);if(0===t.length)return"Error"===e?es.from("error Error(string)"):"Panic"===e?es.from("error Panic(uint256)"):null;if(t.length>1){const n=t.map((e=>JSON.stringify(e.format()))).join(", ");gt(!1,`ambiguous error description (i.e. ${n})`,"name",e)}return t[0]}if("Error(string)"===(e=es.from(e).format()))return es.from("error Error(string)");if("Panic(uint256)"===e)return es.from("error Panic(uint256)");return this.#L.get(e)||null}forEachError(e){const t=Array.from(this.#L.keys());t.sort(((e,t)=>e.localeCompare(t)));for(let n=0;n<t.length;n++){const r=t[n];e(this.#L.get(r),n)}}_decodeParams(e,t){return this.#M.decode(e,t)}_encodeParams(e,t){return this.#M.encode(e,t)}encodeDeploy(e){return this._encodeParams(this.deploy.inputs,e||[])}decodeErrorResult(e,t){if("string"==typeof e){const t=this.getError(e);gt(t,"unknown error","fragment",e),e=t}return gt(Nt(t,0,4)===e.selector,`data signature does not match error ${e.name}.`,"data",t),this._decodeParams(e.inputs,Nt(t,4))}encodeErrorResult(e,t){if("string"==typeof e){const t=this.getError(e);gt(t,"unknown error","fragment",e),e=t}return xt([e.selector,this._encodeParams(e.inputs,t||[])])}decodeFunctionData(e,t){if("string"==typeof e){const t=this.getFunction(e);gt(t,"unknown function","fragment",e),e=t}return gt(Nt(t,0,4)===e.selector,`data signature does not match function ${e.name}.`,"data",t),this._decodeParams(e.inputs,Nt(t,4))}encodeFunctionData(e,t){if("string"==typeof e){const t=this.getFunction(e);gt(t,"unknown function","fragment",e),e=t}return xt([e.selector,this._encodeParams(e.inputs,t||[])])}decodeFunctionResult(e,t){if("string"==typeof e){const t=this.getFunction(e);gt(t,"unknown function","fragment",e),e=t}let n="invalid length for result data";const r=At(t);if(r.length%32==0)try{return this.#M.decode(e.outputs,r)}catch(e){n="could not decode result data"}ft(!1,n,"BAD_DATA",{value:kt(r),info:{method:e.name,signature:e.format()}})}makeError(e,t){const n=wt(e,"data"),r=us.getBuiltinCallException("call",t,n);if(r.message.startsWith("execution reverted (unknown custom error)")){const e=kt(n.slice(0,4)),t=this.getError(e);if(t)try{const e=this.#M.decode(t.inputs,n.slice(4));r.revert={name:t.name,signature:t.format(),args:e},r.reason=r.revert.signature,r.message=`execution reverted: ${r.reason}`}catch(e){r.message="execution reverted (coult not decode custom error)"}}const s=this.parseTransaction(t);return s&&(r.invocation={method:s.name,signature:s.signature,args:s.args}),r}encodeFunctionResult(e,t){if("string"==typeof e){const t=this.getFunction(e);gt(t,"unknown function","fragment",e),e=t}return kt(this.#M.encode(e.outputs,t||[]))}encodeFilterTopics(e,t){if("string"==typeof e){const t=this.getEvent(e);gt(t,"unknown event","eventFragment",e),e=t}ft(t.length<=e.inputs.length,`too many arguments for ${e.format()}`,"UNEXPECTED_ARGUMENT",{count:t.length,expectedCount:e.inputs.length});const n=[];e.anonymous||n.push(e.topicHash);const r=(e,t)=>"string"===e.type?fr(t):"bytes"===e.type?In(kt(t)):("bool"===e.type&&"boolean"==typeof t?t=t?"0x01":"0x00":e.type.match(/^u?int/)?t=Vt(t):e.type.match(/^bytes/)?t=Pt(t,32,!1):"address"===e.type&&this.#M.encode(["address"],[t]),St(kt(t),32));for(t.forEach(((t,s)=>{const i=e.inputs[s];i.indexed?null==t?n.push(null):"array"===i.baseType||"tuple"===i.baseType?gt(!1,"filtering with tuples or arrays not supported","contract."+i.name,t):Array.isArray(t)?n.push(t.map((e=>r(i,e)))):n.push(r(i,t)):gt(null==t,"cannot filter non-indexed parameters; must be null","contract."+i.name,t)}));n.length&&null===n[n.length-1];)n.pop();return n}encodeEventLog(e,t){if("string"==typeof e){const t=this.getEvent(e);gt(t,"unknown event","eventFragment",e),e=t}const n=[],r=[],s=[];return e.anonymous||n.push(e.topicHash),gt(t.length===e.inputs.length,"event arguments/values mismatch","values",t),e.inputs.forEach(((e,i)=>{const a=t[i];if(e.indexed)if("string"===e.type)n.push(fr(a));else if("bytes"===e.type)n.push(In(a));else{if("tuple"===e.baseType||"array"===e.baseType)throw new Error("not implemented");n.push(this.#M.encode([e.type],[a]))}else r.push(e),s.push(a)})),{data:this.#M.encode(r,s),topics:n}}decodeEventLog(e,t,n){if("string"==typeof e){const t=this.getEvent(e);gt(t,"unknown event","eventFragment",e),e=t}if(null!=n&&!e.anonymous){const t=e.topicHash;gt(_t(n[0],32)&&n[0].toLowerCase()===t,"fragment/topic mismatch","topics[0]",n[0]),n=n.slice(1)}const r=[],s=[],i=[];e.inputs.forEach(((e,t)=>{e.indexed?"string"===e.type||"bytes"===e.type||"tuple"===e.baseType||"array"===e.baseType?(r.push(Wr.from({type:"bytes32",name:e.name})),i.push(!0)):(r.push(e),i.push(!1)):(s.push(e),i.push(!1))}));const a=null!=n?this.#M.decode(r,xt(n)):null,o=this.#M.decode(s,t,!0),l=[],c=[];let u=0,h=0;return e.inputs.forEach(((e,t)=>{let n=null;if(e.indexed)if(null==a)n=new Qs(null);else if(i[t])n=new Qs(a[h++]);else try{n=a[h++]}catch(e){n=e}else try{n=o[u++]}catch(e){n=e}l.push(n),c.push(e.name||null)})),Kt.fromItems(l,c)}parseTransaction(e){const t=wt(e.data,"tx.data"),n=Lt(null!=e.value?e.value:0,"tx.value"),r=this.getFunction(kt(t.slice(0,4)));if(!r)return null;const s=this.#M.decode(r.inputs,t.slice(4));return new zs(r,r.selector,s,n)}parseCallResult(e){throw new Error("@TODO")}parseLog(e){const t=this.getEvent(e.topics[0]);return!t||t.anonymous?null:new Gs(t,t.topicHash,this.decodeEventLog(t,e.data,e.topics))}parseError(e){const t=kt(e),n=this.getError(Nt(t,0,4));if(!n)return null;const r=this.#M.decode(n.inputs,Nt(t,4));return new qs(n,n.selector,r)}static from(e){return e instanceof Ws?e:"string"==typeof e?new Ws(JSON.parse(e)):"function"==typeof e.format?new Ws(e.format("json")):new Ws(e)}}const Ys=BigInt(0);function Zs(e){return null==e?null:e}function Xs(e){return null==e?null:e.toString()}class ei{gasPrice;maxFeePerGas;maxPriorityFeePerGas;constructor(e,t,n){ct(this,{gasPrice:Zs(e),maxFeePerGas:Zs(t),maxPriorityFeePerGas:Zs(n)})}toJSON(){const{gasPrice:e,maxFeePerGas:t,maxPriorityFeePerGas:n}=this;return{_type:"FeeData",gasPrice:Xs(e),maxFeePerGas:Xs(t),maxPriorityFeePerGas:Xs(n)}}}function ti(e){const t={};e.to&&(t.to=e.to),e.from&&(t.from=e.from),e.data&&(t.data=kt(e.data));const n="chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);for(const r of n)r in e&&null!=e[r]&&(t[r]=Lt(e[r],`request.${r}`));const r="type,nonce".split(/,/);for(const n of r)n in e&&null!=e[n]&&(t[n]=jt(e[n],`request.${n}`));return e.accessList&&(t.accessList=Ss(e.accessList)),"blockTag"in e&&(t.blockTag=e.blockTag),"enableCcipRead"in e&&(t.enableCcipRead=!!e.enableCcipRead),"customData"in e&&(t.customData=e.customData),t}class ni{provider;number;hash;timestamp;parentHash;nonce;difficulty;gasLimit;gasUsed;miner;extraData;baseFeePerGas;#H;constructor(e,t){this.#H=e.transactions.map((e=>"string"!=typeof e?new ii(e,t):e)),ct(this,{provider:t,hash:Zs(e.hash),number:e.number,timestamp:e.timestamp,parentHash:e.parentHash,nonce:e.nonce,difficulty:e.difficulty,gasLimit:e.gasLimit,gasUsed:e.gasUsed,miner:e.miner,extraData:e.extraData,baseFeePerGas:Zs(e.baseFeePerGas)})}get transactions(){return this.#H.map((e=>"string"==typeof e?e:e.hash))}get prefetchedTransactions(){const e=this.#H.slice();return 0===e.length?[]:(ft("object"==typeof e[0],"transactions were not prefetched with block request","UNSUPPORTED_OPERATION",{operation:"transactionResponses()"}),e)}toJSON(){const{baseFeePerGas:e,difficulty:t,extraData:n,gasLimit:r,gasUsed:s,hash:i,miner:a,nonce:o,number:l,parentHash:c,timestamp:u,transactions:h}=this;return{_type:"Block",baseFeePerGas:Xs(e),difficulty:Xs(t),extraData:n,gasLimit:Xs(r),gasUsed:Xs(s),hash:i,miner:a,nonce:o,number:l,parentHash:c,timestamp:u,transactions:h}}[Symbol.iterator](){let e=0;const t=this.transactions;return{next:()=>e<this.length?{value:t[e++],done:!1}:{value:void 0,done:!0}}}get length(){return this.#H.length}get date(){return null==this.timestamp?null:new Date(1e3*this.timestamp)}async getTransaction(e){let t;if("number"==typeof e)t=this.#H[e];else{const n=e.toLowerCase();for(const e of this.#H){if("string"==typeof e){if(e!==n)continue;t=e;break}if(e.hash!==n){t=e;break}}}if(null==t)throw new Error("no such tx");return"string"==typeof t?await this.provider.getTransaction(t):t}getPrefetchedTransaction(e){const t=this.prefetchedTransactions;if("number"==typeof e)return t[e];e=e.toLowerCase();for(const n of t)if(n.hash===e)return n;gt(!1,"no matching transaction","indexOrHash",e)}isMined(){return!!this.hash}isLondon(){return!!this.baseFeePerGas}orphanedEvent(){if(!this.isMined())throw new Error("");return{orphan:"drop-block",hash:this.hash,number:this.number}}}class ri{provider;transactionHash;blockHash;blockNumber;removed;address;data;topics;index;transactionIndex;constructor(e,t){this.provider=t;const n=Object.freeze(e.topics.slice());ct(this,{transactionHash:e.transactionHash,blockHash:e.blockHash,blockNumber:e.blockNumber,removed:e.removed,address:e.address,data:e.data,topics:n,index:e.index,transactionIndex:e.transactionIndex})}toJSON(){const{address:e,blockHash:t,blockNumber:n,data:r,index:s,removed:i,topics:a,transactionHash:o,transactionIndex:l}=this;return{_type:"log",address:e,blockHash:t,blockNumber:n,data:r,index:s,removed:i,topics:a,transactionHash:o,transactionIndex:l}}async getBlock(){const e=await this.provider.getBlock(this.blockHash);return ft(!!e,"failed to find transaction","UNKNOWN_ERROR",{}),e}async getTransaction(){const e=await this.provider.getTransaction(this.transactionHash);return ft(!!e,"failed to find transaction","UNKNOWN_ERROR",{}),e}async getTransactionReceipt(){const e=await this.provider.getTransactionReceipt(this.transactionHash);return ft(!!e,"failed to find transaction receipt","UNKNOWN_ERROR",{}),e}removedEvent(){return function(e){return{orphan:"drop-log",log:{transactionHash:e.transactionHash,blockHash:e.blockHash,blockNumber:e.blockNumber,address:e.address,data:e.data,topics:Object.freeze(e.topics.slice()),index:e.index}}}(this)}}class si{provider;to;from;contractAddress;hash;index;blockHash;blockNumber;logsBloom;gasUsed;cumulativeGasUsed;gasPrice;type;status;root;#$;constructor(e,t){this.#$=Object.freeze(e.logs.map((e=>new ri(e,t))));let n=Ys;null!=e.effectiveGasPrice?n=e.effectiveGasPrice:null!=e.gasPrice&&(n=e.gasPrice),ct(this,{provider:t,to:e.to,from:e.from,contractAddress:e.contractAddress,hash:e.hash,index:e.index,blockHash:e.blockHash,blockNumber:e.blockNumber,logsBloom:e.logsBloom,gasUsed:e.gasUsed,cumulativeGasUsed:e.cumulativeGasUsed,gasPrice:n,type:e.type,status:e.status,root:e.root})}get logs(){return this.#$}toJSON(){const{to:e,from:t,contractAddress:n,hash:r,index:s,blockHash:i,blockNumber:a,logsBloom:o,logs:l,status:c,root:u}=this;return{_type:"TransactionReceipt",blockHash:i,blockNumber:a,contractAddress:n,cumulativeGasUsed:Xs(this.cumulativeGasUsed),from:t,gasPrice:Xs(this.gasPrice),gasUsed:Xs(this.gasUsed),hash:r,index:s,logs:l,logsBloom:o,root:u,status:c,to:e}}get length(){return this.logs.length}[Symbol.iterator](){let e=0;return{next:()=>e<this.length?{value:this.logs[e++],done:!1}:{value:void 0,done:!0}}}get fee(){return this.gasUsed*this.gasPrice}async getBlock(){const e=await this.provider.getBlock(this.blockHash);if(null==e)throw new Error("TODO");return e}async getTransaction(){const e=await this.provider.getTransaction(this.hash);if(null==e)throw new Error("TODO");return e}async getResult(){return await this.provider.getTransactionResult(this.hash)}async confirmations(){return await this.provider.getBlockNumber()-this.blockNumber+1}removedEvent(){return oi(this)}reorderedEvent(e){return ft(!e||e.isMined(),"unmined 'other' transction cannot be orphaned","UNSUPPORTED_OPERATION",{operation:"reorderedEvent(other)"}),ai(this,e)}}class ii{provider;blockNumber;blockHash;index;hash;type;to;from;nonce;gasLimit;gasPrice;maxPriorityFeePerGas;maxFeePerGas;data;value;chainId;signature;accessList;#G;constructor(e,t){this.provider=t,this.blockNumber=null!=e.blockNumber?e.blockNumber:null,this.blockHash=null!=e.blockHash?e.blockHash:null,this.hash=e.hash,this.index=e.index,this.type=e.type,this.from=e.from,this.to=e.to||null,this.gasLimit=e.gasLimit,this.nonce=e.nonce,this.data=e.data,this.value=e.value,this.gasPrice=e.gasPrice,this.maxPriorityFeePerGas=null!=e.maxPriorityFeePerGas?e.maxPriorityFeePerGas:null,this.maxFeePerGas=null!=e.maxFeePerGas?e.maxFeePerGas:null,this.chainId=e.chainId,this.signature=e.signature,this.accessList=null!=e.accessList?e.accessList:null,this.#G=-1}toJSON(){const{blockNumber:e,blockHash:t,index:n,hash:r,type:s,to:i,from:a,nonce:o,data:l,signature:c,accessList:u}=this;return{_type:"TransactionReceipt",accessList:u,blockNumber:e,blockHash:t,chainId:Xs(this.chainId),data:l,from:a,gasLimit:Xs(this.gasLimit),gasPrice:Xs(this.gasPrice),hash:r,maxFeePerGas:Xs(this.maxFeePerGas),maxPriorityFeePerGas:Xs(this.maxPriorityFeePerGas),nonce:o,signature:c,to:i,index:n,type:s,value:Xs(this.value)}}async getBlock(){let e=this.blockNumber;if(null==e){const t=await this.getTransaction();t&&(e=t.blockNumber)}if(null==e)return null;const t=this.provider.getBlock(e);if(null==t)throw new Error("TODO");return t}async getTransaction(){return this.provider.getTransaction(this.hash)}async confirmations(){if(null==this.blockNumber){const{tx:e,blockNumber:t}=await lt({tx:this.getTransaction(),blockNumber:this.provider.getBlockNumber()});return null==e||null==e.blockNumber?0:t-e.blockNumber+1}return await this.provider.getBlockNumber()-this.blockNumber+1}async wait(e,t){const n=null==e?1:e,r=null==t?0:t;let s=this.#G,i=-1,a=-1===s;const o=async()=>{if(a)return null;const{blockNumber:e,nonce:t}=await lt({blockNumber:this.provider.getBlockNumber(),nonce:this.provider.getTransactionCount(this.from)});if(t<this.nonce)return void(s=e);if(a)return null;const r=await this.getTransaction();if(!r||null==r.blockNumber)for(-1===i&&(i=s-3,i<this.#G&&(i=this.#G));i<=e;){if(a)return null;const t=await this.provider.getBlock(i,!0);if(null==t)return;for(const e of t)if(e===this.hash)return;for(let r=0;r<t.length;r++){const i=await t.getTransaction(r);if(i.from===this.from&&i.nonce===this.nonce){if(a)return null;const t=await this.provider.getTransactionReceipt(i.hash);if(null==t)return;if(e-t.blockNumber+1<n)return;let r="replaced";i.data===this.data&&i.to===this.to&&i.value===this.value?r="repriced":"0x"===i.data&&i.from===i.to&&i.value===Ys&&(r="cancelled"),ft(!1,"transaction was replaced","TRANSACTION_REPLACED",{cancelled:"replaced"===r||"cancelled"===r,reason:r,replacement:i.replaceableTransaction(s),hash:i.hash,receipt:t})}}i++}},l=e=>{if(null==e||0!==e.status)return e;ft(!1,"transaction execution reverted","CALL_EXCEPTION",{action:"sendTransaction",data:null,reason:null,invocation:null,revert:null,transaction:{to:e.to,from:e.from,data:""},receipt:e})},c=await this.provider.getTransactionReceipt(this.hash);if(0===n)return l(c);if(c){if(await c.confirmations()>=n)return l(c)}else if(await o(),0===n)return null;const u=new Promise(((e,t)=>{const i=[],c=()=>{i.forEach((e=>e()))};if(i.push((()=>{a=!0})),r>0){const e=setTimeout((()=>{c(),t(pt("wait for transaction timeout","TIMEOUT"))}),r);i.push((()=>{clearTimeout(e)}))}const u=async r=>{if(await r.confirmations()>=n){c();try{e(l(r))}catch(e){t(e)}}};if(i.push((()=>{this.provider.off(this.hash,u)})),this.provider.on(this.hash,u),s>=0){const e=async()=>{try{await o()}catch(e){if(ht(e,"TRANSACTION_REPLACED"))return c(),void t(e)}a||this.provider.once("block",e)};i.push((()=>{this.provider.off("block",e)})),this.provider.once("block",e)}}));return await u}isMined(){return null!=this.blockHash}isLegacy(){return 0===this.type}isBerlin(){return 1===this.type}isLondon(){return 2===this.type}removedEvent(){return ft(this.isMined(),"unmined transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),oi(this)}reorderedEvent(e){return ft(this.isMined(),"unmined transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),ft(!e||e.isMined(),"unmined 'other' transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),ai(this,e)}replaceableTransaction(e){gt(Number.isInteger(e)&&e>=0,"invalid startBlock","startBlock",e);const t=new ii(this,this.provider);return t.#G=e,t}}function ai(e,t){return{orphan:"reorder-transaction",tx:e,other:t}}function oi(e){return{orphan:"drop-transaction",tx:e}}class li{filter;emitter;#z;constructor(e,t,n){this.#z=t,ct(this,{emitter:e,filter:n})}async removeListener(){null!=this.#z&&await this.emitter.off(this.filter,this.#z)}}class ci extends ri{interface;fragment;args;constructor(e,t,n){super(e,e.provider),ct(this,{args:t.decodeEventLog(n,e.data,e.topics),fragment:n,interface:t})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}class ui extends ri{error;constructor(e,t){super(e,e.provider),ct(this,{error:t})}}class hi extends si{#q;constructor(e,t,n){super(n,t),this.#q=e}get logs(){return super.logs.map((e=>{const t=e.topics.length?this.#q.getEvent(e.topics[0]):null;if(t)try{return new ci(e,this.#q,t)}catch(t){return new ui(e,t)}return e}))}}class di extends ii{#q;constructor(e,t,n){super(n,t),this.#q=e}async wait(e){const t=await super.wait(e);return null==t?null:new hi(this.#q,this.provider,t)}}class pi extends li{log;constructor(e,t,n,r){super(e,t,n),ct(this,{log:r})}async getBlock(){return await this.log.getBlock()}async getTransaction(){return await this.log.getTransaction()}async getTransactionReceipt(){return await this.log.getTransactionReceipt()}}class fi extends pi{constructor(e,t,n,r,s){super(e,t,n,new ci(s,e.interface,r)),ct(this,{args:e.interface.decodeEventLog(r,this.log.data,this.log.topics),fragment:r})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}const gi=BigInt(0);function mi(e){return e&&"function"==typeof e.call}function yi(e){return e&&"function"==typeof e.estimateGas}function bi(e){return e&&"function"==typeof e.resolveName}function vi(e){return e&&"function"==typeof e.sendTransaction}class wi{#Q;fragment;constructor(e,t,n){if(ct(this,{fragment:t}),t.inputs.length<n.length)throw new Error("too many arguments");const r=Ai(e.runner,"resolveName"),s=bi(r)?r:null;this.#Q=async function(){const r=await Promise.all(t.inputs.map(((e,t)=>null==n[t]?null:e.walkAsync(n[t],((e,t)=>"address"===e?Array.isArray(t)?Promise.all(t.map((e=>ps(e,s)))):ps(t,s):t)))));return e.interface.encodeFilterTopics(t,r)}()}getTopicFilter(){return this.#Q}}function Ai(e,t){return null==e?null:"function"==typeof e[t]?e:e.provider&&"function"==typeof e.provider[t]?e.provider:null}function _i(e){return null==e?null:e.provider||null}async function Ei(e,t){const n=qn.dereference(e,"overrides");gt("object"==typeof n,"invalid overrides parameter","overrides",e);const r=ti(n);return gt(null==r.to||(t||[]).indexOf("to")>=0,"cannot override to","overrides.to",r.to),gt(null==r.data||(t||[]).indexOf("data")>=0,"cannot override data","overrides.data",r.data),r.from&&(r.from=await ps(r.from)),r}function ki(e){const t=async function(t){const n=await Ei(t,["data"]);n.to=await e.getAddress();const r=e.interface,s=Lt(n.value||gi,"overrides.value")===gi,i="0x"===(n.data||"0x");return!r.fallback||r.fallback.payable||!r.receive||i||s||gt(!1,"cannot send data to receive or send value to non-payable fallback","overrides",t),gt(r.fallback||i,"cannot send data to receive-only contract","overrides.data",n.data),gt(r.receive||r.fallback&&r.fallback.payable||s,"cannot send value to non-payable fallback","overrides.value",n.value),gt(r.fallback||i,"cannot send data to receive-only contract","overrides.data",n.data),n},n=async function(n){const r=e.runner;ft(vi(r),"contract runner does not support sending transactions","UNSUPPORTED_OPERATION",{operation:"sendTransaction"});const s=await r.sendTransaction(await t(n)),i=_i(e.runner);return new di(e.interface,i,s)},r=async e=>await n(e);return ct(r,{_contract:e,estimateGas:async function(n){const r=Ai(e.runner,"estimateGas");return ft(yi(r),"contract runner does not support gas estimation","UNSUPPORTED_OPERATION",{operation:"estimateGas"}),await r.estimateGas(await t(n))},populateTransaction:t,send:n,staticCall:async function(n){const r=Ai(e.runner,"call");ft(mi(r),"contract runner does not support calling","UNSUPPORTED_OPERATION",{operation:"call"});const s=await t(n);try{return await r.call(s)}catch(t){if(dt(t)&&t.data)throw e.interface.makeError(t.data,s);throw t}}}),r}const xi=Symbol.for("_ethersInternal_contract"),Ci=new WeakMap;function Ni(e){return Ci.get(e[xi])}async function Pi(e,t){let n,r=null;if(Array.isArray(t)){const r=function(t){if(_t(t,32))return t;const n=e.interface.getEvent(t);return gt(n,"unknown fragment","name",t),n.topicHash};n=t.map((e=>null==e?null:Array.isArray(e)?e.map(r):r(e)))}else"*"===t?n=[null]:"string"==typeof t?_t(t,32)?n=[t]:(r=e.interface.getEvent(t),gt(r,"unknown fragment","event",t),n=[r.topicHash]):(s=t)&&"object"==typeof s&&"getTopicFilter"in s&&"function"==typeof s.getTopicFilter&&s.fragment?n=await t.getTopicFilter():"fragment"in t?(r=t.fragment,n=[r.topicHash]):gt(!1,"unknown event name","event",t);var s;return n=n.map((e=>{if(null==e)return null;if(Array.isArray(e)){const t=Array.from(new Set(e.map((e=>e.toLowerCase()))).values());return 1===t.length?t[0]:(t.sort(),t)}return e.toLowerCase()})),{fragment:r,tag:n.map((e=>null==e?"null":Array.isArray(e)?e.join("|"):e)).join("&"),topics:n}}async function Si(e,t){const{subs:n}=Ni(e);return n.get((await Pi(e,t)).tag)||null}async function Oi(e,t,n){const r=_i(e.runner);ft(r,"contract runner does not support subscribing","UNSUPPORTED_OPERATION",{operation:t});const{fragment:s,tag:i,topics:a}=await Pi(e,n),{addr:o,subs:l}=Ni(e);let c=l.get(i);if(!c){const t={address:o||e,topics:a},u=t=>{let r=s;if(null==r)try{r=e.interface.getEvent(t.topics[0])}catch(e){}if(r){const i=r,a=s?e.interface.decodeEventLog(s,t.data,t.topics):[];Ri(e,n,a,(r=>new fi(e,r,n,i,t)))}else Ri(e,n,[],(r=>new pi(e,r,n,t)))};let h=[];c={tag:i,listeners:[],start:()=>{h.length||h.push(r.on(t,u))},stop:async()=>{if(0==h.length)return;let e=h;h=[],await Promise.all(e),r.off(t,u)}},l.set(i,c)}return c}let Bi=Promise.resolve();async function Ri(e,t,n,r){try{await Bi}catch(e){}const s=async function(e,t,n,r){await Bi;const s=await Si(e,t);if(!s)return!1;const i=s.listeners.length;return s.listeners=s.listeners.filter((({listener:t,once:s})=>{const i=Array.from(n);r&&i.push(r(s?null:t));try{t.call(e,...i)}catch(e){}return!s})),0===s.listeners.length&&(s.stop(),Ni(e).subs.delete(s.tag)),i>0}(e,t,n,r);return Bi=s,await s}const Ti=["then"];class Ii{target;interface;runner;filters;[xi];fallback;constructor(e,t,n,r){gt("string"==typeof e||hs(e),"invalid value for Contract target","target",e),null==n&&(n=null);const s=Ws.from(t);let i;ct(this,{target:e,runner:n,interface:s}),Object.defineProperty(this,xi,{value:{}});let a=null,o=null;if(r){const e=_i(n);o=new di(this.interface,e,r)}let l=new Map;if("string"==typeof e)if(_t(e))a=e,i=Promise.resolve(e);else{const t=Ai(n,"resolveName");if(!bi(t))throw pt("contract runner does not support name resolution","UNSUPPORTED_OPERATION",{operation:"resolveName"});i=t.resolveName(e).then((t=>{if(null==t)throw pt("an ENS name used for a contract target must be correctly configured","UNCONFIGURED_NAME",{value:e});return Ni(this).addr=t,t}))}else i=e.getAddress().then((e=>{if(null==e)throw new Error("TODO");return Ni(this).addr=e,e}));var c;c={addrPromise:i,addr:a,deployTx:o,subs:l},Ci.set(this[xi],c);const u=new Proxy({},{get:(e,t,n)=>{if("symbol"==typeof t||Ti.indexOf(t)>=0)return Reflect.get(e,t,n);try{return this.getEvent(t)}catch(e){if(!ht(e,"INVALID_ARGUMENT")||"key"!==e.argument)throw e}},has:(e,t)=>Ti.indexOf(t)>=0?Reflect.has(e,t):Reflect.has(e,t)||this.interface.hasEvent(String(t))});return ct(this,{filters:u}),ct(this,{fallback:s.receive||s.fallback?ki(this):null}),new Proxy(this,{get:(e,t,n)=>{if("symbol"==typeof t||t in e||Ti.indexOf(t)>=0)return Reflect.get(e,t,n);try{return e.getFunction(t)}catch(e){if(!ht(e,"INVALID_ARGUMENT")||"key"!==e.argument)throw e}},has:(e,t)=>"symbol"==typeof t||t in e||Ti.indexOf(t)>=0?Reflect.has(e,t):e.interface.hasFunction(t)})}connect(e){return new Ii(this.target,this.interface,e)}attach(e){return new Ii(e,this.interface,this.runner)}async getAddress(){return await Ni(this).addrPromise}async getDeployedCode(){const e=_i(this.runner);ft(e,"runner does not support .provider","UNSUPPORTED_OPERATION",{operation:"getDeployedCode"});const t=await e.getCode(await this.getAddress());return"0x"===t?null:t}async waitForDeployment(){const e=this.deploymentTransaction();if(e)return await e.wait(),this;if(null!=await this.getDeployedCode())return this;const t=_i(this.runner);return ft(null!=t,"contract runner does not support .provider","UNSUPPORTED_OPERATION",{operation:"waitForDeployment"}),new Promise(((e,n)=>{const r=async()=>{try{if(null!=await this.getDeployedCode())return e(this);t.once("block",r)}catch(e){n(e)}};r()}))}deploymentTransaction(){return Ni(this).deployTx}getFunction(e){return"string"!=typeof e&&(e=e.format()),function(e,t){const n=function(...n){const r=e.interface.getFunction(t,n);return ft(r,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t,args:n}}),r},r=async function(...t){const r=n(...t);let s={};if(r.inputs.length+1===t.length&&(s=await Ei(t.pop())),r.inputs.length!==t.length)throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");const i=await async function(e,t,n){const r=Ai(e,"resolveName"),s=bi(r)?r:null;return await Promise.all(t.map(((e,t)=>e.walkAsync(n[t],((e,t)=>(t=qn.dereference(t,e),"address"===e?ps(t,s):t))))))}(e.runner,r.inputs,t);return Object.assign({},s,await lt({to:e.getAddress(),data:e.interface.encodeFunctionData(r,i)}))},s=async function(...e){const t=await a(...e);return 1===t.length?t[0]:t},i=async function(...t){const n=e.runner;ft(vi(n),"contract runner does not support sending transactions","UNSUPPORTED_OPERATION",{operation:"sendTransaction"});const s=await n.sendTransaction(await r(...t)),i=_i(e.runner);return new di(e.interface,i,s)},a=async function(...t){const s=Ai(e.runner,"call");ft(mi(s),"contract runner does not support calling","UNSUPPORTED_OPERATION",{operation:"call"});const i=await r(...t);let a="0x";try{a=await s.call(i)}catch(t){if(dt(t)&&t.data)throw e.interface.makeError(t.data,i);throw t}const o=n(...t);return e.interface.decodeFunctionResult(o,a)},o=async(...e)=>n(...e).constant?await s(...e):await i(...e);return ct(o,{name:e.interface.getFunctionName(t),_contract:e,_key:t,getFragment:n,estimateGas:async function(...t){const n=Ai(e.runner,"estimateGas");return ft(yi(n),"contract runner does not support gas estimation","UNSUPPORTED_OPERATION",{operation:"estimateGas"}),await n.estimateGas(await r(...t))},populateTransaction:r,send:i,staticCall:s,staticCallResult:a}),Object.defineProperty(o,"fragment",{configurable:!1,enumerable:!0,get:()=>{const n=e.interface.getFunction(t);return ft(n,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t}}),n}}),o}(this,e)}getEvent(e){return"string"!=typeof e&&(e=e.format()),function(e,t){const n=function(...n){const r=e.interface.getEvent(t,n);return ft(r,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t,args:n}}),r},r=function(...t){return new wi(e,n(...t),t)};return ct(r,{name:e.interface.getEventName(t),_contract:e,_key:t,getFragment:n}),Object.defineProperty(r,"fragment",{configurable:!1,enumerable:!0,get:()=>{const n=e.interface.getEvent(t);return ft(n,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t}}),n}}),r}(this,e)}async queryTransaction(e){throw new Error("@TODO")}async queryFilter(e,t,n){null==t&&(t=0),null==n&&(n="latest");const{addr:r,addrPromise:s}=Ni(this),i=r||await s,{fragment:a,topics:o}=await Pi(this,e),l={address:i,topics:o,fromBlock:t,toBlock:n},c=_i(this.runner);return ft(c,"contract runner does not have a provider","UNSUPPORTED_OPERATION",{operation:"queryFilter"}),(await c.getLogs(l)).map((e=>{let t=a;if(null==t)try{t=this.interface.getEvent(e.topics[0])}catch(e){}if(t)try{return new ci(e,this.interface,t)}catch(t){return new ui(e,t)}return new ri(e,c)}))}async on(e,t){const n=await Oi(this,"on",e);return n.listeners.push({listener:t,once:!1}),n.start(),this}async once(e,t){const n=await Oi(this,"once",e);return n.listeners.push({listener:t,once:!0}),n.start(),this}async emit(e,...t){return await Ri(this,e,t,null)}async listenerCount(e){if(e){const t=await Si(this,e);return t?t.listeners.length:0}const{subs:t}=Ni(this);let n=0;for(const{listeners:e}of t.values())n+=e.length;return n}async listeners(e){if(e){const t=await Si(this,e);return t?t.listeners.map((({listener:e})=>e)):[]}const{subs:t}=Ni(this);let n=[];for(const{listeners:e}of t.values())n=n.concat(e.map((({listener:e})=>e)));return n}async off(e,t){const n=await Si(this,e);if(!n)return this;if(t){const e=n.listeners.map((({listener:e})=>e)).indexOf(t);e>=0&&n.listeners.splice(e,1)}return null!=t&&0!==n.listeners.length||(n.stop(),Ni(this).subs.delete(n.tag)),this}async removeAllListeners(e){if(e){const t=await Si(this,e);if(!t)return this;t.stop(),Ni(this).subs.delete(t.tag)}else{const{subs:e}=Ni(this);for(const{tag:t,stop:n}of e.values())n(),e.delete(t)}return this}async addListener(e,t){return await this.on(e,t)}async removeListener(e,t){return await this.off(e,t)}static buildClass(e){return class extends Ii{constructor(t,n=null){super(t,e,n)}}}static from(e,t,n){return null==n&&(n=null),new this(e,t,n)}}class Fi extends(function(){return Ii}()){}function Li(e){return function(e){let t=0;return()=>e[t++]}(function(e){let t=0;function n(){return e[t++]<<8|e[t++]}let r=n(),s=1,i=[0,1];for(let e=1;e<r;e++)i.push(s+=n());let a=n(),o=t;t+=a;let l=0,c=0;function u(){return 0==l&&(c=c<<8|e[t++],l=8),c>>--l&1}const h=2**31,d=h>>>1,p=h-1;let f=0;for(let e=0;e<31;e++)f=f<<1|u();let g=[],m=0,y=h;for(;;){let e=Math.floor(((f-m+1)*s-1)/y),t=0,n=r;for(;n-t>1;){let r=t+n>>>1;e<i[r]?n=r:t=r}if(0==t)break;g.push(t);let a=m+Math.floor(y*i[t]/s),o=m+Math.floor(y*i[t+1]/s)-1;for(;0==((a^o)&d);)f=f<<1&p|u(),a=a<<1&p,o=o<<1&p|1;for(;a&~o&536870912;)f=f&d|f<<1&p>>>1|u(),a=a<<1^d,o=(o^d)<<1|d|1;m=a,y=1+o-a}let b=r-4;return g.map((t=>{switch(t-b){case 3:return b+65792+(e[o++]<<16|e[o++]<<8|e[o++]);case 2:return b+256+(e[o++]<<8|e[o++]);case 1:return b+e[o++];default:return t-1}}))}(function(e){let t=[];[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach(((e,n)=>t[e.charCodeAt(0)]=n));let n=e.length,r=new Uint8Array(6*n>>3);for(let s=0,i=0,a=0,o=0;s<n;s++)o=o<<6|t[e.charCodeAt(s)],a+=6,a>=8&&(r[i++]=o>>(a-=8));return r}(e)))}function Ui(e){return 1&e?~e>>1:e>>1}function Di(e,t){let n=Array(e);for(let r=0,s=0;r<e;r++)n[r]=s+=Ui(t());return n}function Mi(e,t=0){let n=[];for(;;){let r=e(),s=e();if(!s)break;t+=r;for(let e=0;e<s;e++)n.push(t+e);t+=s+1}return n}function ji(e){return Hi((()=>{let t=Mi(e);if(t.length)return t}))}function Vi(e){let t=[];for(;;){let n=e();if(0==n)break;t.push(Gi(n,e))}for(;;){let n=e()-1;if(n<0)break;t.push(zi(n,e))}return t.flat()}function Hi(e){let t=[];for(;;){let n=e(t.length);if(!n)break;t.push(n)}return t}function $i(e,t,n){let r=Array(e).fill().map((()=>[]));for(let s=0;s<t;s++)Di(e,n).forEach(((e,t)=>r[t].push(e)));return r}function Gi(e,t){let n=1+t(),r=t(),s=Hi(t);return $i(s.length,1+e,t).flatMap(((e,t)=>{let[i,...a]=e;return Array(s[t]).fill().map(((e,t)=>{let s=t*r;return[i+t*n,a.map((e=>e+s))]}))}))}function zi(e,t){return $i(1+t(),1+e,t).map((e=>[e[0],e.slice(1)]))}var qi=Li("");const Qi=new Map([[8217,"apostrophe"],[8260,"fraction slash"],[12539,"middle dot"]]),Ji=4;function Ki(e){return`{${function(e){return e.toString(16).toUpperCase().padStart(2,"0")}(e)}}`}function Wi(e){let t=e.length;if(t<4096)return String.fromCodePoint(...e);let n=[];for(let r=0;r<t;)n.push(String.fromCodePoint(...e.slice(r,r+=4096)));return n.join("")}var Yi=Li("AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g");function Zi(e){return e>>24&255}function Xi(e){return 16777215&e}const ea=new Map(ji(Yi).flatMap(((e,t)=>e.map((e=>[e,t+1<<24]))))),ta=new Set(Mi(Yi)),na=new Map,ra=new Map;for(let[e,t]of Vi(Yi)){if(!ta.has(e)&&2==t.length){let[n,r]=t,s=ra.get(n);s||(s=new Map,ra.set(n,s)),s.set(r,e)}na.set(e,t.reverse())}const sa=44032,ia=4352,aa=4449,oa=4519,la=28,ca=21*la,ua=sa+19*ca,ha=ia+19,da=aa+21,pa=oa+la;function fa(e){return e>=sa&&e<ua}function ga(e,t){if(e>=ia&&e<ha&&t>=aa&&t<da)return sa+(e-ia)*ca+(t-aa)*la;if(fa(e)&&t>oa&&t<pa&&(e-sa)%la==0)return e+(t-oa);{let n=ra.get(e);return n&&(n=n.get(t),n)?n:-1}}function ma(e){let t=[],n=[],r=!1;function s(e){let n=ea.get(e);n&&(r=!0,e|=n),t.push(e)}for(let r of e)for(;;){if(r<128)t.push(r);else if(fa(r)){let e=r-sa,t=e%ca/la|0,n=e%la;s(ia+(e/ca|0)),s(aa+t),n>0&&s(oa+n)}else{let e=na.get(r);e?n.push(...e):s(r)}if(!n.length)break;r=n.pop()}if(r&&t.length>1){let e=Zi(t[0]);for(let n=1;n<t.length;n++){let r=Zi(t[n]);if(0==r||e<=r){e=r;continue}let s=n-1;for(;;){let n=t[s+1];if(t[s+1]=t[s],t[s]=n,!s)break;if(e=Zi(t[--s]),e<=r)break}e=Zi(t[n])}}return t}function ya(e){return ma(e).map(Xi)}function ba(e){return function(e){let t=[],n=[],r=-1,s=0;for(let i of e){let e=Zi(i),a=Xi(i);if(-1==r)0==e?r=a:t.push(a);else if(s>0&&s>=e)0==e?(t.push(r,...n),n.length=0,r=a):n.push(a),s=e;else{let i=ga(r,a);i>=0?r=i:0==s&&0==e?(t.push(r),r=a):(n.push(a),s=e)}}return r>=0&&t.push(r,...n),t}(ma(e))}const va=65039,wa=".",Aa=1,_a=45;function Ea(){return new Set(Mi(qi))}const ka=new Map(Vi(qi)),xa=Ea(),Ca=Ea(),Na=new Set(Mi(qi).map((function(e){return this[e]}),[...Ca])),Pa=Ea(),Sa=(Ea(),ji(qi));function Oa(){return new Set([Mi(qi).map((e=>Sa[e])),Mi(qi)].flat(2))}const Ba=qi(),Ra=Hi((e=>{let t=Hi(qi).map((e=>e+96));if(t.length){let n=e>=Ba;t[0]-=32,t=Wi(t),n&&(t=`Restricted[${t}]`);let r=Oa(),s=Oa(),i=[...r,...s].sort(((e,t)=>e-t));return{N:t,P:r,M:!qi(),R:n,V:new Set(i)}}})),Ta=Ea(),Ia=new Map;[...Ta,...Ea()].sort(((e,t)=>e-t)).map(((e,t,n)=>{let r=qi(),s=n[t]=r?n[t-r]:{V:[],M:new Map};s.V.push(e),Ta.has(e)||Ia.set(e,s)}));for(let{V:e,M:t}of new Set(Ia.values())){let n=[];for(let t of e){let e=Ra.filter((e=>e.V.has(t))),r=n.find((({G:t})=>e.some((e=>t.has(e)))));r||(r={G:new Set,V:[]},n.push(r)),r.V.push(t),e.forEach((e=>r.G.add(e)))}let r=n.flatMap((({G:e})=>[...e]));for(let{G:e,V:s}of n){let n=new Set(r.filter((t=>!e.has(t))));for(let e of s)t.set(e,n)}}let Fa=new Set,La=new Set;for(let e of Ra)for(let t of e.V)(Fa.has(t)?La:Fa).add(t);for(let e of Fa)Ia.has(e)||La.has(e)||Ia.set(e,Aa);const Ua=new Set([...Fa,...ya(Fa)]),Da=Mi(qi),Ma=function e(t){let n=Hi((()=>{let t=Mi(qi).map((e=>Da[e]));if(t.length)return e(t)})).sort(((e,t)=>t.Q.size-e.Q.size)),r=qi(),s=r%3;r=r/3|0;let i=1&r;return r>>=1,{B:n,V:s,F:i,S:1&r,C:2&r,Q:new Set(t)}}([]);class ja extends Array{get is_emoji(){return!0}}function Va(e,t=Ki){let n=[];var r;r=e[0],Ca.has(r)&&n.push("◌");let s=0,i=e.length;for(let r=0;r<i;r++){let i=e[r];za(i)&&(n.push(Wi(e.slice(s,r))),n.push(t(i)),s=r+1)}return n.push(Wi(e.slice(s,i))),n.join("")}function Ha(e){return(za(e)?"":`${$a(Va([e]))} `)+Ki(e)}function $a(e){return`"${e}"‎`}function Ga(e){for(let t=e.lastIndexOf(95);t>0;)if(95!==e[--t])throw new Error("underscore allowed only at start")}function za(e){return Pa.has(e)}function qa(e,t){let n=0;return e.split(wa).map((e=>{let r,s=function(e){let t=[];for(let n=0,r=e.length;n<r;){let r=e.codePointAt(n);n+=r<65536?1:2,t.push(r)}return t}(e),i={input:s,offset:n};n+=s.length+1;try{let e,n=i.tokens=function(e,t){let n=[],r=[];for(e=e.slice().reverse();e.length;){let s=Wa(e);if(s)r.length&&(n.push(t(r)),r=[]),n.push(s);else{let t=e.pop();if(Ua.has(t))r.push(t);else{let e=ka.get(t);if(e)r.push(...e);else if(!xa.has(t))throw Qa(t)}}}return r.length&&n.push(t(r)),n}(s,ba),a=n.length;if(!a)throw new Error("empty label");{let s=n[0],o=a>1||s.is_emoji;if(!o&&s.every((e=>e<128)))r=s,Ga(r),function(e){if(e.length>=4&&e[2]==_a&&e[3]==_a)throw new Error("invalid label extension")}(r),e="ASCII";else if(o&&(i.emoji=!0,s=n.flatMap((e=>e.is_emoji?[]:e))),r=n.flatMap((e=>!t&&e.is_emoji?e.filter((e=>e!=va)):e)),Ga(r),s.length){if(Ca.has(r[0]))throw Ka("leading combining mark");for(let e=1;e<a;e++){let t=n[e];if(!t.is_emoji&&Ca.has(t[0]))throw Ka(`emoji + combining mark: "${Wi(n[e-1])} + ${Va([t[0]])}"`)}!function(e){let t=e[0],n=Qi.get(t);if(n)throw Ka(`leading ${n}`);let r=e.length,s=-1;for(let i=1;i<r;i++){t=e[i];let r=Qi.get(t);if(r){if(s==i)throw Ka(`${n} + ${r}`);s=i+1,n=r}}if(s==r)throw Ka(`trailing ${n}`)}(r);let t=[...new Set(s)],[i]=function(e){let t=Ra;for(let n of e){let e=t.filter((e=>e.V.has(n)));if(!e.length)throw t===Ra?Qa(n):Ja(t[0],n);if(t=e,1==e.length)break}return t}(t);!function(e,t){let{V:n,M:r}=e;for(let r of t)if(!n.has(r))throw Ja(e,r);if(r){let e=ya(t);for(let t=1,n=e.length;t<n;t++)if(Na.has(e[t])){let r=t+1;for(let s;r<n&&Na.has(s=e[r]);r++)for(let n=t;n<r;n++)if(e[n]==s)throw new Error(`non-spacing marks: repeated ${Ha(s)}`);if(r-t>Ji)throw new Error(`non-spacing marks: too many ${$a(Va(e.slice(t-1,r)))} (${r-t}/${Ji})`);t=r}}}(i,s),function(e,t){let n,r=[];for(let e of t){let t=Ia.get(e);if(t===Aa)return;if(t){let r=t.M.get(e);if(n=n?n.filter((e=>r.has(e))):[...r],!n.length)return}else r.push(e)}if(n)for(let t of n)if(r.every((e=>t.V.has(e))))throw new Error(`whole-script confusable: ${e.N}/${t.N}`)}(i,t),e=i.N}else e="Emoji"}i.type=e}catch(e){i.error=e}return i.output=r,i}))}function Qa(e){return new Error(`disallowed character: ${Ha(e)}`)}function Ja(e,t){let n=Ha(t),r=Ra.find((e=>e.P.has(t)));return r&&(n=`${r.N} ${n}`),new Error(`illegal mixture: ${e.N} + ${n}`)}function Ka(e){return new Error(`illegal placement: ${e}`)}function Wa(e,t){let n,r,s=Ma,i=[],a=e.length;for(t&&(t.length=0);a;){let o=e[--a];if(s=s.B.find((e=>e.Q.has(o))),!s)break;if(s.S)r=o;else if(s.C&&o===r)break;i.push(o),s.F&&(i.push(va),a>0&&e[a-1]==va&&a--),s.V&&(n=Ya(i,s),t&&t.push(...e.slice(a).reverse()),e.length=a)}return n}function Ya(e,t){let n=ja.from(e);return 2==t.V&&n.splice(1,1),n}const Za=new Uint8Array(32);function Xa(e){return gt(0!==e.length,"invalid ENS name; empty component","comp",e),e}function eo(e){const t=ur(function(e){try{return function(e){return(t=qa(e)).map((({input:e,error:n,output:r})=>{if(n){let r=n.message;throw new Error(1==t.length?r:`Invalid label ${$a(Va(e))}: ${r}`)}return Wi(r)})).join(wa);var t}(e)}catch(t){gt(!1,`invalid ENS name (${t.message})`,"name",e)}}(e)),n=[];if(0===e.length)return n;let r=0;for(let e=0;e<t.length;e++)46===t[e]&&(n.push(Xa(t.slice(r,e))),r=e+1);return gt(r<t.length,"invalid ENS name; empty component","name",e),n.push(Xa(t.slice(r))),n}function to(e){gt("string"==typeof e,"invalid ENS name; not a string","name",e);let t=Za;const n=eo(e);for(;n.length;)t=In(xt([t,In(n.pop())]));return kt(t)}Za.fill(0);const no="0x0000000000000000000000000000000000000000000000000000000000000000",ro=BigInt(0),so=BigInt(1),io=BigInt(2),ao=BigInt(27),oo=BigInt(28),lo=BigInt(35),co={};function uo(e){return St(Ht(e),32)}class ho{#J;#K;#W;#Y;get r(){return this.#J}set r(e){gt(32===Ct(e),"invalid r","value",e),this.#J=kt(e)}get s(){return this.#K}set s(e){gt(32===Ct(e),"invalid s","value",e);const t=kt(e);gt(parseInt(t.substring(0,3))<8,"non-canonical s","value",t),this.#K=t}get v(){return this.#W}set v(e){const t=jt(e,"value");gt(27===t||28===t,"invalid v","v",e),this.#W=t}get networkV(){return this.#Y}get legacyChainId(){const e=this.networkV;return null==e?null:ho.getChainId(e)}get yParity(){return 27===this.v?0:1}get yParityAndS(){const e=wt(this.s);return this.yParity&&(e[0]|=128),kt(e)}get compactSerialized(){return xt([this.r,this.yParityAndS])}get serialized(){return xt([this.r,this.s,this.yParity?"0x1c":"0x1b"])}constructor(e,t,n,r){bt(e,co,"Signature"),this.#J=t,this.#K=n,this.#W=r,this.#Y=null}[Symbol.for("nodejs.util.inspect.custom")](){return`Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`}clone(){const e=new ho(co,this.r,this.s,this.v);return this.networkV&&(e.#Y=this.networkV),e}toJSON(){const e=this.networkV;return{_type:"signature",networkV:null!=e?e.toString():null,r:this.r,s:this.s,v:this.v}}static getChainId(e){const t=Lt(e,"v");return t==ao||t==oo?ro:(gt(t>=lo,"invalid EIP-155 v","v",e),(t-lo)/io)}static getChainIdV(e,t){return Lt(e)*io+BigInt(35+t-27)}static getNormalizedV(e){const t=Lt(e);return t===ro||t===ao?27:t===so||t===oo?28:(gt(t>=lo,"invalid v","v",e),t&so?27:28)}static from(e){function t(t,n){gt(t,n,"signature",e)}if(null==e)return new ho(co,no,no,27);if("string"==typeof e){const n=wt(e,"signature");if(64===n.length){const e=kt(n.slice(0,32)),t=n.slice(32,64),r=128&t[0]?28:27;return t[0]&=127,new ho(co,e,kt(t),r)}if(65===n.length){const e=kt(n.slice(0,32)),r=n.slice(32,64);t(0==(128&r[0]),"non-canonical s");const s=ho.getNormalizedV(n[64]);return new ho(co,e,kt(r),s)}t(!1,"invalid raw signature length")}if(e instanceof ho)return e.clone();const n=e.r;t(null!=n,"missing r");const r=uo(n),s=function(e,n){if(null!=e)return uo(e);if(null!=n){t(_t(n,32),"invalid yParityAndS");const e=wt(n);return e[0]&=127,kt(e)}t(!1,"missing s")}(e.s,e.yParityAndS);t(0==(128&wt(s)[0]),"non-canonical s");const{networkV:i,v:a}=function(e,n,r){if(null!=e){const t=Lt(e);return{networkV:t>=lo?t:void 0,v:ho.getNormalizedV(t)}}if(null!=n)return t(_t(n,32),"invalid yParityAndS"),{v:128&wt(n)[0]?28:27};if(null!=r){switch(jt(r,"sig.yParity")){case 0:return{v:27};case 1:return{v:28}}t(!1,"invalid yParity")}t(!1,"missing v")}(e.v,e.yParityAndS,e.yParity),o=new ho(co,r,s,a);return i&&(o.#Y=i),t(null==e.yParity||jt(e.yParity,"sig.yParity")===o.yParity,"yParity mismatch"),t(null==e.yParityAndS||e.yParityAndS===o.yParityAndS,"yParityAndS mismatch"),o}}var po=a(856),fo=a.t(po,2);const go=BigInt(0),mo=BigInt(1),yo=BigInt(2),bo=BigInt(3),vo=BigInt(8),wo=Object.freeze({a:go,b:BigInt(7),P:BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),n:BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),h:mo,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")}),Ao=(e,t)=>(e+t/yo)/t,_o={beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar(e){const{n:t}=wo,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-mo*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),s=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=n,a=BigInt("0x100000000000000000000000000000000"),o=Ao(i*e,t),l=Ao(-r*e,t);let c=Wo(e-o*n-l*s,t),u=Wo(-o*r-l*i,t);const h=c>a,d=u>a;if(h&&(c=t-c),d&&(u=t-u),c>a||u>a)throw new Error("splitScalarEndo: Endomorphism failed, k="+e);return{k1neg:h,k1:c,k2neg:d,k2:u}}},Eo=32,ko=32,xo=Eo+1,Co=2*Eo+1;function No(e){const{a:t,b:n}=wo,r=Wo(e*e),s=Wo(r*e);return Wo(s+t*e+n)}const Po=wo.a===go;class So extends Error{constructor(e){super(e)}}function Oo(e){if(!(e instanceof Bo))throw new TypeError("JacobianPoint expected")}class Bo{constructor(e,t,n){this.x=e,this.y=t,this.z=n}static fromAffine(e){if(!(e instanceof Io))throw new TypeError("JacobianPoint#fromAffine: expected Point");return e.equals(Io.ZERO)?Bo.ZERO:new Bo(e.x,e.y,mo)}static toAffineBatch(e){const t=function(e,t=wo.P){const n=new Array(e.length),r=e.reduce(((e,r,s)=>r===go?e:(n[s]=e,Wo(e*r,t))),mo),s=Zo(r,t);return e.reduceRight(((e,r,s)=>r===go?e:(n[s]=Wo(e*n[s],t),Wo(e*r,t))),s),n}(e.map((e=>e.z)));return e.map(((e,n)=>e.toAffine(t[n])))}static normalizeZ(e){return Bo.toAffineBatch(e).map(Bo.fromAffine)}equals(e){Oo(e);const{x:t,y:n,z:r}=this,{x:s,y:i,z:a}=e,o=Wo(r*r),l=Wo(a*a),c=Wo(t*l),u=Wo(s*o),h=Wo(Wo(n*a)*l),d=Wo(Wo(i*r)*o);return c===u&&h===d}negate(){return new Bo(this.x,Wo(-this.y),this.z)}double(){const{x:e,y:t,z:n}=this,r=Wo(e*e),s=Wo(t*t),i=Wo(s*s),a=e+s,o=Wo(yo*(Wo(a*a)-r-i)),l=Wo(bo*r),c=Wo(l*l),u=Wo(c-yo*o),h=Wo(l*(o-u)-vo*i),d=Wo(yo*t*n);return new Bo(u,h,d)}add(e){Oo(e);const{x:t,y:n,z:r}=this,{x:s,y:i,z:a}=e;if(s===go||i===go)return this;if(t===go||n===go)return e;const o=Wo(r*r),l=Wo(a*a),c=Wo(t*l),u=Wo(s*o),h=Wo(Wo(n*a)*l),d=Wo(Wo(i*r)*o),p=Wo(u-c),f=Wo(d-h);if(p===go)return f===go?this.double():Bo.ZERO;const g=Wo(p*p),m=Wo(p*g),y=Wo(c*g),b=Wo(f*f-m-yo*y),v=Wo(f*(y-b)-h*m),w=Wo(r*a*p);return new Bo(b,v,w)}subtract(e){return this.add(e.negate())}multiplyUnsafe(e){const t=Bo.ZERO;if("bigint"==typeof e&&e===go)return t;let n=Ko(e);if(n===mo)return this;if(!Po){let e=t,r=this;for(;n>go;)n&mo&&(e=e.add(r)),r=r.double(),n>>=mo;return e}let{k1neg:r,k1:s,k2neg:i,k2:a}=_o.splitScalar(n),o=t,l=t,c=this;for(;s>go||a>go;)s&mo&&(o=o.add(c)),a&mo&&(l=l.add(c)),c=c.double(),s>>=mo,a>>=mo;return r&&(o=o.negate()),i&&(l=l.negate()),l=new Bo(Wo(l.x*_o.beta),l.y,l.z),o.add(l)}precomputeWindow(e){const t=Po?128/e+1:256/e+1,n=[];let r=this,s=r;for(let i=0;i<t;i++){s=r,n.push(s);for(let t=1;t<2**(e-1);t++)s=s.add(r),n.push(s);r=s.double()}return n}wNAF(e,t){!t&&this.equals(Bo.BASE)&&(t=Io.BASE);const n=t&&t._WINDOW_SIZE||1;if(256%n)throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");let r=t&&To.get(t);r||(r=this.precomputeWindow(n),t&&1!==n&&(r=Bo.normalizeZ(r),To.set(t,r)));let s=Bo.ZERO,i=Bo.BASE;const a=1+(Po?128/n:256/n),o=2**(n-1),l=BigInt(2**n-1),c=2**n,u=BigInt(n);for(let t=0;t<a;t++){const n=t*o;let a=Number(e&l);e>>=u,a>o&&(a-=c,e+=mo);const h=n,d=n+Math.abs(a)-1,p=t%2!=0,f=a<0;0===a?i=i.add(Ro(p,r[h])):s=s.add(Ro(f,r[d]))}return{p:s,f:i}}multiply(e,t){let n,r,s=Ko(e);if(Po){const{k1neg:e,k1:i,k2neg:a,k2:o}=_o.splitScalar(s);let{p:l,f:c}=this.wNAF(i,t),{p:u,f:h}=this.wNAF(o,t);l=Ro(e,l),u=Ro(a,u),u=new Bo(Wo(u.x*_o.beta),u.y,u.z),n=l.add(u),r=c.add(h)}else{const{p:e,f:i}=this.wNAF(s,t);n=e,r=i}return Bo.normalizeZ([n,r])[0]}toAffine(e){const{x:t,y:n,z:r}=this,s=this.equals(Bo.ZERO);null==e&&(e=s?vo:Zo(r));const i=e,a=Wo(i*i),o=Wo(a*i),l=Wo(t*a),c=Wo(n*o),u=Wo(r*i);if(s)return Io.ZERO;if(u!==mo)throw new Error("invZ was invalid");return new Io(l,c)}}function Ro(e,t){const n=t.negate();return e?n:t}Bo.BASE=new Bo(wo.Gx,wo.Gy,mo),Bo.ZERO=new Bo(go,mo,go);const To=new WeakMap;class Io{constructor(e,t){this.x=e,this.y=t}_setWindowSize(e){this._WINDOW_SIZE=e,To.delete(this)}hasEvenY(){return this.y%yo===go}static fromCompressedHex(e){const t=32===e.length,n=Qo(t?e:e.subarray(1));if(!sl(n))throw new Error("Point is not on curve");let r=function(e){const{P:t}=wo,n=BigInt(6),r=BigInt(11),s=BigInt(22),i=BigInt(23),a=BigInt(44),o=BigInt(88),l=e*e*e%t,c=l*l*e%t,u=Yo(c,bo)*c%t,h=Yo(u,bo)*c%t,d=Yo(h,yo)*l%t,p=Yo(d,r)*d%t,f=Yo(p,s)*p%t,g=Yo(f,a)*f%t,m=Yo(g,o)*g%t,y=Yo(m,a)*f%t,b=Yo(y,bo)*c%t,v=Yo(b,i)*p%t,w=Yo(v,n)*l%t,A=Yo(w,yo);if(A*A%t!==e)throw new Error("Cannot find square root");return A}(No(n));const s=(r&mo)===mo;t?s&&(r=Wo(-r)):1==(1&e[0])!==s&&(r=Wo(-r));const i=new Io(n,r);return i.assertValidity(),i}static fromUncompressedHex(e){const t=Qo(e.subarray(1,Eo+1)),n=Qo(e.subarray(Eo+1,2*Eo+1)),r=new Io(t,n);return r.assertValidity(),r}static fromHex(e){const t=Jo(e),n=t.length,r=t[0];if(n===Eo)return this.fromCompressedHex(t);if(n===xo&&(2===r||3===r))return this.fromCompressedHex(t);if(n===Co&&4===r)return this.fromUncompressedHex(t);throw new Error(`Point.fromHex: received invalid point. Expected 32-${xo} compressed bytes or ${Co} uncompressed bytes, not ${n}`)}static fromPrivateKey(e){return Io.BASE.multiply(al(e))}static fromSignature(e,t,n){const{r,s}=function(e){if(e instanceof Uo)return e.assertValidity(),e;try{return Uo.fromDER(e)}catch(t){return Uo.fromCompact(e)}}(t);if(![0,1,2,3].includes(n))throw new Error("Cannot recover: invalid recovery bit");const i=Xo(Jo(e)),{n:a}=wo,o=2===n||3===n?r+a:r,l=Zo(o,a),c=Wo(-i*l,a),u=Wo(s*l,a),h=1&n?"03":"02",d=Io.fromHex(h+Ho(o)),p=Io.BASE.multiplyAndAddUnsafe(d,c,u);if(!p)throw new Error("Cannot recover signature: point at infinify");return p.assertValidity(),p}toRawBytes(e=!1){return qo(this.toHex(e))}toHex(e=!1){const t=Ho(this.x);return e?`${this.hasEvenY()?"02":"03"}${t}`:`04${t}${Ho(this.y)}`}toHexX(){return this.toHex(!0).slice(2)}toRawX(){return this.toRawBytes(!0).slice(1)}assertValidity(){const e="Point is not on elliptic curve",{x:t,y:n}=this;if(!sl(t)||!sl(n))throw new Error(e);const r=Wo(n*n);if(Wo(r-No(t))!==go)throw new Error(e)}equals(e){return this.x===e.x&&this.y===e.y}negate(){return new Io(this.x,Wo(-this.y))}double(){return Bo.fromAffine(this).double().toAffine()}add(e){return Bo.fromAffine(this).add(Bo.fromAffine(e)).toAffine()}subtract(e){return this.add(e.negate())}multiply(e){return Bo.fromAffine(this).multiply(e,this).toAffine()}multiplyAndAddUnsafe(e,t,n){const r=Bo.fromAffine(this),s=t===go||t===mo||this!==Io.BASE?r.multiplyUnsafe(t):r.multiply(t),i=Bo.fromAffine(e).multiplyUnsafe(n),a=s.add(i);return a.equals(Bo.ZERO)?void 0:a.toAffine()}}function Fo(e){return Number.parseInt(e[0],16)>=8?"00"+e:e}function Lo(e){if(e.length<2||2!==e[0])throw new Error(`Invalid signature integer tag: ${jo(e)}`);const t=e[1],n=e.subarray(2,t+2);if(!t||n.length!==t)throw new Error("Invalid signature integer: wrong length");if(0===n[0]&&n[1]<=127)throw new Error("Invalid signature integer: trailing length");return{data:Qo(n),left:e.subarray(t+2)}}Io.BASE=new Io(wo.Gx,wo.Gy),Io.ZERO=new Io(go,go);class Uo{constructor(e,t){this.r=e,this.s=t,this.assertValidity()}static fromCompact(e){const t=e instanceof Uint8Array,n="Signature.fromCompact";if("string"!=typeof e&&!t)throw new TypeError(`${n}: Expected string or Uint8Array`);const r=t?jo(e):e;if(128!==r.length)throw new Error(`${n}: Expected 64-byte hex`);return new Uo(zo(r.slice(0,64)),zo(r.slice(64,128)))}static fromDER(e){const t=e instanceof Uint8Array;if("string"!=typeof e&&!t)throw new TypeError("Signature.fromDER: Expected string or Uint8Array");const{r:n,s:r}=function(e){if(e.length<2||48!=e[0])throw new Error(`Invalid signature tag: ${jo(e)}`);if(e[1]!==e.length-2)throw new Error("Invalid signature: incorrect length");const{data:t,left:n}=Lo(e.subarray(2)),{data:r,left:s}=Lo(n);if(s.length)throw new Error(`Invalid signature: left bytes after parsing: ${jo(s)}`);return{r:t,s:r}}(t?e:qo(e));return new Uo(n,r)}static fromHex(e){return this.fromDER(e)}assertValidity(){const{r:e,s:t}=this;if(!rl(e))throw new Error("Invalid Signature: r must be 0 < r < n");if(!rl(t))throw new Error("Invalid Signature: s must be 0 < s < n")}hasHighS(){const e=wo.n>>mo;return this.s>e}normalizeS(){return this.hasHighS()?new Uo(this.r,Wo(-this.s,wo.n)):this}toDERRawBytes(){return qo(this.toDERHex())}toDERHex(){const e=Fo(Go(this.s)),t=Fo(Go(this.r)),n=e.length/2,r=t.length/2,s=Go(n),i=Go(r);return`30${Go(r+n+4)}02${i}${t}02${s}${e}`}toRawBytes(){return this.toDERRawBytes()}toHex(){return this.toDERHex()}toCompactRawBytes(){return qo(this.toCompactHex())}toCompactHex(){return Ho(this.r)+Ho(this.s)}}function Do(...e){if(!e.every((e=>e instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===e.length)return e[0];const t=e.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(t);for(let t=0,r=0;t<e.length;t++){const s=e[t];n.set(s,r),r+=s.length}return n}const Mo=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function jo(e){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");let t="";for(let n=0;n<e.length;n++)t+=Mo[e[n]];return t}const Vo=BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");function Ho(e){if("bigint"!=typeof e)throw new Error("Expected bigint");if(!(go<=e&&e<Vo))throw new Error("Expected number 0 <= n < 2^256");return e.toString(16).padStart(64,"0")}function $o(e){const t=qo(Ho(e));if(32!==t.length)throw new Error("Error: expected 32 bytes");return t}function Go(e){const t=e.toString(16);return 1&t.length?`0${t}`:t}function zo(e){if("string"!=typeof e)throw new TypeError("hexToNumber: expected string, got "+typeof e);return BigInt(`0x${e}`)}function qo(e){if("string"!=typeof e)throw new TypeError("hexToBytes: expected string, got "+typeof e);if(e.length%2)throw new Error("hexToBytes: received invalid unpadded hex"+e.length);const t=new Uint8Array(e.length/2);for(let n=0;n<t.length;n++){const r=2*n,s=e.slice(r,r+2),i=Number.parseInt(s,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");t[n]=i}return t}function Qo(e){return zo(jo(e))}function Jo(e){return e instanceof Uint8Array?Uint8Array.from(e):qo(e)}function Ko(e){if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)return BigInt(e);if("bigint"==typeof e&&rl(e))return e;throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n")}function Wo(e,t=wo.P){const n=e%t;return n>=go?n:t+n}function Yo(e,t){const{P:n}=wo;let r=e;for(;t-- >go;)r*=r,r%=n;return r}function Zo(e,t=wo.P){if(e===go||t<=go)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let n=Wo(e,t),r=t,s=go,i=mo,a=mo,o=go;for(;n!==go;){const e=r/n,t=r%n,l=s-a*e,c=i-o*e;r=n,n=t,s=a,i=o,a=l,o=c}if(r!==mo)throw new Error("invert: does not exist");return Wo(s,t)}function Xo(e,t=!1){const n=function(e){const t=8*e.length-8*ko,n=Qo(e);return t>0?n>>BigInt(t):n}(e);if(t)return n;const{n:r}=wo;return n>=r?n-r:n}let el,tl;class nl{constructor(e,t){if(this.hashLen=e,this.qByteLen=t,"number"!=typeof e||e<2)throw new Error("hashLen must be a number");if("number"!=typeof t||t<2)throw new Error("qByteLen must be a number");this.v=new Uint8Array(e).fill(1),this.k=new Uint8Array(e).fill(0),this.counter=0}hmac(...e){return pl.hmacSha256(this.k,...e)}hmacSync(...e){return tl(this.k,...e)}checkSync(){if("function"!=typeof tl)throw new So("hmacSha256Sync needs to be set")}incr(){if(this.counter>=1e3)throw new Error("Tried 1,000 k values for sign(), all were invalid");this.counter+=1}async reseed(e=new Uint8Array){this.k=await this.hmac(this.v,Uint8Array.from([0]),e),this.v=await this.hmac(this.v),0!==e.length&&(this.k=await this.hmac(this.v,Uint8Array.from([1]),e),this.v=await this.hmac(this.v))}reseedSync(e=new Uint8Array){this.checkSync(),this.k=this.hmacSync(this.v,Uint8Array.from([0]),e),this.v=this.hmacSync(this.v),0!==e.length&&(this.k=this.hmacSync(this.v,Uint8Array.from([1]),e),this.v=this.hmacSync(this.v))}async generate(){this.incr();let e=0;const t=[];for(;e<this.qByteLen;){this.v=await this.hmac(this.v);const n=this.v.slice();t.push(n),e+=this.v.length}return Do(...t)}generateSync(){this.checkSync(),this.incr();let e=0;const t=[];for(;e<this.qByteLen;){this.v=this.hmacSync(this.v);const n=this.v.slice();t.push(n),e+=this.v.length}return Do(...t)}}function rl(e){return go<e&&e<wo.n}function sl(e){return go<e&&e<wo.P}function il(e,t,n,r=!0){const{n:s}=wo,i=Xo(e,!0);if(!rl(i))return;const a=Zo(i,s),o=Io.BASE.multiply(i),l=Wo(o.x,s);if(l===go)return;const c=Wo(a*Wo(t+n*l,s),s);if(c===go)return;let u=new Uo(l,c),h=(o.x===u.r?0:2)|Number(o.y&mo);return r&&u.hasHighS()&&(u=u.normalizeS(),h^=1),{sig:u,recovery:h}}function al(e){let t;if("bigint"==typeof e)t=e;else if("number"==typeof e&&Number.isSafeInteger(e)&&e>0)t=BigInt(e);else if("string"==typeof e){if(e.length!==2*ko)throw new Error("Expected 32 bytes of private key");t=zo(e)}else{if(!(e instanceof Uint8Array))throw new TypeError("Expected valid private key");if(e.length!==ko)throw new Error("Expected 32 bytes of private key");t=Qo(e)}if(!rl(t))throw new Error("Expected private key: 0 < key < n");return t}function ol(e){const t=e instanceof Uint8Array,n="string"==typeof e,r=(t||n)&&e.length;return t?r===xo||r===Co:n?r===2*xo||r===2*Co:e instanceof Io}function ll(e){return Qo(e.length>Eo?e.slice(0,Eo):e)}function cl(e){const t=ll(e),n=Wo(t,wo.n);return ul(n<go?t:n)}function ul(e){return $o(e)}Io.BASE._setWindowSize(8);const hl={node:fo,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0},dl={},pl={bytesToHex:jo,hexToBytes:qo,concatBytes:Do,mod:Wo,invert:Zo,isValidPrivateKey(e){try{return al(e),!0}catch(e){return!1}},_bigintTo32Bytes:$o,_normalizePrivateKey:al,hashToPrivateKey:e=>{e=Jo(e);const t=ko+8;if(e.length<t||e.length>1024)throw new Error("Expected valid bytes of private key as per FIPS 186");return $o(Wo(Qo(e),wo.n-mo)+mo)},randomBytes:(e=32)=>{if(hl.web)return hl.web.getRandomValues(new Uint8Array(e));if(hl.node){const{randomBytes:t}=hl.node;return Uint8Array.from(t(e))}throw new Error("The environment doesn't have randomBytes function")},randomPrivateKey:()=>pl.hashToPrivateKey(pl.randomBytes(ko+8)),precompute(e=8,t=Io.BASE){const n=t===Io.BASE?t:new Io(t.x,t.y);return n._setWindowSize(e),n.multiply(bo),n},sha256:async(...e)=>{if(hl.web){const t=await hl.web.subtle.digest("SHA-256",Do(...e));return new Uint8Array(t)}if(hl.node){const{createHash:t}=hl.node,n=t("sha256");return e.forEach((e=>n.update(e))),Uint8Array.from(n.digest())}throw new Error("The environment doesn't have sha256 function")},hmacSha256:async(e,...t)=>{if(hl.web){const n=await hl.web.subtle.importKey("raw",e,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign"]),r=Do(...t),s=await hl.web.subtle.sign("HMAC",n,r);return new Uint8Array(s)}if(hl.node){const{createHmac:n}=hl.node,r=n("sha256",e);return t.forEach((e=>r.update(e))),Uint8Array.from(r.digest())}throw new Error("The environment doesn't have hmac-sha256 function")},sha256Sync:void 0,hmacSha256Sync:void 0,taggedHash:async(e,...t)=>{let n=dl[e];if(void 0===n){const t=await pl.sha256(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=Do(t,t),dl[e]=n}return pl.sha256(n,...t)},taggedHashSync:(e,...t)=>{if("function"!=typeof el)throw new So("sha256Sync is undefined, you need to set it");let n=dl[e];if(void 0===n){const t=el(Uint8Array.from(e,(e=>e.charCodeAt(0))));n=Do(t,t),dl[e]=n}return el(n,...t)},_JacobianPoint:Bo};Object.defineProperties(pl,{sha256Sync:{configurable:!1,get:()=>el,set(e){el||(el=e)}},hmacSha256Sync:{configurable:!1,get:()=>tl,set(e){tl||(tl=e)}}});class fl extends dn{constructor(e,t){super(),this.finished=!1,this.destroyed=!1,nn.hash(e);const n=hn(t);if(this.iHash=e.create(),!(this.iHash instanceof dn))throw new TypeError("Expected instance of class which extends utils.Hash");const r=this.blockLen=this.iHash.blockLen;this.outputLen=this.iHash.outputLen;const s=new Uint8Array(r);s.set(n.length>this.iHash.blockLen?e.create().update(n).digest():n);for(let e=0;e<s.length;e++)s[e]^=54;this.iHash.update(s),this.oHash=e.create();for(let e=0;e<s.length;e++)s[e]^=106;this.oHash.update(s),s.fill(0)}update(e){return nn.exists(this),this.iHash.update(e),this}digestInto(e){nn.exists(this),nn.bytes(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:t,iHash:n,finished:r,destroyed:s,blockLen:i,outputLen:a}=this;return e.finished=r,e.destroyed=s,e.blockLen=i,e.outputLen=a,e.oHash=t._cloneInto(e.oHash),e.iHash=n._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const gl=(e,t,n)=>new fl(e,t).update(n).digest();gl.create=(e,t)=>new fl(e,t);class ml extends dn{constructor(e,t,n,r){super(),this.blockLen=e,this.outputLen=t,this.padOffset=n,this.isLE=r,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=cn(this.buffer)}update(e){nn.exists(this);const{view:t,buffer:n,blockLen:r}=this,s=(e=hn(e)).length;for(let i=0;i<s;){const a=Math.min(r-this.pos,s-i);if(a!==r)n.set(e.subarray(i,i+a),this.pos),this.pos+=a,i+=a,this.pos===r&&(this.process(t,0),this.pos=0);else{const t=cn(e);for(;r<=s-i;i+=r)this.process(t,i)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){nn.exists(this),nn.output(e,this),this.finished=!0;const{buffer:t,view:n,blockLen:r,isLE:s}=this;let{pos:i}=this;t[i++]=128,this.buffer.subarray(i).fill(0),this.padOffset>r-i&&(this.process(n,0),i=0);for(let e=i;e<r;e++)t[e]=0;!function(e,t,n,r){if("function"==typeof e.setBigUint64)return e.setBigUint64(t,n,r);const s=BigInt(32),i=BigInt(4294967295),a=Number(n>>s&i),o=Number(n&i),l=r?4:0,c=r?0:4;e.setUint32(t+l,a,r),e.setUint32(t+c,o,r)}(n,r-8,BigInt(8*this.length),s),this.process(n,0);const a=cn(e);this.get().forEach(((e,t)=>a.setUint32(4*t,e,s)))}digest(){const{buffer:e,outputLen:t}=this;this.digestInto(e);const n=e.slice(0,t);return this.destroy(),n}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:t,buffer:n,length:r,finished:s,destroyed:i,pos:a}=this;return e.length=r,e.pos=a,e.finished=s,e.destroyed=i,r%t&&e.buffer.set(n),e}}const yl=(e,t,n)=>e&t^~e&n,bl=(e,t,n)=>e&t^e&n^t&n,vl=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),wl=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),Al=new Uint32Array(64);class _l extends ml{constructor(){super(64,32,8,!1),this.A=0|wl[0],this.B=0|wl[1],this.C=0|wl[2],this.D=0|wl[3],this.E=0|wl[4],this.F=0|wl[5],this.G=0|wl[6],this.H=0|wl[7]}get(){const{A:e,B:t,C:n,D:r,E:s,F:i,G:a,H:o}=this;return[e,t,n,r,s,i,a,o]}set(e,t,n,r,s,i,a,o){this.A=0|e,this.B=0|t,this.C=0|n,this.D=0|r,this.E=0|s,this.F=0|i,this.G=0|a,this.H=0|o}process(e,t){for(let n=0;n<16;n++,t+=4)Al[n]=e.getUint32(t,!1);for(let e=16;e<64;e++){const t=Al[e-15],n=Al[e-2],r=un(t,7)^un(t,18)^t>>>3,s=un(n,17)^un(n,19)^n>>>10;Al[e]=s+Al[e-7]+r+Al[e-16]|0}let{A:n,B:r,C:s,D:i,E:a,F:o,G:l,H:c}=this;for(let e=0;e<64;e++){const t=c+(un(a,6)^un(a,11)^un(a,25))+yl(a,o,l)+vl[e]+Al[e]|0,u=(un(n,2)^un(n,13)^un(n,22))+bl(n,r,s)|0;c=l,l=o,o=a,a=i+t|0,i=s,s=r,r=n,n=t+u|0}n=n+this.A|0,r=r+this.B|0,s=s+this.C|0,i=i+this.D|0,a=a+this.E|0,o=o+this.F|0,l=l+this.G|0,c=c+this.H|0,this.set(n,r,s,i,a,o,l,c)}roundClean(){Al.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const El=pn((()=>new _l)),[kl,xl]=ln.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map((e=>BigInt(e)))),Cl=new Uint32Array(80),Nl=new Uint32Array(80);class Pl extends ml{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:e,Al:t,Bh:n,Bl:r,Ch:s,Cl:i,Dh:a,Dl:o,Eh:l,El:c,Fh:u,Fl:h,Gh:d,Gl:p,Hh:f,Hl:g}=this;return[e,t,n,r,s,i,a,o,l,c,u,h,d,p,f,g]}set(e,t,n,r,s,i,a,o,l,c,u,h,d,p,f,g){this.Ah=0|e,this.Al=0|t,this.Bh=0|n,this.Bl=0|r,this.Ch=0|s,this.Cl=0|i,this.Dh=0|a,this.Dl=0|o,this.Eh=0|l,this.El=0|c,this.Fh=0|u,this.Fl=0|h,this.Gh=0|d,this.Gl=0|p,this.Hh=0|f,this.Hl=0|g}process(e,t){for(let n=0;n<16;n++,t+=4)Cl[n]=e.getUint32(t),Nl[n]=e.getUint32(t+=4);for(let e=16;e<80;e++){const t=0|Cl[e-15],n=0|Nl[e-15],r=ln.rotrSH(t,n,1)^ln.rotrSH(t,n,8)^ln.shrSH(t,n,7),s=ln.rotrSL(t,n,1)^ln.rotrSL(t,n,8)^ln.shrSL(t,n,7),i=0|Cl[e-2],a=0|Nl[e-2],o=ln.rotrSH(i,a,19)^ln.rotrBH(i,a,61)^ln.shrSH(i,a,6),l=ln.rotrSL(i,a,19)^ln.rotrBL(i,a,61)^ln.shrSL(i,a,6),c=ln.add4L(s,l,Nl[e-7],Nl[e-16]),u=ln.add4H(c,r,o,Cl[e-7],Cl[e-16]);Cl[e]=0|u,Nl[e]=0|c}let{Ah:n,Al:r,Bh:s,Bl:i,Ch:a,Cl:o,Dh:l,Dl:c,Eh:u,El:h,Fh:d,Fl:p,Gh:f,Gl:g,Hh:m,Hl:y}=this;for(let e=0;e<80;e++){const t=ln.rotrSH(u,h,14)^ln.rotrSH(u,h,18)^ln.rotrBH(u,h,41),b=ln.rotrSL(u,h,14)^ln.rotrSL(u,h,18)^ln.rotrBL(u,h,41),v=u&d^~u&f,w=h&p^~h&g,A=ln.add5L(y,b,w,xl[e],Nl[e]),_=ln.add5H(A,m,t,v,kl[e],Cl[e]),E=0|A,k=ln.rotrSH(n,r,28)^ln.rotrBH(n,r,34)^ln.rotrBH(n,r,39),x=ln.rotrSL(n,r,28)^ln.rotrBL(n,r,34)^ln.rotrBL(n,r,39),C=n&s^n&a^s&a,N=r&i^r&o^i&o;m=0|f,y=0|g,f=0|d,g=0|p,d=0|u,p=0|h,({h:u,l:h}=ln.add(0|l,0|c,0|_,0|E)),l=0|a,c=0|o,a=0|s,o=0|i,s=0|n,i=0|r;const P=ln.add3L(E,x,N);n=ln.add3H(P,_,k,C),r=0|P}({h:n,l:r}=ln.add(0|this.Ah,0|this.Al,0|n,0|r)),({h:s,l:i}=ln.add(0|this.Bh,0|this.Bl,0|s,0|i)),({h:a,l:o}=ln.add(0|this.Ch,0|this.Cl,0|a,0|o)),({h:l,l:c}=ln.add(0|this.Dh,0|this.Dl,0|l,0|c)),({h:u,l:h}=ln.add(0|this.Eh,0|this.El,0|u,0|h)),({h:d,l:p}=ln.add(0|this.Fh,0|this.Fl,0|d,0|p)),({h:f,l:g}=ln.add(0|this.Gh,0|this.Gl,0|f,0|g)),({h:m,l:y}=ln.add(0|this.Hh,0|this.Hl,0|m,0|y)),this.set(n,r,s,i,a,o,l,c,u,h,d,p,f,g,m,y)}roundClean(){Cl.fill(0),Nl.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}class Sl extends Pl{constructor(){super(),this.Ah=573645204,this.Al=-64227540,this.Bh=-1621794909,this.Bl=-934517566,this.Ch=596883563,this.Cl=1867755857,this.Dh=-1774684391,this.Dl=1497426621,this.Eh=-1775747358,this.El=-1467023389,this.Fh=-1101128155,this.Fl=1401305490,this.Gh=721525244,this.Gl=746961066,this.Hh=246885852,this.Hl=-2117784414,this.outputLen=32}}class Ol extends Pl{constructor(){super(),this.Ah=-876896931,this.Al=-1056596264,this.Bh=1654270250,this.Bl=914150663,this.Ch=-1856437926,this.Cl=812702999,this.Dh=355462360,this.Dl=-150054599,this.Eh=1731405415,this.El=-4191439,this.Fh=-1900787065,this.Fl=1750603025,this.Gh=-619958771,this.Gl=1694076839,this.Hh=1203062813,this.Hl=-1090891868,this.outputLen=48}}const Bl=pn((()=>new Pl));pn((()=>new Sl)),pn((()=>new Ol));const Rl=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("unable to locate global object")}();Rl.crypto||Rl.msCrypto;let Tl=!1;const Il=function(e,t,n){return function(e,t){const n={sha256:El,sha512:Bl}[e];return gt(null!=n,"invalid hmac algorithm","algorithm",e),gl.create(n,t)}(e,t).update(n).digest()};let Fl=Il;function Ll(e,t,n){const r=wt(t,"key"),s=wt(n,"data");return kt(Fl(e,r,s))}Ll._=Il,Ll.lock=function(){Tl=!0},Ll.register=function(e){if(Tl)throw new Error("computeHmac is locked");Fl=e},Object.freeze(Ll),pl.hmacSha256Sync=function(e,...t){return wt(Ll("sha256",e,xt(t)))};class Ul{#Z;constructor(e){gt(32===Ct(e),"invalid private key","privateKey","[REDACTED]"),this.#Z=kt(e)}get privateKey(){return this.#Z}get publicKey(){return Ul.computePublicKey(this.#Z)}get compressedPublicKey(){return Ul.computePublicKey(this.#Z,!0)}sign(e){gt(32===Ct(e),"invalid digest length","digest",e);const[t,n]=function(e,t,n={}){const{seed:r,m:s,d:i}=function(e,t,n){if(null==e)throw new Error(`sign: expected valid message hash, not "${e}"`);const r=Jo(e),s=al(t),i=[ul(s),cl(r)];if(null!=n){!0===n&&(n=pl.randomBytes(Eo));const e=Jo(n);if(e.length!==Eo)throw new Error(`sign: Expected ${Eo} bytes of extra data`);i.push(e)}return{seed:Do(...i),m:ll(r),d:s}}(e,t,n.extraEntropy),a=new nl(32,ko);let o;for(a.reseedSync(r);!(o=il(a.generateSync(),s,i,n.canonical));)a.reseedSync();return function(e,t){const{sig:n,recovery:r}=e,{der:s,recovered:i}=Object.assign({canonical:!0,der:!0},t),a=s?n.toDERRawBytes():n.toCompactRawBytes();return i?[a,r]:a}(o,n)}(At(e),At(this.#Z),{recovered:!0,canonical:!0}),r=Uo.fromHex(t);return ho.from({r:Vt("0x"+r.r.toString(16),32),s:Vt("0x"+r.s.toString(16),32),v:n?28:27})}computeSharedSecret(e){const t=Ul.computePublicKey(e);return kt(function(e,t,n=!1){if(ol(e))throw new TypeError("getSharedSecret: first arg must be private key");if(!ol(t))throw new TypeError("getSharedSecret: second arg must be public key");const r=(s=t)instanceof Io?(s.assertValidity(),s):Io.fromHex(s);var s;return r.assertValidity(),r.multiply(al(e)).toRawBytes(n)}(At(this.#Z),wt(t)))}static computePublicKey(e,t){let n=wt(e,"key");if(32===n.length)return kt(function(e,t=!1){return Io.fromPrivateKey(e).toRawBytes(t)}(n,!!t));if(64===n.length){const e=new Uint8Array(65);e[0]=4,e.set(n,1),n=e}return kt(Io.fromHex(n).toRawBytes(t))}static recoverPublicKey(e,t){gt(32===Ct(e),"invalid digest length","digest",e);const n=ho.from(t),r=Uo.fromCompact(At(xt([n.r,n.s]))).toDERRawBytes(),s=function(e,t,n,r=!1){return Io.fromSignature(e,t,n).toRawBytes(r)}(At(e),r,n.yParity);return gt(null!=s,"invalid signature for digest","signature",t),kt(s)}static addPoints(e,t,n){const r=Io.fromHex(Ul.computePublicKey(e).substring(2)),s=Io.fromHex(Ul.computePublicKey(t).substring(2));return"0x"+r.add(s).toHex(!!n)}}function Dl(e){let t=e.toString(16);for(;t.length<2;)t="0"+t;return"0x"+t}function Ml(e,t,n){let r=0;for(let s=0;s<n;s++)r=256*r+e[t+s];return r}function jl(e,t,n,r){const s=[];for(;n<t+1+r;){const i=Vl(e,n);s.push(i.result),ft((n+=i.consumed)<=t+1+r,"child data too short","BUFFER_OVERRUN",{buffer:e,length:r,offset:t})}return{consumed:1+r,result:s}}function Vl(e,t){ft(0!==e.length,"data too short","BUFFER_OVERRUN",{buffer:e,length:0,offset:1});const n=t=>{ft(t<=e.length,"data short segment too short","BUFFER_OVERRUN",{buffer:e,length:e.length,offset:t})};if(e[t]>=248){const r=e[t]-247;n(t+1+r);const s=Ml(e,t+1,r);return n(t+1+r+s),jl(e,t,t+1+r,r+s)}if(e[t]>=192){const r=e[t]-192;return n(t+1+r),jl(e,t,t+1,r)}if(e[t]>=184){const r=e[t]-183;n(t+1+r);const s=Ml(e,t+1,r);return n(t+1+r+s),{consumed:1+r+s,result:kt(e.slice(t+1+r,t+1+r+s))}}if(e[t]>=128){const r=e[t]-128;return n(t+1+r),{consumed:1+r,result:kt(e.slice(t+1,t+1+r))}}return{consumed:1,result:Dl(e[t])}}function Hl(e){const t=wt(e,"data"),n=Vl(t,0);return gt(n.consumed===t.length,"unexpected junk after rlp payload","data",e),n.result}function $l(e){const t=[];for(;e;)t.unshift(255&e),e>>=8;return t}function Gl(e){if(Array.isArray(e)){let t=[];if(e.forEach((function(e){t=t.concat(Gl(e))})),t.length<=55)return t.unshift(192+t.length),t;const n=$l(t.length);return n.unshift(247+n.length),n.concat(t)}const t=Array.prototype.slice.call(wt(e,"object"));if(1===t.length&&t[0]<=127)return t;if(t.length<=55)return t.unshift(128+t.length),t;const n=$l(t.length);return n.unshift(183+n.length),n.concat(t)}const zl="0123456789abcdef";function ql(e){let t="0x";for(const n of Gl(e))t+=zl[n>>4],t+=zl[15&n];return t}const Ql=BigInt(0),Jl=BigInt(2),Kl=BigInt(27),Wl=BigInt(28),Yl=BigInt(35),Zl=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");function Xl(e){return"0x"===e?null:Vn(e)}function ec(e,t){try{return Ss(e)}catch(n){gt(!1,n.message,t,e)}}function tc(e,t){return"0x"===e?0:jt(e,t)}function nc(e,t){if("0x"===e)return Ql;const n=Lt(e,t);return gt(n<=Zl,"value exceeds uint size",t,n),n}function rc(e,t){const n=Lt(e,"value"),r=Ht(n);return gt(r.length<=32,"value too large",`tx.${t}`,n),r}function sc(e){return Ss(e).map((e=>[e.address,e.storageKeys]))}function ic(e,t){const n=[rc(e.nonce||0,"nonce"),rc(e.gasPrice||0,"gasPrice"),rc(e.gasLimit||0,"gasLimit"),null!=e.to?Vn(e.to):"0x",rc(e.value||0,"value"),e.data||"0x"];let r=Ql;if(e.chainId!=Ql)r=Lt(e.chainId,"tx.chainId"),gt(!t||null==t.networkV||t.legacyChainId===r,"tx.chainId/sig.v mismatch","sig",t);else if(e.signature){const t=e.signature.legacyChainId;null!=t&&(r=t)}if(!t)return r!==Ql&&(n.push(Ht(r)),n.push("0x"),n.push("0x")),ql(n);let s=BigInt(27+t.yParity);return r!==Ql?s=ho.getChainIdV(r,t.v):BigInt(t.v)!==s&&gt(!1,"tx.chainId/sig.v mismatch","sig",t),n.push(Ht(s)),n.push(Ht(t.r)),n.push(Ht(t.s)),ql(n)}function ac(e,t){let n;try{if(n=tc(t[0],"yParity"),0!==n&&1!==n)throw new Error("bad yParity")}catch(e){gt(!1,"invalid yParity","yParity",t[0])}const r=St(t[1],32),s=St(t[2],32),i=ho.from({r,s,yParity:n});e.signature=i}function oc(e,t){const n=[rc(e.chainId||0,"chainId"),rc(e.nonce||0,"nonce"),rc(e.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),rc(e.maxFeePerGas||0,"maxFeePerGas"),rc(e.gasLimit||0,"gasLimit"),null!=e.to?Vn(e.to):"0x",rc(e.value||0,"value"),e.data||"0x",sc(e.accessList||[])];return t&&(n.push(rc(t.yParity,"yParity")),n.push(Ht(t.r)),n.push(Ht(t.s))),xt(["0x02",ql(n)])}function lc(e,t){const n=[rc(e.chainId||0,"chainId"),rc(e.nonce||0,"nonce"),rc(e.gasPrice||0,"gasPrice"),rc(e.gasLimit||0,"gasLimit"),null!=e.to?Vn(e.to):"0x",rc(e.value||0,"value"),e.data||"0x",sc(e.accessList||[])];return t&&(n.push(rc(t.yParity,"recoveryParam")),n.push(Ht(t.r)),n.push(Ht(t.s))),xt(["0x01",ql(n)])}class cc{#X;#ee;#t;#te;#ne;#re;#se;#ie;#ae;#oe;#le;#ce;get type(){return this.#X}set type(e){switch(e){case null:this.#X=null;break;case 0:case"legacy":this.#X=0;break;case 1:case"berlin":case"eip-2930":this.#X=1;break;case 2:case"london":case"eip-1559":this.#X=2;break;default:gt(!1,"unsupported transaction type","type",e)}}get typeName(){switch(this.type){case 0:return"legacy";case 1:return"eip-2930";case 2:return"eip-1559"}return null}get to(){return this.#ee}set to(e){this.#ee=null==e?null:Vn(e)}get nonce(){return this.#te}set nonce(e){this.#te=jt(e,"value")}get gasLimit(){return this.#ne}set gasLimit(e){this.#ne=Lt(e)}get gasPrice(){const e=this.#re;return null!=e||0!==this.type&&1!==this.type?e:Ql}set gasPrice(e){this.#re=null==e?null:Lt(e,"gasPrice")}get maxPriorityFeePerGas(){const e=this.#se;return null==e?2===this.type?Ql:null:e}set maxPriorityFeePerGas(e){this.#se=null==e?null:Lt(e,"maxPriorityFeePerGas")}get maxFeePerGas(){const e=this.#ie;return null==e?2===this.type?Ql:null:e}set maxFeePerGas(e){this.#ie=null==e?null:Lt(e,"maxFeePerGas")}get data(){return this.#t}set data(e){this.#t=kt(e)}get value(){return this.#ae}set value(e){this.#ae=Lt(e,"value")}get chainId(){return this.#oe}set chainId(e){this.#oe=Lt(e)}get signature(){return this.#le||null}set signature(e){this.#le=null==e?null:ho.from(e)}get accessList(){const e=this.#ce||null;return null==e?1===this.type||2===this.type?[]:null:e}set accessList(e){this.#ce=null==e?null:Ss(e)}constructor(){this.#X=null,this.#ee=null,this.#te=0,this.#ne=BigInt(0),this.#re=null,this.#se=null,this.#ie=null,this.#t="0x",this.#ae=BigInt(0),this.#oe=BigInt(0),this.#le=null,this.#ce=null}get hash(){return null==this.signature?null:In(this.serialized)}get unsignedHash(){return In(this.unsignedSerialized)}get from(){return null==this.signature?null:(e=this.unsignedHash,t=this.signature,function(e){let t;return t="string"==typeof e?Ul.computePublicKey(e,!1):e.publicKey,Vn(In("0x"+t.substring(4)).substring(26))}(Ul.recoverPublicKey(e,t)));var e,t}get fromPublicKey(){return null==this.signature?null:Ul.recoverPublicKey(this.unsignedHash,this.signature)}isSigned(){return null!=this.signature}get serialized(){switch(ft(null!=this.signature,"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized","UNSUPPORTED_OPERATION",{operation:".serialized"}),this.inferType()){case 0:return ic(this,this.signature);case 1:return lc(this,this.signature);case 2:return oc(this,this.signature)}ft(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:".serialized"})}get unsignedSerialized(){switch(this.inferType()){case 0:return ic(this);case 1:return lc(this);case 2:return oc(this)}ft(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:".unsignedSerialized"})}inferType(){return this.inferTypes().pop()}inferTypes(){const e=null!=this.gasPrice,t=null!=this.maxFeePerGas||null!=this.maxPriorityFeePerGas,n=null!=this.accessList;null!=this.maxFeePerGas&&null!=this.maxPriorityFeePerGas&&ft(this.maxFeePerGas>=this.maxPriorityFeePerGas,"priorityFee cannot be more than maxFee","BAD_DATA",{value:this}),ft(!t||0!==this.type&&1!==this.type,"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas","BAD_DATA",{value:this}),ft(0!==this.type||!n,"legacy transaction cannot have accessList","BAD_DATA",{value:this});const r=[];return null!=this.type?r.push(this.type):t?r.push(2):e?(r.push(1),n||r.push(0)):n?(r.push(1),r.push(2)):(r.push(0),r.push(1),r.push(2)),r.sort(),r}isLegacy(){return 0===this.type}isBerlin(){return 1===this.type}isLondon(){return 2===this.type}clone(){return cc.from(this)}toJSON(){const e=e=>null==e?null:e.toString();return{type:this.type,to:this.to,data:this.data,nonce:this.nonce,gasLimit:e(this.gasLimit),gasPrice:e(this.gasPrice),maxPriorityFeePerGas:e(this.maxPriorityFeePerGas),maxFeePerGas:e(this.maxFeePerGas),value:e(this.value),chainId:e(this.chainId),sig:this.signature?this.signature.toJSON():null,accessList:this.accessList}}static from(e){if(null==e)return new cc;if("string"==typeof e){const t=wt(e);if(t[0]>=127)return cc.from(function(e){const t=Hl(e);gt(Array.isArray(t)&&(9===t.length||6===t.length),"invalid field count for legacy transaction","data",e);const n={type:0,nonce:tc(t[0],"nonce"),gasPrice:nc(t[1],"gasPrice"),gasLimit:nc(t[2],"gasLimit"),to:Xl(t[3]),value:nc(t[4],"value"),data:kt(t[5]),chainId:Ql};if(6===t.length)return n;const r=nc(t[6],"v"),s=nc(t[7],"r"),i=nc(t[8],"s");if(s===Ql&&i===Ql)n.chainId=r;else{let s=(r-Yl)/Jl;s<Ql&&(s=Ql),n.chainId=s,gt(s!==Ql||r===Kl||r===Wl,"non-canonical legacy v","v",t[6]),n.signature=ho.from({r:St(t[7],32),s:St(t[8],32),v:r}),n.hash=In(e)}return n}(t));switch(t[0]){case 1:return cc.from(function(e){const t=Hl(wt(e).slice(1));gt(Array.isArray(t)&&(8===t.length||11===t.length),"invalid field count for transaction type: 1","data",kt(e));const n={type:1,chainId:nc(t[0],"chainId"),nonce:tc(t[1],"nonce"),gasPrice:nc(t[2],"gasPrice"),gasLimit:nc(t[3],"gasLimit"),to:Xl(t[4]),value:nc(t[5],"value"),data:kt(t[6]),accessList:ec(t[7],"accessList")};return 8===t.length||(n.hash=In(e),ac(n,t.slice(8))),n}(t));case 2:return cc.from(function(e){const t=Hl(wt(e).slice(1));gt(Array.isArray(t)&&(9===t.length||12===t.length),"invalid field count for transaction type: 2","data",kt(e));const n=nc(t[2],"maxPriorityFeePerGas"),r=nc(t[3],"maxFeePerGas"),s={type:2,chainId:nc(t[0],"chainId"),nonce:tc(t[1],"nonce"),maxPriorityFeePerGas:n,maxFeePerGas:r,gasPrice:null,gasLimit:nc(t[4],"gasLimit"),to:Xl(t[5]),value:nc(t[6],"value"),data:kt(t[7]),accessList:ec(t[8],"accessList")};return 9===t.length||(s.hash=In(e),ac(s,t.slice(9))),s}(t))}ft(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:"from"})}const t=new cc;return null!=e.type&&(t.type=e.type),null!=e.to&&(t.to=e.to),null!=e.nonce&&(t.nonce=e.nonce),null!=e.gasLimit&&(t.gasLimit=e.gasLimit),null!=e.gasPrice&&(t.gasPrice=e.gasPrice),null!=e.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas),null!=e.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null!=e.data&&(t.data=e.data),null!=e.value&&(t.value=e.value),null!=e.chainId&&(t.chainId=e.chainId),null!=e.signature&&(t.signature=ho.from(e.signature)),null!=e.accessList&&(t.accessList=e.accessList),null!=e.hash&&(gt(t.isSigned(),"unsigned transaction cannot define hash","tx",e),gt(t.hash===e.hash,"hash mismatch","tx",e)),null!=e.from&&(gt(t.isSigned(),"unsigned transaction cannot define from","tx",e),gt(t.from.toLowerCase()===(e.from||"").toLowerCase(),"from mismatch","tx",e)),t}}BigInt(0);const uc=BigInt(58);function hc(e){return e.match(/^ipfs:\/\/ipfs\//i)?e=e.substring(12):e.match(/^ipfs:\/\//i)?e=e.substring(7):gt(!1,"unsupported IPFS format","link",e),`https://gateway.ipfs.io/ipfs/${e}`}class dc{name;constructor(e){ct(this,{name:e})}connect(e){return this}supportsCoinType(e){return!1}async encodeAddress(e,t){throw new Error("unsupported coin")}async decodeAddress(e,t){throw new Error("unsupported coin")}}const pc=new RegExp("^(ipfs)://(.*)$","i"),fc=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),pc,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")];class gc{provider;address;name;#ue;#he;constructor(e,t,n){ct(this,{provider:e,address:t,name:n}),this.#ue=null,this.#he=new Fi(t,["function supportsInterface(bytes4) view returns (bool)","function resolve(bytes, bytes) view returns (bytes)","function addr(bytes32) view returns (address)","function addr(bytes32, uint) view returns (bytes)","function text(bytes32, string) view returns (string)","function contenthash(bytes32) view returns (bytes)"],e)}async supportsWildcard(){return null==this.#ue&&(this.#ue=(async()=>{try{return await this.#he.supportsInterface("0x9061b923")}catch(e){if(ht(e,"CALL_EXCEPTION"))return!1;throw this.#ue=null,e}})()),await this.#ue}async#de(e,t){t=(t||[]).slice();const n=this.#he.interface;t.unshift(to(this.name));let r=null;var s;await this.supportsWildcard()&&(r=n.getFunction(e),ft(r,"missing fragment","UNKNOWN_ERROR",{info:{funcName:e}}),t=[(s=this.name,kt(xt(eo(s).map((e=>{if(e.length>63)throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");const t=new Uint8Array(e.length+1);return t.set(e,1),t[0]=t.length-1,t}))))+"00"),n.encodeFunctionData(r,t)],e="resolve(bytes,bytes)"),t.push({enableCcipRead:!0});try{const s=await this.#he[e](...t);return r?n.decodeFunctionResult(r,s)[0]:s}catch(e){if(!ht(e,"CALL_EXCEPTION"))throw e}return null}async getAddress(e){if(null==e&&(e=60),60===e)try{const e=await this.#de("addr(bytes32)");return null==e||e===$s?null:e}catch(e){if(ht(e,"CALL_EXCEPTION"))return null;throw e}if(e>=0&&e<2147483648){let t=e+2147483648;const n=await this.#de("addr(bytes32,uint)",[t]);if(_t(n,20))return Vn(n)}let t=null;for(const n of this.provider.plugins)if(n instanceof dc&&n.supportsCoinType(e)){t=n;break}if(null==t)return null;const n=await this.#de("addr(bytes32,uint)",[e]);if(null==n||"0x"===n)return null;const r=await t.decodeAddress(e,n);if(null!=r)return r;ft(!1,"invalid coin data","UNSUPPORTED_OPERATION",{operation:`getAddress(${e})`,info:{coinType:e,data:n}})}async getText(e){const t=await this.#de("text(bytes32,string)",[e]);return null==t||"0x"===t?null:t}async getContentHash(){const e=await this.#de("contenthash(bytes32)");if(null==e||"0x"===e)return null;const t=e.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(t){const e="e3010170"===t[1]?"ipfs":"ipns",n=parseInt(t[4],16);if(t[5].length===2*n)return`${e}://${function(e){let t=Mt(wt(e)),n="";for(;t;)n="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"[Number(t%uc)]+n,t/=uc;return n}("0x"+t[2])}`}const n=e.match(/^0xe40101fa011b20([0-9a-f]*)$/);if(n&&64===n[1].length)return`bzz://${n[1]}`;ft(!1,"invalid or unsupported content hash data","UNSUPPORTED_OPERATION",{operation:"getContentHash()",info:{data:e}})}async getAvatar(){return(await this._getAvatar()).url}async _getAvatar(){const e=[{type:"name",value:this.name}];try{const t=await this.getText("avatar");if(null==t)return e.push({type:"!avatar",value:""}),{url:null,linkage:e};e.push({type:"avatar",value:t});for(let n=0;n<fc.length;n++){const r=t.match(fc[n]);if(null==r)continue;const s=r[1].toLowerCase();switch(s){case"https":case"data":return e.push({type:"url",value:t}),{linkage:e,url:t};case"ipfs":{const n=hc(t);return e.push({type:"ipfs",value:t}),e.push({type:"url",value:n}),{linkage:e,url:n}}case"erc721":case"erc1155":{const n="erc721"===s?"tokenURI(uint256)":"uri(uint256)";e.push({type:s,value:t});const i=await this.getAddress();if(null==i)return e.push({type:"!owner",value:""}),{url:null,linkage:e};const a=(r[2]||"").split("/");if(2!==a.length)return e.push({type:`!${s}caip`,value:r[2]||""}),{url:null,linkage:e};const o=a[1],l=new Fi(a[0],["function tokenURI(uint) view returns (string)","function ownerOf(uint) view returns (address)","function uri(uint) view returns (string)","function balanceOf(address, uint256) view returns (uint)"],this.provider);if("erc721"===s){const t=await l.ownerOf(o);if(i!==t)return e.push({type:"!owner",value:t}),{url:null,linkage:e};e.push({type:"owner",value:t})}else if("erc1155"===s){const t=await l.balanceOf(i,o);if(!t)return e.push({type:"!balance",value:"0"}),{url:null,linkage:e};e.push({type:"balance",value:t.toString()})}let c=await l[n](o);if(null==c||"0x"===c)return e.push({type:"!metadata-url",value:""}),{url:null,linkage:e};e.push({type:"metadata-url-base",value:c}),"erc1155"===s&&(c=c.replace("{id}",Vt(o,32).substring(2)),e.push({type:"metadata-url-expanded",value:c})),c.match(/^ipfs:/i)&&(c=hc(c)),e.push({type:"metadata-url",value:c});let u={};const h=await new js(c).send();h.assertOk();try{u=h.bodyJson}catch(t){try{e.push({type:"!metadata",value:h.bodyText})}catch(t){const n=h.body;return n&&e.push({type:"!metadata",value:kt(n)}),{url:null,linkage:e}}return{url:null,linkage:e}}if(!u)return e.push({type:"!metadata",value:""}),{url:null,linkage:e};e.push({type:"metadata",value:JSON.stringify(u)});let d=u.image;if("string"!=typeof d)return e.push({type:"!imageUrl",value:""}),{url:null,linkage:e};if(d.match(/^(https:\/\/|data:)/i));else{if(null==d.match(pc))return e.push({type:"!imageUrl-ipfs",value:d}),{url:null,linkage:e};e.push({type:"imageUrl-ipfs",value:d}),d=hc(d)}return e.push({type:"url",value:d}),{linkage:e,url:d}}}}}catch(e){}return{linkage:e,url:null}}static async getEnsAddress(e){const t=await e.getNetwork(),n=t.getPlugin("org.ethers.plugins.network.Ens");return ft(n,"network does not support ENS","UNSUPPORTED_OPERATION",{operation:"getEnsAddress",info:{network:t}}),n.address}static async#pe(e,t){const n=await gc.getEnsAddress(e);try{const r=new Fi(n,["function resolver(bytes32) view returns (address)"],e),s=await r.resolver(to(t),{enableCcipRead:!0});return s===$s?null:s}catch(e){throw e}return null}static async fromName(e,t){let n=t;for(;;){if(""===n||"."===n)return null;if("eth"!==t&&"eth"===n)return null;const r=await gc.#pe(e,n);if(null!=r){const s=new gc(e,r,t);return n===t||await s.supportsWildcard()?s:null}n=n.split(".").slice(1).join(".")}}}const mc=BigInt(0);function yc(e,t){return function(n){return null==n?t:e(n)}}function bc(e){return t=>{if(!Array.isArray(t))throw new Error("not an array");return t.map((t=>e(t)))}}function vc(e,t){return n=>{const r={};for(const s in e){let i=s;if(t&&s in t&&!(i in n))for(const e of t[s])if(e in n){i=e;break}try{const t=e[s](n[i]);void 0!==t&&(r[s]=t)}catch(e){ft(!1,`invalid value for value.${s} (${e instanceof Error?e.message:"not-an-error"})`,"BAD_DATA",{value:n})}}return r}}function wc(e){return gt(_t(e,!0),"invalid data","value",e),e}function Ac(e){return gt(_t(e,32),"invalid hash","value",e),e}const _c=vc({address:Vn,blockHash:Ac,blockNumber:jt,data:wc,index:jt,removed:yc((function(e){switch(e){case!0:case"true":return!0;case!1:case"false":return!1}gt(!1,`invalid boolean; ${JSON.stringify(e)}`,"value",e)}),!1),topics:bc(Ac),transactionHash:Ac,transactionIndex:jt},{index:["logIndex"]}),Ec=vc({hash:yc(Ac),parentHash:Ac,number:jt,timestamp:jt,nonce:yc(wc),difficulty:Lt,gasLimit:Lt,gasUsed:Lt,miner:yc(Vn),extraData:wc,baseFeePerGas:yc(Lt)}),kc=vc({transactionIndex:jt,blockNumber:jt,transactionHash:Ac,address:Vn,topics:bc(Ac),data:wc,index:jt,blockHash:Ac},{index:["logIndex"]}),xc=vc({to:yc(Vn,null),from:yc(Vn,null),contractAddress:yc(Vn,null),index:jt,root:yc(kt),gasUsed:Lt,logsBloom:yc(wc),blockHash:Ac,hash:Ac,logs:bc((function(e){return kc(e)})),blockNumber:jt,cumulativeGasUsed:Lt,effectiveGasPrice:yc(Lt),status:yc(jt),type:yc(jt,0)},{effectiveGasPrice:["gasPrice"],hash:["transactionHash"],index:["transactionIndex"]});function Cc(e){e.to&&Lt(e.to)===mc&&(e.to="0x0000000000000000000000000000000000000000");const t=vc({hash:Ac,type:e=>"0x"===e||null==e?0:jt(e),accessList:yc(Ss,null),blockHash:yc(Ac,null),blockNumber:yc(jt,null),transactionIndex:yc(jt,null),from:Vn,gasPrice:yc(Lt),maxPriorityFeePerGas:yc(Lt),maxFeePerGas:yc(Lt),gasLimit:Lt,to:yc(Vn,null),value:Lt,nonce:jt,data:wc,creates:yc(Vn,null),chainId:yc(Lt,null)},{data:["input"],gasLimit:["gas"]})(e);if(null==t.to&&null==t.creates&&(t.creates=function(e){const t=Vn(e.from);let n=Lt(e.nonce,"tx.nonce").toString(16);return n="0"===n?"0x":n.length%2?"0x0"+n:"0x"+n,Vn(Nt(In(ql([t,n])),12))}(t)),1!==e.type&&2!==e.type||null!=e.accessList||(t.accessList=[]),e.signature?t.signature=ho.from(e.signature):t.signature=ho.from(e),null==t.chainId){const e=t.signature.legacyChainId;null!=e&&(t.chainId=e)}return t.blockHash&&Lt(t.blockHash)===mc&&(t.blockHash=null),t}class Nc{name;constructor(e){ct(this,{name:e})}clone(){return new Nc(this.name)}}class Pc extends Nc{effectiveBlock;txBase;txCreate;txDataZero;txDataNonzero;txAccessListStorageKey;txAccessListAddress;constructor(e,t){null==e&&(e=0),super(`org.ethers.network.plugins.GasCost#${e||0}`);const n={effectiveBlock:e};function r(e,r){let s=(t||{})[e];null==s&&(s=r),gt("number"==typeof s,`invalud value for ${e}`,"costs",t),n[e]=s}r("txBase",21e3),r("txCreate",32e3),r("txDataZero",4),r("txDataNonzero",16),r("txAccessListStorageKey",1900),r("txAccessListAddress",2400),ct(this,n)}clone(){return new Pc(this.effectiveBlock,this)}}class Sc extends Nc{address;targetNetwork;constructor(e,t){super("org.ethers.plugins.network.Ens"),ct(this,{address:e||"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",targetNetwork:null==t?1:t})}clone(){return new Sc(this.address,this.targetNetwork)}}class Oc extends Nc{#_;#fe;get url(){return this.#_}get processFunc(){return this.#fe}constructor(e,t){super("org.ethers.plugins.network.FetchUrlFeeDataPlugin"),this.#_=e,this.#fe=t}clone(){return this}}const Bc=new Map;class Rc{#ge;#oe;#me;constructor(e,t){this.#ge=e,this.#oe=Lt(t),this.#me=new Map}toJSON(){return{name:this.name,chainId:String(this.chainId)}}get name(){return this.#ge}set name(e){this.#ge=e}get chainId(){return this.#oe}set chainId(e){this.#oe=Lt(e,"chainId")}matches(e){if(null==e)return!1;if("string"==typeof e){try{return this.chainId===Lt(e)}catch(e){}return this.name===e}if("number"==typeof e||"bigint"==typeof e){try{return this.chainId===Lt(e)}catch(e){}return!1}if("object"==typeof e){if(null!=e.chainId){try{return this.chainId===Lt(e.chainId)}catch(e){}return!1}return null!=e.name&&this.name===e.name}return!1}get plugins(){return Array.from(this.#me.values())}attachPlugin(e){if(this.#me.get(e.name))throw new Error(`cannot replace existing plugin: ${e.name} `);return this.#me.set(e.name,e.clone()),this}getPlugin(e){return this.#me.get(e)||null}getPlugins(e){return this.plugins.filter((t=>t.name.split("#")[0]===e))}clone(){const e=new Rc(this.name,this.chainId);return this.plugins.forEach((t=>{e.attachPlugin(t.clone())})),e}computeIntrinsicGas(e){const t=this.getPlugin("org.ethers.plugins.network.GasCost")||new Pc;let n=t.txBase;if(null==e.to&&(n+=t.txCreate),e.data)for(let r=2;r<e.data.length;r+=2)"00"===e.data.substring(r,r+2)?n+=t.txDataZero:n+=t.txDataNonzero;if(e.accessList){const r=Ss(e.accessList);for(const e in r)n+=t.txAccessListAddress+t.txAccessListStorageKey*r[e].storageKeys.length}return n}static from(e){if(function(){var e;Fc||(Fc=!0,t("mainnet",1,{ensNetwork:1,altNames:["homestead"]}),t("ropsten",3,{ensNetwork:3}),t("rinkeby",4,{ensNetwork:4}),t("goerli",5,{ensNetwork:5}),t("kovan",42,{ensNetwork:42}),t("sepolia",11155111,{}),t("classic",61,{}),t("classicKotti",6,{}),t("arbitrum",42161,{ensNetwork:1}),t("arbitrum-goerli",421613,{}),t("bnb",56,{ensNetwork:1}),t("bnbt",97,{}),t("linea",59144,{ensNetwork:1}),t("linea-goerli",59140,{}),t("matic",137,{ensNetwork:1,plugins:[Ic("https://gasstation.polygon.technology/v2")]}),t("matic-mumbai",80001,{altNames:["maticMumbai","maticmum"],plugins:[Ic("https://gasstation-testnet.polygon.technology/v2")]}),t("optimism",10,{ensNetwork:1,plugins:[(e=BigInt("1000000"),new Oc("data:",(async(t,n,r)=>{const s=await t();if(null==s.maxFeePerGas||null==s.maxPriorityFeePerGas)return s;const i=s.maxFeePerGas-s.maxPriorityFeePerGas;return{gasPrice:s.gasPrice,maxFeePerGas:i+e,maxPriorityFeePerGas:e}})))]}),t("optimism-goerli",420,{}),t("xdai",100,{ensNetwork:1}));function t(e,t,n){const r=function(){const r=new Rc(e,t);return null!=n.ensNetwork&&r.attachPlugin(new Sc(null,n.ensNetwork)),r.attachPlugin(new Pc),(n.plugins||[]).forEach((e=>{r.attachPlugin(e)})),r};Rc.register(e,r),Rc.register(t,r),n.altNames&&n.altNames.forEach((e=>{Rc.register(e,r)}))}}(),null==e)return Rc.from("mainnet");if("number"==typeof e&&(e=BigInt(e)),"string"==typeof e||"bigint"==typeof e){const t=Bc.get(e);if(t)return t();if("bigint"==typeof e)return new Rc("unknown",e);gt(!1,"unknown network","network",e)}if("function"==typeof e.clone)return e.clone();if("object"==typeof e){gt("string"==typeof e.name&&"number"==typeof e.chainId,"invalid network object name or chainId","network",e);const t=new Rc(e.name,e.chainId);return(e.ensAddress||null!=e.ensNetwork)&&t.attachPlugin(new Sc(e.ensAddress,e.ensNetwork)),t}gt(!1,"invalid network","network",e)}static register(e,t){"number"==typeof e&&(e=BigInt(e));const n=Bc.get(e);n&&gt(!1,`conflicting network for ${JSON.stringify(n.name)}`,"nameOrChainId",e),Bc.set(e,t)}}function Tc(e,t){const n=String(e);if(!n.match(/^[0-9.]+$/))throw new Error(`invalid gwei value: ${e}`);const r=n.split(".");if(1===r.length&&r.push(""),2!==r.length)throw new Error(`invalid gwei value: ${e}`);for(;r[1].length<t;)r[1]+="0";if(r[1].length>9){let e=BigInt(r[1].substring(0,9));r[1].substring(9).match(/^0+$/)||e++,r[1]=e.toString()}return BigInt(r[0]+r[1])}function Ic(e){return new Oc(e,(async(e,t,n)=>{let r;n.setHeader("User-Agent","ethers");try{const[t,s]=await Promise.all([n.send(),e()]);r=t;const i=r.bodyJson.standard;return{gasPrice:s.gasPrice,maxFeePerGas:Tc(i.maxFee,9),maxPriorityFeePerGas:Tc(i.maxPriorityFee,9)}}catch(e){ft(!1,`error encountered with polygon gas station (${JSON.stringify(n.url)})`,"SERVER_ERROR",{request:n,response:r,error:e})}}))}let Fc=!1;function Lc(e){return JSON.parse(JSON.stringify(e))}class Uc{#ye;#be;#ve;#we;constructor(e){this.#ye=e,this.#be=null,this.#ve=4e3,this.#we=-2}get pollingInterval(){return this.#ve}set pollingInterval(e){this.#ve=e}async#Ae(){try{const e=await this.#ye.getBlockNumber();if(-2===this.#we)return void(this.#we=e);if(e!==this.#we){for(let t=this.#we+1;t<=e;t++){if(null==this.#be)return;await this.#ye.emit("block",t)}this.#we=e}}catch(e){}null!=this.#be&&(this.#be=this.#ye._setTimeout(this.#Ae.bind(this),this.#ve))}start(){this.#be||(this.#be=this.#ye._setTimeout(this.#Ae.bind(this),this.#ve),this.#Ae())}stop(){this.#be&&(this.#ye._clearTimeout(this.#be),this.#be=null)}pause(e){this.stop(),e&&(this.#we=-2)}resume(){this.start()}}class Dc{#ye;#Ae;#_e;constructor(e){this.#ye=e,this.#_e=!1,this.#Ae=e=>{this._poll(e,this.#ye)}}async _poll(e,t){throw new Error("sub-classes must override this")}start(){this.#_e||(this.#_e=!0,this.#Ae(-2),this.#ye.on("block",this.#Ae))}stop(){this.#_e&&(this.#_e=!1,this.#ye.off("block",this.#Ae))}pause(e){this.stop()}resume(){this.start()}}class Mc extends Dc{#Q;constructor(e,t){super(e),this.#Q=Lc(t)}async _poll(e,t){throw new Error("@TODO")}}class jc extends Dc{#Ee;constructor(e,t){super(e),this.#Ee=t}async _poll(e,t){const n=await t.getTransactionReceipt(this.#Ee);n&&t.emit(this.#Ee,n)}}class Vc{#ye;#Q;#be;#_e;#we;constructor(e,t){this.#ye=e,this.#Q=Lc(t),this.#be=this.#Ae.bind(this),this.#_e=!1,this.#we=-2}async#Ae(e){if(-2===this.#we)return;const t=Lc(this.#Q);t.fromBlock=this.#we+1,t.toBlock=e;const n=await this.#ye.getLogs(t);if(0!==n.length)for(const e of n)this.#ye.emit(this.#Q,e),this.#we=e.blockNumber;else this.#we<e-60&&(this.#we=e-60)}start(){this.#_e||(this.#_e=!0,-2===this.#we&&this.#ye.getBlockNumber().then((e=>{this.#we=e})),this.#ye.on("block",this.#be))}stop(){this.#_e&&(this.#_e=!1,this.#ye.off("block",this.#be))}pause(e){this.stop(),e&&(this.#we=-2)}resume(){this.start()}}const Hc=BigInt(2);function $c(e){return e&&"function"==typeof e.then}function Gc(e,t){return e+":"+JSON.stringify(t,((e,t)=>{if(null==t)return"null";if("bigint"==typeof t)return`bigint:${t.toString()}`;if("string"==typeof t)return t.toLowerCase();if("object"==typeof t&&!Array.isArray(t)){const e=Object.keys(t);return e.sort(),e.reduce(((e,n)=>(e[n]=t[n],e)),{})}return t}))}class zc{name;constructor(e){ct(this,{name:e})}start(){}stop(){}pause(e){}resume(){}}function qc(e){return(e=Array.from(new Set(e).values())).sort(),e}async function Qc(e,t){if(null==e)throw new Error("invalid event");if(Array.isArray(e)&&(e={topics:e}),"string"==typeof e)switch(e){case"block":case"pending":case"debug":case"error":case"network":return{type:e,tag:e}}if(_t(e,32)){const t=e.toLowerCase();return{type:"transaction",tag:Gc("tx",{hash:t}),hash:t}}if(e.orphan){const t=e;return{type:"orphan",tag:Gc("orphan",t),filter:(n=t,JSON.parse(JSON.stringify(n)))}}var n;if(e.address||e.topics){const n=e,r={topics:(n.topics||[]).map((e=>null==e?null:Array.isArray(e)?qc(e.map((e=>e.toLowerCase()))):e.toLowerCase()))};if(n.address){const e=[],s=[],i=n=>{_t(n)?e.push(n):s.push((async()=>{e.push(await ps(n,t))})())};Array.isArray(n.address)?n.address.forEach(i):i(n.address),s.length&&await Promise.all(s),r.address=qc(e.map((e=>e.toLowerCase())))}return{filter:r,tag:Gc("event",r),type:"event"}}gt(!1,"unknown ProviderEvent","event",e)}function Jc(){return(new Date).getTime()}const Kc={cacheTimeout:250,pollingInterval:4e3};class Wc{#ke;#me;#xe;#Ce;#Ne;#Pe;#Se;#Oe;#Be;#Re;#Te;#a;constructor(e,t){if(this.#a=Object.assign({},Kc,t||{}),"any"===e)this.#Pe=!0,this.#Ne=null;else if(e){const t=Rc.from(e);this.#Pe=!1,this.#Ne=Promise.resolve(t),setTimeout((()=>{this.emit("network",t,null)}),0)}else this.#Pe=!1,this.#Ne=null;this.#Oe=-1,this.#Se=new Map,this.#ke=new Map,this.#me=new Map,this.#xe=null,this.#Ce=!1,this.#Be=1,this.#Re=new Map,this.#Te=!1}get pollingInterval(){return this.#a.pollingInterval}get provider(){return this}get plugins(){return Array.from(this.#me.values())}attachPlugin(e){if(this.#me.get(e.name))throw new Error(`cannot replace existing plugin: ${e.name} `);return this.#me.set(e.name,e.connect(this)),this}getPlugin(e){return this.#me.get(e)||null}get disableCcipRead(){return this.#Te}set disableCcipRead(e){this.#Te=!!e}async#Ie(e){const t=this.#a.cacheTimeout;if(t<0)return await this._perform(e);const n=Gc(e.method,e);let r=this.#Se.get(n);return r||(r=this._perform(e),this.#Se.set(n,r),setTimeout((()=>{this.#Se.get(n)===r&&this.#Se.delete(n)}),t)),await r}async ccipReadFetch(e,t,n){if(this.disableCcipRead||0===n.length||null==e.to)return null;const r=e.to.toLowerCase(),s=t.toLowerCase(),i=[];for(let t=0;t<n.length;t++){const a=n[t],o=a.replace("{sender}",r).replace("{data}",s),l=new js(o);-1===a.indexOf("{data}")&&(l.body={data:s,sender:r}),this.emit("debug",{action:"sendCcipReadFetchRequest",request:l,index:t,urls:n});let c="unknown error";const u=await l.send();try{const e=u.bodyJson;if(e.data)return this.emit("debug",{action:"receiveCcipReadFetchResult",request:l,result:e}),e.data;e.message&&(c=e.message),this.emit("debug",{action:"receiveCcipReadFetchError",request:l,result:e})}catch(e){}ft(u.statusCode<400||u.statusCode>=500,`response not found during CCIP fetch: ${c}`,"OFFCHAIN_FAULT",{reason:"404_MISSING_RESOURCE",transaction:e,info:{url:a,errorMessage:c}}),i.push(c)}ft(!1,`error encountered during CCIP fetch: ${i.map((e=>JSON.stringify(e))).join(", ")}`,"OFFCHAIN_FAULT",{reason:"500_SERVER_ERROR",transaction:e,info:{urls:n,errorMessages:i}})}_wrapBlock(e,t){return new ni(function(e){const t=Ec(e);return t.transactions=e.transactions.map((e=>"string"==typeof e?e:Cc(e))),t}(e),this)}_wrapLog(e,t){return new ri(function(e){return _c(e)}(e),this)}_wrapTransactionReceipt(e,t){return new si(function(e){return xc(e)}(e),this)}_wrapTransactionResponse(e,t){return new ii(Cc(e),this)}_detectNetwork(){ft(!1,"sub-classes must implement this","UNSUPPORTED_OPERATION",{operation:"_detectNetwork"})}async _perform(e){ft(!1,`unsupported method: ${e.method}`,"UNSUPPORTED_OPERATION",{operation:e.method,info:e})}async getBlockNumber(){const e=jt(await this.#Ie({method:"getBlockNumber"}),"%response");return this.#Oe>=0&&(this.#Oe=e),e}_getAddress(e){return ps(e,this)}_getBlockTag(e){if(null==e)return"latest";switch(e){case"earliest":return"0x0";case"latest":case"pending":case"safe":case"finalized":return e}return _t(e)?_t(e,32)?e:$t(e):("bigint"==typeof e&&(e=jt(e,"blockTag")),"number"==typeof e?e>=0?$t(e):this.#Oe>=0?$t(this.#Oe+e):this.getBlockNumber().then((t=>$t(t+e))):void gt(!1,"invalid blockTag","blockTag",e))}_getFilter(e){const t=(e.topics||[]).map((e=>null==e?null:Array.isArray(e)?qc(e.map((e=>e.toLowerCase()))):e.toLowerCase())),n="blockHash"in e?e.blockHash:void 0,r=(e,r,s)=>{let i;switch(e.length){case 0:break;case 1:i=e[0];break;default:e.sort(),i=e}if(n&&(null!=r||null!=s))throw new Error("invalid filter");const a={};return i&&(a.address=i),t.length&&(a.topics=t),r&&(a.fromBlock=r),s&&(a.toBlock=s),n&&(a.blockHash=n),a};let s,i,a=[];if(e.address)if(Array.isArray(e.address))for(const t of e.address)a.push(this._getAddress(t));else a.push(this._getAddress(e.address));return"fromBlock"in e&&(s=this._getBlockTag(e.fromBlock)),"toBlock"in e&&(i=this._getBlockTag(e.toBlock)),a.filter((e=>"string"!=typeof e)).length||null!=s&&"string"!=typeof s||null!=i&&"string"!=typeof i?Promise.all([Promise.all(a),s,i]).then((e=>r(e[0],e[1],e[2]))):r(a,s,i)}_getTransactionRequest(e){const t=ti(e),n=[];if(["to","from"].forEach((e=>{if(null==t[e])return;const r=ps(t[e]);$c(r)?n.push(async function(){t[e]=await r}()):t[e]=r})),null!=t.blockTag){const e=this._getBlockTag(t.blockTag);$c(e)?n.push(async function(){t.blockTag=await e}()):t.blockTag=e}return n.length?async function(){return await Promise.all(n),t}():t}async getNetwork(){if(null==this.#Ne){const e=this._detectNetwork().then((e=>(this.emit("network",e,null),e)),(t=>{throw this.#Ne===e&&(this.#Ne=null),t}));return this.#Ne=e,(await e).clone()}const e=this.#Ne,[t,n]=await Promise.all([e,this._detectNetwork()]);return t.chainId!==n.chainId&&(this.#Pe?(this.emit("network",n,t),this.#Ne===e&&(this.#Ne=Promise.resolve(n))):ft(!1,`network changed: ${t.chainId} => ${n.chainId} `,"NETWORK_ERROR",{event:"changed"})),t.clone()}async getFeeData(){const e=await this.getNetwork(),t=async()=>{const{_block:t,gasPrice:n}=await lt({_block:this.#Fe("latest",!1),gasPrice:(async()=>{try{return Lt(await this.#Ie({method:"getGasPrice"}),"%response")}catch(e){}return null})()});let r=null,s=null;const i=this._wrapBlock(t,e);return i&&i.baseFeePerGas&&(s=BigInt("1000000000"),r=i.baseFeePerGas*Hc+s),new ei(n,r,s)},n=e.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");if(n){const e=new js(n.url),r=await n.processFunc(t,this,e);return new ei(r.gasPrice,r.maxFeePerGas,r.maxPriorityFeePerGas)}return await t()}async estimateGas(e){let t=this._getTransactionRequest(e);return $c(t)&&(t=await t),Lt(await this.#Ie({method:"estimateGas",transaction:t}),"%response")}async#Le(e,t,n){ft(n<10,"CCIP read exceeded maximum redirections","OFFCHAIN_FAULT",{reason:"TOO_MANY_REDIRECTS",transaction:Object.assign({},e,{blockTag:t,enableCcipRead:!0})});const r=ti(e);try{return kt(await this._perform({method:"call",transaction:r,blockTag:t}))}catch(e){if(!this.disableCcipRead&&dt(e)&&e.data&&n>=0&&"latest"===t&&null!=r.to&&"0x556f1830"===Nt(e.data,0,4)){const s=e.data,i=await ps(r.to,this);let a;try{a=function(e){const t={sender:"",urls:[],calldata:"",selector:"",extraData:"",errorArgs:[]};ft(Ct(e)>=160,"insufficient OffchainLookup data","OFFCHAIN_FAULT",{reason:"insufficient OffchainLookup data"});const n=Nt(e,0,32);ft(Nt(n,0,12)===Nt(ru,0,12),"corrupt OffchainLookup sender","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup sender"}),t.sender=Nt(n,12);try{const n=[],r=jt(Nt(e,32,64)),s=jt(Nt(e,r,r+32)),i=Nt(e,r+32);for(let e=0;e<s;e++){const t=Yc(i,32*e);if(null==t)throw new Error("abort");n.push(t)}t.urls=n}catch(e){ft(!1,"corrupt OffchainLookup urls","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup urls"})}try{const n=Zc(e,64);if(null==n)throw new Error("abort");t.calldata=n}catch(e){ft(!1,"corrupt OffchainLookup calldata","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup calldata"})}ft(Nt(e,100,128)===Nt(ru,0,28),"corrupt OffchainLookup callbaackSelector","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup callbaackSelector"}),t.selector=Nt(e,96,100);try{const n=Zc(e,128);if(null==n)throw new Error("abort");t.extraData=n}catch(e){ft(!1,"corrupt OffchainLookup extraData","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup extraData"})}return t.errorArgs="sender,urls,calldata,selector,extraData".split(/,/).map((e=>t[e])),t}(Nt(e.data,4))}catch(e){ft(!1,e.message,"OFFCHAIN_FAULT",{reason:"BAD_DATA",transaction:r,info:{data:s}})}ft(a.sender.toLowerCase()===i.toLowerCase(),"CCIP Read sender mismatch","CALL_EXCEPTION",{action:"call",data:s,reason:"OffchainLookup",transaction:r,invocation:null,revert:{signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",name:"OffchainLookup",args:a.errorArgs}});const o=await this.ccipReadFetch(r,a.calldata,a.urls);ft(null!=o,"CCIP Read failed to fetch data","OFFCHAIN_FAULT",{reason:"FETCH_FAILED",transaction:r,info:{data:e.data,errorArgs:a.errorArgs}});const l={to:i,data:xt([a.selector,nu([o,a.extraData])])};this.emit("debug",{action:"sendCcipReadCall",transaction:l});try{const e=await this.#Le(l,t,n+1);return this.emit("debug",{action:"receiveCcipReadCallResult",transaction:Object.assign({},l),result:e}),e}catch(e){throw this.emit("debug",{action:"receiveCcipReadCallError",transaction:Object.assign({},l),error:e}),e}}throw e}}async#Ue(e){const{value:t}=await lt({network:this.getNetwork(),value:e});return t}async call(e){const{tx:t,blockTag:n}=await lt({tx:this._getTransactionRequest(e),blockTag:this._getBlockTag(e.blockTag)});return await this.#Ue(this.#Le(t,n,e.enableCcipRead?0:-1))}async#De(e,t,n){let r=this._getAddress(t),s=this._getBlockTag(n);return"string"==typeof r&&"string"==typeof s||([r,s]=await Promise.all([r,s])),await this.#Ue(this.#Ie(Object.assign(e,{address:r,blockTag:s})))}async getBalance(e,t){return Lt(await this.#De({method:"getBalance"},e,t),"%response")}async getTransactionCount(e,t){return jt(await this.#De({method:"getTransactionCount"},e,t),"%response")}async getCode(e,t){return kt(await this.#De({method:"getCode"},e,t))}async getStorage(e,t,n){const r=Lt(t,"position");return kt(await this.#De({method:"getStorage",position:r},e,n))}async broadcastTransaction(e){const{blockNumber:t,hash:n,network:r}=await lt({blockNumber:this.getBlockNumber(),hash:this._perform({method:"broadcastTransaction",signedTransaction:e}),network:this.getNetwork()}),s=cc.from(e);if(s.hash!==n)throw new Error("@TODO: the returned hash did not match");return this._wrapTransactionResponse(s,r).replaceableTransaction(t)}async#Fe(e,t){if(_t(e,32))return await this.#Ie({method:"getBlock",blockHash:e,includeTransactions:t});let n=this._getBlockTag(e);return"string"!=typeof n&&(n=await n),await this.#Ie({method:"getBlock",blockTag:n,includeTransactions:t})}async getBlock(e,t){const{network:n,params:r}=await lt({network:this.getNetwork(),params:this.#Fe(e,!!t)});return null==r?null:this._wrapBlock(r,n)}async getTransaction(e){const{network:t,params:n}=await lt({network:this.getNetwork(),params:this.#Ie({method:"getTransaction",hash:e})});return null==n?null:this._wrapTransactionResponse(n,t)}async getTransactionReceipt(e){const{network:t,params:n}=await lt({network:this.getNetwork(),params:this.#Ie({method:"getTransactionReceipt",hash:e})});if(null==n)return null;if(null==n.gasPrice&&null==n.effectiveGasPrice){const t=await this.#Ie({method:"getTransaction",hash:e});if(null==t)throw new Error("report this; could not find tx or effectiveGasPrice");n.effectiveGasPrice=t.gasPrice}return this._wrapTransactionReceipt(n,t)}async getTransactionResult(e){const{result:t}=await lt({network:this.getNetwork(),result:this.#Ie({method:"getTransactionResult",hash:e})});return null==t?null:kt(t)}async getLogs(e){let t=this._getFilter(e);$c(t)&&(t=await t);const{network:n,params:r}=await lt({network:this.getNetwork(),params:this.#Ie({method:"getLogs",filter:t})});return r.map((e=>this._wrapLog(e,n)))}_getProvider(e){ft(!1,"provider cannot connect to target network","UNSUPPORTED_OPERATION",{operation:"_getProvider()"})}async getResolver(e){return await gc.fromName(this,e)}async getAvatar(e){const t=await this.getResolver(e);return t?await t.getAvatar():null}async resolveName(e){const t=await this.getResolver(e);return t?await t.getAddress():null}async lookupAddress(e){const t=to((e=Vn(e)).substring(2).toLowerCase()+".addr.reverse");try{const n=await gc.getEnsAddress(this),r=new Fi(n,["function resolver(bytes32) view returns (address)"],this),s=await r.resolver(t);if(null==s||s===$s)return null;const i=new Fi(s,["function name(bytes32) view returns (string)"],this),a=await i.name(t);return await this.resolveName(a)!==e?null:a}catch(e){if(ht(e,"BAD_DATA")&&"0x"===e.value)return null;if(ht(e,"CALL_EXCEPTION"))return null;throw e}return null}async waitForTransaction(e,t,n){const r=null!=t?t:1;return 0===r?this.getTransactionReceipt(e):new Promise((async(t,s)=>{let i=null;const a=async n=>{try{const s=await this.getTransactionReceipt(e);if(null!=s&&n-s.blockNumber+1>=r)return t(s),void(i&&(clearTimeout(i),i=null))}catch(e){console.log("EEE",e)}this.once("block",a)};null!=n&&(i=setTimeout((()=>{null!=i&&(i=null,this.off("block",a),s(pt("timeout","TIMEOUT",{reason:"timeout"})))}),n)),a(await this.getBlockNumber())}))}async waitForBlock(e){ft(!1,"not implemented yet","NOT_IMPLEMENTED",{operation:"waitForBlock"})}_clearTimeout(e){const t=this.#Re.get(e);t&&(t.timer&&clearTimeout(t.timer),this.#Re.delete(e))}_setTimeout(e,t){null==t&&(t=0);const n=this.#Be++,r=()=>{this.#Re.delete(n),e()};if(this.paused)this.#Re.set(n,{timer:null,func:r,time:t});else{const e=setTimeout(r,t);this.#Re.set(n,{timer:e,func:r,time:Jc()})}return n}_forEachSubscriber(e){for(const t of this.#ke.values())e(t.subscriber)}_getSubscriber(e){switch(e.type){case"debug":case"error":case"network":return new zc(e.type);case"block":{const e=new Uc(this);return e.pollingInterval=this.pollingInterval,e}case"event":return new Vc(this,e.filter);case"transaction":return new jc(this,e.hash);case"orphan":return new Mc(this,e.filter)}throw new Error(`unsupported event: ${e.type}`)}_recoverSubscriber(e,t){for(const n of this.#ke.values())if(n.subscriber===e){n.started&&n.subscriber.stop(),n.subscriber=t,n.started&&t.start(),null!=this.#xe&&t.pause(this.#xe);break}}async#Me(e,t){let n=await Qc(e,this);return"event"===n.type&&t&&t.length>0&&!0===t[0].removed&&(n=await Qc({orphan:"drop-log",log:t[0]},this)),this.#ke.get(n.tag)||null}async#je(e){const t=await Qc(e,this),n=t.tag;let r=this.#ke.get(n);return r||(r={subscriber:this._getSubscriber(t),tag:n,addressableMap:new WeakMap,nameMap:new Map,started:!1,listeners:[]},this.#ke.set(n,r)),r}async on(e,t){const n=await this.#je(e);return n.listeners.push({listener:t,once:!1}),n.started||(n.subscriber.start(),n.started=!0,null!=this.#xe&&n.subscriber.pause(this.#xe)),this}async once(e,t){const n=await this.#je(e);return n.listeners.push({listener:t,once:!0}),n.started||(n.subscriber.start(),n.started=!0,null!=this.#xe&&n.subscriber.pause(this.#xe)),this}async emit(e,...t){const n=await this.#Me(e,t);if(!n||0===n.listeners.length)return!1;const r=n.listeners.length;return n.listeners=n.listeners.filter((({listener:n,once:r})=>{const s=new li(this,r?null:n,e);try{n.call(this,...t,s)}catch(e){}return!r})),0===n.listeners.length&&(n.started&&n.subscriber.stop(),this.#ke.delete(n.tag)),r>0}async listenerCount(e){if(e){const t=await this.#Me(e);return t?t.listeners.length:0}let t=0;for(const{listeners:e}of this.#ke.values())t+=e.length;return t}async listeners(e){if(e){const t=await this.#Me(e);return t?t.listeners.map((({listener:e})=>e)):[]}let t=[];for(const{listeners:e}of this.#ke.values())t=t.concat(e.map((({listener:e})=>e)));return t}async off(e,t){const n=await this.#Me(e);if(!n)return this;if(t){const e=n.listeners.map((({listener:e})=>e)).indexOf(t);e>=0&&n.listeners.splice(e,1)}return t&&0!==n.listeners.length||(n.started&&n.subscriber.stop(),this.#ke.delete(n.tag)),this}async removeAllListeners(e){if(e){const{tag:t,started:n,subscriber:r}=await this.#je(e);n&&r.stop(),this.#ke.delete(t)}else for(const[e,{started:t,subscriber:n}]of this.#ke)t&&n.stop(),this.#ke.delete(e);return this}async addListener(e,t){return await this.on(e,t)}async removeListener(e,t){return this.off(e,t)}get destroyed(){return this.#Ce}destroy(){this.removeAllListeners();for(const e of this.#Re.keys())this._clearTimeout(e);this.#Ce=!0}get paused(){return null!=this.#xe}set paused(e){!!e!==this.paused&&(this.paused?this.resume():this.pause(!1))}pause(e){if(this.#Oe=-1,null!=this.#xe){if(this.#xe==!!e)return;ft(!1,"cannot change pause type; resume first","UNSUPPORTED_OPERATION",{operation:"pause"})}this._forEachSubscriber((t=>t.pause(e))),this.#xe=!!e;for(const e of this.#Re.values())e.timer&&clearTimeout(e.timer),e.time=Jc()-e.time}resume(){if(null!=this.#xe){this._forEachSubscriber((e=>e.resume())),this.#xe=null;for(const e of this.#Re.values()){let t=e.time;t<0&&(t=0),e.time=Jc(),setTimeout(e.func,t)}}}}function Yc(e,t){try{const n=Zc(e,t);if(n)return hr(n)}catch(e){}return null}function Zc(e,t){if("0x"===e)return null;try{const n=jt(Nt(e,t,t+32)),r=jt(Nt(e,n,n+32));return Nt(e,n+32,n+32+r)}catch(e){}return null}function Xc(e){const t=Ht(e);if(t.length>32)throw new Error("internal; should not happen");const n=new Uint8Array(32);return n.set(t,32-t.length),n}function eu(e){if(e.length%32==0)return e;const t=new Uint8Array(32*Math.ceil(e.length/32));return t.set(e),t}const tu=new Uint8Array([]);function nu(e){const t=[];let n=0;for(let r=0;r<e.length;r++)t.push(tu),n+=32;for(let r=0;r<e.length;r++){const s=wt(e[r]);t[r]=Xc(n),t.push(Xc(s.length)),t.push(eu(s)),n+=32+32*Math.ceil(s.length/32)}return xt(t)}const ru="0x0000000000000000000000000000000000000000000000000000000000000000";function su(e,t){if(e.provider)return e.provider;ft(!1,"missing provider","UNSUPPORTED_OPERATION",{operation:t})}async function iu(e,t){let n=ti(t);if(null!=n.to&&(n.to=ps(n.to,e)),null!=n.from){const t=n.from;n.from=Promise.all([e.getAddress(),ps(t,e)]).then((([e,t])=>(gt(e.toLowerCase()===t.toLowerCase(),"transaction from mismatch","tx.from",t),e)))}else n.from=e.getAddress();return await lt(n)}class au{provider;constructor(e){ct(this,{provider:e||null})}async getNonce(e){return su(this,"getTransactionCount").getTransactionCount(await this.getAddress(),e)}async populateCall(e){return await iu(this,e)}async populateTransaction(e){const t=su(this,"populateTransaction"),n=await iu(this,e);null==n.nonce&&(n.nonce=await this.getNonce("pending")),null==n.gasLimit&&(n.gasLimit=await this.estimateGas(n));const r=await this.provider.getNetwork();null!=n.chainId?gt(Lt(n.chainId)===r.chainId,"transaction chainId mismatch","tx.chainId",e.chainId):n.chainId=r.chainId;const s=null!=n.maxFeePerGas||null!=n.maxPriorityFeePerGas;if(null==n.gasPrice||2!==n.type&&!s?0!==n.type&&1!==n.type||!s||gt(!1,"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","tx",e):gt(!1,"eip-1559 transaction do not support gasPrice","tx",e),2!==n.type&&null!=n.type||null==n.maxFeePerGas||null==n.maxPriorityFeePerGas)if(0===n.type||1===n.type){const e=await t.getFeeData();ft(null!=e.gasPrice,"network does not support gasPrice","UNSUPPORTED_OPERATION",{operation:"getGasPrice"}),null==n.gasPrice&&(n.gasPrice=e.gasPrice)}else{const e=await t.getFeeData();if(null==n.type)if(null!=e.maxFeePerGas&&null!=e.maxPriorityFeePerGas)if(n.type=2,null!=n.gasPrice){const e=n.gasPrice;delete n.gasPrice,n.maxFeePerGas=e,n.maxPriorityFeePerGas=e}else null==n.maxFeePerGas&&(n.maxFeePerGas=e.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=e.maxPriorityFeePerGas);else null!=e.gasPrice?(ft(!s,"network does not support EIP-1559","UNSUPPORTED_OPERATION",{operation:"populateTransaction"}),null==n.gasPrice&&(n.gasPrice=e.gasPrice),n.type=0):ft(!1,"failed to get consistent fee data","UNSUPPORTED_OPERATION",{operation:"signer.getFeeData"});else 2===n.type&&(null==n.maxFeePerGas&&(n.maxFeePerGas=e.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=e.maxPriorityFeePerGas))}else n.type=2;return await lt(n)}async estimateGas(e){return su(this,"estimateGas").estimateGas(await this.populateCall(e))}async call(e){return su(this,"call").call(await this.populateCall(e))}async resolveName(e){const t=su(this,"resolveName");return await t.resolveName(e)}async sendTransaction(e){const t=su(this,"sendTransaction"),n=await this.populateTransaction(e);delete n.from;const r=cc.from(n);return await t.broadcastTransaction(await this.signTransaction(r))}}class ou{#ye;#Ve;#be;#_e;#He;#$e;constructor(e){this.#ye=e,this.#Ve=null,this.#be=this.#Ae.bind(this),this.#_e=!1,this.#He=null,this.#$e=!1}_subscribe(e){throw new Error("subclasses must override this")}_emitResults(e,t){throw new Error("subclasses must override this")}_recover(e){throw new Error("subclasses must override this")}async#Ae(e){try{null==this.#Ve&&(this.#Ve=this._subscribe(this.#ye));let e=null;try{e=await this.#Ve}catch(e){if(!ht(e,"UNSUPPORTED_OPERATION")||"eth_newFilter"!==e.operation)throw e}if(null==e)return this.#Ve=null,void this.#ye._recoverSubscriber(this,this._recover(this.#ye));const t=await this.#ye.getNetwork();if(this.#He||(this.#He=t),this.#He.chainId!==t.chainId)throw new Error("chaid changed");if(this.#$e)return;const n=await this.#ye.send("eth_getFilterChanges",[e]);await this._emitResults(this.#ye,n)}catch(e){console.log("@TODO",e)}this.#ye.once("block",this.#be)}#Ge(){const e=this.#Ve;e&&(this.#Ve=null,e.then((e=>{this.#ye.send("eth_uninstallFilter",[e])})))}start(){this.#_e||(this.#_e=!0,this.#Ae(-2))}stop(){this.#_e&&(this.#_e=!1,this.#$e=!0,this.#Ge(),this.#ye.off("block",this.#be))}pause(e){e&&this.#Ge(),this.#ye.off("block",this.#be)}resume(){this.start()}}class lu extends ou{#ze;constructor(e,t){var n;super(e),this.#ze=(n=t,JSON.parse(JSON.stringify(n)))}_recover(e){return new Vc(e,this.#ze)}async _subscribe(e){return await e.send("eth_newFilter",[this.#ze])}async _emitResults(e,t){for(const n of t)e.emit(this.#ze,e._wrapLog(n,e._network))}}class cu extends ou{async _subscribe(e){return await e.send("eth_newPendingTransactionFilter",[])}async _emitResults(e,t){for(const n of t)e.emit("pending",n)}}const uu="bigint,boolean,function,number,string,symbol".split(/,/g);function hu(e){if(null==e||uu.indexOf(typeof e)>=0)return e;if("function"==typeof e.getAddress)return e;if(Array.isArray(e))return e.map(hu);if("object"==typeof e)return Object.keys(e).reduce(((t,n)=>(t[n]=e[n],t)),{});throw new Error(`should not happen: ${e} (${typeof e})`)}function du(e){return new Promise((t=>{setTimeout(t,e)}))}function pu(e){return e?e.toLowerCase():e}function fu(e){return e&&"number"==typeof e.pollingInterval}const gu={polling:!1,staticNetwork:null,batchStallTime:10,batchMaxSize:1<<20,batchMaxCount:100,cacheTimeout:250,pollingInterval:4e3};class mu extends au{address;constructor(e,t){super(e),ct(this,{address:t=Vn(t)})}connect(e){ft(!1,"cannot reconnect JsonRpcSigner","UNSUPPORTED_OPERATION",{operation:"signer.connect"})}async getAddress(){return this.address}async populateTransaction(e){return await this.populateCall(e)}async sendUncheckedTransaction(e){const t=hu(e),n=[];if(t.from){const r=t.from;n.push((async()=>{const n=await ps(r,this.provider);gt(null!=n&&n.toLowerCase()===this.address.toLowerCase(),"from address mismatch","transaction",e),t.from=n})())}else t.from=this.address;if(null==t.gasLimit&&n.push((async()=>{t.gasLimit=await this.provider.estimateGas({...t,from:this.address})})()),null!=t.to){const e=t.to;n.push((async()=>{t.to=await ps(e,this.provider)})())}n.length&&await Promise.all(n);const r=this.provider.getRpcTransaction(t);return this.provider.send("eth_sendTransaction",[r])}async sendTransaction(e){const t=await this.provider.getBlockNumber(),n=await this.sendUncheckedTransaction(e);return await new Promise(((e,r)=>{const s=[1e3,100],i=async()=>{const r=await this.provider.getTransaction(n);null==r?this.provider._setTimeout((()=>{i()}),s.pop()||4e3):e(r.replaceableTransaction(t))};i()}))}async signTransaction(e){const t=hu(e);if(t.from){const n=await ps(t.from,this.provider);gt(null!=n&&n.toLowerCase()===this.address.toLowerCase(),"from address mismatch","transaction",e),t.from=n}else t.from=this.address;const n=this.provider.getRpcTransaction(t);return await this.provider.send("eth_signTransaction",[n])}async signMessage(e){const t="string"==typeof e?ur(e):e;return await this.provider.send("personal_sign",[kt(t),this.address.toLowerCase()])}async signTypedData(e,t,n){const r=hu(n),s=await Ns.resolveNames(e,t,r,(async e=>{const t=await ps(e);return gt(null!=t,"TypedData does not support null address","value",e),t}));return await this.provider.send("eth_signTypedData_v4",[this.address.toLowerCase(),JSON.stringify(Ns.getPayload(s.domain,t,s.value))])}async unlock(e){return this.provider.send("personal_unlockAccount",[this.address.toLowerCase(),e,null])}async _legacySignMessage(e){const t="string"==typeof e?ur(e):e;return await this.provider.send("eth_sign",[this.address.toLowerCase(),kt(t)])}}class yu extends Wc{#a;#qe;#Qe;#Je;#Ke;#He;#We(){if(this.#Je)return;const e=1===this._getOption("batchMaxCount")?0:this._getOption("batchStallTime");this.#Je=setTimeout((()=>{this.#Je=null;const e=this.#Qe;for(this.#Qe=[];e.length;){const t=[e.shift()];for(;e.length&&t.length!==this.#a.batchMaxCount;){t.push(e.shift());const n=JSON.stringify(t.map((e=>e.payload)));if(n.length>this.#a.batchMaxSize){e.unshift(t.pop());break}}(async()=>{const e=1===t.length?t[0].payload:t.map((e=>e.payload));this.emit("debug",{action:"sendRpcPayload",payload:e});try{const n=await this._send(e);this.emit("debug",{action:"receiveRpcResult",result:n});for(const{resolve:e,reject:r,payload:s}of t){if(this.destroyed){r(pt("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:s.method}));continue}const t=n.filter((e=>e.id===s.id))[0];if(null!=t)"error"in t?r(this.getRpcError(s,t)):e(t.result);else{const e=pt("missing response for request","BAD_DATA",{value:n,info:{payload:s}});this.emit("error",e),r(e)}}}catch(e){this.emit("debug",{action:"receiveRpcError",error:e});for(const{reject:n}of t)n(e)}})()}}),e)}constructor(e,t){super(e,t),this.#qe=1,this.#a=Object.assign({},gu,t||{}),this.#Qe=[],this.#Je=null,this.#He=null;{let e=null;const t=new Promise((t=>{e=t}));this.#Ke={promise:t,resolve:e}}const n=this._getOption("staticNetwork");n&&(gt(null==e||n.matches(e),"staticNetwork MUST match network object","options",t),this.#He=n)}_getOption(e){return this.#a[e]}get _network(){return ft(this.#He,"network is not available yet","NETWORK_ERROR"),this.#He}async _perform(e){if("call"===e.method||"estimateGas"===e.method){let t=e.transaction;if(t&&null!=t.type&&Lt(t.type)&&null==t.maxFeePerGas&&null==t.maxPriorityFeePerGas){const n=await this.getFeeData();null==n.maxFeePerGas&&null==n.maxPriorityFeePerGas&&(e=Object.assign({},e,{transaction:Object.assign({},t,{type:void 0})}))}}const t=this.getRpcRequest(e);return null!=t?await this.send(t.method,t.args):super._perform(e)}async _detectNetwork(){const e=this._getOption("staticNetwork");if(e)return e;if(this.ready)return Rc.from(Lt(await this.send("eth_chainId",[])));const t={id:this.#qe++,method:"eth_chainId",params:[],jsonrpc:"2.0"};let n;this.emit("debug",{action:"sendRpcPayload",payload:t});try{n=(await this._send(t))[0]}catch(e){throw this.emit("debug",{action:"receiveRpcError",error:e}),e}if(this.emit("debug",{action:"receiveRpcResult",result:n}),"result"in n)return Rc.from(Lt(n.result));throw this.getRpcError(t,n)}_start(){null!=this.#Ke&&null!=this.#Ke.resolve&&(this.#Ke.resolve(),this.#Ke=null,(async()=>{for(;null==this.#He&&!this.destroyed;)try{this.#He=await this._detectNetwork()}catch(e){if(this.destroyed)break;console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)"),this.emit("error",pt("failed to bootstrap network detection","NETWORK_ERROR",{event:"initial-network-discovery",info:{error:e}})),await du(1e3)}this.#We()})())}async _waitUntilReady(){if(null!=this.#Ke)return await this.#Ke.promise}_getSubscriber(e){return"pending"===e.type?new cu(this):"event"===e.type?this._getOption("polling")?new Vc(this,e.filter):new lu(this,e.filter):"orphan"===e.type&&"drop-log"===e.filter.orphan?new zc("orphan"):super._getSubscriber(e)}get ready(){return null==this.#Ke}getRpcTransaction(e){const t={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((n=>{if(null==e[n])return;let r=n;"gasLimit"===n&&(r="gas"),t[r]=$t(Lt(e[n],`tx.${n}`))})),["from","to","data"].forEach((n=>{null!=e[n]&&(t[n]=kt(e[n]))})),e.accessList&&(t.accessList=Ss(e.accessList)),t}getRpcRequest(e){switch(e.method){case"chainId":return{method:"eth_chainId",args:[]};case"getBlockNumber":return{method:"eth_blockNumber",args:[]};case"getGasPrice":return{method:"eth_gasPrice",args:[]};case"getBalance":return{method:"eth_getBalance",args:[pu(e.address),e.blockTag]};case"getTransactionCount":return{method:"eth_getTransactionCount",args:[pu(e.address),e.blockTag]};case"getCode":return{method:"eth_getCode",args:[pu(e.address),e.blockTag]};case"getStorage":return{method:"eth_getStorageAt",args:[pu(e.address),"0x"+e.position.toString(16),e.blockTag]};case"broadcastTransaction":return{method:"eth_sendRawTransaction",args:[e.signedTransaction]};case"getBlock":if("blockTag"in e)return{method:"eth_getBlockByNumber",args:[e.blockTag,!!e.includeTransactions]};if("blockHash"in e)return{method:"eth_getBlockByHash",args:[e.blockHash,!!e.includeTransactions]};break;case"getTransaction":return{method:"eth_getTransactionByHash",args:[e.hash]};case"getTransactionReceipt":return{method:"eth_getTransactionReceipt",args:[e.hash]};case"call":return{method:"eth_call",args:[this.getRpcTransaction(e.transaction),e.blockTag]};case"estimateGas":return{method:"eth_estimateGas",args:[this.getRpcTransaction(e.transaction)]};case"getLogs":return e.filter&&null!=e.filter.address&&(Array.isArray(e.filter.address)?e.filter.address=e.filter.address.map(pu):e.filter.address=pu(e.filter.address)),{method:"eth_getLogs",args:[e.filter]}}return null}getRpcError(e,t){const{method:n}=e,{error:r}=t;if("eth_estimateGas"===n&&r.message){const t=r.message;if(!t.match(/revert/i)&&t.match(/insufficient funds/i))return pt("insufficient funds","INSUFFICIENT_FUNDS",{transaction:e.params[0],info:{payload:e,error:r}})}if("eth_call"===n||"eth_estimateGas"===n){const t=wu(r),s=us.getBuiltinCallException("eth_call"===n?"call":"estimateGas",e.params[0],t?t.data:null);return s.info={error:r,payload:e},s}const s=JSON.stringify(function(e){const t=[];return Au(e,t),t}(r));if("string"==typeof r.message&&r.message.match(/user denied|ethers-user-denied/i))return pt("user rejected action","ACTION_REJECTED",{action:{eth_sign:"signMessage",personal_sign:"signMessage",eth_signTypedData_v4:"signTypedData",eth_signTransaction:"signTransaction",eth_sendTransaction:"sendTransaction",eth_requestAccounts:"requestAccess",wallet_requestAccounts:"requestAccess"}[n]||"unknown",reason:"rejected",info:{payload:e,error:r}});if("eth_sendRawTransaction"===n||"eth_sendTransaction"===n){const t=e.params[0];if(s.match(/insufficient funds|base fee exceeds gas limit/i))return pt("insufficient funds for intrinsic transaction cost","INSUFFICIENT_FUNDS",{transaction:t,info:{error:r}});if(s.match(/nonce/i)&&s.match(/too low/i))return pt("nonce has already been used","NONCE_EXPIRED",{transaction:t,info:{error:r}});if(s.match(/replacement transaction/i)&&s.match(/underpriced/i))return pt("replacement fee too low","REPLACEMENT_UNDERPRICED",{transaction:t,info:{error:r}});if(s.match(/only replay-protected/i))return pt("legacy pre-eip-155 transactions not supported","UNSUPPORTED_OPERATION",{operation:n,info:{transaction:t,info:{error:r}}})}let i=!!s.match(/the method .* does not exist/i);return i||r&&r.details&&r.details.startsWith("Unauthorized method:")&&(i=!0),i?pt("unsupported operation","UNSUPPORTED_OPERATION",{operation:e.method,info:{error:r,payload:e}}):pt("could not coalesce error","UNKNOWN_ERROR",{error:r,payload:e})}send(e,t){if(this.destroyed)return Promise.reject(pt("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:e}));const n=this.#qe++,r=new Promise(((r,s)=>{this.#Qe.push({resolve:r,reject:s,payload:{method:e,params:t,id:n,jsonrpc:"2.0"}})}));return this.#We(),r}async getSigner(e){null==e&&(e=0);const t=this.send("eth_accounts",[]);if("number"==typeof e){const n=await t;if(e>=n.length)throw new Error("no such account");return new mu(this,n[e])}const{accounts:n}=await lt({network:this.getNetwork(),accounts:t});e=Vn(e);for(const t of n)if(Vn(t)===e)return new mu(this,e);throw new Error("invalid account")}async listAccounts(){return(await this.send("eth_accounts",[])).map((e=>new mu(this,e)))}destroy(){this.#Je&&(clearTimeout(this.#Je),this.#Je=null);for(const{payload:e,reject:t}of this.#Qe)t(pt("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:e.method}));this.#Qe=[],super.destroy()}}class bu extends yu{#Ye;constructor(e,t){super(e,t),this.#Ye=4e3}_getSubscriber(e){const t=super._getSubscriber(e);return fu(t)&&(t.pollingInterval=this.#Ye),t}get pollingInterval(){return this.#Ye}set pollingInterval(e){if(!Number.isInteger(e)||e<0)throw new Error("invalid interval");this.#Ye=e,this._forEachSubscriber((e=>{fu(e)&&(e.pollingInterval=this.#Ye)}))}}class vu extends bu{#Ze;constructor(e,t,n){null==e&&(e="http://localhost:8545"),super(t,n),this.#Ze="string"==typeof e?new js(e):e.clone()}_getConnection(){return this.#Ze.clone()}async send(e,t){return await this._start(),await super.send(e,t)}async _send(e){const t=this._getConnection();t.body=JSON.stringify(e),t.setHeader("content-type","application/json");const n=await t.send();n.assertOk();let r=n.bodyJson;return Array.isArray(r)||(r=[r]),r}}function wu(e){if(null==e)return null;if("string"==typeof e.message&&e.message.match(/revert/i)&&_t(e.data))return{message:e.message,data:e.data};if("object"==typeof e){for(const t in e){const n=wu(e[t]);if(n)return n}return null}if("string"==typeof e)try{return wu(JSON.parse(e))}catch(e){}return null}function Au(e,t){if(null!=e){if("string"==typeof e.message&&t.push(e.message),"object"==typeof e)for(const n in e)Au(e[n],t);if("string"==typeof e)try{return Au(JSON.parse(e),t)}catch(e){}}}class _u extends bu{#I;constructor(e,t){super(t,{batchMaxCount:1}),this.#I=async(t,n)=>{const r={method:t,params:n};this.emit("debug",{action:"sendEip1193Request",payload:r});try{const t=await e.request(r);return this.emit("debug",{action:"receiveEip1193Result",result:t}),t}catch(e){const t=new Error(e.message);throw t.code=e.code,t.data=e.data,t.payload=r,this.emit("debug",{action:"receiveEip1193Error",error:t}),t}}}async send(e,t){return await this._start(),await super.send(e,t)}async _send(e){gt(!Array.isArray(e),"EIP-1193 does not support batch request","payload",e);try{const t=await this.#I(e.method,e.params||[]);return[{id:e.id,result:t}]}catch(t){return[{id:e.id,error:{code:t.code,data:t.data,message:t.message}}]}}getRpcError(e,t){switch((t=JSON.parse(JSON.stringify(t))).error.code||-1){case 4001:t.error.message=`ethers-user-denied: ${t.error.message}`;break;case 4200:t.error.message=`ethers-unsupported: ${t.error.message}`}return super.getRpcError(e,t)}async hasSigner(e){null==e&&(e=0);const t=await this.send("eth_accounts",[]);return"number"==typeof e?t.length>e:(e=e.toLowerCase(),0!==t.filter((t=>t.toLowerCase()===e)).length)}async getSigner(e){if(null==e&&(e=0),!await this.hasSigner(e))try{await this.#I("eth_requestAccounts",[])}catch(e){const t=e.payload;throw this.getRpcError(t,{id:t.id,error:e})}return await super.getSigner(e)}}const Eu=new Set;function ku(e){Eu.has(e)||(Eu.add(e),console.log("========= NOTICE ========="),console.log(`Request-Rate Exceeded for ${e} (this message will not be repeated)`),console.log(""),console.log("The default API keys for each service are provided as a highly-throttled,"),console.log("community resource for low-traffic projects and early prototyping."),console.log(""),console.log("While your application will continue to function, we highly recommended"),console.log("signing up for your own API keys to improve performance, increase your"),console.log("request rate/limit and enable other perks, such as metrics and advanced APIs."),console.log(""),console.log("For more details: https://docs.ethers.org/api-keys/"),console.log("=========================="))}const xu="9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";class Cu extends vu{apiKey;constructor(e,t){null==e&&(e="mainnet");const n=Rc.from(e);null==t&&(t=xu);const r={polling:!0,staticNetwork:n};super(Cu.getRequest(n,t),n,r),ct(this,{apiKey:t})}_getProvider(e){try{return new Cu(e,this.apiKey)}catch(e){}return super._getProvider(e)}static getRequest(e,t){null==t&&(t=xu);const n=new js(`https://${function(e){switch(e){case"mainnet":return"rpc.ankr.com/eth";case"goerli":return"rpc.ankr.com/eth_goerli";case"matic":return"rpc.ankr.com/polygon";case"arbitrum":return"rpc.ankr.com/arbitrum"}gt(!1,"unsupported network","network",e)}(e.name)}/${t}`);return n.allowGzip=!0,t===xu&&(n.retryFunc=async(e,t,n)=>(ku("AnkrProvider"),!0)),n}getRpcError(e,t){return"eth_sendRawTransaction"===e.method&&t&&t.error&&"INTERNAL_ERROR: could not replace existing tx"===t.error.message&&(t.error.message="replacement transaction underpriced"),super.getRpcError(e,t)}isCommunityResource(){return this.apiKey===xu}}const Nu="_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";class Pu extends vu{apiKey;constructor(e,t){null==e&&(e="mainnet");const n=Rc.from(e);null==t&&(t=Nu),super(Pu.getRequest(n,t),n,{staticNetwork:n}),ct(this,{apiKey:t})}_getProvider(e){try{return new Pu(e,this.apiKey)}catch(e){}return super._getProvider(e)}async _perform(e){if("getTransactionResult"===e.method){const{trace:t,tx:n}=await lt({trace:this.send("trace_transaction",[e.hash]),tx:this.getTransaction(e.hash)});if(null==t||null==n)return null;let r,s=!1;try{r=t[0].result.output,s="Reverted"===t[0].error}catch(e){}if(r)return ft(!s,"an error occurred during transaction executions","CALL_EXCEPTION",{action:"getTransactionResult",data:r,reason:null,transaction:n,invocation:null,revert:null}),r;ft(!1,"could not parse trace result","BAD_DATA",{value:t})}return await super._perform(e)}isCommunityResource(){return this.apiKey===Nu}static getRequest(e,t){null==t&&(t=Nu);const n=new js(`https://${function(e){switch(e){case"mainnet":return"eth-mainnet.alchemyapi.io";case"goerli":return"eth-goerli.g.alchemy.com";case"sepolia":return"eth-sepolia.g.alchemy.com";case"arbitrum":return"arb-mainnet.g.alchemy.com";case"arbitrum-goerli":return"arb-goerli.g.alchemy.com";case"matic":return"polygon-mainnet.g.alchemy.com";case"matic-mumbai":return"polygon-mumbai.g.alchemy.com";case"optimism":return"opt-mainnet.g.alchemy.com";case"optimism-goerli":return"opt-goerli.g.alchemy.com"}gt(!1,"unsupported network","network",e)}(e.name)}/v2/${t}`);return n.allowGzip=!0,t===Nu&&(n.retryFunc=async(e,t,n)=>(ku("alchemy"),!0)),n}}class Su extends vu{constructor(e){null==e&&(e="mainnet");const t=Rc.from(e);gt("mainnet"===t.name,"unsupported network","network",e),super("https://cloudflare-eth.com/",t,{staticNetwork:t})}}const Ou=["enableCcipRead"];let Bu=1;class Ru extends Wc{network;apiKey;#Xe;constructor(e,t){const n=null!=t?t:null;super();const r=Rc.from(e);this.#Xe=r.getPlugin("org.ethers.plugins.provider.Etherscan"),ct(this,{apiKey:n,network:r}),this.getBaseUrl()}getBaseUrl(){if(this.#Xe)return this.#Xe.baseUrl;switch(this.network.name){case"mainnet":return"https://api.etherscan.io";case"goerli":return"https://api-goerli.etherscan.io";case"sepolia":return"https://api-sepolia.etherscan.io";case"arbitrum":return"https://api.arbiscan.io";case"arbitrum-goerli":return"https://api-goerli.arbiscan.io";case"matic":return"https://api.polygonscan.com";case"matic-mumbai":return"https://api-testnet.polygonscan.com";case"optimism":return"https://api-optimistic.etherscan.io";case"optimism-goerli":return"https://api-goerli-optimistic.etherscan.io";case"bnb":return"http://api.bscscan.com";case"bnbt":return"http://api-testnet.bscscan.com"}gt(!1,"unsupported network","network",this.network)}getUrl(e,t){const n=Object.keys(t).reduce(((e,n)=>{const r=t[n];return null!=r&&(e+=`&${n}=${r}`),e}),""),r=this.apiKey?`&apikey=${this.apiKey}`:"";return`${this.getBaseUrl()}/api?module=${e}${n}${r}`}getPostUrl(){return`${this.getBaseUrl()}/api`}getPostData(e,t){return t.module=e,t.apikey=this.apiKey,t}async detectNetwork(){return this.network}async fetch(e,t,n){const r=Bu++,s=n?this.getPostUrl():this.getUrl(e,t),i=n?this.getPostData(e,t):null;this.emit("debug",{action:"sendRequest",id:r,url:s,payload:i});const a=new js(s);a.setThrottleParams({slotInterval:1e3}),a.retryFunc=(e,t,n)=>(this.isCommunityResource()&&ku("Etherscan"),Promise.resolve(!0)),a.processFunc=async(t,n)=>{const s=n.hasBody()?JSON.parse(hr(n.body)):{},i=("string"==typeof s.result?s.result:"").toLowerCase().indexOf("rate limit")>=0;return"proxy"===e?s&&0==s.status&&"NOTOK"==s.message&&i&&(this.emit("debug",{action:"receiveError",id:r,reason:"proxy-NOTOK",error:s}),n.throwThrottleError(s.result,2e3)):i&&(this.emit("debug",{action:"receiveError",id:r,reason:"null result",error:s.result}),n.throwThrottleError(s.result,2e3)),n},i&&(a.setHeader("content-type","application/x-www-form-urlencoded; charset=UTF-8"),a.body=Object.keys(i).map((e=>`${e}=${i[e]}`)).join("&"));const o=await a.send();try{o.assertOk()}catch(e){this.emit("debug",{action:"receiveError",id:r,error:e,reason:"assertOk"}),ft(!1,"response error","SERVER_ERROR",{request:a,response:o})}o.hasBody()||(this.emit("debug",{action:"receiveError",id:r,error:"missing body",reason:"null body"}),ft(!1,"missing response","SERVER_ERROR",{request:a,response:o}));const l=JSON.parse(hr(o.body));return"proxy"===e?("2.0"!=l.jsonrpc&&(this.emit("debug",{action:"receiveError",id:r,result:l,reason:"invalid JSON-RPC"}),ft(!1,"invalid JSON-RPC response (missing jsonrpc='2.0')","SERVER_ERROR",{request:a,response:o,info:{result:l}})),l.error&&(this.emit("debug",{action:"receiveError",id:r,result:l,reason:"JSON-RPC error"}),ft(!1,"error response","SERVER_ERROR",{request:a,response:o,info:{result:l}})),this.emit("debug",{action:"receiveRequest",id:r,result:l}),l.result):0!=l.status||"No records found"!==l.message&&"No transactions found"!==l.message?((1!=l.status||"string"==typeof l.message&&!l.message.match(/^OK/))&&(this.emit("debug",{action:"receiveError",id:r,result:l}),ft(!1,"error response","SERVER_ERROR",{request:a,response:o,info:{result:l}})),this.emit("debug",{action:"receiveRequest",id:r,result:l}),l.result):(this.emit("debug",{action:"receiveRequest",id:r,result:l}),l.result)}_getTransactionPostData(e){const t={};for(let n in e){if(Ou.indexOf(n)>=0)continue;if(null==e[n])continue;let r=e[n];"type"===n&&0===r||(r={type:!0,gasLimit:!0,gasPrice:!0,maxFeePerGs:!0,maxPriorityFeePerGas:!0,nonce:!0,value:!0}[n]?$t(r):"accessList"===n?"["+Ss(r).map((e=>`{address:"${e.address}",storageKeys:["${e.storageKeys.join('","')}"]}`)).join(",")+"]":kt(r),t[n]=r)}return t}_checkError(e,t,n){let r="";if(ht(t,"SERVER_ERROR")){try{r=t.info.result.error.message}catch(e){}if(!r)try{r=t.info.message}catch(e){}}if("estimateGas"===e.method&&!r.match(/revert/i)&&r.match(/insufficient funds/i)&&ft(!1,"insufficient funds","INSUFFICIENT_FUNDS",{transaction:e.transaction}),("call"===e.method||"estimateGas"===e.method)&&r.match(/execution reverted/i)){let n="";try{n=t.info.result.error.data}catch(t){}const r=us.getBuiltinCallException(e.method,e.transaction,n);throw r.info={request:e,error:t},r}if(r&&"broadcastTransaction"===e.method){const t=cc.from(e.signedTransaction);r.match(/replacement/i)&&r.match(/underpriced/i)&&ft(!1,"replacement fee too low","REPLACEMENT_UNDERPRICED",{transaction:t}),r.match(/insufficient funds/)&&ft(!1,"insufficient funds for intrinsic transaction cost","INSUFFICIENT_FUNDS",{transaction:t}),r.match(/same hash was already imported|transaction nonce is too low|nonce too low/)&&ft(!1,"nonce has already been used","NONCE_EXPIRED",{transaction:t})}throw t}async _detectNetwork(){return this.network}async _perform(e){switch(e.method){case"chainId":return this.network.chainId;case"getBlockNumber":return this.fetch("proxy",{action:"eth_blockNumber"});case"getGasPrice":return this.fetch("proxy",{action:"eth_gasPrice"});case"getBalance":return this.fetch("account",{action:"balance",address:e.address,tag:e.blockTag});case"getTransactionCount":return this.fetch("proxy",{action:"eth_getTransactionCount",address:e.address,tag:e.blockTag});case"getCode":return this.fetch("proxy",{action:"eth_getCode",address:e.address,tag:e.blockTag});case"getStorage":return this.fetch("proxy",{action:"eth_getStorageAt",address:e.address,position:e.position,tag:e.blockTag});case"broadcastTransaction":return this.fetch("proxy",{action:"eth_sendRawTransaction",hex:e.signedTransaction},!0).catch((t=>this._checkError(e,t,e.signedTransaction)));case"getBlock":if("blockTag"in e)return this.fetch("proxy",{action:"eth_getBlockByNumber",tag:e.blockTag,boolean:e.includeTransactions?"true":"false"});ft(!1,"getBlock by blockHash not supported by Etherscan","UNSUPPORTED_OPERATION",{operation:"getBlock(blockHash)"});case"getTransaction":return this.fetch("proxy",{action:"eth_getTransactionByHash",txhash:e.hash});case"getTransactionReceipt":return this.fetch("proxy",{action:"eth_getTransactionReceipt",txhash:e.hash});case"call":{if("latest"!==e.blockTag)throw new Error("EtherscanProvider does not support blockTag for call");const t=this._getTransactionPostData(e.transaction);t.module="proxy",t.action="eth_call";try{return await this.fetch("proxy",t,!0)}catch(t){return this._checkError(e,t,e.transaction)}}case"estimateGas":{const t=this._getTransactionPostData(e.transaction);t.module="proxy",t.action="eth_estimateGas";try{return await this.fetch("proxy",t,!0)}catch(t){return this._checkError(e,t,e.transaction)}}}return super._perform(e)}async getNetwork(){return this.network}async getEtherPrice(){return"mainnet"!==this.network.name?0:parseFloat((await this.fetch("stats",{action:"ethprice"})).ethusd)}async getContract(e){let t=this._getAddress(e);var n;(n=t)&&"function"==typeof n.then&&(t=await t);try{const e=await this.fetch("contract",{action:"getabi",address:t}),n=JSON.parse(e);return new Fi(t,n,this)}catch(e){return null}}isCommunityResource(){return null==this.apiKey}}const Tu=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("unable to locate global object")}().WebSocket;class Iu{#ye;#Q;get filter(){return JSON.parse(this.#Q)}#et;#tt;#nt;constructor(e,t){this.#ye=e,this.#Q=JSON.stringify(t),this.#et=null,this.#tt=null,this.#nt=null}start(){this.#et=this.#ye.send("eth_subscribe",this.filter).then((e=>(this.#ye._register(e,this),e)))}stop(){this.#et.then((e=>{this.#ye.send("eth_unsubscribe",[e])})),this.#et=null}pause(e){ft(e,"preserve logs while paused not supported by SocketSubscriber yet","UNSUPPORTED_OPERATION",{operation:"pause(false)"}),this.#tt=!!e}resume(){this.#tt=null}_handleMessage(e){if(null!=this.#et&&null===this.#tt){let t=this.#nt;t=null==t?this._emit(this.#ye,e):t.then((async()=>{await this._emit(this.#ye,e)})),this.#nt=t.then((()=>{this.#nt===t&&(this.#nt=null)}))}}async _emit(e,t){throw new Error("sub-classes must implemente this; _emit")}}class Fu extends Iu{constructor(e){super(e,["newHeads"])}async _emit(e,t){e.emit("block",parseInt(t.number))}}class Lu extends Iu{constructor(e){super(e,["newPendingTransactions"])}async _emit(e,t){e.emit("pending",t)}}class Uu extends Iu{#rt;get logFilter(){return JSON.parse(this.#rt)}constructor(e,t){super(e,["logs",t]),this.#rt=JSON.stringify(t)}async _emit(e,t){e.emit(this.logFilter,e._wrapLog(t,e._network))}}class Du extends yu{#st;#ke;#it;constructor(e){super(e,{batchMaxCount:1}),this.#st=new Map,this.#ke=new Map,this.#it=new Map}_getSubscriber(e){switch(e.type){case"close":return new zc("close");case"block":return new Fu(this);case"pending":return new Lu(this);case"event":return new Uu(this,e.filter);case"orphan":if("drop-log"===e.filter.orphan)return new zc("drop-log")}return super._getSubscriber(e)}_register(e,t){this.#ke.set(e,t);const n=this.#it.get(e);if(n){for(const e of n)t._handleMessage(e);this.#it.delete(e)}}async _send(e){gt(!Array.isArray(e),"WebSocket does not support batch send","payload",e);const t=new Promise(((t,n)=>{this.#st.set(e.id,{payload:e,resolve:t,reject:n})}));return await this._waitUntilReady(),await this._write(JSON.stringify(e)),[await t]}async _processMessage(e){const t=JSON.parse(e);if(t&&"object"==typeof t&&"id"in t){const e=this.#st.get(t.id);if(null==e)return void this.emit("error",pt("received result for unknown id","UNKNOWN_ERROR",{reasonCode:"UNKNOWN_ID",result:t}));this.#st.delete(t.id),e.resolve(t)}else{if(!t||"eth_subscription"!==t.method)return void this.emit("error",pt("received unexpected message","UNKNOWN_ERROR",{reasonCode:"UNEXPECTED_MESSAGE",result:t}));{const e=t.params.subscription,n=this.#ke.get(e);if(n)n._handleMessage(t.params.result);else{let n=this.#it.get(e);null==n&&(n=[],this.#it.set(e,n)),n.push(t.params.result)}}}}async _write(e){throw new Error("sub-classes must override this")}}class Mu extends Du{#Ze;#at;get websocket(){if(null==this.#at)throw new Error("websocket closed");return this.#at}constructor(e,t){super(t),"string"==typeof e?(this.#Ze=()=>new Tu(e),this.#at=this.#Ze()):"function"==typeof e?(this.#Ze=e,this.#at=e()):(this.#Ze=null,this.#at=e),this.websocket.onopen=async()=>{try{await this._start(),this.resume()}catch(e){console.log("failed to start WebsocketProvider",e)}},this.websocket.onmessage=e=>{this._processMessage(e.data)}}async _write(e){this.websocket.send(e)}async destroy(){null!=this.#at&&(this.#at.close(),this.#at=null),super.destroy()}}const ju="84842078b09946638c03157f83405213";class Vu extends Mu{projectId;projectSecret;constructor(e,t){const n=new Hu(e,t),r=n._getConnection();ft(!r.credentials,"INFURA WebSocket project secrets unsupported","UNSUPPORTED_OPERATION",{operation:"InfuraProvider.getWebSocketProvider()"}),super(r.url.replace(/^http/i,"ws").replace("/v3/","/ws/v3/"),e),ct(this,{projectId:n.projectId,projectSecret:n.projectSecret})}isCommunityResource(){return this.projectId===ju}}class Hu extends vu{projectId;projectSecret;constructor(e,t,n){null==e&&(e="mainnet");const r=Rc.from(e);null==t&&(t=ju),null==n&&(n=null),super(Hu.getRequest(r,t,n),r,{staticNetwork:r}),ct(this,{projectId:t,projectSecret:n})}_getProvider(e){try{return new Hu(e,this.projectId,this.projectSecret)}catch(e){}return super._getProvider(e)}isCommunityResource(){return this.projectId===ju}static getWebSocketProvider(e,t){return new Vu(e,t)}static getRequest(e,t,n){null==t&&(t=ju),null==n&&(n=null);const r=new js(`https://${function(e){switch(e){case"mainnet":return"mainnet.infura.io";case"goerli":return"goerli.infura.io";case"sepolia":return"sepolia.infura.io";case"arbitrum":return"arbitrum-mainnet.infura.io";case"arbitrum-goerli":return"arbitrum-goerli.infura.io";case"linea":return"linea-mainnet.infura.io";case"linea-goerli":return"linea-goerli.infura.io";case"matic":return"polygon-mainnet.infura.io";case"matic-mumbai":return"polygon-mumbai.infura.io";case"optimism":return"optimism-mainnet.infura.io";case"optimism-goerli":return"optimism-goerli.infura.io"}gt(!1,"unsupported network","network",e)}(e.name)}/v3/${t}`);return r.allowGzip=!0,n&&r.setCredentials("",n),t===ju&&(r.retryFunc=async(e,t,n)=>(ku("InfuraProvider"),!0)),r}}const $u="919b412a057b5e9c9b6dce193c5a60242d6efadb";class Gu extends vu{token;constructor(e,t){null==e&&(e="mainnet");const n=Rc.from(e);null==t&&(t=$u),super(Gu.getRequest(n,t),n,{staticNetwork:n}),ct(this,{token:t})}_getProvider(e){try{return new Gu(e,this.token)}catch(e){}return super._getProvider(e)}isCommunityResource(){return this.token===$u}static getRequest(e,t){null==t&&(t=$u);const n=new js(`https://${function(e){switch(e){case"mainnet":return"ethers.quiknode.pro";case"goerli":return"ethers.ethereum-goerli.quiknode.pro";case"arbitrum":return"ethers.arbitrum-mainnet.quiknode.pro";case"arbitrum-goerli":return"ethers.arbitrum-goerli.quiknode.pro";case"matic":return"ethers.matic.quiknode.pro";case"matic-mumbai":return"ethers.matic-testnet.quiknode.pro";case"optimism":return"ethers.optimism.quiknode.pro";case"optimism-goerli":return"ethers.optimism-goerli.quiknode.pro"}gt(!1,"unsupported network","network",e)}(e.name)}/${t}`);return n.allowGzip=!0,t===$u&&(n.retryFunc=async(e,t,n)=>(ku("QuickNodeProvider"),!0)),n}}const zu=BigInt("1"),qu=BigInt("2");function Qu(){return(new Date).getTime()}function Ju(e){return JSON.stringify(e,((e,t)=>"bigint"==typeof t?{type:"bigint",value:t.toString()}:t))}const Ku={stallTimeout:400,priority:1,weight:1},Wu={blockNumber:-2,requests:0,lateResponses:0,errorResponses:0,outOfSync:-1,unsupportedEvents:0,rollingDuration:0,score:0,_network:null,_updateNumber:null,_totalTime:0,_lastFatalError:null,_lastFatalErrorTimestamp:0};function Yu(e){if(null==e)return"null";if(Array.isArray(e))return"["+e.map(Yu).join(",")+"]";if("object"==typeof e&&"function"==typeof e.toJSON)return Yu(e.toJSON());switch(typeof e){case"boolean":case"symbol":return e.toString();case"bigint":case"number":return BigInt(e).toString();case"string":return JSON.stringify(e);case"object":{const t=Object.keys(e);return t.sort(),"{"+t.map((t=>`${JSON.stringify(t)}:${Yu(e[t])}`)).join(",")+"}"}}throw console.log("Could not serialize",e),new Error("Hmm...")}function Zu(e){if("error"in e){const t=e.error;return{tag:Yu(t),value:t}}const t=e.result;return{tag:Yu(t),value:t}}function Xu(e,t){const n=new Map;for(const{value:e,tag:r,weight:s}of t){const t=n.get(r)||{value:e,weight:0};t.weight+=s,n.set(r,t)}let r=null;for(const t of n.values())t.weight>=e&&(!r||t.weight>r.weight)&&(r=t);if(r)return r.value}function eh(e,t){let n=0;const r=new Map;let s=null;const i=[];for(const{value:e,tag:a,weight:o}of t)if(e instanceof Error){const t=r.get(a)||{value:e,weight:0};t.weight+=o,r.set(a,t),(null==s||t.weight>s.weight)&&(s=t)}else i.push(BigInt(e)),n+=o;if(n<e)return s&&s.weight>=e?s.value:void 0;i.sort(((e,t)=>e<t?-1:t>e?1:0));const a=Math.floor(i.length/2);return i.length%2?i[a]:(i[a-1]+i[a]+zu)/qu}function th(e,t){const n=Xu(e,t);if(void 0!==n)return n;for(const e of t)if(e.value)return e.value}class nh extends Wc{quorum;eventQuorum;eventWorkers;#ot;#lt;#ct;constructor(e,t,n){super(t,n),this.#ot=e.map((e=>e instanceof Wc?Object.assign({provider:e},Ku,Wu):Object.assign({},Ku,e,Wu))),this.#lt=-2,this.#ct=null,n&&null!=n.quorum?this.quorum=n.quorum:this.quorum=Math.ceil(this.#ot.reduce(((e,t)=>e+t.weight),0)/2),this.eventQuorum=1,this.eventWorkers=1,gt(this.quorum<=this.#ot.reduce(((e,t)=>e+t.weight),0),"quorum exceed provider wieght","quorum",this.quorum)}get providerConfigs(){return this.#ot.map((e=>{const t=Object.assign({},e);for(const e in t)"_"===e[0]&&delete t[e];return t}))}async _detectNetwork(){return Rc.from(Lt(await this._perform({method:"chainId"})))}async _translatePerform(e,t){switch(t.method){case"broadcastTransaction":return await e.broadcastTransaction(t.signedTransaction);case"call":return await e.call(Object.assign({},t.transaction,{blockTag:t.blockTag}));case"chainId":return(await e.getNetwork()).chainId;case"estimateGas":return await e.estimateGas(t.transaction);case"getBalance":return await e.getBalance(t.address,t.blockTag);case"getBlock":{const n="blockHash"in t?t.blockHash:t.blockTag;return await e.getBlock(n,t.includeTransactions)}case"getBlockNumber":return await e.getBlockNumber();case"getCode":return await e.getCode(t.address,t.blockTag);case"getGasPrice":return(await e.getFeeData()).gasPrice;case"getLogs":return await e.getLogs(t.filter);case"getStorage":return await e.getStorage(t.address,t.position,t.blockTag);case"getTransaction":return await e.getTransaction(t.hash);case"getTransactionCount":return await e.getTransactionCount(t.address,t.blockTag);case"getTransactionReceipt":return await e.getTransactionReceipt(t.hash);case"getTransactionResult":return await e.getTransactionResult(t.hash)}}#ut(e){const t=Array.from(e).map((e=>e.config)),n=this.#ot.slice();!function(e){for(let t=e.length-1;t>0;t--){const n=Math.floor(Math.random()*(t+1)),r=e[t];e[t]=e[n],e[n]=r}}(n),n.sort(((e,t)=>e.priority-t.priority));for(const e of n)if(!e._lastFatalError&&-1===t.indexOf(e))return e;return null}#ht(e,t){const n=this.#ut(e);if(null==n)return null;const r={config:n,result:null,didBump:!1,perform:null,staller:null},s=Qu();return r.perform=(async()=>{try{n.requests++;const e=await this._translatePerform(n.provider,t);r.result={result:e}}catch(e){n.errorResponses++,r.result={error:e}}const e=Qu()-s;n._totalTime+=e,n.rollingDuration=.95*n.rollingDuration+.05*e,r.perform=null})(),r.staller=(async()=>{var e;await(e=n.stallTimeout,new Promise((t=>{setTimeout(t,e)}))),r.staller=null})(),e.add(r),r}async#dt(){let e=this.#ct;if(!e){const t=[];this.#ot.forEach((e=>{t.push((async()=>{await async function(e,t){for(;(e.blockNumber<0||e.blockNumber<0)&&(e._updateNumber||(e._updateNumber=(async()=>{try{const t=await e.provider.getBlockNumber();t>e.blockNumber&&(e.blockNumber=t)}catch(t){e.blockNumber=-2,e._lastFatalError=t,e._lastFatalErrorTimestamp=Qu()}e._updateNumber=null})()),await e._updateNumber,e.outOfSync++,!e._lastFatalError););}(e),e._lastFatalError||(e._network=await e.provider.getNetwork())})())})),this.#ct=e=(async()=>{await Promise.all(t);let e=null;for(const t of this.#ot){if(t._lastFatalError)continue;const n=t._network;null==e?e=n.chainId:n.chainId!==e&&ft(!1,"cannot mix providers on different networks","UNSUPPORTED_OPERATION",{operation:"new FallbackProvider"})}})()}await e}async#pt(e,t){const n=[];for(const t of e)if(null!=t.result){const{tag:e,value:r}=Zu(t.result);n.push({tag:e,value:r,weight:t.config.weight})}if(!(n.reduce(((e,t)=>e+t.weight),0)<this.quorum)){switch(t.method){case"getBlockNumber":{-2===this.#lt&&(this.#lt=Math.ceil(jt(eh(this.quorum,this.#ot.filter((e=>!e._lastFatalError)).map((e=>({value:e.blockNumber,tag:jt(e.blockNumber).toString(),weight:e.weight})))))));const e=function(e,t){if(1===e)return jt(eh(e,t),"%internal");const n=new Map,r=(e,t)=>{const r=n.get(e)||{result:e,weight:0};r.weight+=t,n.set(e,r)};for(const{weight:e,value:n}of t){const t=jt(n);r(t-1,e),r(t,e),r(t+1,e)}let s,i=0;for(const{weight:t,result:r}of n.values())t>=e&&(t>i||null!=s&&t===i&&r>s)&&(i=t,s=r);return s}(this.quorum,n);if(void 0===e)return;return e>this.#lt&&(this.#lt=e),this.#lt}case"getGasPrice":case"estimateGas":return eh(this.quorum,n);case"getBlock":return"blockTag"in t&&"pending"===t.blockTag?th(this.quorum,n):Xu(this.quorum,n);case"call":case"chainId":case"getBalance":case"getTransactionCount":case"getCode":case"getStorage":case"getTransaction":case"getTransactionReceipt":case"getLogs":return Xu(this.quorum,n);case"broadcastTransaction":return th(this.quorum,n)}ft(!1,"unsupported method","UNSUPPORTED_OPERATION",{operation:`_perform(${Ju(t.method)})`})}}async#ft(e,t){if(0===e.size)throw new Error("no runners?!");const n=[];let r=0;for(const t of e)t.perform&&n.push(t.perform),t.staller?n.push(t.staller):t.didBump||(t.didBump=!0,r++);const s=await this.#pt(e,t);if(void 0!==s){if(s instanceof Error)throw s;return s}for(let n=0;n<r;n++)this.#ht(e,t);return ft(n.length>0,"quorum not met","SERVER_ERROR",{request:"%sub-requests",info:{request:t,results:Array.from(e).map((e=>Ju(e.result)))}}),await Promise.race(n),await this.#ft(e,t)}async _perform(e){if("broadcastTransaction"===e.method){const t=await Promise.all(this.#ot.map((async({provider:t,weight:n})=>{try{const r=await t._perform(e);return Object.assign(Zu({result:r}),{weight:n})}catch(e){return Object.assign(Zu({error:e}),{weight:n})}}))),n=th(this.quorum,t);if(ft(void 0!==n,"problem multi-broadcasting","SERVER_ERROR",{request:"%sub-requests",info:{request:e,results:t.map(Ju)}}),n instanceof Error)throw n;return n}await this.#dt();const t=new Set;for(let n=0;n<this.quorum;n++)this.#ht(t,e);const n=await this.#ft(t,e);for(const e of t)e.perform&&null==e.result&&e.config.lateResponses++;return n}async destroy(){for(const{provider:e}of this.#ot)e.destroy();super.destroy()}}const rh="goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" "),sh=JSON.parse('{"nl":"0x74558B39791BaAA5eB40CDF55F4Bd0928a501C71","jA":"0xFbd7c085a15411820bAb1Ba85f14cC9E25FE2d3B","_N":"0x33494c24d904B87B94A1cc9870D966780D56093c"}'),ih="address project, address deployer, string description",ah=sh.nl,oh=sh._N,lh=["function newProject(string projectName, string abbreviation, string description, address payment) returns (address)",`event ProjectDeployed(${ih})`,`function getProject(string name) view returns (tuple(${ih}))`,"function newContract(string name, string project, tuple(bytes32, bytes)[] genesisModules, address payment) returns (address)"];function ch(e){return new Fi(ah,lh,e)}async function uh(e){return JSON.parse(localStorage.getItem("kanaloa.imported_projects")||"[]")}class hh{constructor(e){this.parent=e}async getProjects(){return await uh(this.parent.wallet)}async newProject(e){const t=await async function(e,t){const n=ch(t);return await(await n.newProject(e.projectName,e.abbreviation,e.description,oh)).wait().then((async()=>(await n.getProject(e.projectName)).project))}(e,this.parent.signer);return localStorage.setItem("kanaloa.imported_projects",JSON.stringify([...await uh(this.parent.wallet),{address:t,project:e.projectName,deployer:await this.parent.signer.getAddress(),description:e.description}])),t}async newContract(e){await async function(e,t){const n=ch(t),r=await(await n.newContract(e.name,e.project,e.genesisModules.map((e=>[e.moduleSignature,e.initParams])),sh._N)).wait();return r}(e,this.parent.signer)}}const dh=new CustomEvent("wallet-changed");function ph(e){e.target.requestUpdate()}const fh=new class{get signer(){return this._signer}set signer(e){this._signer=e,null!=e&&e.getAddress().then((e=>{this._address=e,this.subscribedElements.forEach((e=>e.dispatchEvent(dh)))}))}get address(){return this._address}get avatar(){return this._avatar}constructor(){this.subscribedElements=new Set,this.projectRegistry=new hh(this),null!=window.ethereum?(this.wallet=new _u(window.ethereum),this.wallet.listAccounts().then((()=>this.wallet.getSigner())).then((e=>{this.signer=e}))):this.wallet=function(e,t){null==t&&(t={});const n=e=>"-"!==t[e]&&("string"==typeof t.exclusive?e===t.exclusive:!Array.isArray(t.exclusive)||-1!==t.exclusive.indexOf(e));if(e.match(/^https?:/))return new vu(e);if(e.match(/^wss?:/)||(r=e)&&"function"==typeof r.send&&"function"==typeof r.close)return new Mu(e);var r;let s=null;try{s=Rc.from(e)}catch(e){}const i=[];if(n("publicPolygon")&&s&&"matic"===s.name&&i.push(new vu("https://polygon-rpc.com/",s,{staticNetwork:s})),n("alchemy"))try{i.push(new Pu(e,t.alchemy))}catch(e){}if(n("ankr")&&null!=t.ankr)try{i.push(new Cu(e,t.ankr))}catch(e){}if(n("cloudflare"))try{i.push(new Su(e))}catch(e){}if(n("etherscan"))try{i.push(new Ru(e,t.etherscan))}catch(e){}if(n("infura"))try{let n,r=t.infura;"object"==typeof r&&(n=r.projectSecret,r=r.projectId),i.push(new Hu(e,r,n))}catch(e){}if(n("quicknode"))try{let n=t.quicknode;i.push(new Gu(e,n))}catch(e){}if(ft(i.length,"unsupported default network","UNSUPPORTED_OPERATION",{operation:"getDefaultProvider"}),1===i.length)return i[0];let a=Math.floor(i.length/2);return a>2&&(a=2),s&&-1!==rh.indexOf(s.name)&&(a=1),t&&t.quorum&&(a=t.quorum),new nh(i,void 0,{quorum:a})}("mainnet")}async requestSigner(){if(this.readOnly)throw new Error("KanaloaEthers: attempting to connect to read-only provider");return this.wallet.getSigner(0).then((e=>(this.signer=e,e)))}subscribe(e){e.addEventListener(dh.type,ph),this.subscribedElements.add(e)}unsubscribe(e){e.removeEventListener(dh.type,ph),this.subscribedElements.delete(e)}get readOnly(){return!(this.wallet instanceof _u)}};var gh=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};class mh extends le{constructor(){super(),this.items=[],this.isLoading=!0}static get styles(){return[o`
                :host {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 2rem;
                    padding: 1rem;
                    flex: 1;
                }

                h1 {
                    font-size: 3rem;
                    display: block;
                    width: 100%;
                }

                .cards {
                    display: flex;
                    flex: 1;
                    flex-wrap: wrap;
                    gap: 1rem;
                    justify-content: start;
                    align-items: start;
                    width: 100%;
                }

                kana-button {
                    min-width: fit-content;
                    width: 50%;
                    font-size: 1.5rem;
                    min-height: 4rem;
                    margin-bottom: 3rem;
                }
                
                a {
                    min-width: fit-content;
                    width: 100%;
                    display: flex;
                    justify-content: center;
                    text-decoration: none;
                }
            `]}connectedCallback(){super.connectedCallback(),this.fetchData()}}gh([de({type:Array})],mh.prototype,"items",void 0),gh([de({type:Boolean,reflect:!0})],mh.prototype,"isLoading",void 0);let yh=class extends mh{async fetchData(){this.isLoading=!0;const e=await fh.projectRegistry.getProjects();fh.readOnly&&(this.isLoading=!1,this.items=[]);const t=[];for(let n of e){const e=new Fi(n.address,["function balanceOf(address owner) view returns (uint256 balance)","function name() view returns (string)","function symbol() view returns (string)"],fh.wallet);try{if(0!=await e.balanceOf(await fh.requestSigner())){const e=n.address,r=n.project;t.push(new Oe({name:r,button:{text:"Contracts",link:`/projects/${e}`},address:e,description:n.description}))}}catch(e){}}this.isLoading=!1,this.items=t}render(){return V`
            <h1>My Projects</h1>
            <div class="cards">
                ${it(this.isLoading,(()=>V`<kana-loading-screen></kana-loading-screen>`),(()=>st(this.items,(e=>e.name),(e=>V`${e}`))))}
            </div>
            <a href="new-project">
                <kana-button>Create new project</kana-button>
            </a>
        `}};yh=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}([ue("projects-page")],yh);const bh=Re((e=>class extends e{get slots(){return{}}constructor(){super(),this.__privateSlots=new Set(null)}connectedCallback(){super.connectedCallback(),this._connectSlotMixin()}__renderAsNodes(e){const t=(ShadowRoot.prototype.createElement?this.shadowRoot:document).createElement("div"),{creationScope:n,host:r}=this.renderOptions;return ie(e,t,{creationScope:n,host:r}),Array.from(t.childNodes)}_connectSlotMixin(){this.__isConnectedSlotMixin||(Object.keys(this.slots).forEach((e=>{if(!(""===e?Array.from(this.children).find((e=>!e.hasAttribute("slot"))):Array.from(this.children).find((t=>t.slot===e)))){const n=this.slots[e]();let r=[];void 0!==(null==(t=n)?void 0:t._$litType$)?r=this.__renderAsNodes(n):Array.isArray(n)||(r=[n]),r.forEach((t=>{t instanceof Node&&(t instanceof Element&&""!==e&&t.setAttribute("slot",e),this.appendChild(t),this.__privateSlots.add(e))}))}var t})),this.__isConnectedSlotMixin=!0)}_isPrivateSlot(e){return this.__privateSlots.has(e)}})),vh=[Node.DOCUMENT_POSITION_PRECEDING,Node.DOCUMENT_POSITION_CONTAINS,Node.DOCUMENT_POSITION_CONTAINS|Node.DOCUMENT_POSITION_PRECEDING];function wh(e,{reverse:t}={}){const n=e.filter((e=>e));return n.sort(((e,t)=>{const n=e.compareDocumentPosition(t);return vh.includes(n)?Le?-1:1:Le?1:-1})),t&&n.reverse(),n}class Ah{constructor(e){this.type="unparseable",this.viewValue=e}toString(){return JSON.stringify({type:this.type,viewValue:this.viewValue})}}const _h=Re((e=>class extends e{constructor(){super(),this._parentFormGroup=void 0}connectedCallback(){super.connectedCallback(),this.dispatchEvent(new CustomEvent("form-element-register",{detail:{element:this},bubbles:!0}))}disconnectedCallback(){super.disconnectedCallback(),this.__unregisterFormElement()}__unregisterFormElement(){this._parentFormGroup&&this._parentFormGroup.removeFormElement(this)}})),Eh=Re((e=>class extends(_h(Te(bh(e)))){static get properties(){return{name:{type:String,reflect:!0},readOnly:{type:Boolean,attribute:"readonly",reflect:!0},label:String,labelSrOnly:{type:Boolean,attribute:"label-sr-only",reflect:!0},helpText:{type:String,attribute:"help-text"},modelValue:{attribute:!1},_ariaLabelledNodes:{attribute:!1},_ariaDescribedNodes:{attribute:!1},_repropagationRole:{attribute:!1},_isRepropagationEndpoint:{attribute:!1}}}get label(){return this.__label||this._labelNode&&this._labelNode.textContent||""}set label(e){const t=this.label;this.__label=e,this.requestUpdate("label",t)}get helpText(){return this.__helpText||this._helpTextNode&&this._helpTextNode.textContent||""}set helpText(e){const t=this.helpText;this.__helpText=e,this.requestUpdate("helpText",t)}get fieldName(){return this.__fieldName||this.label||this.name||""}set fieldName(e){this.__fieldName=e}get slots(){return{...super.slots,label:()=>{const e=document.createElement("label");return e.textContent=this.label,e},"help-text":()=>{const e=document.createElement("div");return e.textContent=this.helpText,e}}}get _inputNode(){return this.__getDirectSlotChild("input")}get _labelNode(){return this.__getDirectSlotChild("label")}get _helpTextNode(){return this.__getDirectSlotChild("help-text")}get _feedbackNode(){return this.__getDirectSlotChild("feedback")}constructor(){super(),this.name="",this.readOnly=!1,this.label="",this.labelSrOnly=!1,this.helpText="",this._inputId=function(e=""){return`${e.length>0?`${e}-`:""}${Math.random().toString(36).substr(2,10)}`}(this.localName),this._ariaLabelledNodes=[],this._ariaDescribedNodes=[],this._repropagationRole="child",this._isRepropagationEndpoint=!1,this.addEventListener("model-value-changed",this.__repropagateChildrenValues),this._onLabelClick=this._onLabelClick.bind(this)}connectedCallback(){super.connectedCallback(),this._enhanceLightDomClasses(),this._enhanceLightDomA11y(),this._triggerInitialModelValueChangedEvent(),this._labelNode&&this._labelNode.addEventListener("click",this._onLabelClick)}disconnectedCallback(){super.disconnectedCallback(),this._labelNode&&this._labelNode.removeEventListener("click",this._onLabelClick)}updated(e){super.updated(e),e.has("_ariaLabelledNodes")&&this.__reflectAriaAttr("aria-labelledby",this._ariaLabelledNodes,this.__reorderAriaLabelledNodes),e.has("_ariaDescribedNodes")&&this.__reflectAriaAttr("aria-describedby",this._ariaDescribedNodes,this.__reorderAriaDescribedNodes),e.has("label")&&this._labelNode&&(this._labelNode.textContent=this.label),e.has("helpText")&&this._helpTextNode&&(this._helpTextNode.textContent=this.helpText),e.has("name")&&this.dispatchEvent(new CustomEvent("form-element-name-changed",{detail:{oldName:e.get("name"),newName:this.name},bubbles:!0}))}_triggerInitialModelValueChangedEvent(){this._dispatchInitialModelValueChangedEvent()}_enhanceLightDomClasses(){this._inputNode&&this._inputNode.classList.add("form-control")}_enhanceLightDomA11y(){const{_inputNode:e,_labelNode:t,_helpTextNode:n,_feedbackNode:r}=this;e&&(e.id=e.id||this._inputId),t&&(t.setAttribute("for",this._inputId),this.addToAriaLabelledBy(t,{idPrefix:"label"})),n&&this.addToAriaDescribedBy(n,{idPrefix:"help-text"}),r&&(this.addEventListener("focusin",(()=>{r.setAttribute("aria-live","polite")})),this.addEventListener("focusout",(()=>{r.setAttribute("aria-live","assertive")})),this.addToAriaDescribedBy(r,{idPrefix:"feedback"})),this._enhanceLightDomA11yForAdditionalSlots()}_enhanceLightDomA11yForAdditionalSlots(e=["prefix","suffix","before","after"]){e.forEach((e=>{const t=this.__getDirectSlotChild(e);t&&(t.hasAttribute("data-label")&&this.addToAriaLabelledBy(t,{idPrefix:e}),t.hasAttribute("data-description")&&this.addToAriaDescribedBy(t,{idPrefix:e}))}))}__reflectAriaAttr(e,t,n){if(this._inputNode){if(n){const e=t.filter((e=>this.contains(e))),n=t.filter((e=>!this.contains(e)));t=[...wh(e),...n]}const r=t.map((e=>e.id)).join(" ");this._inputNode.setAttribute(e,r)}}render(){return V`
        <div class="form-field__group-one">${this._groupOneTemplate()}</div>
        <div class="form-field__group-two">${this._groupTwoTemplate()}</div>
      `}_groupOneTemplate(){return V` ${this._labelTemplate()} ${this._helpTextTemplate()} `}_groupTwoTemplate(){return V` ${this._inputGroupTemplate()} ${this._feedbackTemplate()} `}_labelTemplate(){return V`
        <div class="form-field__label">
          <slot name="label"></slot>
        </div>
      `}_helpTextTemplate(){return V`
        <small class="form-field__help-text">
          <slot name="help-text"></slot>
        </small>
      `}_inputGroupTemplate(){return V`
        <div class="input-group">
          ${this._inputGroupBeforeTemplate()}
          <div class="input-group__container">
            ${this._inputGroupPrefixTemplate()} ${this._inputGroupInputTemplate()}
            ${this._inputGroupSuffixTemplate()}
          </div>
          ${this._inputGroupAfterTemplate()}
        </div>
      `}_inputGroupBeforeTemplate(){return V`
        <div class="input-group__before">
          <slot name="before"></slot>
        </div>
      `}_inputGroupPrefixTemplate(){return Array.from(this.children).find((e=>"prefix"===e.slot))?V`
            <div class="input-group__prefix">
              <slot name="prefix"></slot>
            </div>
          `:$}_inputGroupInputTemplate(){return V`
        <div class="input-group__input">
          <slot name="input"></slot>
        </div>
      `}_inputGroupSuffixTemplate(){return Array.from(this.children).find((e=>"suffix"===e.slot))?V`
            <div class="input-group__suffix">
              <slot name="suffix"></slot>
            </div>
          `:$}_inputGroupAfterTemplate(){return V`
        <div class="input-group__after">
          <slot name="after"></slot>
        </div>
      `}_feedbackTemplate(){return V`
        <div class="form-field__feedback">
          <slot name="feedback"></slot>
        </div>
      `}_isEmpty(e=this.modelValue){let t=e;if(this.modelValue instanceof Ah&&(t=this.modelValue.viewValue),"object"==typeof t&&null!==t&&!(t instanceof Date))return!Object.keys(t).length;const n="number"==typeof t&&(0===t||Number.isNaN(t));return!(t||n||"boolean"==typeof t&&!1===t)}static get styles(){return[o`
          /**********************
            {block} .form-field
           ********************/

          :host {
            display: block;
          }

          :host([hidden]) {
            display: none;
          }

          :host([disabled]) {
            pointer-events: none;
          }

          :host([disabled]) .form-field__label ::slotted(*),
          :host([disabled]) .form-field__help-text ::slotted(*) {
            color: var(--disabled-text-color, #767676);
          }

          :host([label-sr-only]) .form-field__label {
            position: absolute;
            top: 0;
            width: 1px;
            height: 1px;
            overflow: hidden;
            clip-path: inset(100%);
            clip: rect(1px, 1px, 1px, 1px);
            white-space: nowrap;
            border: 0;
            margin: 0;
            padding: 0;
          }

          /***********************
            {block} .input-group
           *********************/

          .input-group__container {
            display: flex;
          }

          .input-group__input {
            flex: 1;
            display: flex;
          }

          /***** {state} :disabled *****/
          :host([disabled]) .input-group ::slotted([slot='input']) {
            color: var(--disabled-text-color, #767676);
          }

          /***********************
            {block} .form-control
           **********************/

          .input-group__container > .input-group__input ::slotted(.form-control) {
            flex: 1 1 auto;
            margin: 0; /* remove input margin in Safari */
            font-size: 100%; /* normalize default input font-size */
          }
        `]}_getAriaDescriptionElements(){return[this._helpTextNode,this._feedbackNode]}addToAriaLabelledBy(e,{idPrefix:t="",reorder:n=!0}={}){e.id=e.id||`${t}-${this._inputId}`,this._ariaLabelledNodes.includes(e)||(this._ariaLabelledNodes=[...this._ariaLabelledNodes,e],this.__reorderAriaLabelledNodes=Boolean(n))}removeFromAriaLabelledBy(e){this._ariaLabelledNodes.includes(e)&&(this._ariaLabelledNodes.splice(this._ariaLabelledNodes.indexOf(e),1),this._ariaLabelledNodes=[...this._ariaLabelledNodes],this.__reorderAriaLabelledNodes=!1)}addToAriaDescribedBy(e,{idPrefix:t="",reorder:n=!0}={}){e.id=e.id||`${t}-${this._inputId}`,this._ariaDescribedNodes.includes(e)||(this._ariaDescribedNodes=[...this._ariaDescribedNodes,e],this.__reorderAriaDescribedNodes=Boolean(n))}removeFromAriaDescribedBy(e){this._ariaDescribedNodes.includes(e)&&(this._ariaDescribedNodes.splice(this._ariaDescribedNodes.indexOf(e),1),this._ariaDescribedNodes=[...this._ariaDescribedNodes],this.__reorderAriaLabelledNodes=!1)}__getDirectSlotChild(e){return Array.from(this.children).find((t=>t.slot===e))}_dispatchInitialModelValueChangedEvent(){"child"!==this._repropagationRole&&(this.__repropagateChildrenInitialized=!0,this.dispatchEvent(new CustomEvent("model-value-changed",{bubbles:!0,detail:{formPath:[this],initialize:!0,isTriggeredByUser:!1}})))}_onBeforeRepropagateChildrenValues(e){}__repropagateChildrenValues(e){this._onBeforeRepropagateChildrenValues(e);const t=e.detail&&e.detail.element||e.target,n=this._isRepropagationEndpoint||"choice-group"===this._repropagationRole;if(t===this)return;e.stopImmediatePropagation();const r="child"!==this._repropagationRole&&!this.__repropagateChildrenInitialized,s=e.detail&&e.detail.initialize;if(r||s)return;if(!this._repropagationCondition(t))return;let i=[];n||(i=e.detail&&e.detail.formPath||[t]);const a=[...i,this];this.dispatchEvent(new CustomEvent("model-value-changed",{bubbles:!0,detail:{formPath:a,isTriggeredByUser:Boolean(e.detail?.isTriggeredByUser)}}))}_repropagationCondition(e){return Boolean(e)}_onLabelClick(){}}));class kh extends Array{_keys(){return Object.keys(this).filter((e=>Number.isNaN(Number(e))))}}const xh=Re((e=>class extends(_h(e)){static get properties(){return{_isFormOrFieldset:{type:Boolean}}}constructor(){super(),this.formElements=new kh,this._isFormOrFieldset=!1,this._onRequestToAddFormElement=this._onRequestToAddFormElement.bind(this),this._onRequestToChangeFormElementName=this._onRequestToChangeFormElementName.bind(this),this.addEventListener("form-element-register",this._onRequestToAddFormElement),this.addEventListener("form-element-name-changed",this._onRequestToChangeFormElementName),this.initComplete=new Promise(((e,t)=>{this.__resolveInitComplete=e,this.__rejectInitComplete=t})),this.registrationComplete=new Promise(((e,t)=>{this.__resolveRegistrationComplete=e,this.__rejectRegistrationComplete=t})),this.registrationComplete.done=!1,this.registrationComplete.then((()=>{this.registrationComplete.done=!0,this.__resolveInitComplete(void 0)}),(()=>{throw this.registrationComplete.done=!0,this.__rejectInitComplete(void 0),new Error("Registration could not finish. Please use await el.registrationComplete;")}))}connectedCallback(){super.connectedCallback(),this._completeRegistration()}_completeRegistration(){Promise.resolve().then((()=>this.__resolveRegistrationComplete(void 0)))}disconnectedCallback(){super.disconnectedCallback(),!1===this.registrationComplete.done&&Promise.resolve().then((()=>{Promise.resolve().then((()=>{this.__rejectRegistrationComplete()}))}))}isRegisteredFormElement(e){return this.formElements.some((t=>t===e))}addFormElement(e,t){if(e._parentFormGroup=this,t>=0?this.formElements.splice(t,0,e):this.formElements.push(e),this._isFormOrFieldset){const{name:n}=e;if(n===this.name)throw console.info("Error Node:",e),new TypeError(`You can not have the same name "${n}" as your parent`);if("[]"===n.substr(-2))Array.isArray(this.formElements[n])||(this.formElements[n]=new kh),t>0?this.formElements[n].splice(t,0,e):this.formElements[n].push(e);else{if(this.formElements[n])throw console.info("Error Node:",e),new TypeError(`Name "${n}" is already registered - if you want an array add [] to the end`);this.formElements[n]=e}}}removeFormElement(e){const t=this.formElements.indexOf(e);if(t>-1&&this.formElements.splice(t,1),this._isFormOrFieldset){const{name:t}=e;if("[]"===t.substr(-2)&&this.formElements[t]){const n=this.formElements[t].indexOf(e);n>-1&&this.formElements[t].splice(n,1)}else this.formElements[t]&&delete this.formElements[t]}}_onRequestToAddFormElement(e){const t=e.detail.element;if(t===this)return;if(this.isRegisteredFormElement(t))return;e.stopPropagation();let n=-1;if(this.formElements&&Array.isArray(this.formElements))for(const[e,r]of this.formElements.entries())if(!(r.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING)){n=e;break}this.addFormElement(t,n)}_onRequestToChangeFormElementName(e){const t=this.formElements[e.detail.oldName];t&&(this.formElements[e.detail.newName]=t,delete this.formElements[e.detail.oldName])}_onRequestToRemoveFormElement(e){const t=e.detail.element;t!==this&&this.isRegisteredFormElement(t)&&(e.stopPropagation(),this.removeFormElement(t))}})),Ch=!!ShadowRoot.prototype.createElement,Nh=Re((e=>class extends e{static get scopedElements(){return{}}static get shadowRootOptions(){return this.__shadowRootOptions}static set shadowRootOptions(e){this.__shadowRootOptions=e}static get elementStyles(){return this.__elementStyles}static set elementStyles(e){this.__elementStyles=e}constructor(...e){super(),this.renderOptions=this.renderOptions||void 0}get registry(){return this.constructor.__registry}set registry(e){this.constructor.__registry=e}createRenderRoot(){const{scopedElements:e,shadowRootOptions:t,elementStyles:n}=this.constructor;if(!this.registry||this.registry===this.constructor.__registry&&!Object.prototype.hasOwnProperty.call(this.constructor,"__registry")){this.registry=Ch?new CustomElementRegistry:customElements;for(const[t,n]of Object.entries(e))this.defineScopedElement(t,n)}const r={mode:"open",...t,customElements:this.registry},s=this.attachShadow(r);return Ch&&(this.renderOptions.creationScope=s),s instanceof ShadowRoot&&(l(s,n),this.renderOptions.renderBefore=this.renderOptions.renderBefore||s.firstChild),s}createScopedElement(e){return(Ch?this.shadowRoot:document).createElement(e)}defineScopedElement(e,t){const n=this.registry.get(e);return n&&!1===Ch&&n!==t&&console.error([`You are trying to re-register the "${e}" custom element with a different class via ScopedElementsMixin.`,"This is only possible with a CustomElementRegistry.","Your browser does not support this feature so you will need to load a polyfill for it.",'Load "@webcomponents/scoped-custom-element-registry" before you register ANY web component to the global customElements registry.','e.g. add "<script src="/node_modules/@webcomponents/scoped-custom-element-registry/scoped-custom-element-registry.min.js"><\/script>" as your first script tag.',"For more details you can visit https://open-wc.org/docs/development/scoped-elements/"].join("\n")),n?this.registry.get(e):this.registry.define(e,t)}getScopedTagName(e){return e}static getScopedTagName(e){return e}})),Ph=Symbol.for("lion::SingletonManagerClassStorage"),Sh=new class{constructor(){this._map=window[Ph]?window[Ph]:window[Ph]=new Map}set(e,t){this.has(e)||this._map.set(e,t)}get(e){return this._map.get(e)}has(e){return this._map.has(e)}};function Oh(e,t){return e(t={exports:{}},t.exports),t.exports}var Bh="long",Rh="short",Th="narrow",Ih="numeric",Fh="2-digit",Lh={number:{decimal:{style:"decimal"},integer:{style:"decimal",maximumFractionDigits:0},currency:{style:"currency",currency:"USD"},percent:{style:"percent"},default:{style:"decimal"}},date:{short:{month:Ih,day:Ih,year:Fh},medium:{month:Rh,day:Ih,year:Ih},long:{month:Bh,day:Ih,year:Ih},full:{month:Bh,day:Ih,year:Ih,weekday:Bh},default:{month:Rh,day:Ih,year:Ih}},time:{short:{hour:Ih,minute:Ih},medium:{hour:Ih,minute:Ih,second:Ih},long:{hour:Ih,minute:Ih,second:Ih,timeZoneName:Rh},full:{hour:Ih,minute:Ih,second:Ih,timeZoneName:Rh},default:{hour:Ih,minute:Ih,second:Ih}},duration:{default:{hours:{minimumIntegerDigits:1,maximumFractionDigits:0},minutes:{minimumIntegerDigits:2,maximumFractionDigits:0},seconds:{minimumIntegerDigits:2,maximumFractionDigits:3}}},parseNumberPattern:function(e){if(e){var t={},n=e.match(/\b[A-Z]{3}\b/i),r=e.replace(/[^¤]/g,"").length;if(!r&&n&&(r=1),r?(t.style="currency",t.currencyDisplay=1===r?"symbol":2===r?"code":"name",t.currency=n?n[0].toUpperCase():"USD"):e.indexOf("%")>=0&&(t.style="percent"),!/[@#0]/.test(e))return t.style?t:void 0;if(t.useGrouping=e.indexOf(",")>=0,/E\+?[@#0]+/i.test(e)||e.indexOf("@")>=0){var s=e.replace(/E\+?[@#0]+|[^@#0]/gi,"");t.minimumSignificantDigits=Math.min(Math.max(s.replace(/[^@0]/g,"").length,1),21),t.maximumSignificantDigits=Math.min(Math.max(s.length,1),21)}else{for(var i=e.replace(/[^#0.]/g,"").split("."),a=i[0],o=a.length-1;"0"===a[o];)--o;t.minimumIntegerDigits=Math.min(Math.max(a.length-1-o,1),21);var l=i[1]||"";for(o=0;"0"===l[o];)++o;for(t.minimumFractionDigits=Math.min(Math.max(o,0),20);"#"===l[o];)++o;t.maximumFractionDigits=Math.min(Math.max(o,0),20)}return t}},parseDatePattern:function(e){if(e){for(var t={},n=0;n<e.length;){for(var r=e[n],s=1;e[++n]===r;)++s;switch(r){case"G":t.era=5===s?Th:4===s?Bh:Rh;break;case"y":case"Y":t.year=2===s?Fh:Ih;break;case"M":case"L":s=Math.min(Math.max(s-1,0),4),t.month=[Ih,Fh,Rh,Bh,Th][s];break;case"E":case"e":case"c":t.weekday=5===s?Th:4===s?Bh:Rh;break;case"d":case"D":t.day=2===s?Fh:Ih;break;case"h":case"K":t.hour12=!0,t.hour=2===s?Fh:Ih;break;case"H":case"k":t.hour12=!1,t.hour=2===s?Fh:Ih;break;case"m":t.minute=2===s?Fh:Ih;break;case"s":case"S":t.second=2===s?Fh:Ih;break;case"z":case"Z":case"v":case"V":t.timeZoneName=1===s?Rh:Bh}}return Object.keys(t).length?t:void 0}}},Uh="zero",Dh="one",Mh="two",jh="few",Vh="many",Hh="other",$h=[function(e){return 1==+e?Dh:Hh},function(e){var t=+e;return 0<=t&&t<=1?Dh:Hh},function(e){return 0===Math.floor(Math.abs(+e))||1==+e?Dh:Hh},function(e){var t=+e;return 0===t?Uh:1===t?Dh:2===t?Mh:3<=t%100&&t%100<=10?jh:11<=t%100&&t%100<=99?Vh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 1===t&&0===n?Dh:Hh},function(e){var t=+e;return t%10==1&&t%100!=11?Dh:2<=t%10&&t%10<=4&&(t%100<12||14<t%100)?jh:t%10==0||5<=t%10&&t%10<=9||11<=t%100&&t%100<=14?Vh:Hh},function(e){var t=+e;return t%10==1&&t%100!=11&&t%100!=71&&t%100!=91?Dh:t%10==2&&t%100!=12&&t%100!=72&&t%100!=92?Mh:(3<=t%10&&t%10<=4||t%10==9)&&(t%100<10||19<t%100)&&(t%100<70||79<t%100)&&(t%100<90||99<t%100)?jh:0!==t&&t%1e6==0?Vh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+(e+".").split(".")[1];return 0===n&&t%10==1&&t%100!=11||r%10==1&&r%100!=11?Dh:0===n&&2<=t%10&&t%10<=4&&(t%100<12||14<t%100)||2<=r%10&&r%10<=4&&(r%100<12||14<r%100)?jh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 1===t&&0===n?Dh:2<=t&&t<=4&&0===n?jh:0!==n?Vh:Hh},function(e){var t=+e;return 0===t?Uh:1===t?Dh:2===t?Mh:3===t?jh:6===t?Vh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=+(""+e).replace(/^[^.]*.?|0+$/g,"");return 1==+e||0!==n&&(0===t||1===t)?Dh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+(e+".").split(".")[1];return 0===n&&t%100==1||r%100==1?Dh:0===n&&t%100==2||r%100==2?Mh:0===n&&3<=t%100&&t%100<=4||3<=r%100&&r%100<=4?jh:Hh},function(e){var t=Math.floor(Math.abs(+e));return 0===t||1===t?Dh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+(e+".").split(".")[1];return 0===n&&(1===t||2===t||3===t)||0===n&&t%10!=4&&t%10!=6&&t%10!=9||0!==n&&r%10!=4&&r%10!=6&&r%10!=9?Dh:Hh},function(e){var t=+e;return 1===t?Dh:2===t?Mh:3<=t&&t<=6?jh:7<=t&&t<=10?Vh:Hh},function(e){var t=+e;return 1===t||11===t?Dh:2===t||12===t?Mh:3<=t&&t<=10||13<=t&&t<=19?jh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 0===n&&t%10==1?Dh:0===n&&t%10==2?Mh:0!==n||t%100!=0&&t%100!=20&&t%100!=40&&t%100!=60&&t%100!=80?0!==n?Vh:Hh:jh},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+e;return 1===t&&0===n?Dh:2===t&&0===n?Mh:0===n&&(r<0||10<r)&&r%10==0?Vh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=+(""+e).replace(/^[^.]*.?|0+$/g,"");return 0===n&&t%10==1&&t%100!=11||0!==n?Dh:Hh},function(e){var t=+e;return 1===t?Dh:2===t?Mh:Hh},function(e){var t=+e;return 0===t?Uh:1===t?Dh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=+e;return 0===n?Uh:0!==t&&1!==t||0===n?Hh:Dh},function(e){var t=+(e+".").split(".")[1],n=+e;return n%10==1&&(n%100<11||19<n%100)?Dh:2<=n%10&&n%10<=9&&(n%100<11||19<n%100)?jh:0!==t?Vh:Hh},function(e){var t=(e+".").split(".")[1].length,n=+(e+".").split(".")[1],r=+e;return r%10==0||11<=r%100&&r%100<=19||2===t&&11<=n%100&&n%100<=19?Uh:r%10==1&&r%100!=11||2===t&&n%10==1&&n%100!=11||2!==t&&n%10==1?Dh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+(e+".").split(".")[1];return 0===n&&t%10==1&&t%100!=11||r%10==1&&r%100!=11?Dh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+e;return 1===t&&0===n?Dh:0!==n||0===r||1!==r&&1<=r%100&&r%100<=19?jh:Hh},function(e){var t=+e;return 1===t?Dh:0===t||2<=t%100&&t%100<=10?jh:11<=t%100&&t%100<=19?Vh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 1===t&&0===n?Dh:0===n&&2<=t%10&&t%10<=4&&(t%100<12||14<t%100)?jh:0===n&&1!==t&&0<=t%10&&t%10<=1||0===n&&5<=t%10&&t%10<=9||0===n&&12<=t%100&&t%100<=14?Vh:Hh},function(e){var t=Math.floor(Math.abs(+e));return 0<=t&&t<=1?Dh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 0===n&&t%10==1&&t%100!=11?Dh:0===n&&2<=t%10&&t%10<=4&&(t%100<12||14<t%100)?jh:0===n&&t%10==0||0===n&&5<=t%10&&t%10<=9||0===n&&11<=t%100&&t%100<=14?Vh:Hh},function(e){var t=+e;return 0===Math.floor(Math.abs(+e))||1===t?Dh:2<=t&&t<=10?jh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=+(e+".").split(".")[1],r=+e;return 0===r||1===r||0===t&&1===n?Dh:Hh},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 0===n&&t%100==1?Dh:0===n&&t%100==2?Mh:0===n&&3<=t%100&&t%100<=4||0!==n?jh:Hh},function(e){var t=+e;return 0<=t&&t<=1||11<=t&&t<=99?Dh:Hh},function(e){var t=+e;return 1===t||5===t||7===t||8===t||9===t||10===t?Dh:2===t||3===t?Mh:4===t?jh:6===t?Vh:Hh},function(e){var t=Math.floor(Math.abs(+e));return t%10==1||t%10==2||t%10==5||t%10==7||t%10==8||t%100==20||t%100==50||t%100==70||t%100==80?Dh:t%10==3||t%10==4||t%1e3==100||t%1e3==200||t%1e3==300||t%1e3==400||t%1e3==500||t%1e3==600||t%1e3==700||t%1e3==800||t%1e3==900?jh:0===t||t%10==6||t%100==40||t%100==60||t%100==90?Vh:Hh},function(e){var t=+e;return t%10!=2&&t%10!=3||t%100==12||t%100==13?Hh:jh},function(e){var t=+e;return 1===t||3===t?Dh:2===t?Mh:4===t?jh:Hh},function(e){var t=+e;return 0===t||7===t||8===t||9===t?Uh:1===t?Dh:2===t?Mh:3===t||4===t?jh:5===t||6===t?Vh:Hh},function(e){var t=+e;return t%10==1&&t%100!=11?Dh:t%10==2&&t%100!=12?Mh:t%10==3&&t%100!=13?jh:Hh},function(e){var t=+e;return 1===t?Dh:2===t||3===t?Mh:4===t?jh:6===t?Vh:Hh},function(e){var t=+e;return 1===t||5===t?Dh:Hh},function(e){var t=+e;return 11===t||8===t||80===t||800===t?Vh:Hh},function(e){var t=Math.floor(Math.abs(+e));return 1===t?Dh:0===t||2<=t%100&&t%100<=20||t%100==40||t%100==60||t%100==80?Vh:Hh},function(e){var t=+e;return t%10==6||t%10==9||t%10==0&&0!==t?Vh:Hh},function(e){var t=Math.floor(Math.abs(+e));return t%10==1&&t%100!=11?Dh:t%10==2&&t%100!=12?Mh:t%10!=7&&t%10!=8||t%100==17||t%100==18?Hh:Vh},function(e){var t=+e;return 1===t?Dh:2===t||3===t?Mh:4===t?jh:Hh},function(e){var t=+e;return 1<=t&&t<=4?Dh:Hh},function(e){var t=+e;return 1===t||5===t||7<=t&&t<=9?Dh:2===t||3===t?Mh:4===t?jh:6===t?Vh:Hh},function(e){var t=+e;return 1===t?Dh:t%10==4&&t%100!=14?Vh:Hh},function(e){var t=+e;return t%10!=1&&t%10!=2||t%100==11||t%100==12?Hh:Dh},function(e){var t=+e;return t%10==6||t%10==9||10===t?jh:Hh},function(e){var t=+e;return t%10==3&&t%100!=13?jh:Hh}],Gh={af:{cardinal:$h[0]},ak:{cardinal:$h[1]},am:{cardinal:$h[2]},ar:{cardinal:$h[3]},ars:{cardinal:$h[3]},as:{cardinal:$h[2],ordinal:$h[34]},asa:{cardinal:$h[0]},ast:{cardinal:$h[4]},az:{cardinal:$h[0],ordinal:$h[35]},be:{cardinal:$h[5],ordinal:$h[36]},bem:{cardinal:$h[0]},bez:{cardinal:$h[0]},bg:{cardinal:$h[0]},bh:{cardinal:$h[1]},bn:{cardinal:$h[2],ordinal:$h[34]},br:{cardinal:$h[6]},brx:{cardinal:$h[0]},bs:{cardinal:$h[7]},ca:{cardinal:$h[4],ordinal:$h[37]},ce:{cardinal:$h[0]},cgg:{cardinal:$h[0]},chr:{cardinal:$h[0]},ckb:{cardinal:$h[0]},cs:{cardinal:$h[8]},cy:{cardinal:$h[9],ordinal:$h[38]},da:{cardinal:$h[10]},de:{cardinal:$h[4]},dsb:{cardinal:$h[11]},dv:{cardinal:$h[0]},ee:{cardinal:$h[0]},el:{cardinal:$h[0]},en:{cardinal:$h[4],ordinal:$h[39]},eo:{cardinal:$h[0]},es:{cardinal:$h[0]},et:{cardinal:$h[4]},eu:{cardinal:$h[0]},fa:{cardinal:$h[2]},ff:{cardinal:$h[12]},fi:{cardinal:$h[4]},fil:{cardinal:$h[13],ordinal:$h[0]},fo:{cardinal:$h[0]},fr:{cardinal:$h[12],ordinal:$h[0]},fur:{cardinal:$h[0]},fy:{cardinal:$h[4]},ga:{cardinal:$h[14],ordinal:$h[0]},gd:{cardinal:$h[15]},gl:{cardinal:$h[4]},gsw:{cardinal:$h[0]},gu:{cardinal:$h[2],ordinal:$h[40]},guw:{cardinal:$h[1]},gv:{cardinal:$h[16]},ha:{cardinal:$h[0]},haw:{cardinal:$h[0]},he:{cardinal:$h[17]},hi:{cardinal:$h[2],ordinal:$h[40]},hr:{cardinal:$h[7]},hsb:{cardinal:$h[11]},hu:{cardinal:$h[0],ordinal:$h[41]},hy:{cardinal:$h[12],ordinal:$h[0]},io:{cardinal:$h[4]},is:{cardinal:$h[18]},it:{cardinal:$h[4],ordinal:$h[42]},iu:{cardinal:$h[19]},iw:{cardinal:$h[17]},jgo:{cardinal:$h[0]},ji:{cardinal:$h[4]},jmc:{cardinal:$h[0]},ka:{cardinal:$h[0],ordinal:$h[43]},kab:{cardinal:$h[12]},kaj:{cardinal:$h[0]},kcg:{cardinal:$h[0]},kk:{cardinal:$h[0],ordinal:$h[44]},kkj:{cardinal:$h[0]},kl:{cardinal:$h[0]},kn:{cardinal:$h[2]},ks:{cardinal:$h[0]},ksb:{cardinal:$h[0]},ksh:{cardinal:$h[20]},ku:{cardinal:$h[0]},kw:{cardinal:$h[19]},ky:{cardinal:$h[0]},lag:{cardinal:$h[21]},lb:{cardinal:$h[0]},lg:{cardinal:$h[0]},ln:{cardinal:$h[1]},lt:{cardinal:$h[22]},lv:{cardinal:$h[23]},mas:{cardinal:$h[0]},mg:{cardinal:$h[1]},mgo:{cardinal:$h[0]},mk:{cardinal:$h[24],ordinal:$h[45]},ml:{cardinal:$h[0]},mn:{cardinal:$h[0]},mo:{cardinal:$h[25],ordinal:$h[0]},mr:{cardinal:$h[2],ordinal:$h[46]},mt:{cardinal:$h[26]},nah:{cardinal:$h[0]},naq:{cardinal:$h[19]},nb:{cardinal:$h[0]},nd:{cardinal:$h[0]},ne:{cardinal:$h[0],ordinal:$h[47]},nl:{cardinal:$h[4]},nn:{cardinal:$h[0]},nnh:{cardinal:$h[0]},no:{cardinal:$h[0]},nr:{cardinal:$h[0]},nso:{cardinal:$h[1]},ny:{cardinal:$h[0]},nyn:{cardinal:$h[0]},om:{cardinal:$h[0]},or:{cardinal:$h[0],ordinal:$h[48]},os:{cardinal:$h[0]},pa:{cardinal:$h[1]},pap:{cardinal:$h[0]},pl:{cardinal:$h[27]},prg:{cardinal:$h[23]},ps:{cardinal:$h[0]},pt:{cardinal:$h[28]},"pt-PT":{cardinal:$h[4]},rm:{cardinal:$h[0]},ro:{cardinal:$h[25],ordinal:$h[0]},rof:{cardinal:$h[0]},ru:{cardinal:$h[29]},rwk:{cardinal:$h[0]},saq:{cardinal:$h[0]},scn:{cardinal:$h[4],ordinal:$h[42]},sd:{cardinal:$h[0]},sdh:{cardinal:$h[0]},se:{cardinal:$h[19]},seh:{cardinal:$h[0]},sh:{cardinal:$h[7]},shi:{cardinal:$h[30]},si:{cardinal:$h[31]},sk:{cardinal:$h[8]},sl:{cardinal:$h[32]},sma:{cardinal:$h[19]},smi:{cardinal:$h[19]},smj:{cardinal:$h[19]},smn:{cardinal:$h[19]},sms:{cardinal:$h[19]},sn:{cardinal:$h[0]},so:{cardinal:$h[0]},sq:{cardinal:$h[0],ordinal:$h[49]},sr:{cardinal:$h[7]},ss:{cardinal:$h[0]},ssy:{cardinal:$h[0]},st:{cardinal:$h[0]},sv:{cardinal:$h[4],ordinal:$h[50]},sw:{cardinal:$h[4]},syr:{cardinal:$h[0]},ta:{cardinal:$h[0]},te:{cardinal:$h[0]},teo:{cardinal:$h[0]},ti:{cardinal:$h[1]},tig:{cardinal:$h[0]},tk:{cardinal:$h[0],ordinal:$h[51]},tl:{cardinal:$h[13],ordinal:$h[0]},tn:{cardinal:$h[0]},tr:{cardinal:$h[0]},ts:{cardinal:$h[0]},tzm:{cardinal:$h[33]},ug:{cardinal:$h[0]},uk:{cardinal:$h[29],ordinal:$h[52]},ur:{cardinal:$h[4]},uz:{cardinal:$h[0]},ve:{cardinal:$h[0]},vo:{cardinal:$h[0]},vun:{cardinal:$h[0]},wa:{cardinal:$h[1]},wae:{cardinal:$h[0]},xh:{cardinal:$h[0]},xog:{cardinal:$h[0]},yi:{cardinal:$h[4]},zu:{cardinal:$h[2]},lo:{ordinal:$h[0]},ms:{ordinal:$h[0]},vi:{ordinal:$h[0]}},zh=Oh((function(e,t){function n(e,t,s,i,a){var o=e.map((function(e){return function(e,t,s,i,a){if("string"==typeof e){var o=e;return function(){return o}}var c,u=e[0],h=e[1];if(t&&"#"===e[0]){u=t[0];var d=t[2],p=(i.number||l.number)([u,"number"],s);return function(e){return p(r(u,e)-d,e)}}"plural"===h||"selectordinal"===h?(c={},Object.keys(e[3]).forEach((function(t){c[t]=n(e[3][t],e,s,i,a)})),e=[e[0],e[1],e[2],c]):e[2]&&"object"==typeof e[2]&&(c={},Object.keys(e[2]).forEach((function(t){c[t]=n(e[2][t],e,s,i,a)})),e=[e[0],e[1],c]);var f=h&&(i[h]||l[h]);if(f){var g=f(e,s);return function(e){return g(r(u,e),e)}}return a?function(e){return String(r(u,e))}:function(e){return r(u,e)}}(e,t,s,i,a)}));return a?1===o.length?o[0]:function(e){for(var t="",n=0;n<o.length;++n)t+=o[n](e);return t}:function(e){return o.reduce((function(t,n){return t.concat(n(e))}),[])}}function r(e,t){if(t&&e in t)return t[e];for(var n=e.split("."),r=t,s=0,i=n.length;r&&s<i;++s)r=r[n[s]];return r}function s(e,t){var n=e[2],r=Lh.number[n]||Lh.parseNumberPattern(n)||Lh.number.default;return new Intl.NumberFormat(t,r).format}function i(e,t){var n=e[1],r=e[2],s=Lh[n][r]||Lh.parseDatePattern(r)||Lh[n].default;return new Intl.DateTimeFormat(t,s).format}function a(e,t){var n,r="selectordinal"===e[1]?"ordinal":"cardinal",s=e[2],i=e[3];if(Intl.PluralRules&&Intl.PluralRules.supportedLocalesOf(t).length>0)n=new Intl.PluralRules(t,{type:r});else{var a=function(e,t){if("string"==typeof e&&t[e])return e;for(var n=[].concat(e||[]),r=0,s=n.length;r<s;++r)for(var i=n[r].split("-");i.length;){var a=i.join("-");if(t[a])return a;i.pop()}}(t,Gh),l=a&&Gh[a][r]||o;n={select:l}}return function(e,t){return(i["="+ +e]||i[n.select(e-s)]||i.other)(t)}}function o(){return"other"}(t=e.exports=function(e,t,r){return n(e,null,t||"en",r||{},!0)}).toParts=function(e,t,r){return n(e,null,t||"en",r||{},!1)};var l={number:s,ordinal:s,spellout:s,duration:function(e,t){var n=e[2],r=Lh.duration[n]||Lh.duration.default,s=new Intl.NumberFormat(t,r.seconds).format,i=new Intl.NumberFormat(t,r.minutes).format,a=new Intl.NumberFormat(t,r.hours).format,o=/^fi$|^fi-|^da/.test(String(t))?".":":";return function(e,t){if(e=+e,!isFinite(e))return s(e);var n=~~(e/60/60),r=~~(e/60%60),l=(n?a(Math.abs(n))+o:"")+i(Math.abs(r))+o+s(Math.abs(e%60));return e<0?a(-1).replace(a(1),l):l}},date:i,time:i,plural:a,selectordinal:a,select:function(e,t){var n=e[2];return function(e,t){return(n[e]||n.other)(t)}}};t.types=l})),qh=(zh.toParts,zh.types,Oh((function(e,t){var n="{",r="}",s=",",i="#",a="<",o=">",l="</",c="/>",u="'",h="offset:",d=["number","date","time","ordinal","duration","spellout"],p=["plural","select","selectordinal"];function f(e,t){var n=e.pattern,s=n.length,i=[],a=e.index,o=g(e,t);for(o&&i.push(o),o&&e.tokens&&e.tokens.push(["text",n.slice(a,e.index)]);e.index<s;){if(n[e.index]===r){if(!t)throw E(e);break}if(t&&e.tagsType&&n.slice(e.index,e.index+l.length)===l)break;i.push(b(e)),a=e.index,(o=g(e,t))&&i.push(o),o&&e.tokens&&e.tokens.push(["text",n.slice(a,e.index)])}return i}function g(e,t){for(var s=e.pattern,o=s.length,l="plural"===t||"selectordinal"===t,c=!!e.tagsType,h="{style}"===t,d="";e.index<o;){var p=s[e.index];if(p===n||p===r||l&&p===i||c&&p===a||h&&m(p.charCodeAt(0)))break;if(p===u)if((p=s[++e.index])===u)d+=p,++e.index;else if(p===n||p===r||l&&p===i||c&&p===a||h)for(d+=p;++e.index<o;)if((p=s[e.index])===u&&s[e.index+1]===u)d+=u,++e.index;else{if(p===u){++e.index;break}d+=p}else d+=u;else d+=p,++e.index}return d}function m(e){return e>=9&&e<=13||32===e||133===e||160===e||6158===e||e>=8192&&e<=8205||8232===e||8233===e||8239===e||8287===e||8288===e||12288===e||65279===e}function y(e){for(var t=e.pattern,n=t.length,r=e.index;e.index<n&&m(t.charCodeAt(e.index));)++e.index;r<e.index&&e.tokens&&e.tokens.push(["space",e.pattern.slice(r,e.index)])}function b(e){var t=e.pattern;if(t[e.index]===i)return e.tokens&&e.tokens.push(["syntax",i]),++e.index,[i];var u=function(e){var t=e.tagsType;if(t&&e.pattern[e.index]===a){if(e.pattern.slice(e.index,e.index+l.length)===l)throw E(e,null,"closing tag without matching opening tag");e.tokens&&e.tokens.push(["syntax",a]),++e.index;var n=v(e,!0);if(!n)throw E(e,"placeholder id");if(e.tokens&&e.tokens.push(["id",n]),y(e),e.pattern.slice(e.index,e.index+c.length)===c)return e.tokens&&e.tokens.push(["syntax",c]),e.index+=c.length,[n,t];if(e.pattern[e.index]!==o)throw E(e,o);e.tokens&&e.tokens.push(["syntax",o]),++e.index;var r=f(e,t),s=e.index;if(e.pattern.slice(e.index,e.index+l.length)!==l)throw E(e,l+n+o);e.tokens&&e.tokens.push(["syntax",l]),e.index+=l.length;var i=v(e,!0);if(i&&e.tokens&&e.tokens.push(["id",i]),n!==i)throw e.index=s,E(e,l+n+o,l+i+o);if(y(e),e.pattern[e.index]!==o)throw E(e,o);return e.tokens&&e.tokens.push(["syntax",o]),++e.index,[n,t,{children:r}]}}(e);if(u)return u;if(t[e.index]!==n)throw E(e,n);e.tokens&&e.tokens.push(["syntax",n]),++e.index,y(e);var p=v(e);if(!p)throw E(e,"placeholder id");e.tokens&&e.tokens.push(["id",p]),y(e);var g=t[e.index];if(g===r)return e.tokens&&e.tokens.push(["syntax",r]),++e.index,[p];if(g!==s)throw E(e,s+" or "+r);e.tokens&&e.tokens.push(["syntax",s]),++e.index,y(e);var m,b=v(e);if(!b)throw E(e,"placeholder type");if(e.tokens&&e.tokens.push(["type",b]),y(e),(g=t[e.index])===r){if(e.tokens&&e.tokens.push(["syntax",r]),"plural"===b||"selectordinal"===b||"select"===b)throw E(e,b+" sub-messages");return++e.index,[p,b]}if(g!==s)throw E(e,s+" or "+r);if(e.tokens&&e.tokens.push(["syntax",s]),++e.index,y(e),"plural"===b||"selectordinal"===b){var _=function(e){var t,n=e.pattern,r=n.length,s=0;if(n.slice(e.index,e.index+h.length)===h){e.tokens&&e.tokens.push(["offset","offset"],["syntax",":"]),e.index+=h.length,y(e);for(var i=e.index;e.index<r&&((t=n.charCodeAt(e.index))>=48&&t<=57);)++e.index;if(i===e.index)throw E(e,"offset number");e.tokens&&e.tokens.push(["number",n.slice(i,e.index)]),s=+n.slice(i,e.index)}return s}(e);y(e),m=[p,b,_,A(e,b)]}else if("select"===b)m=[p,b,A(e,b)];else if(d.indexOf(b)>=0)m=[p,b,w(e)];else{var k=e.index,x=w(e);y(e),t[e.index]===n&&(e.index=k,x=A(e,b)),m=[p,b,x]}if(y(e),t[e.index]!==r)throw E(e,r);return e.tokens&&e.tokens.push(["syntax",r]),++e.index,m}function v(e,t){for(var l=e.pattern,c=l.length,h="";e.index<c;){var d=l[e.index];if(d===n||d===r||d===s||d===i||d===u||m(d.charCodeAt(0))||t&&(d===a||d===o||"/"===d))break;h+=d,++e.index}return h}function w(e){var t=e.index,n=g(e,"{style}");if(!n)throw E(e,"placeholder style name");return e.tokens&&e.tokens.push(["style",e.pattern.slice(t,e.index)]),n}function A(e,t){for(var n=e.pattern,s=n.length,i={};e.index<s&&n[e.index]!==r;){var a=v(e);if(!a)throw E(e,"sub-message selector");e.tokens&&e.tokens.push(["selector",a]),y(e),i[a]=_(e,t),y(e)}if(!i.other&&p.indexOf(t)>=0)throw E(e,null,null,'"other" sub-message must be specified in '+t);return i}function _(e,t){if(e.pattern[e.index]!==n)throw E(e,n+" to start sub-message");e.tokens&&e.tokens.push(["syntax",n]),++e.index;var s=f(e,t);if(e.pattern[e.index]!==r)throw E(e,r+" to end sub-message");return e.tokens&&e.tokens.push(["syntax",r]),++e.index,s}function E(e,t,n,r){var s=e.pattern,i=s.slice(0,e.index).split(/\r?\n/),a=e.index,o=i.length,l=i.slice(-1)[0].length;return n=n||(e.index>=s.length?"end of message pattern":v(e)||s[e.index]),r||(r=function(e,t){return e?"Expected "+e+" but found "+t:"Unexpected "+t+" found"}(t,n)),new k(r+=" in "+s.replace(/\r?\n/g,"\n"),t,n,a,o,l)}function k(e,t,n,r,s,i){Error.call(this,e),this.name="SyntaxError",this.message=e,this.expected=t,this.found=n,this.offset=r,this.line=s,this.column=i}t=e.exports=function(e,t){return f({pattern:String(e),index:0,tagsType:t&&t.tagsType||null,tokens:t&&t.tokens||null},"")},k.prototype=Object.create(Error.prototype),t.SyntaxError=k}))),Qh=(qh.SyntaxError,new RegExp("^("+Object.keys(Gh).join("|")+")\\b")),Jh=new WeakMap;function Kh(e,t,n){if(!(this instanceof Kh)||Jh.has(this))throw new TypeError("calling MessageFormat constructor without new is invalid");var r=qh(e);Jh.set(this,{ast:r,format:zh(r,t,n&&n.types),locale:Kh.supportedLocalesOf(t)[0]||"en",locales:t,options:n})}var Wh=Kh;Object.defineProperties(Kh.prototype,{format:{configurable:!0,get:function(){var e=Jh.get(this);if(!e)throw new TypeError("MessageFormat.prototype.format called on value that's not an object initialized as a MessageFormat");return e.format}},formatToParts:{configurable:!0,writable:!0,value:function(e){var t=Jh.get(this);if(!t)throw new TypeError("MessageFormat.prototype.formatToParts called on value that's not an object initialized as a MessageFormat");return(t.toParts||(t.toParts=zh.toParts(t.ast,t.locales,t.options&&t.options.types)))(e)}},resolvedOptions:{configurable:!0,writable:!0,value:function(){var e=Jh.get(this);if(!e)throw new TypeError("MessageFormat.prototype.resolvedOptions called on value that's not an object initialized as a MessageFormat");return{locale:e.locale}}}}),"undefined"!=typeof Symbol&&Object.defineProperty(Kh.prototype,Symbol.toStringTag,{value:"Object"}),Object.defineProperties(Kh,{supportedLocalesOf:{configurable:!0,writable:!0,value:function(e){return[].concat(Intl.NumberFormat.supportedLocalesOf(e),Intl.DateTimeFormat.supportedLocalesOf(e),Intl.PluralRules?Intl.PluralRules.supportedLocalesOf(e):[],[].concat(e||[]).filter((function(e){return Qh.test(e)}))).filter((function(e,t,n){return n.indexOf(e)===t}))}}});const Yh=Wh;let Zh=Sh.get("@lion/localize::localize::0.10.x")||new class{constructor({autoLoadOnLocaleChange:e=!1,fallbackLocale:t="",showKeyAsFallback:n=!1}={}){this.__delegationTarget=document.createDocumentFragment(),this._autoLoadOnLocaleChange=!!e,this._fallbackLocale=t,this._showKeyAsFallback=n,this.__storage={},this.__namespacePatternsMap=new Map,this.__namespaceLoadersCache={},this.__namespaceLoaderPromisesCache={},this.formatNumberOptions={returnIfNaN:"",postProcessors:new Map},this.formatDateOptions={postProcessors:new Map};const r=document.documentElement.getAttribute("data-localize-lang");this._supportExternalTranslationTools=Boolean(r),this._supportExternalTranslationTools&&(this.locale=r||"en-GB",this._setupTranslationToolSupport()),document.documentElement.lang||(document.documentElement.lang=this.locale||"en-GB"),this._setupHtmlLangAttributeObserver()}_setupTranslationToolSupport(){this._langAttrSetByTranslationTool=document.documentElement.lang||null}teardown(){this._teardownHtmlLangAttributeObserver()}get locale(){return this._supportExternalTranslationTools?this.__locale||"":document.documentElement.lang}set locale(e){let t;this._supportExternalTranslationTools?(t=this.__locale,this.__locale=e,null===this._langAttrSetByTranslationTool&&this._setHtmlLangAttribute(e)):(t=document.documentElement.lang,this._setHtmlLangAttribute(e)),e.includes("-")||this.__handleLanguageOnly(e),this._onLocaleChanged(e,t)}_setHtmlLangAttribute(e){this._teardownHtmlLangAttributeObserver(),document.documentElement.lang=e,this._setupHtmlLangAttributeObserver()}__handleLanguageOnly(e){throw new Error(`\n      Locale was set to ${e}.\n      Language only locales are not allowed, please use the full language locale e.g. 'en-GB' instead of 'en'.\n      See https://github.com/ing-bank/lion/issues/187 for more information.\n    `)}get loadingComplete(){return"object"==typeof this.__namespaceLoaderPromisesCache[this.locale]?Promise.all(Object.values(this.__namespaceLoaderPromisesCache[this.locale])):Promise.resolve()}reset(){this.__storage={},this.__namespacePatternsMap=new Map,this.__namespaceLoadersCache={},this.__namespaceLoaderPromisesCache={}}addData(e,t,n){if(this._isNamespaceInCache(e,t))throw new Error(`Namespace "${t}" has been already added for the locale "${e}".`);this.__storage[e]=this.__storage[e]||{},this.__storage[e][t]=n}setupNamespaceLoader(e,t){this.__namespacePatternsMap.set(e,t)}loadNamespaces(e,{locale:t}={}){return Promise.all(e.map((e=>this.loadNamespace(e,{locale:t}))))}loadNamespace(e,{locale:t=this.locale}={locale:this.locale}){const n="object"==typeof e,r=n?Object.keys(e)[0]:e;if(this._isNamespaceInCache(t,r))return Promise.resolve();return this._getCachedNamespaceLoaderPromise(t,r)||this._loadNamespaceData(t,e,n,r)}msg(e,t,n={}){const r=n.locale?n.locale:this.locale,s=this._getMessageForKeys(e,r);return s?new Yh(s,r).format(t):""}_setupHtmlLangAttributeObserver(){this._htmlLangAttributeObserver||(this._htmlLangAttributeObserver=new MutationObserver((e=>{e.forEach((e=>{this._supportExternalTranslationTools?"auto"===document.documentElement.lang?(this._langAttrSetByTranslationTool=null,this._setHtmlLangAttribute(this.locale)):this._langAttrSetByTranslationTool=document.documentElement.lang:this._onLocaleChanged(document.documentElement.lang,e.oldValue||"")}))}))),this._htmlLangAttributeObserver.observe(document.documentElement,{attributes:!0,attributeFilter:["lang"],attributeOldValue:!0})}_teardownHtmlLangAttributeObserver(){this._htmlLangAttributeObserver&&this._htmlLangAttributeObserver.disconnect()}_isNamespaceInCache(e,t){return!(!this.__storage[e]||!this.__storage[e][t])}_getCachedNamespaceLoaderPromise(e,t){return this.__namespaceLoaderPromisesCache[e]?this.__namespaceLoaderPromisesCache[e][t]:null}_loadNamespaceData(e,t,n,r){const s=this._getNamespaceLoader(t,n,r),i=this._getNamespaceLoaderPromise(s,e,r);return this._cacheNamespaceLoaderPromise(e,r,i),i.then((t=>{if(this.__namespaceLoaderPromisesCache[e]&&this.__namespaceLoaderPromisesCache[e][r]===i){const n=function(e){return!(!e||!e.default||"object"!=typeof e.default||1!==Object.keys(e).length)}(t)?t.default:t;this.addData(e,r,n)}}))}_getNamespaceLoader(e,t,n){let r=this.__namespaceLoadersCache[n];if(r||(t?(r=e[n],this.__namespaceLoadersCache[n]=r):(r=this._lookupNamespaceLoader(n),this.__namespaceLoadersCache[n]=r)),!r)throw new Error(`Namespace "${n}" was not properly setup.`);return this.__namespaceLoadersCache[n]=r,r}_getNamespaceLoaderPromise(e,t,n,r=this._fallbackLocale){return e(t,n).catch((()=>{const s=this._getLangFromLocale(t);return e(s,n).catch((()=>{if(r)return this._getNamespaceLoaderPromise(e,r,n,"").catch((()=>{const e=this._getLangFromLocale(r);throw new Error(`Data for namespace "${n}" and current locale "${t}" or fallback locale "${r}" could not be loaded. Make sure you have data either for locale "${t}" (and/or generic language "${s}") or for fallback "${r}" (and/or "${e}").`)}));throw new Error(`Data for namespace "${n}" and locale "${t}" could not be loaded. Make sure you have data for locale "${t}" (and/or generic language "${s}").`)}))}))}_cacheNamespaceLoaderPromise(e,t,n){this.__namespaceLoaderPromisesCache[e]||(this.__namespaceLoaderPromisesCache[e]={}),this.__namespaceLoaderPromisesCache[e][t]=n}_lookupNamespaceLoader(e){for(const[t,n]of this.__namespacePatternsMap){const r="string"==typeof t&&t===e,s="object"==typeof t&&"RegExp"===t.constructor.name&&t.test(e);if(r||s)return n}return null}_getLangFromLocale(e){return e.substring(0,2)}addEventListener(e,t,...n){this.__delegationTarget.addEventListener(e,t,...n)}removeEventListener(e,t,...n){this.__delegationTarget.removeEventListener(e,t,...n)}dispatchEvent(e){this.__delegationTarget.dispatchEvent(e)}_onLocaleChanged(e,t){this.dispatchEvent(new CustomEvent("__localeChanging")),e!==t&&(this._autoLoadOnLocaleChange?(this._loadAllMissing(e,t),this.loadingComplete.then((()=>{this.dispatchEvent(new CustomEvent("localeChanged",{detail:{newLocale:e,oldLocale:t}}))}))):this.dispatchEvent(new CustomEvent("localeChanged",{detail:{newLocale:e,oldLocale:t}})))}_loadAllMissing(e,t){const n=this.__storage[t]||{},r=this.__storage[e]||{};Object.keys(n).forEach((t=>{r[t]||this.loadNamespace(t,{locale:e})}))}_getMessageForKeys(e,t){if("string"==typeof e)return this._getMessageForKey(e,t);const n=Array.from(e).reverse();let r,s;for(;n.length;)if(r=n.pop(),s=this._getMessageForKey(r,t),s)return s}_getMessageForKey(e,t){if(!e||-1===e.indexOf(":"))throw new Error(`Namespace is missing in the key "${e}". The format for keys is "namespace:name".`);const[n,r]=e.split(":"),s=this.__storage[t],i=s?s[n]:{},a=r.split(".").reduce(((e,t)=>"object"==typeof e?e[t]:e),i);return String(a||(this._showKeyAsFallback?e:""))}setDatePostProcessorForLocale({locale:e,postProcessor:t}){this.formatDateOptions.postProcessors.set(e,t)}setNumberPostProcessorForLocale({locale:e,postProcessor:t}){this.formatNumberOptions.postProcessors.set(e,t)}}({autoLoadOnLocaleChange:!0,fallbackLocale:"en-GB"});class Xh{constructor(){this.__running=!1,this.__queue=[]}add(e){this.__queue.push(e),this.__running||(this.complete=new Promise((e=>{this.__callComplete=e})),this.__run())}async __run(){this.__running=!0,await this.__queue[0](),this.__queue.shift(),this.__queue.length>0?this.__run():(this.__running=!1,this.__callComplete&&this.__callComplete())}}const ed=Re((e=>class extends e{constructor(){super(),this.__SyncUpdatableNamespace={}}firstUpdated(e){super.firstUpdated(e),this.__syncUpdatableInitialize()}connectedCallback(){super.connectedCallback(),this.__SyncUpdatableNamespace.connected=!0}disconnectedCallback(){super.disconnectedCallback(),this.__SyncUpdatableNamespace.connected=!1}static __syncUpdatableHasChanged(e,t,n){const r=this.elementProperties;return r.get(e)&&r.get(e).hasChanged?r.get(e).hasChanged(t,n):t!==n}__syncUpdatableInitialize(){const e=this.__SyncUpdatableNamespace,t=this.constructor;e.initialized=!0,e.queue&&Array.from(e.queue).forEach((e=>{t.__syncUpdatableHasChanged(e,this[e],void 0)&&this.updateSync(e,void 0)}))}requestUpdate(e,t){super.requestUpdate(e,t),this.__SyncUpdatableNamespace=this.__SyncUpdatableNamespace||{};const n=this.__SyncUpdatableNamespace,r=this.constructor;n.initialized?r.__syncUpdatableHasChanged(e,this[e],t)&&this.updateSync(e,t):(n.queue=n.queue||new Set,n.queue.add(e))}updateSync(e,t){}}));class td extends le{static get properties(){return{feedbackData:{attribute:!1}}}_messageTemplate({message:e}){return e}updated(e){super.updated(e),this.feedbackData&&this.feedbackData[0]?(this.setAttribute("type",this.feedbackData[0].type),this.currentType=this.feedbackData[0].type,window.clearTimeout(this.removeMessage),"success"===this.currentType&&(this.removeMessage=window.setTimeout((()=>{this.removeAttribute("type"),this.feedbackData=[]}),3e3))):"success"!==this.currentType&&this.removeAttribute("type")}render(){return V`
      ${this.feedbackData&&this.feedbackData.map((({message:e,type:t,validator:n})=>V`
          ${this._messageTemplate({message:e,type:t,validator:n})}
        `))}
    `}}class nd extends EventTarget{constructor(e,t){super(),this.__param=e,this.__config=t||{},this.type=t?.type||"error"}static validatorName="";static async=!1;execute(e,t,n){if(!this.constructor.validatorName)throw new Error("A validator needs to have a name! Please set it via \"static get validatorName() { return 'IsCat'; }\"");return!0}set param(e){this.__param=e,this.dispatchEvent(new Event("param-changed"))}get param(){return this.__param}set config(e){this.__config=e,this.dispatchEvent(new Event("config-changed"))}get config(){return this.__config}async _getMessage(e){const t=this.constructor,n={name:t.validatorName,type:this.type,params:this.param,config:this.config,...e};if(this.config.getMessage){if("function"==typeof this.config.getMessage)return this.config.getMessage(n);throw new Error("You must provide a value for getMessage of type 'function', you provided a value of type: "+typeof this.config.getMessage)}return t.getMessage(n)}static async getMessage(e){return`Please configure an error message for "${this.name}" by overriding "static async getMessage()"`}onFormControlConnect(e){}onFormControlDisconnect(e){}abortExecution(){}}class rd extends nd{executeOnResults({regularValidationResult:e,prevValidationResult:t,prevShownValidationResult:n,validators:r}){return!0}}class sd extends nd{static get validatorName(){return"Required"}static get _compatibleRoles(){return["combobox","gridcell","input","listbox","radiogroup","select","spinbutton","textarea","textbox","tree"]}static get _compatibleTags(){return["input","select","textarea"]}onFormControlConnect({_inputNode:e}){if(e){const t=e.getAttribute("role")||"",n=e.tagName.toLowerCase(),r=this.constructor;(r._compatibleRoles.includes(t)||r._compatibleTags.includes(n))&&e.setAttribute("aria-required","true")}}onFormControlDisconnect({_inputNode:e}){e&&e.removeAttribute("aria-required")}}function id(e=[],t=[]){return e.filter((e=>!t.includes(e))).concat(t.filter((t=>!e.includes(t))))}const ad=Re((e=>class extends(Eh(ed(Te(bh(Nh(e)))))){static get scopedElements(){return{...super.constructor.scopedElements,"lion-validation-feedback":td}}static get properties(){return{validators:{attribute:!1},hasFeedbackFor:{attribute:!1},shouldShowFeedbackFor:{attribute:!1},showsFeedbackFor:{type:Array,attribute:"shows-feedback-for",reflect:!0,converter:{fromAttribute:e=>e.split(","),toAttribute:e=>e.join(",")}},validationStates:{attribute:!1},isPending:{type:Boolean,attribute:"is-pending",reflect:!0},defaultValidators:{attribute:!1},_visibleMessagesAmount:{attribute:!1},__childModelValueChanged:{attribute:!1}}}static get validationTypes(){return["error"]}get slots(){return{...super.slots,feedback:()=>{const e=this.createScopedElement("lion-validation-feedback");return e.setAttribute("data-tag-name","lion-validation-feedback"),e}}}get _allValidators(){return[...this.validators,...this.defaultValidators]}constructor(){super(),this.hasFeedbackFor=[],this.showsFeedbackFor=[],this.shouldShowFeedbackFor=[],this.validationStates={},this.isPending=!1,this.validators=[],this.defaultValidators=[],this._visibleMessagesAmount=1,this.__syncValidationResult=[],this.__asyncValidationResult=[],this.__validationResult=[],this.__prevValidationResult=[],this.__prevShownValidationResult=[],this.__childModelValueChanged=!1,this._onValidatorUpdated=this._onValidatorUpdated.bind(this),this._updateFeedbackComponent=this._updateFeedbackComponent.bind(this)}connectedCallback(){super.connectedCallback(),Zh.addEventListener("localeChanged",this._updateFeedbackComponent)}disconnectedCallback(){super.disconnectedCallback(),Zh.removeEventListener("localeChanged",this._updateFeedbackComponent)}firstUpdated(e){super.firstUpdated(e),this.__validateInitialized=!0,this.validate(),"child"!==this._repropagationRole&&this.addEventListener("model-value-changed",(()=>{this.__childModelValueChanged=!0}))}updateSync(e,t){if(super.updateSync(e,t),"validators"===e?(this.__setupValidators(),this.validate({clearCurrentResult:!0})):"modelValue"===e&&this.validate({clearCurrentResult:!0}),["touched","dirty","prefilled","focused","submitted","hasFeedbackFor","filled"].includes(e)&&this._updateShouldShowFeedbackFor(),"showsFeedbackFor"===e){this._inputNode&&this._inputNode.setAttribute("aria-invalid",`${this._hasFeedbackVisibleFor("error")}`);const e=id(this.showsFeedbackFor,t);e.length>0&&this.dispatchEvent(new Event("showsFeedbackForChanged",{bubbles:!0})),e.forEach((e=>{var t;this.dispatchEvent(new Event(`showsFeedbackFor${t=e,t.charAt(0).toUpperCase()+t.slice(1)}Changed`,{bubbles:!0}))}))}"shouldShowFeedbackFor"===e&&id(this.shouldShowFeedbackFor,t).length>0&&this.dispatchEvent(new Event("shouldShowFeedbackForChanged",{bubbles:!0}))}async validate({clearCurrentResult:e}={}){if(this.disabled)return this.__clearValidationResults(),this.__finishValidation({source:"sync",hasAsync:!0}),void this._updateFeedbackComponent();this.__validateInitialized&&(this.__prevValidationResult=this.__validationResult,e&&this.__clearValidationResults(),await this.__executeValidators())}async __executeValidators(){this.validateComplete=new Promise((e=>{this.__validateCompleteResolve=e}));const e=this.modelValue instanceof Ah?this.modelValue.viewValue:this.modelValue,t=this._allValidators.find((e=>e instanceof sd));if(this.__isEmpty(e))return t&&(this.__syncValidationResult=[{validator:t,outcome:!0}]),void this.__finishValidation({source:"sync"});const n=this._allValidators.filter((e=>!(e instanceof rd||e instanceof sd))),r=n.filter((e=>!e.constructor.async)),s=n.filter((e=>e.constructor.async));this.__executeSyncValidators(r,e,{hasAsync:Boolean(s.length)}),await this.__executeAsyncValidators(s,e)}__executeSyncValidators(e,t,{hasAsync:n}){e.length&&(this.__syncValidationResult=e.map((e=>({validator:e,outcome:e.execute(t,e.param,{node:this})}))).filter((e=>Boolean(e.outcome)))),this.__finishValidation({source:"sync",hasAsync:n})}async __executeAsyncValidators(e,t){if(e.length){this.isPending=!0;const n=e.map((e=>e.execute(t,e.param,{node:this}))),r=await Promise.all(n);this.__asyncValidationResult=r.map(((t,n)=>({validator:e[n],outcome:r[n]}))).filter((e=>Boolean(e.outcome))),this.__finishValidation({source:"async"}),this.isPending=!1}}__executeResultValidators(e){const t=this._allValidators.filter((e=>!e.constructor.async&&e instanceof rd));return t.length?this._isEmpty(this.modelValue)?(this.__prevShownValidationResult=[],[]):t.map((t=>({validator:t,outcome:t.executeOnResults({regularValidationResult:e.map((e=>e.validator)),prevValidationResult:this.__prevValidationResult.map((e=>e.validator)),prevShownValidationResult:this.__prevShownValidationResult.map((e=>e.validator))})}))).filter((e=>Boolean(e.outcome))):[]}__finishValidation({source:e,hasAsync:t}){const n=[...this.__syncValidationResult,...this.__asyncValidationResult],r=this.__executeResultValidators(n);this.__validationResult=[...r,...n];const s=this.constructor.validationTypes.reduce(((e,t)=>({...e,[t]:{}})),{});this.__validationResult.forEach((({validator:e,outcome:t})=>{s[e.type]||(s[e.type]={});const n=e.constructor;s[e.type][n.validatorName]=t})),this.validationStates=s,this.hasFeedbackFor=[...new Set(this.__validationResult.map((({validator:e})=>e.type)))],this.dispatchEvent(new Event("validate-performed",{bubbles:!0})),"async"!==e&&t||this.__validateCompleteResolve&&this.__validateCompleteResolve(!0)}__clearValidationResults(){this.__syncValidationResult=[],this.__asyncValidationResult=[]}_onValidatorUpdated(e){"param-changed"!==e.type&&"config-changed"!==e.type||this.validate()}__setupValidators(){const e=["param-changed","config-changed"];this.__prevValidators&&this.__prevValidators.forEach((t=>{e.forEach((e=>{t.removeEventListener&&t.removeEventListener(e,this._onValidatorUpdated)})),t.onFormControlDisconnect(this)})),this._allValidators.forEach((t=>{if(!(t instanceof nd)){const e=`Validators array only accepts class instances of Validator. Type "${Array.isArray(t)?"array":typeof t}" found. This may be caused by having multiple installations of @lion/form-core.`;throw console.error(e,this),new Error(e)}if(-1===this.constructor.validationTypes.indexOf(t.type)){const e=t.constructor,n=`This component does not support the validator type "${t.type}" used in "${e.validatorName}". You may change your validators type or add it to the components "static get validationTypes() {}".`;throw console.error(n,this),new Error(n)}e.forEach((e=>{t.addEventListener&&t.addEventListener(e,(e=>{this._onValidatorUpdated(e,{validator:t})}))})),t.onFormControlConnect(this)})),this.__prevValidators=this._allValidators}__isEmpty(e){return"function"==typeof this._isEmpty?this._isEmpty(e):null===this.modelValue||void 0===this.modelValue||""===this.modelValue}async __getFeedbackMessages(e){let t=await this.fieldName;return Promise.all(e.map((async({validator:e,outcome:n})=>(e.config.fieldName&&(t=await e.config.fieldName),{message:await e._getMessage({modelValue:this.modelValue,formControl:this,fieldName:t,outcome:n}),type:e.type,validator:e}))))}_updateFeedbackComponent(){const{_feedbackNode:e}=this;e&&(this.__feedbackQueue||(this.__feedbackQueue=new Xh),this.showsFeedbackFor.length>0?this.__feedbackQueue.add((async()=>{const t=this._prioritizeAndFilterFeedback({validationResult:this.__validationResult.map((e=>e.validator))});this.__prioritizedResult=t.map((e=>{const t=this.__validationResult.find((t=>e===t.validator));return t})).filter(Boolean),this.__prioritizedResult.length>0&&(this.__prevShownValidationResult=this.__prioritizedResult);const n=await this.__getFeedbackMessages(this.__prioritizedResult);e.feedbackData=n.length?n:[]})):this.__feedbackQueue.add((async()=>{e.feedbackData=[]})),this.feedbackComplete=this.__feedbackQueue.complete)}_showFeedbackConditionFor(e,t){return!0}get _feedbackConditionMeta(){return{modelValue:this.modelValue,el:this}}feedbackCondition(e,t=this._feedbackConditionMeta,n=this._showFeedbackConditionFor.bind(this)){return n(e,t)}_hasFeedbackVisibleFor(e){return this.hasFeedbackFor&&this.hasFeedbackFor.includes(e)&&this.shouldShowFeedbackFor&&this.shouldShowFeedbackFor.includes(e)}updated(e){if(super.updated(e),e.has("shouldShowFeedbackFor")||e.has("hasFeedbackFor")){const e=this.constructor;this.showsFeedbackFor=e.validationTypes.map((e=>this._hasFeedbackVisibleFor(e)?e:void 0)).filter(Boolean),this._updateFeedbackComponent()}if(e.has("__childModelValueChanged")&&this.__childModelValueChanged&&(this.validate({clearCurrentResult:!0}),this.__childModelValueChanged=!1),e.has("validationStates")){const t=e.get("validationStates");t&&Object.entries(this.validationStates).forEach((([e,n])=>{t[e]&&JSON.stringify(n)!==JSON.stringify(t[e])&&this.dispatchEvent(new CustomEvent(`${e}StateChanged`,{detail:n}))}))}}_updateShouldShowFeedbackFor(){const e=this.constructor.validationTypes.map((e=>this.feedbackCondition(e,this._feedbackConditionMeta,this._showFeedbackConditionFor.bind(this))?e:void 0)).filter(Boolean);JSON.stringify(this.shouldShowFeedbackFor)!==JSON.stringify(e)&&(this.shouldShowFeedbackFor=e)}_prioritizeAndFilterFeedback({validationResult:e}){const t=this.constructor.validationTypes,n=e.filter((e=>this.feedbackCondition(e.type,this._feedbackConditionMeta,this._showFeedbackConditionFor.bind(this)))).sort(((e,n)=>t.indexOf(e.type)-t.indexOf(n.type)));return n.slice(0,this._visibleMessagesAmount)}}));class od extends nd{static get validatorName(){return"FormElementsHaveNoError"}execute(e,t,n){const r=n?.node._anyFormElementHasFeedbackFor("error");return r}static async getMessage(){return""}}const ld=Re((e=>class extends(xh(Eh(ad(Te(bh(e)))))){static get properties(){return{submitted:{type:Boolean,reflect:!0},focused:{type:Boolean,reflect:!0},dirty:{type:Boolean,reflect:!0},touched:{type:Boolean,reflect:!0},prefilled:{type:Boolean,reflect:!0}}}get _inputNode(){return this}get modelValue(){return this._getFromAllFormElements("modelValue")}set modelValue(e){this.__isInitialModelValue?(this.__isInitialModelValue=!1,this.registrationComplete.then((()=>{this._setValueMapForAllFormElements("modelValue",e)}))):this._setValueMapForAllFormElements("modelValue",e)}get serializedValue(){return this._getFromAllFormElements("serializedValue")}set serializedValue(e){this.__isInitialSerializedValue?(this.__isInitialSerializedValue=!1,this.registrationComplete.then((()=>{this._setValueMapForAllFormElements("serializedValue",e)}))):this._setValueMapForAllFormElements("serializedValue",e)}get formattedValue(){return this._getFromAllFormElements("formattedValue")}set formattedValue(e){this._setValueMapForAllFormElements("formattedValue",e)}get prefilled(){return this._everyFormElementHas("prefilled")}constructor(){super(),this.value="",this.disabled=!1,this.submitted=!1,this.dirty=!1,this.touched=!1,this.focused=!1,this.__addedSubValidators=!1,this.__isInitialModelValue=!0,this.__isInitialSerializedValue=!0,this._checkForOutsideClick=this._checkForOutsideClick.bind(this),this.addEventListener("focusin",this._syncFocused),this.addEventListener("focusout",this._onFocusOut),this.addEventListener("dirty-changed",this._syncDirty),this.addEventListener("validate-performed",this.__onChildValidatePerformed),this.defaultValidators=[new od],this.__descriptionElementsInParentChain=new Set,this.__pendingValues={modelValue:{},serializedValue:{}}}connectedCallback(){super.connectedCallback(),this.setAttribute("role","group"),this.initComplete.then((()=>{this.__isInitialModelValue=!1,this.__isInitialSerializedValue=!1,this.__initInteractionStates()}))}disconnectedCallback(){super.disconnectedCallback(),this.__hasActiveOutsideClickHandling&&(document.removeEventListener("click",this._checkForOutsideClick),this.__hasActiveOutsideClickHandling=!1),this.__descriptionElementsInParentChain.clear()}__initInteractionStates(){this.formElements.forEach((e=>{"function"==typeof e.initInteractionState&&e.initInteractionState()}))}_triggerInitialModelValueChangedEvent(){this.registrationComplete.then((()=>{this._dispatchInitialModelValueChangedEvent()}))}updated(e){super.updated(e),e.has("disabled")&&(this.disabled?this.__requestChildrenToBeDisabled():this.__retractRequestChildrenToBeDisabled()),e.has("focused")&&!0===this.focused&&this.__setupOutsideClickHandling()}__setupOutsideClickHandling(){this.__hasActiveOutsideClickHandling||(document.addEventListener("click",this._checkForOutsideClick),this.__hasActiveOutsideClickHandling=!0)}_checkForOutsideClick(e){!this.contains(e.target)&&(this.touched=!0)}__requestChildrenToBeDisabled(){this.formElements.forEach((e=>{e.makeRequestToBeDisabled&&e.makeRequestToBeDisabled()}))}__retractRequestChildrenToBeDisabled(){this.formElements.forEach((e=>{e.retractRequestToBeDisabled&&e.retractRequestToBeDisabled()}))}_inputGroupTemplate(){return V`
        <div class="input-group">
          <slot></slot>
        </div>
      `}submitGroup(){this.submitted=!0,this.formElements.forEach((e=>{"function"==typeof e.submitGroup?e.submitGroup():e.submitted=!0}))}resetGroup(){this.formElements.forEach((e=>{"function"==typeof e.resetGroup?e.resetGroup():"function"==typeof e.reset&&e.reset()})),this.resetInteractionState()}clearGroup(){this.formElements.forEach((e=>{"function"==typeof e.clearGroup?e.clearGroup():"function"==typeof e.clear&&e.clear()})),this.resetInteractionState()}resetInteractionState(){this.submitted=!1,this.touched=!1,this.dirty=!1,this.formElements.forEach((e=>{"function"==typeof e.resetInteractionState&&e.resetInteractionState()}))}_getFromAllFormElementsFilter(e,t){return!e.disabled}_getFromAllFormElements(e,t){const n={},r=t||this._getFromAllFormElementsFilter;return this.formElements._keys().forEach((t=>{const s=this.formElements[t];s instanceof kh?n[t]=s.filter((t=>r(t,e))).map((t=>t[e])):r(s,e)&&("function"==typeof s._getFromAllFormElements?n[t]=s._getFromAllFormElements(e):n[t]=s[e])})),n}_setValueForAllFormElements(e,t){this.formElements.forEach((n=>{n[e]=t}))}_setValueMapForAllFormElements(e,t){t&&"object"==typeof t&&Object.keys(t).forEach((n=>{Array.isArray(this.formElements[n])&&this.formElements[n].forEach(((r,s)=>{r[e]=t[n][s]})),this.formElements[n]?this.formElements[n][e]=t[n]:this.__pendingValues[e][n]=t[n]}))}_anyFormElementHas(e){return Object.keys(this.formElements).some((t=>Array.isArray(this.formElements[t])?this.formElements[t].some((t=>!!t[e])):!!this.formElements[t][e]))}_anyFormElementHasFeedbackFor(e){return Object.keys(this.formElements).some((t=>Array.isArray(this.formElements[t])?this.formElements[t].some((t=>Boolean(t.hasFeedbackFor&&t.hasFeedbackFor.includes(e)))):Boolean(this.formElements[t].hasFeedbackFor&&this.formElements[t].hasFeedbackFor.includes(e))))}_everyFormElementHas(e){return Object.keys(this.formElements).every((t=>Array.isArray(this.formElements[t])?this.formElements[t].every((t=>!!t[e])):!!this.formElements[t][e]))}__onChildValidatePerformed(e){e&&this.isRegisteredFormElement(e.target)&&this.validate()}_syncFocused(){this.focused=this._anyFormElementHas("focused")}_onFocusOut(e){const t=this.formElements[this.formElements.length-1];e.target===t&&(this.touched=!0),this.focused=!1}_syncDirty(){this.dirty=this._anyFormElementHas("dirty")}__storeAllDescriptionElementsInParentChain(){let e=this;for(;e;)wh(e._getAriaDescriptionElements(),{reverse:!0}).forEach((e=>{this.__descriptionElementsInParentChain.add(e)})),e=e._parentFormGroup}__linkParentMessages(e){this.__descriptionElementsInParentChain.forEach((t=>{"function"==typeof e.addToAriaDescribedBy&&e.addToAriaDescribedBy(t,{reorder:!1})}))}__unlinkParentMessages(e){this.__descriptionElementsInParentChain.forEach((t=>{"function"==typeof e.removeFromAriaDescribedBy&&e.removeFromAriaDescribedBy(t)}))}addFormElement(e,t){if(super.addFormElement(e,t),this.disabled&&e.makeRequestToBeDisabled(),this.__descriptionElementsInParentChain.size||this.__storeAllDescriptionElementsInParentChain(),this.__linkParentMessages(e),this.validate({clearCurrentResult:!0}),"function"==typeof e.addToAriaLabelledBy&&this._labelNode&&e.addToAriaLabelledBy(this._labelNode,{reorder:!1}),!e.modelValue){const t=this.__pendingValues;t.modelValue&&t.modelValue[e.name]?e.modelValue=t.modelValue[e.name]:t.serializedValue&&t.serializedValue[e.name]&&(e.serializedValue=t.serializedValue[e.name])}}get _initialModelValue(){return this._getFromAllFormElements("_initialModelValue")}removeFormElement(e){super.removeFormElement(e),this.validate({clearCurrentResult:!0}),"function"==typeof e.removeFromAriaLabelledBy&&this._labelNode&&e.removeFromAriaLabelledBy(this._labelNode,{reorder:!1}),this.__unlinkParentMessages(e)}}));class cd extends(ld(le)){constructor(){super(),this._isFormOrFieldset=!0,this._repropagationRole="fieldset"}}const ud=()=>{throw new Error("No form node found. Did you put a <form> element inside your custom-form element?")};class hd extends cd{constructor(){super(),this._submit=this._submit.bind(this),this._reset=this._reset.bind(this)}connectedCallback(){super.connectedCallback(),this.__registerEventsForLionForm(),this.removeAttribute("role")}disconnectedCallback(){super.disconnectedCallback(),this.__teardownEventsForLionForm()}get _formNode(){return this.querySelector("form")}submit(){this._formNode?this._formNode.dispatchEvent(new Event("submit",{cancelable:!0})):ud()}_submit(e){e.preventDefault(),e.stopPropagation(),this.submitGroup(),this.dispatchEvent(new Event("submit",{bubbles:!0}))}reset(){this._formNode?this._formNode.reset():ud()}_reset(e){e.preventDefault(),e.stopPropagation(),this.resetGroup(),this.dispatchEvent(new Event("reset",{bubbles:!0}))}__registerEventsForLionForm(){this._formNode.addEventListener("submit",this._submit),this._formNode.addEventListener("reset",this._reset)}__teardownEventsForLionForm(){this._formNode.removeEventListener("submit",this._submit),this._formNode.removeEventListener("reset",this._reset)}}const dd=window,pd=new WeakMap,fd=Re((e=>class extends e{static get properties(){return{focused:{type:Boolean,reflect:!0},focusedVisible:{type:Boolean,reflect:!0,attribute:"focused-visible"}}}constructor(){super(),this.focused=!1,this.focusedVisible=!1}connectedCallback(){super.connectedCallback(),this.__registerEventsForFocusMixin()}disconnectedCallback(){super.disconnectedCallback(),this.__teardownEventsForFocusMixin()}focus(){this._focusableNode?.focus()}blur(){this._focusableNode?.blur()}get _focusableNode(){return this._inputNode||document.createElement("input")}__onFocus(){if(this.focused=!0,"function"==typeof dd.applyFocusVisiblePolyfill)this.focusedVisible=this._focusableNode.hasAttribute("data-focus-visible-added");else try{this.focusedVisible=this._focusableNode.matches(":focus-visible")}catch(e){this.focusedVisible=!1}}__onBlur(){this.focused=!1,this.focusedVisible=!1}__registerEventsForFocusMixin(){var e;e=this.getRootNode(),dd.applyFocusVisiblePolyfill&&!pd.has(e)&&(dd.applyFocusVisiblePolyfill(e),pd.set(e,void 0)),this.__redispatchFocus=e=>{e.stopPropagation(),this.dispatchEvent(new Event("focus"))},this._focusableNode.addEventListener("focus",this.__redispatchFocus),this.__redispatchBlur=e=>{e.stopPropagation(),this.dispatchEvent(new Event("blur"))},this._focusableNode.addEventListener("blur",this.__redispatchBlur),this.__redispatchFocusin=e=>{e.stopPropagation(),this.__onFocus(),this.dispatchEvent(new Event("focusin",{bubbles:!0,composed:!0}))},this._focusableNode.addEventListener("focusin",this.__redispatchFocusin),this.__redispatchFocusout=e=>{e.stopPropagation(),this.__onBlur(),this.dispatchEvent(new Event("focusout",{bubbles:!0,composed:!0}))},this._focusableNode.addEventListener("focusout",this.__redispatchFocusout)}__teardownEventsForFocusMixin(){this._focusableNode.removeEventListener("focus",this.__redispatchFocus),this._focusableNode.removeEventListener("blur",this.__redispatchBlur),this._focusableNode.removeEventListener("focusin",this.__redispatchFocusin),this._focusableNode.removeEventListener("focusout",this.__redispatchFocusout)}})),gd=Re((e=>class extends(ad(Eh(e))){static get properties(){return{formattedValue:{attribute:!1},serializedValue:{attribute:!1},formatOptions:{attribute:!1}}}requestUpdate(e,t){super.requestUpdate(e,t),"modelValue"===e&&this.modelValue!==t&&this._onModelValueChanged({modelValue:this.modelValue},{modelValue:t}),"serializedValue"===e&&this.serializedValue!==t&&this._calculateValues({source:"serialized"}),"formattedValue"===e&&this.formattedValue!==t&&this._calculateValues({source:"formatted"})}get value(){return this._inputNode&&this._inputNode.value||this.__value||""}set value(e){this._inputNode?(this._inputNode.value=e,this.__value=void 0):this.__value=e}preprocessor(e,t){}parser(e,t){return e}formatter(e,t){return e}serializer(e){return void 0!==e?e:""}deserializer(e){return void 0===e?"":e}_calculateValues({source:e}={source:null}){this.__preventRecursiveTrigger||(this.__preventRecursiveTrigger=!0,"model"!==e&&("serialized"===e?this.modelValue=this.deserializer(this.serializedValue):"formatted"===e&&(this.modelValue=this._callParser())),"formatted"!==e&&(this.formattedValue=this._callFormatter()),"serialized"!==e&&(this.serializedValue=this.serializer(this.modelValue)),this._reflectBackFormattedValueToUser(),this.__preventRecursiveTrigger=!1,this.__prevViewValue=this.value)}_callParser(e=this.formattedValue){if(""===e)return"";if("string"!=typeof e)return;const t=this.parser(e,this.formatOptions);return void 0!==t?t:new Ah(e)}_callFormatter(){return this._isHandlingUserInput&&this.hasFeedbackFor?.length&&this.hasFeedbackFor.includes("error")&&this._inputNode?this._inputNode?this.value:void 0:this.modelValue instanceof Ah?this.modelValue.viewValue:this.formatter(this.modelValue,this.formatOptions)}_onModelValueChanged(...e){this._calculateValues({source:"model"}),this._dispatchModelValueChangedEvent(...e)}_dispatchModelValueChangedEvent(...e){this.dispatchEvent(new CustomEvent("model-value-changed",{bubbles:!0,detail:{formPath:[this],isTriggeredByUser:Boolean(this._isHandlingUserInput)}}))}_syncValueUpwards(){this.__isHandlingComposition||this.__handlePreprocessor();const e=this.formattedValue;this.modelValue=this._callParser(this.value),e===this.formattedValue&&this.__prevViewValue!==this.value&&this._calculateValues()}__handlePreprocessor(){const e=this.value;let t=this.value.length;this._inputNode&&"selectionStart"in this._inputNode&&"range"!==this._inputNode?.type&&(t=this._inputNode.selectionStart);const n=this.preprocessor(this.value,{...this.formatOptions,currentCaretIndex:t,prevViewValue:this.__prevViewValue});if(this.__prevViewValue=e,void 0!==n)if("string"==typeof n)this.value=n;else if("object"==typeof n){const{viewValue:e,caretIndex:t}=n;this.value=e,t&&this._inputNode&&"selectionStart"in this._inputNode&&(this._inputNode.selectionStart=t,this._inputNode.selectionEnd=t)}}_reflectBackFormattedValueToUser(){this._reflectBackOn()&&(this.value=void 0!==this.formattedValue?this.formattedValue:"")}_reflectBackOn(){return!this._isHandlingUserInput}_proxyInputEvent(){this.dispatchEvent(new Event("user-input-changed",{bubbles:!0}))}_onUserInputChanged(){this._isHandlingUserInput=!0,this._syncValueUpwards(),this._isHandlingUserInput=!1}__onCompositionEvent({type:e}){"compositionstart"===e?this.__isHandlingComposition=!0:"compositionend"===e&&(this.__isHandlingComposition=!1,this._syncValueUpwards())}constructor(){super(),this.formatOn="change",this.formatOptions={},this.formattedValue=void 0,this.serializedValue=void 0,this._isPasting=!1,this._isHandlingUserInput=!1,this.__prevViewValue="",this.__onCompositionEvent=this.__onCompositionEvent.bind(this),this.addEventListener("user-input-changed",this._onUserInputChanged),this.addEventListener("paste",this.__onPaste),this._reflectBackFormattedValueToUser=this._reflectBackFormattedValueToUser.bind(this),this._reflectBackFormattedValueDebounced=()=>{setTimeout(this._reflectBackFormattedValueToUser)}}__onPaste(){this._isPasting=!0,this.formatOptions.mode="pasted",setTimeout((()=>{this._isPasting=!1,this.formatOptions.mode="auto"}))}connectedCallback(){super.connectedCallback(),void 0===this.modelValue&&this._syncValueUpwards(),this.__prevViewValue=this.value,this._reflectBackFormattedValueToUser(),this._inputNode&&(this._inputNode.addEventListener(this.formatOn,this._reflectBackFormattedValueDebounced),this._inputNode.addEventListener("input",this._proxyInputEvent),this._inputNode.addEventListener("compositionstart",this.__onCompositionEvent),this._inputNode.addEventListener("compositionend",this.__onCompositionEvent))}disconnectedCallback(){super.disconnectedCallback(),this._inputNode&&(this._inputNode.removeEventListener("input",this._proxyInputEvent),this._inputNode.removeEventListener(this.formatOn,this._reflectBackFormattedValueDebounced),this._inputNode.removeEventListener("compositionstart",this.__onCompositionEvent),this._inputNode.removeEventListener("compositionend",this.__onCompositionEvent))}})),md=Re((e=>class extends(gd(fd(Eh(e)))){static get properties(){return{autocomplete:{type:String,reflect:!0}}}constructor(){super(),this.autocomplete=void 0}get _inputNode(){return super._inputNode}get selectionStart(){const e=this._inputNode;return e&&e.selectionStart?e.selectionStart:0}set selectionStart(e){const t=this._inputNode;t&&t.selectionStart&&(t.selectionStart=e)}get selectionEnd(){const e=this._inputNode;return e&&e.selectionEnd?e.selectionEnd:0}set selectionEnd(e){const t=this._inputNode;t&&t.selectionEnd&&(t.selectionEnd=e)}get value(){return this._inputNode&&this._inputNode.value||this.__value||""}set value(e){this._inputNode?(this._inputNode.value!==e&&this._setValueAndPreserveCaret(e),this.__value=void 0):this.__value=e}_setValueAndPreserveCaret(e){if(this.focused)try{if(!(this._inputNode instanceof HTMLSelectElement)){const t=this._inputNode.selectionStart;this._inputNode.value=e,this._inputNode.selectionStart=t,this._inputNode.selectionEnd=t}}catch(t){this._inputNode.value=e}else this._inputNode.value=e}_reflectBackFormattedValueToUser(){if(super._reflectBackFormattedValueToUser(),this._reflectBackOn()&&this.focused)try{this._inputNode.selectionStart=this._inputNode.value.length}catch(e){}}get _focusableNode(){return this._inputNode}})),yd=Re((e=>class extends(Eh(e)){static get properties(){return{touched:{type:Boolean,reflect:!0},dirty:{type:Boolean,reflect:!0},filled:{type:Boolean,reflect:!0},prefilled:{attribute:!1},submitted:{attribute:!1}}}requestUpdate(e,t){super.requestUpdate(e,t),"touched"===e&&this.touched!==t&&this._onTouchedChanged(),"modelValue"===e&&(this.filled=!this._isEmpty()),"dirty"===e&&this.dirty!==t&&this._onDirtyChanged()}constructor(){super(),this.touched=!1,this.dirty=!1,this.prefilled=!1,this.filled=!1,this._leaveEvent="blur",this._valueChangedEvent="model-value-changed",this._iStateOnLeave=this._iStateOnLeave.bind(this),this._iStateOnValueChange=this._iStateOnValueChange.bind(this)}connectedCallback(){super.connectedCallback(),this.addEventListener(this._leaveEvent,this._iStateOnLeave),this.addEventListener(this._valueChangedEvent,this._iStateOnValueChange),this.initInteractionState()}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener(this._leaveEvent,this._iStateOnLeave),this.removeEventListener(this._valueChangedEvent,this._iStateOnValueChange)}initInteractionState(){this.dirty=!1,this.prefilled=!this._isEmpty()}_iStateOnLeave(){this.touched=!0,this.prefilled=!this._isEmpty()}_iStateOnValueChange(){this.dirty=!0}resetInteractionState(){this.touched=!1,this.submitted=!1,this.dirty=!1,this.prefilled=!this._isEmpty()}_onTouchedChanged(){this.dispatchEvent(new Event("touched-changed",{bubbles:!0,composed:!0}))}_onDirtyChanged(){this.dispatchEvent(new Event("dirty-changed",{bubbles:!0,composed:!0}))}_showFeedbackConditionFor(e,t){return t.touched&&t.dirty||t.prefilled||t.submitted}get _feedbackConditionMeta(){return{...super._feedbackConditionMeta,submitted:this.submitted,touched:this.touched,dirty:this.dirty,filled:this.filled,prefilled:this.prefilled}}}));class bd extends(Eh(yd(fd(gd(ad(bh(le))))))){firstUpdated(e){super.firstUpdated(e),this._initialModelValue=this.modelValue}connectedCallback(){super.connectedCallback(),this._onChange=this._onChange.bind(this),this._inputNode.addEventListener("change",this._onChange),this.classList.add("form-field")}disconnectedCallback(){super.disconnectedCallback(),this._inputNode.removeEventListener("change",this._onChange)}resetInteractionState(){super.resetInteractionState(),this.submitted=!1}reset(){this.modelValue=this._initialModelValue,this.resetInteractionState()}clear(){this.modelValue=""}_onChange(){this.dispatchEvent(new Event("user-input-changed",{bubbles:!0}))}get _feedbackConditionMeta(){return{...super._feedbackConditionMeta,focused:this.focused}}get _focusableNode(){return this._inputNode}}class vd extends(md(bd)){static get properties(){return{readOnly:{type:Boolean,attribute:"readonly",reflect:!0},type:{type:String,reflect:!0},placeholder:{type:String,reflect:!0}}}get slots(){return{...super.slots,input:()=>{const e=document.createElement("input"),t=this.getAttribute("value");return t&&e.setAttribute("value",t),e}}}get _inputNode(){return super._inputNode}constructor(){super(),this.readOnly=!1,this.type="text",this.placeholder=""}requestUpdate(e,t){super.requestUpdate(e,t),"readOnly"===e&&this.__delegateReadOnly()}firstUpdated(e){super.firstUpdated(e),this.__delegateReadOnly()}updated(e){super.updated(e),e.has("type")&&(this._inputNode.type=this.type),e.has("placeholder")&&(this._inputNode.placeholder=this.placeholder),e.has("disabled")&&(this._inputNode.disabled=this.disabled,this.validate()),e.has("name")&&(this._inputNode.name=this.name),e.has("autocomplete")&&(this._inputNode.autocomplete=this.autocomplete)}__delegateReadOnly(){this._inputNode&&(this._inputNode.readOnly=this.readOnly)}}const wd=Re((e=>class extends e{constructor(){super(),this.registrationTarget=void 0,this.__redispatchEventForFormRegistrarPortalMixin=this.__redispatchEventForFormRegistrarPortalMixin.bind(this),this.addEventListener("form-element-register",this.__redispatchEventForFormRegistrarPortalMixin)}__redispatchEventForFormRegistrarPortalMixin(e){if(e.stopPropagation(),!this.registrationTarget)throw new Error("A FormRegistrarPortal element requires a .registrationTarget");this.registrationTarget.dispatchEvent(new CustomEvent("form-element-register",{detail:{element:e.detail.element},bubbles:!0}))}}));class Ad extends(wd(le)){static get properties(){return{role:{type:String,reflect:!0},tabIndex:{type:Number,reflect:!0,attribute:"tabindex"}}}constructor(){super(),this.role="listbox",this.tabIndex=0}createRenderRoot(){return this}}const _d=(e,t={})=>e.value!==t.value||e.checked!==t.checked,Ed=Re((e=>class extends(gd(e)){static get properties(){return{checked:{type:Boolean,reflect:!0},disabled:{type:Boolean,reflect:!0},modelValue:{type:Object,hasChanged:_d},choiceValue:{type:Object}}}get choiceValue(){return this.modelValue.value}set choiceValue(e){this.requestUpdate("choiceValue",this.choiceValue),this.modelValue.value!==e&&(this.modelValue={value:e,checked:this.modelValue.checked})}requestUpdate(e,t){super.requestUpdate(e,t),"modelValue"===e?this.modelValue.checked!==this.checked&&this.__syncModelCheckedToChecked(this.modelValue.checked):"checked"===e&&this.modelValue.checked!==this.checked&&this.__syncCheckedToModel(this.checked)}firstUpdated(e){super.firstUpdated(e),e.has("checked")&&this.__syncCheckedToInputElement()}updated(e){super.updated(e),e.has("modelValue")&&this.__syncCheckedToInputElement(),e.has("name")&&this._parentFormGroup&&this._parentFormGroup.name!==this.name&&this._syncNameToParentFormGroup()}constructor(){super(),this.modelValue={value:"",checked:!1},this.disabled=!1,this._preventDuplicateLabelClick=this._preventDuplicateLabelClick.bind(this),this._toggleChecked=this._toggleChecked.bind(this)}static get styles(){return[...super.styles||[],o`
          :host {
            display: flex;
            flex-wrap: wrap;
          }

          :host([hidden]) {
            display: none;
          }

          .choice-field__graphic-container {
            display: none;
          }
          .choice-field__help-text {
            display: block;
            flex-basis: 100%;
          }
        `]}render(){return V`
        <slot name="input"></slot>
        <div class="choice-field__graphic-container">${this._choiceGraphicTemplate()}</div>
        <div class="choice-field__label">
          <slot name="label"></slot>
        </div>
        <small class="choice-field__help-text">
          <slot name="help-text"></slot>
        </small>
        ${this._afterTemplate()}
      `}_choiceGraphicTemplate(){return $}_afterTemplate(){return $}connectedCallback(){super.connectedCallback(),this._labelNode&&this._labelNode.addEventListener("click",this._preventDuplicateLabelClick),this.addEventListener("user-input-changed",this._toggleChecked)}disconnectedCallback(){super.disconnectedCallback(),this._labelNode&&this._labelNode.removeEventListener("click",this._preventDuplicateLabelClick),this.removeEventListener("user-input-changed",this._toggleChecked)}_preventDuplicateLabelClick(e){const t=e=>{e.stopImmediatePropagation(),this._inputNode.removeEventListener("click",t)};this._inputNode.addEventListener("click",t)}_toggleChecked(e){this.disabled||(this._isHandlingUserInput=!0,this.checked=!this.checked,this._isHandlingUserInput=!1)}_syncNameToParentFormGroup(){this._parentFormGroup.tagName.includes(this.tagName)&&(this.name=this._parentFormGroup?.name||"")}__syncModelCheckedToChecked(e){this.checked=e}__syncCheckedToModel(e){this.modelValue={value:this.choiceValue,checked:e}}__syncCheckedToInputElement(){this._inputNode&&(this._inputNode.checked=this.checked)}_proxyInputEvent(){}_onModelValueChanged({modelValue:e},t){let n;t&&t.modelValue&&(n=t.modelValue),this.constructor.elementProperties.get("modelValue").hasChanged(e,n)&&super._onModelValueChanged({modelValue:e})}parser(){return this.modelValue}formatter(e){return e&&void 0!==e.value?e.value:e}clear(){this.checked=!1}_isEmpty(){return!this.checked}_syncValueUpwards(){}}));class kd extends(Te(Ed(_h(bh(le))))){static get properties(){return{active:{type:Boolean,reflect:!0}}}static get styles(){return[o`
        :host {
          display: block;
          background-color: white;
          padding: 4px;
          cursor: default;
        }

        :host([hidden]) {
          display: none;
        }

        :host(:hover) {
          background-color: #eee;
        }
        :host([active]) {
          background-color: #ddd;
        }

        :host([checked]) {
          background-color: #bde4ff;
        }

        :host([disabled]) {
          color: #adadad;
        }
      `]}get slots(){return{}}constructor(){super(),this.active=!1,this.__onClick=this.__onClick.bind(this),this.__registerEventListeners()}requestUpdate(e,t){super.requestUpdate(e,t),"active"===e&&this.active!==t&&this.dispatchEvent(new Event("active-changed",{bubbles:!0}))}updated(e){super.updated(e),e.has("checked")&&this.setAttribute("aria-selected",`${this.checked}`),e.has("disabled")&&this.setAttribute("aria-disabled",`${this.disabled}`)}render(){return V`
      <div class="choice-field__label">
        <slot></slot>
      </div>
    `}connectedCallback(){super.connectedCallback(),this.setAttribute("role","option")}__registerEventListeners(){this.addEventListener("click",this.__onClick)}__unRegisterEventListeners(){this.removeEventListener("click",this.__onClick)}__onClick(){if(this.disabled)return;const e=this._parentFormGroup;this._isHandlingUserInput=!0,e&&e.multipleChoice?(this.checked=!this.checked,this.active=!this.active):(this.checked=!0,this.active=!0),this._isHandlingUserInput=!1}}class xd extends bd{static get properties(){return{autocomplete:{type:String}}}constructor(){super(),this.autocomplete=void 0}get _inputNode(){return Array.from(this.children).find((e=>"input"===e.slot))}}class Cd extends xd{connectedCallback(){super.connectedCallback(),this._inputNode.addEventListener("change",this._proxyChangeEvent)}updated(e){super.updated(e),e.has("disabled")&&(this._inputNode.disabled=this.disabled,this.validate()),e.has("name")&&(this._inputNode.name=this.name),e.has("autocomplete")&&(this._inputNode.autocomplete=this.autocomplete)}disconnectedCallback(){super.disconnectedCallback(),this._inputNode.removeEventListener("change",this._proxyChangeEvent)}formatter(e){const t=Array.from(this._inputNode.options).find((t=>t.value===e));return t?t.text:""}_reflectBackFormattedValueToUser(){this._reflectBackOn()&&(this.value=void 0!==this.modelValue?this.modelValue:"")}_proxyChangeEvent(){this.dispatchEvent(new CustomEvent("user-input-changed",{bubbles:!0,composed:!0}))}}const Nd=e=>e==e&&"number"==typeof e;class Pd extends nd{static get validatorName(){return"IsNumber"}execute(e){let t=!1;return Nd(e)||(t=!0),t}}class Sd extends nd{static get validatorName(){return"MinNumber"}execute(e,t=this.param){let n=!1;return(!Nd(e)||e<t)&&(n=!0),n}}class Od extends nd{static get validatorName(){return"MaxNumber"}execute(e,t=this.param){let n=!1;return(!Nd(e)||e>t)&&(n=!0),n}}class Bd extends nd{static get validatorName(){return"MinMaxNumber"}execute(e,{min:t=0,max:n=0}=this.param){let r=!1;return(!Nd(e)||e<t||e>n)&&(r=!0),r}}class Rd extends vd{static get styles(){return[...super.styles,o`
        .input-group__container > .input-group__input ::slotted(.form-control) {
          text-align: center;
        }
      `]}static get properties(){return{min:{type:Number,reflect:!0},max:{type:Number,reflect:!0},step:{type:Number,reflect:!0}}}get currentValue(){return parseFloat(this.value)||0}get _inputNode(){return super._inputNode}constructor(){super(),this.parser=e=>parseFloat(e),this.min=1/0,this.max=1/0,this.step=1,this.values={max:this.max,min:this.min,step:this.step},this.__increment=this.__increment.bind(this),this.__decrement=this.__decrement.bind(this),this.__boundOnLeaveButton=this._onLeaveButton.bind(this)}connectedCallback(){super.connectedCallback(),this.values={max:this.max,min:this.min,step:this.step},this.role="spinbutton",this.addEventListener("keydown",this.__keyDownHandler),this._inputNode.setAttribute("inputmode","decimal"),this._inputNode.setAttribute("autocomplete","off"),this.setAttribute("aria-label",this.label),this.step=this.hasAttribute("step")?this.step:1,this.__setAriaLabelsAndValidator(),this.__toggleSpinnerButtonsState()}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("keydown",this.__keyDownHandler)}updated(e){super.updated(e),e.has("modelValue")&&this.__toggleSpinnerButtonsState(),e.has("min")&&(this._inputNode.min=`${this.min}`,this.values.min=this.min,this.__toggleSpinnerButtonsState()),e.has("max")&&(this._inputNode.max=`${this.max}`,this.values.max=this.max,this.__toggleSpinnerButtonsState()),e.has("step")&&(this._inputNode.step=`${this.step}`,this.values.step=this.step)}get slots(){return{...super.slots,prefix:()=>this.__getDecrementButtonNode(),suffix:()=>this.__getIncrementButtonNode()}}__setAriaLabelsAndValidator(){const e={"aria-valuemax":this.values.max,"aria-valuemin":this.values.min},t=Object.entries(e).map((([e,t])=>t!==1/0?(this.setAttribute(e,`${t}`),"aria-valuemax"===e?new Od(t):new Sd(t)):null)).filter((e=>null!==e)),n=[new Pd,...t];this.defaultValidators.push(...n)}__keyDownHandler(e){"ArrowUp"===e.key&&this.__increment(),"ArrowDown"===e.key&&this.__decrement()}__toggleSpinnerButtonsState(){const{min:e,max:t}=this.values,n=this.__getSlot("prefix"),r=this.__getSlot("suffix"),s=this.currentValue>=t&&t!==1/0;n[this.currentValue<=e&&e!==1/0?"setAttribute":"removeAttribute"]("disabled","true"),r[s?"setAttribute":"removeAttribute"]("disabled","true"),this.setAttribute("aria-valuenow",`${this.currentValue}`)}__getSlot(e){return Array.from(this.children).find((t=>t.slot===e))||{}}__increment(){const{step:e,max:t}=this.values,n=this.currentValue+e;(n<=t||t===1/0)&&(this.value=`${n}`,this.__toggleSpinnerButtonsState(),this._proxyInputEvent())}__decrement(){const{step:e,min:t}=this.values,n=this.currentValue-e;(n>=t||t===1/0)&&(this.value=`${n}`,this.__toggleSpinnerButtonsState(),this._proxyInputEvent())}__getIncrementButtonNode(){const e=document.createElement("div");return ie(this._incrementorTemplate(),e,{scopeName:this.localName,eventContext:this}),e.firstElementChild}__getDecrementButtonNode(){const e=document.createElement("div");return ie(this._decrementorTemplate(),e,{scopeName:this.localName,eventContext:this}),e.firstElementChild}_onChange(){super._onChange(),this.__toggleSpinnerButtonsState()}_decrementorSignTemplate(){return"－"}_incrementorSignTemplate(){return"＋"}_decrementorTemplate(){return V`
      <button
        ?disabled=${this.disabled||this.readOnly}
        @click=${this.__decrement}
        @blur=${this.__boundOnLeaveButton}
        tabindex="-1"
        type="button"
        aria-label="decrement"
      >
        ${this._decrementorSignTemplate()}
      </button>
    `}_incrementorTemplate(){return V`
      <button
        ?disabled=${this.disabled||this.readOnly}
        @click=${this.__increment}
        @blur=${this.__boundOnLeaveButton}
        tabindex="-1"
        type="button"
        aria-label="increment"
      >
        ${this._incrementorSignTemplate()}
      </button>
    `}_onLeaveButton(){this.dispatchEvent(new Event(this._leaveEvent))}}const Td=(e,t)=>{var n,r;const s=e._$AN;if(void 0===s)return!1;for(const e of s)null===(r=(n=e)._$AO)||void 0===r||r.call(n,t,!1),Td(e,t);return!0},Id=e=>{let t,n;do{if(void 0===(t=e._$AM))break;n=t._$AN,n.delete(e),e=t}while(0===(null==n?void 0:n.size))},Fd=e=>{for(let t;t=e._$AM;e=t){let n=t._$AN;if(void 0===n)t._$AN=n=new Set;else if(n.has(e))break;n.add(e),Dd(t)}};function Ld(e){void 0!==this._$AN?(Id(this),this._$AM=e,Fd(this)):this._$AM=e}function Ud(e,t=!1,n=0){const r=this._$AH,s=this._$AN;if(void 0!==s&&0!==s.size)if(t)if(Array.isArray(r))for(let e=n;e<r.length;e++)Td(r[e],!1),Id(r[e]);else null!=r&&(Td(r,!1),Id(r));else Td(this,e)}const Dd=e=>{var t,n,r,s;2==e.type&&(null!==(t=(r=e)._$AP)&&void 0!==t||(r._$AP=Ud),null!==(n=(s=e)._$AQ)&&void 0!==n||(s._$AQ=Ld))};class Md extends We{constructor(){super(...arguments),this._$AN=void 0}_$AT(e,t,n){super._$AT(e,t,n),Fd(this),this.isConnected=e._$AU}_$AO(e,t=!0){var n,r;e!==this.isConnected&&(this.isConnected=e,e?null===(n=this.reconnected)||void 0===n||n.call(this):null===(r=this.disconnected)||void 0===r||r.call(this)),t&&(Td(this,e),Id(this))}setValue(e){if((e=>void 0===this._$Ct.strings)())this._$Ct._$AI(e,this);else{const t=[...this._$Ct._$AH];t[this._$Ci]=e,this._$Ct._$AI(t,this,0)}}disconnected(){}reconnected(){}}class jd{constructor(e){this.G=e}disconnect(){this.G=void 0}reconnect(e){this.G=e}deref(){return this.G}}class Vd{constructor(){this.Y=void 0,this.Z=void 0}get(){return this.Y}pause(){var e;null!==(e=this.Y)&&void 0!==e||(this.Y=new Promise((e=>this.Z=e)))}resume(){var e;null===(e=this.Z)||void 0===e||e.call(this),this.Y=this.Z=void 0}}const Hd=e=>{return!(t=e,null===t||"object"!=typeof t&&"function"!=typeof t||"function"!=typeof e.then);var t},$d=1073741823,Gd=Ke(class extends Md{constructor(){super(...arguments),this._$C_t=$d,this._$Cwt=[],this._$Cq=new jd(this),this._$CK=new Vd}render(...e){var t;return null!==(t=e.find((e=>!Hd(e))))&&void 0!==t?t:H}update(e,t){const n=this._$Cwt;let r=n.length;this._$Cwt=t;const s=this._$Cq,i=this._$CK;this.isConnected||this.disconnected();for(let e=0;e<t.length&&!(e>this._$C_t);e++){const a=t[e];if(!Hd(a))return this._$C_t=e,a;e<r&&a===n[e]||(this._$C_t=$d,r=0,Promise.resolve(a).then((async e=>{for(;i.get();)await i.get();const t=s.deref();if(void 0!==t){const n=t._$Cwt.indexOf(a);n>-1&&n<t._$C_t&&(t._$C_t=n,t.setValue(e))}})))}return H}disconnected(){this._$Cq.disconnect(),this._$CK.pause()}reconnected(){this._$Cq.reconnect(this),this._$CK.resume()}}),zd=Re((e=>class extends e{static get localizeNamespaces(){return[]}static get waitForLocalizeNamespaces(){return!0}constructor(){super(),this.__boundLocalizeOnLocaleChanged=(...e)=>{const t=Array.from(e)[0];this.__localizeOnLocaleChanged(t)},this.__boundLocalizeOnLocaleChanging=()=>{this.__localizeOnLocaleChanging()},this.__localizeStartLoadingNamespaces(),this.localizeNamespacesLoaded&&this.localizeNamespacesLoaded.then((()=>{this.__localizeMessageSync=!0}))}async performUpdate(){Object.getPrototypeOf(this).constructor.waitForLocalizeNamespaces&&await this.localizeNamespacesLoaded,super.performUpdate()}connectedCallback(){super.connectedCallback(),this.localizeNamespacesLoaded&&this.localizeNamespacesLoaded.then((()=>this.onLocaleReady())),Zh.addEventListener("__localeChanging",this.__boundLocalizeOnLocaleChanging),Zh.addEventListener("localeChanged",this.__boundLocalizeOnLocaleChanged)}disconnectedCallback(){super.disconnectedCallback(),Zh.removeEventListener("__localeChanging",this.__boundLocalizeOnLocaleChanging),Zh.removeEventListener("localeChanged",this.__boundLocalizeOnLocaleChanged)}msgLit(e,t,n){return this.__localizeMessageSync?Zh.msg(e,t,n):this.localizeNamespacesLoaded?Gd(this.localizeNamespacesLoaded.then((()=>Zh.msg(e,t,n))),$):""}__getUniqueNamespaces(){const e=[],t=new Set;return Object.getPrototypeOf(this).constructor.localizeNamespaces.forEach(t.add.bind(t)),t.forEach((t=>{e.push(t)})),e}__localizeStartLoadingNamespaces(){this.localizeNamespacesLoaded=Zh.loadNamespaces(this.__getUniqueNamespaces())}__localizeOnLocaleChanging(){this.__localizeStartLoadingNamespaces()}__localizeOnLocaleChanged(e){this.onLocaleChanged(e.detail.newLocale,e.detail.oldLocale)}onLocaleReady(){this.onLocaleUpdated()}onLocaleChanged(e,t){this.onLocaleUpdated(),this.requestUpdate()}onLocaleUpdated(){}}));function qd(e){return e||(Zh&&Zh.locale?Zh.locale:"en-GB")}function Qd(e,t){if(t&&t.decimalSeparator)return t.decimalSeparator;const n=qd(e);return Intl.NumberFormat(n,{style:"decimal",minimumFractionDigits:1}).format(1)[1]}function Jd(e){return 160===e.charCodeAt(0)||8239===e.charCodeAt(0)?" ":e}function Kd(e,t){if(t&&t.groupSeparator)return t.groupSeparator;const n=qd(e);return Jd(Intl.NumberFormat(n,{style:"decimal",minimumFractionDigits:0}).format(1e4)[2])}function Wd(e){if("currency"===e[0].type){const t=e.splice(0,1),n=e.splice(0,1);e.push(n[0]),e.push(t[0])}else if("minusSign"===e[0].type&&"currency"===e[1].type){const t=e.splice(1,1),n=e.splice(1,1);e.push(n[0]),e.push(t[0])}return e}const Yd={EUR:"€",USD:"$",JPY:"¥"};function Zd(e,t={}){let n="string"==typeof e?parseFloat(e):e;const r=qd(t&&t.locale);if(Number.isNaN(n))return t&&t.returnIfNaN||Zh.formatNumberOptions.returnIfNaN;t&&t.roundMode&&(n=function(e,t){switch(t){case"floor":return Math.floor(e);case"ceiling":return Math.ceil(e);case"round":return Math.round(e);default:throw new Error("roundMode can only be round|floor|ceiling")}}(e,t.roundMode));let s=[];const i=Intl.NumberFormat(r,t).format(n),{decimalSeparator:a,groupSeparator:o}=function(e,t,n){const r=/[0-9](?<sep>[\s,. _ '])[0-9]/g,s=[];let i;for(;null!==(i=r.exec(t));)i.groups&&i.groups.sep&&s.push(i.groups?.sep);let a=null,o=null;return s&&(1===s.length?t.split(s[0])[1].replace(/[^0-9]/g,"").length>=3&&(e>=1e3||e<=-1e3||n?.minimumIntegerDigits&&n.minimumIntegerDigits>3)?[a]=s:[o]=s:s.every((e=>e===s[0]))?[a]=s:([a]=s,o=s[s.length-1])),{groupSeparator:a,decimalSeparator:o}}(n,i,t),l=/[.,\s0-9 _ ]/,c=/[-]/,u=/[0-9]/,h=/[\s]/;let d="",p="",f=!1,g=!1;const m=Kd(r,t),y=Qd(r,t);if(a&&o&&m===y)throw new Error(`Decimal and group (thousand) separator are the same character: '${m}'.\nThis can happen due to both props being specified as the same, or one of the props being the same as the other one from default locale.\nPlease specify .groupSeparator / .decimalSeparator on the formatOptions object to be different.`);for(let e=0;e<i.length;e+=1){if(c.test(i[e])&&s.push({type:"minusSign",value:"−"}),u.test(i[e])&&(p+=i[e]),l.test(i[e])||c.test(i[e])||(d+=i[e]),l.test(i[e])&&d&&(s.push({type:"currency",value:d}),d=""),i[e]===o&&i[e-1].match(u)&&i[e+1].match(u)&&(p&&(s.push({type:"integer",value:p}),p=""),s.push({type:"group",value:m}),g=!0),i[e]===a&&(p&&(s.push({type:"integer",value:p}),p=""),s.push({type:"decimal",value:y}),f=!0),h.test(i[e])){const t=!!p;p&&!f?(s.push({type:"integer",value:p}),p=""):p&&(s.push({type:"fraction",value:p}),p=""),Jd(i[e])===m&&t&&!f?s.push({type:"group",value:i[e]}):g||s.push({type:"literal",value:i[e]})}g=!1,!0===f&&e===i.length-1?p&&s.push({type:"fraction",value:p}):e===i.length-1&&p&&s.push({type:"integer",value:p}),e===i.length-1&&d&&(s.push({type:"currency",value:d}),d="")}return s=function(e,t={},n){let r=function(e){const t=[];return e.forEach((e=>{t.push({type:e.type,value:Jd(e.value)})})),t}(e);return"currency"===t.style&&("code"===t.currencyDisplay&&"nl"===n.slice(0,2)&&(r=Wd(r)),"bg-BG"===n&&(r=function(e,t){let n,r,s=[];for(let t=0;t<e.length;t+=1)"integer"===e[t].type&&(n=e.splice(0,t),r=e.splice(0,1));if(void 0!==r){const i=r[0].value.length,a=i%3,o=Math.floor(i/3),l=[];let c=0,u="",h=!1;for(let e=0;e<i;e+=1)u+=r[0].value[e],u.length===a&&!1===h?(l.push({type:"integer",value:u}),i>3&&l.push({type:"group",value:t}),u="",h=!0):3===u.length&&e<i-1&&(c+=1,l.push({type:"integer",value:u}),c!==o&&l.push({type:"group",value:t}),u="");l.push({type:"integer",value:u}),n&&(s=n.concat(l,e))}return s}(r,Kd()),r=function(e){return e.map((e=>("group"===e.type&&"0"===e.value&&(e.value=" "),e)))}(r)),"en-GB"!==n&&"en-US"!==n&&"en-AU"!==n&&"en-PH"!==n||(r=function(e,{currency:t,currencyDisplay:n}={}){const r=e.length,s={type:"literal",value:" "};return r>1&&t&&"code"===n&&("currency"===e[0].type&&"literal"!==e[1].type?e.splice(1,0,s):"minusSign"===e[0].type&&"currency"===e[1].type&&"literal"!==e[2].type?e.splice(2,0,s):"currency"===e[r-1].type&&"literal"!==e[r-2].type&&e.splice(r-1,0,s)),e}(r,t)),"fr-FR"!==n&&"fr-BE"!==n||(r=function(e,{currency:t,currencyDisplay:n}={}){const r=e,s=r.length;return s>1&&"JPY"===t&&"symbol"===n&&(r[s-1].value="¥"),r}(r,t)),"tr-TR"===n&&(r=function(e,{currency:t,currencyDisplay:n}={}){const r=e;return"TRY"===t&&"code"===n&&r.map((e=>{const t=e;return"currency"===e.type&&(t.value="TL"),t})),r}(r,t),"code"===t.currencyDisplay&&(r=Wd(r))),"en-AU"===n&&(r=function(e,{currency:t,currencyDisplay:n}={}){const r=e;return e.length>1&&"symbol"===n&&t&&(Object.keys(Yd).includes(t)&&(r[0].value=Yd[t]),r[1].value=""),r}(r,t))),r}(s,t,r),s}function Xd(e="EUR"){const t=Zd(123,{style:"currency",currency:e}),[n]=t.filter((e=>"fraction"===e.type));return n?n.value.length:0}function ep(e,t){const n={currency:"EUR",...t};return void 0===n.minimumFractionDigits&&(n.minimumFractionDigits=Xd(n.currency)),void 0===n.maximumFractionDigits&&(n.maximumFractionDigits=Xd(n.currency)),function(e,t={}){if(null==e)return"";const n=Zd(e,t);if(n===t.returnIfNaN||n===Zh.formatNumberOptions.returnIfNaN)return n;let r="";const s=n&&n.length;for(let e=0;e<s;e+=1){const t=n[e];r+=t.value}const i=qd(t&&t.locale);return Zh.formatNumberOptions.postProcessors.size>0&&Array.from(Zh.formatNumberOptions.postProcessors).forEach((([e,t])=>{e===i&&(r=t(r))})),t.postProcessors&&t.postProcessors.size>0&&Array.from(t.postProcessors).forEach((([e,t])=>{e===i&&(r=t(r))})),r}(e,n)}function tp(e,t){const n=function(e,t){if(!e.match(/\d/g))return;const n=e.match(/[0-9,.\- ]/g);if(!n)return;const r=n.join(""),s=function(e,{mode:t="auto"}={}){const n=e.match(/[., ]/g);if("auto"===t&&n&&1===n.length)return"withLocale";if(e.length>4){const t=e[e.length-4];if(function(e){return"."===e||","===e}(t)){const n=e.substring(0,e.length-4).match(/[., ]/g);if(n){const e=t;return-1===n.indexOf(e)?"heuristic":"unparseable"}return"withLocale"}}return"heuristic"}(r,t);switch(s){case"unparseable":{const e=r.match(/[0-9]/g)?.join("");return e?parseFloat(e):NaN}case"withLocale":return function(e,t){const n=Qd(t&&t.locale?t.locale:void 0,t),r=new RegExp(`[0-9${n}-]`,"g");let s=e.match(r)?.join("");return","===n&&(s=s?.replace(",",".")),s?parseFloat(s):NaN}(r,t||{});case"heuristic":return function(e){if(e.match(/[0-9., ]/g)){const t=e.replace(/(,|\.)([^,|.]*)$/g,"_decSep_$2").replace(/(,|\.| )/g,"").replace(/_decSep_/,".");return parseFloat(t)}return 0}(r);default:return 0}}(e,t);if("number"!=typeof n)return n;const r={...t};return r.currency&&void 0===r.maximumFractionDigits&&(r.maximumFractionDigits=Xd(r.currency)),function(e,t){return Number(void 0===t?e:`${Math.round(Number(`${e}e${t}`))}e-${t}`)}(n,r.maximumFractionDigits)}class np extends(zd(vd)){static get properties(){return{currency:String,modelValue:Number,locale:{attribute:!1}}}get slots(){return{...super.slots,after:()=>{const e=document.createElement("span");return e.setAttribute("data-label",""),e.textContent=this.__currencyLabel,e}}}static get styles(){return[...super.styles,o`
        .input-group__container > .input-group__input ::slotted(.form-control) {
          text-align: right;
        }
      `]}constructor(){super(),this.parser=tp,this.formatter=ep,this.currency=void 0,this.locale=void 0,this.__currencyDisplayNodeIsConnected=!0,this.defaultValidators.push(new Pd)}connectedCallback(){super.connectedCallback(),this.type="text",this._inputNode.setAttribute("inputmode","decimal"),this.currency&&this.__setCurrencyDisplayLabel()}updated(e){super.updated(e),e.has("currency")&&this._onCurrencyChanged({currency:this.currency||null}),e.has("locale")&&this.locale!==e.get("locale")&&(this.locale?this.formatOptions.locale=this.locale:delete this.formatOptions.locale,this.__reformat())}_connectSlotMixin(){super._connectSlotMixin(),this._isPrivateSlot("after")&&this._onCurrencyChanged({currency:this.currency||null})}onLocaleChanged(e,t){super.onLocaleChanged(e,t),this.locale||this.__reformat()}_reflectBackOn(){return super._reflectBackOn()||this._isPasting}_onCurrencyChanged({currency:e}){if(this.__currencyDisplayNode)if(this.formatOptions.currency=e||void 0,e){this.__currencyDisplayNodeIsConnected||(this.appendChild(this.__currencyDisplayNode),this.__currencyDisplayNodeIsConnected=!0),this.__currencyDisplayNode.textContent=this.__currencyLabel;try{this._calculateValues({source:null})}catch(e){throw e instanceof RangeError&&(this.__currencyDisplayNode?.remove(),this.__currencyDisplayNodeIsConnected=!1),e}this.__setCurrencyDisplayLabel()}else this.__currencyDisplayNode?.remove(),this.__currencyDisplayNodeIsConnected=!1}get __currencyDisplayNode(){const e=Array.from(this.children).find((e=>"after"===e.slot));return e&&(this.__storedCurrencyDisplayNode=e),e||this.__storedCurrencyDisplayNode}__setCurrencyDisplayLabel(){this.__currencyDisplayNode&&this.__currencyDisplayNode.setAttribute("aria-label",this.currency?function(e,t){let n=Zd(1,{...t,style:"currency",currency:e,currencyDisplay:"name"}).filter((e=>"currency"===e.type)).map((e=>e.value)).join(" ");const r=t?.locale||Zh.locale;return"PHP"===e&&"en-GB"===r&&(n=function(e){return"Philippine pesos"===e&&(e="Philippine pisos"),e}(n)),n}(this.currency,{}):"")}get __currencyLabel(){return this.currency?(e=this.currency,t=Zh.locale,""===e?"":function(e,t){return"TRY"===e&&"tr-TR"===t?"TL":e}(e,t)):"";var e,t}__reformat(){this.formattedValue=this._callFormatter()}}var rp=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};const sp=o`
        :host {
            display: inline-flex;
        }

        :host * {
            display: inline-flex;
        }

        /* Can't believe ING would make something so ugly */
        .input-group,
        .form-field__group-two, 
        .input-group__container, 
        .input-group__input,
        .input-group__input * {
            flex: 1;
        }
    `,ip=[me,o`
        kana-input, input, kana-select {
            flex: 1;
            font-size: 1rem;
            position: relative;
        }

        input, select {
            font-family: sans;
        }

        input {
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: var(--primary-color);
            color: var(--foreground-color);
            box-sizing: border-box;
        }
        
        input:focus {
            outline: none;
            box-shadow: 0 0 0 2px var(--highlighted-light-color);
        }

        .small-input, .small-input * {
            flex: 0;
        }

        .small-input input {
            width: 8rem;
        }

        .form-row {
            display: flex;
            gap: 1rem;
            margin: 10px 0;
            flex-flow: row wrap;
        }

        select {
            padding: 10px;
            padding-right: 2rem;
            border: none;
            border-radius: 5px;
            background-color: var(--primary-color);
            color: var(--foreground-color);
            font-size: 1rem;
            appearance: none;
            cursor: pointer;
            flex: 1;
        }
        
        select:focus {
            outline: none;
            box-shadow: 0 0 0 2px var(--highlighted-light-color);
        }
        
        kana-button-submit {
            min-width: fit-content;
            flex: 1;
            font-size: 1.2rem;
            min-height: 3rem;
        }
    `,o`
        .form-row lion-validation-feedback {
            position: absolute;
            background-color: var(--highlighted-light-color);
            color: var(--background-color);
            padding: 10px;
            border-radius: 10px;
            display: inline-block;
            max-width: 12rem;
            font-size: 0.8rem;
            line-height: 1.2;
            bottom: 2rem;
            margin-left: -3rem;
            width: max-content;
            z-index: 1
        }

        .form-row lion-validation-feedback:not([type="error"]) {
            display: none;
        }
        
        .form-row lion-validation-feedback::before {
            content: '';
            position: absolute;
            bottom: -18px;
            left: 10%;
            margin-left: -10px;
            border: 10px solid transparent;
            border-top: 15px solid var(--highlighted-light-color);
        }
        
    `];function ap(e=1/0){return t=>t.slice(0,e)}let op=class extends hd{static get styles(){return[sp,o`
                ::slotted(form), .input-group * {
                    flex: 1;
                }
                
            `]}};op=rp([ue("kana-form")],op);let lp=class extends vd{static get styles(){return[sp]}};lp=rp([ue("kana-input")],lp);let cp=class extends Ad{static get styles(){return[sp]}};cp=rp([ue("kana-options")],cp);let up=class extends kd{};up=rp([ue("kana-option")],up);let hp=class extends Cd{static get styles(){return[o`
                :host {
                    position: relative;
                    display: inline-flex;
                }
                :host::after {
                    content: '';
                    display: block;
                    position: absolute;
                    right: 10px;
                    top: 50%;
                    transform: translateY(-50%);
                    border-left: 5px solid transparent;
                    border-right: 5px solid transparent;
                    border-top: 7px solid var(--foreground-color);
                    pointer-events: none;
               }
            `,sp]}};hp=rp([ue("kana-select")],hp);let dp=class extends np{static get styles(){return[sp]}};dp=rp([ue("kana-input-amount")],dp);let pp=class extends Rd{static get styles(){return[sp]}};pp=rp([ue("kana-input-stepper")],pp);const fp=(sd.getMessage=async()=>"Please, enter a value",sd);let gp=class extends le{static get styles(){return[o`
                :host {
                    background-color: var(--foreground-color);
                    color: var(--background-color);
                    border-radius: 1rem;
                    padding: 1rem;
                    display: flex;
                    flex: 1 1 auto;
                    width: 32rem;
                    max-width: 100%;
                    flex-direction: column;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                    box-sizing: border-box;
                }
            `]}render(){return V`
            <slot></slot>
        `}};gp=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}([ue("kana-windowlet")],gp);const mp=e=>"string"==typeof e;class yp extends nd{static get validatorName(){return"EqualsLength"}execute(e,t=this.param){let n=!1;return mp(e)&&e.length===t||(n=!0),n}}class bp extends nd{static get validatorName(){return"MinLength"}execute(e,t=this.param){let n=!1;return(!mp(e)||e.length<t)&&(n=!0),n}}class vp extends nd{static get validatorName(){return"MaxLength"}execute(e,t=this.param){let n=!1;return(!mp(e)||e.length>t)&&(n=!0),n}}class wp extends nd{static get validatorName(){return"MinMaxLength"}execute(e,{min:t=0,max:n=0}=this.param){let r=!1;return(!mp(e)||e.length<t||e.length>n)&&(r=!0),r}}const Ap=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;class _p extends nd{static get validatorName(){return"IsEmail"}execute(e){let t=!1;return mp(e)&&Ap.test(e.toLowerCase())||(t=!0),t}}class Ep extends nd{static get validatorName(){return"Pattern"}execute(e,t=this.param){if(!(t instanceof RegExp))throw new Error('Psst... Pattern validator expects RegExp object as parameter e.g, new Pattern(/#LionRocks/) or new Pattern(RegExp("#LionRocks")');let n=!1;return mp(e)&&((e,t)=>t.test(e))(e,t)||(n=!0),n}}function kp(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate())}function xp(e){return"[object Date]"===Object.prototype.toString.call(e)&&!Number.isNaN(e.getTime())}class Cp extends nd{static get validatorName(){return"IsDate"}execute(e){let t=!1;return xp(e)||(t=!0),t}}class Np extends nd{static get validatorName(){return"MinDate"}execute(e,t=this.param){let n=!1;return(!xp(e)||kp(e)<kp(t))&&(n=!0),n}}class Pp extends nd{static get validatorName(){return"MaxDate"}execute(e,t=this.param){let n=!1;return(!xp(e)||kp(e)>kp(t))&&(n=!0),n}}class Sp extends nd{static get validatorName(){return"MinMaxDate"}execute(e,{min:t=0,max:n=0}=this.param){let r=!1;return(!xp(e)||kp(e)<kp(t)||kp(e)>kp(n))&&(r=!0),r}}class Op extends nd{static get validatorName(){return"IsDateDisabled"}execute(e,t=this.param){let n=!1;return xp(e)&&!t(e)||(n=!0),n}}class Bp extends rd{constructor(...e){super(...e),this.type="success"}executeOnResults({regularValidationResult:e,prevShownValidationResult:t}){const n=e=>"error"===e.type||"warning"===e.type,r=!!e.filter(n).length,s=!!t.filter(n).length;return!r&&s}}let Rp;class Tp{static async loadLibPhoneNumber(){const e=(await a.e(612).then(a.bind(a,612))).default;return this.PhoneUtil=e,Rp(void 0),e}static get isLoaded(){return Boolean(this.PhoneUtil)}}function Ip(e,t){const n=Tp.PhoneUtil;let r=!1;if(t&&e?.length>=4&&e?.length<=16){let s;try{if(s=n(e,t),r=s.g.regionCode!==t,r)return"invalid-country-code"}catch(e){}const i=!s.isValid()&&s.g.possibility;return"is-possible"===i?"unknown":i}return"unknown"}Tp.loadComplete=new Promise((e=>{Rp=e})),Tp.loadLibPhoneNumber();class Fp extends nd{static validatorName="PhoneNumber";static get async(){return!Tp.isLoaded}execute(e,t){return Tp.isLoaded?Ip(e,t):new Promise((n=>{Tp.loadComplete.then((()=>{n(Ip(e,t))}))}))}}let Lp=!1;function Up(){if(!0===Lp)return;const e=()=>Zh.loadNamespace({"lion-validate":e=>{switch(e){case"bg-BG":return a.e(642).then(a.bind(a,642));case"bg":return a.e(779).then(a.bind(a,779));case"cs-CZ":return a.e(273).then(a.bind(a,718));case"cs":return a.e(921).then(a.bind(a,921));case"de-DE":return a.e(944).then(a.bind(a,944));case"de":return a.e(254).then(a.bind(a,254));case"en-AU":return a.e(233).then(a.bind(a,233));case"en-GB":return a.e(414).then(a.bind(a,414));case"en-US":return a.e(896).then(a.bind(a,896));case"en-PH":return a.e(339).then(a.bind(a,339));case"en":default:return a.e(422).then(a.bind(a,422));case"es-ES":return a.e(967).then(a.bind(a,967));case"es":return a.e(704).then(a.bind(a,704));case"fr-FR":return a.e(797).then(a.bind(a,797));case"fr-BE":return a.e(952).then(a.bind(a,952));case"fr":return a.e(35).then(a.bind(a,35));case"hu-HU":return a.e(208).then(a.bind(a,208));case"hu":return a.e(363).then(a.bind(a,363));case"it-IT":return a.e(718).then(a.bind(a,334));case"it":return a.e(246).then(a.bind(a,246));case"nl-BE":return a.e(211).then(a.bind(a,211));case"nl-NL":return a.e(920).then(a.bind(a,920));case"nl":return a.e(136).then(a.bind(a,136));case"pl-PL":return a.e(124).then(a.bind(a,124));case"pl":return a.e(946).then(a.bind(a,946));case"ro-RO":return a.e(973).then(a.bind(a,973));case"ro":return a.e(541).then(a.bind(a,541));case"ru-RU":return a.e(527).then(a.bind(a,527));case"ru":return a.e(470).then(a.bind(a,470));case"sk-SK":return a.e(197).then(a.bind(a,197));case"sk":return a.e(976).then(a.bind(a,976));case"uk-UA":return a.e(425).then(a.bind(a,425));case"uk":return a.e(855).then(a.bind(a,855));case"zh-CN":case"zh":return a.e(859).then(a.bind(a,859))}}},{locale:Zh.locale}),t=async t=>(await e(),t?Zh.msg(`lion-validate:${t.type}.${t.name}`,t):"");sd.getMessage=async e=>t(e),yp.getMessage=async e=>t(e),bp.getMessage=async e=>t(e),vp.getMessage=async e=>t(e),wp.getMessage=async e=>t(e),Ep.getMessage=async e=>t(e),_p.getMessage=async e=>t(e),Pd.getMessage=async e=>t(e),Sd.getMessage=async e=>t(e),Od.getMessage=async e=>t(e),Bd.getMessage=async e=>t(e),Cp.getMessage=async e=>t(e),Np.getMessage=async e=>t(e),Pp.getMessage=async e=>t(e),Sp.getMessage=async e=>t(e),Op.getMessage=async e=>t(e),Bp.getMessage=async t=>{await e();const n=Zh.msg("lion-validate:success.RandomOk").split(","),r=n[Math.floor(Math.random()*n.length)].trim();return Zh.msg(`lion-validate:${r}`,t)},Fp.getMessage=async t=>{await e();const{type:n,outcome:r}=t;return Zh.msg(`lion-validate:${n}.Pattern`,t)},Lp=!0}const Dp=BigInt(-1),Mp=BigInt(0),jp=BigInt(1),Vp=BigInt(5),Hp={};let $p="0000";for(;$p.length<80;)$p+=$p;function Gp(e){let t=$p;for(;t.length<e;)t+=t;return BigInt("1"+t.substring(0,e))}function zp(e,t,n){const r=BigInt(t.width);if(t.signed){const t=jp<<r-jp;ft(null==n||e>=-t&&e<t,"overflow","NUMERIC_FAULT",{operation:n,fault:"overflow",value:e}),e=e>Mp?Tt(Ft(e,r),r):-Tt(Ft(-e,r),r)}else{const t=jp<<r;ft(null==n||e>=0&&e<t,"overflow","NUMERIC_FAULT",{operation:n,fault:"overflow",value:e}),e=(e%t+t)%t&t-jp}return e}function qp(e){"number"==typeof e&&(e=`fixed128x${e}`);let t=!0,n=128,r=18;if("string"==typeof e)if("fixed"===e);else if("ufixed"===e)t=!1;else{const s=e.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);gt(s,"invalid fixed format","format",e),t="u"!==s[1],n=parseInt(s[2]),r=parseInt(s[3])}else if(e){const s=e,i=(e,t,n)=>null==s[e]?n:(gt(typeof s[e]===t,"invalid fixed format ("+e+" not "+t+")","format."+e,s[e]),s[e]);t=i("signed","boolean",t),n=i("width","number",n),r=i("decimals","number",r)}return gt(n%8==0,"invalid FixedNumber width (not byte aligned)","format.width",n),gt(r<=80,"invalid FixedNumber decimals (too large)","format.decimals",r),{signed:t,width:n,decimals:r,name:(t?"":"u")+"fixed"+String(n)+"x"+String(r)}}class Qp{format;#gt;#mt;#yt;_value;constructor(e,t,n){bt(e,Hp,"FixedNumber"),this.#mt=t,this.#gt=n;const r=function(e,t){let n="";e<Mp&&(n="-",e*=Dp);let r=e.toString();if(0===t)return n+r;for(;r.length<=t;)r=$p+r;const s=r.length-t;for(r=r.substring(0,s)+"."+r.substring(s);"0"===r[0]&&"."!==r[1];)r=r.substring(1);for(;"0"===r[r.length-1]&&"."!==r[r.length-2];)r=r.substring(0,r.length-1);return n+r}(t,n.decimals);ct(this,{format:n.name,_value:r}),this.#yt=Gp(n.decimals)}get signed(){return this.#gt.signed}get width(){return this.#gt.width}get decimals(){return this.#gt.decimals}get value(){return this.#mt}#bt(e){gt(this.format===e.format,"incompatible format; use fixedNumber.toFormat","other",e)}#vt(e,t){return e=zp(e,this.#gt,t),new Qp(Hp,e,this.#gt)}#wt(e,t){return this.#bt(e),this.#vt(this.#mt+e.#mt,t)}addUnsafe(e){return this.#wt(e)}add(e){return this.#wt(e,"add")}#At(e,t){return this.#bt(e),this.#vt(this.#mt-e.#mt,t)}subUnsafe(e){return this.#At(e)}sub(e){return this.#At(e,"sub")}#_t(e,t){return this.#bt(e),this.#vt(this.#mt*e.#mt/this.#yt,t)}mulUnsafe(e){return this.#_t(e)}mul(e){return this.#_t(e,"mul")}mulSignal(e){this.#bt(e);const t=this.#mt*e.#mt;return ft(t%this.#yt===Mp,"precision lost during signalling mul","NUMERIC_FAULT",{operation:"mulSignal",fault:"underflow",value:this}),this.#vt(t/this.#yt,"mulSignal")}#Et(e,t){return ft(e.#mt!==Mp,"division by zero","NUMERIC_FAULT",{operation:"div",fault:"divide-by-zero",value:this}),this.#bt(e),this.#vt(this.#mt*this.#yt/e.#mt,t)}divUnsafe(e){return this.#Et(e)}div(e){return this.#Et(e,"div")}divSignal(e){ft(e.#mt!==Mp,"division by zero","NUMERIC_FAULT",{operation:"div",fault:"divide-by-zero",value:this}),this.#bt(e);const t=this.#mt*this.#yt;return ft(t%e.#mt===Mp,"precision lost during signalling div","NUMERIC_FAULT",{operation:"divSignal",fault:"underflow",value:this}),this.#vt(t/e.#mt,"divSignal")}cmp(e){let t=this.value,n=e.value;const r=this.decimals-e.decimals;return r>0?n*=Gp(r):r<0&&(t*=Gp(-r)),t<n?-1:t>n?1:0}eq(e){return 0===this.cmp(e)}lt(e){return this.cmp(e)<0}lte(e){return this.cmp(e)<=0}gt(e){return this.cmp(e)>0}gte(e){return this.cmp(e)>=0}floor(){let e=this.#mt;return this.#mt<Mp&&(e-=this.#yt-jp),e=this.#mt/this.#yt*this.#yt,this.#vt(e,"floor")}ceiling(){let e=this.#mt;return this.#mt>Mp&&(e+=this.#yt-jp),e=this.#mt/this.#yt*this.#yt,this.#vt(e,"ceiling")}round(e){if(null==e&&(e=0),e>=this.decimals)return this;const t=this.decimals-e,n=Vp*Gp(t-1);let r=this.value+n;const s=Gp(t);return r=r/s*s,zp(r,this.#gt,"round"),new Qp(Hp,r,this.#gt)}isZero(){return this.#mt===Mp}isNegative(){return this.#mt<Mp}toString(){return this._value}toUnsafeFloat(){return parseFloat(this.toString())}toFormat(e){return Qp.fromString(this.toString(),e)}static fromValue(e,t,n){const r=null==t?0:jt(t),s=qp(n);let i=Lt(e,"value");const a=r-s.decimals;if(a>0){const t=Gp(a);ft(i%t===Mp,"value loses precision for format","NUMERIC_FAULT",{operation:"fromValue",fault:"underflow",value:e}),i/=t}else a<0&&(i*=Gp(-a));return zp(i,s,"fromValue"),new Qp(Hp,i,s)}static fromString(e,t){const n=e.match(/^(-?)([0-9]*)\.?([0-9]*)$/);gt(n&&n[2].length+n[3].length>0,"invalid FixedNumber string value","value",e);const r=qp(t);let s=n[2]||"0",i=n[3]||"";for(;i.length<r.decimals;)i+=$p;ft(i.substring(r.decimals).match(/^0*$/),"too many decimals for format","NUMERIC_FAULT",{operation:"fromString",fault:"underflow",value:e}),i=i.substring(0,r.decimals);const a=BigInt(n[1]+s+i);return zp(a,r,"fromString"),new Qp(Hp,a,r)}static fromBytes(e,t){let n=Mt(wt(e,"value"));const r=qp(t);return r.signed&&(n=Tt(n,r.width)),zp(n,r,"fromBytes"),new Qp(Hp,n,r)}}const Jp=["wei","kwei","mwei","gwei","szabo","finney","ether"];function Kp(e,t){gt("string"==typeof e,"value must be a string","value",e);let n=18;if("string"==typeof t){const e=Jp.indexOf(t);gt(e>=0,"invalid unit","unit",t),n=3*e}else null!=t&&(n=jt(t,"unit"));return Qp.fromString(e,{decimals:n,width:512}).value}let Wp=class extends le{constructor(){super(),Up(),sd.getMessage=async()=>"Please, enter a value"}static get styles(){return[o`
                :host {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 2rem;
                    padding: 1rem;
                    flex: 1 1 0%;
                }

                h1 {
                    font-size: 3rem;
                    display: block;
                    width: 100%;
                }

                h2 {
                    font-size: 2rem;
                    margin: 0.5rem 0 0.5rem;
                }

                h3 {
                    font-size: 1.5rem;
                    margin: 0;
                }

                hr {
                    border: none;
                    height: 2px;
                    background-color: var(--background-light-color);
                    margin: 0.5rem 0 1rem;
                }

                kana-input, input, kana-select {
                    flex: 1;
                    font-size: 1rem;
                    position: relative;
                }

                input, select {
                    font-family: sans;
                }

                input {
                    padding: 10px;
                    border: none;
                    border-radius: 5px;
                    background-color: var(--primary-color);
                    color: var(--foreground-color);
                    box-sizing: border-box;
                }
                
                input:focus {
                    outline: none;
                    box-shadow: 0 0 0 2px var(--highlighted-light-color);
                }

                .small-input, .small-input * {
                    flex: 0;
                }

                .small-input input {
                    width: 8rem;
                }

                .form-row {
                    display: flex;
                    gap: 1rem;
                    margin: 10px 0;
                    flex-flow: row wrap;
                }

                select {
                    padding: 10px;
                    padding-right: 2rem;
                    border: none;
                    border-radius: 5px;
                    background-color: var(--primary-color);
                    color: var(--foreground-color);
                    font-size: 1rem;
                    appearance: none;
                    cursor: pointer;
                    flex: 1;
                }
                
                select:focus {
                    outline: none;
                    box-shadow: 0 0 0 2px var(--highlighted-light-color);
                }
                
                
                kana-button-submit {
                    min-width: fit-content;
                    flex: 1;
                    font-size: 1.2rem;
                    min-height: 3rem;
                }

                kana-windowlet {
                    max-width: 32rem;
                    flex: 0 1 auto;
                }
            `,o`
                .form-row lion-validation-feedback {
                    position: absolute;
                    background-color: var(--highlighted-light-color);
                    color: var(--background-color);
                    padding: 10px;
                    border-radius: 10px;
                    display: inline-block;
                    max-width: 12rem;
                    font-size: 0.8rem;
                    line-height: 1.2;
                    bottom: 2rem;
                    margin-left: -3rem;
                    width: max-content;
                    z-index: 1
                }

                .form-row lion-validation-feedback:not([type="error"]) {
                    display: none;
                }
                
                .form-row lion-validation-feedback::before {
                    content: '';
                    position: absolute;
                    bottom: -18px;
                    left: 10%;
                    margin-left: -10px;
                    border: 10px solid transparent;
                    border-top: 15px solid var(--highlighted-light-color);
                }
                
            `]}async submitHandler(e){let t=e.target;if(t.hasFeedbackFor.includes("error"))return void t.formElements.find((e=>e.hasFeedbackFor.includes("error"))).focus();const n=e.target.modelValue,r=new Fi(sh._N,["function allowance(address owner, address spender) view returns (uint256)","function approve(address spender, uint256 amount) returns (bool)"],fh.signer);await r.allowance(fh.signer,sh.jA)<BigInt(Kp("20000"))&&await(await r.approve(sh.jA,Kp("20000"))).wait(),await fh.projectRegistry.newProject({projectName:n.name,abbreviation:n.abbreviation,description:n.description})}render(){return V`
            <h1>New Project</h1>
            <kana-windowlet>
                <h2>New project</h2>
                <h3>Begin your journey</h3>
                <hr />
                <label>Project info</label>
                <kana-form @submit="${this.submitHandler}">
                    <form @submit=${e=>e.preventDefault()}>
                        <div class="form-row">
                            <kana-input
                                label-sr-only="Name"
                                placeholder="Name"
                                name="name"
                                .validators="${[new wp({min:4,max:16}),new sd]}"
                                .preprocessor=${ap(16)}
                            ></kana-input>
                            <kana-input
                                label-sr-only="Abbreviation"
                                placeholder="Abbreviation"
                                name="abbreviation"
                                class="small-input"
                                .validators="${[new wp({min:2,max:8}),new sd]}"
                                .preprocessor=${ap(8)}
                            ></kana-input>
                        </div>
                        <div class="form-row">
                            <kana-input
                                label-sr-only="Description"
                                placeholder="Description (maximum 64 characters)"
                                name="description"
                                .validators="${[new wp({min:0,max:64})]}"
                                .preprocessor=${ap(64)}
                            ></kana-input>
                        </div>
                        <div class="form-row">
                            <kana-button-submit>
                                Deploy new project (20000 $KANA)
                            </kana-button-submit>
                        </div>
                    </form>
                </kana-form>
            </kana-windowlet>
        `}};Wp=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}([ue("new-project-page")],Wp);var Yp=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};let Zp=class extends mh{async fetchData(){this.isLoading=!0;const e=[],t=new Fi(this.address,["function balanceOf(address owner) view returns (uint256 balance)","function name() view returns (string)","function symbol() view returns (string)","function contractsRepositoryLength() view returns (uint256)","function getContracts(uint256 from, uint256 to) view returns (address[])"],fh.wallet),n=["function name() view returns (string)"];let r=await t.contractsRepositoryLength();if(0!=r){let s=await t.getContracts(0,r);for(let t of s){const r=new Fi(t,n,fh.wallet),s=await r.name();e.push(new Oe({name:s,button:{text:"Edit (coming soon)",link:`/contracts/${t}`},address:t,description:""}))}}this.isLoading=!1,this.items=e}render(){return V`
            <h1>${this.name}</h1>
            <div class="cards">
                ${it(this.isLoading,(()=>V`<kana-loading-screen></kana-loading-screen>`),(()=>st(this.items,(e=>e.name),(e=>V`${e}`))))}
            </div>
            <a href="${this.address}/new-contract">
                <kana-button>Create new contract</kana-button>
            </a>
        `}};Yp([de({type:String})],Zp.prototype,"name",void 0),Yp([de({type:String})],Zp.prototype,"address",void 0),Zp=Yp([ue("contracts-page")],Zp);class Xp extends le{constructor(){super()}static get styles(){return ip}}Xp.formAssociated=!0,BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),BigInt("1000000000000000000");const ef=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),tf=(BigInt("0x8000000000000000000000000000000000000000000000000000000000000000"),BigInt(-1),BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),function(e,t,n){const r=n.get,s=n.set;if(null==r||null==s)throw new TypeError(`Property ${t} does not have a getter or setter.`);n.get=function(){const e=r.call(this);return void 0!==e?e:this.hasAttribute(t)?this.getAttribute(t):void 0},n.set=function(e){this[t]!==e&&(null!=e?this.setAttribute(t,String(e)):this.removeAttribute(t)),s.call(this,e)}});function nf(e){return function(t,n,r){const s=r.set,i=r.get;if(null==s||null==i)throw new TypeError(`Property ${n} does not have a getter or setter.`);return r.set=function(t){s.call(this,t);const r=e.call(this);null!=t?r.setAttribute(n,String(t)):r.removeAttribute(n)},r}}function rf(e,t){return(n,r,s)=>{n.hasOwnProperty("_eventHandlers")||Object.defineProperty(n,"_eventHandlers",{enumerable:!1,value:[...n._eventHandlers||[]]}),n._eventHandlers.push({handler:s.value,event:e,options:t})}}var sf,af,of,lf,cf=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a},uf=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},hf=function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n};function df(){return this.getInnerElement()}class pf extends HTMLElement{get name(){return uf(this,sf,"f")}set name(e){hf(this,sf,e,"f")}get disabled(){return uf(this,af,"f")}set disabled(e){hf(this,af,e,"f")}get readOnly(){return uf(this,of,"f")}set readOnly(e){hf(this,of,e,"f")}get invalid(){return uf(this,lf,"f")}set invalid(e){hf(this,lf,e,"f")}static get observedAttributes(){return["name","disabled","readOnly","invalid"]}constructor(){super(),sf.set(this,void 0),af.set(this,void 0),of.set(this,void 0),lf.set(this,void 0),this.elementInternals=this.attachInternals(),this.attachShadow({mode:"open"}),function(e){for(const t of e._eventHandlers)e.addEventListener(t.event,t.handler,t.options)}(this)}connectedCallback(){this.shadowRoot.innerHTML="",this.shadowRoot.append(this.getInnerElement()),this.dispatchEvent(new CustomEvent("input-connected",{detail:this,bubbles:!0,composed:!0}))}disconnectedCallback(){this.dispatchEvent(new CustomEvent("input-disconnected",{detail:this,bubbles:!0,composed:!0}))}handleInputDisconnected(e){e.stopPropagation()}handleInputConnected(e){e.stopPropagation()}}sf=new WeakMap,af=new WeakMap,of=new WeakMap,lf=new WeakMap,pf.formAssociated=!0,cf([tf],pf.prototype,"name",null),cf([tf,nf(df)],pf.prototype,"disabled",null),cf([tf,nf(df)],pf.prototype,"readOnly",null),cf([tf,nf(df)],pf.prototype,"invalid",null),cf([function(e,t,n){const r=n.value;return n.value=function(){const e=this.constructor.observedAttributes;console.log("hello there");for(const t of e)if(this.hasAttribute(t)){const e=this.getAttribute(t);this[t]=e}this.connectedCallback=r,r.apply(this)},n}],pf.prototype,"connectedCallback",null),cf([rf("input-disconnected",{capture:!0})],pf.prototype,"handleInputDisconnected",null),cf([rf("input-connected",{capture:!0})],pf.prototype,"handleInputConnected",null);var ff;const gf=e=>{switch(e){case"datalist":case"fieldset":case"select":case"textarea":return e;default:return"input"}},mf=["datalist","select","fieldset"];class yf extends pf{constructor(){super(...arguments),ff.set(this,"text")}getInnerElement(){return this.inputElement}static get observedAttributes(){return[...super.observedAttributes,"type"]}get type(){return function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}(this,ff,"f")}set type(e){!function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?s.call(e,n):s?s.value=n:t.set(e,n)}(this,ff,e,"f")}set value(e){switch(this.type){case"select":case"datalist":if("object"==typeof e&&!Array.isArray(e)&&null!=e)throw new TypeError("Cannot assign object to selectlike field");if(bf(this.inputElement).forEach((e=>e.selected=!1)),null!=e){const t=Array.isArray(e)?e:[e];for(const e of t){const t=this.inputElement.querySelector(`[name="${e}"]`);if(null==t)throw new RangeError("Option does not exist");t.selected=!0}}break;case"fieldset":if("object"!=typeof e||Array.isArray(e)||null==e)throw new TypeError("Attempting to set fieldset with non-object")}}get value(){switch(this.type){case"select":case"datalist":{const e=bf(this.inputElement).map((e=>e.value));return 1==e.length?e[0]:0==e.length?null:e}case"fieldset":{const e={};return Array.from(this.inputElement?.children||[]).forEach((t=>{"value"in t&&"name"in t&&(e[t.name]=t.value)})),e}default:return this.inputElement.value}}render(){return this.inputElement.setAttribute("name",this.name||""),this.inputElement[null!=this.value?"setAttribute":"removeAttribute"]("value",this.value.toString()),this.inputElement[this.disabled?"setAttribute":"removeAttribute"]("disabled",""),this.inputElement[this.readOnly?"setAttribute":"removeAttribute"]("readonly",""),mf.includes(this.type)&&(this.append(document.createElement("slot")),Array.from(this.children).forEach((e=>{this.inputElement?.append(e)}))),this.inputElement}reset(){this.inputElement=document.createElement(gf(this.type)),this.value="",this.invalid=!1,this.disabled=this.disabled,this.readOnly=this.readOnly}attributeChangedCallback(e,t,n){if(t!=n&&"type"===e){const e=gf(n);this.inputElement=document.createElement(e),"input"===e&&this.inputElement.setAttribute("type",n)}}}function bf(e){return Array.from(e.querySelectorAll("> option:selected"))}ff=new WeakMap,function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);i>3&&a&&Object.defineProperty(t,n,a)}([tf],yf.prototype,"type",null),window.customElements.define("pulpito-input",yf);const vf="erc20-form";let wf=class extends Xp{constructor(){super()}value(){const e=new FormData(this.shadowRoot.querySelector("form"));return{symbol:e.get("symbol").toString(),decimals:e.get("decimals").toString(),supply:BigInt(this.shadowRoot.querySelector("[name=max-supply]").modelValue)*BigInt(10)**BigInt(e.get("decimals").toString())}}render(){return V`
            <h2>ERC20 module</h2>
            <hr>
            <h3>The fungible token standard</h3>
            <kana-form>

            <form>
                <span>
                    <label>Symbol</label>
                    <br/>
                    <kana-input
                        label-sr-only="Symbol"
                        placeholder="ie. USDC, BTC..."
                        name="symbol"
                        .validators="${[new wp({min:2,max:8}),new fp]}"
                        .preprocessor=${ap(8)}
                        class="small-input"
                    ></kana-input>
                </span>
                <span>
                    <kana-select
                        label-sr-only="Supply type"
                        name="supply-type"
                        placeholder="Supply type"
                        .validators=${[new fp]}
                    >
                        <select name="supply-type" slot="input">
                            <option hidden selected value>
                                Select supply type
                            </option>
                            <option value="fixed">
                                Fixed supply
                            </option>
                            <option hidden value="variable">
                                Variable supply
                            </option>
                        </select>
                    </kana-select>
                </div>
                <div class="form-row">
                    <span>
                        <label>Maximum supply</label>
                        <br/>
                        <kana-input-amount
                            label-sr-only="Maximum supply"
                            placeholder="Maximum supply"
                            name="max-supply"
                            .validators="${[new Sd(1),new Od(ef),new fp]}"
                            .preprocessor=${e=ef,t=>{let n=BigInt(t.replace(/[^0-9]/g,""));return n>e&&(n=e),n.toString()}}
                        ></kana-input-amount>
                    </span>
                    <span>
                        <label>Token decimals</label>
                        <br/>
                        <kana-input-stepper
                            label-sr-only="Token decimals"
                            value="18"
                            name="decimals"
                            .validators="${[new fp]}"
                            min="0"
                            max="32"
                        ></kana-input-stepper>
                    </span>
                </form>
            </kana-form>

        `;var e}};wf.formAssociated=!0,wf=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}([ue(vf)],wf);const Af=()=>[{name:"ERC20",value:"erc20",customElement:vf}],_f=()=>[...Af()];function Ef(e,t){return(n,r,s)=>{null==n._eventHandlers&&Object.defineProperty(n,"_eventHandlers",{enumerable:!1,value:[]}),n._eventHandlers.push({handler:s.value,event:e,options:t})}}var kf=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};let xf=class extends le{constructor(){super(),this.basicModules=Af(),this.allModules=_f(),function(e){for(let t of e._eventHandlers)e.addEventListener(t.event,t.handler,t.options)}(this),Up()}static get styles(){return[me,o`
                :host {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 2rem;
                    padding: 1rem;
                    flex: 1 1 0%;
                }

                .expanded {
                    flex: 1 1 max-content;
                }

                kana-form {
                    width: 100%;
                    height: 100%;
                }
        
                kana-form > form {
                    display: flex;
                    flex: 0 1 max-content;
                    margin: 0 auto;
                    transition: flex 0.1s;
                    gap: 1rem;
                    height: 100%;
                }
                
                .contract-overview-group {
                    display: flex;
                    flex-flow: column wrap;
                    gap: 1rem;
                }
            `]}async submitHandler(e){const t=function e(t,n){const r=Array.from(t.querySelectorAll(n));return Array.from(t.querySelectorAll("*")).map((e=>e.shadowRoot)).filter((e=>!!e)).map((t=>{r.push(...e(t,n))})),r}(this.shadowRoot,"kana-form");for(const e of Array.from(t))if(e.validate(),e.hasFeedbackFor.includes("error"))return void e.formElements.find((e=>e.hasFeedbackFor.includes("error"))).focus();let n={};for(const e of Array.from(t))n={...n,...e.modelValue};console.log(sh._N),console.log(fh.signer?.getAddress());const r=new Fi(sh._N,["function allowance(address owner, address spender) view returns (uint256)","function approve(address spender, uint256 amount) returns (bool)"],fh.signer);await r.allowance(fh.signer,sh.jA)<BigInt(Kp("320000"))&&await(await r.approve(sh.jA,Kp("320000"))).wait(),fh.projectRegistry.newContract({name:n.name,project:this.name,genesisModules:[{moduleSignature:"0xa7ea6982eb398487d571bb8d7880d038a52a2e20501e5d89251b0d77e2179769",initParams:us.defaultAbiCoder().encode(["string","string","uint8","uint256","address"],[n.name,n.symbol,n.decimals,BigInt(n["max-supply"])*10n**BigInt(n.decimals),await(fh.signer?.getAddress())])}],payment:sh._N})}captureSubmit(){this.shadowRoot.querySelector("kana-form").dispatchEvent(new Event("submit"))}expandForm(e){this.expandedMode=!0}baseTypeSelected(e){const t=e.detail.contractType;this.selectedBaseModule=t}moduleTabSelected(e){const t=e.detail.tabInfo,n=t.instance?t.instance:document.createElement(t.customElement);this.selectedForm=n}render(){return V`
            ${it(!this.expandedMode,(()=>V`
                        <h1 id="page-title">
                            New contract for ${this.name}
                        </h1>
                    `))}
            <kana-form @submit=${this.submitHandler}>
                <form 
                    @submit=${e=>e.preventDefault()}
                    class="${this.expandedMode?"expanded":""}"
                >
                    <div class="contract-overview-group">
                        <kana-fieldset name="base-module-config">
                            <new-contract-base-windowlet
                                .moduleList=${this.basicModules}
                            >
                            </new-contract-base-windowlet>
                        </kana-fieldset>
                        ${this.expandedMode?V`
                                <modules-windowlet 
                                    .baseModule=${this.selectedBaseModule}
                                    .moduleList=${this.allModules}
                                >
                                </modules-windowlet>
                            `:""}
                    </div>
                    ${this.selectedForm?V`
                                <kana-windowlet>
                                    ${this.selectedForm}
                                </kana-windowlet>
                            `:null}
                </form>
            </kana-form>
        `}};kf([de({type:String})],xf.prototype,"name",void 0),kf([de({type:String})],xf.prototype,"address",void 0),kf([de({type:Boolean})],xf.prototype,"expandedMode",void 0),kf([pe()],xf.prototype,"selectedBaseModule",void 0),kf([pe()],xf.prototype,"selectedForm",void 0),kf([Ef("submit-form",{capture:!0})],xf.prototype,"captureSubmit",null),kf([Ef("base-selected",{once:!0})],xf.prototype,"expandForm",null),kf([Ef("base-selected",{capture:!0})],xf.prototype,"baseTypeSelected",null),kf([Ef("tab-changed",{capture:!0})],xf.prototype,"moduleTabSelected",null),xf=kf([ue("new-contract-page")],xf);let Cf=class extends gp{constructor(){super()}connectedCallback(){super.connectedCallback()}static get styles(){return[...super.styles,...ip]}selectContractType(e){const t=e.target.value;this.dispatchEvent(new CustomEvent("base-selected",{bubbles:!0,composed:!0,detail:{contractType:t}})),this.dispatchEvent(new CustomEvent("tab-changed",{bubbles:!0,composed:!0,detail:{tabInfo:this.moduleList.find((e=>e.value==t))}}))}render(){return V`
            <kana-form><form>
            <h2 id="contract-title">
                ${null==this.name||""==this.name?"New contract":this.name}
            </h2>
            <hr />
            <label>Project info</label>
            <div class="form-row">
                <kana-input
                    label-sr-only="Contract name"
                    placeholder="Contract name"
                    name="name"
                    .validators="${[new wp({min:4,max:16}),new fp]}"
                    .preprocessor=${ap(16)}
                    @input=${e=>this.name=e.target.value}
                ></kana-input>
                <kana-select
                    label-sr-only="Contract type"
                    name="type"
                    placeholder="Contract type"
                    class="small-input"
                    .validators=${[new fp]}
                    @change=${this.selectContractType}
                >
                    <select name="type-select" slot="input">
                        <option hidden selected value>
                            Select type
                        </option>
                        ${st(this.moduleList,(e=>e.value),(e=>V`
                                    <option
                                        name="${e.name}"
                                        value="${e.value}"
                                    >
                                        ${e.name}
                                    </option>
                                `))}
                    </select>
                </kana-select>
            </div>
            <div class="form-row">
                <kana-button-submit @click=${()=>this.dispatchEvent(new CustomEvent("submit-form",{bubbles:!0,composed:!0}))}>
                    Deploy new contract (320000 $KANA)
                </kana-button-submit>
            </div>
            </form></kana-form>
        `}};Cf.formAssociated=!0,kf([de({type:String})],Cf.prototype,"name",void 0),Cf=kf([ue("new-contract-base-windowlet")],Cf);let Nf=class extends gp{static get styles(){return[...super.styles,o`
                :host {
                    padding: 0;
                    overflow-x: hidden;
                    flex: 1;
                }

                ul {
                    list-style: none;
                    padding: 0;
                    margin: 0;
                    overflow: scroll;
                    flex: 1 1 0;
                }
                
                li {
                    display: flex;
                    align-items: center;
                    padding: 0 1rem;
                    user-select: none;
                    box-sizing: border-box;
                }

                .base-module {
                    background-color: var(--primary-light-color);
                    color: var(--foreground-light-color);
                    position: sticky;
                    border-radius: inherit inherit 0 0;
                    height: 3.2rem;
                    width: 100%;
                }

                .redundant-container {
                    max-height: 100%;
                    overflow-y: auto;
                }

                input[type="radio"] {
                    display: none;
                }
            `]}constructor(){super()}onClickRadioHandler(e){const t=e.currentTarget.querySelector("input");t.checked=!0,t.dispatchEvent(new Event("change"))}radioHandlerChanged(e){this.dispatchEvent(new CustomEvent("tab-changed",{bubbles:!0,composed:!0,detail:{tabInfo:e.currentTarget.moduleInfo}}))}render(){const e=this.moduleList.find((e=>e.value==this.baseModule)),t=this.moduleList.filter((e=>_f().includes(e)));return V`
            <ul>
                <li 
                    class="base-module"
                    @click=${this.onClickRadioHandler}
                >
                    <input type="radio"
                        name="_selectedModule"
                        value="${e.value}"
                        .moduleInfo=${e}
                        @change=${this.radioHandlerChanged}
                        checked 
                    />
                    ${e.name}
                </li>
                <li style="margin-top: 15px; color: grey;">Hmm... there seem to be no available plugins for this contract type yet.</li>
                ${st(t,(e=>V`
                            <li @click=${this.onClickRadioHandler}>
                                <input type="radio"
                                    name="_selectedModule"
                                    value="${e.value}"
                                    .moduleInfo=${e}
                                    @change=${this.radioHandlerChanged}                        
                                />
                                ${e.name}
                            </li>
                        `))}
            </ul>

        `}};kf([de({type:String})],Nf.prototype,"baseModule",void 0),Nf=kf([ue("modules-windowlet")],Nf);var Pf=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};class Sf extends pf{getInnerElement(){return this.form}constructor(){super(),this.value="",this.form=document.createElement("form"),this.fields=new Set,Array.from(this.children).forEach((e=>this.form.append(e))),this.append(this.form)}handleInputConnected(e){this.fields.add(e.detail),console.log("added"),e.stopPropagation()}handleInputDisconnected(e){this.fields.delete(e.detail),console.log("removed"),e.stopPropagation()}}Pf([rf("input-connected",{capture:!0})],Sf.prototype,"handleInputConnected",null),Pf([rf("input-disconnected",{capture:!0})],Sf.prototype,"handleInputDisconnected",null),window.customElements.define("pulpito-form",Sf);var Of=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};let Bf=class extends le{render(){return V`
            <h1>${this.name}</h1>
        `}};Of([de({type:String})],Bf.prototype,"name",void 0),Bf=Of([ue("home-page")],Bf);const Rf=[{path:"/projects",component:"projects-page",name:"My projects",icon:"backup_table"},{path:"/new-project",component:"new-project-page",name:"New project",icon:"add_box"}],Tf=[{path:"/",component:"home-page",name:"HOME"},...Rf,{path:"/projects/:address",component:"contracts-page",action:async(e,t)=>{const n=new Fi(e.params.address,["function name() view returns (string)"],fh.wallet),r=await n.name(),s=t.component("contracts-page");return s.name=r,s.address=e.params.address,s}},{path:"/projects/:address/new-contract",component:"new-contract-page",action:async(e,t)=>{const n=new Fi(e.params.address,["function name() view returns (string)"],fh.wallet),r=await n.name(),s=t.component("new-contract-page");return s.name=`${r}`,s.address=e.params.address,s.expandedMode=!1,s}}];function If(e){return e=e||[],Array.isArray(e)?e:[e]}function Ff(e){return`[Vaadin.Router] ${e}`}const Lf="module",Uf="nomodule",Df=[Lf,Uf];function Mf(e){if(!e.match(/.+\.[m]?js$/))throw new Error(Ff(`Unsupported type for bundle "${e}": .js or .mjs expected.`))}function jf(e){if(!e||!qf(e.path))throw new Error(Ff('Expected route config to be an object with a "path" string property, or an array of such objects'));const t=e.bundle,n=["component","redirect","bundle"];if(!(zf(e.action)||Array.isArray(e.children)||zf(e.children)||Gf(t)||n.some((t=>qf(e[t])))))throw new Error(Ff(`Expected route config "${e.path}" to include either "${n.join('", "')}" or "action" function but none found.`));if(t)if(qf(t))Mf(t);else{if(!Df.some((e=>e in t)))throw new Error(Ff('Expected route bundle to include either "'+Uf+'" or "'+Lf+'" keys, or both'));Df.forEach((e=>e in t&&Mf(t[e])))}e.redirect&&["bundle","component"].forEach((t=>{t in e&&console.warn(Ff(`Route config "${e.path}" has both "redirect" and "${t}" properties, and "redirect" will always override the latter. Did you mean to only use "${t}"?`))}))}function Vf(e){If(e).forEach((e=>jf(e)))}function Hf(e,t){let n=document.head.querySelector('script[src="'+e+'"][async]');return n||(n=document.createElement("script"),n.setAttribute("src",e),t===Lf?n.setAttribute("type",Lf):t===Uf&&n.setAttribute(Uf,""),n.async=!0),new Promise(((e,t)=>{n.onreadystatechange=n.onload=t=>{n.__dynamicImportLoaded=!0,e(t)},n.onerror=e=>{n.parentNode&&n.parentNode.removeChild(n),t(e)},null===n.parentNode?document.head.appendChild(n):n.__dynamicImportLoaded&&e()}))}function $f(e,t){return!window.dispatchEvent(new CustomEvent(`vaadin-router-${e}`,{cancelable:"go"===e,detail:t}))}function Gf(e){return"object"==typeof e&&!!e}function zf(e){return"function"==typeof e}function qf(e){return"string"==typeof e}function Qf(e){const t=new Error(Ff(`Page not found (${e.pathname})`));return t.context=e,t.code=404,t}const Jf=new class{};function Kf(e){if(e.defaultPrevented)return;if(0!==e.button)return;if(e.shiftKey||e.ctrlKey||e.altKey||e.metaKey)return;let t=e.target;const n=e.composedPath?e.composedPath():e.path||[];for(let e=0;e<n.length;e++){const r=n[e];if(r.nodeName&&"a"===r.nodeName.toLowerCase()){t=r;break}}for(;t&&"a"!==t.nodeName.toLowerCase();)t=t.parentNode;if(!t||"a"!==t.nodeName.toLowerCase())return;if(t.target&&"_self"!==t.target.toLowerCase())return;if(t.hasAttribute("download"))return;if(t.hasAttribute("router-ignore"))return;if(t.pathname===window.location.pathname&&""!==t.hash)return;const r=t.origin||function(e){const t=e.port,n=e.protocol;return`${n}//${"http:"===n&&"80"===t||"https:"===n&&"443"===t?e.hostname:e.host}`}(t);if(r!==window.location.origin)return;const{pathname:s,search:i,hash:a}=t;$f("go",{pathname:s,search:i,hash:a})&&(e.preventDefault(),e&&"click"===e.type&&window.scrollTo(0,0))}const Wf={activate(){window.document.addEventListener("click",Kf)},inactivate(){window.document.removeEventListener("click",Kf)}};function Yf(e){if("vaadin-router-ignore"===e.state)return;const{pathname:t,search:n,hash:r}=window.location;$f("go",{pathname:t,search:n,hash:r})}/Trident/.test(navigator.userAgent)&&!zf(window.PopStateEvent)&&(window.PopStateEvent=function(e,t){t=t||{};var n=document.createEvent("Event");return n.initEvent(e,Boolean(t.bubbles),Boolean(t.cancelable)),n.state=t.state||null,n},window.PopStateEvent.prototype=window.Event.prototype);const Zf={activate(){window.addEventListener("popstate",Yf)},inactivate(){window.removeEventListener("popstate",Yf)}};var Xf=function e(t,n,r){return t instanceof RegExp?function(e,t){if(!t)return e;var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,pattern:null});return e}(t,n):Array.isArray(t)?function(t,n,r){for(var s=[],i=0;i<t.length;i++)s.push(e(t[i],n,r).source);return new RegExp("(?:"+s.join("|")+")",ug(r))}(t,n,r):function(e,t,n){return hg(ag(e,n),t,n)}(t,n,r)},eg=ag,tg=og,ng=hg,rg="/",sg="./",ig=new RegExp(["(\\\\.)","(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?"].join("|"),"g");function ag(e,t){for(var n,r=[],s=0,i=0,a="",o=t&&t.delimiter||rg,l=t&&t.delimiters||sg,c=!1;null!==(n=ig.exec(e));){var u=n[0],h=n[1],d=n.index;if(a+=e.slice(i,d),i=d+u.length,h)a+=h[1],c=!0;else{var p="",f=e[i],g=n[2],m=n[3],y=n[4],b=n[5];if(!c&&a.length){var v=a.length-1;l.indexOf(a[v])>-1&&(p=a[v],a=a.slice(0,v))}a&&(r.push(a),a="",c=!1);var w=""!==p&&void 0!==f&&f!==p,A="+"===b||"*"===b,_="?"===b||"*"===b,E=p||o,k=m||y;r.push({name:g||s++,prefix:p,delimiter:E,optional:_,repeat:A,partial:w,pattern:k?cg(k):"[^"+lg(E)+"]+?"})}}return(a||i<e.length)&&r.push(a+e.substr(i)),r}function og(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,r){for(var s="",i=r&&r.encode||encodeURIComponent,a=0;a<e.length;a++){var o=e[a];if("string"!=typeof o){var l,c=n?n[o.name]:void 0;if(Array.isArray(c)){if(!o.repeat)throw new TypeError('Expected "'+o.name+'" to not repeat, but got array');if(0===c.length){if(o.optional)continue;throw new TypeError('Expected "'+o.name+'" to not be empty')}for(var u=0;u<c.length;u++){if(l=i(c[u],o),!t[a].test(l))throw new TypeError('Expected all "'+o.name+'" to match "'+o.pattern+'"');s+=(0===u?o.prefix:o.delimiter)+l}}else if("string"!=typeof c&&"number"!=typeof c&&"boolean"!=typeof c){if(!o.optional)throw new TypeError('Expected "'+o.name+'" to be '+(o.repeat?"an array":"a string"));o.partial&&(s+=o.prefix)}else{if(l=i(String(c),o),!t[a].test(l))throw new TypeError('Expected "'+o.name+'" to match "'+o.pattern+'", but got "'+l+'"');s+=o.prefix+l}}else s+=o}return s}}function lg(e){return e.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1")}function cg(e){return e.replace(/([=!:$/()])/g,"\\$1")}function ug(e){return e&&e.sensitive?"":"i"}function hg(e,t,n){for(var r=(n=n||{}).strict,s=!1!==n.start,i=!1!==n.end,a=lg(n.delimiter||rg),o=n.delimiters||sg,l=[].concat(n.endsWith||[]).map(lg).concat("$").join("|"),c=s?"^":"",u=0===e.length,h=0;h<e.length;h++){var d=e[h];if("string"==typeof d)c+=lg(d),u=h===e.length-1&&o.indexOf(d[d.length-1])>-1;else{var p=d.repeat?"(?:"+d.pattern+")(?:"+lg(d.delimiter)+"(?:"+d.pattern+"))*":d.pattern;t&&t.push(d),d.optional?d.partial?c+=lg(d.prefix)+"("+p+")?":c+="(?:"+lg(d.prefix)+"("+p+"))?":c+=lg(d.prefix)+"("+p+")"}}return i?(r||(c+="(?:"+a+")?"),c+="$"===l?"$":"(?="+l+")"):(r||(c+="(?:"+a+"(?="+l+"))?"),u||(c+="(?="+a+"|"+l+")")),new RegExp(c,ug(n))}Xf.parse=eg,Xf.compile=function(e,t){return og(ag(e,t))},Xf.tokensToFunction=tg,Xf.tokensToRegExp=ng;const{hasOwnProperty:dg}=Object.prototype,pg=new Map;function fg(e){try{return decodeURIComponent(e)}catch(t){return e}}function gg(e,t,n,r,s){let i,a,o=0,l=e.path||"";return"/"===l.charAt(0)&&(n&&(l=l.substr(1)),n=!0),{next(c){if(e===c)return{done:!0};const u=e.__children=e.__children||e.children;if(!i&&(i=function(e,t,n,r,s){const i=`${e}|${n=!!n}`;let a=pg.get(i);if(!a){const t=[];a={keys:t,pattern:Xf(e,t,{end:n,strict:""===e})},pg.set(i,a)}const o=a.pattern.exec(t);if(!o)return null;const l=Object.assign({},s);for(let e=1;e<o.length;e++){const t=a.keys[e-1],n=t.name,r=o[e];void 0===r&&dg.call(l,n)||(t.repeat?l[n]=r?r.split(t.delimiter).map(fg):[]:l[n]=r?fg(r):r)}return{path:o[0],keys:(r||[]).concat(a.keys),params:l}}(l,t,!u,r,s),i))return{done:!1,value:{route:e,keys:i.keys,params:i.params,path:i.path}};if(i&&u)for(;o<u.length;){if(!a){const r=u[o];r.parent=e;let s=i.path.length;s>0&&"/"===t.charAt(s)&&(s+=1),a=gg(r,t.substr(s),n,i.keys,i.params)}const r=a.next(c);if(!r.done)return{done:!1,value:r.value};a=null,o++}return{done:!0}}}}function mg(e){if(zf(e.route.action))return e.route.action(e)}pg.set("|false",{keys:[],pattern:/(?:)/});class yg{constructor(e,t={}){if(Object(e)!==e)throw new TypeError("Invalid routes");this.baseUrl=t.baseUrl||"",this.errorHandler=t.errorHandler,this.resolveRoute=t.resolveRoute||mg,this.context=Object.assign({resolver:this},t.context),this.root=Array.isArray(e)?{path:"",__children:e,parent:null,__synthetic:!0}:e,this.root.parent=null}getRoutes(){return[...this.root.__children]}setRoutes(e){Vf(e);const t=[...If(e)];this.root.__children=t}addRoutes(e){return Vf(e),this.root.__children.push(...If(e)),this.getRoutes()}removeRoutes(){this.setRoutes([])}resolve(e){const t=Object.assign({},this.context,qf(e)?{pathname:e}:e),n=gg(this.root,this.__normalizePathname(t.pathname),this.baseUrl),r=this.resolveRoute;let s=null,i=null,a=t;function o(e,l=s.value.route,c){const u=null===c&&s.value.route;return s=i||n.next(u),i=null,e||!s.done&&function(e,t){let n=t;for(;n;)if(n=n.parent,n===e)return!0;return!1}(l,s.value.route)?s.done?Promise.reject(Qf(t)):(a=Object.assign(a?{chain:a.chain?a.chain.slice(0):[]}:{},t,s.value),function(e,t){const{route:n,path:r}=t;if(n&&!n.__synthetic){const t={path:r,route:n};if(e.chain){if(n.parent){let t=e.chain.length;for(;t--&&e.chain[t].route&&e.chain[t].route!==n.parent;)e.chain.pop()}}else e.chain=[];e.chain.push(t)}}(a,s.value),Promise.resolve(r(a)).then((t=>null!=t&&t!==Jf?(a.result=t.result||t,a):o(e,l,t)))):(i=s,Promise.resolve(Jf))}return t.next=o,Promise.resolve().then((()=>o(!0,this.root))).catch((e=>{const t=function(e){let t=`Path '${e.pathname}' is not properly resolved due to an error.`;const n=(e.route||{}).path;return n&&(t+=` Resolution had failed on route: '${n}'`),t}(a);if(e?console.warn(t):e=new Error(t),e.context=e.context||a,e instanceof DOMException||(e.code=e.code||500),this.errorHandler)return a.result=this.errorHandler(e),a;throw e}))}static __createUrl(e,t){return new URL(e,t)}get __effectiveBaseUrl(){return this.baseUrl?this.constructor.__createUrl(this.baseUrl,document.baseURI||document.URL).href.replace(/[^\/]*$/,""):""}__normalizePathname(e){if(!this.baseUrl)return e;const t=this.__effectiveBaseUrl,n=this.constructor.__createUrl(e,t).href;return n.slice(0,t.length)===t?n.slice(t.length):void 0}}yg.pathToRegexp=Xf;const{pathToRegexp:bg}=yg,vg=new Map;function wg(e,t,n){const r=t.name||t.component;if(r&&(e.has(r)?e.get(r).push(t):e.set(r,[t])),Array.isArray(n))for(let r=0;r<n.length;r++){const s=n[r];s.parent=t,wg(e,s,s.__children||s.children)}}function Ag(e,t){const n=e.get(t);if(n&&n.length>1)throw new Error(`Duplicate route with name "${t}". Try seting unique 'name' route properties.`);return n&&n[0]}function _g(e){let t=e.path;return t=Array.isArray(t)?t[0]:t,void 0!==t?t:""}function Eg(e,t={}){if(!(e instanceof yg))throw new TypeError("An instance of Resolver is expected");const n=new Map;return(r,s)=>{let i=Ag(n,r);if(!i&&(n.clear(),wg(n,e.root,e.root.__children),i=Ag(n,r),!i))throw new Error(`Route "${r}" not found`);let a=vg.get(i.fullPath);if(!a){let e=_g(i),t=i.parent;for(;t;){const n=_g(t);n&&(e=n.replace(/\/$/,"")+"/"+e.replace(/^\//,"")),t=t.parent}const n=bg.parse(e),r=bg.tokensToFunction(n),s=Object.create(null);for(let e=0;e<n.length;e++)qf(n[e])||(s[n[e].name]=!0);a={toPath:r,keys:s},vg.set(e,a),i.fullPath=e}let o=a.toPath(s,t)||"/";if(t.stringifyQueryParams&&s){const e={},n=Object.keys(s);for(let t=0;t<n.length;t++){const r=n[t];a.keys[r]||(e[r]=s[r])}const r=t.stringifyQueryParams(e);r&&(o+="?"===r.charAt(0)?r:`?${r}`)}return o}}let kg=[];function xg(e){kg.forEach((e=>e.inactivate())),e.forEach((e=>e.activate())),kg=e}function Cg(e,t){return e.classList.add(t),new Promise((n=>{if((e=>{const t=getComputedStyle(e).getPropertyValue("animation-name");return t&&"none"!==t})(e)){const r=e.getBoundingClientRect(),s=`height: ${r.bottom-r.top}px; width: ${r.right-r.left}px`;e.setAttribute("style",`position: absolute; ${s}`),((e,t)=>{const n=()=>{e.removeEventListener("animationend",n),t()};e.addEventListener("animationend",n)})(e,(()=>{e.classList.remove(t),e.removeAttribute("style"),n()}))}else e.classList.remove(t),n()}))}function Ng(e){return null!=e}function Pg({pathname:e="",search:t="",hash:n="",chain:r=[],params:s={},redirectFrom:i,resolver:a},o){const l=r.map((e=>e.route));return{baseUrl:a&&a.baseUrl||"",pathname:e,search:t,hash:n,routes:l,route:o||l.length&&l[l.length-1]||null,params:s,redirectFrom:i,getUrl:(e={})=>Tg(Fg.pathToRegexp.compile(Ig(l))(Object.assign({},s,e)),a)}}function Sg(e,t){const n=Object.assign({},e.params);return{redirect:{pathname:t,from:e.pathname,params:n}}}function Og(e,t,n){if(zf(e))return e.apply(n,t)}function Bg(e,t,n){return r=>r&&(r.cancel||r.redirect)?r:n?Og(n[e],t,n):void 0}function Rg(e){if(e&&e.length){const t=e[0].parentNode;for(let n=0;n<e.length;n++)t.removeChild(e[n])}}function Tg(e,t){const n=t.__effectiveBaseUrl;return n?t.constructor.__createUrl(e.replace(/^\//,""),n).pathname:e}function Ig(e){return e.map((e=>e.path)).reduce(((e,t)=>t.length?e.replace(/\/$/,"")+"/"+t.replace(/^\//,""):e),"")}class Fg extends yg{constructor(e,t){const n=document.head.querySelector("base"),r=n&&n.getAttribute("href");super([],Object.assign({baseUrl:r&&yg.__createUrl(r,document.URL).pathname.replace(/[^\/]*$/,"")},t)),this.resolveRoute=e=>this.__resolveRoute(e);const s=Fg.NavigationTrigger;Fg.setTriggers.apply(Fg,Object.keys(s).map((e=>s[e]))),this.baseUrl,this.ready,this.ready=Promise.resolve(e),this.location,this.location=Pg({resolver:this}),this.__lastStartedRenderId=0,this.__navigationEventHandler=this.__onNavigationEvent.bind(this),this.setOutlet(e),this.subscribe(),this.__createdByRouter=new WeakMap,this.__addedByRouter=new WeakMap}__resolveRoute(e){const t=e.route;let n=Promise.resolve();zf(t.children)&&(n=n.then((()=>t.children(function(e){const t=Object.assign({},e);return delete t.next,t}(e)))).then((e=>{Ng(e)||zf(t.children)||(e=t.children),function(e,t){if(!Array.isArray(e)&&!Gf(e))throw new Error(Ff(`Incorrect "children" value for the route ${t.path}: expected array or object, but got ${e}`));t.__children=[];const n=If(e);for(let e=0;e<n.length;e++)jf(n[e]),t.__children.push(n[e])}(e,t)})));const r={redirect:t=>Sg(e,t),component:e=>{const t=document.createElement(e);return this.__createdByRouter.set(t,!0),t}};return n.then((()=>{if(this.__isLatestRender(e))return Og(t.action,[e,r],t)})).then((e=>{return Ng(e)&&(e instanceof HTMLElement||e.redirect||e===Jf)?e:qf(t.redirect)?r.redirect(t.redirect):t.bundle?(n=t.bundle,qf(n)?Hf(n):Promise.race(Df.filter((e=>e in n)).map((e=>Hf(n[e],e))))).then((()=>{}),(()=>{throw new Error(Ff(`Bundle not found: ${t.bundle}. Check if the file name is correct`))})):void 0;var n})).then((e=>Ng(e)?e:qf(t.component)?r.component(t.component):void 0))}setOutlet(e){e&&this.__ensureOutlet(e),this.__outlet=e}getOutlet(){return this.__outlet}setRoutes(e,t=!1){return this.__previousContext=void 0,this.__urlForName=void 0,super.setRoutes(e),t||this.__onNavigationEvent(),this.ready}render(e,t){const n=++this.__lastStartedRenderId,r=Object.assign({search:"",hash:""},qf(e)?{pathname:e}:e,{__renderId:n});return this.ready=this.resolve(r).then((e=>this.__fullyResolveChain(e))).then((e=>{if(this.__isLatestRender(e)){const r=this.__previousContext;if(e===r)return this.__updateBrowserHistory(r,!0),this.location;if(this.location=Pg(e),t&&this.__updateBrowserHistory(e,1===n),$f("location-changed",{router:this,location:this.location}),e.__skipAttach)return this.__copyUnchangedElements(e,r),this.__previousContext=e,this.location;this.__addAppearingContent(e,r);const s=this.__animateIfNeeded(e);return this.__runOnAfterEnterCallbacks(e),this.__runOnAfterLeaveCallbacks(e,r),s.then((()=>{if(this.__isLatestRender(e))return this.__removeDisappearingContent(),this.__previousContext=e,this.location}))}})).catch((e=>{if(n===this.__lastStartedRenderId)throw t&&this.__updateBrowserHistory(r),Rg(this.__outlet&&this.__outlet.children),this.location=Pg(Object.assign(r,{resolver:this})),$f("error",Object.assign({router:this,error:e},r)),e})),this.ready}__fullyResolveChain(e,t=e){return this.__findComponentContextAfterAllRedirects(t).then((n=>{const r=n!==t?n:e,s=Tg(Ig(n.chain),n.resolver)===n.pathname,i=(e,t=e.route,n)=>e.next(void 0,t,n).then((n=>null===n||n===Jf?s?e:null!==t.parent?i(e,t.parent,n):n:n));return i(n).then((e=>{if(null===e||e===Jf)throw Qf(r);return e&&e!==Jf&&e!==n?this.__fullyResolveChain(r,e):this.__amendWithOnBeforeCallbacks(n)}))}))}__findComponentContextAfterAllRedirects(e){const t=e.result;return t instanceof HTMLElement?(function(e,t){t.location=Pg(e);const n=e.chain.map((e=>e.route)).indexOf(e.route);e.chain[n].element=t}(e,t),Promise.resolve(e)):t.redirect?this.__redirect(t.redirect,e.__redirectCount,e.__renderId).then((e=>this.__findComponentContextAfterAllRedirects(e))):t instanceof Error?Promise.reject(t):Promise.reject(new Error(Ff(`Invalid route resolution result for path "${e.pathname}". Expected redirect object or HTML element, but got: "${function(e){if("object"!=typeof e)return String(e);const t=Object.prototype.toString.call(e).match(/ (.*)\]$/)[1];return"Object"===t||"Array"===t?`${t} ${JSON.stringify(e)}`:t}(t)}". Double check the action return value for the route.`)))}__amendWithOnBeforeCallbacks(e){return this.__runOnBeforeCallbacks(e).then((t=>t===this.__previousContext||t===e?t:this.__fullyResolveChain(t)))}__runOnBeforeCallbacks(e){const t=this.__previousContext||{},n=t.chain||[],r=e.chain;let s=Promise.resolve();const i=()=>({cancel:!0}),a=t=>Sg(e,t);if(e.__divergedChainIndex=0,e.__skipAttach=!1,n.length){for(let t=0;t<Math.min(n.length,r.length)&&n[t].route===r[t].route&&(n[t].path===r[t].path||n[t].element===r[t].element)&&this.__isReusableElement(n[t].element,r[t].element);t=++e.__divergedChainIndex);if(e.__skipAttach=r.length===n.length&&e.__divergedChainIndex==r.length&&this.__isReusableElement(e.result,t.result),e.__skipAttach){for(let t=r.length-1;t>=0;t--)s=this.__runOnBeforeLeaveCallbacks(s,e,{prevent:i},n[t]);for(let t=0;t<r.length;t++)s=this.__runOnBeforeEnterCallbacks(s,e,{prevent:i,redirect:a},r[t]),n[t].element.location=Pg(e,n[t].route)}else for(let t=n.length-1;t>=e.__divergedChainIndex;t--)s=this.__runOnBeforeLeaveCallbacks(s,e,{prevent:i},n[t])}if(!e.__skipAttach)for(let t=0;t<r.length;t++)t<e.__divergedChainIndex?t<n.length&&n[t].element&&(n[t].element.location=Pg(e,n[t].route)):(s=this.__runOnBeforeEnterCallbacks(s,e,{prevent:i,redirect:a},r[t]),r[t].element&&(r[t].element.location=Pg(e,r[t].route)));return s.then((t=>{if(t){if(t.cancel)return this.__previousContext.__renderId=e.__renderId,this.__previousContext;if(t.redirect)return this.__redirect(t.redirect,e.__redirectCount,e.__renderId)}return e}))}__runOnBeforeLeaveCallbacks(e,t,n,r){const s=Pg(t);return e.then((e=>{if(this.__isLatestRender(t))return Bg("onBeforeLeave",[s,n,this],r.element)(e)})).then((e=>{if(!(e||{}).redirect)return e}))}__runOnBeforeEnterCallbacks(e,t,n,r){const s=Pg(t,r.route);return e.then((e=>{if(this.__isLatestRender(t))return Bg("onBeforeEnter",[s,n,this],r.element)(e)}))}__isReusableElement(e,t){return!(!e||!t)&&(this.__createdByRouter.get(e)&&this.__createdByRouter.get(t)?e.localName===t.localName:e===t)}__isLatestRender(e){return e.__renderId===this.__lastStartedRenderId}__redirect(e,t,n){if(t>256)throw new Error(Ff(`Too many redirects when rendering ${e.from}`));return this.resolve({pathname:this.urlForPath(e.pathname,e.params),redirectFrom:e.from,__redirectCount:(t||0)+1,__renderId:n})}__ensureOutlet(e=this.__outlet){if(!(e instanceof Node))throw new TypeError(Ff(`Expected router outlet to be a valid DOM Node (but got ${e})`))}__updateBrowserHistory({pathname:e,search:t="",hash:n=""},r){if(window.location.pathname!==e||window.location.search!==t||window.location.hash!==n){const s=r?"replaceState":"pushState";window.history[s](null,document.title,e+t+n),window.dispatchEvent(new PopStateEvent("popstate",{state:"vaadin-router-ignore"}))}}__copyUnchangedElements(e,t){let n=this.__outlet;for(let r=0;r<e.__divergedChainIndex;r++){const s=t&&t.chain[r].element;if(s){if(s.parentNode!==n)break;e.chain[r].element=s,n=s}}return n}__addAppearingContent(e,t){this.__ensureOutlet(),this.__removeAppearingContent();const n=this.__copyUnchangedElements(e,t);this.__appearingContent=[],this.__disappearingContent=Array.from(n.children).filter((t=>this.__addedByRouter.get(t)&&t!==e.result));let r=n;for(let t=e.__divergedChainIndex;t<e.chain.length;t++){const s=e.chain[t].element;s&&(r.appendChild(s),this.__addedByRouter.set(s,!0),r===n&&this.__appearingContent.push(s),r=s)}}__removeDisappearingContent(){this.__disappearingContent&&Rg(this.__disappearingContent),this.__disappearingContent=null,this.__appearingContent=null}__removeAppearingContent(){this.__disappearingContent&&this.__appearingContent&&(Rg(this.__appearingContent),this.__disappearingContent=null,this.__appearingContent=null)}__runOnAfterLeaveCallbacks(e,t){if(t)for(let n=t.chain.length-1;n>=e.__divergedChainIndex&&this.__isLatestRender(e);n--){const r=t.chain[n].element;if(r)try{const n=Pg(e);Og(r.onAfterLeave,[n,{},t.resolver],r)}finally{this.__disappearingContent.indexOf(r)>-1&&Rg(r.children)}}}__runOnAfterEnterCallbacks(e){for(let t=e.__divergedChainIndex;t<e.chain.length&&this.__isLatestRender(e);t++){const n=e.chain[t].element||{},r=Pg(e,e.chain[t].route);Og(n.onAfterEnter,[r,{},e.resolver],n)}}__animateIfNeeded(e){const t=(this.__disappearingContent||[])[0],n=(this.__appearingContent||[])[0],r=[],s=e.chain;let i;for(let e=s.length;e>0;e--)if(s[e-1].route.animate){i=s[e-1].route.animate;break}if(t&&n&&i){const e=Gf(i)&&i.leave||"leaving",s=Gf(i)&&i.enter||"entering";r.push(Cg(t,e)),r.push(Cg(n,s))}return Promise.all(r).then((()=>e))}subscribe(){window.addEventListener("vaadin-router-go",this.__navigationEventHandler)}unsubscribe(){window.removeEventListener("vaadin-router-go",this.__navigationEventHandler)}__onNavigationEvent(e){const{pathname:t,search:n,hash:r}=e?e.detail:window.location;qf(this.__normalizePathname(t))&&(e&&e.preventDefault&&e.preventDefault(),this.render({pathname:t,search:n,hash:r},!0))}static setTriggers(...e){xg(e)}urlForName(e,t){return this.__urlForName||(this.__urlForName=Eg(this)),Tg(this.__urlForName(e,t),this)}urlForPath(e,t){return Tg(Fg.pathToRegexp.compile(e)(t),this)}static go(e){const{pathname:t,search:n,hash:r}=qf(e)?this.__createUrl(e,"http://a"):e;return $f("go",{pathname:t,search:n,hash:r})}}const Lg=/\/\*[\*!]\s+vaadin-dev-mode:start([\s\S]*)vaadin-dev-mode:end\s+\*\*\//i,Ug=window.Vaadin&&window.Vaadin.Flow&&window.Vaadin.Flow.clients;function Dg(e,t){if("function"!=typeof e)return;const n=Lg.exec(e.toString());if(n)try{e=new Function(n[1])}catch(e){console.log("vaadin-development-mode-detector: uncommentAndRun() failed",e)}return e(t)}window.Vaadin=window.Vaadin||{};void 0===window.Vaadin.developmentMode&&(window.Vaadin.developmentMode=function(){try{return!!localStorage.getItem("vaadin.developmentmode.force")||["localhost","127.0.0.1"].indexOf(window.location.hostname)>=0&&(Ug?!(Ug&&Object.keys(Ug).map((e=>Ug[e])).filter((e=>e.productionMode)).length>0):!Dg((function(){return!0})))}catch(e){return!1}}()),window.Vaadin=window.Vaadin||{},window.Vaadin.registrations=window.Vaadin.registrations||[],window.Vaadin.registrations.push({is:"@vaadin/router",version:"1.7.4"}),function(e,t){if(window.Vaadin.developmentMode)Dg(e,t)}((function(){})),Fg.NavigationTrigger={POPSTATE:Zf,CLICK:Wf};var Mg=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};let jg=class extends Me{static get styles(){return[...super.styles]}};jg=Mg([ue("kana-nav-button")],jg);let Vg=class extends le{constructor(){super(),this.opened=!1}static get styles(){return[o`
                :host {
                    width: var(--nav-width-collapsed);
                    transition: width 0.3s ease-in-out;
                    padding: 1rem;
                }
    
                :host([opened]) {
                    width: var(--nav-width-expanded);
                }
    
                nav {
                    display: flex;
                    flex-direction: column;
                    height: 100%;
                }
                    
                #logo-container {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    margin-bottom: 1rem;
                }

                #logo-container img {
                    max-width: 100%;
                    height: auto;
                }

                nav ul {
                    list-style: none;
                    padding: 0;
                    margin: 0;
                }
    
                nav li {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin-bottom: 1rem;
                }
    
                nav li a {
                    display: flex;
                    align-items: center;
                    text-decoration: none;
                    color: inherit;
                }
    
                kana-icon {
                    margin-right: 1rem;
                }
            `,o`
                :host {
                    --nav-width-collapsed: 90px;
                    --nav-width-expanded: 200px;
                }
            `,ye("-light")]}render(){return V`
            <div id="logo-container">
                <img src="/media/img/logo.png" alt="Kanaloa Network logo" />
            </div>
            <nav>
                <ul>
                    ${st(Rf,(e=>e.path),(e=>V`
                        <li>
                            <a href="${e.path}">
                                <kana-icon>${e.icon}</kana-icon>
                                ${e.name}
                            </a>
                        </li>
                    `))}
                </ul>
            </nav>
        `}};Mg([de({reflect:!0,type:Boolean})],Vg.prototype,"opened",void 0),Vg=Mg([ue("kanaloa-navigation")],Vg);class Hg{}const $g=new WeakMap,Gg=Ke(class extends Md{render(e){return $}update(e,[t]){var n;const r=t!==this.G;return r&&void 0!==this.G&&this.ot(void 0),(r||this.rt!==this.lt)&&(this.G=t,this.ct=null===(n=e.options)||void 0===n?void 0:n.host,this.ot(this.lt=e.element)),$}ot(e){var t;if("function"==typeof this.G){const n=null!==(t=this.ct)&&void 0!==t?t:globalThis;let r=$g.get(n);void 0===r&&(r=new WeakMap,$g.set(n,r)),void 0!==r.get(this.G)&&this.G.call(this.ct,void 0),r.set(this.G,e),void 0!==e&&this.G.call(this.ct,e)}else this.G.value=e}get rt(){var e,t,n;return"function"==typeof this.G?null===(t=$g.get(null!==(e=this.ct)&&void 0!==e?e:globalThis))||void 0===t?void 0:t.get(this.G):null===(n=this.G)||void 0===n?void 0:n.value}disconnected(){this.rt===this.lt&&this.ot(void 0)}reconnected(){this.ot(this.lt)}});var zg=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};let qg=class extends le{get imageUrl(){return this._imageUrl||this._computedIcon}set imageUrl(e){this._imageUrl=e}constructor(e){super(),fh.subscribe(this)}static get styles(){return o`
            :host {
                display: flex;
                align-items: center;
            }
            .wallet-img {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                object-fit: cover;
                margin-right: 8px;
                background-color: var(--foreground-color);
            }
            .wallet-address {
                display: inline-block;
                font-family: monospace;
            }
            kana-icon {
                margin-left: 8px;
            }

            a {
                text-decoration: none;
                color: inherit;
            }
        `}disconnectedCallback(){super.disconnectedCallback(),fh.unsubscribe(this)}requestUpdate(){super.requestUpdate();const e=fh.address?.toString();null==this._imageUrl&&(this._computedIcon=e?Ne(e):void 0)}render(){const e=fh.address?.toString(),t=null!=e?`${e.slice(0,6)}...${e.slice(-4)}`:void 0;return it(null==t,(()=>V`
                <kana-button 
                    @click=${()=>fh.requestSigner()}>
                    Connect wallet
                </kana-button>
            `),(()=>V`
                <img class="wallet-img" 
                    src="${this.imageUrl}" 
                    alt="Wallet icon" />
                <span class="wallet-address">${t}</span>
                <kana-icon><a href="/projects">menu</a></kana-icon>`))}};zg([de({type:String})],qg.prototype,"imageUrl",null),qg=zg([ue("kana-wallet-info")],qg);var Qg=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};let Jg=class extends le{constructor(){super(),this.outlet=new Hg}static get styles(){return[o`
                :host {
                    display: flex;
                    flex-direction: column;
                    flex-grow: 1;
                    padding: 1rem;
                }

                kanaloa-outlet {
                    display: flex;
                    flex-grow: 1;
                    margin-left: 2rem;
                }
                
                .top-bar {
                    display: flex;
                    justify-content: end;
                }
            `,ye("-dark")]}updated(){this.router?.setOutlet(this.outlet.value)}render(){return V`
            <div class="top-bar">
                <kana-wallet-info>
                </kana-wallet-info>
            </div>
            <kanaloa-outlet 
                ${Gg(this.outlet)}>
            </kanaloa-outlet>
        `}};Qg([de()],Jg.prototype,"router",void 0),Jg=Qg([ue("kanaloa-display")],Jg),Object.create,Object.create;class Kg extends le{render(){return V`<span><slot></slot></span>`}}const Wg=o`:host{--_color: var(--md-icon-color, inherit);--_font: var(--md-icon-font, "Material Symbols Outlined");--_font-variation-settings: var(--md-icon-font-variation-settings, inherit);--_size: var(--md-icon-size, 24px);--_weight: var(--md-icon-weight, 400);display:inline-flex;color:var(--_color);font-family:var(--_font);font-weight:var(--_weight);font-style:normal;font-size:var(--_size);font-variation-settings:var(--_font-variation-settings);line-height:1;overflow:hidden;letter-spacing:normal;text-transform:none;white-space:nowrap;word-wrap:normal;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale}span ::slotted(svg){fill:currentColor}span ::slotted(*){height:var(--_size);width:var(--_size)}/*# sourceMappingURL=icon-styles.css.map */
`;let Yg=class extends Kg{};Yg.styles=[Wg],Yg=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}([ue("md-icon")],Yg);var Zg=a(590),Xg=a(724);let em=class extends le{constructor(){super(),this.router=new Fg}static get styles(){return[ge,o`
                :host {
                    display: flex;
                    height: 100%;
                    overflow-y: hidden;
                }
            `]}firstUpdated(){this.router.setRoutes(Tf)}render(){return V`
            <kanaloa-navigation opened></kanaloa-navigation>
            <kanaloa-display 
                .router=${this.router}
            >
            </kanaloa-display>
        `}};em=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}([ue("kanaloa-app")],em),(()=>{const e=document.createElement("style");e.innerText=`\n        html, body {\n            height: 100%;\n        }\n        ${Zg.Z}\n        ${Xg.Z}\n    `,document.head.appendChild(e)})(),document.querySelector("body")?.appendChild(new em)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,