/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={408:(e,t,n)=>{n.d(t,{A:()=>d});var r=n(354),s=n.n(r),i=n(314),o=n.n(i),a=n(417),l=n.n(a),c=new URL(n(139),n.b),u=o()(s()),h=l()(c);u.push([e.id,`@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(${h}) format('truetype');\n}\n\n.gRd1oYHIxDKN1uv1lRRm {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n`,"",{version:3,sources:["webpack://./css/material-icons.module.css"],names:[],mappings:"AAAA;EACE,6BAA6B;EAC7B,kBAAkB;EAClB,gBAAgB;EAChB,+DAAiD;AACnD;;AAEA;EACE,6BAA6B;EAC7B,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,sBAAsB;EACtB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,cAAc;AAChB",sourcesContent:["@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(\"material-icons.ttf\") format('truetype');\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n"],sourceRoot:""}]),u.locals={"material-icons":"gRd1oYHIxDKN1uv1lRRm"};const d=u},692:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(354),s=n.n(r),i=n(314),o=n.n(i)()(s());o.push([e.id,'*,\n*::before,\n*::after {\n  box-sizing: inherit;\n  padding: 0;\n  margin: 0;\n}\n\nhtml {\n  line-height: 1.15;\n  box-sizing: border-box;\n  font-family: sans-serif;\n}\n\nmain {\n  display: block;\n}\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\np + p {\n  margin-top: 1rem;\n}\n\na {\n  background-color: transparent;\n}\n\nabbr[title] {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  line-height: inherit;\n  border: 1px solid currentColor;\n}\n\nbutton {\n  overflow: visible;\n  text-transform: none;\n}\n\nbutton,\n[type=button],\n[type=reset],\n[type=submit] {\n  -webkit-appearance: button;\n  padding: 1px 6px;\n}\n\ninput {\n  overflow: visible;\n}\n\ninput,\ntextarea {\n  padding: 1px;\n}\n\nfieldset {\n  border: 1px solid currentColor;\n  margin: 0 2px;\n}\n\nlegend {\n  color: inherit;\n  display: table;\n  max-width: 100%;\n  white-space: normal;\n}\n\nprogress {\n  display: inline-block;\n  vertical-align: baseline;\n}\n\nselect {\n  text-transform: none;\n}\n\ntextarea {\n  overflow: auto;\n  vertical-align: top;\n}\n\n[type=search] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n\n[type=color] {\n  background: inherit;\n}\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.5;\n}\n\n::-webkit-search-decoration,\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n\n::-moz-focus-inner {\n  border: 0;\n}\n\n:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n  color: inherit;\n  overflow: visible;\n}\n\ndl,\nol,\nul {\n  margin: 0;\n}\n\nol ol,\nol ul,\nol dl,\nul ol,\nul ul,\nul dl,\ndl ol,\ndl ul,\ndl dl {\n  margin: 0;\n}\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\naudio,\nvideo {\n  display: inline-block;\n}\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\nimg {\n  border: 0;\n}\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\ntable {\n  text-indent: 0;\n  border-color: inherit;\n}\n\ndetails {\n  display: block;\n}\n\ndialog {\n  background-color: inherit;\n  border: solid;\n  color: inherit;\n  display: block;\n  height: fit-content;\n  left: 0;\n  margin: auto;\n  padding: 1em;\n  position: absolute;\n  right: 0;\n  width: fit-content;\n}\n\ndialog:not([open]) {\n  display: none;\n}\n\nsummary {\n  display: list-item;\n}\n\ncanvas {\n  display: inline-block;\n}\n\ntemplate {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}\n\n:root {\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n}\n',"",{version:3,sources:["webpack://./css/reseter.module.css"],names:[],mappings:"AAAA;;;EAGE,mBAAmB;EACnB,UAAU;EACV,SAAS;AACX;;AAEA;EACE,iBAAiB;EACjB,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,yCAAyC;UACjC,iCAAiC;AAC3C;;AAEA;;;;EAIE,iCAAiC;EACjC,cAAc;AAChB;;AAEA;;EAEE,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;;;;;EAKE,oBAAoB;EACpB,8BAA8B;AAChC;;AAEA;EACE,iBAAiB;EACjB,oBAAoB;AACtB;;AAEA;;;;EAIE,0BAA0B;EAC1B,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B,aAAa;AACf;;AAEA;EACE,cAAc;EACd,cAAc;EACd,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,wBAAwB;AAC1B;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,cAAc;EACd,mBAAmB;AACrB;;AAEA;EACE,6BAA6B;EAC7B,oBAAoB;AACtB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,cAAc;EACd,YAAY;AACd;;AAEA;;EAEE,0BAA0B;EAC1B,aAAa;AACf;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,SAAS;EACT,cAAc;EACd,iBAAiB;AACnB;;AAEA;;;EAGE,SAAS;AACX;;AAEA;;;;;;;;;EASE,SAAS;AACX;;AAEA;;EAEE,mBAAmB;AACrB;;AAEA;;EAEE,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,qBAAqB;AACvB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,cAAc;EACd,cAAc;EACd,mBAAmB;EACnB,OAAO;EACP,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,QAAQ;EACR,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,wIAAwI;AAC1I",sourcesContent:['*,\n*::before,\n*::after {\n  box-sizing: inherit;\n  padding: 0;\n  margin: 0;\n}\n\nhtml {\n  line-height: 1.15;\n  box-sizing: border-box;\n  font-family: sans-serif;\n}\n\nmain {\n  display: block;\n}\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\np + p {\n  margin-top: 1rem;\n}\n\na {\n  background-color: transparent;\n}\n\nabbr[title] {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  line-height: inherit;\n  border: 1px solid currentColor;\n}\n\nbutton {\n  overflow: visible;\n  text-transform: none;\n}\n\nbutton,\n[type=button],\n[type=reset],\n[type=submit] {\n  -webkit-appearance: button;\n  padding: 1px 6px;\n}\n\ninput {\n  overflow: visible;\n}\n\ninput,\ntextarea {\n  padding: 1px;\n}\n\nfieldset {\n  border: 1px solid currentColor;\n  margin: 0 2px;\n}\n\nlegend {\n  color: inherit;\n  display: table;\n  max-width: 100%;\n  white-space: normal;\n}\n\nprogress {\n  display: inline-block;\n  vertical-align: baseline;\n}\n\nselect {\n  text-transform: none;\n}\n\ntextarea {\n  overflow: auto;\n  vertical-align: top;\n}\n\n[type=search] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n\n[type=color] {\n  background: inherit;\n}\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.5;\n}\n\n::-webkit-search-decoration,\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n\n::-moz-focus-inner {\n  border: 0;\n}\n\n:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n  color: inherit;\n  overflow: visible;\n}\n\ndl,\nol,\nul {\n  margin: 0;\n}\n\nol ol,\nol ul,\nol dl,\nul ol,\nul ul,\nul dl,\ndl ol,\ndl ul,\ndl dl {\n  margin: 0;\n}\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\naudio,\nvideo {\n  display: inline-block;\n}\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\nimg {\n  border: 0;\n}\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\ntable {\n  text-indent: 0;\n  border-color: inherit;\n}\n\ndetails {\n  display: block;\n}\n\ndialog {\n  background-color: inherit;\n  border: solid;\n  color: inherit;\n  display: block;\n  height: fit-content;\n  left: 0;\n  margin: auto;\n  padding: 1em;\n  position: absolute;\n  right: 0;\n  width: fit-content;\n}\n\ndialog:not([open]) {\n  display: none;\n}\n\nsummary {\n  display: list-item;\n}\n\ncanvas {\n  display: inline-block;\n}\n\ntemplate {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}\n\n:root {\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n}\n'],sourceRoot:""}]),o.locals={};const a=o},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,s,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(o[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&o[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),s&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=s):u[4]="".concat(s)),t.push(u))}},t}},417:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(s," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},139:(e,t,n)=>{e.exports=n.p+"f20305dee9d396fea5c7.ttf"}},r={};function s(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,s),i.exports}s.m=n,s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,n)=>(s.f[n](e,t),t)),[])),s.u=e=>e+".bundle.js",s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="kanaloa-project-manager:",s.l=(n,r,i,o)=>{if(e[n])e[n].push(r);else{var a,l;if(void 0!==i)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var h=c[u];if(h.getAttribute("src")==n||h.getAttribute("data-webpack")==t+i){a=h;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",t+i),a.src=n),e[n]=[r];var d=(t,r)=>{a.onerror=a.onload=null,clearTimeout(p);var s=e[n];if(delete e[n],a.parentNode&&a.parentNode.removeChild(a),s&&s.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),l&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.p="/",(()=>{s.b=document.baseURI||self.location.href;var e={792:0};s.f.j=(t,n)=>{var r=s.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var i=new Promise(((n,s)=>r=e[t]=[n,s]));n.push(r[2]=i);var o=s.p+s.u(t),a=new Error;s.l(o,(n=>{if(s.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var i=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;a.message="Loading chunk "+t+" failed.\n("+i+": "+o+")",a.name="ChunkLoadError",a.type=i,a.request=o,r[1](a)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,i,[o,a,l]=n,c=0;if(o.some((t=>0!==e[t]))){for(r in a)s.o(a,r)&&(s.m[r]=a[r]);l&&l(s)}for(t&&t(n);c<o.length;c++)i=o[c],s.o(e,i)&&e[i]&&e[i][0](),e[i]=0},n=self.webpackChunkkanaloa_project_manager=self.webpackChunkkanaloa_project_manager||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{var e={};s.r(e),s.d(e,{OG:()=>Wl,My:()=>jl,bytesToNumberBE:()=>Gl,lX:()=>zl,Id:()=>Kl,fg:()=>Xl,qj:()=>Jl,hexToBytes:()=>Hl,lq:()=>ql,z:()=>Ql,Q5:()=>tc});const t=globalThis,n=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,r=Symbol(),i=new WeakMap;class o{constructor(e,t,n){if(this._$cssResult$=!0,n!==r)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(n&&void 0===e){const n=void 0!==t&&1===t.length;n&&(e=i.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),n&&i.set(t,e))}return e}toString(){return this.cssText}}const a=e=>new o("string"==typeof e?e:e+"",void 0,r),l=(e,...t)=>{const n=1===e.length?e[0]:t.reduce(((t,n,r)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(n)+e[r+1]),e[0]);return new o(n,e,r)},c=(e,r)=>{if(n)e.adoptedStyleSheets=r.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet));else for(const n of r){const r=document.createElement("style"),s=t.litNonce;void 0!==s&&r.setAttribute("nonce",s),r.textContent=n.cssText,e.appendChild(r)}},u=n?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const n of e.cssRules)t+=n.cssText;return a(t)})(e):e,{is:h,defineProperty:d,getOwnPropertyDescriptor:p,getOwnPropertyNames:f,getOwnPropertySymbols:m,getPrototypeOf:g}=Object,y=globalThis,b=y.trustedTypes,w=b?b.emptyScript:"",v=y.reactiveElementPolyfillSupport,A=(e,t)=>e,_={toAttribute(e,t){switch(t){case Boolean:e=e?w:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let n=e;switch(t){case Boolean:n=null!==e;break;case Number:n=null===e?null:Number(e);break;case Object:case Array:try{n=JSON.parse(e)}catch(e){n=null}}return n}},E=(e,t)=>!h(e,t),k={attribute:!0,type:String,converter:_,reflect:!1,hasChanged:E};Symbol.metadata??=Symbol("metadata"),y.litPropertyMetadata??=new WeakMap;class x extends HTMLElement{static addInitializer(e){this._$Ei(),(this.l??=[]).push(e)}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(e,t=k){if(t.state&&(t.attribute=!1),this._$Ei(),this.elementProperties.set(e,t),!t.noAccessor){const n=Symbol(),r=this.getPropertyDescriptor(e,n,t);void 0!==r&&d(this.prototype,e,r)}}static getPropertyDescriptor(e,t,n){const{get:r,set:s}=p(this.prototype,e)??{get(){return this[t]},set(e){this[t]=e}};return{get(){return r?.call(this)},set(t){const i=r?.call(this);s.call(this,t),this.requestUpdate(e,i,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)??k}static _$Ei(){if(this.hasOwnProperty(A("elementProperties")))return;const e=g(this);e.finalize(),void 0!==e.l&&(this.l=[...e.l]),this.elementProperties=new Map(e.elementProperties)}static finalize(){if(this.hasOwnProperty(A("finalized")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(A("properties"))){const e=this.properties,t=[...f(e),...m(e)];for(const n of t)this.createProperty(n,e[n])}const e=this[Symbol.metadata];if(null!==e){const t=litPropertyMetadata.get(e);if(void 0!==t)for(const[e,n]of t)this.elementProperties.set(e,n)}this._$Eh=new Map;for(const[e,t]of this.elementProperties){const n=this._$Eu(e,t);void 0!==n&&this._$Eh.set(n,e)}this.elementStyles=this.finalizeStyles(this.styles)}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const n=new Set(e.flat(1/0).reverse());for(const e of n)t.unshift(u(e))}else void 0!==e&&t.push(u(e));return t}static _$Eu(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev()}_$Ev(){this._$ES=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach((e=>e(this)))}addController(e){(this._$EO??=new Set).add(e),void 0!==this.renderRoot&&this.isConnected&&e.hostConnected?.()}removeController(e){this._$EO?.delete(e)}_$E_(){const e=new Map,t=this.constructor.elementProperties;for(const n of t.keys())this.hasOwnProperty(n)&&(e.set(n,this[n]),delete this[n]);e.size>0&&(this._$Ep=e)}createRenderRoot(){const e=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return c(e,this.constructor.elementStyles),e}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach((e=>e.hostConnected?.()))}enableUpdating(e){}disconnectedCallback(){this._$EO?.forEach((e=>e.hostDisconnected?.()))}attributeChangedCallback(e,t,n){this._$AK(e,n)}_$EC(e,t){const n=this.constructor.elementProperties.get(e),r=this.constructor._$Eu(e,n);if(void 0!==r&&!0===n.reflect){const s=(void 0!==n.converter?.toAttribute?n.converter:_).toAttribute(t,n.type);this._$Em=e,null==s?this.removeAttribute(r):this.setAttribute(r,s),this._$Em=null}}_$AK(e,t){const n=this.constructor,r=n._$Eh.get(e);if(void 0!==r&&this._$Em!==r){const e=n.getPropertyOptions(r),s="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==e.converter?.fromAttribute?e.converter:_;this._$Em=r,this[r]=s.fromAttribute(t,e.type),this._$Em=null}}requestUpdate(e,t,n){if(void 0!==e){if(n??=this.constructor.getPropertyOptions(e),!(n.hasChanged??E)(this[e],t))return;this.P(e,t,n)}!1===this.isUpdatePending&&(this._$ES=this._$ET())}P(e,t,n){this._$AL.has(e)||this._$AL.set(e,t),!0===n.reflect&&this._$Em!==e&&(this._$Ej??=new Set).add(e)}async _$ET(){this.isUpdatePending=!0;try{await this._$ES}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[e,t]of this._$Ep)this[e]=t;this._$Ep=void 0}const e=this.constructor.elementProperties;if(e.size>0)for(const[t,n]of e)!0!==n.wrapped||this._$AL.has(t)||void 0===this[t]||this.P(t,this[t],n)}let e=!1;const t=this._$AL;try{e=this.shouldUpdate(t),e?(this.willUpdate(t),this._$EO?.forEach((e=>e.hostUpdate?.())),this.update(t)):this._$EU()}catch(t){throw e=!1,this._$EU(),t}e&&this._$AE(t)}willUpdate(e){}_$AE(e){this._$EO?.forEach((e=>e.hostUpdated?.())),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$EU(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(e){return!0}update(e){this._$Ej&&=this._$Ej.forEach((e=>this._$EC(e,this[e]))),this._$EU()}updated(e){}firstUpdated(e){}}x.elementStyles=[],x.shadowRootOptions={mode:"open"},x[A("elementProperties")]=new Map,x[A("finalized")]=new Map,v?.({ReactiveElement:x}),(y.reactiveElementVersions??=[]).push("2.0.4");const C=globalThis,N=C.trustedTypes,P=N?N.createPolicy("lit-html",{createHTML:e=>e}):void 0,R="$lit$",O=`lit$${(Math.random()+"").slice(9)}$`,B="?"+O,S=`<${B}>`,T=document,I=()=>T.createComment(""),F=e=>null===e||"object"!=typeof e&&"function"!=typeof e,L=Array.isArray,U=e=>L(e)||"function"==typeof e?.[Symbol.iterator],M="[ \t\n\f\r]",D=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,$=/-->/g,j=/>/g,V=RegExp(`>|${M}(?:([^\\s"'>=/]+)(${M}*=${M}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),H=/'/g,G=/"/g,z=/^(?:script|style|textarea|title)$/i,q=e=>(t,...n)=>({_$litType$:e,strings:t,values:n}),Q=q(1),J=(q(2),Symbol.for("lit-noChange")),K=Symbol.for("lit-nothing"),W=new WeakMap,Y=T.createTreeWalker(T,129);function Z(e,t){if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==P?P.createHTML(t):t}const X=(e,t)=>{const n=e.length-1,r=[];let s,i=2===t?"<svg>":"",o=D;for(let t=0;t<n;t++){const n=e[t];let a,l,c=-1,u=0;for(;u<n.length&&(o.lastIndex=u,l=o.exec(n),null!==l);)u=o.lastIndex,o===D?"!--"===l[1]?o=$:void 0!==l[1]?o=j:void 0!==l[2]?(z.test(l[2])&&(s=RegExp("</"+l[2],"g")),o=V):void 0!==l[3]&&(o=V):o===V?">"===l[0]?(o=s??D,c=-1):void 0===l[1]?c=-2:(c=o.lastIndex-l[2].length,a=l[1],o=void 0===l[3]?V:'"'===l[3]?G:H):o===G||o===H?o=V:o===$||o===j?o=D:(o=V,s=void 0);const h=o===V&&e[t+1].startsWith("/>")?" ":"";i+=o===D?n+S:c>=0?(r.push(a),n.slice(0,c)+R+n.slice(c)+O+h):n+O+(-2===c?t:h)}return[Z(e,i+(e[n]||"<?>")+(2===t?"</svg>":"")),r]};class ee{constructor({strings:e,_$litType$:t},n){let r;this.parts=[];let s=0,i=0;const o=e.length-1,a=this.parts,[l,c]=X(e,t);if(this.el=ee.createElement(l,n),Y.currentNode=this.el.content,2===t){const e=this.el.content.firstChild;e.replaceWith(...e.childNodes)}for(;null!==(r=Y.nextNode())&&a.length<o;){if(1===r.nodeType){if(r.hasAttributes())for(const e of r.getAttributeNames())if(e.endsWith(R)){const t=c[i++],n=r.getAttribute(e).split(O),o=/([.?@])?(.*)/.exec(t);a.push({type:1,index:s,name:o[2],strings:n,ctor:"."===o[1]?ie:"?"===o[1]?oe:"@"===o[1]?ae:se}),r.removeAttribute(e)}else e.startsWith(O)&&(a.push({type:6,index:s}),r.removeAttribute(e));if(z.test(r.tagName)){const e=r.textContent.split(O),t=e.length-1;if(t>0){r.textContent=N?N.emptyScript:"";for(let n=0;n<t;n++)r.append(e[n],I()),Y.nextNode(),a.push({type:2,index:++s});r.append(e[t],I())}}}else if(8===r.nodeType)if(r.data===B)a.push({type:2,index:s});else{let e=-1;for(;-1!==(e=r.data.indexOf(O,e+1));)a.push({type:7,index:s}),e+=O.length-1}s++}}static createElement(e,t){const n=T.createElement("template");return n.innerHTML=e,n}}function te(e,t,n=e,r){if(t===J)return t;let s=void 0!==r?n._$Co?.[r]:n._$Cl;const i=F(t)?void 0:t._$litDirective$;return s?.constructor!==i&&(s?._$AO?.(!1),void 0===i?s=void 0:(s=new i(e),s._$AT(e,n,r)),void 0!==r?(n._$Co??=[])[r]=s:n._$Cl=s),void 0!==s&&(t=te(e,s._$AS(e,t.values),s,r)),t}class ne{constructor(e,t){this._$AV=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){const{el:{content:t},parts:n}=this._$AD,r=(e?.creationScope??T).importNode(t,!0);Y.currentNode=r;let s=Y.nextNode(),i=0,o=0,a=n[0];for(;void 0!==a;){if(i===a.index){let t;2===a.type?t=new re(s,s.nextSibling,this,e):1===a.type?t=new a.ctor(s,a.name,a.strings,this,e):6===a.type&&(t=new le(s,this,e)),this._$AV.push(t),a=n[++o]}i!==a?.index&&(s=Y.nextNode(),i++)}return Y.currentNode=T,r}p(e){let t=0;for(const n of this._$AV)void 0!==n&&(void 0!==n.strings?(n._$AI(e,n,t),t+=n.strings.length-2):n._$AI(e[t])),t++}}class re{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(e,t,n,r){this.type=2,this._$AH=K,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=n,this.options=r,this._$Cv=r?.isConnected??!0}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===e?.nodeType&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=te(this,e,t),F(e)?e===K||null==e||""===e?(this._$AH!==K&&this._$AR(),this._$AH=K):e!==this._$AH&&e!==J&&this._(e):void 0!==e._$litType$?this.$(e):void 0!==e.nodeType?this.T(e):U(e)?this.k(e):this._(e)}S(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}T(e){this._$AH!==e&&(this._$AR(),this._$AH=this.S(e))}_(e){this._$AH!==K&&F(this._$AH)?this._$AA.nextSibling.data=e:this.T(T.createTextNode(e)),this._$AH=e}$(e){const{values:t,_$litType$:n}=e,r="number"==typeof n?this._$AC(e):(void 0===n.el&&(n.el=ee.createElement(Z(n.h,n.h[0]),this.options)),n);if(this._$AH?._$AD===r)this._$AH.p(t);else{const e=new ne(r,this),n=e.u(this.options);e.p(t),this.T(n),this._$AH=e}}_$AC(e){let t=W.get(e.strings);return void 0===t&&W.set(e.strings,t=new ee(e)),t}k(e){L(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let n,r=0;for(const s of e)r===t.length?t.push(n=new re(this.S(I()),this.S(I()),this,this.options)):n=t[r],n._$AI(s),r++;r<t.length&&(this._$AR(n&&n._$AB.nextSibling,r),t.length=r)}_$AR(e=this._$AA.nextSibling,t){for(this._$AP?.(!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){void 0===this._$AM&&(this._$Cv=e,this._$AP?.(e))}}class se{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(e,t,n,r,s){this.type=1,this._$AH=K,this._$AN=void 0,this.element=e,this.name=t,this._$AM=r,this.options=s,n.length>2||""!==n[0]||""!==n[1]?(this._$AH=Array(n.length-1).fill(new String),this.strings=n):this._$AH=K}_$AI(e,t=this,n,r){const s=this.strings;let i=!1;if(void 0===s)e=te(this,e,t,0),i=!F(e)||e!==this._$AH&&e!==J,i&&(this._$AH=e);else{const r=e;let o,a;for(e=s[0],o=0;o<s.length-1;o++)a=te(this,r[n+o],t,o),a===J&&(a=this._$AH[o]),i||=!F(a)||a!==this._$AH[o],a===K?e=K:e!==K&&(e+=(a??"")+s[o+1]),this._$AH[o]=a}i&&!r&&this.j(e)}j(e){e===K?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,e??"")}}class ie extends se{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===K?void 0:e}}class oe extends se{constructor(){super(...arguments),this.type=4}j(e){this.element.toggleAttribute(this.name,!!e&&e!==K)}}class ae extends se{constructor(e,t,n,r,s){super(e,t,n,r,s),this.type=5}_$AI(e,t=this){if((e=te(this,e,t,0)??K)===J)return;const n=this._$AH,r=e===K&&n!==K||e.capture!==n.capture||e.once!==n.once||e.passive!==n.passive,s=e!==K&&(n===K||r);r&&this.element.removeEventListener(this.name,this,n),s&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){"function"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,e):this._$AH.handleEvent(e)}}class le{constructor(e,t,n){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=n}get _$AU(){return this._$AM._$AU}_$AI(e){te(this,e)}}const ce={P:R,A:O,C:B,M:1,L:X,R:ne,D:U,V:te,I:re,H:se,N:oe,U:ae,B:ie,F:le},ue=C.litHtmlPolyfillSupport;ue?.(ee,re),(C.litHtmlVersions??=[]).push("3.1.2");class he extends x{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){const e=super.createRenderRoot();return this.renderOptions.renderBefore??=e.firstChild,e}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=((e,t,n)=>{const r=n?.renderBefore??t;let s=r._$litPart$;if(void 0===s){const e=n?.renderBefore??null;r._$litPart$=s=new re(t.insertBefore(I(),e),e,void 0,n??{})}return s._$AI(e),s})(t,this.renderRoot,this.renderOptions)}connectedCallback(){super.connectedCallback(),this._$Do?.setConnected(!0)}disconnectedCallback(){super.disconnectedCallback(),this._$Do?.setConnected(!1)}render(){return J}}he._$litElement$=!0,he.finalized=!0,globalThis.litElementHydrateSupport?.({LitElement:he});const de=globalThis.litElementPolyfillSupport;de?.({LitElement:he}),(globalThis.litElementVersions??=[]).push("4.0.4");const pe=e=>(t,n)=>{void 0!==n?n.addInitializer((()=>{customElements.define(e,t)})):customElements.define(e,t)},fe={attribute:!0,type:String,converter:_,reflect:!1,hasChanged:E},me=(e=fe,t,n)=>{const{kind:r,metadata:s}=n;let i=globalThis.litPropertyMetadata.get(s);if(void 0===i&&globalThis.litPropertyMetadata.set(s,i=new Map),i.set(n.name,e),"accessor"===r){const{name:r}=n;return{set(n){const s=t.get.call(this);t.set.call(this,n),this.requestUpdate(r,s,e)},init(t){return void 0!==t&&this.P(r,void 0,e),t}}}if("setter"===r){const{name:r}=n;return function(n){const s=this[r];t.call(this,n),this.requestUpdate(r,s,e)}}throw Error("Unsupported decorator location: "+r)};function ge(e){return(t,n)=>"object"==typeof n?me(e,t,n):((e,t,n)=>{const r=t.hasOwnProperty(n);return t.constructor.createProperty(n,r?{...e,wrapped:!0}:e),r?Object.getOwnPropertyDescriptor(t,n):void 0})(e,t,n)}function ye(e){return ge({...e,state:!0,attribute:!1})}const be=l`
    :host {
        /* Primary colors */
        --primary-color: #514983;
        --primary-light-color: #8274b3;
        --primary-dark-color: #2a2b4f;

        /* Highlighted colors */
        --highlighted-color: #EA3757;
        --highlighted-light-color: #ff6a84;
        --highlighted-dark-color: #b30033;

        /* Background colors */
        --background-color: #261F47;
        --background-light-color: #4a3b6a;
        --background-dark-color: #17102e;
    
        /* Foreground colors */
        --foreground-color: #ffffff;
        --foreground-light-color: #f1f1f1;
        --foreground-dark-color: #d0d0d0;
    }
`,we=l`
    h1 {
        font-size: 3rem;
        display: block;
        width: 100%;
    }

    h2 {
        font-size: 2rem;
        margin: 0.5rem 0 0.5rem;
    }

    h3 {
        font-size: 1.5rem;
        margin: 0;
    }

    hr {
        border: none;
        height: 2px;
        background-color: var(--background-light-color);
        margin: 0.5rem 0 1rem;
    }
`;function ve(e=""){return l`
        :host {
            background-color: var(--background${a(e)}-color);
            color: var(--foreground${a(e)}-color);
        }
    `}function Ae(e=""){return l`
        :host {
            background-color: var(--foreground${a(e)}-color);
            color: var(--background${a(e)}-color);
        }
    `}const _e=9,Ee=95,ke=45,xe=5;function Ce(e){return e.split("").reduce(((e,t)=>(e^t.charCodeAt(0))*-xe),xe)>>>2}function Ne(e="",t=Ee,n=ke,r=Ce){const s=r(e),i=s%_e*(360/_e);return[...Array(e?25:0)].reduce(((e,t,n)=>s&1<<n%15?e+`<rect x="${n>14?7-~~(n/5):~~(n/5)}" y="${n%5}" width="1" height="1"/>`:e),`<svg viewBox="-1.5 -1.5 8 8" xmlns="http://www.w3.org/2000/svg" fill="hsl(${i} ${t}% ${n}%)">`)+"</svg>"}HTMLElement;var Pe=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let Re=class extends he{static get styles(){return l`
            img {
                width: auto;
                height: 100%;
            }
        `}constructor(){super()}render(){return Q`
            <img src="${Oe(this.hash)}"/>
        `}};function Oe(e){return`data:image/svg+xml;utf8,${encodeURIComponent(Ne(e||""))}`}Pe([ge({type:String})],Re.prototype,"hash",void 0),Re=Pe([pe("identicon-img")],Re);const Be=e=>e??K;var Se=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let Te=class extends he{constructor(e){super(),e&&(this.name=e.name||this.name,this.description=e.description||this.description,this.images=e.images||this.images||[],this.button=e.button||this.button,this.address=e.address)}static get styles(){return[l`
                :host {
                    display: block;
                    background-color: var(--foreground-color);
                    border-radius: 8px;
                    padding: 1rem;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                    width: 270px;
                    height: 370px;
                    margin-bottom: 1rem;
                }

                .title-row {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }

                .description {
                    height: 4rem;
                    max-width: 100%;
                    overflow: scroll;
                    overflow-wrap: break-word;
                    position: relative;
                }

                .description::after {
                    content: "";
                    position: absolute;
                    bottom: 0;
                    left: 0;
                    right: 0;
                    height: 2rem;
                    background-image: linear-gradient(to top, var(--foreground-color), transparent);
                }

                .images {
                    display: flex;
                    flex-wrap: wrap;
                    gap: 1rem;
                    margin-top: 1rem;
                    margin-bottom: 1rem;
                    height: 128px;
                    justify-content: center;
                }

                identicon-img {
                    height: 100%;
                    border-radius: 8px;
                    object-fit: cover;
                }

                kana-button {
                    display: block;
                    margin-top: 1rem;
                }

                a {
                    text-decoration: none;
                }
            `,Ae()]}render(){return Q`
            <div class="title-row">
                <h2>${this.name}</h2>
                ${""}
            </div>
            <div class="description">
                ${this.description}
            </div>
            <div class="images">
                <identicon-img hash="${Be(this.address)}">
                </identicon-img>
            </div>
            <a href="${Be(this.button.link)}">
                <kana-button>
                    ${this.button.text}
                </kana-button>
            </a>
        `}};Se([ge({type:String})],Te.prototype,"name",void 0),Se([ge({type:String})],Te.prototype,"description",void 0),Se([ge({type:Array})],Te.prototype,"images",void 0),Se([ge()],Te.prototype,"button",void 0),Se([ge({type:String})],Te.prototype,"address",void 0),Te=Se([pe("kana-card")],Te);const Ie=new WeakMap;function Fe(e){return t=>{if(function(e,t){let n=t;for(;n;){if(Ie.get(n)===e)return!0;n=Object.getPrototypeOf(n)}return!1}(e,t))return t;const n=e(t);return Ie.set(n,e),n}}const Le=Fe((e=>class extends e{static get properties(){return{disabled:{type:Boolean,reflect:!0}}}constructor(){super(),this._requestedToBeDisabled=!1,this.__isUserSettingDisabled=!0,this.__restoreDisabledTo=!1,this.disabled=!1}makeRequestToBeDisabled(){!1===this._requestedToBeDisabled&&(this._requestedToBeDisabled=!0,this.__restoreDisabledTo=this.disabled,this.__internalSetDisabled(!0))}retractRequestToBeDisabled(){!0===this._requestedToBeDisabled&&(this._requestedToBeDisabled=!1,this.__internalSetDisabled(this.__restoreDisabledTo))}__internalSetDisabled(e){this.__isUserSettingDisabled=!1,this.disabled=e,this.__isUserSettingDisabled=!0}requestUpdate(e,t){super.requestUpdate(e,t),"disabled"===e&&(this.__isUserSettingDisabled&&(this.__restoreDisabledTo=this.disabled),!1===this.disabled&&!0===this._requestedToBeDisabled&&this.__internalSetDisabled(!0))}})),Ue=Fe((e=>class extends(Le(e)){static get properties(){return{tabIndex:{type:Number,reflect:!0,attribute:"tabindex"}}}constructor(){super(),this.__isUserSettingTabIndex=!0,this.__restoreTabIndexTo=0,this.__internalSetTabIndex(0)}makeRequestToBeDisabled(){super.makeRequestToBeDisabled(),!1===this._requestedToBeDisabled&&null!=this.tabIndex&&(this.__restoreTabIndexTo=this.tabIndex)}retractRequestToBeDisabled(){super.retractRequestToBeDisabled(),!0===this._requestedToBeDisabled&&this.__internalSetTabIndex(this.__restoreTabIndexTo)}__internalSetTabIndex(e){this.__isUserSettingTabIndex=!1,this.tabIndex=e,this.__isUserSettingTabIndex=!0}requestUpdate(e,t){super.requestUpdate(e,t),"disabled"===e&&(this.disabled?this.__internalSetTabIndex(-1):this.__internalSetTabIndex(this.__restoreTabIndexTo)),"tabIndex"===e&&(this.__isUserSettingTabIndex&&null!=this.tabIndex&&(this.__restoreTabIndexTo=this.tabIndex),-1!==this.tabIndex&&!0===this._requestedToBeDisabled&&this.__internalSetTabIndex(-1))}firstUpdated(e){super.firstUpdated(e),this.disabled&&this.__internalSetTabIndex(-1)}})),Me=window,De=Me.ShadowRoot&&(void 0===Me.ShadyCSS||Me.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,$e=Symbol(),je=new WeakMap;class Ve{constructor(e,t,n){if(this._$cssResult$=!0,n!==$e)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(De&&void 0===e){const n=void 0!==t&&1===t.length;n&&(e=je.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),n&&je.set(t,e))}return e}toString(){return this.cssText}}const He=(e,...t)=>{const n=1===e.length?e[0]:t.reduce(((t,n,r)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(n)+e[r+1]),e[0]);return new Ve(n,e,$e)},Ge=De?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const n of e.cssRules)t+=n.cssText;return(e=>new Ve("string"==typeof e?e:e+"",void 0,$e))(t)})(e):e;var ze;const qe=window,Qe=qe.trustedTypes,Je=Qe?Qe.emptyScript:"",Ke=qe.reactiveElementPolyfillSupport,We={toAttribute(e,t){switch(t){case Boolean:e=e?Je:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let n=e;switch(t){case Boolean:n=null!==e;break;case Number:n=null===e?null:Number(e);break;case Object:case Array:try{n=JSON.parse(e)}catch(e){n=null}}return n}},Ye=(e,t)=>t!==e&&(t==t||e==e),Ze={attribute:!0,type:String,converter:We,reflect:!1,hasChanged:Ye},Xe="finalized";class et extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this._$Eu()}static addInitializer(e){var t;this.finalize(),(null!==(t=this.h)&&void 0!==t?t:this.h=[]).push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,n)=>{const r=this._$Ep(n,t);void 0!==r&&(this._$Ev.set(r,n),e.push(r))})),e}static createProperty(e,t=Ze){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const n="symbol"==typeof e?Symbol():"__"+e,r=this.getPropertyDescriptor(e,n,t);void 0!==r&&Object.defineProperty(this.prototype,e,r)}}static getPropertyDescriptor(e,t,n){return{get(){return this[t]},set(r){const s=this[e];this[t]=r,this.requestUpdate(e,s,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||Ze}static finalize(){if(this.hasOwnProperty(Xe))return!1;this[Xe]=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),void 0!==e.h&&(this.h=[...e.h]),this.elementProperties=new Map(e.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const n of t)this.createProperty(n,e[n])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const n=new Set(e.flat(1/0).reverse());for(const e of n)t.unshift(Ge(e))}else void 0!==e&&t.push(Ge(e));return t}static _$Ep(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}_$Eu(){var e;this._$E_=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(e=this.constructor.h)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,n;(null!==(t=this._$ES)&&void 0!==t?t:this._$ES=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(n=e.hostConnected)||void 0===n||n.call(e))}removeController(e){var t;null===(t=this._$ES)||void 0===t||t.splice(this._$ES.indexOf(e)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Ei.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return((e,t)=>{De?e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):t.forEach((t=>{const n=document.createElement("style"),r=Me.litNonce;void 0!==r&&n.setAttribute("nonce",r),n.textContent=t.cssText,e.appendChild(n)}))})(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,n){this._$AK(e,n)}_$EO(e,t,n=Ze){var r;const s=this.constructor._$Ep(e,n);if(void 0!==s&&!0===n.reflect){const i=(void 0!==(null===(r=n.converter)||void 0===r?void 0:r.toAttribute)?n.converter:We).toAttribute(t,n.type);this._$El=e,null==i?this.removeAttribute(s):this.setAttribute(s,i),this._$El=null}}_$AK(e,t){var n;const r=this.constructor,s=r._$Ev.get(e);if(void 0!==s&&this._$El!==s){const e=r.getPropertyOptions(s),i="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(n=e.converter)||void 0===n?void 0:n.fromAttribute)?e.converter:We;this._$El=s,this[s]=i.fromAttribute(t,e.type),this._$El=null}}requestUpdate(e,t,n){let r=!0;void 0!==e&&(((n=n||this.constructor.getPropertyOptions(e)).hasChanged||Ye)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===n.reflect&&this._$El!==e&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(e,n))):r=!1),!this.isUpdatePending&&r&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((e,t)=>this[t]=e)),this._$Ei=void 0);let t=!1;const n=this._$AL;try{t=this.shouldUpdate(n),t?(this.willUpdate(n),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(n)):this._$Ek()}catch(e){throw t=!1,this._$Ek(),e}t&&this._$AE(n)}willUpdate(e){}_$AE(e){var t;null===(t=this._$ES)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(e){return!0}update(e){void 0!==this._$EC&&(this._$EC.forEach(((e,t)=>this._$EO(t,this[t],e))),this._$EC=void 0),this._$Ek()}updated(e){}firstUpdated(e){}}var tt;et[Xe]=!0,et.elementProperties=new Map,et.elementStyles=[],et.shadowRootOptions={mode:"open"},null==Ke||Ke({ReactiveElement:et}),(null!==(ze=qe.reactiveElementVersions)&&void 0!==ze?ze:qe.reactiveElementVersions=[]).push("1.6.3");const nt=window,rt=nt.trustedTypes,st=rt?rt.createPolicy("lit-html",{createHTML:e=>e}):void 0,it="$lit$",ot=`lit$${(Math.random()+"").slice(9)}$`,at="?"+ot,lt=`<${at}>`,ct=document,ut=()=>ct.createComment(""),ht=e=>null===e||"object"!=typeof e&&"function"!=typeof e,dt=Array.isArray,pt=e=>dt(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]),ft="[ \t\n\f\r]",mt=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,gt=/-->/g,yt=/>/g,bt=RegExp(`>|${ft}(?:([^\\s"'>=/]+)(${ft}*=${ft}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),wt=/'/g,vt=/"/g,At=/^(?:script|style|textarea|title)$/i,_t=e=>(t,...n)=>({_$litType$:e,strings:t,values:n}),Et=_t(1),kt=(_t(2),Symbol.for("lit-noChange")),xt=Symbol.for("lit-nothing"),Ct=new WeakMap,Nt=ct.createTreeWalker(ct,129,null,!1);function Pt(e,t){if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==st?st.createHTML(t):t}const Rt=(e,t)=>{const n=e.length-1,r=[];let s,i=2===t?"<svg>":"",o=mt;for(let t=0;t<n;t++){const n=e[t];let a,l,c=-1,u=0;for(;u<n.length&&(o.lastIndex=u,l=o.exec(n),null!==l);)u=o.lastIndex,o===mt?"!--"===l[1]?o=gt:void 0!==l[1]?o=yt:void 0!==l[2]?(At.test(l[2])&&(s=RegExp("</"+l[2],"g")),o=bt):void 0!==l[3]&&(o=bt):o===bt?">"===l[0]?(o=null!=s?s:mt,c=-1):void 0===l[1]?c=-2:(c=o.lastIndex-l[2].length,a=l[1],o=void 0===l[3]?bt:'"'===l[3]?vt:wt):o===vt||o===wt?o=bt:o===gt||o===yt?o=mt:(o=bt,s=void 0);const h=o===bt&&e[t+1].startsWith("/>")?" ":"";i+=o===mt?n+lt:c>=0?(r.push(a),n.slice(0,c)+it+n.slice(c)+ot+h):n+ot+(-2===c?(r.push(void 0),t):h)}return[Pt(e,i+(e[n]||"<?>")+(2===t?"</svg>":"")),r]};class Ot{constructor({strings:e,_$litType$:t},n){let r;this.parts=[];let s=0,i=0;const o=e.length-1,a=this.parts,[l,c]=Rt(e,t);if(this.el=Ot.createElement(l,n),Nt.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(r=Nt.nextNode())&&a.length<o;){if(1===r.nodeType){if(r.hasAttributes()){const e=[];for(const t of r.getAttributeNames())if(t.endsWith(it)||t.startsWith(ot)){const n=c[i++];if(e.push(t),void 0!==n){const e=r.getAttribute(n.toLowerCase()+it).split(ot),t=/([.?@])?(.*)/.exec(n);a.push({type:1,index:s,name:t[2],strings:e,ctor:"."===t[1]?Ft:"?"===t[1]?Ut:"@"===t[1]?Mt:It})}else a.push({type:6,index:s})}for(const t of e)r.removeAttribute(t)}if(At.test(r.tagName)){const e=r.textContent.split(ot),t=e.length-1;if(t>0){r.textContent=rt?rt.emptyScript:"";for(let n=0;n<t;n++)r.append(e[n],ut()),Nt.nextNode(),a.push({type:2,index:++s});r.append(e[t],ut())}}}else if(8===r.nodeType)if(r.data===at)a.push({type:2,index:s});else{let e=-1;for(;-1!==(e=r.data.indexOf(ot,e+1));)a.push({type:7,index:s}),e+=ot.length-1}s++}}static createElement(e,t){const n=ct.createElement("template");return n.innerHTML=e,n}}function Bt(e,t,n=e,r){var s,i,o,a;if(t===kt)return t;let l=void 0!==r?null===(s=n._$Co)||void 0===s?void 0:s[r]:n._$Cl;const c=ht(t)?void 0:t._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(i=null==l?void 0:l._$AO)||void 0===i||i.call(l,!1),void 0===c?l=void 0:(l=new c(e),l._$AT(e,n,r)),void 0!==r?(null!==(o=(a=n)._$Co)&&void 0!==o?o:a._$Co=[])[r]=l:n._$Cl=l),void 0!==l&&(t=Bt(e,l._$AS(e,t.values),l,r)),t}class St{constructor(e,t){this._$AV=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){var t;const{el:{content:n},parts:r}=this._$AD,s=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:ct).importNode(n,!0);Nt.currentNode=s;let i=Nt.nextNode(),o=0,a=0,l=r[0];for(;void 0!==l;){if(o===l.index){let t;2===l.type?t=new Tt(i,i.nextSibling,this,e):1===l.type?t=new l.ctor(i,l.name,l.strings,this,e):6===l.type&&(t=new Dt(i,this,e)),this._$AV.push(t),l=r[++a]}o!==(null==l?void 0:l.index)&&(i=Nt.nextNode(),o++)}return Nt.currentNode=ct,s}v(e){let t=0;for(const n of this._$AV)void 0!==n&&(void 0!==n.strings?(n._$AI(e,n,t),t+=n.strings.length-2):n._$AI(e[t])),t++}}class Tt{constructor(e,t,n,r){var s;this.type=2,this._$AH=xt,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=n,this.options=r,this._$Cp=null===(s=null==r?void 0:r.isConnected)||void 0===s||s}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cp}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===(null==e?void 0:e.nodeType)&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=Bt(this,e,t),ht(e)?e===xt||null==e||""===e?(this._$AH!==xt&&this._$AR(),this._$AH=xt):e!==this._$AH&&e!==kt&&this._(e):void 0!==e._$litType$?this.g(e):void 0!==e.nodeType?this.$(e):pt(e)?this.T(e):this._(e)}k(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}$(e){this._$AH!==e&&(this._$AR(),this._$AH=this.k(e))}_(e){this._$AH!==xt&&ht(this._$AH)?this._$AA.nextSibling.data=e:this.$(ct.createTextNode(e)),this._$AH=e}g(e){var t;const{values:n,_$litType$:r}=e,s="number"==typeof r?this._$AC(e):(void 0===r.el&&(r.el=Ot.createElement(Pt(r.h,r.h[0]),this.options)),r);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===s)this._$AH.v(n);else{const e=new St(s,this),t=e.u(this.options);e.v(n),this.$(t),this._$AH=e}}_$AC(e){let t=Ct.get(e.strings);return void 0===t&&Ct.set(e.strings,t=new Ot(e)),t}T(e){dt(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let n,r=0;for(const s of e)r===t.length?t.push(n=new Tt(this.k(ut()),this.k(ut()),this,this.options)):n=t[r],n._$AI(s),r++;r<t.length&&(this._$AR(n&&n._$AB.nextSibling,r),t.length=r)}_$AR(e=this._$AA.nextSibling,t){var n;for(null===(n=this._$AP)||void 0===n||n.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cp=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class It{constructor(e,t,n,r,s){this.type=1,this._$AH=xt,this._$AN=void 0,this.element=e,this.name=t,this._$AM=r,this.options=s,n.length>2||""!==n[0]||""!==n[1]?(this._$AH=Array(n.length-1).fill(new String),this.strings=n):this._$AH=xt}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,n,r){const s=this.strings;let i=!1;if(void 0===s)e=Bt(this,e,t,0),i=!ht(e)||e!==this._$AH&&e!==kt,i&&(this._$AH=e);else{const r=e;let o,a;for(e=s[0],o=0;o<s.length-1;o++)a=Bt(this,r[n+o],t,o),a===kt&&(a=this._$AH[o]),i||(i=!ht(a)||a!==this._$AH[o]),a===xt?e=xt:e!==xt&&(e+=(null!=a?a:"")+s[o+1]),this._$AH[o]=a}i&&!r&&this.j(e)}j(e){e===xt?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class Ft extends It{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===xt?void 0:e}}const Lt=rt?rt.emptyScript:"";class Ut extends It{constructor(){super(...arguments),this.type=4}j(e){e&&e!==xt?this.element.setAttribute(this.name,Lt):this.element.removeAttribute(this.name)}}class Mt extends It{constructor(e,t,n,r,s){super(e,t,n,r,s),this.type=5}_$AI(e,t=this){var n;if((e=null!==(n=Bt(this,e,t,0))&&void 0!==n?n:xt)===kt)return;const r=this._$AH,s=e===xt&&r!==xt||e.capture!==r.capture||e.once!==r.once||e.passive!==r.passive,i=e!==xt&&(r===xt||s);s&&this.element.removeEventListener(this.name,this,r),i&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,n;"function"==typeof this._$AH?this._$AH.call(null!==(n=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==n?n:this.element,e):this._$AH.handleEvent(e)}}class Dt{constructor(e,t,n){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=n}get _$AU(){return this._$AM._$AU}_$AI(e){Bt(this,e)}}const $t={O:it,P:ot,A:at,C:1,M:Rt,L:St,R:pt,D:Bt,I:Tt,V:It,H:Ut,N:Mt,U:Ft,F:Dt},jt=nt.litHtmlPolyfillSupport;null==jt||jt(Ot,Tt),(null!==(tt=nt.litHtmlVersions)&&void 0!==tt?tt:nt.litHtmlVersions=[]).push("2.8.0");const Vt=(e,t,n)=>{var r,s;const i=null!==(r=null==n?void 0:n.renderBefore)&&void 0!==r?r:t;let o=i._$litPart$;if(void 0===o){const e=null!==(s=null==n?void 0:n.renderBefore)&&void 0!==s?s:null;i._$litPart$=o=new Tt(t.insertBefore(ut(),e),e,void 0,null!=n?n:{})}return o._$AI(e),o};var Ht,Gt;class zt extends et{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e,t;const n=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=n.firstChild),n}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=Vt(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!1)}render(){return kt}}zt.finalized=!0,zt._$litElement$=!0,null===(Ht=globalThis.litElementHydrateSupport)||void 0===Ht||Ht.call(globalThis,{LitElement:zt});const qt=globalThis.litElementPolyfillSupport;function Qt(e="google-chrome"){const t=window.chrome;if("chromium"===e)return t;const n=window.navigator,r=n.vendor,s=void 0!==window.opr,i=n.userAgent.indexOf("Edge")>-1,o=n.userAgent.match("CriOS");return"ios"===e?o:"google-chrome"===e?null!=t&&"Google Inc."===r&&!1===s&&!1===i:void 0}null==qt||qt({LitElement:zt}),(null!==(Gt=globalThis.litElementVersions)&&void 0!==Gt?Gt:globalThis.litElementVersions=[]).push("3.3.3");const Jt=/Trident/.test(window.navigator.userAgent),Kt=(Qt(),Qt("ios"),Qt("chromium"),navigator.appVersion.indexOf("Mac"),e=>" "===e.key||"Enter"===e.key),Wt=e=>" "===e.key;class Yt extends(Ue(zt)){static get properties(){return{active:{type:Boolean,reflect:!0},type:{type:String,reflect:!0}}}render(){return Et` <div class="button-content" id="${this._buttonId}"><slot></slot></div> `}static get styles(){return[He`
        :host {
          position: relative;
          display: inline-flex;
          box-sizing: border-box;
          vertical-align: middle;
          line-height: 24px;
          background: #eee; /* minimal styling to make it recognizable as btn */
          padding: 8px; /* padding to fix with min-height */
          outline: none; /* focus style handled below */
          cursor: default; /* we should always see the default arrow, never a caret */
          /* TODO: remove, native button also allows selection. Could be usability concern... */
          user-select: none;
          -webkit-user-select: none;
          -moz-user-select: none;
          -ms-user-select: none;
        }

        :host::before {
          content: '';

          /* center vertically and horizontally */
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);

          /* Minimum click area to meet [WCAG Success Criterion 2.5.5 Target Size (Enhanced)](https://www.w3.org/TR/WCAG22/#target-size-enhanced) */
          min-height: 44px;
          min-width: 44px;
          width: 100%;
          height: 100%;
        }

        .button-content {
          display: flex;
          align-items: center;
          justify-content: center;
        }

        /* Show focus styles on keyboard focus. */
        :host(:focus:not([disabled])),
        :host(:focus-visible) {
          /* if you extend, please overwrite */
          outline: 2px solid #bde4ff;
        }

        /* Hide focus styles if they're not needed, for example,
        when an element receives focus via the mouse. */
        :host(:focus:not(:focus-visible)) {
          outline: 0;
        }

        :host(:hover) {
          /* if you extend, please overwrite */
          background: #f4f6f7;
        }

        :host(:active), /* keep native :active to render quickly where possible */
        :host([active]) /* use custom [active] to fix IE11 */ {
          /* if you extend, please overwrite */
          background: gray;
        }

        :host([hidden]) {
          display: none;
        }

        :host([disabled]) {
          pointer-events: none;
          /* if you extend, please overwrite */
          background: lightgray;
          color: #adadad;
          fill: #adadad;
        }
      `]}constructor(){super(),this.type="button",this.active=!1,this._buttonId=`button-${Math.random().toString(36).substr(2,10)}`,Jt&&this.updateComplete.then((()=>{this.hasAttribute("aria-labelledby")||this.setAttribute("aria-labelledby",this._buttonId)})),this.__setupEvents()}connectedCallback(){super.connectedCallback(),this.hasAttribute("role")||this.setAttribute("role","button")}updated(e){super.updated(e),e.has("disabled")&&this.setAttribute("aria-disabled",`${this.disabled}`)}__setupEvents(){this.addEventListener("mousedown",this.__mousedownHandler),this.addEventListener("keydown",this.__keydownHandler),this.addEventListener("keyup",this.__keyupHandler)}__mousedownHandler(){this.active=!0;const e=()=>{this.active=!1,document.removeEventListener("mouseup",e),this.removeEventListener("mouseup",e)};document.addEventListener("mouseup",e),this.addEventListener("mouseup",e)}__keydownHandler(e){if(this.active||!Kt(e))return void(Wt(e)&&e.preventDefault());Wt(e)&&e.preventDefault(),this.active=!0;const t=e=>{Kt(e)&&(this.active=!1,document.removeEventListener("keyup",t,!0))};document.addEventListener("keyup",t,!0)}__keyupHandler(e){if(Kt(e)){if(e.target&&e.target!==this)return;this.click()}}}class Zt extends Yt{constructor(){super(),this.type="reset",this.__setupDelegationInConstructor(),this.__submitAndResetHelperButton=document.createElement("button"),this.__preventEventLeakage=this.__preventEventLeakage.bind(this)}connectedCallback(){super.connectedCallback(),this.updateComplete.then((()=>{this._setupSubmitAndResetHelperOnConnected()}))}disconnectedCallback(){super.disconnectedCallback(),this._teardownSubmitAndResetHelperOnDisconnected()}__preventEventLeakage(e){e.target===this.__submitAndResetHelperButton&&e.stopImmediatePropagation()}_setupSubmitAndResetHelperOnConnected(){this.appendChild(this.__submitAndResetHelperButton),this._form=this.__submitAndResetHelperButton.form,this.removeChild(this.__submitAndResetHelperButton),this._form&&this._form.addEventListener("click",this.__preventEventLeakage)}_teardownSubmitAndResetHelperOnDisconnected(){this._form&&this._form.removeEventListener("click",this.__preventEventLeakage)}async __clickDelegationHandler(e){this._form||await this.updateComplete,"submit"!==this.type&&"reset"!==this.type||e.target!==this||!this._form||(this.__submitAndResetHelperButton.type=this.type,this._form.appendChild(this.__submitAndResetHelperButton),this.__submitAndResetHelperButton.click(),this._form.removeChild(this.__submitAndResetHelperButton))}__setupDelegationInConstructor(){this.addEventListener("click",this.__clickDelegationHandler,!0)}}const Xt=new WeakMap;class en extends Zt{get _nativeButtonNode(){return Xt.get(this._form)?.helper||null}constructor(){super(),this.type="submit",this.__implicitSubmitHelperButton=null}_setupSubmitAndResetHelperOnConnected(){if(super._setupSubmitAndResetHelperOnConnected(),!this._form||"submit"!==this.type)return;const e=this._form;if(!Xt.get(this._form)){const t=function(){const e=document.createElement("button");return e.tabIndex=-1,e.type="submit",e.setAttribute("aria-hidden","true"),e.style.cssText="\n    position: absolute;\n    top: 0;\n    left: 0;\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    overflow: hidden;\n    white-space: nowrap;\n    height: 1px;\n    width: 1px;\n    padding: 0; /* reset default agent styles */\n    border: 0; /* reset default agent styles */\n  ",e}(),n=document.createElement("div");n.appendChild(t),Xt.set(this._form,{lionButtons:new Set,helper:t,observer:new MutationObserver((()=>{e.appendChild(n)}))}),e.appendChild(n),Xt.get(e)?.observer.observe(n,{childList:!0})}Xt.get(e)?.lionButtons.add(this)}_teardownSubmitAndResetHelperOnDisconnected(){if(super._teardownSubmitAndResetHelperOnDisconnected(),this._form){const e=Xt.get(this._form);e&&(e.lionButtons.delete(this),e.lionButtons.size||(this._form.contains(e.helper)&&e.helper.remove(),Xt.get(this._form)?.observer.disconnect(),Xt.delete(this._form)))}}}var tn=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};const nn=[l`
        :host(:hover) {
            background-color: var(--highlighted-light-color);
            color: var(--background-light-color);
        }

        :host(:active), :host([active]) {
            background-color: var(--highlighted-dark-color);
            color: var(--foreground-color);
        }

        :host {
            justify-content: center;
            align-items: center;
            border-radius: 5px;
        }
    `,function(e=""){return l`
        :host {
            background-color: var(--highlighted${a(e)}-color);
            color: var(--foreground${a(e)}-color);
        }
    `}()];let rn=class extends Yt{static get styles(){return[...super.styles,...nn]}};rn.formAssociated=!0,rn=tn([pe("kana-button")],rn);let sn=class extends en{constructor(){super()}static get styles(){return[...super.styles,...nn]}};sn.formAssociated=!0,sn=tn([pe("kana-button-submit")],sn);let on=class extends he{static get styles(){return[l`
                @font-face {
                    font-family: 'Material Icons';
                    font-style: normal;
                    font-weight: 400;
                    src: url("material-icons.ttf") format('truetype');
                }
                
                :host {
                    font-family: 'Material Icons';
                    font-weight: normal;
                    font-style: normal;
                    font-size: 24px;
                    line-height: 1;
                    letter-spacing: normal;
                    text-transform: none;
                    display: inline-block;
                    white-space: nowrap;
                    word-wrap: normal;
                    direction: ltr;
                }
            `]}render(){return Q`<span><slot></slot></span>`}};on=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe("kana-icon")],on);var an=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let ln=class extends he{constructor(){super(),this.size="8rem"}static get styles(){return l`
      :host {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        flex: 1;
        z-index: 1;
      }

      .loader {
        display: inline-block;
        animation: rotation 1.5s linear infinite;
      }

      @keyframes rotation {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(359deg);
        }
      }
    `}render(){return Q`
      <kana-icon class="loader" style="font-size: ${this.size}">
        sync
      </kana-icon>
    `}};an([ge({type:String})],ln.prototype,"size",void 0),ln=an([pe("loading-icon")],ln);const cn=e=>(...t)=>({_$litDirective$:e,values:t});class un{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,n){this._$Ct=e,this._$AM=t,this._$Ci=n}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}const{I:hn}=ce,dn=()=>document.createComment(""),pn=(e,t,n)=>{const r=e._$AA.parentNode,s=void 0===t?e._$AB:t._$AA;if(void 0===n){const t=r.insertBefore(dn(),s),i=r.insertBefore(dn(),s);n=new hn(t,i,e,e.options)}else{const t=n._$AB.nextSibling,i=n._$AM,o=i!==e;if(o){let t;n._$AQ?.(e),n._$AM=e,void 0!==n._$AP&&(t=e._$AU)!==i._$AU&&n._$AP(t)}if(t!==s||o){let e=n._$AA;for(;e!==t;){const t=e.nextSibling;r.insertBefore(e,s),e=t}}}return n},fn=(e,t,n=e)=>(e._$AI(t,n),e),mn={},gn=e=>{e._$AP?.(!1,!0);let t=e._$AA;const n=e._$AB.nextSibling;for(;t!==n;){const e=t.nextSibling;t.remove(),t=e}},yn=(e,t,n)=>{const r=new Map;for(let s=t;s<=n;s++)r.set(e[s],s);return r},bn=cn(class extends un{constructor(e){if(super(e),2!==e.type)throw Error("repeat() can only be used in text expressions")}dt(e,t,n){let r;void 0===n?n=t:void 0!==t&&(r=t);const s=[],i=[];let o=0;for(const t of e)s[o]=r?r(t,o):o,i[o]=n(t,o),o++;return{values:i,keys:s}}render(e,t,n){return this.dt(e,t,n).values}update(e,[t,n,r]){const s=(e=>e._$AH)(e),{values:i,keys:o}=this.dt(t,n,r);if(!Array.isArray(s))return this.ut=o,i;const a=this.ut??=[],l=[];let c,u,h=0,d=s.length-1,p=0,f=i.length-1;for(;h<=d&&p<=f;)if(null===s[h])h++;else if(null===s[d])d--;else if(a[h]===o[p])l[p]=fn(s[h],i[p]),h++,p++;else if(a[d]===o[f])l[f]=fn(s[d],i[f]),d--,f--;else if(a[h]===o[f])l[f]=fn(s[h],i[f]),pn(e,l[f+1],s[h]),h++,f--;else if(a[d]===o[p])l[p]=fn(s[d],i[p]),pn(e,s[h],s[d]),d--,p++;else if(void 0===c&&(c=yn(o,p,f),u=yn(a,h,d)),c.has(a[h]))if(c.has(a[d])){const t=u.get(o[p]),n=void 0!==t?s[t]:null;if(null===n){const t=pn(e,s[h]);fn(t,i[p]),l[p]=t}else l[p]=fn(n,i[p]),pn(e,s[h],n),s[t]=null;p++}else gn(s[d]),d--;else gn(s[h]),h++;for(;p<=f;){const t=pn(e,l[f+1]);fn(t,i[p]),l[p++]=t}for(;h<=d;){const e=s[h++];null!==e&&gn(e)}return this.ut=o,((e,t=mn)=>{e._$AH=t})(e,l),J}});function wn(e,t,n){return e?t(e):n?.(e)}const vn="6.11.1";function An(e,t,n){const r=t.split("|").map((e=>e.trim()));for(let n=0;n<r.length;n++)switch(t){case"any":return;case"bigint":case"boolean":case"number":case"string":if(typeof e===t)return}const s=new Error(`invalid value for type ${t}`);throw s.code="INVALID_ARGUMENT",s.argument=`value.${n}`,s.value=e,s}async function _n(e){const t=Object.keys(e),n=await Promise.all(t.map((t=>Promise.resolve(e[t]))));return n.reduce(((e,n,r)=>(e[t[r]]=n,e)),{})}function En(e,t,n){for(let r in t){let s=t[r];const i=n?n[r]:null;i&&An(s,i,r),Object.defineProperty(e,r,{enumerable:!0,value:s,writable:!1})}}function kn(e){if(null==e)return"null";if(Array.isArray(e))return"[ "+e.map(kn).join(", ")+" ]";if(e instanceof Uint8Array){const t="0123456789abcdef";let n="0x";for(let r=0;r<e.length;r++)n+=t[e[r]>>4],n+=t[15&e[r]];return n}if("object"==typeof e&&"function"==typeof e.toJSON)return kn(e.toJSON());switch(typeof e){case"boolean":case"symbol":case"number":return e.toString();case"bigint":return BigInt(e).toString();case"string":return JSON.stringify(e);case"object":{const t=Object.keys(e);return t.sort(),"{ "+t.map((t=>`${kn(t)}: ${kn(e[t])}`)).join(", ")+" }"}}return"[ COULD NOT SERIALIZE ]"}function xn(e,t){return e&&e.code===t}function Cn(e){return xn(e,"CALL_EXCEPTION")}function Nn(e,t,n){let r,s=e;{const r=[];if(n){if("message"in n||"code"in n||"name"in n)throw new Error(`value will overwrite populated values: ${kn(n)}`);for(const e in n){if("shortMessage"===e)continue;const t=n[e];r.push(e+"="+kn(t))}}r.push(`code=${t}`),r.push(`version=${vn}`),r.length&&(e+=" ("+r.join(", ")+")")}switch(t){case"INVALID_ARGUMENT":r=new TypeError(e);break;case"NUMERIC_FAULT":case"BUFFER_OVERRUN":r=new RangeError(e);break;default:r=new Error(e)}return En(r,{code:t}),n&&Object.assign(r,n),null==r.shortMessage&&En(r,{shortMessage:s}),r}function Pn(e,t,n,r){if(!e)throw Nn(t,n,r)}function Rn(e,t,n,r){Pn(e,t,"INVALID_ARGUMENT",{argument:n,value:r})}function On(e,t,n){null==n&&(n=""),n&&(n=": "+n),Pn(e>=t,"missing arguemnt"+n,"MISSING_ARGUMENT",{count:e,expectedCount:t}),Pn(e<=t,"too many arguments"+n,"UNEXPECTED_ARGUMENT",{count:e,expectedCount:t})}const Bn=["NFD","NFC","NFKD","NFKC"].reduce(((e,t)=>{try{if("test"!=="test".normalize(t))throw new Error("bad");if("NFD"===t){if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken")}e.push(t)}catch(e){}return e}),[]);function Sn(e,t,n){if(null==n&&(n=""),e!==t){let e=n,t="new";n&&(e+=".",t+=" "+n),Pn(!1,`private constructor; use ${e}from* methods`,"UNSUPPORTED_OPERATION",{operation:t})}}function Tn(e,t,n){if(e instanceof Uint8Array)return n?new Uint8Array(e):e;if("string"==typeof e&&e.match(/^0x([0-9a-f][0-9a-f])*$/i)){const t=new Uint8Array((e.length-2)/2);let n=2;for(let r=0;r<t.length;r++)t[r]=parseInt(e.substring(n,n+2),16),n+=2;return t}Rn(!1,"invalid BytesLike value",t||"value",e)}function In(e,t){return Tn(e,t,!1)}function Fn(e,t){return Tn(e,t,!0)}function Ln(e,t){return!("string"!=typeof e||!e.match(/^0x[0-9A-Fa-f]*$/)||"number"==typeof t&&e.length!==2+2*t||!0===t&&e.length%2!=0)}const Un="0123456789abcdef";function Mn(e){const t=In(e);let n="0x";for(let e=0;e<t.length;e++){const r=t[e];n+=Un[(240&r)>>4]+Un[15&r]}return n}function Dn(e){return"0x"+e.map((e=>Mn(e).substring(2))).join("")}function $n(e){return Ln(e,!0)?(e.length-2)/2:In(e).length}function jn(e,t,n){const r=In(e);return null!=n&&n>r.length&&Pn(!1,"cannot slice beyond data bounds","BUFFER_OVERRUN",{buffer:r,length:r.length,offset:n}),Mn(r.slice(null==t?0:t,null==n?r.length:n))}function Vn(e,t,n){const r=In(e);Pn(t>=r.length,"padding exceeds data length","BUFFER_OVERRUN",{buffer:new Uint8Array(r),length:t,offset:t+1});const s=new Uint8Array(t);return s.fill(0),n?s.set(r,t-r.length):s.set(r,0),Mn(s)}function Hn(e,t){return Vn(e,t,!0)}const Gn=BigInt(0),zn=BigInt(1),qn=9007199254740991;function Qn(e,t){let n=Kn(e,"value");const r=BigInt(Xn(t,"width")),s=zn<<r-zn;return n<Gn?(n=-n,Pn(n<=s,"too low","NUMERIC_FAULT",{operation:"toTwos",fault:"overflow",value:e}),(~n&(zn<<r)-zn)+zn):(Pn(n<s,"too high","NUMERIC_FAULT",{operation:"toTwos",fault:"overflow",value:e}),n)}function Jn(e,t){const n=Wn(e,"value"),r=BigInt(Xn(t,"bits"));return n&(zn<<r)-zn}function Kn(e,t){switch(typeof e){case"bigint":return e;case"number":return Rn(Number.isInteger(e),"underflow",t||"value",e),Rn(e>=-qn&&e<=qn,"overflow",t||"value",e),BigInt(e);case"string":try{if(""===e)throw new Error("empty string");return"-"===e[0]&&"-"!==e[1]?-BigInt(e.substring(1)):BigInt(e)}catch(n){Rn(!1,`invalid BigNumberish string: ${n.message}`,t||"value",e)}}Rn(!1,"invalid BigNumberish value",t||"value",e)}function Wn(e,t){const n=Kn(e,t);return Pn(n>=Gn,"unsigned value cannot be negative","NUMERIC_FAULT",{fault:"overflow",operation:"getUint",value:e}),n}const Yn="0123456789abcdef";function Zn(e){if(e instanceof Uint8Array){let t="0x0";for(const n of e)t+=Yn[n>>4],t+=Yn[15&n];return BigInt(t)}return Kn(e)}function Xn(e,t){switch(typeof e){case"bigint":return Rn(e>=-qn&&e<=qn,"overflow",t||"value",e),Number(e);case"number":return Rn(Number.isInteger(e),"underflow",t||"value",e),Rn(e>=-qn&&e<=qn,"overflow",t||"value",e),e;case"string":try{if(""===e)throw new Error("empty string");return Xn(BigInt(e),t)}catch(n){Rn(!1,`invalid numeric string: ${n.message}`,t||"value",e)}}Rn(!1,"invalid numeric value",t||"value",e)}function er(e,t){let n=Wn(e,"value").toString(16);if(null==t)n.length%2&&(n="0"+n);else{const r=Xn(t,"width");for(Pn(2*r>=n.length,`value exceeds width (${r} bytes)`,"NUMERIC_FAULT",{operation:"toBeHex",fault:"overflow",value:e});n.length<2*r;)n="0"+n}return"0x"+n}function tr(e){const t=Wn(e,"value");if(t===Gn)return new Uint8Array([]);let n=t.toString(16);n.length%2&&(n="0"+n);const r=new Uint8Array(n.length/2);for(let e=0;e<r.length;e++){const t=2*e;r[e]=parseInt(n.substring(t,t+2),16)}return r}function nr(e){let t=Mn(function(e){return Ln(e,!0)||e instanceof Uint8Array}(e)?e:tr(e)).substring(2);for(;t.startsWith("0");)t=t.substring(1);return""===t&&(t="0"),"0x"+t}const rr=32,sr=new Uint8Array(rr),ir=["then"],or={};function ar(e,t){const n=new Error(`deferred error during ABI decoding triggered accessing ${e}`);throw n.error=t,n}class lr extends Array{#e;constructor(...e){const t=e[0];let n=e[1],r=(e[2]||[]).slice(),s=!0;t!==or&&(n=e,r=[],s=!1),super(n.length),n.forEach(((e,t)=>{this[t]=e}));const i=r.reduce(((e,t)=>("string"==typeof t&&e.set(t,(e.get(t)||0)+1),e)),new Map);if(this.#e=Object.freeze(n.map(((e,t)=>{const n=r[t];return null!=n&&1===i.get(n)?n:null}))),s)return Object.freeze(this),new Proxy(this,{get:(e,t,n)=>{if("string"==typeof t){if(t.match(/^[0-9]+$/)){const n=Xn(t,"%index");if(n<0||n>=this.length)throw new RangeError("out of result range");const r=e[n];return r instanceof Error&&ar(`index ${n}`,r),r}if(ir.indexOf(t)>=0)return Reflect.get(e,t,n);const r=e[t];if(r instanceof Function)return function(...t){return r.apply(this===n?e:this,t)};if(!(t in e))return e.getValue.apply(this===n?e:this,[t])}return Reflect.get(e,t,n)}})}toArray(){const e=[];return this.forEach(((t,n)=>{t instanceof Error&&ar(`index ${n}`,t),e.push(t)})),e}toObject(){return this.#e.reduce(((e,t,n)=>(Pn(null!=t,"value at index ${ index } unnamed","UNSUPPORTED_OPERATION",{operation:"toObject()"}),t in e||(e[t]=this.getValue(t)),e)),{})}slice(e,t){null==e&&(e=0),e<0&&(e+=this.length)<0&&(e=0),null==t&&(t=this.length),t<0&&(t+=this.length)<0&&(t=0),t>this.length&&(t=this.length);const n=[],r=[];for(let s=e;s<t;s++)n.push(this[s]),r.push(this.#e[s]);return new lr(or,n,r)}filter(e,t){const n=[],r=[];for(let s=0;s<this.length;s++){const i=this[s];i instanceof Error&&ar(`index ${s}`,i),e.call(t,i,s,this)&&(n.push(i),r.push(this.#e[s]))}return new lr(or,n,r)}map(e,t){const n=[];for(let r=0;r<this.length;r++){const s=this[r];s instanceof Error&&ar(`index ${r}`,s),n.push(e.call(t,s,r,this))}return n}getValue(e){const t=this.#e.indexOf(e);if(-1===t)return;const n=this[t];return n instanceof Error&&ar(`property ${JSON.stringify(e)}`,n.error),n}static fromItems(e,t){return new lr(or,e,t)}}function cr(e){let t=tr(e);return Pn(t.length<=rr,"value out-of-bounds","BUFFER_OVERRUN",{buffer:t,length:rr,offset:t.length}),t.length!==rr&&(t=Fn(Dn([sr.slice(t.length%rr),t]))),t}class ur{name;type;localName;dynamic;constructor(e,t,n,r){En(this,{name:e,type:t,localName:n,dynamic:r},{name:"string",type:"string",localName:"string",dynamic:"boolean"})}_throwError(e,t){Rn(!1,e,this.localName,t)}}class hr{#t;#n;constructor(){this.#t=[],this.#n=0}get data(){return Dn(this.#t)}get length(){return this.#n}#r(e){return this.#t.push(e),this.#n+=e.length,e.length}appendWriter(e){return this.#r(Fn(e.data))}writeBytes(e){let t=Fn(e);const n=t.length%rr;return n&&(t=Fn(Dn([t,sr.slice(n)]))),this.#r(t)}writeValue(e){return this.#r(cr(e))}writeUpdatableValue(){const e=this.#t.length;return this.#t.push(sr),this.#n+=rr,t=>{this.#t[e]=cr(t)}}}class dr{allowLoose;#t;#s;#i;#o;#a;constructor(e,t,n){En(this,{allowLoose:!!t}),this.#t=Fn(e),this.#i=0,this.#o=null,this.#a=null!=n?n:1024,this.#s=0}get data(){return Mn(this.#t)}get dataLength(){return this.#t.length}get consumed(){return this.#s}get bytes(){return new Uint8Array(this.#t)}#l(e){if(this.#o)return this.#o.#l(e);this.#i+=e,Pn(this.#a<1||this.#i<=this.#a*this.dataLength,`compressed ABI data exceeds inflation ratio of ${this.#a} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`,"BUFFER_OVERRUN",{buffer:Fn(this.#t),offset:this.#s,length:e,info:{bytesRead:this.#i,dataLength:this.dataLength}})}#c(e,t,n){let r=Math.ceil(t/rr)*rr;return this.#s+r>this.#t.length&&(this.allowLoose&&n&&this.#s+t<=this.#t.length?r=t:Pn(!1,"data out-of-bounds","BUFFER_OVERRUN",{buffer:Fn(this.#t),length:this.#t.length,offset:this.#s+r})),this.#t.slice(this.#s,this.#s+r)}subReader(e){const t=new dr(this.#t.slice(this.#s+e),this.allowLoose,this.#a);return t.#o=this,t}readBytes(e,t){let n=this.#c(0,e,!!t);return this.#l(e),this.#s+=n.length,n.slice(0,e)}readValue(){return Zn(this.readBytes(rr))}readIndex(){return Xn(Zn(this.readBytes(rr)))}}function pr(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}function fr(e,...t){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");if(t.length>0&&!t.includes(e.length))throw new Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`)}function mr(e,t=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(t&&e.finished)throw new Error("Hash#digest() has already been called")}function gr(e,t){fr(e);const n=t.outputLen;if(e.length<n)throw new Error(`digestInto() expects output buffer of length at least ${n}`)}const yr=BigInt(2**32-1),br=BigInt(32);function wr(e,t=!1){return t?{h:Number(e&yr),l:Number(e>>br&yr)}:{h:0|Number(e>>br&yr),l:0|Number(e&yr)}}function vr(e,t=!1){let n=new Uint32Array(e.length),r=new Uint32Array(e.length);for(let s=0;s<e.length;s++){const{h:i,l:o}=wr(e[s],t);[n[s],r[s]]=[i,o]}return[n,r]}const Ar="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0,_r=e=>e instanceof Uint8Array,Er=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),kr=(e,t)=>e<<32-t|e>>>t;if(68!==new Uint8Array(new Uint32Array([287454020]).buffer)[0])throw new Error("Non little-endian hardware is not supported");function xr(e){if("string"==typeof e&&(e=function(e){if("string"!=typeof e)throw new Error("utf8ToBytes expected string, got "+typeof e);return new Uint8Array((new TextEncoder).encode(e))}(e)),!_r(e))throw new Error("expected Uint8Array, got "+typeof e);return e}class Cr{clone(){return this._cloneInto()}}function Nr(e){const t=t=>e().update(xr(t)).digest(),n=e();return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=()=>e(),t}function Pr(e=32){if(Ar&&"function"==typeof Ar.getRandomValues)return Ar.getRandomValues(new Uint8Array(e));throw new Error("crypto.getRandomValues must be defined")}const[Rr,Or,Br]=[[],[],[]],Sr=BigInt(0),Tr=BigInt(1),Ir=BigInt(2),Fr=BigInt(7),Lr=BigInt(256),Ur=BigInt(113);for(let e=0,t=Tr,n=1,r=0;e<24;e++){[n,r]=[r,(2*n+3*r)%5],Rr.push(2*(5*r+n)),Or.push((e+1)*(e+2)/2%64);let s=Sr;for(let e=0;e<7;e++)t=(t<<Tr^(t>>Fr)*Ur)%Lr,t&Ir&&(s^=Tr<<(Tr<<BigInt(e))-Tr);Br.push(s)}const[Mr,Dr]=vr(Br,!0),$r=(e,t,n)=>n>32?((e,t,n)=>t<<n-32|e>>>64-n)(e,t,n):((e,t,n)=>e<<n|t>>>32-n)(e,t,n),jr=(e,t,n)=>n>32?((e,t,n)=>e<<n-32|t>>>64-n)(e,t,n):((e,t,n)=>t<<n|e>>>32-n)(e,t,n);class Vr extends Cr{constructor(e,t,n,r=!1,s=24){if(super(),this.blockLen=e,this.suffix=t,this.outputLen=n,this.enableXOF=r,this.rounds=s,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,pr(n),0>=this.blockLen||this.blockLen>=200)throw new Error("Sha3 supports only keccak-f1600 function");var i;this.state=new Uint8Array(200),this.state32=(i=this.state,new Uint32Array(i.buffer,i.byteOffset,Math.floor(i.byteLength/4)))}keccak(){!function(e,t=24){const n=new Uint32Array(10);for(let r=24-t;r<24;r++){for(let t=0;t<10;t++)n[t]=e[t]^e[t+10]^e[t+20]^e[t+30]^e[t+40];for(let t=0;t<10;t+=2){const r=(t+8)%10,s=(t+2)%10,i=n[s],o=n[s+1],a=$r(i,o,1)^n[r],l=jr(i,o,1)^n[r+1];for(let n=0;n<50;n+=10)e[t+n]^=a,e[t+n+1]^=l}let t=e[2],s=e[3];for(let n=0;n<24;n++){const r=Or[n],i=$r(t,s,r),o=jr(t,s,r),a=Rr[n];t=e[a],s=e[a+1],e[a]=i,e[a+1]=o}for(let t=0;t<50;t+=10){for(let r=0;r<10;r++)n[r]=e[t+r];for(let r=0;r<10;r++)e[t+r]^=~n[(r+2)%10]&n[(r+4)%10]}e[0]^=Mr[r],e[1]^=Dr[r]}n.fill(0)}(this.state32,this.rounds),this.posOut=0,this.pos=0}update(e){mr(this);const{blockLen:t,state:n}=this,r=(e=xr(e)).length;for(let s=0;s<r;){const i=Math.min(t-this.pos,r-s);for(let t=0;t<i;t++)n[this.pos++]^=e[s++];this.pos===t&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;const{state:e,suffix:t,pos:n,blockLen:r}=this;e[n]^=t,0!=(128&t)&&n===r-1&&this.keccak(),e[r-1]^=128,this.keccak()}writeInto(e){mr(this,!1),fr(e),this.finish();const t=this.state,{blockLen:n}=this;for(let r=0,s=e.length;r<s;){this.posOut>=n&&this.keccak();const i=Math.min(n-this.posOut,s-r);e.set(t.subarray(this.posOut,this.posOut+i),r),this.posOut+=i,r+=i}return e}xofInto(e){if(!this.enableXOF)throw new Error("XOF is not possible for this instance");return this.writeInto(e)}xof(e){return pr(e),this.xofInto(new Uint8Array(e))}digestInto(e){if(gr(e,this),this.finished)throw new Error("digest() was already called");return this.writeInto(e),this.destroy(),e}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(e){const{blockLen:t,suffix:n,outputLen:r,rounds:s,enableXOF:i}=this;return e||(e=new Vr(t,n,r,i,s)),e.state32.set(this.state32),e.pos=this.pos,e.posOut=this.posOut,e.finished=this.finished,e.rounds=s,e.suffix=n,e.outputLen=r,e.enableXOF=i,e.destroyed=this.destroyed,e}}const Hr=((e,t,n)=>Nr((()=>new Vr(t,e,n))))(1,136,32);let Gr=!1;const zr=function(e){return Hr(e)};let qr=zr;function Qr(e){const t=In(e,"data");return Mn(qr(t))}Qr._=zr,Qr.lock=function(){Gr=!0},Qr.register=function(e){if(Gr)throw new TypeError("keccak256 is locked");qr=e},Object.freeze(Qr);const Jr=BigInt(0),Kr=BigInt(36);function Wr(e){const t=(e=e.toLowerCase()).substring(2).split(""),n=new Uint8Array(40);for(let e=0;e<40;e++)n[e]=t[e].charCodeAt(0);const r=In(Qr(n));for(let e=0;e<40;e+=2)r[e>>1]>>4>=8&&(t[e]=t[e].toUpperCase()),(15&r[e>>1])>=8&&(t[e+1]=t[e+1].toUpperCase());return"0x"+t.join("")}const Yr={};for(let e=0;e<10;e++)Yr[String(e)]=String(e);for(let e=0;e<26;e++)Yr[String.fromCharCode(65+e)]=String(10+e);const Zr=15;const Xr=function(){const e={};for(let t=0;t<36;t++)e["0123456789abcdefghijklmnopqrstuvwxyz"[t]]=BigInt(t);return e}();function es(e){if(Rn("string"==typeof e,"invalid address","address",e),e.match(/^(0x)?[0-9a-fA-F]{40}$/)){e.startsWith("0x")||(e="0x"+e);const t=Wr(e);return Rn(!e.match(/([A-F].*[a-f])|([a-f].*[A-F])/)||t===e,"bad address checksum","address",e),t}if(e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){Rn(e.substring(2,4)===function(e){let t=(e=(e=e.toUpperCase()).substring(4)+e.substring(0,2)+"00").split("").map((e=>Yr[e])).join("");for(;t.length>=Zr;){let e=t.substring(0,Zr);t=parseInt(e,10)%97+t.substring(e.length)}let n=String(98-parseInt(t,10)%97);for(;n.length<2;)n="0"+n;return n}(e),"bad icap checksum","address",e);let t=function(e){e=e.toLowerCase();let t=Jr;for(let n=0;n<e.length;n++)t=t*Kr+Xr[e[n]];return t}(e.substring(4)).toString(16);for(;t.length<40;)t="0"+t;return Wr("0x"+t)}Rn(!1,"invalid address","address",e)}const ts={};function ns(e,t){let n=!1;return t<0&&(n=!0,t*=-1),new is(ts,`${n?"":"u"}int${t}`,e,{signed:n,width:t})}function rs(e,t){return new is(ts,`bytes${t||""}`,e,{size:t})}const ss=Symbol.for("_ethers_typed");class is{type;value;#u;_typedSymbol;constructor(e,t,n,r){null==r&&(r=null),Sn(ts,e,"Typed"),En(this,{_typedSymbol:ss,type:t,value:n}),this.#u=r,this.format()}format(){if("array"===this.type)throw new Error("");if("dynamicArray"===this.type)throw new Error("");return"tuple"===this.type?`tuple(${this.value.map((e=>e.format())).join(",")})`:this.type}defaultValue(){return 0}minValue(){return 0}maxValue(){return 0}isBigInt(){return!!this.type.match(/^u?int[0-9]+$/)}isData(){return this.type.startsWith("bytes")}isString(){return"string"===this.type}get tupleName(){if("tuple"!==this.type)throw TypeError("not a tuple");return this.#u}get arrayLength(){if("array"!==this.type)throw TypeError("not an array");return!0===this.#u?-1:!1===this.#u?this.value.length:null}static from(e,t){return new is(ts,e,t)}static uint8(e){return ns(e,8)}static uint16(e){return ns(e,16)}static uint24(e){return ns(e,24)}static uint32(e){return ns(e,32)}static uint40(e){return ns(e,40)}static uint48(e){return ns(e,48)}static uint56(e){return ns(e,56)}static uint64(e){return ns(e,64)}static uint72(e){return ns(e,72)}static uint80(e){return ns(e,80)}static uint88(e){return ns(e,88)}static uint96(e){return ns(e,96)}static uint104(e){return ns(e,104)}static uint112(e){return ns(e,112)}static uint120(e){return ns(e,120)}static uint128(e){return ns(e,128)}static uint136(e){return ns(e,136)}static uint144(e){return ns(e,144)}static uint152(e){return ns(e,152)}static uint160(e){return ns(e,160)}static uint168(e){return ns(e,168)}static uint176(e){return ns(e,176)}static uint184(e){return ns(e,184)}static uint192(e){return ns(e,192)}static uint200(e){return ns(e,200)}static uint208(e){return ns(e,208)}static uint216(e){return ns(e,216)}static uint224(e){return ns(e,224)}static uint232(e){return ns(e,232)}static uint240(e){return ns(e,240)}static uint248(e){return ns(e,248)}static uint256(e){return ns(e,256)}static uint(e){return ns(e,256)}static int8(e){return ns(e,-8)}static int16(e){return ns(e,-16)}static int24(e){return ns(e,-24)}static int32(e){return ns(e,-32)}static int40(e){return ns(e,-40)}static int48(e){return ns(e,-48)}static int56(e){return ns(e,-56)}static int64(e){return ns(e,-64)}static int72(e){return ns(e,-72)}static int80(e){return ns(e,-80)}static int88(e){return ns(e,-88)}static int96(e){return ns(e,-96)}static int104(e){return ns(e,-104)}static int112(e){return ns(e,-112)}static int120(e){return ns(e,-120)}static int128(e){return ns(e,-128)}static int136(e){return ns(e,-136)}static int144(e){return ns(e,-144)}static int152(e){return ns(e,-152)}static int160(e){return ns(e,-160)}static int168(e){return ns(e,-168)}static int176(e){return ns(e,-176)}static int184(e){return ns(e,-184)}static int192(e){return ns(e,-192)}static int200(e){return ns(e,-200)}static int208(e){return ns(e,-208)}static int216(e){return ns(e,-216)}static int224(e){return ns(e,-224)}static int232(e){return ns(e,-232)}static int240(e){return ns(e,-240)}static int248(e){return ns(e,-248)}static int256(e){return ns(e,-256)}static int(e){return ns(e,-256)}static bytes1(e){return rs(e,1)}static bytes2(e){return rs(e,2)}static bytes3(e){return rs(e,3)}static bytes4(e){return rs(e,4)}static bytes5(e){return rs(e,5)}static bytes6(e){return rs(e,6)}static bytes7(e){return rs(e,7)}static bytes8(e){return rs(e,8)}static bytes9(e){return rs(e,9)}static bytes10(e){return rs(e,10)}static bytes11(e){return rs(e,11)}static bytes12(e){return rs(e,12)}static bytes13(e){return rs(e,13)}static bytes14(e){return rs(e,14)}static bytes15(e){return rs(e,15)}static bytes16(e){return rs(e,16)}static bytes17(e){return rs(e,17)}static bytes18(e){return rs(e,18)}static bytes19(e){return rs(e,19)}static bytes20(e){return rs(e,20)}static bytes21(e){return rs(e,21)}static bytes22(e){return rs(e,22)}static bytes23(e){return rs(e,23)}static bytes24(e){return rs(e,24)}static bytes25(e){return rs(e,25)}static bytes26(e){return rs(e,26)}static bytes27(e){return rs(e,27)}static bytes28(e){return rs(e,28)}static bytes29(e){return rs(e,29)}static bytes30(e){return rs(e,30)}static bytes31(e){return rs(e,31)}static bytes32(e){return rs(e,32)}static address(e){return new is(ts,"address",e)}static bool(e){return new is(ts,"bool",!!e)}static bytes(e){return new is(ts,"bytes",e)}static string(e){return new is(ts,"string",e)}static array(e,t){throw new Error("not implemented yet")}static tuple(e,t){throw new Error("not implemented yet")}static overrides(e){return new is(ts,"overrides",Object.assign({},e))}static isTyped(e){return e&&"object"==typeof e&&"_typedSymbol"in e&&e._typedSymbol===ss}static dereference(e,t){if(is.isTyped(e)){if(e.type!==t)throw new Error(`invalid type: expecetd ${t}, got ${e.type}`);return e.value}return e}}class os extends ur{constructor(e){super("address","address",e,!1)}defaultValue(){return"0x0000000000000000000000000000000000000000"}encode(e,t){let n=is.dereference(t,"string");try{n=es(n)}catch(e){return this._throwError(e.message,t)}return e.writeValue(n)}decode(e){return es(er(e.readValue(),20))}}class as extends ur{coder;constructor(e){super(e.name,e.type,"_",e.dynamic),this.coder=e}defaultValue(){return this.coder.defaultValue()}encode(e,t){return this.coder.encode(e,t)}decode(e){return this.coder.decode(e)}}function ls(e,t,n){let r=[];if(Array.isArray(n))r=n;else if(n&&"object"==typeof n){let e={};r=t.map((t=>{const r=t.localName;return Pn(r,"cannot encode object for signature with missing names","INVALID_ARGUMENT",{argument:"values",info:{coder:t},value:n}),Pn(!e[r],"cannot encode object for signature with duplicate names","INVALID_ARGUMENT",{argument:"values",info:{coder:t},value:n}),e[r]=!0,n[r]}))}else Rn(!1,"invalid tuple value","tuple",n);Rn(t.length===r.length,"types/value length mismatch","tuple",n);let s=new hr,i=new hr,o=[];t.forEach(((e,t)=>{let n=r[t];if(e.dynamic){let t=i.length;e.encode(i,n);let r=s.writeUpdatableValue();o.push((e=>{r(e+t)}))}else e.encode(s,n)})),o.forEach((e=>{e(s.length)}));let a=e.appendWriter(s);return a+=e.appendWriter(i),a}function cs(e,t){let n=[],r=[],s=e.subReader(0);return t.forEach((t=>{let i=null;if(t.dynamic){let n=e.readIndex(),r=s.subReader(n);try{i=t.decode(r)}catch(e){if(xn(e,"BUFFER_OVERRUN"))throw e;i=e,i.baseType=t.name,i.name=t.localName,i.type=t.type}}else try{i=t.decode(e)}catch(e){if(xn(e,"BUFFER_OVERRUN"))throw e;i=e,i.baseType=t.name,i.name=t.localName,i.type=t.type}if(null==i)throw new Error("investigate");n.push(i),r.push(t.localName||null)})),lr.fromItems(n,r)}class us extends ur{coder;length;constructor(e,t,n){super("array",e.type+"["+(t>=0?t:"")+"]",n,-1===t||e.dynamic),En(this,{coder:e,length:t})}defaultValue(){const e=this.coder.defaultValue(),t=[];for(let n=0;n<this.length;n++)t.push(e);return t}encode(e,t){const n=is.dereference(t,"array");Array.isArray(n)||this._throwError("expected array value",n);let r=this.length;-1===r&&(r=n.length,e.writeValue(n.length)),On(n.length,r,"coder array"+(this.localName?" "+this.localName:""));let s=[];for(let e=0;e<n.length;e++)s.push(this.coder);return ls(e,s,n)}decode(e){let t=this.length;-1===t&&(t=e.readIndex(),Pn(t*rr<=e.dataLength,"insufficient data length","BUFFER_OVERRUN",{buffer:e.bytes,offset:t*rr,length:e.dataLength}));let n=[];for(let e=0;e<t;e++)n.push(new as(this.coder));return cs(e,n)}}class hs extends ur{constructor(e){super("bool","bool",e,!1)}defaultValue(){return!1}encode(e,t){const n=is.dereference(t,"bool");return e.writeValue(n?1:0)}decode(e){return!!e.readValue()}}class ds extends ur{constructor(e,t){super(e,e,t,!0)}defaultValue(){return"0x"}encode(e,t){t=Fn(t);let n=e.writeValue(t.length);return n+=e.writeBytes(t),n}decode(e){return e.readBytes(e.readIndex(),!0)}}class ps extends ds{constructor(e){super("bytes",e)}decode(e){return Mn(super.decode(e))}}class fs extends ur{size;constructor(e,t){let n="bytes"+String(e);super(n,n,t,!1),En(this,{size:e},{size:"number"})}defaultValue(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+2*this.size)}encode(e,t){let n=Fn(is.dereference(t,this.type));return n.length!==this.size&&this._throwError("incorrect data length",t),e.writeBytes(n)}decode(e){return Mn(e.readBytes(this.size))}}const ms=new Uint8Array([]);class gs extends ur{constructor(e){super("null","",e,!1)}defaultValue(){return null}encode(e,t){return null!=t&&this._throwError("not null",t),e.writeBytes(ms)}decode(e){return e.readBytes(0),null}}const ys=BigInt(0),bs=BigInt(1),ws=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");class vs extends ur{size;signed;constructor(e,t,n){const r=(t?"int":"uint")+8*e;super(r,r,n,!1),En(this,{size:e,signed:t},{size:"number",signed:"boolean"})}defaultValue(){return 0}encode(e,t){let n=Kn(is.dereference(t,this.type)),r=Jn(ws,256);if(this.signed){let e=Jn(r,8*this.size-1);(n>e||n<-(e+bs))&&this._throwError("value out-of-bounds",t),n=Qn(n,256)}else(n<ys||n>Jn(r,8*this.size))&&this._throwError("value out-of-bounds",t);return e.writeValue(n)}decode(e){let t=Jn(e.readValue(),8*this.size);return this.signed&&(t=function(e,t){const n=Wn(e,"value"),r=BigInt(Xn(t,"width"));return Pn(n>>r===Gn,"overflow","NUMERIC_FAULT",{operation:"fromTwos",fault:"overflow",value:e}),n>>r-zn?-((~n&(zn<<r)-zn)+zn):n}(t,8*this.size)),t}}function As(e,t,n,r,s){if("BAD_PREFIX"===e||"UNEXPECTED_CONTINUE"===e){let e=0;for(let r=t+1;r<n.length&&n[r]>>6==2;r++)e++;return e}return"OVERRUN"===e?n.length-t-1:0}const _s=Object.freeze({error:function(e,t,n,r,s){Rn(!1,`invalid codepoint at offset ${t}; ${e}`,"bytes",n)},ignore:As,replace:function(e,t,n,r,s){return"OVERLONG"===e?(Rn("number"==typeof s,"invalid bad code point for replacement","badCodepoint",s),r.push(s),0):(r.push(65533),As(e,t,n))}});function Es(e,t){Rn("string"==typeof e,"invalid string value","str",e),null!=t&&(function(e){Pn(Bn.indexOf(e)>=0,"platform missing String.prototype.normalize","UNSUPPORTED_OPERATION",{operation:"String.prototype.normalize",info:{form:e}})}(t),e=e.normalize(t));let n=[];for(let t=0;t<e.length;t++){const r=e.charCodeAt(t);if(r<128)n.push(r);else if(r<2048)n.push(r>>6|192),n.push(63&r|128);else if(55296==(64512&r)){t++;const s=e.charCodeAt(t);Rn(t<e.length&&56320==(64512&s),"invalid surrogate pair","str",e);const i=65536+((1023&r)<<10)+(1023&s);n.push(i>>18|240),n.push(i>>12&63|128),n.push(i>>6&63|128),n.push(63&i|128)}else n.push(r>>12|224),n.push(r>>6&63|128),n.push(63&r|128)}return new Uint8Array(n)}function ks(e,t){return function(e,t){null==t&&(t=_s.error);const n=In(e,"bytes"),r=[];let s=0;for(;s<n.length;){const e=n[s++];if(e>>7==0){r.push(e);continue}let i=null,o=null;if(192==(224&e))i=1,o=127;else if(224==(240&e))i=2,o=2047;else{if(240!=(248&e)){s+=t(128==(192&e)?"UNEXPECTED_CONTINUE":"BAD_PREFIX",s-1,n,r);continue}i=3,o=65535}if(s-1+i>=n.length){s+=t("OVERRUN",s-1,n,r);continue}let a=e&(1<<8-i-1)-1;for(let e=0;e<i;e++){let e=n[s];if(128!=(192&e)){s+=t("MISSING_CONTINUE",s,n,r),a=null;break}a=a<<6|63&e,s++}null!==a&&(a>1114111?s+=t("OUT_OF_RANGE",s-1-i,n,r,a):a>=55296&&a<=57343?s+=t("UTF16_SURROGATE",s-1-i,n,r,a):a<=o?s+=t("OVERLONG",s-1-i,n,r,a):r.push(a))}return r}(e,t).map((e=>e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10&1023),56320+(1023&e))))).join("")}class xs extends ds{constructor(e){super("string",e)}defaultValue(){return""}encode(e,t){return super.encode(e,Es(is.dereference(t,"string")))}decode(e){return ks(super.decode(e))}}class Cs extends ur{coders;constructor(e,t){let n=!1;const r=[];e.forEach((e=>{e.dynamic&&(n=!0),r.push(e.type)})),super("tuple","tuple("+r.join(",")+")",t,n),En(this,{coders:Object.freeze(e.slice())})}defaultValue(){const e=[];this.coders.forEach((t=>{e.push(t.defaultValue())}));const t=this.coders.reduce(((e,t)=>{const n=t.localName;return n&&(e[n]||(e[n]=0),e[n]++),e}),{});return this.coders.forEach(((n,r)=>{let s=n.localName;s&&1===t[s]&&("length"===s&&(s="_length"),null==e[s]&&(e[s]=e[r]))})),Object.freeze(e)}encode(e,t){const n=is.dereference(t,"tuple");return ls(e,this.coders,n)}decode(e){return cs(e,this.coders)}}function Ns(e){return Qr(Es(e))}function Ps(e){const t=new Set;return e.forEach((e=>t.add(e))),Object.freeze(t)}const Rs=Ps("external public payable override".split(" ")),Os="constant external internal payable private public pure view override",Bs=Ps(Os.split(" ")),Ss="constructor error event fallback function receive struct",Ts=Ps(Ss.split(" ")),Is="calldata memory storage payable indexed",Fs=Ps(Is.split(" ")),Ls=Ps([Ss,Is,"tuple returns",Os].join(" ").split(" ")),Us={"(":"OPEN_PAREN",")":"CLOSE_PAREN","[":"OPEN_BRACKET","]":"CLOSE_BRACKET",",":"COMMA","@":"AT"},Ms=new RegExp("^(\\s*)"),Ds=new RegExp("^([0-9]+)"),$s=new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"),js=new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"),Vs=new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");class Hs{#s;#h;get offset(){return this.#s}get length(){return this.#h.length-this.#s}constructor(e){this.#s=0,this.#h=e.slice()}clone(){return new Hs(this.#h)}reset(){this.#s=0}#d(e=0,t=0){return new Hs(this.#h.slice(e,t).map((t=>Object.freeze(Object.assign({},t,{match:t.match-e,linkBack:t.linkBack-e,linkNext:t.linkNext-e})))))}popKeyword(e){const t=this.peek();if("KEYWORD"!==t.type||!e.has(t.text))throw new Error(`expected keyword ${t.text}`);return this.pop().text}popType(e){if(this.peek().type!==e){const t=this.peek();throw new Error(`expected ${e}; got ${t.type} ${JSON.stringify(t.text)}`)}return this.pop().text}popParen(){const e=this.peek();if("OPEN_PAREN"!==e.type)throw new Error("bad start");const t=this.#d(this.#s+1,e.match+1);return this.#s=e.match+1,t}popParams(){const e=this.peek();if("OPEN_PAREN"!==e.type)throw new Error("bad start");const t=[];for(;this.#s<e.match-1;){const e=this.peek().linkNext;t.push(this.#d(this.#s+1,e)),this.#s=e}return this.#s=e.match+1,t}peek(){if(this.#s>=this.#h.length)throw new Error("out-of-bounds");return this.#h[this.#s]}peekKeyword(e){const t=this.peekType("KEYWORD");return null!=t&&e.has(t)?t:null}peekType(e){if(0===this.length)return null;const t=this.peek();return t.type===e?t.text:null}pop(){const e=this.peek();return this.#s++,e}toString(){const e=[];for(let t=this.#s;t<this.#h.length;t++){const n=this.#h[t];e.push(`${n.type}:${n.text}`)}return`<TokenString ${e.join(" ")}>`}}function Gs(e){const t=[],n=t=>{const n=i<e.length?JSON.stringify(e[i]):"$EOI";throw new Error(`invalid token ${n} at ${i}: ${t}`)};let r=[],s=[],i=0;for(;i<e.length;){let o=e.substring(i),a=o.match(Ms);a&&(i+=a[1].length,o=e.substring(i));const l={depth:r.length,linkBack:-1,linkNext:-1,match:-1,type:"",text:"",offset:i,value:-1};t.push(l);let c=Us[o[0]]||"";if(c){if(l.type=c,l.text=o[0],i++,"OPEN_PAREN"===c)r.push(t.length-1),s.push(t.length-1);else if("CLOSE_PAREN"==c)0===r.length&&n("no matching open bracket"),l.match=r.pop(),t[l.match].match=t.length-1,l.depth--,l.linkBack=s.pop(),t[l.linkBack].linkNext=t.length-1;else if("COMMA"===c)l.linkBack=s.pop(),t[l.linkBack].linkNext=t.length-1,s.push(t.length-1);else if("OPEN_BRACKET"===c)l.type="BRACKET";else if("CLOSE_BRACKET"===c){let e=t.pop().text;if(t.length>0&&"NUMBER"===t[t.length-1].type){const n=t.pop().text;e=n+e,t[t.length-1].value=Xn(n)}if(0===t.length||"BRACKET"!==t[t.length-1].type)throw new Error("missing opening bracket");t[t.length-1].text+=e}}else if(a=o.match($s),a){if(l.text=a[1],i+=l.text.length,Ls.has(l.text)){l.type="KEYWORD";continue}if(l.text.match(Vs)){l.type="TYPE";continue}l.type="ID"}else{if(a=o.match(Ds),!a)throw new Error(`unexpected token ${JSON.stringify(o[0])} at position ${i}`);l.text=a[1],l.type="NUMBER",i+=l.text.length}}return new Hs(t.map((e=>Object.freeze(e))))}function zs(e,t){let n=[];for(const r in t.keys())e.has(r)&&n.push(r);if(n.length>1)throw new Error(`conflicting types: ${n.join(", ")}`)}function qs(e,t){if(t.peekKeyword(Ts)){const n=t.pop().text;if(n!==e)throw new Error(`expected ${e}, got ${n}`)}return t.popType("ID")}function Qs(e,t){const n=new Set;for(;;){const r=e.peekType("KEYWORD");if(null==r||t&&!t.has(r))break;if(e.pop(),n.has(r))throw new Error(`duplicate keywords: ${JSON.stringify(r)}`);n.add(r)}return Object.freeze(n)}function Js(e){let t=Qs(e,Bs);return zs(t,Ps("constant payable nonpayable".split(" "))),zs(t,Ps("pure view payable nonpayable".split(" "))),t.has("view")?"view":t.has("pure")?"pure":t.has("payable")?"payable":t.has("nonpayable")?"nonpayable":t.has("constant")?"view":"nonpayable"}function Ks(e,t){return e.popParams().map((e=>ci.from(e,t)))}function Ws(e){if(e.peekType("AT")){if(e.pop(),e.peekType("NUMBER"))return Kn(e.pop().text);throw new Error("invalid gas")}return null}function Ys(e){if(e.length)throw new Error(`unexpected tokens at offset ${e.offset}: ${e.toString()}`)}const Zs=new RegExp(/^(.*)\[([0-9]*)\]$/);function Xs(e){const t=e.match(Vs);if(Rn(t,"invalid type","type",e),"uint"===e)return"uint256";if("int"===e)return"int256";if(t[2]){const n=parseInt(t[2]);Rn(0!==n&&n<=32,"invalid bytes length","type",e)}else if(t[3]){const n=parseInt(t[3]);Rn(0!==n&&n<=256&&n%8==0,"invalid numeric width","type",e)}return e}const ei={},ti=Symbol.for("_ethers_internal"),ni="_ParamTypeInternal",ri="_ErrorInternal",si="_EventInternal",ii="_ConstructorInternal",oi="_FallbackInternal",ai="_FunctionInternal",li="_StructInternal";class ci{name;type;baseType;indexed;components;arrayLength;arrayChildren;constructor(e,t,n,r,s,i,o,a){if(Sn(e,ei,"ParamType"),Object.defineProperty(this,ti,{value:ni}),i&&(i=Object.freeze(i.slice())),"array"===r){if(null==o||null==a)throw new Error("")}else if(null!=o||null!=a)throw new Error("");if("tuple"===r){if(null==i)throw new Error("")}else if(null!=i)throw new Error("");En(this,{name:t,type:n,baseType:r,indexed:s,components:i,arrayLength:o,arrayChildren:a})}format(e){if(null==e&&(e="sighash"),"json"===e){const t=this.name||"";if(this.isArray()){const e=JSON.parse(this.arrayChildren.format("json"));return e.name=t,e.type+=`[${this.arrayLength<0?"":String(this.arrayLength)}]`,JSON.stringify(e)}const n={type:"tuple"===this.baseType?"tuple":this.type,name:t};return"boolean"==typeof this.indexed&&(n.indexed=this.indexed),this.isTuple()&&(n.components=this.components.map((t=>JSON.parse(t.format(e))))),JSON.stringify(n)}let t="";return this.isArray()?(t+=this.arrayChildren.format(e),t+=`[${this.arrayLength<0?"":String(this.arrayLength)}]`):this.isTuple()?t+="("+this.components.map((t=>t.format(e))).join("full"===e?", ":",")+")":t+=this.type,"sighash"!==e&&(!0===this.indexed&&(t+=" indexed"),"full"===e&&this.name&&(t+=" "+this.name)),t}isArray(){return"array"===this.baseType}isTuple(){return"tuple"===this.baseType}isIndexable(){return null!=this.indexed}walk(e,t){if(this.isArray()){if(!Array.isArray(e))throw new Error("invalid array value");if(-1!==this.arrayLength&&e.length!==this.arrayLength)throw new Error("array is wrong length");const n=this;return e.map((e=>n.arrayChildren.walk(e,t)))}if(this.isTuple()){if(!Array.isArray(e))throw new Error("invalid tuple value");if(e.length!==this.components.length)throw new Error("array is wrong length");const n=this;return e.map(((e,r)=>n.components[r].walk(e,t)))}return t(this.type,e)}#p(e,t,n,r){if(this.isArray()){if(!Array.isArray(t))throw new Error("invalid array value");if(-1!==this.arrayLength&&t.length!==this.arrayLength)throw new Error("array is wrong length");const s=this.arrayChildren,i=t.slice();return i.forEach(((t,r)=>{s.#p(e,t,n,(e=>{i[r]=e}))})),void r(i)}if(this.isTuple()){const s=this.components;let i;if(Array.isArray(t))i=t.slice();else{if(null==t||"object"!=typeof t)throw new Error("invalid tuple value");i=s.map((e=>{if(!e.name)throw new Error("cannot use object value with unnamed components");if(!(e.name in t))throw new Error(`missing value for component ${e.name}`);return t[e.name]}))}if(i.length!==this.components.length)throw new Error("array is wrong length");return i.forEach(((t,r)=>{s[r].#p(e,t,n,(e=>{i[r]=e}))})),void r(i)}const s=n(this.type,t);s.then?e.push(async function(){r(await s)}()):r(s)}async walkAsync(e,t){const n=[],r=[e];return this.#p(n,e,t,(e=>{r[0]=e})),n.length&&await Promise.all(n),r[0]}static from(e,t){if(ci.isParamType(e))return e;if("string"==typeof e)try{return ci.from(Gs(e),t)}catch(t){Rn(!1,"invalid param type","obj",e)}else if(e instanceof Hs){let n="",r="",s=null;Qs(e,Ps(["tuple"])).has("tuple")||e.peekType("OPEN_PAREN")?(r="tuple",s=e.popParams().map((e=>ci.from(e))),n=`tuple(${s.map((e=>e.format())).join(",")})`):(n=Xs(e.popType("TYPE")),r=n);let i=null,o=null;for(;e.length&&e.peekType("BRACKET");){const t=e.pop();i=new ci(ei,"",n,r,null,s,o,i),o=t.value,n+=t.text,r="array",s=null}let a=null;if(Qs(e,Fs).has("indexed")){if(!t)throw new Error("");a=!0}const l=e.peekType("ID")?e.pop().text:"";if(e.length)throw new Error("leftover tokens");return new ci(ei,l,n,r,a,s,o,i)}const n=e.name;Rn(!n||"string"==typeof n&&n.match(js),"invalid name","obj.name",n);let r=e.indexed;null!=r&&(Rn(t,"parameter cannot be indexed","obj.indexed",e.indexed),r=!!r);let s=e.type,i=s.match(Zs);if(i){const t=parseInt(i[2]||"-1"),o=ci.from({type:i[1],components:e.components});return new ci(ei,n||"",s,"array",r,null,t,o)}if("tuple"===s||s.startsWith("tuple(")||s.startsWith("(")){const t=null!=e.components?e.components.map((e=>ci.from(e))):null;return new ci(ei,n||"",s,"tuple",r,t,null,null)}return s=Xs(e.type),new ci(ei,n||"",s,s,r,null,null,null)}static isParamType(e){return e&&e[ti]===ni}}class ui{type;inputs;constructor(e,t,n){Sn(e,ei,"Fragment"),En(this,{type:t,inputs:n=Object.freeze(n.slice())})}static from(e){if("string"==typeof e){try{ui.from(JSON.parse(e))}catch(e){}return ui.from(Gs(e))}if(e instanceof Hs)switch(e.peekKeyword(Ts)){case"constructor":return mi.from(e);case"error":return pi.from(e);case"event":return fi.from(e);case"fallback":case"receive":return gi.from(e);case"function":return yi.from(e);case"struct":return bi.from(e)}else if("object"==typeof e){switch(e.type){case"constructor":return mi.from(e);case"error":return pi.from(e);case"event":return fi.from(e);case"fallback":case"receive":return gi.from(e);case"function":return yi.from(e);case"struct":return bi.from(e)}Pn(!1,`unsupported type: ${e.type}`,"UNSUPPORTED_OPERATION",{operation:"Fragment.from"})}Rn(!1,"unsupported frgament object","obj",e)}static isConstructor(e){return mi.isFragment(e)}static isError(e){return pi.isFragment(e)}static isEvent(e){return fi.isFragment(e)}static isFunction(e){return yi.isFragment(e)}static isStruct(e){return bi.isFragment(e)}}class hi extends ui{name;constructor(e,t,n,r){super(e,t,r),Rn("string"==typeof n&&n.match(js),"invalid identifier","name",n),r=Object.freeze(r.slice()),En(this,{name:n})}}function di(e,t){return"("+t.map((t=>t.format(e))).join("full"===e?", ":",")+")"}class pi extends hi{constructor(e,t,n){super(e,"error",t,n),Object.defineProperty(this,ti,{value:ri})}get selector(){return Ns(this.format("sighash")).substring(0,10)}format(e){if(null==e&&(e="sighash"),"json"===e)return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});const t=[];return"sighash"!==e&&t.push("error"),t.push(this.name+di(e,this.inputs)),t.join(" ")}static from(e){if(pi.isFragment(e))return e;if("string"==typeof e)return pi.from(Gs(e));if(e instanceof Hs){const t=qs("error",e),n=Ks(e);return Ys(e),new pi(ei,t,n)}return new pi(ei,e.name,e.inputs?e.inputs.map(ci.from):[])}static isFragment(e){return e&&e[ti]===ri}}class fi extends hi{anonymous;constructor(e,t,n,r){super(e,"event",t,n),Object.defineProperty(this,ti,{value:si}),En(this,{anonymous:r})}get topicHash(){return Ns(this.format("sighash"))}format(e){if(null==e&&(e="sighash"),"json"===e)return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});const t=[];return"sighash"!==e&&t.push("event"),t.push(this.name+di(e,this.inputs)),"sighash"!==e&&this.anonymous&&t.push("anonymous"),t.join(" ")}static getTopicHash(e,t){return t=(t||[]).map((e=>ci.from(e))),new fi(ei,e,t,!1).topicHash}static from(e){if(fi.isFragment(e))return e;if("string"==typeof e)try{return fi.from(Gs(e))}catch(t){Rn(!1,"invalid event fragment","obj",e)}else if(e instanceof Hs){const t=qs("event",e),n=Ks(e,!0),r=!!Qs(e,Ps(["anonymous"])).has("anonymous");return Ys(e),new fi(ei,t,n,r)}return new fi(ei,e.name,e.inputs?e.inputs.map((e=>ci.from(e,!0))):[],!!e.anonymous)}static isFragment(e){return e&&e[ti]===si}}class mi extends ui{payable;gas;constructor(e,t,n,r,s){super(e,t,n),Object.defineProperty(this,ti,{value:ii}),En(this,{payable:r,gas:s})}format(e){if(Pn(null!=e&&"sighash"!==e,"cannot format a constructor for sighash","UNSUPPORTED_OPERATION",{operation:"format(sighash)"}),"json"===e)return JSON.stringify({type:"constructor",stateMutability:this.payable?"payable":"undefined",payable:this.payable,gas:null!=this.gas?this.gas:void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});const t=[`constructor${di(e,this.inputs)}`];return this.payable&&t.push("payable"),null!=this.gas&&t.push(`@${this.gas.toString()}`),t.join(" ")}static from(e){if(mi.isFragment(e))return e;if("string"==typeof e)try{return mi.from(Gs(e))}catch(t){Rn(!1,"invalid constuctor fragment","obj",e)}else if(e instanceof Hs){Qs(e,Ps(["constructor"]));const t=Ks(e),n=!!Qs(e,Rs).has("payable"),r=Ws(e);return Ys(e),new mi(ei,"constructor",t,n,r)}return new mi(ei,"constructor",e.inputs?e.inputs.map(ci.from):[],!!e.payable,null!=e.gas?e.gas:null)}static isFragment(e){return e&&e[ti]===ii}}class gi extends ui{payable;constructor(e,t,n){super(e,"fallback",t),Object.defineProperty(this,ti,{value:oi}),En(this,{payable:n})}format(e){const t=0===this.inputs.length?"receive":"fallback";if("json"===e){const e=this.payable?"payable":"nonpayable";return JSON.stringify({type:t,stateMutability:e})}return`${t}()${this.payable?" payable":""}`}static from(e){if(gi.isFragment(e))return e;if("string"==typeof e)try{return gi.from(Gs(e))}catch(t){Rn(!1,"invalid fallback fragment","obj",e)}else if(e instanceof Hs){const t=e.toString();if(Rn(e.peekKeyword(Ps(["fallback","receive"])),"type must be fallback or receive","obj",t),"receive"===e.popKeyword(Ps(["fallback","receive"]))){const t=Ks(e);return Rn(0===t.length,"receive cannot have arguments","obj.inputs",t),Qs(e,Ps(["payable"])),Ys(e),new gi(ei,[],!0)}let n=Ks(e);n.length?Rn(1===n.length&&"bytes"===n[0].type,"invalid fallback inputs","obj.inputs",n.map((e=>e.format("minimal"))).join(", ")):n=[ci.from("bytes")];const r=Js(e);if(Rn("nonpayable"===r||"payable"===r,"fallback cannot be constants","obj.stateMutability",r),Qs(e,Ps(["returns"])).has("returns")){const t=Ks(e);Rn(1===t.length&&"bytes"===t[0].type,"invalid fallback outputs","obj.outputs",t.map((e=>e.format("minimal"))).join(", "))}return Ys(e),new gi(ei,n,"payable"===r)}if("receive"===e.type)return new gi(ei,[],!0);if("fallback"===e.type){const t=[ci.from("bytes")],n="payable"===e.stateMutability;return new gi(ei,t,n)}Rn(!1,"invalid fallback description","obj",e)}static isFragment(e){return e&&e[ti]===oi}}class yi extends hi{constant;outputs;stateMutability;payable;gas;constructor(e,t,n,r,s,i){super(e,"function",t,r),Object.defineProperty(this,ti,{value:ai}),En(this,{constant:"view"===n||"pure"===n,gas:i,outputs:s=Object.freeze(s.slice()),payable:"payable"===n,stateMutability:n})}get selector(){return Ns(this.format("sighash")).substring(0,10)}format(e){if(null==e&&(e="sighash"),"json"===e)return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:null!=this.gas?this.gas:void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e)))),outputs:this.outputs.map((t=>JSON.parse(t.format(e))))});const t=[];return"sighash"!==e&&t.push("function"),t.push(this.name+di(e,this.inputs)),"sighash"!==e&&("nonpayable"!==this.stateMutability&&t.push(this.stateMutability),this.outputs&&this.outputs.length&&(t.push("returns"),t.push(di(e,this.outputs))),null!=this.gas&&t.push(`@${this.gas.toString()}`)),t.join(" ")}static getSelector(e,t){return t=(t||[]).map((e=>ci.from(e))),new yi(ei,e,"view",t,[],null).selector}static from(e){if(yi.isFragment(e))return e;if("string"==typeof e)try{return yi.from(Gs(e))}catch(t){Rn(!1,"invalid function fragment","obj",e)}else if(e instanceof Hs){const t=qs("function",e),n=Ks(e),r=Js(e);let s=[];Qs(e,Ps(["returns"])).has("returns")&&(s=Ks(e));const i=Ws(e);return Ys(e),new yi(ei,t,r,n,s,i)}let t=e.stateMutability;return null==t&&(t="payable","boolean"==typeof e.constant?(t="view",e.constant||(t="payable","boolean"!=typeof e.payable||e.payable||(t="nonpayable"))):"boolean"!=typeof e.payable||e.payable||(t="nonpayable")),new yi(ei,e.name,t,e.inputs?e.inputs.map(ci.from):[],e.outputs?e.outputs.map(ci.from):[],null!=e.gas?e.gas:null)}static isFragment(e){return e&&e[ti]===ai}}class bi extends hi{constructor(e,t,n){super(e,"struct",t,n),Object.defineProperty(this,ti,{value:li})}format(){throw new Error("@TODO")}static from(e){if("string"==typeof e)try{return bi.from(Gs(e))}catch(t){Rn(!1,"invalid struct fragment","obj",e)}else if(e instanceof Hs){const t=qs("struct",e),n=Ks(e);return Ys(e),new bi(ei,t,n)}return new bi(ei,e.name,e.inputs?e.inputs.map(ci.from):[])}static isFragment(e){return e&&e[ti]===li}}const wi=new Map;wi.set(0,"GENERIC_PANIC"),wi.set(1,"ASSERT_FALSE"),wi.set(17,"OVERFLOW"),wi.set(18,"DIVIDE_BY_ZERO"),wi.set(33,"ENUM_RANGE_ERROR"),wi.set(34,"BAD_STORAGE_DATA"),wi.set(49,"STACK_UNDERFLOW"),wi.set(50,"ARRAY_RANGE_ERROR"),wi.set(65,"OUT_OF_MEMORY"),wi.set(81,"UNINITIALIZED_FUNCTION_CALL");const vi=new RegExp(/^bytes([0-9]*)$/),Ai=new RegExp(/^(u?int)([0-9]*)$/);let _i=null,Ei=1024;class ki{#f(e){if(e.isArray())return new us(this.#f(e.arrayChildren),e.arrayLength,e.name);if(e.isTuple())return new Cs(e.components.map((e=>this.#f(e))),e.name);switch(e.baseType){case"address":return new os(e.name);case"bool":return new hs(e.name);case"string":return new xs(e.name);case"bytes":return new ps(e.name);case"":return new gs(e.name)}let t=e.type.match(Ai);if(t){let n=parseInt(t[2]||"256");return Rn(0!==n&&n<=256&&n%8==0,"invalid "+t[1]+" bit length","param",e),new vs(n/8,"int"===t[1],e.name)}if(t=e.type.match(vi),t){let n=parseInt(t[1]);return Rn(0!==n&&n<=32,"invalid bytes length","param",e),new fs(n,e.name)}Rn(!1,"invalid type","type",e.type)}getDefaultValue(e){const t=e.map((e=>this.#f(ci.from(e))));return new Cs(t,"_").defaultValue()}encode(e,t){On(t.length,e.length,"types/values length mismatch");const n=e.map((e=>this.#f(ci.from(e)))),r=new Cs(n,"_"),s=new hr;return r.encode(s,t),s.data}decode(e,t,n){const r=e.map((e=>this.#f(ci.from(e))));return new Cs(r,"_").decode(new dr(t,n,Ei))}static _setDefaultMaxInflation(e){Rn("number"==typeof e&&Number.isInteger(e),"invalid defaultMaxInflation factor","value",e),Ei=e}static defaultAbiCoder(){return null==_i&&(_i=new ki),_i}static getBuiltinCallException(e,t,n){return function(e,t,n,r){let s="missing revert data",i=null,o=null;if(n){s="execution reverted";const e=In(n);if(n=Mn(n),0===e.length)s+=" (no data present; likely require(false) occurred",i="require(false)";else if(e.length%32!=4)s+=" (could not decode reason; invalid data length)";else if("0x08c379a0"===Mn(e.slice(0,4)))try{i=r.decode(["string"],e.slice(4))[0],o={signature:"Error(string)",name:"Error",args:[i]},s+=`: ${JSON.stringify(i)}`}catch(e){s+=" (could not decode reason; invalid string data)"}else if("0x4e487b71"===Mn(e.slice(0,4)))try{const t=Number(r.decode(["uint256"],e.slice(4))[0]);o={signature:"Panic(uint256)",name:"Panic",args:[t]},i=`Panic due to ${wi.get(t)||"UNKNOWN"}(${t})`,s+=`: ${i}`}catch(e){s+=" (could not decode panic code)"}else s+=" (unknown custom error)"}const a={to:t.to?es(t.to):null,data:t.data||"0x"};return t.from&&(a.from=es(t.from)),Nn(s,"CALL_EXCEPTION",{action:e,data:n,reason:i,transaction:a,invocation:null,revert:o})}(e,t,n,ki.defaultAbiCoder())}}function xi(e){return e&&"function"==typeof e.getAddress}async function Ci(e,t){const n=await t;return null!=n&&"0x0000000000000000000000000000000000000000"!==n||(Pn("string"!=typeof e,"unconfigured name","UNCONFIGURED_NAME",{value:e}),Rn(!1,"invalid AddressLike value; did not resolve to a value address","target",e)),es(n)}function Ni(e,t){return"string"==typeof e?e.match(/^0x[0-9a-f]{40}$/i)?es(e):(Pn(null!=t,"ENS resolution requires a provider","UNSUPPORTED_OPERATION",{operation:"resolveName"}),Ci(e,t.resolveName(e))):xi(e)?Ci(e,e.getAddress()):e&&"function"==typeof e.then?Ci(e,e):void Rn(!1,"unsupported addressable value","target",e)}const Pi=new Uint8Array(32);Pi.fill(0);const Ri=BigInt(-1),Oi=BigInt(0),Bi=BigInt(1),Si=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),Ti=er(Bi,32),Ii=er(Oi,32),Fi={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},Li=["name","version","chainId","verifyingContract","salt"];function Ui(e){return function(t){return Rn("string"==typeof t,`invalid domain value for ${JSON.stringify(e)}`,`domain.${e}`,t),t}}const Mi={name:Ui("name"),version:Ui("version"),chainId:function(e){const t=Kn(e,"domain.chainId");return Rn(t>=0,"invalid chain ID","domain.chainId",e),Number.isSafeInteger(t)?Number(t):nr(t)},verifyingContract:function(e){try{return es(e).toLowerCase()}catch(e){}Rn(!1,'invalid domain value "verifyingContract"',"domain.verifyingContract",e)},salt:function(e){const t=In(e,"domain.salt");return Rn(32===t.length,'invalid domain value "salt"',"domain.salt",e),Mn(t)}};function Di(e){{const t=e.match(/^(u?)int(\d+)$/);if(t){const n=""===t[1],r=parseInt(t[2]);Rn(r%8==0&&0!==r&&r<=256&&t[2]===String(r),"invalid numeric width","type",e);const s=Jn(Si,n?r-1:r),i=n?(s+Bi)*Ri:Oi;return function(t){const r=Kn(t,"value");return Rn(r>=i&&r<=s,`value out-of-bounds for ${e}`,"value",r),er(n?Qn(r,256):r,32)}}}{const t=e.match(/^bytes(\d+)$/);if(t){const n=parseInt(t[1]);return Rn(0!==n&&n<=32&&t[1]===String(n),"invalid bytes width","type",e),function(t){return Rn(In(t).length===n,`invalid length for ${e}`,"value",t),function(e){const t=In(e),n=t.length%32;return n?Dn([t,Pi.slice(n)]):Mn(t)}(t)}}}switch(e){case"address":return function(e){return Hn(es(e),32)};case"bool":return function(e){return e?Ti:Ii};case"bytes":return function(e){return Qr(e)};case"string":return function(e){return Ns(e)}}return null}function $i(e,t){return`${e}(${t.map((({name:e,type:t})=>t+" "+e)).join(",")})`}function ji(e){const t=e.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);return t?{base:t[1],index:t[2]+t[4],array:{base:t[1],prefix:t[1]+t[2],count:t[5]?parseInt(t[5]):-1}}:{base:e}}class Vi{primaryType;#m;get types(){return JSON.parse(this.#m)}#g;#y;constructor(e){this.#g=new Map,this.#y=new Map;const t=new Map,n=new Map,r=new Map,s={};Object.keys(e).forEach((i=>{s[i]=e[i].map((({name:t,type:n})=>{let{base:r,index:s}=ji(n);return"int"!==r||e.int||(r="int256"),"uint"!==r||e.uint||(r="uint256"),{name:t,type:r+(s||"")}})),t.set(i,new Set),n.set(i,[]),r.set(i,new Set)})),this.#m=JSON.stringify(s);for(const r in s){const i=new Set;for(const o of s[r]){Rn(!i.has(o.name),`duplicate variable name ${JSON.stringify(o.name)} in ${JSON.stringify(r)}`,"types",e),i.add(o.name);const s=ji(o.type).base;Rn(s!==r,`circular type reference to ${JSON.stringify(s)}`,"types",e),Di(s)||(Rn(n.has(s),`unknown type ${JSON.stringify(s)}`,"types",e),n.get(s).push(r),t.get(r).add(s))}}const i=Array.from(n.keys()).filter((e=>0===n.get(e).length));Rn(0!==i.length,"missing primary type","types",e),Rn(1===i.length,`ambiguous primary types or unused types: ${i.map((e=>JSON.stringify(e))).join(", ")}`,"types",e),En(this,{primaryType:i[0]}),function s(i,o){Rn(!o.has(i),`circular type reference to ${JSON.stringify(i)}`,"types",e),o.add(i);for(const e of t.get(i))if(n.has(e)){s(e,o);for(const t of o)r.get(t).add(e)}o.delete(i)}(this.primaryType,new Set);for(const[e,t]of r){const n=Array.from(t);n.sort(),this.#g.set(e,$i(e,s[e])+n.map((e=>$i(e,s[e]))).join(""))}}getEncoder(e){let t=this.#y.get(e);return t||(t=this.#b(e),this.#y.set(e,t)),t}#b(e){{const t=Di(e);if(t)return t}const t=ji(e).array;if(t){const e=t.prefix,n=this.getEncoder(e);return r=>{Rn(-1===t.count||t.count===r.length,`array length mismatch; expected length ${t.count}`,"value",r);let s=r.map(n);return this.#g.has(e)&&(s=s.map(Qr)),Qr(Dn(s))}}const n=this.types[e];if(n){const t=Ns(this.#g.get(e));return e=>{const r=n.map((({name:t,type:n})=>{const r=this.getEncoder(n)(e[t]);return this.#g.has(n)?Qr(r):r}));return r.unshift(t),Dn(r)}}Rn(!1,`unknown type: ${e}`,"type",e)}encodeType(e){const t=this.#g.get(e);return Rn(t,`unknown type: ${JSON.stringify(e)}`,"name",e),t}encodeData(e,t){return this.getEncoder(e)(t)}hashStruct(e,t){return Qr(this.encodeData(e,t))}encode(e){return this.encodeData(this.primaryType,e)}hash(e){return this.hashStruct(this.primaryType,e)}_visit(e,t,n){if(Di(e))return n(e,t);const r=ji(e).array;if(r)return Rn(-1===r.count||r.count===t.length,`array length mismatch; expected length ${r.count}`,"value",t),t.map((e=>this._visit(r.prefix,e,n)));const s=this.types[e];if(s)return s.reduce(((e,{name:r,type:s})=>(e[r]=this._visit(s,t[r],n),e)),{});Rn(!1,`unknown type: ${e}`,"type",e)}visit(e,t){return this._visit(this.primaryType,e,t)}static from(e){return new Vi(e)}static getPrimaryType(e){return Vi.from(e).primaryType}static hashStruct(e,t,n){return Vi.from(t).hashStruct(e,n)}static hashDomain(e){const t=[];for(const n in e){if(null==e[n])continue;const r=Fi[n];Rn(r,`invalid typed-data domain key: ${JSON.stringify(n)}`,"domain",e),t.push({name:n,type:r})}return t.sort(((e,t)=>Li.indexOf(e.name)-Li.indexOf(t.name))),Vi.hashStruct("EIP712Domain",{EIP712Domain:t},e)}static encode(e,t,n){return Dn(["0x1901",Vi.hashDomain(e),Vi.from(t).hash(n)])}static hash(e,t,n){return Qr(Vi.encode(e,t,n))}static async resolveNames(e,t,n,r){e=Object.assign({},e);for(const t in e)null==e[t]&&delete e[t];const s={};e.verifyingContract&&!Ln(e.verifyingContract,20)&&(s[e.verifyingContract]="0x");const i=Vi.from(t);i.visit(n,((e,t)=>("address"!==e||Ln(t,20)||(s[t]="0x"),t)));for(const e in s)s[e]=await r(e);return e.verifyingContract&&s[e.verifyingContract]&&(e.verifyingContract=s[e.verifyingContract]),{domain:e,value:n=i.visit(n,((e,t)=>"address"===e&&s[t]?s[t]:t))}}static getPayload(e,t,n){Vi.hashDomain(e);const r={},s=[];Li.forEach((t=>{const n=e[t];null!=n&&(r[t]=Mi[t](n),s.push({name:t,type:Fi[t]}))}));const i=Vi.from(t);t=i.types;const o=Object.assign({},t);return Rn(null==o.EIP712Domain,"types must not contain EIP712Domain type","types.EIP712Domain",t),o.EIP712Domain=s,i.encode(n),{types:o,domain:r,primaryType:i.primaryType,message:i.visit(n,((e,t)=>{if(e.match(/^bytes(\d*)/))return Mn(In(t));if(e.match(/^u?int/))return Kn(t).toString();switch(e){case"address":return t.toLowerCase();case"bool":return!!t;case"string":return Rn("string"==typeof t,"invalid string","value",t),t}Rn(!1,"unsupported type","type",e)}))}}}function Hi(e,t){return{address:es(e),storageKeys:t.map(((e,t)=>(Rn(Ln(e,32),"invalid slot",`storageKeys[${t}]`,e),e.toLowerCase())))}}function Gi(e){if(Array.isArray(e))return e.map(((t,n)=>Array.isArray(t)?(Rn(2===t.length,"invalid slot set",`value[${n}]`,t),Hi(t[0],t[1])):(Rn(null!=t&&"object"==typeof t,"invalid address-slot set","value",e),Hi(t.address,t.storageKeys))));Rn(null!=e&&"object"==typeof e,"invalid access list","value",e);const t=Object.keys(e).map((t=>{const n=e[t].reduce(((e,t)=>(e[t]=!0,e)),{});return Hi(t,Object.keys(n).sort())}));return t.sort(((e,t)=>e.address.localeCompare(t.address))),t}function zi(e){return async function(e,t){const n=e.url.split(":")[0].toLowerCase();let r;if(Pn("http"===n||"https"===n,`unsupported protocol ${n}`,"UNSUPPORTED_OPERATION",{info:{protocol:n},operation:"request"}),Pn("https"===n||!e.credentials||e.allowInsecureAuthentication,"insecure authorized connections unsupported","UNSUPPORTED_OPERATION",{operation:"request"}),t){const e=new AbortController;r=e.signal,t.addListener((()=>{e.abort()}))}const s={method:e.method,headers:new Headers(Array.from(e)),body:e.body||void 0,signal:r},i=await fetch(e.url,s),o={};i.headers.forEach(((e,t)=>{o[t.toLowerCase()]=e}));const a=await i.arrayBuffer(),l=null==a?null:new Uint8Array(a);return{statusCode:i.status,statusMessage:i.statusText,headers:o,body:l}}}zi();let qi=zi();const Qi=new RegExp("^data:([^;:]*)?(;base64)?,(.*)$","i"),Ji=new RegExp("^ipfs://(ipfs/)?(.*)$","i");let Ki=!1;async function Wi(e,t){try{const t=e.match(Qi);if(!t)throw new Error("invalid data");return new ro(200,"OK",{"content-type":t[1]||"text/plain"},t[2]?function(e){e=atob(e);const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return In(t)}(t[3]):Es(t[3].replace(/%([0-9a-f][0-9a-f])/gi,((e,t)=>String.fromCharCode(parseInt(t,16))))))}catch(t){return new ro(599,"BAD REQUEST (invalid data: URI)",{},null,new no(e))}}function Yi(e){return async function(t,n){try{const n=t.match(Ji);if(!n)throw new Error("invalid link");return new no(`${e}${n[2]}`)}catch(e){return new ro(599,"BAD REQUEST (invalid IPFS URI)",{},null,new no(t))}}}const Zi={data:Wi,ipfs:Yi("https://gateway.ipfs.io/ipfs/")},Xi=new WeakMap;class eo{#w;#v;constructor(e){this.#w=[],this.#v=!1,Xi.set(e,(()=>{if(!this.#v){this.#v=!0;for(const e of this.#w)setTimeout((()=>{e()}),0);this.#w=[]}}))}addListener(e){Pn(!this.#v,"singal already cancelled","UNSUPPORTED_OPERATION",{operation:"fetchCancelSignal.addCancelListener"}),this.#w.push(e)}get cancelled(){return this.#v}checkSignal(){Pn(!this.cancelled,"cancelled","CANCELLED",{})}}function to(e){if(null==e)throw new Error("missing signal; should not happen");return e.checkSignal(),e}class no{#A;#_;#E;#k;#x;#C;#N;#P;#R;#O;#B;#S;#T;#I;#F;get url(){return this.#C}set url(e){this.#C=String(e)}get body(){return null==this.#N?null:new Uint8Array(this.#N)}set body(e){if(null==e)this.#N=void 0,this.#P=void 0;else if("string"==typeof e)this.#N=Es(e),this.#P="text/plain";else if(e instanceof Uint8Array)this.#N=e,this.#P="application/octet-stream";else{if("object"!=typeof e)throw new Error("invalid body");this.#N=Es(JSON.stringify(e)),this.#P="application/json"}}hasBody(){return null!=this.#N}get method(){return this.#k?this.#k:this.hasBody()?"POST":"GET"}set method(e){null==e&&(e=""),this.#k=String(e).toUpperCase()}get headers(){const e=Object.assign({},this.#E);return this.#R&&(e.authorization=`Basic ${function(e){const t=In(e);let n="";for(let e=0;e<t.length;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(Es(this.#R))}`),this.allowGzip&&(e["accept-encoding"]="gzip"),null==e["content-type"]&&this.#P&&(e["content-type"]=this.#P),this.body&&(e["content-length"]=String(this.body.length)),e}getHeader(e){return this.headers[e.toLowerCase()]}setHeader(e,t){this.#E[String(e).toLowerCase()]=String(t)}clearHeaders(){this.#E={}}[Symbol.iterator](){const e=this.headers,t=Object.keys(e);let n=0;return{next:()=>{if(n<t.length){const r=t[n++];return{value:[r,e[r]],done:!1}}return{value:void 0,done:!0}}}}get credentials(){return this.#R||null}setCredentials(e,t){Rn(!e.match(/:/),"invalid basic authentication username","username","[REDACTED]"),this.#R=`${e}:${t}`}get allowGzip(){return this.#_}set allowGzip(e){this.#_=!!e}get allowInsecureAuthentication(){return!!this.#A}set allowInsecureAuthentication(e){this.#A=!!e}get timeout(){return this.#x}set timeout(e){Rn(e>=0,"timeout must be non-zero","timeout",e),this.#x=e}get preflightFunc(){return this.#O||null}set preflightFunc(e){this.#O=e}get processFunc(){return this.#B||null}set processFunc(e){this.#B=e}get retryFunc(){return this.#S||null}set retryFunc(e){this.#S=e}get getUrlFunc(){return this.#F||qi}set getUrlFunc(e){this.#F=e}constructor(e){this.#C=String(e),this.#A=!1,this.#_=!0,this.#E={},this.#k="",this.#x=3e5,this.#I={slotInterval:250,maxAttempts:12},this.#F=null}toString(){return`<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#N?Mn(this.#N):"null"}>`}setThrottleParams(e){null!=e.slotInterval&&(this.#I.slotInterval=e.slotInterval),null!=e.maxAttempts&&(this.#I.maxAttempts=e.maxAttempts)}async#L(e,t,n,r,s){if(e>=this.#I.maxAttempts)return s.makeServerError("exceeded maximum retry limit");Pn(so()<=t,"timeout","TIMEOUT",{operation:"request.send",reason:"timeout",request:r}),n>0&&await function(e){return new Promise((t=>setTimeout(t,e)))}(n);let i=this.clone();const o=(i.url.split(":")[0]||"").toLowerCase();if(o in Zi){const e=await Zi[o](i.url,to(r.#T));if(e instanceof ro){let t=e;if(this.processFunc){to(r.#T);try{t=await this.processFunc(i,t)}catch(e){null!=e.throttle&&"number"==typeof e.stall||t.makeServerError("error in post-processing function",e).assertOk()}}return t}i=e}this.preflightFunc&&(i=await this.preflightFunc(i));const a=await this.getUrlFunc(i,to(r.#T));let l=new ro(a.statusCode,a.statusMessage,a.headers,a.body,r);if(301===l.statusCode||302===l.statusCode){try{const n=l.headers.location||"";return i.redirect(n).#L(e+1,t,0,r,l)}catch(e){}return l}if(429===l.statusCode&&(null==this.retryFunc||await this.retryFunc(i,l,e))){const n=l.headers["retry-after"];let s=this.#I.slotInterval*Math.trunc(Math.random()*Math.pow(2,e));return"string"==typeof n&&n.match(/^[1-9][0-9]*$/)&&(s=parseInt(n)),i.clone().#L(e+1,t,s,r,l)}if(this.processFunc){to(r.#T);try{l=await this.processFunc(i,l)}catch(n){null!=n.throttle&&"number"==typeof n.stall||l.makeServerError("error in post-processing function",n).assertOk();let s=this.#I.slotInterval*Math.trunc(Math.random()*Math.pow(2,e));return n.stall>=0&&(s=n.stall),i.clone().#L(e+1,t,s,r,l)}}return l}send(){return Pn(null==this.#T,"request already sent","UNSUPPORTED_OPERATION",{operation:"fetchRequest.send"}),this.#T=new eo(this),this.#L(0,so()+this.timeout,0,this,new ro(0,"",{},null,this))}cancel(){Pn(null!=this.#T,"request has not been sent","UNSUPPORTED_OPERATION",{operation:"fetchRequest.cancel"});const e=Xi.get(this);if(!e)throw new Error("missing signal; should not happen");e()}redirect(e){const t=this.url.split(":")[0].toLowerCase(),n=e.split(":")[0].toLowerCase();Pn("GET"===this.method&&("https"!==t||"http"!==n)&&e.match(/^https?:/),"unsupported redirect","UNSUPPORTED_OPERATION",{operation:`redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(e)})`});const r=new no(e);return r.method="GET",r.allowGzip=this.allowGzip,r.timeout=this.timeout,r.#E=Object.assign({},this.#E),this.#N&&(r.#N=new Uint8Array(this.#N)),r.#P=this.#P,r}clone(){const e=new no(this.url);return e.#k=this.#k,this.#N&&(e.#N=this.#N),e.#P=this.#P,e.#E=Object.assign({},this.#E),e.#R=this.#R,this.allowGzip&&(e.allowGzip=!0),e.timeout=this.timeout,this.allowInsecureAuthentication&&(e.allowInsecureAuthentication=!0),e.#O=this.#O,e.#B=this.#B,e.#S=this.#S,e.#F=this.#F,e}static lockConfig(){Ki=!0}static getGateway(e){return Zi[e.toLowerCase()]||null}static registerGateway(e,t){if("http"===(e=e.toLowerCase())||"https"===e)throw new Error(`cannot intercept ${e}; use registerGetUrl`);if(Ki)throw new Error("gateways locked");Zi[e]=t}static registerGetUrl(e){if(Ki)throw new Error("gateways locked");qi=e}static createGetUrlFunc(e){return zi()}static createDataGateway(){return Wi}static createIpfsGatewayFunc(e){return Yi(e)}}class ro{#U;#M;#E;#N;#D;#$;toString(){return`<FetchResponse status=${this.statusCode} body=${this.#N?Mn(this.#N):"null"}>`}get statusCode(){return this.#U}get statusMessage(){return this.#M}get headers(){return Object.assign({},this.#E)}get body(){return null==this.#N?null:new Uint8Array(this.#N)}get bodyText(){try{return null==this.#N?"":ks(this.#N)}catch(e){Pn(!1,"response body is not valid UTF-8 data","UNSUPPORTED_OPERATION",{operation:"bodyText",info:{response:this}})}}get bodyJson(){try{return JSON.parse(this.bodyText)}catch(e){Pn(!1,"response body is not valid JSON","UNSUPPORTED_OPERATION",{operation:"bodyJson",info:{response:this}})}}[Symbol.iterator](){const e=this.headers,t=Object.keys(e);let n=0;return{next:()=>{if(n<t.length){const r=t[n++];return{value:[r,e[r]],done:!1}}return{value:void 0,done:!0}}}}constructor(e,t,n,r,s){this.#U=e,this.#M=t,this.#E=Object.keys(n).reduce(((e,t)=>(e[t.toLowerCase()]=String(n[t]),e)),{}),this.#N=null==r?null:new Uint8Array(r),this.#D=s||null,this.#$={message:""}}makeServerError(e,t){let n;n=e?`CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${e})`:`CLIENT ESCALATED SERVER ERROR (${e=`${this.statusCode} ${this.statusMessage}`})`;const r=new ro(599,n,this.headers,this.body,this.#D||void 0);return r.#$={message:e,error:t},r}throwThrottleError(e,t){null==t?t=-1:Rn(Number.isInteger(t)&&t>=0,"invalid stall timeout","stall",t);const n=new Error(e||"throttling requests");throw En(n,{stall:t,throttle:!0}),n}getHeader(e){return this.headers[e.toLowerCase()]}hasBody(){return null!=this.#N}get request(){return this.#D}ok(){return""===this.#$.message&&this.statusCode>=200&&this.statusCode<300}assertOk(){if(this.ok())return;let{message:e,error:t}=this.#$;""===e&&(e=`server response ${this.statusCode} ${this.statusMessage}`);let n=null;this.request&&(n=this.request.url);let r=null;try{this.#N&&(r=ks(this.#N))}catch(e){}Pn(!1,e,"SERVER_ERROR",{request:this.request||"unknown request",response:this,error:t,info:{requestUrl:n,responseBody:r,responseStatus:`${this.statusCode} ${this.statusMessage}`}})}}function so(){return(new Date).getTime()}const io="0x0000000000000000000000000000000000000000";class oo{fragment;name;signature;topic;args;constructor(e,t,n){const r=e.name,s=e.format();En(this,{fragment:e,name:r,signature:s,topic:t,args:n})}}class ao{fragment;name;args;signature;selector;value;constructor(e,t,n,r){const s=e.name,i=e.format();En(this,{fragment:e,name:s,args:n,signature:i,selector:t,value:r})}}class lo{fragment;name;args;signature;selector;constructor(e,t,n){const r=e.name,s=e.format();En(this,{fragment:e,name:r,args:n,signature:s,selector:t})}}class co{hash;_isIndexed;static isIndexed(e){return!(!e||!e._isIndexed)}constructor(e){En(this,{hash:e,_isIndexed:!0})}}const uo={0:"generic panic",1:"assert(false)",17:"arithmetic overflow",18:"division or modulo by zero",33:"enum overflow",34:"invalid encoded storage byte array accessed",49:"out-of-bounds array access; popping on an empty array",50:"out-of-bounds access of an array or bytesN",65:"out of memory",81:"uninitialized function"},ho={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:e=>`reverted with reason string ${JSON.stringify(e)}`},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"],reason:e=>{let t="unknown panic code";return e>=0&&e<=255&&uo[e.toString()]&&(t=uo[e.toString()]),`reverted with panic code 0x${e.toString(16)} (${t})`}}};class po{fragments;deploy;fallback;receive;#j;#V;#H;#G;constructor(e){let t=[];t="string"==typeof e?JSON.parse(e):e,this.#H=new Map,this.#j=new Map,this.#V=new Map;const n=[];for(const e of t)try{n.push(ui.from(e))}catch(t){console.log(`[Warning] Invalid Fragment ${JSON.stringify(e)}:`,t.message)}En(this,{fragments:Object.freeze(n)});let r=null,s=!1;this.#G=this.getAbiCoder(),this.fragments.forEach(((e,t)=>{let n;switch(e.type){case"constructor":return this.deploy?void console.log("duplicate definition - constructor"):void En(this,{deploy:e});case"fallback":return void(0===e.inputs.length?s=!0:(Rn(!r||e.payable!==r.payable,"conflicting fallback fragments",`fragments[${t}]`,e),r=e,s=r.payable));case"function":n=this.#H;break;case"event":n=this.#V;break;case"error":n=this.#j;break;default:return}const i=e.format();n.has(i)||n.set(i,e)})),this.deploy||En(this,{deploy:mi.from("constructor()")}),En(this,{fallback:r,receive:s})}format(e){const t=e?"minimal":"full",n=this.fragments.map((e=>e.format(t)));return n}formatJson(){const e=this.fragments.map((e=>e.format("json")));return JSON.stringify(e.map((e=>JSON.parse(e))))}getAbiCoder(){return ki.defaultAbiCoder()}#z(e,t,n){if(Ln(e)){const t=e.toLowerCase();for(const e of this.#H.values())if(t===e.selector)return e;return null}if(-1===e.indexOf("(")){const r=[];for(const[t,n]of this.#H)t.split("(")[0]===e&&r.push(n);if(t){const e=t.length>0?t[t.length-1]:null;let n=t.length,s=!0;is.isTyped(e)&&"overrides"===e.type&&(s=!1,n--);for(let e=r.length-1;e>=0;e--){const t=r[e].inputs.length;t===n||s&&t===n-1||r.splice(e,1)}for(let e=r.length-1;e>=0;e--){const n=r[e].inputs;for(let s=0;s<t.length;s++)if(is.isTyped(t[s])){if(s>=n.length){if("overrides"===t[s].type)continue;r.splice(e,1);break}if(t[s].type!==n[s].baseType){r.splice(e,1);break}}}}if(1===r.length&&t&&t.length!==r[0].inputs.length){const e=t[t.length-1];(null==e||Array.isArray(e)||"object"!=typeof e)&&r.splice(0,1)}if(0===r.length)return null;if(r.length>1&&n){const t=r.map((e=>JSON.stringify(e.format()))).join(", ");Rn(!1,`ambiguous function description (i.e. matches ${t})`,"key",e)}return r[0]}return this.#H.get(yi.from(e).format())||null}getFunctionName(e){const t=this.#z(e,null,!1);return Rn(t,"no matching function","key",e),t.name}hasFunction(e){return!!this.#z(e,null,!1)}getFunction(e,t){return this.#z(e,t||null,!0)}forEachFunction(e){const t=Array.from(this.#H.keys());t.sort(((e,t)=>e.localeCompare(t)));for(let n=0;n<t.length;n++){const r=t[n];e(this.#H.get(r),n)}}#q(e,t,n){if(Ln(e)){const t=e.toLowerCase();for(const e of this.#V.values())if(t===e.topicHash)return e;return null}if(-1===e.indexOf("(")){const r=[];for(const[t,n]of this.#V)t.split("(")[0]===e&&r.push(n);if(t){for(let e=r.length-1;e>=0;e--)r[e].inputs.length<t.length&&r.splice(e,1);for(let e=r.length-1;e>=0;e--){const n=r[e].inputs;for(let s=0;s<t.length;s++)if(is.isTyped(t[s])&&t[s].type!==n[s].baseType){r.splice(e,1);break}}}if(0===r.length)return null;if(r.length>1&&n){const t=r.map((e=>JSON.stringify(e.format()))).join(", ");Rn(!1,`ambiguous event description (i.e. matches ${t})`,"key",e)}return r[0]}return this.#V.get(fi.from(e).format())||null}getEventName(e){const t=this.#q(e,null,!1);return Rn(t,"no matching event","key",e),t.name}hasEvent(e){return!!this.#q(e,null,!1)}getEvent(e,t){return this.#q(e,t||null,!0)}forEachEvent(e){const t=Array.from(this.#V.keys());t.sort(((e,t)=>e.localeCompare(t)));for(let n=0;n<t.length;n++){const r=t[n];e(this.#V.get(r),n)}}getError(e,t){if(Ln(e)){const t=e.toLowerCase();if(ho[t])return pi.from(ho[t].signature);for(const e of this.#j.values())if(t===e.selector)return e;return null}if(-1===e.indexOf("(")){const t=[];for(const[n,r]of this.#j)n.split("(")[0]===e&&t.push(r);if(0===t.length)return"Error"===e?pi.from("error Error(string)"):"Panic"===e?pi.from("error Panic(uint256)"):null;if(t.length>1){const n=t.map((e=>JSON.stringify(e.format()))).join(", ");Rn(!1,`ambiguous error description (i.e. ${n})`,"name",e)}return t[0]}if("Error(string)"===(e=pi.from(e).format()))return pi.from("error Error(string)");if("Panic(uint256)"===e)return pi.from("error Panic(uint256)");return this.#j.get(e)||null}forEachError(e){const t=Array.from(this.#j.keys());t.sort(((e,t)=>e.localeCompare(t)));for(let n=0;n<t.length;n++){const r=t[n];e(this.#j.get(r),n)}}_decodeParams(e,t){return this.#G.decode(e,t)}_encodeParams(e,t){return this.#G.encode(e,t)}encodeDeploy(e){return this._encodeParams(this.deploy.inputs,e||[])}decodeErrorResult(e,t){if("string"==typeof e){const t=this.getError(e);Rn(t,"unknown error","fragment",e),e=t}return Rn(jn(t,0,4)===e.selector,`data signature does not match error ${e.name}.`,"data",t),this._decodeParams(e.inputs,jn(t,4))}encodeErrorResult(e,t){if("string"==typeof e){const t=this.getError(e);Rn(t,"unknown error","fragment",e),e=t}return Dn([e.selector,this._encodeParams(e.inputs,t||[])])}decodeFunctionData(e,t){if("string"==typeof e){const t=this.getFunction(e);Rn(t,"unknown function","fragment",e),e=t}return Rn(jn(t,0,4)===e.selector,`data signature does not match function ${e.name}.`,"data",t),this._decodeParams(e.inputs,jn(t,4))}encodeFunctionData(e,t){if("string"==typeof e){const t=this.getFunction(e);Rn(t,"unknown function","fragment",e),e=t}return Dn([e.selector,this._encodeParams(e.inputs,t||[])])}decodeFunctionResult(e,t){if("string"==typeof e){const t=this.getFunction(e);Rn(t,"unknown function","fragment",e),e=t}let n="invalid length for result data";const r=Fn(t);if(r.length%32==0)try{return this.#G.decode(e.outputs,r)}catch(e){n="could not decode result data"}Pn(!1,n,"BAD_DATA",{value:Mn(r),info:{method:e.name,signature:e.format()}})}makeError(e,t){const n=In(e,"data"),r=ki.getBuiltinCallException("call",t,n);if(r.message.startsWith("execution reverted (unknown custom error)")){const e=Mn(n.slice(0,4)),t=this.getError(e);if(t)try{const e=this.#G.decode(t.inputs,n.slice(4));r.revert={name:t.name,signature:t.format(),args:e},r.reason=r.revert.signature,r.message=`execution reverted: ${r.reason}`}catch(e){r.message="execution reverted (coult not decode custom error)"}}const s=this.parseTransaction(t);return s&&(r.invocation={method:s.name,signature:s.signature,args:s.args}),r}encodeFunctionResult(e,t){if("string"==typeof e){const t=this.getFunction(e);Rn(t,"unknown function","fragment",e),e=t}return Mn(this.#G.encode(e.outputs,t||[]))}encodeFilterTopics(e,t){if("string"==typeof e){const t=this.getEvent(e);Rn(t,"unknown event","eventFragment",e),e=t}Pn(t.length<=e.inputs.length,`too many arguments for ${e.format()}`,"UNEXPECTED_ARGUMENT",{count:t.length,expectedCount:e.inputs.length});const n=[];e.anonymous||n.push(e.topicHash);const r=(e,t)=>"string"===e.type?Ns(t):"bytes"===e.type?Qr(Mn(t)):("bool"===e.type&&"boolean"==typeof t?t=t?"0x01":"0x00":e.type.match(/^u?int/)?t=er(t):e.type.match(/^bytes/)?t=Vn(t,32,!1):"address"===e.type&&this.#G.encode(["address"],[t]),Hn(Mn(t),32));for(t.forEach(((t,s)=>{const i=e.inputs[s];i.indexed?null==t?n.push(null):"array"===i.baseType||"tuple"===i.baseType?Rn(!1,"filtering with tuples or arrays not supported","contract."+i.name,t):Array.isArray(t)?n.push(t.map((e=>r(i,e)))):n.push(r(i,t)):Rn(null==t,"cannot filter non-indexed parameters; must be null","contract."+i.name,t)}));n.length&&null===n[n.length-1];)n.pop();return n}encodeEventLog(e,t){if("string"==typeof e){const t=this.getEvent(e);Rn(t,"unknown event","eventFragment",e),e=t}const n=[],r=[],s=[];return e.anonymous||n.push(e.topicHash),Rn(t.length===e.inputs.length,"event arguments/values mismatch","values",t),e.inputs.forEach(((e,i)=>{const o=t[i];if(e.indexed)if("string"===e.type)n.push(Ns(o));else if("bytes"===e.type)n.push(Qr(o));else{if("tuple"===e.baseType||"array"===e.baseType)throw new Error("not implemented");n.push(this.#G.encode([e.type],[o]))}else r.push(e),s.push(o)})),{data:this.#G.encode(r,s),topics:n}}decodeEventLog(e,t,n){if("string"==typeof e){const t=this.getEvent(e);Rn(t,"unknown event","eventFragment",e),e=t}if(null!=n&&!e.anonymous){const t=e.topicHash;Rn(Ln(n[0],32)&&n[0].toLowerCase()===t,"fragment/topic mismatch","topics[0]",n[0]),n=n.slice(1)}const r=[],s=[],i=[];e.inputs.forEach(((e,t)=>{e.indexed?"string"===e.type||"bytes"===e.type||"tuple"===e.baseType||"array"===e.baseType?(r.push(ci.from({type:"bytes32",name:e.name})),i.push(!0)):(r.push(e),i.push(!1)):(s.push(e),i.push(!1))}));const o=null!=n?this.#G.decode(r,Dn(n)):null,a=this.#G.decode(s,t,!0),l=[],c=[];let u=0,h=0;return e.inputs.forEach(((e,t)=>{let n=null;if(e.indexed)if(null==o)n=new co(null);else if(i[t])n=new co(o[h++]);else try{n=o[h++]}catch(e){n=e}else try{n=a[u++]}catch(e){n=e}l.push(n),c.push(e.name||null)})),lr.fromItems(l,c)}parseTransaction(e){const t=In(e.data,"tx.data"),n=Kn(null!=e.value?e.value:0,"tx.value"),r=this.getFunction(Mn(t.slice(0,4)));if(!r)return null;const s=this.#G.decode(r.inputs,t.slice(4));return new ao(r,r.selector,s,n)}parseCallResult(e){throw new Error("@TODO")}parseLog(e){const t=this.getEvent(e.topics[0]);return!t||t.anonymous?null:new oo(t,t.topicHash,this.decodeEventLog(t,e.data,e.topics))}parseError(e){const t=Mn(e),n=this.getError(jn(t,0,4));if(!n)return null;const r=this.#G.decode(n.inputs,jn(t,4));return new lo(n,n.selector,r)}static from(e){return e instanceof po?e:"string"==typeof e?new po(JSON.parse(e)):"function"==typeof e.format?new po(e.format("json")):new po(e)}}const fo=BigInt(0);function mo(e){return null==e?null:e}function go(e){return null==e?null:e.toString()}class yo{gasPrice;maxFeePerGas;maxPriorityFeePerGas;constructor(e,t,n){En(this,{gasPrice:mo(e),maxFeePerGas:mo(t),maxPriorityFeePerGas:mo(n)})}toJSON(){const{gasPrice:e,maxFeePerGas:t,maxPriorityFeePerGas:n}=this;return{_type:"FeeData",gasPrice:go(e),maxFeePerGas:go(t),maxPriorityFeePerGas:go(n)}}}function bo(e){const t={};e.to&&(t.to=e.to),e.from&&(t.from=e.from),e.data&&(t.data=Mn(e.data));const n="chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);for(const r of n)r in e&&null!=e[r]&&(t[r]=Kn(e[r],`request.${r}`));const r="type,nonce".split(/,/);for(const n of r)n in e&&null!=e[n]&&(t[n]=Xn(e[n],`request.${n}`));return e.accessList&&(t.accessList=Gi(e.accessList)),"blockTag"in e&&(t.blockTag=e.blockTag),"enableCcipRead"in e&&(t.enableCcipRead=!!e.enableCcipRead),"customData"in e&&(t.customData=e.customData),t}class wo{provider;number;hash;timestamp;parentHash;parentBeaconBlockRoot;nonce;difficulty;gasLimit;gasUsed;stateRoot;receiptsRoot;blobGasUsed;excessBlobGas;miner;extraData;baseFeePerGas;#Q;constructor(e,t){this.#Q=e.transactions.map((e=>"string"!=typeof e?new _o(e,t):e)),En(this,{provider:t,hash:mo(e.hash),number:e.number,timestamp:e.timestamp,parentHash:e.parentHash,parentBeaconBlockRoot:e.parentBeaconBlockRoot,nonce:e.nonce,difficulty:e.difficulty,gasLimit:e.gasLimit,gasUsed:e.gasUsed,blobGasUsed:e.blobGasUsed,excessBlobGas:e.excessBlobGas,miner:e.miner,extraData:e.extraData,baseFeePerGas:mo(e.baseFeePerGas),stateRoot:e.stateRoot,receiptsRoot:e.receiptsRoot})}get transactions(){return this.#Q.map((e=>"string"==typeof e?e:e.hash))}get prefetchedTransactions(){const e=this.#Q.slice();return 0===e.length?[]:(Pn("object"==typeof e[0],"transactions were not prefetched with block request","UNSUPPORTED_OPERATION",{operation:"transactionResponses()"}),e)}toJSON(){const{baseFeePerGas:e,difficulty:t,extraData:n,gasLimit:r,gasUsed:s,hash:i,miner:o,nonce:a,number:l,parentHash:c,parentBeaconBlockRoot:u,stateRoot:h,receiptsRoot:d,timestamp:p,transactions:f}=this;return{_type:"Block",baseFeePerGas:go(e),difficulty:go(t),extraData:n,gasLimit:go(r),gasUsed:go(s),blobGasUsed:go(this.blobGasUsed),excessBlobGas:go(this.excessBlobGas),hash:i,miner:o,nonce:a,number:l,parentHash:c,timestamp:p,parentBeaconBlockRoot:u,stateRoot:h,receiptsRoot:d,transactions:f}}[Symbol.iterator](){let e=0;const t=this.transactions;return{next:()=>e<this.length?{value:t[e++],done:!1}:{value:void 0,done:!0}}}get length(){return this.#Q.length}get date(){return null==this.timestamp?null:new Date(1e3*this.timestamp)}async getTransaction(e){let t;if("number"==typeof e)t=this.#Q[e];else{const n=e.toLowerCase();for(const e of this.#Q){if("string"==typeof e){if(e!==n)continue;t=e;break}if(e.hash!==n){t=e;break}}}if(null==t)throw new Error("no such tx");return"string"==typeof t?await this.provider.getTransaction(t):t}getPrefetchedTransaction(e){const t=this.prefetchedTransactions;if("number"==typeof e)return t[e];e=e.toLowerCase();for(const n of t)if(n.hash===e)return n;Rn(!1,"no matching transaction","indexOrHash",e)}isMined(){return!!this.hash}isLondon(){return!!this.baseFeePerGas}orphanedEvent(){if(!this.isMined())throw new Error("");return{orphan:"drop-block",hash:this.hash,number:this.number}}}class vo{provider;transactionHash;blockHash;blockNumber;removed;address;data;topics;index;transactionIndex;constructor(e,t){this.provider=t;const n=Object.freeze(e.topics.slice());En(this,{transactionHash:e.transactionHash,blockHash:e.blockHash,blockNumber:e.blockNumber,removed:e.removed,address:e.address,data:e.data,topics:n,index:e.index,transactionIndex:e.transactionIndex})}toJSON(){const{address:e,blockHash:t,blockNumber:n,data:r,index:s,removed:i,topics:o,transactionHash:a,transactionIndex:l}=this;return{_type:"log",address:e,blockHash:t,blockNumber:n,data:r,index:s,removed:i,topics:o,transactionHash:a,transactionIndex:l}}async getBlock(){const e=await this.provider.getBlock(this.blockHash);return Pn(!!e,"failed to find transaction","UNKNOWN_ERROR",{}),e}async getTransaction(){const e=await this.provider.getTransaction(this.transactionHash);return Pn(!!e,"failed to find transaction","UNKNOWN_ERROR",{}),e}async getTransactionReceipt(){const e=await this.provider.getTransactionReceipt(this.transactionHash);return Pn(!!e,"failed to find transaction receipt","UNKNOWN_ERROR",{}),e}removedEvent(){return function(e){return{orphan:"drop-log",log:{transactionHash:e.transactionHash,blockHash:e.blockHash,blockNumber:e.blockNumber,address:e.address,data:e.data,topics:Object.freeze(e.topics.slice()),index:e.index}}}(this)}}class Ao{provider;to;from;contractAddress;hash;index;blockHash;blockNumber;logsBloom;gasUsed;blobGasUsed;cumulativeGasUsed;gasPrice;blobGasPrice;type;status;root;#J;constructor(e,t){this.#J=Object.freeze(e.logs.map((e=>new vo(e,t))));let n=fo;null!=e.effectiveGasPrice?n=e.effectiveGasPrice:null!=e.gasPrice&&(n=e.gasPrice),En(this,{provider:t,to:e.to,from:e.from,contractAddress:e.contractAddress,hash:e.hash,index:e.index,blockHash:e.blockHash,blockNumber:e.blockNumber,logsBloom:e.logsBloom,gasUsed:e.gasUsed,cumulativeGasUsed:e.cumulativeGasUsed,blobGasUsed:e.blobGasUsed,gasPrice:n,blobGasPrice:e.blobGasPrice,type:e.type,status:e.status,root:e.root})}get logs(){return this.#J}toJSON(){const{to:e,from:t,contractAddress:n,hash:r,index:s,blockHash:i,blockNumber:o,logsBloom:a,logs:l,status:c,root:u}=this;return{_type:"TransactionReceipt",blockHash:i,blockNumber:o,contractAddress:n,cumulativeGasUsed:go(this.cumulativeGasUsed),from:t,gasPrice:go(this.gasPrice),blobGasUsed:go(this.blobGasUsed),blobGasPrice:go(this.blobGasPrice),gasUsed:go(this.gasUsed),hash:r,index:s,logs:l,logsBloom:a,root:u,status:c,to:e}}get length(){return this.logs.length}[Symbol.iterator](){let e=0;return{next:()=>e<this.length?{value:this.logs[e++],done:!1}:{value:void 0,done:!0}}}get fee(){return this.gasUsed*this.gasPrice}async getBlock(){const e=await this.provider.getBlock(this.blockHash);if(null==e)throw new Error("TODO");return e}async getTransaction(){const e=await this.provider.getTransaction(this.hash);if(null==e)throw new Error("TODO");return e}async getResult(){return await this.provider.getTransactionResult(this.hash)}async confirmations(){return await this.provider.getBlockNumber()-this.blockNumber+1}removedEvent(){return ko(this)}reorderedEvent(e){return Pn(!e||e.isMined(),"unmined 'other' transction cannot be orphaned","UNSUPPORTED_OPERATION",{operation:"reorderedEvent(other)"}),Eo(this,e)}}class _o{provider;blockNumber;blockHash;index;hash;type;to;from;nonce;gasLimit;gasPrice;maxPriorityFeePerGas;maxFeePerGas;maxFeePerBlobGas;data;value;chainId;signature;accessList;blobVersionedHashes;#K;constructor(e,t){this.provider=t,this.blockNumber=null!=e.blockNumber?e.blockNumber:null,this.blockHash=null!=e.blockHash?e.blockHash:null,this.hash=e.hash,this.index=e.index,this.type=e.type,this.from=e.from,this.to=e.to||null,this.gasLimit=e.gasLimit,this.nonce=e.nonce,this.data=e.data,this.value=e.value,this.gasPrice=e.gasPrice,this.maxPriorityFeePerGas=null!=e.maxPriorityFeePerGas?e.maxPriorityFeePerGas:null,this.maxFeePerGas=null!=e.maxFeePerGas?e.maxFeePerGas:null,this.maxFeePerBlobGas=null!=e.maxFeePerBlobGas?e.maxFeePerBlobGas:null,this.chainId=e.chainId,this.signature=e.signature,this.accessList=null!=e.accessList?e.accessList:null,this.blobVersionedHashes=null!=e.blobVersionedHashes?e.blobVersionedHashes:null,this.#K=-1}toJSON(){const{blockNumber:e,blockHash:t,index:n,hash:r,type:s,to:i,from:o,nonce:a,data:l,signature:c,accessList:u,blobVersionedHashes:h}=this;return{_type:"TransactionResponse",accessList:u,blockNumber:e,blockHash:t,blobVersionedHashes:h,chainId:go(this.chainId),data:l,from:o,gasLimit:go(this.gasLimit),gasPrice:go(this.gasPrice),hash:r,maxFeePerGas:go(this.maxFeePerGas),maxPriorityFeePerGas:go(this.maxPriorityFeePerGas),maxFeePerBlobGas:go(this.maxFeePerBlobGas),nonce:a,signature:c,to:i,index:n,type:s,value:go(this.value)}}async getBlock(){let e=this.blockNumber;if(null==e){const t=await this.getTransaction();t&&(e=t.blockNumber)}if(null==e)return null;const t=this.provider.getBlock(e);if(null==t)throw new Error("TODO");return t}async getTransaction(){return this.provider.getTransaction(this.hash)}async confirmations(){if(null==this.blockNumber){const{tx:e,blockNumber:t}=await _n({tx:this.getTransaction(),blockNumber:this.provider.getBlockNumber()});return null==e||null==e.blockNumber?0:t-e.blockNumber+1}return await this.provider.getBlockNumber()-this.blockNumber+1}async wait(e,t){const n=null==e?1:e,r=null==t?0:t;let s=this.#K,i=-1,o=-1===s;const a=async()=>{if(o)return null;const{blockNumber:e,nonce:t}=await _n({blockNumber:this.provider.getBlockNumber(),nonce:this.provider.getTransactionCount(this.from)});if(t<this.nonce)return void(s=e);if(o)return null;const r=await this.getTransaction();if(!r||null==r.blockNumber)for(-1===i&&(i=s-3,i<this.#K&&(i=this.#K));i<=e;){if(o)return null;const t=await this.provider.getBlock(i,!0);if(null==t)return;for(const e of t)if(e===this.hash)return;for(let r=0;r<t.length;r++){const i=await t.getTransaction(r);if(i.from===this.from&&i.nonce===this.nonce){if(o)return null;const t=await this.provider.getTransactionReceipt(i.hash);if(null==t)return;if(e-t.blockNumber+1<n)return;let r="replaced";i.data===this.data&&i.to===this.to&&i.value===this.value?r="repriced":"0x"===i.data&&i.from===i.to&&i.value===fo&&(r="cancelled"),Pn(!1,"transaction was replaced","TRANSACTION_REPLACED",{cancelled:"replaced"===r||"cancelled"===r,reason:r,replacement:i.replaceableTransaction(s),hash:i.hash,receipt:t})}}i++}},l=e=>{if(null==e||0!==e.status)return e;Pn(!1,"transaction execution reverted","CALL_EXCEPTION",{action:"sendTransaction",data:null,reason:null,invocation:null,revert:null,transaction:{to:e.to,from:e.from,data:""},receipt:e})},c=await this.provider.getTransactionReceipt(this.hash);if(0===n)return l(c);if(c){if(await c.confirmations()>=n)return l(c)}else if(await a(),0===n)return null;const u=new Promise(((e,t)=>{const i=[],c=()=>{i.forEach((e=>e()))};if(i.push((()=>{o=!0})),r>0){const e=setTimeout((()=>{c(),t(Nn("wait for transaction timeout","TIMEOUT"))}),r);i.push((()=>{clearTimeout(e)}))}const u=async r=>{if(await r.confirmations()>=n){c();try{e(l(r))}catch(e){t(e)}}};if(i.push((()=>{this.provider.off(this.hash,u)})),this.provider.on(this.hash,u),s>=0){const e=async()=>{try{await a()}catch(e){if(xn(e,"TRANSACTION_REPLACED"))return c(),void t(e)}o||this.provider.once("block",e)};i.push((()=>{this.provider.off("block",e)})),this.provider.once("block",e)}}));return await u}isMined(){return null!=this.blockHash}isLegacy(){return 0===this.type}isBerlin(){return 1===this.type}isLondon(){return 2===this.type}isCancun(){return 3===this.type}removedEvent(){return Pn(this.isMined(),"unmined transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),ko(this)}reorderedEvent(e){return Pn(this.isMined(),"unmined transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),Pn(!e||e.isMined(),"unmined 'other' transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),Eo(this,e)}replaceableTransaction(e){Rn(Number.isInteger(e)&&e>=0,"invalid startBlock","startBlock",e);const t=new _o(this,this.provider);return t.#K=e,t}}function Eo(e,t){return{orphan:"reorder-transaction",tx:e,other:t}}function ko(e){return{orphan:"drop-transaction",tx:e}}class xo{filter;emitter;#W;constructor(e,t,n){this.#W=t,En(this,{emitter:e,filter:n})}async removeListener(){null!=this.#W&&await this.emitter.off(this.filter,this.#W)}}class Co extends vo{interface;fragment;args;constructor(e,t,n){super(e,e.provider),En(this,{args:t.decodeEventLog(n,e.data,e.topics),fragment:n,interface:t})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}class No extends vo{error;constructor(e,t){super(e,e.provider),En(this,{error:t})}}class Po extends Ao{#Y;constructor(e,t,n){super(n,t),this.#Y=e}get logs(){return super.logs.map((e=>{const t=e.topics.length?this.#Y.getEvent(e.topics[0]):null;if(t)try{return new Co(e,this.#Y,t)}catch(t){return new No(e,t)}return e}))}}class Ro extends _o{#Y;constructor(e,t,n){super(n,t),this.#Y=e}async wait(e,t){const n=await super.wait(e,t);return null==n?null:new Po(this.#Y,this.provider,n)}}class Oo extends xo{log;constructor(e,t,n,r){super(e,t,n),En(this,{log:r})}async getBlock(){return await this.log.getBlock()}async getTransaction(){return await this.log.getTransaction()}async getTransactionReceipt(){return await this.log.getTransactionReceipt()}}class Bo extends Oo{constructor(e,t,n,r,s){super(e,t,n,new Co(s,e.interface,r)),En(this,{args:e.interface.decodeEventLog(r,this.log.data,this.log.topics),fragment:r})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}const So=BigInt(0);function To(e){return e&&"function"==typeof e.call}function Io(e){return e&&"function"==typeof e.estimateGas}function Fo(e){return e&&"function"==typeof e.resolveName}function Lo(e){return e&&"function"==typeof e.sendTransaction}function Uo(e){if(null!=e){if(Fo(e))return e;if(e.provider)return e.provider}}class Mo{#Z;fragment;constructor(e,t,n){if(En(this,{fragment:t}),t.inputs.length<n.length)throw new Error("too many arguments");const r=Do(e.runner,"resolveName"),s=Fo(r)?r:null;this.#Z=async function(){const r=await Promise.all(t.inputs.map(((e,t)=>null==n[t]?null:e.walkAsync(n[t],((e,t)=>"address"===e?Array.isArray(t)?Promise.all(t.map((e=>Ni(e,s)))):Ni(t,s):t)))));return e.interface.encodeFilterTopics(t,r)}()}getTopicFilter(){return this.#Z}}function Do(e,t){return null==e?null:"function"==typeof e[t]?e:e.provider&&"function"==typeof e.provider[t]?e.provider:null}function $o(e){return null==e?null:e.provider||null}async function jo(e,t){const n=is.dereference(e,"overrides");Rn("object"==typeof n,"invalid overrides parameter","overrides",e);const r=bo(n);return Rn(null==r.to||(t||[]).indexOf("to")>=0,"cannot override to","overrides.to",r.to),Rn(null==r.data||(t||[]).indexOf("data")>=0,"cannot override data","overrides.data",r.data),r.from&&(r.from=r.from),r}function Vo(e){const t=async function(t){const n=await jo(t,["data"]);n.to=await e.getAddress(),n.from&&(n.from=await Ni(n.from,Uo(e.runner)));const r=e.interface,s=Kn(n.value||So,"overrides.value")===So,i="0x"===(n.data||"0x");return!r.fallback||r.fallback.payable||!r.receive||i||s||Rn(!1,"cannot send data to receive or send value to non-payable fallback","overrides",t),Rn(r.fallback||i,"cannot send data to receive-only contract","overrides.data",n.data),Rn(r.receive||r.fallback&&r.fallback.payable||s,"cannot send value to non-payable fallback","overrides.value",n.value),Rn(r.fallback||i,"cannot send data to receive-only contract","overrides.data",n.data),n},n=async function(n){const r=e.runner;Pn(Lo(r),"contract runner does not support sending transactions","UNSUPPORTED_OPERATION",{operation:"sendTransaction"});const s=await r.sendTransaction(await t(n)),i=$o(e.runner);return new Ro(e.interface,i,s)},r=async e=>await n(e);return En(r,{_contract:e,estimateGas:async function(n){const r=Do(e.runner,"estimateGas");return Pn(Io(r),"contract runner does not support gas estimation","UNSUPPORTED_OPERATION",{operation:"estimateGas"}),await r.estimateGas(await t(n))},populateTransaction:t,send:n,staticCall:async function(n){const r=Do(e.runner,"call");Pn(To(r),"contract runner does not support calling","UNSUPPORTED_OPERATION",{operation:"call"});const s=await t(n);try{return await r.call(s)}catch(t){if(Cn(t)&&t.data)throw e.interface.makeError(t.data,s);throw t}}}),r}const Ho=Symbol.for("_ethersInternal_contract"),Go=new WeakMap;function zo(e){return Go.get(e[Ho])}async function qo(e,t){let n,r=null;if(Array.isArray(t)){const r=function(t){if(Ln(t,32))return t;const n=e.interface.getEvent(t);return Rn(n,"unknown fragment","name",t),n.topicHash};n=t.map((e=>null==e?null:Array.isArray(e)?e.map(r):r(e)))}else"*"===t?n=[null]:"string"==typeof t?Ln(t,32)?n=[t]:(r=e.interface.getEvent(t),Rn(r,"unknown fragment","event",t),n=[r.topicHash]):(s=t)&&"object"==typeof s&&"getTopicFilter"in s&&"function"==typeof s.getTopicFilter&&s.fragment?n=await t.getTopicFilter():"fragment"in t?(r=t.fragment,n=[r.topicHash]):Rn(!1,"unknown event name","event",t);var s;return n=n.map((e=>{if(null==e)return null;if(Array.isArray(e)){const t=Array.from(new Set(e.map((e=>e.toLowerCase()))).values());return 1===t.length?t[0]:(t.sort(),t)}return e.toLowerCase()})),{fragment:r,tag:n.map((e=>null==e?"null":Array.isArray(e)?e.join("|"):e)).join("&"),topics:n}}async function Qo(e,t){const{subs:n}=zo(e);return n.get((await qo(e,t)).tag)||null}async function Jo(e,t,n){const r=$o(e.runner);Pn(r,"contract runner does not support subscribing","UNSUPPORTED_OPERATION",{operation:t});const{fragment:s,tag:i,topics:o}=await qo(e,n),{addr:a,subs:l}=zo(e);let c=l.get(i);if(!c){const t={address:a||e,topics:o},u=t=>{let r=s;if(null==r)try{r=e.interface.getEvent(t.topics[0])}catch(e){}if(r){const i=r,o=s?e.interface.decodeEventLog(s,t.data,t.topics):[];Wo(e,n,o,(r=>new Bo(e,r,n,i,t)))}else Wo(e,n,[],(r=>new Oo(e,r,n,t)))};let h=[];c={tag:i,listeners:[],start:()=>{h.length||h.push(r.on(t,u))},stop:async()=>{if(0==h.length)return;let e=h;h=[],await Promise.all(e),r.off(t,u)}},l.set(i,c)}return c}let Ko=Promise.resolve();async function Wo(e,t,n,r){try{await Ko}catch(e){}const s=async function(e,t,n,r){await Ko;const s=await Qo(e,t);if(!s)return!1;const i=s.listeners.length;return s.listeners=s.listeners.filter((({listener:t,once:s})=>{const i=Array.from(n);r&&i.push(r(s?null:t));try{t.call(e,...i)}catch(e){}return!s})),0===s.listeners.length&&(s.stop(),zo(e).subs.delete(s.tag)),i>0}(e,t,n,r);return Ko=s,await s}const Yo=["then"];class Zo{target;interface;runner;filters;[Ho];fallback;constructor(e,t,n,r){Rn("string"==typeof e||xi(e),"invalid value for Contract target","target",e),null==n&&(n=null);const s=po.from(t);let i;En(this,{target:e,runner:n,interface:s}),Object.defineProperty(this,Ho,{value:{}});let o=null,a=null;if(r){const e=$o(n);a=new Ro(this.interface,e,r)}let l=new Map;if("string"==typeof e)if(Ln(e))o=e,i=Promise.resolve(e);else{const t=Do(n,"resolveName");if(!Fo(t))throw Nn("contract runner does not support name resolution","UNSUPPORTED_OPERATION",{operation:"resolveName"});i=t.resolveName(e).then((t=>{if(null==t)throw Nn("an ENS name used for a contract target must be correctly configured","UNCONFIGURED_NAME",{value:e});return zo(this).addr=t,t}))}else i=e.getAddress().then((e=>{if(null==e)throw new Error("TODO");return zo(this).addr=e,e}));var c;c={addrPromise:i,addr:o,deployTx:a,subs:l},Go.set(this[Ho],c);const u=new Proxy({},{get:(e,t,n)=>{if("symbol"==typeof t||Yo.indexOf(t)>=0)return Reflect.get(e,t,n);try{return this.getEvent(t)}catch(e){if(!xn(e,"INVALID_ARGUMENT")||"key"!==e.argument)throw e}},has:(e,t)=>Yo.indexOf(t)>=0?Reflect.has(e,t):Reflect.has(e,t)||this.interface.hasEvent(String(t))});return En(this,{filters:u}),En(this,{fallback:s.receive||s.fallback?Vo(this):null}),new Proxy(this,{get:(e,t,n)=>{if("symbol"==typeof t||t in e||Yo.indexOf(t)>=0)return Reflect.get(e,t,n);try{return e.getFunction(t)}catch(e){if(!xn(e,"INVALID_ARGUMENT")||"key"!==e.argument)throw e}},has:(e,t)=>"symbol"==typeof t||t in e||Yo.indexOf(t)>=0?Reflect.has(e,t):e.interface.hasFunction(t)})}connect(e){return new Zo(this.target,this.interface,e)}attach(e){return new Zo(e,this.interface,this.runner)}async getAddress(){return await zo(this).addrPromise}async getDeployedCode(){const e=$o(this.runner);Pn(e,"runner does not support .provider","UNSUPPORTED_OPERATION",{operation:"getDeployedCode"});const t=await e.getCode(await this.getAddress());return"0x"===t?null:t}async waitForDeployment(){const e=this.deploymentTransaction();if(e)return await e.wait(),this;if(null!=await this.getDeployedCode())return this;const t=$o(this.runner);return Pn(null!=t,"contract runner does not support .provider","UNSUPPORTED_OPERATION",{operation:"waitForDeployment"}),new Promise(((e,n)=>{const r=async()=>{try{if(null!=await this.getDeployedCode())return e(this);t.once("block",r)}catch(e){n(e)}};r()}))}deploymentTransaction(){return zo(this).deployTx}getFunction(e){return"string"!=typeof e&&(e=e.format()),function(e,t){const n=function(...n){const r=e.interface.getFunction(t,n);return Pn(r,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t,args:n}}),r},r=async function(...t){const r=n(...t);let s={};if(r.inputs.length+1===t.length&&(s=await jo(t.pop()),s.from&&(s.from=await Ni(s.from,Uo(e.runner)))),r.inputs.length!==t.length)throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");const i=await async function(e,t,n){const r=Do(e,"resolveName"),s=Fo(r)?r:null;return await Promise.all(t.map(((e,t)=>e.walkAsync(n[t],((e,t)=>(t=is.dereference(t,e),"address"===e?Ni(t,s):t))))))}(e.runner,r.inputs,t);return Object.assign({},s,await _n({to:e.getAddress(),data:e.interface.encodeFunctionData(r,i)}))},s=async function(...e){const t=await o(...e);return 1===t.length?t[0]:t},i=async function(...t){const n=e.runner;Pn(Lo(n),"contract runner does not support sending transactions","UNSUPPORTED_OPERATION",{operation:"sendTransaction"});const s=await n.sendTransaction(await r(...t)),i=$o(e.runner);return new Ro(e.interface,i,s)},o=async function(...t){const s=Do(e.runner,"call");Pn(To(s),"contract runner does not support calling","UNSUPPORTED_OPERATION",{operation:"call"});const i=await r(...t);let o="0x";try{o=await s.call(i)}catch(t){if(Cn(t)&&t.data)throw e.interface.makeError(t.data,i);throw t}const a=n(...t);return e.interface.decodeFunctionResult(a,o)},a=async(...e)=>n(...e).constant?await s(...e):await i(...e);return En(a,{name:e.interface.getFunctionName(t),_contract:e,_key:t,getFragment:n,estimateGas:async function(...t){const n=Do(e.runner,"estimateGas");return Pn(Io(n),"contract runner does not support gas estimation","UNSUPPORTED_OPERATION",{operation:"estimateGas"}),await n.estimateGas(await r(...t))},populateTransaction:r,send:i,staticCall:s,staticCallResult:o}),Object.defineProperty(a,"fragment",{configurable:!1,enumerable:!0,get:()=>{const n=e.interface.getFunction(t);return Pn(n,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t}}),n}}),a}(this,e)}getEvent(e){return"string"!=typeof e&&(e=e.format()),function(e,t){const n=function(...n){const r=e.interface.getEvent(t,n);return Pn(r,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t,args:n}}),r},r=function(...t){return new Mo(e,n(...t),t)};return En(r,{name:e.interface.getEventName(t),_contract:e,_key:t,getFragment:n}),Object.defineProperty(r,"fragment",{configurable:!1,enumerable:!0,get:()=>{const n=e.interface.getEvent(t);return Pn(n,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t}}),n}}),r}(this,e)}async queryTransaction(e){throw new Error("@TODO")}async queryFilter(e,t,n){null==t&&(t=0),null==n&&(n="latest");const{addr:r,addrPromise:s}=zo(this),i=r||await s,{fragment:o,topics:a}=await qo(this,e),l={address:i,topics:a,fromBlock:t,toBlock:n},c=$o(this.runner);return Pn(c,"contract runner does not have a provider","UNSUPPORTED_OPERATION",{operation:"queryFilter"}),(await c.getLogs(l)).map((e=>{let t=o;if(null==t)try{t=this.interface.getEvent(e.topics[0])}catch(e){}if(t)try{return new Co(e,this.interface,t)}catch(t){return new No(e,t)}return new vo(e,c)}))}async on(e,t){const n=await Jo(this,"on",e);return n.listeners.push({listener:t,once:!1}),n.start(),this}async once(e,t){const n=await Jo(this,"once",e);return n.listeners.push({listener:t,once:!0}),n.start(),this}async emit(e,...t){return await Wo(this,e,t,null)}async listenerCount(e){if(e){const t=await Qo(this,e);return t?t.listeners.length:0}const{subs:t}=zo(this);let n=0;for(const{listeners:e}of t.values())n+=e.length;return n}async listeners(e){if(e){const t=await Qo(this,e);return t?t.listeners.map((({listener:e})=>e)):[]}const{subs:t}=zo(this);let n=[];for(const{listeners:e}of t.values())n=n.concat(e.map((({listener:e})=>e)));return n}async off(e,t){const n=await Qo(this,e);if(!n)return this;if(t){const e=n.listeners.map((({listener:e})=>e)).indexOf(t);e>=0&&n.listeners.splice(e,1)}return null!=t&&0!==n.listeners.length||(n.stop(),zo(this).subs.delete(n.tag)),this}async removeAllListeners(e){if(e){const t=await Qo(this,e);if(!t)return this;t.stop(),zo(this).subs.delete(t.tag)}else{const{subs:e}=zo(this);for(const{tag:t,stop:n}of e.values())n(),e.delete(t)}return this}async addListener(e,t){return await this.on(e,t)}async removeListener(e,t){return await this.off(e,t)}static buildClass(e){return class extends Zo{constructor(t,n=null){super(t,e,n)}}}static from(e,t,n){return null==n&&(n=null),new this(e,t,n)}}class Xo extends(function(){return Zo}()){}var ea="";const ta=new Map([[8217,"apostrophe"],[8260,"fraction slash"],[12539,"middle dot"]]),na=4;function ra(e){return function(e){let t=0;return()=>e[t++]}(function(e){let t=0;function n(){return e[t++]<<8|e[t++]}let r=n(),s=1,i=[0,1];for(let e=1;e<r;e++)i.push(s+=n());let o=n(),a=t;t+=o;let l=0,c=0;function u(){return 0==l&&(c=c<<8|e[t++],l=8),c>>--l&1}const h=2**31,d=h>>>1,p=h-1;let f=0;for(let e=0;e<31;e++)f=f<<1|u();let m=[],g=0,y=h;for(;;){let e=Math.floor(((f-g+1)*s-1)/y),t=0,n=r;for(;n-t>1;){let r=t+n>>>1;e<i[r]?n=r:t=r}if(0==t)break;m.push(t);let o=g+Math.floor(y*i[t]/s),a=g+Math.floor(y*i[t+1]/s)-1;for(;0==((o^a)&d);)f=f<<1&p|u(),o=o<<1&p,a=a<<1&p|1;for(;o&~a&536870912;)f=f&d|f<<1&p>>>1|u(),o=o<<1^d,a=(a^d)<<1|d|1;g=o,y=1+a-o}let b=r-4;return m.map((t=>{switch(t-b){case 3:return b+65792+(e[a++]<<16|e[a++]<<8|e[a++]);case 2:return b+256+(e[a++]<<8|e[a++]);case 1:return b+e[a++];default:return t-1}}))}(function(e){let t=[];[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach(((e,n)=>t[e.charCodeAt(0)]=n));let n=e.length,r=new Uint8Array(6*n>>3);for(let s=0,i=0,o=0,a=0;s<n;s++)a=a<<6|t[e.charCodeAt(s)],o+=6,o>=8&&(r[i++]=a>>(o-=8));return r}(e)))}function sa(e){return 1&e?~e>>1:e>>1}function ia(e,t){let n=Array(e);for(let r=0,s=0;r<e;r++)n[r]=s+=sa(t());return n}function oa(e,t=0){let n=[];for(;;){let r=e(),s=e();if(!s)break;t+=r;for(let e=0;e<s;e++)n.push(t+e);t+=s+1}return n}function aa(e){return ca((()=>{let t=oa(e);if(t.length)return t}))}function la(e){let t=[];for(;;){let n=e();if(0==n)break;t.push(ha(n,e))}for(;;){let n=e()-1;if(n<0)break;t.push(da(n,e))}return t.flat()}function ca(e){let t=[];for(;;){let n=e(t.length);if(!n)break;t.push(n)}return t}function ua(e,t,n){let r=Array(e).fill().map((()=>[]));for(let s=0;s<t;s++)ia(e,n).forEach(((e,t)=>r[t].push(e)));return r}function ha(e,t){let n=1+t(),r=t(),s=ca(t);return ua(s.length,1+e,t).flatMap(((e,t)=>{let[i,...o]=e;return Array(s[t]).fill().map(((e,t)=>{let s=t*r;return[i+t*n,o.map((e=>e+s))]}))}))}function da(e,t){return ua(1+t(),1+e,t).map((e=>[e[0],e.slice(1)]))}function pa(e){return`{${function(e){return e.toString(16).toUpperCase().padStart(2,"0")}(e)}}`}function fa(e){let t=e.length;if(t<4096)return String.fromCodePoint(...e);let n=[];for(let r=0;r<t;)n.push(String.fromCodePoint(...e.slice(r,r+=4096)));return n.join("")}function ma(e,t){let n=e.length,r=n-t.length;for(let s=0;0==r&&s<n;s++)r=e[s]-t[s];return r}var ga="AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g";const ya=44032,ba=4352,wa=4449,va=4519,Aa=28,_a=21*Aa,Ea=ya+19*_a,ka=ba+19,xa=wa+21,Ca=va+Aa;function Na(e){return e>>24&255}function Pa(e){return 16777215&e}let Ra,Oa,Ba,Sa;function Ta(e){return e>=ya&&e<Ea}function Ia(e,t){if(e>=ba&&e<ka&&t>=wa&&t<xa)return ya+(e-ba)*_a+(t-wa)*Aa;if(Ta(e)&&t>va&&t<Ca&&(e-ya)%Aa==0)return e+(t-va);{let n=Sa.get(e);return n&&(n=n.get(t),n)?n:-1}}function Fa(e){Ra||function(){let e=ra(ga);Ra=new Map(aa(e).flatMap(((e,t)=>e.map((e=>[e,t+1<<24]))))),Oa=new Set(oa(e)),Ba=new Map,Sa=new Map;for(let[t,n]of la(e)){if(!Oa.has(t)&&2==n.length){let[e,r]=n,s=Sa.get(e);s||(s=new Map,Sa.set(e,s)),s.set(r,t)}Ba.set(t,n.reverse())}}();let t=[],n=[],r=!1;function s(e){let n=Ra.get(e);n&&(r=!0,e|=n),t.push(e)}for(let r of e)for(;;){if(r<128)t.push(r);else if(Ta(r)){let e=r-ya,t=e%_a/Aa|0,n=e%Aa;s(ba+(e/_a|0)),s(wa+t),n>0&&s(va+n)}else{let e=Ba.get(r);e?n.push(...e):s(r)}if(!n.length)break;r=n.pop()}if(r&&t.length>1){let e=Na(t[0]);for(let n=1;n<t.length;n++){let r=Na(t[n]);if(0==r||e<=r){e=r;continue}let s=n-1;for(;;){let n=t[s+1];if(t[s+1]=t[s],t[s]=n,!s)break;if(e=Na(t[--s]),e<=r)break}e=Na(t[n])}}return t}function La(e){return Fa(e).map(Pa)}function Ua(e){return function(e){let t=[],n=[],r=-1,s=0;for(let i of e){let e=Na(i),o=Pa(i);if(-1==r)0==e?r=o:t.push(o);else if(s>0&&s>=e)0==e?(t.push(r,...n),n.length=0,r=o):n.push(o),s=e;else{let i=Ia(r,o);i>=0?r=i:0==s&&0==e?(t.push(r),r=o):(n.push(o),s=e)}}return r>=0&&t.push(r,...n),t}(Fa(e))}const Ma=45,Da=".",$a=65039,ja=1,Va=e=>Array.from(e);function Ha(e,t){return e.P.has(t)||e.Q.has(t)}class Ga extends Array{get is_emoji(){return!0}}let za,qa,Qa,Ja,Ka,Wa,Ya,Za,Xa,el,tl,nl;function rl(){if(za)return;let e=ra(ea);const t=()=>oa(e),n=()=>new Set(t()),r=(e,t)=>t.forEach((t=>e.add(t)));za=new Map(la(e)),qa=n(),Qa=t(),Ja=new Set(t().map((e=>Qa[e]))),Qa=new Set(Qa),Ka=n(),Wa=n();let s=aa(e),i=e();const o=()=>{let e=new Set;return t().forEach((t=>r(e,s[t]))),r(e,t()),e};Ya=ca((t=>{let n=ca(e).map((e=>e+96));if(n.length){let r=t>=i;return n[0]-=32,n=fa(n),r&&(n=`Restricted[${n}]`),{N:n,P:o(),Q:o(),M:!e(),R:r}}})),Za=n(),Xa=new Map;let a=t().concat(Va(Za)).sort(((e,t)=>e-t));a.forEach(((t,n)=>{let r=e(),s=a[n]=r?a[n-r]:{V:[],M:new Map};s.V.push(t),Za.has(t)||Xa.set(t,s)}));for(let{V:e,M:t}of new Set(Xa.values())){let n=[];for(let t of e){let e=Ya.filter((e=>Ha(e,t))),s=n.find((({G:t})=>e.some((e=>t.has(e)))));s||(s={G:new Set,V:[]},n.push(s)),s.V.push(t),r(s.G,e)}let s=n.flatMap((e=>Va(e.G)));for(let{G:e,V:r}of n){let n=new Set(s.filter((t=>!e.has(t))));for(let e of r)t.set(e,n)}}el=new Set;let l=new Set;const c=e=>el.has(e)?l.add(e):el.add(e);for(let e of Ya){for(let t of e.P)c(t);for(let t of e.Q)c(t)}for(let e of el)Xa.has(e)||l.has(e)||Xa.set(e,ja);r(el,La(el)),tl=function(e){let t=[],n=oa(e);return function e({S:n,B:r},s,i){if(!(4&n&&i===s[s.length-1])){2&n&&(i=s[s.length-1]),1&n&&t.push(s);for(let t of r)for(let n of t.Q)e(t,[...s,n],i)}}(function t(r){let s=e(),i=ca((()=>{let r=oa(e).map((e=>n[e]));if(r.length)return t(r)}));return{S:s,B:i,Q:r}}([]),[]),t}(e).map((e=>Ga.from(e))).sort(ma),nl=new Map;for(let e of tl){let t=[nl];for(let n of e){let e=t.map((e=>{let t=e.get(n);return t||(t=new Map,e.set(n,t)),t}));n===$a?t.push(...e):t=e}for(let n of t)n.V=e}}function sl(e){return(al(e)?"":`${il(ol([e]))} `)+pa(e)}function il(e){return`"${e}"‎`}function ol(e,t=1/0,n=pa){let r=[];var s;s=e[0],rl(),Qa.has(s)&&r.push("◌"),e.length>t&&(t>>=1,e=[...e.slice(0,t),8230,...e.slice(-t)]);let i=0,o=e.length;for(let t=0;t<o;t++){let s=e[t];al(s)&&(r.push(fa(e.slice(i,t))),r.push(n(s)),i=t+1)}return r.push(fa(e.slice(i,o))),r.join("")}function al(e){return rl(),Ka.has(e)}function ll(e,t,n){if(!e)return[];rl();let r=0;return e.split(Da).map((e=>{let s=function(e){let t=[];for(let n=0,r=e.length;n<r;){let r=e.codePointAt(n);n+=r<65536?1:2,t.push(r)}return t}(e),i={input:s,offset:r};r+=s.length+1;try{let e,r=i.tokens=function(e,t,n){let r=[],s=[];for(e=e.slice().reverse();e.length;){let i=pl(e);if(i)s.length&&(r.push(t(s)),s=[]),r.push(n(i));else{let t=e.pop();if(el.has(t))s.push(t);else{let e=za.get(t);if(e)s.push(...e);else if(!qa.has(t))throw cl(t)}}}return s.length&&r.push(t(s)),r}(s,t,n),o=r.length;if(!o)throw new Error("empty label");let a=i.output=r.flat();if(function(e){for(let t=e.lastIndexOf(95);t>0;)if(95!==e[--t])throw new Error("underscore allowed only at start")}(a),!(i.emoji=o>1||r[0].is_emoji)&&a.every((e=>e<128)))!function(e){if(e.length>=4&&e[2]==Ma&&e[3]==Ma)throw new Error(`invalid label extension: "${fa(e.slice(0,4))}"`)}(a),e="ASCII";else{let t=r.flatMap((e=>e.is_emoji?[]:e));if(t.length){if(Qa.has(a[0]))throw hl("leading combining mark");for(let e=1;e<o;e++){let t=r[e];if(!t.is_emoji&&Qa.has(t[0]))throw hl(`emoji + combining mark: "${fa(r[e-1])} + ${ol([t[0]])}"`)}!function(e){let t=e[0],n=ta.get(t);if(n)throw hl(`leading ${n}`);let r=e.length,s=-1;for(let i=1;i<r;i++){t=e[i];let r=ta.get(t);if(r){if(s==i)throw hl(`${n} + ${r}`);s=i+1,n=r}}if(s==r)throw hl(`trailing ${n}`)}(a);let n=Va(new Set(t)),[s]=function(e){let t=Ya;for(let n of e){let e=t.filter((e=>Ha(e,n)));if(!e.length)throw Ya.some((e=>Ha(e,n)))?ul(t[0],n):cl(n);if(t=e,1==e.length)break}return t}(n);!function(e,t){for(let n of t)if(!Ha(e,n))throw ul(e,n);if(e.M){let e=La(t);for(let t=1,n=e.length;t<n;t++)if(Ja.has(e[t])){let r=t+1;for(let s;r<n&&Ja.has(s=e[r]);r++)for(let n=t;n<r;n++)if(e[n]==s)throw new Error(`duplicate non-spacing marks: ${sl(s)}`);if(r-t>na)throw new Error(`excessive non-spacing marks: ${il(ol(e.slice(t-1,r)))} (${r-t}/${na})`);t=r}}}(s,t),function(e,t){let n,r=[];for(let e of t){let t=Xa.get(e);if(t===ja)return;if(t){let r=t.M.get(e);if(n=n?n.filter((e=>r.has(e))):Va(r),!n.length)return}else r.push(e)}if(n)for(let t of n)if(r.every((e=>Ha(t,e))))throw new Error(`whole-script confusable: ${e.N}/${t.N}`)}(s,n),e=s.N}else e="Emoji"}i.type=e}catch(e){i.error=e}return i}))}function cl(e){return new Error(`disallowed character: ${sl(e)}`)}function ul(e,t){let n=sl(t),r=Ya.find((e=>e.P.has(t)));return r&&(n=`${r.N} ${n}`),new Error(`illegal mixture: ${e.N} + ${n}`)}function hl(e){return new Error(`illegal placement: ${e}`)}function dl(e){return e.filter((e=>e!=$a))}function pl(e,t){let n,r=nl,s=e.length;for(;s&&(r=r.get(e[--s]),r);){let{V:i}=r;i&&(n=i,t&&t.push(...e.slice(s).reverse()),e.length=s)}return n}const fl=new Uint8Array(32);function ml(e){return Rn(0!==e.length,"invalid ENS name; empty component","comp",e),e}function gl(e){const t=Es(function(e){try{if(0===e.length)throw new Error("empty label");return function(e){return function(e){return e.map((({input:t,error:n,output:r})=>{if(n){let r=n.message;throw new Error(1==e.length?r:`Invalid label ${il(ol(t,63))}: ${r}`)}return fa(r)})).join(Da)}(ll(e,Ua,dl))}(e)}catch(t){Rn(!1,`invalid ENS name (${t.message})`,"name",e)}}(e)),n=[];if(0===e.length)return n;let r=0;for(let e=0;e<t.length;e++)46===t[e]&&(n.push(ml(t.slice(r,e))),r=e+1);return Rn(r<t.length,"invalid ENS name; empty component","name",e),n.push(ml(t.slice(r))),n}function yl(e){Rn("string"==typeof e,"invalid ENS name; not a string","name",e),Rn(e.length,"invalid ENS name (empty label)","name",e);let t=fl;const n=gl(e);for(;n.length;)t=Qr(Dn([t,Qr(n.pop())]));return Mn(t)}function bl(e,t){const n=null!=t?t:63;return Rn(n<=255,"DNS encoded label cannot exceed 255","length",n),Mn(Dn(gl(e).map((t=>{Rn(t.length<=n,`label ${JSON.stringify(e)} exceeds ${n} bytes`,"name",e);const r=new Uint8Array(t.length+1);return r.set(t,1),r[0]=r.length-1,r}))))+"00"}fl.fill(0);const wl="0x0000000000000000000000000000000000000000000000000000000000000000",vl=BigInt(0),Al=BigInt(1),_l=BigInt(2),El=BigInt(27),kl=BigInt(28),xl=BigInt(35),Cl={};function Nl(e){return Hn(tr(e),32)}class Pl{#X;#ee;#te;#ne;get r(){return this.#X}set r(e){Rn(32===$n(e),"invalid r","value",e),this.#X=Mn(e)}get s(){return this.#ee}set s(e){Rn(32===$n(e),"invalid s","value",e);const t=Mn(e);Rn(parseInt(t.substring(0,3))<8,"non-canonical s","value",t),this.#ee=t}get v(){return this.#te}set v(e){const t=Xn(e,"value");Rn(27===t||28===t,"invalid v","v",e),this.#te=t}get networkV(){return this.#ne}get legacyChainId(){const e=this.networkV;return null==e?null:Pl.getChainId(e)}get yParity(){return 27===this.v?0:1}get yParityAndS(){const e=In(this.s);return this.yParity&&(e[0]|=128),Mn(e)}get compactSerialized(){return Dn([this.r,this.yParityAndS])}get serialized(){return Dn([this.r,this.s,this.yParity?"0x1c":"0x1b"])}constructor(e,t,n,r){Sn(e,Cl,"Signature"),this.#X=t,this.#ee=n,this.#te=r,this.#ne=null}[Symbol.for("nodejs.util.inspect.custom")](){return`Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`}clone(){const e=new Pl(Cl,this.r,this.s,this.v);return this.networkV&&(e.#ne=this.networkV),e}toJSON(){const e=this.networkV;return{_type:"signature",networkV:null!=e?e.toString():null,r:this.r,s:this.s,v:this.v}}static getChainId(e){const t=Kn(e,"v");return t==El||t==kl?vl:(Rn(t>=xl,"invalid EIP-155 v","v",e),(t-xl)/_l)}static getChainIdV(e,t){return Kn(e)*_l+BigInt(35+t-27)}static getNormalizedV(e){const t=Kn(e);return t===vl||t===El?27:t===Al||t===kl?28:(Rn(t>=xl,"invalid v","v",e),t&Al?27:28)}static from(e){function t(t,n){Rn(t,n,"signature",e)}if(null==e)return new Pl(Cl,wl,wl,27);if("string"==typeof e){const n=In(e,"signature");if(64===n.length){const e=Mn(n.slice(0,32)),t=n.slice(32,64),r=128&t[0]?28:27;return t[0]&=127,new Pl(Cl,e,Mn(t),r)}if(65===n.length){const e=Mn(n.slice(0,32)),r=n.slice(32,64);t(0==(128&r[0]),"non-canonical s");const s=Pl.getNormalizedV(n[64]);return new Pl(Cl,e,Mn(r),s)}t(!1,"invalid raw signature length")}if(e instanceof Pl)return e.clone();const n=e.r;t(null!=n,"missing r");const r=Nl(n),s=function(e,n){if(null!=e)return Nl(e);if(null!=n){t(Ln(n,32),"invalid yParityAndS");const e=In(n);return e[0]&=127,Mn(e)}t(!1,"missing s")}(e.s,e.yParityAndS);t(0==(128&In(s)[0]),"non-canonical s");const{networkV:i,v:o}=function(e,n,r){if(null!=e){const t=Kn(e);return{networkV:t>=xl?t:void 0,v:Pl.getNormalizedV(t)}}if(null!=n)return t(Ln(n,32),"invalid yParityAndS"),{v:128&In(n)[0]?28:27};if(null!=r){switch(Xn(r,"sig.yParity")){case 0:return{v:27};case 1:return{v:28}}t(!1,"invalid yParity")}t(!1,"missing v")}(e.v,e.yParityAndS,e.yParity),a=new Pl(Cl,r,s,o);return i&&(a.#ne=i),t(null==e.yParity||Xn(e.yParity,"sig.yParity")===a.yParity,"yParity mismatch"),t(null==e.yParityAndS||e.yParityAndS===a.yParityAndS,"yParityAndS mismatch"),a}}class Rl extends Cr{constructor(e,t,n,r){super(),this.blockLen=e,this.outputLen=t,this.padOffset=n,this.isLE=r,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=Er(this.buffer)}update(e){mr(this);const{view:t,buffer:n,blockLen:r}=this,s=(e=xr(e)).length;for(let i=0;i<s;){const o=Math.min(r-this.pos,s-i);if(o!==r)n.set(e.subarray(i,i+o),this.pos),this.pos+=o,i+=o,this.pos===r&&(this.process(t,0),this.pos=0);else{const t=Er(e);for(;r<=s-i;i+=r)this.process(t,i)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){mr(this),gr(e,this),this.finished=!0;const{buffer:t,view:n,blockLen:r,isLE:s}=this;let{pos:i}=this;t[i++]=128,this.buffer.subarray(i).fill(0),this.padOffset>r-i&&(this.process(n,0),i=0);for(let e=i;e<r;e++)t[e]=0;!function(e,t,n,r){if("function"==typeof e.setBigUint64)return e.setBigUint64(t,n,r);const s=BigInt(32),i=BigInt(4294967295),o=Number(n>>s&i),a=Number(n&i),l=r?4:0,c=r?0:4;e.setUint32(t+l,o,r),e.setUint32(t+c,a,r)}(n,r-8,BigInt(8*this.length),s),this.process(n,0);const o=Er(e),a=this.outputLen;if(a%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const l=a/4,c=this.get();if(l>c.length)throw new Error("_sha2: outputLen bigger than state");for(let e=0;e<l;e++)o.setUint32(4*e,c[e],s)}digest(){const{buffer:e,outputLen:t}=this;this.digestInto(e);const n=e.slice(0,t);return this.destroy(),n}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:t,buffer:n,length:r,finished:s,destroyed:i,pos:o}=this;return e.length=r,e.pos=o,e.finished=s,e.destroyed=i,r%t&&e.buffer.set(n),e}}const Ol=(e,t,n)=>e&t^~e&n,Bl=(e,t,n)=>e&t^e&n^t&n,Sl=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),Tl=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),Il=new Uint32Array(64);class Fl extends Rl{constructor(){super(64,32,8,!1),this.A=0|Tl[0],this.B=0|Tl[1],this.C=0|Tl[2],this.D=0|Tl[3],this.E=0|Tl[4],this.F=0|Tl[5],this.G=0|Tl[6],this.H=0|Tl[7]}get(){const{A:e,B:t,C:n,D:r,E:s,F:i,G:o,H:a}=this;return[e,t,n,r,s,i,o,a]}set(e,t,n,r,s,i,o,a){this.A=0|e,this.B=0|t,this.C=0|n,this.D=0|r,this.E=0|s,this.F=0|i,this.G=0|o,this.H=0|a}process(e,t){for(let n=0;n<16;n++,t+=4)Il[n]=e.getUint32(t,!1);for(let e=16;e<64;e++){const t=Il[e-15],n=Il[e-2],r=kr(t,7)^kr(t,18)^t>>>3,s=kr(n,17)^kr(n,19)^n>>>10;Il[e]=s+Il[e-7]+r+Il[e-16]|0}let{A:n,B:r,C:s,D:i,E:o,F:a,G:l,H:c}=this;for(let e=0;e<64;e++){const t=c+(kr(o,6)^kr(o,11)^kr(o,25))+Ol(o,a,l)+Sl[e]+Il[e]|0,u=(kr(n,2)^kr(n,13)^kr(n,22))+Bl(n,r,s)|0;c=l,l=a,a=o,o=i+t|0,i=s,s=r,r=n,n=t+u|0}n=n+this.A|0,r=r+this.B|0,s=s+this.C|0,i=i+this.D|0,o=o+this.E|0,a=a+this.F|0,l=l+this.G|0,c=c+this.H|0,this.set(n,r,s,i,o,a,l,c)}roundClean(){Il.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const Ll=Nr((()=>new Fl)),Ul=(BigInt(0),BigInt(1)),Ml=BigInt(2),Dl=e=>e instanceof Uint8Array,$l=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function jl(e){if(!Dl(e))throw new Error("Uint8Array expected");let t="";for(let n=0;n<e.length;n++)t+=$l[e[n]];return t}function Vl(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);return BigInt(""===e?"0":`0x${e}`)}function Hl(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);const t=e.length;if(t%2)throw new Error("padded hex string expected, got unpadded hex of length "+t);const n=new Uint8Array(t/2);for(let t=0;t<n.length;t++){const r=2*t,s=e.slice(r,r+2),i=Number.parseInt(s,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");n[t]=i}return n}function Gl(e){return Vl(jl(e))}function zl(e){if(!Dl(e))throw new Error("Uint8Array expected");return Vl(jl(Uint8Array.from(e).reverse()))}function ql(e,t){return Hl(e.toString(16).padStart(2*t,"0"))}function Ql(e,t){return ql(e,t).reverse()}function Jl(e,t,n){let r;if("string"==typeof t)try{r=Hl(t)}catch(n){throw new Error(`${e} must be valid hex string, got "${t}". Cause: ${n}`)}else{if(!Dl(t))throw new Error(`${e} must be hex string or Uint8Array`);r=Uint8Array.from(t)}const s=r.length;if("number"==typeof n&&s!==n)throw new Error(`${e} expected ${n} bytes, got ${s}`);return r}function Kl(...e){const t=new Uint8Array(e.reduce(((e,t)=>e+t.length),0));let n=0;return e.forEach((e=>{if(!Dl(e))throw new Error("Uint8Array expected");t.set(e,n),n+=e.length})),t}const Wl=e=>(Ml<<BigInt(e-1))-Ul,Yl=e=>new Uint8Array(e),Zl=e=>Uint8Array.from(e);function Xl(e,t,n){if("number"!=typeof e||e<2)throw new Error("hashLen must be a number");if("number"!=typeof t||t<2)throw new Error("qByteLen must be a number");if("function"!=typeof n)throw new Error("hmacFn must be a function");let r=Yl(e),s=Yl(e),i=0;const o=()=>{r.fill(1),s.fill(0),i=0},a=(...e)=>n(s,r,...e),l=(e=Yl())=>{s=a(Zl([0]),e),r=a(),0!==e.length&&(s=a(Zl([1]),e),r=a())},c=()=>{if(i++>=1e3)throw new Error("drbg: tried 1000 values");let e=0;const n=[];for(;e<t;){r=a();const t=r.slice();n.push(t),e+=r.length}return Kl(...n)};return(e,t)=>{let n;for(o(),l(e);!(n=t(c()));)l();return o(),n}}const ec={bigint:e=>"bigint"==typeof e,function:e=>"function"==typeof e,boolean:e=>"boolean"==typeof e,string:e=>"string"==typeof e,stringOrUint8Array:e=>"string"==typeof e||e instanceof Uint8Array,isSafeInteger:e=>Number.isSafeInteger(e),array:e=>Array.isArray(e),field:(e,t)=>t.Fp.isValid(e),hash:e=>"function"==typeof e&&Number.isSafeInteger(e.outputLen)};function tc(e,t,n={}){const r=(t,n,r)=>{const s=ec[n];if("function"!=typeof s)throw new Error(`Invalid validator "${n}", expected function`);const i=e[t];if(!(r&&void 0===i||s(i,e)))throw new Error(`Invalid param ${String(t)}=${i} (${typeof i}), expected ${n}`)};for(const[e,n]of Object.entries(t))r(e,n,!1);for(const[e,t]of Object.entries(n))r(e,t,!0);return e}const nc=BigInt(0),rc=BigInt(1),sc=BigInt(2),ic=BigInt(3),oc=BigInt(4),ac=BigInt(5),lc=BigInt(8);function cc(e,t){const n=e%t;return n>=nc?n:t+n}function uc(e,t,n){if(n<=nc||t<nc)throw new Error("Expected power/modulo > 0");if(n===rc)return nc;let r=rc;for(;t>nc;)t&rc&&(r=r*e%n),e=e*e%n,t>>=rc;return r}function hc(e,t,n){let r=e;for(;t-- >nc;)r*=r,r%=n;return r}function dc(e,t){if(e===nc||t<=nc)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let n=cc(e,t),r=t,s=nc,i=rc,o=rc,a=nc;for(;n!==nc;){const e=r/n,t=r%n,l=s-o*e,c=i-a*e;r=n,n=t,s=o,i=a,o=l,a=c}if(r!==rc)throw new Error("invert: does not exist");return cc(s,t)}BigInt(9),BigInt(16);const pc=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function fc(e,t){const n=void 0!==t?t:e.toString(2).length;return{nBitLength:n,nByteLength:Math.ceil(n/8)}}function mc(e){if("bigint"!=typeof e)throw new Error("field order must be bigint");const t=e.toString(2).length;return Math.ceil(t/8)}function gc(e){const t=mc(e);return t+Math.ceil(t/2)}class yc extends Cr{constructor(e,t){super(),this.finished=!1,this.destroyed=!1,function(e){if("function"!=typeof e||"function"!=typeof e.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");pr(e.outputLen),pr(e.blockLen)}(e);const n=xr(t);if(this.iHash=e.create(),"function"!=typeof this.iHash.update)throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const r=this.blockLen,s=new Uint8Array(r);s.set(n.length>r?e.create().update(n).digest():n);for(let e=0;e<s.length;e++)s[e]^=54;this.iHash.update(s),this.oHash=e.create();for(let e=0;e<s.length;e++)s[e]^=106;this.oHash.update(s),s.fill(0)}update(e){return mr(this),this.iHash.update(e),this}digestInto(e){mr(this),fr(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:t,iHash:n,finished:r,destroyed:s,blockLen:i,outputLen:o}=this;return e.finished=r,e.destroyed=s,e.blockLen=i,e.outputLen=o,e.oHash=t._cloneInto(e.oHash),e.iHash=n._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const bc=(e,t,n)=>new yc(e,t).update(n).digest();bc.create=(e,t)=>new yc(e,t);const wc=BigInt(0),vc=BigInt(1);function Ac(e){return tc(e.Fp,pc.reduce(((e,t)=>(e[t]="function",e)),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"})),tc(e,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...fc(e.n,e.nBitLength),...e,p:e.Fp.ORDER})}const{bytesToNumberBE:_c,hexToBytes:Ec}=e,kc={Err:class extends Error{constructor(e=""){super(e)}},_parseInt(e){const{Err:t}=kc;if(e.length<2||2!==e[0])throw new t("Invalid signature integer tag");const n=e[1],r=e.subarray(2,n+2);if(!n||r.length!==n)throw new t("Invalid signature integer: wrong length");if(128&r[0])throw new t("Invalid signature integer: negative");if(0===r[0]&&!(128&r[1]))throw new t("Invalid signature integer: unnecessary leading zero");return{d:_c(r),l:e.subarray(n+2)}},toSig(e){const{Err:t}=kc,n="string"==typeof e?Ec(e):e;if(!(n instanceof Uint8Array))throw new Error("ui8a expected");let r=n.length;if(r<2||48!=n[0])throw new t("Invalid signature tag");if(n[1]!==r-2)throw new t("Invalid signature: incorrect length");const{d:s,l:i}=kc._parseInt(n.subarray(2)),{d:o,l:a}=kc._parseInt(i);if(a.length)throw new t("Invalid signature: left bytes after parsing");return{r:s,s:o}},hexFromSig(e){const t=e=>8&Number.parseInt(e[0],16)?"00"+e:e,n=e=>{const t=e.toString(16);return 1&t.length?`0${t}`:t},r=t(n(e.s)),s=t(n(e.r)),i=r.length/2,o=s.length/2,a=n(i),l=n(o);return`30${n(o+i+4)}02${l}${s}02${a}${r}`}},xc=BigInt(0),Cc=BigInt(1),Nc=(BigInt(2),BigInt(3));function Pc(e){const t=function(e){const t=Ac(e);return tc(t,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...t})}(e),{Fp:n,n:r}=t,s=n.BYTES+1,i=2*n.BYTES+1;function o(e){return cc(e,r)}function a(e){return dc(e,r)}const{ProjectivePoint:l,normPrivateKeyToScalar:c,weierstrassEquation:u,isWithinCurveOrder:h}=function(e){const t=function(e){const t=Ac(e);tc(t,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo:n,Fp:r,a:s}=t;if(n){if(!r.eql(s,r.ZERO))throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");if("object"!=typeof n||"bigint"!=typeof n.beta||"function"!=typeof n.splitScalar)throw new Error("Expected endomorphism with beta: bigint and splitScalar: function")}return Object.freeze({...t})}(e),{Fp:n}=t,r=t.toBytes||((e,t,r)=>{const s=t.toAffine();return Kl(Uint8Array.from([4]),n.toBytes(s.x),n.toBytes(s.y))}),s=t.fromBytes||(e=>{const t=e.subarray(1);return{x:n.fromBytes(t.subarray(0,n.BYTES)),y:n.fromBytes(t.subarray(n.BYTES,2*n.BYTES))}});function i(e){const{a:r,b:s}=t,i=n.sqr(e),o=n.mul(i,e);return n.add(n.add(o,n.mul(e,r)),s)}if(!n.eql(n.sqr(t.Gy),i(t.Gx)))throw new Error("bad generator point: equation left != right");function o(e){return"bigint"==typeof e&&xc<e&&e<t.n}function a(e){if(!o(e))throw new Error("Expected valid bigint: 0 < bigint < curve.n")}function l(e){const{allowedPrivateKeyLengths:n,nByteLength:r,wrapPrivateKey:s,n:i}=t;if(n&&"bigint"!=typeof e){if(e instanceof Uint8Array&&(e=jl(e)),"string"!=typeof e||!n.includes(e.length))throw new Error("Invalid key");e=e.padStart(2*r,"0")}let o;try{o="bigint"==typeof e?e:Gl(Jl("private key",e,r))}catch(t){throw new Error(`private key must be ${r} bytes, hex or bigint, not ${typeof e}`)}return s&&(o=cc(o,i)),a(o),o}const c=new Map;function u(e){if(!(e instanceof h))throw new Error("ProjectivePoint expected")}class h{constructor(e,t,r){if(this.px=e,this.py=t,this.pz=r,null==e||!n.isValid(e))throw new Error("x required");if(null==t||!n.isValid(t))throw new Error("y required");if(null==r||!n.isValid(r))throw new Error("z required")}static fromAffine(e){const{x:t,y:r}=e||{};if(!e||!n.isValid(t)||!n.isValid(r))throw new Error("invalid affine point");if(e instanceof h)throw new Error("projective point not allowed");const s=e=>n.eql(e,n.ZERO);return s(t)&&s(r)?h.ZERO:new h(t,r,n.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(e){const t=n.invertBatch(e.map((e=>e.pz)));return e.map(((e,n)=>e.toAffine(t[n]))).map(h.fromAffine)}static fromHex(e){const t=h.fromAffine(s(Jl("pointHex",e)));return t.assertValidity(),t}static fromPrivateKey(e){return h.BASE.multiply(l(e))}_setWindowSize(e){this._WINDOW_SIZE=e,c.delete(this)}assertValidity(){if(this.is0()){if(t.allowInfinityPoint&&!n.is0(this.py))return;throw new Error("bad point: ZERO")}const{x:e,y:r}=this.toAffine();if(!n.isValid(e)||!n.isValid(r))throw new Error("bad point: x or y not FE");const s=n.sqr(r),o=i(e);if(!n.eql(s,o))throw new Error("bad point: equation left != right");if(!this.isTorsionFree())throw new Error("bad point: not in prime-order subgroup")}hasEvenY(){const{y:e}=this.toAffine();if(n.isOdd)return!n.isOdd(e);throw new Error("Field doesn't support isOdd")}equals(e){u(e);const{px:t,py:r,pz:s}=this,{px:i,py:o,pz:a}=e,l=n.eql(n.mul(t,a),n.mul(i,s)),c=n.eql(n.mul(r,a),n.mul(o,s));return l&&c}negate(){return new h(this.px,n.neg(this.py),this.pz)}double(){const{a:e,b:r}=t,s=n.mul(r,Nc),{px:i,py:o,pz:a}=this;let l=n.ZERO,c=n.ZERO,u=n.ZERO,d=n.mul(i,i),p=n.mul(o,o),f=n.mul(a,a),m=n.mul(i,o);return m=n.add(m,m),u=n.mul(i,a),u=n.add(u,u),l=n.mul(e,u),c=n.mul(s,f),c=n.add(l,c),l=n.sub(p,c),c=n.add(p,c),c=n.mul(l,c),l=n.mul(m,l),u=n.mul(s,u),f=n.mul(e,f),m=n.sub(d,f),m=n.mul(e,m),m=n.add(m,u),u=n.add(d,d),d=n.add(u,d),d=n.add(d,f),d=n.mul(d,m),c=n.add(c,d),f=n.mul(o,a),f=n.add(f,f),d=n.mul(f,m),l=n.sub(l,d),u=n.mul(f,p),u=n.add(u,u),u=n.add(u,u),new h(l,c,u)}add(e){u(e);const{px:r,py:s,pz:i}=this,{px:o,py:a,pz:l}=e;let c=n.ZERO,d=n.ZERO,p=n.ZERO;const f=t.a,m=n.mul(t.b,Nc);let g=n.mul(r,o),y=n.mul(s,a),b=n.mul(i,l),w=n.add(r,s),v=n.add(o,a);w=n.mul(w,v),v=n.add(g,y),w=n.sub(w,v),v=n.add(r,i);let A=n.add(o,l);return v=n.mul(v,A),A=n.add(g,b),v=n.sub(v,A),A=n.add(s,i),c=n.add(a,l),A=n.mul(A,c),c=n.add(y,b),A=n.sub(A,c),p=n.mul(f,v),c=n.mul(m,b),p=n.add(c,p),c=n.sub(y,p),p=n.add(y,p),d=n.mul(c,p),y=n.add(g,g),y=n.add(y,g),b=n.mul(f,b),v=n.mul(m,v),y=n.add(y,b),b=n.sub(g,b),b=n.mul(f,b),v=n.add(v,b),g=n.mul(y,v),d=n.add(d,g),g=n.mul(A,v),c=n.mul(w,c),c=n.sub(c,g),g=n.mul(w,y),p=n.mul(A,p),p=n.add(p,g),new h(c,d,p)}subtract(e){return this.add(e.negate())}is0(){return this.equals(h.ZERO)}wNAF(e){return p.wNAFCached(this,c,e,(e=>{const t=n.invertBatch(e.map((e=>e.pz)));return e.map(((e,n)=>e.toAffine(t[n]))).map(h.fromAffine)}))}multiplyUnsafe(e){const r=h.ZERO;if(e===xc)return r;if(a(e),e===Cc)return this;const{endo:s}=t;if(!s)return p.unsafeLadder(this,e);let{k1neg:i,k1:o,k2neg:l,k2:c}=s.splitScalar(e),u=r,d=r,f=this;for(;o>xc||c>xc;)o&Cc&&(u=u.add(f)),c&Cc&&(d=d.add(f)),f=f.double(),o>>=Cc,c>>=Cc;return i&&(u=u.negate()),l&&(d=d.negate()),d=new h(n.mul(d.px,s.beta),d.py,d.pz),u.add(d)}multiply(e){a(e);let r,s,i=e;const{endo:o}=t;if(o){const{k1neg:e,k1:t,k2neg:a,k2:l}=o.splitScalar(i);let{p:c,f:u}=this.wNAF(t),{p:d,f}=this.wNAF(l);c=p.constTimeNegate(e,c),d=p.constTimeNegate(a,d),d=new h(n.mul(d.px,o.beta),d.py,d.pz),r=c.add(d),s=u.add(f)}else{const{p:e,f:t}=this.wNAF(i);r=e,s=t}return h.normalizeZ([r,s])[0]}multiplyAndAddUnsafe(e,t,n){const r=h.BASE,s=(e,t)=>t!==xc&&t!==Cc&&e.equals(r)?e.multiply(t):e.multiplyUnsafe(t),i=s(this,t).add(s(e,n));return i.is0()?void 0:i}toAffine(e){const{px:t,py:r,pz:s}=this,i=this.is0();null==e&&(e=i?n.ONE:n.inv(s));const o=n.mul(t,e),a=n.mul(r,e),l=n.mul(s,e);if(i)return{x:n.ZERO,y:n.ZERO};if(!n.eql(l,n.ONE))throw new Error("invZ was invalid");return{x:o,y:a}}isTorsionFree(){const{h:e,isTorsionFree:n}=t;if(e===Cc)return!0;if(n)return n(h,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:e,clearCofactor:n}=t;return e===Cc?this:n?n(h,this):this.multiplyUnsafe(t.h)}toRawBytes(e=!0){return this.assertValidity(),r(h,this,e)}toHex(e=!0){return jl(this.toRawBytes(e))}}h.BASE=new h(t.Gx,t.Gy,n.ONE),h.ZERO=new h(n.ZERO,n.ONE,n.ZERO);const d=t.nBitLength,p=function(e,t){const n=(e,t)=>{const n=t.negate();return e?n:t},r=e=>({windows:Math.ceil(t/e)+1,windowSize:2**(e-1)});return{constTimeNegate:n,unsafeLadder(t,n){let r=e.ZERO,s=t;for(;n>wc;)n&vc&&(r=r.add(s)),s=s.double(),n>>=vc;return r},precomputeWindow(e,t){const{windows:n,windowSize:s}=r(t),i=[];let o=e,a=o;for(let e=0;e<n;e++){a=o,i.push(a);for(let e=1;e<s;e++)a=a.add(o),i.push(a);o=a.double()}return i},wNAF(t,s,i){const{windows:o,windowSize:a}=r(t);let l=e.ZERO,c=e.BASE;const u=BigInt(2**t-1),h=2**t,d=BigInt(t);for(let e=0;e<o;e++){const t=e*a;let r=Number(i&u);i>>=d,r>a&&(r-=h,i+=vc);const o=t,p=t+Math.abs(r)-1,f=e%2!=0,m=r<0;0===r?c=c.add(n(f,s[o])):l=l.add(n(m,s[p]))}return{p:l,f:c}},wNAFCached(e,t,n,r){const s=e._WINDOW_SIZE||1;let i=t.get(e);return i||(i=this.precomputeWindow(e,s),1!==s&&t.set(e,r(i))),this.wNAF(s,i,n)}}}(h,t.endo?Math.ceil(d/2):d);return{CURVE:t,ProjectivePoint:h,normPrivateKeyToScalar:l,weierstrassEquation:i,isWithinCurveOrder:o}}({...t,toBytes(e,t,r){const s=t.toAffine(),i=n.toBytes(s.x),o=Kl;return r?o(Uint8Array.from([t.hasEvenY()?2:3]),i):o(Uint8Array.from([4]),i,n.toBytes(s.y))},fromBytes(e){const t=e.length,r=e[0],o=e.subarray(1);if(t!==s||2!==r&&3!==r){if(t===i&&4===r)return{x:n.fromBytes(o.subarray(0,n.BYTES)),y:n.fromBytes(o.subarray(n.BYTES,2*n.BYTES))};throw new Error(`Point of length ${t} was invalid. Expected ${s} compressed bytes or ${i} uncompressed bytes`)}{const e=Gl(o);if(!(xc<(a=e)&&a<n.ORDER))throw new Error("Point is not on curve");const t=u(e);let s=n.sqrt(t);return 1==(1&r)!=((s&Cc)===Cc)&&(s=n.neg(s)),{x:e,y:s}}var a}}),d=e=>jl(ql(e,t.nByteLength));function p(e){return e>r>>Cc}const f=(e,t,n)=>Gl(e.slice(t,n));class m{constructor(e,t,n){this.r=e,this.s=t,this.recovery=n,this.assertValidity()}static fromCompact(e){const n=t.nByteLength;return e=Jl("compactSignature",e,2*n),new m(f(e,0,n),f(e,n,2*n))}static fromDER(e){const{r:t,s:n}=kc.toSig(Jl("DER",e));return new m(t,n)}assertValidity(){if(!h(this.r))throw new Error("r must be 0 < r < CURVE.n");if(!h(this.s))throw new Error("s must be 0 < s < CURVE.n")}addRecoveryBit(e){return new m(this.r,this.s,e)}recoverPublicKey(e){const{r,s,recovery:i}=this,c=w(Jl("msgHash",e));if(null==i||![0,1,2,3].includes(i))throw new Error("recovery id invalid");const u=2===i||3===i?r+t.n:r;if(u>=n.ORDER)throw new Error("recovery id 2 or 3 invalid");const h=0==(1&i)?"02":"03",p=l.fromHex(h+d(u)),f=a(u),m=o(-c*f),g=o(s*f),y=l.BASE.multiplyAndAddUnsafe(p,m,g);if(!y)throw new Error("point at infinify");return y.assertValidity(),y}hasHighS(){return p(this.s)}normalizeS(){return this.hasHighS()?new m(this.r,o(-this.s),this.recovery):this}toDERRawBytes(){return Hl(this.toDERHex())}toDERHex(){return kc.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return Hl(this.toCompactHex())}toCompactHex(){return d(this.r)+d(this.s)}}const g={isValidPrivateKey(e){try{return c(e),!0}catch(e){return!1}},normPrivateKeyToScalar:c,randomPrivateKey:()=>{const e=gc(t.n);return function(e,t,n=!1){const r=e.length,s=mc(t),i=gc(t);if(r<16||r<i||r>1024)throw new Error(`expected ${i}-1024 bytes of input, got ${r}`);const o=cc(n?Gl(e):zl(e),t-rc)+rc;return n?Ql(o,s):ql(o,s)}(t.randomBytes(e),t.n)},precompute:(e=8,t=l.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)};function y(e){const t=e instanceof Uint8Array,n="string"==typeof e,r=(t||n)&&e.length;return t?r===s||r===i:n?r===2*s||r===2*i:e instanceof l}const b=t.bits2int||function(e){const n=Gl(e),r=8*e.length-t.nBitLength;return r>0?n>>BigInt(r):n},w=t.bits2int_modN||function(e){return o(b(e))},v=Wl(t.nBitLength);function A(e){if("bigint"!=typeof e)throw new Error("bigint expected");if(!(xc<=e&&e<v))throw new Error(`bigint expected < 2^${t.nBitLength}`);return ql(e,t.nByteLength)}const _={lowS:t.lowS,prehash:!1},E={lowS:t.lowS,prehash:!1};return l.BASE._setWindowSize(8),{CURVE:t,getPublicKey:function(e,t=!0){return l.fromPrivateKey(e).toRawBytes(t)},getSharedSecret:function(e,t,n=!0){if(y(e))throw new Error("first arg must be private key");if(!y(t))throw new Error("second arg must be public key");return l.fromHex(t).multiply(c(e)).toRawBytes(n)},sign:function(e,r,s=_){const{seed:i,k2sig:u}=function(e,r,s=_){if(["recovered","canonical"].some((e=>e in s)))throw new Error("sign() legacy options not supported");const{hash:i,randomBytes:u}=t;let{lowS:d,prehash:f,extraEntropy:g}=s;null==d&&(d=!0),e=Jl("msgHash",e),f&&(e=Jl("prehashed msgHash",i(e)));const y=w(e),v=c(r),E=[A(v),A(y)];if(null!=g){const e=!0===g?u(n.BYTES):g;E.push(Jl("extraEntropy",e))}const k=Kl(...E),x=y;return{seed:k,k2sig:function(e){const t=b(e);if(!h(t))return;const n=a(t),r=l.BASE.multiply(t).toAffine(),s=o(r.x);if(s===xc)return;const i=o(n*o(x+s*v));if(i===xc)return;let c=(r.x===s?0:2)|Number(r.y&Cc),u=i;return d&&p(i)&&(u=function(e){return p(e)?o(-e):e}(i),c^=1),new m(s,u,c)}}}(e,r,s),d=t;return Xl(d.hash.outputLen,d.nByteLength,d.hmac)(i,u)},verify:function(e,n,r,s=E){const i=e;if(n=Jl("msgHash",n),r=Jl("publicKey",r),"strict"in s)throw new Error("options.strict was renamed to lowS");const{lowS:c,prehash:u}=s;let h,d;try{if("string"==typeof i||i instanceof Uint8Array)try{h=m.fromDER(i)}catch(e){if(!(e instanceof kc.Err))throw e;h=m.fromCompact(i)}else{if("object"!=typeof i||"bigint"!=typeof i.r||"bigint"!=typeof i.s)throw new Error("PARSE");{const{r:e,s:t}=i;h=new m(e,t)}}d=l.fromHex(r)}catch(e){if("PARSE"===e.message)throw new Error("signature must be Signature instance, Uint8Array or hex string");return!1}if(c&&h.hasHighS())return!1;u&&(n=t.hash(n));const{r:p,s:f}=h,g=w(n),y=a(f),b=o(g*y),v=o(p*y),A=l.BASE.multiplyAndAddUnsafe(d,b,v)?.toAffine();return!!A&&o(A.x)===p},ProjectivePoint:l,Signature:m,utils:g}}function Rc(e){return{hash:e,hmac:(t,...n)=>bc(e,t,function(...e){const t=new Uint8Array(e.reduce(((e,t)=>e+t.length),0));let n=0;return e.forEach((e=>{if(!_r(e))throw new Error("Uint8Array expected");t.set(e,n),n+=e.length})),t}(...n)),randomBytes:Pr}}BigInt(4);const Oc=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),Bc=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),Sc=BigInt(1),Tc=BigInt(2),Ic=(e,t)=>(e+t/Tc)/t;const Fc=function(e,t,n=!1,r={}){if(e<=nc)throw new Error(`Expected Field ORDER > 0, got ${e}`);const{nBitLength:s,nByteLength:i}=fc(e,t);if(i>2048)throw new Error("Field lengths over 2048 bytes are not supported");const o=function(e){if(e%oc===ic){const t=(e+rc)/oc;return function(e,n){const r=e.pow(n,t);if(!e.eql(e.sqr(r),n))throw new Error("Cannot find square root");return r}}if(e%lc===ac){const t=(e-ac)/lc;return function(e,n){const r=e.mul(n,sc),s=e.pow(r,t),i=e.mul(n,s),o=e.mul(e.mul(i,sc),s),a=e.mul(i,e.sub(o,e.ONE));if(!e.eql(e.sqr(a),n))throw new Error("Cannot find square root");return a}}return function(e){const t=(e-rc)/sc;let n,r,s;for(n=e-rc,r=0;n%sc===nc;n/=sc,r++);for(s=sc;s<e&&uc(s,t,e)!==e-rc;s++);if(1===r){const t=(e+rc)/oc;return function(e,n){const r=e.pow(n,t);if(!e.eql(e.sqr(r),n))throw new Error("Cannot find square root");return r}}const i=(n+rc)/sc;return function(e,o){if(e.pow(o,t)===e.neg(e.ONE))throw new Error("Cannot find square root");let a=r,l=e.pow(e.mul(e.ONE,s),n),c=e.pow(o,i),u=e.pow(o,n);for(;!e.eql(u,e.ONE);){if(e.eql(u,e.ZERO))return e.ZERO;let t=1;for(let n=e.sqr(u);t<a&&!e.eql(n,e.ONE);t++)n=e.sqr(n);const n=e.pow(l,rc<<BigInt(a-t-1));l=e.sqr(n),c=e.mul(c,n),u=e.mul(u,l),a=t}return c}}(e)}(e),a=Object.freeze({ORDER:e,BITS:s,BYTES:i,MASK:Wl(s),ZERO:nc,ONE:rc,create:t=>cc(t,e),isValid:t=>{if("bigint"!=typeof t)throw new Error("Invalid field element: expected bigint, got "+typeof t);return nc<=t&&t<e},is0:e=>e===nc,isOdd:e=>(e&rc)===rc,neg:t=>cc(-t,e),eql:(e,t)=>e===t,sqr:t=>cc(t*t,e),add:(t,n)=>cc(t+n,e),sub:(t,n)=>cc(t-n,e),mul:(t,n)=>cc(t*n,e),pow:(e,t)=>function(e,t,n){if(n<nc)throw new Error("Expected power > 0");if(n===nc)return e.ONE;if(n===rc)return t;let r=e.ONE,s=t;for(;n>nc;)n&rc&&(r=e.mul(r,s)),s=e.sqr(s),n>>=rc;return r}(a,e,t),div:(t,n)=>cc(t*dc(n,e),e),sqrN:e=>e*e,addN:(e,t)=>e+t,subN:(e,t)=>e-t,mulN:(e,t)=>e*t,inv:t=>dc(t,e),sqrt:r.sqrt||(e=>o(a,e)),invertBatch:e=>function(e,t){const n=new Array(t.length),r=t.reduce(((t,r,s)=>e.is0(r)?t:(n[s]=t,e.mul(t,r))),e.ONE),s=e.inv(r);return t.reduceRight(((t,r,s)=>e.is0(r)?t:(n[s]=e.mul(t,n[s]),e.mul(t,r))),s),n}(a,e),cmov:(e,t,n)=>n?t:e,toBytes:e=>n?Ql(e,i):ql(e,i),fromBytes:e=>{if(e.length!==i)throw new Error(`Fp.fromBytes: expected ${i}, got ${e.length}`);return n?zl(e):Gl(e)}});return Object.freeze(a)}(Oc,void 0,void 0,{sqrt:function(e){const t=Oc,n=BigInt(3),r=BigInt(6),s=BigInt(11),i=BigInt(22),o=BigInt(23),a=BigInt(44),l=BigInt(88),c=e*e*e%t,u=c*c*e%t,h=hc(u,n,t)*u%t,d=hc(h,n,t)*u%t,p=hc(d,Tc,t)*c%t,f=hc(p,s,t)*p%t,m=hc(f,i,t)*f%t,g=hc(m,a,t)*m%t,y=hc(g,l,t)*g%t,b=hc(y,a,t)*m%t,w=hc(b,n,t)*u%t,v=hc(w,o,t)*f%t,A=hc(v,r,t)*c%t,_=hc(A,Tc,t);if(!Fc.eql(Fc.sqr(_),e))throw new Error("Cannot find square root");return _}}),Lc=function(e,t){const n=t=>Pc({...e,...Rc(t)});return Object.freeze({...n(t),create:n})}({a:BigInt(0),b:BigInt(7),Fp:Fc,n:Bc,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:e=>{const t=Bc,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-Sc*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),s=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=n,o=BigInt("0x100000000000000000000000000000000"),a=Ic(i*e,t),l=Ic(-r*e,t);let c=cc(e-a*n-l*s,t),u=cc(-a*r-l*i,t);const h=c>o,d=u>o;if(h&&(c=t-c),d&&(u=t-u),c>o||u>o)throw new Error("splitScalar: Endomorphism failed, k="+e);return{k1neg:h,k1:c,k2neg:d,k2:u}}}},Ll);BigInt(0),Lc.ProjectivePoint;class Uc{#re;constructor(e){Rn(32===$n(e),"invalid private key","privateKey","[REDACTED]"),this.#re=Mn(e)}get privateKey(){return this.#re}get publicKey(){return Uc.computePublicKey(this.#re)}get compressedPublicKey(){return Uc.computePublicKey(this.#re,!0)}sign(e){Rn(32===$n(e),"invalid digest length","digest",e);const t=Lc.sign(Fn(e),Fn(this.#re),{lowS:!0});return Pl.from({r:er(t.r,32),s:er(t.s,32),v:t.recovery?28:27})}computeSharedSecret(e){const t=Uc.computePublicKey(e);return Mn(Lc.getSharedSecret(Fn(this.#re),In(t),!1))}static computePublicKey(e,t){let n=In(e,"key");if(32===n.length)return Mn(Lc.getPublicKey(n,!!t));if(64===n.length){const e=new Uint8Array(65);e[0]=4,e.set(n,1),n=e}return Mn(Lc.ProjectivePoint.fromHex(n).toRawBytes(t))}static recoverPublicKey(e,t){Rn(32===$n(e),"invalid digest length","digest",e);const n=Pl.from(t);let r=Lc.Signature.fromCompact(Fn(Dn([n.r,n.s])));r=r.addRecoveryBit(n.yParity);const s=r.recoverPublicKey(Fn(e));return Rn(null!=s,"invalid signautre for digest","signature",t),"0x"+s.toHex(!1)}static addPoints(e,t,n){const r=Lc.ProjectivePoint.fromHex(Uc.computePublicKey(e).substring(2)),s=Lc.ProjectivePoint.fromHex(Uc.computePublicKey(t).substring(2));return"0x"+r.add(s).toHex(!!n)}}function Mc(e){let t=e.toString(16);for(;t.length<2;)t="0"+t;return"0x"+t}function Dc(e,t,n){let r=0;for(let s=0;s<n;s++)r=256*r+e[t+s];return r}function $c(e,t,n,r){const s=[];for(;n<t+1+r;){const i=jc(e,n);s.push(i.result),Pn((n+=i.consumed)<=t+1+r,"child data too short","BUFFER_OVERRUN",{buffer:e,length:r,offset:t})}return{consumed:1+r,result:s}}function jc(e,t){Pn(0!==e.length,"data too short","BUFFER_OVERRUN",{buffer:e,length:0,offset:1});const n=t=>{Pn(t<=e.length,"data short segment too short","BUFFER_OVERRUN",{buffer:e,length:e.length,offset:t})};if(e[t]>=248){const r=e[t]-247;n(t+1+r);const s=Dc(e,t+1,r);return n(t+1+r+s),$c(e,t,t+1+r,r+s)}if(e[t]>=192){const r=e[t]-192;return n(t+1+r),$c(e,t,t+1,r)}if(e[t]>=184){const r=e[t]-183;n(t+1+r);const s=Dc(e,t+1,r);return n(t+1+r+s),{consumed:1+r+s,result:Mn(e.slice(t+1+r,t+1+r+s))}}if(e[t]>=128){const r=e[t]-128;return n(t+1+r),{consumed:1+r,result:Mn(e.slice(t+1,t+1+r))}}return{consumed:1,result:Mc(e[t])}}function Vc(e){const t=In(e,"data"),n=jc(t,0);return Rn(n.consumed===t.length,"unexpected junk after rlp payload","data",e),n.result}function Hc(e){const t=[];for(;e;)t.unshift(255&e),e>>=8;return t}function Gc(e){if(Array.isArray(e)){let t=[];if(e.forEach((function(e){t=t.concat(Gc(e))})),t.length<=55)return t.unshift(192+t.length),t;const n=Hc(t.length);return n.unshift(247+n.length),n.concat(t)}const t=Array.prototype.slice.call(In(e,"object"));if(1===t.length&&t[0]<=127)return t;if(t.length<=55)return t.unshift(128+t.length),t;const n=Hc(t.length);return n.unshift(183+n.length),n.concat(t)}const zc="0123456789abcdef";function qc(e){let t="0x";for(const n of Gc(e))t+=zc[n>>4],t+=zc[15&n];return t}const Qc=BigInt(0),Jc=BigInt(2),Kc=BigInt(27),Wc=BigInt(28),Yc=BigInt(35),Zc=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");function Xc(e){return"0x"===e?null:es(e)}function eu(e,t){try{return Gi(e)}catch(n){Rn(!1,n.message,t,e)}}function tu(e,t){return"0x"===e?0:Xn(e,t)}function nu(e,t){if("0x"===e)return Qc;const n=Kn(e,t);return Rn(n<=Zc,"value exceeds uint size",t,n),n}function ru(e,t){const n=Kn(e,"value"),r=tr(n);return Rn(r.length<=32,"value too large",`tx.${t}`,n),r}function su(e){return Gi(e).map((e=>[e.address,e.storageKeys]))}function iu(e,t){Rn(Array.isArray(e),`invalid ${t}`,"value",e);for(let t=0;t<e.length;t++)Rn(Ln(e[t],32),"invalid ${ param } hash",`value[${t}]`,e[t]);return e}function ou(e,t){const n=[ru(e.nonce,"nonce"),ru(e.gasPrice||0,"gasPrice"),ru(e.gasLimit,"gasLimit"),e.to||"0x",ru(e.value,"value"),e.data];let r=Qc;if(e.chainId!=Qc)r=Kn(e.chainId,"tx.chainId"),Rn(!t||null==t.networkV||t.legacyChainId===r,"tx.chainId/sig.v mismatch","sig",t);else if(e.signature){const t=e.signature.legacyChainId;null!=t&&(r=t)}if(!t)return r!==Qc&&(n.push(tr(r)),n.push("0x"),n.push("0x")),qc(n);let s=BigInt(27+t.yParity);return r!==Qc?s=Pl.getChainIdV(r,t.v):BigInt(t.v)!==s&&Rn(!1,"tx.chainId/sig.v mismatch","sig",t),n.push(tr(s)),n.push(tr(t.r)),n.push(tr(t.s)),qc(n)}function au(e,t){let n;try{if(n=tu(t[0],"yParity"),0!==n&&1!==n)throw new Error("bad yParity")}catch(e){Rn(!1,"invalid yParity","yParity",t[0])}const r=Hn(t[1],32),s=Hn(t[2],32),i=Pl.from({r,s,yParity:n});e.signature=i}function lu(e,t){const n=[ru(e.chainId,"chainId"),ru(e.nonce,"nonce"),ru(e.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),ru(e.maxFeePerGas||0,"maxFeePerGas"),ru(e.gasLimit,"gasLimit"),e.to||"0x",ru(e.value,"value"),e.data,su(e.accessList||[])];return t&&(n.push(ru(t.yParity,"yParity")),n.push(tr(t.r)),n.push(tr(t.s))),Dn(["0x02",qc(n)])}function cu(e,t){const n=[ru(e.chainId,"chainId"),ru(e.nonce,"nonce"),ru(e.gasPrice||0,"gasPrice"),ru(e.gasLimit,"gasLimit"),e.to||"0x",ru(e.value,"value"),e.data,su(e.accessList||[])];return t&&(n.push(ru(t.yParity,"recoveryParam")),n.push(tr(t.r)),n.push(tr(t.s))),Dn(["0x01",qc(n)])}function uu(e,t){const n=[ru(e.chainId,"chainId"),ru(e.nonce,"nonce"),ru(e.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),ru(e.maxFeePerGas||0,"maxFeePerGas"),ru(e.gasLimit,"gasLimit"),e.to||io,ru(e.value,"value"),e.data,su(e.accessList||[]),ru(e.maxFeePerBlobGas||0,"maxFeePerBlobGas"),iu(e.blobVersionedHashes||[],"blobVersionedHashes")];return t&&(n.push(ru(t.yParity,"yParity")),n.push(tr(t.r)),n.push(tr(t.s))),Dn(["0x03",qc(n)])}class hu{#se;#ie;#t;#oe;#ae;#le;#ce;#ue;#he;#de;#pe;#fe;#me;#ge;get type(){return this.#se}set type(e){switch(e){case null:this.#se=null;break;case 0:case"legacy":this.#se=0;break;case 1:case"berlin":case"eip-2930":this.#se=1;break;case 2:case"london":case"eip-1559":this.#se=2;break;case 3:case"cancun":case"eip-4844":this.#se=3;break;default:Rn(!1,"unsupported transaction type","type",e)}}get typeName(){switch(this.type){case 0:return"legacy";case 1:return"eip-2930";case 2:return"eip-1559";case 3:return"eip-4844"}return null}get to(){const e=this.#ie;return null==e&&3===this.type?io:e}set to(e){this.#ie=null==e?null:es(e)}get nonce(){return this.#oe}set nonce(e){this.#oe=Xn(e,"value")}get gasLimit(){return this.#ae}set gasLimit(e){this.#ae=Kn(e)}get gasPrice(){const e=this.#le;return null!=e||0!==this.type&&1!==this.type?e:Qc}set gasPrice(e){this.#le=null==e?null:Kn(e,"gasPrice")}get maxPriorityFeePerGas(){const e=this.#ce;return null==e?2===this.type||3===this.type?Qc:null:e}set maxPriorityFeePerGas(e){this.#ce=null==e?null:Kn(e,"maxPriorityFeePerGas")}get maxFeePerGas(){const e=this.#ue;return null==e?2===this.type||3===this.type?Qc:null:e}set maxFeePerGas(e){this.#ue=null==e?null:Kn(e,"maxFeePerGas")}get data(){return this.#t}set data(e){this.#t=Mn(e)}get value(){return this.#he}set value(e){this.#he=Kn(e,"value")}get chainId(){return this.#de}set chainId(e){this.#de=Kn(e)}get signature(){return this.#pe||null}set signature(e){this.#pe=null==e?null:Pl.from(e)}get accessList(){const e=this.#fe||null;return null==e?1===this.type||2===this.type||3===this.type?[]:null:e}set accessList(e){this.#fe=null==e?null:Gi(e)}get maxFeePerBlobGas(){const e=this.#me;return null==e&&3===this.type?Qc:e}set maxFeePerBlobGas(e){this.#me=null==e?null:Kn(e,"maxFeePerBlobGas")}get blobVersionedHashes(){let e=this.#ge;return null==e&&3===this.type?[]:e}set blobVersionedHashes(e){if(null!=e){Rn(Array.isArray(e),"blobVersionedHashes must be an Array","value",e),e=e.slice();for(let t=0;t<e.length;t++)Rn(Ln(e[t],32),"invalid blobVersionedHash",`value[${t}]`,e[t])}this.#ge=e}constructor(){this.#se=null,this.#ie=null,this.#oe=0,this.#ae=Qc,this.#le=null,this.#ce=null,this.#ue=null,this.#t="0x",this.#he=Qc,this.#de=Qc,this.#pe=null,this.#fe=null,this.#me=null,this.#ge=null}get hash(){return null==this.signature?null:Qr(this.serialized)}get unsignedHash(){return Qr(this.unsignedSerialized)}get from(){return null==this.signature?null:(e=this.unsignedHash,t=this.signature,function(e){let t;return t="string"==typeof e?Uc.computePublicKey(e,!1):e.publicKey,es(Qr("0x"+t.substring(4)).substring(26))}(Uc.recoverPublicKey(e,t)));var e,t}get fromPublicKey(){return null==this.signature?null:Uc.recoverPublicKey(this.unsignedHash,this.signature)}isSigned(){return null!=this.signature}get serialized(){switch(Pn(null!=this.signature,"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized","UNSUPPORTED_OPERATION",{operation:".serialized"}),this.inferType()){case 0:return ou(this,this.signature);case 1:return cu(this,this.signature);case 2:return lu(this,this.signature);case 3:return uu(this,this.signature)}Pn(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:".serialized"})}get unsignedSerialized(){switch(this.inferType()){case 0:return ou(this);case 1:return cu(this);case 2:return lu(this);case 3:return uu(this)}Pn(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:".unsignedSerialized"})}inferType(){const e=this.inferTypes();return e.indexOf(2)>=0?2:e.pop()}inferTypes(){const e=null!=this.gasPrice,t=null!=this.maxFeePerGas||null!=this.maxPriorityFeePerGas,n=null!=this.accessList,r=null!=this.#me||this.#ge;null!=this.maxFeePerGas&&null!=this.maxPriorityFeePerGas&&Pn(this.maxFeePerGas>=this.maxPriorityFeePerGas,"priorityFee cannot be more than maxFee","BAD_DATA",{value:this}),Pn(!t||0!==this.type&&1!==this.type,"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas","BAD_DATA",{value:this}),Pn(0!==this.type||!n,"legacy transaction cannot have accessList","BAD_DATA",{value:this});const s=[];return null!=this.type?s.push(this.type):t?s.push(2):e?(s.push(1),n||s.push(0)):n?(s.push(1),s.push(2)):(r&&this.to||(s.push(0),s.push(1),s.push(2)),s.push(3)),s.sort(),s}isLegacy(){return 0===this.type}isBerlin(){return 1===this.type}isLondon(){return 2===this.type}isCancun(){return 3===this.type}clone(){return hu.from(this)}toJSON(){const e=e=>null==e?null:e.toString();return{type:this.type,to:this.to,data:this.data,nonce:this.nonce,gasLimit:e(this.gasLimit),gasPrice:e(this.gasPrice),maxPriorityFeePerGas:e(this.maxPriorityFeePerGas),maxFeePerGas:e(this.maxFeePerGas),value:e(this.value),chainId:e(this.chainId),sig:this.signature?this.signature.toJSON():null,accessList:this.accessList}}static from(e){if(null==e)return new hu;if("string"==typeof e){const t=In(e);if(t[0]>=127)return hu.from(function(e){const t=Vc(e);Rn(Array.isArray(t)&&(9===t.length||6===t.length),"invalid field count for legacy transaction","data",e);const n={type:0,nonce:tu(t[0],"nonce"),gasPrice:nu(t[1],"gasPrice"),gasLimit:nu(t[2],"gasLimit"),to:Xc(t[3]),value:nu(t[4],"value"),data:Mn(t[5]),chainId:Qc};if(6===t.length)return n;const r=nu(t[6],"v"),s=nu(t[7],"r"),i=nu(t[8],"s");if(s===Qc&&i===Qc)n.chainId=r;else{let s=(r-Yc)/Jc;s<Qc&&(s=Qc),n.chainId=s,Rn(s!==Qc||r===Kc||r===Wc,"non-canonical legacy v","v",t[6]),n.signature=Pl.from({r:Hn(t[7],32),s:Hn(t[8],32),v:r}),n.hash=Qr(e)}return n}(t));switch(t[0]){case 1:return hu.from(function(e){const t=Vc(In(e).slice(1));Rn(Array.isArray(t)&&(8===t.length||11===t.length),"invalid field count for transaction type: 1","data",Mn(e));const n={type:1,chainId:nu(t[0],"chainId"),nonce:tu(t[1],"nonce"),gasPrice:nu(t[2],"gasPrice"),gasLimit:nu(t[3],"gasLimit"),to:Xc(t[4]),value:nu(t[5],"value"),data:Mn(t[6]),accessList:eu(t[7],"accessList")};return 8===t.length||(n.hash=Qr(e),au(n,t.slice(8))),n}(t));case 2:return hu.from(function(e){const t=Vc(In(e).slice(1));Rn(Array.isArray(t)&&(9===t.length||12===t.length),"invalid field count for transaction type: 2","data",Mn(e));const n={type:2,chainId:nu(t[0],"chainId"),nonce:tu(t[1],"nonce"),maxPriorityFeePerGas:nu(t[2],"maxPriorityFeePerGas"),maxFeePerGas:nu(t[3],"maxFeePerGas"),gasPrice:null,gasLimit:nu(t[4],"gasLimit"),to:Xc(t[5]),value:nu(t[6],"value"),data:Mn(t[7]),accessList:eu(t[8],"accessList")};return 9===t.length||(n.hash=Qr(e),au(n,t.slice(9))),n}(t));case 3:return hu.from(function(e){const t=Vc(In(e).slice(1));Rn(Array.isArray(t)&&(11===t.length||14===t.length),"invalid field count for transaction type: 3","data",Mn(e));const n={type:3,chainId:nu(t[0],"chainId"),nonce:tu(t[1],"nonce"),maxPriorityFeePerGas:nu(t[2],"maxPriorityFeePerGas"),maxFeePerGas:nu(t[3],"maxFeePerGas"),gasPrice:null,gasLimit:nu(t[4],"gasLimit"),to:Xc(t[5]),value:nu(t[6],"value"),data:Mn(t[7]),accessList:eu(t[8],"accessList"),maxFeePerBlobGas:nu(t[9],"maxFeePerBlobGas"),blobVersionedHashes:t[10]};Rn(null!=n.to,"invalid address for transaction type: 3","data",e),Rn(Array.isArray(n.blobVersionedHashes),"invalid blobVersionedHashes: must be an array","data",e);for(let t=0;t<n.blobVersionedHashes.length;t++)Rn(Ln(n.blobVersionedHashes[t],32),`invalid blobVersionedHash at index ${t}: must be length 32`,"data",e);return 11===t.length||(n.hash=Qr(e),au(n,t.slice(11))),n}(t))}Pn(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:"from"})}const t=new hu;return null!=e.type&&(t.type=e.type),null!=e.to&&(t.to=e.to),null!=e.nonce&&(t.nonce=e.nonce),null!=e.gasLimit&&(t.gasLimit=e.gasLimit),null!=e.gasPrice&&(t.gasPrice=e.gasPrice),null!=e.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas),null!=e.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null!=e.maxFeePerBlobGas&&(t.maxFeePerBlobGas=e.maxFeePerBlobGas),null!=e.data&&(t.data=e.data),null!=e.value&&(t.value=e.value),null!=e.chainId&&(t.chainId=e.chainId),null!=e.signature&&(t.signature=Pl.from(e.signature)),null!=e.accessList&&(t.accessList=e.accessList),null!=e.blobVersionedHashes&&(t.blobVersionedHashes=e.blobVersionedHashes),null!=e.hash&&(Rn(t.isSigned(),"unsigned transaction cannot define hash","tx",e),Rn(t.hash===e.hash,"hash mismatch","tx",e)),null!=e.from&&(Rn(t.isSigned(),"unsigned transaction cannot define from","tx",e),Rn(t.from.toLowerCase()===(e.from||"").toLowerCase(),"from mismatch","tx",e)),t}}const du="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";BigInt(0);const pu=BigInt(58);function fu(e){return e.match(/^ipfs:\/\/ipfs\//i)?e=e.substring(12):e.match(/^ipfs:\/\//i)?e=e.substring(7):Rn(!1,"unsupported IPFS format","link",e),`https://gateway.ipfs.io/ipfs/${e}`}class mu{name;constructor(e){En(this,{name:e})}connect(e){return this}supportsCoinType(e){return!1}async encodeAddress(e,t){throw new Error("unsupported coin")}async decodeAddress(e,t){throw new Error("unsupported coin")}}const gu=new RegExp("^(ipfs)://(.*)$","i"),yu=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),gu,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")];class bu{provider;address;name;#ye;#be;constructor(e,t,n){En(this,{provider:e,address:t,name:n}),this.#ye=null,this.#be=new Xo(t,["function supportsInterface(bytes4) view returns (bool)","function resolve(bytes, bytes) view returns (bytes)","function addr(bytes32) view returns (address)","function addr(bytes32, uint) view returns (bytes)","function text(bytes32, string) view returns (string)","function contenthash(bytes32) view returns (bytes)"],e)}async supportsWildcard(){return null==this.#ye&&(this.#ye=(async()=>{try{return await this.#be.supportsInterface("0x9061b923")}catch(e){if(xn(e,"CALL_EXCEPTION"))return!1;throw this.#ye=null,e}})()),await this.#ye}async#we(e,t){t=(t||[]).slice();const n=this.#be.interface;t.unshift(yl(this.name));let r=null;await this.supportsWildcard()&&(r=n.getFunction(e),Pn(r,"missing fragment","UNKNOWN_ERROR",{info:{funcName:e}}),t=[bl(this.name,255),n.encodeFunctionData(r,t)],e="resolve(bytes,bytes)"),t.push({enableCcipRead:!0});try{const s=await this.#be[e](...t);return r?n.decodeFunctionResult(r,s)[0]:s}catch(e){if(!xn(e,"CALL_EXCEPTION"))throw e}return null}async getAddress(e){if(null==e&&(e=60),60===e)try{const e=await this.#we("addr(bytes32)");return null==e||e===io?null:e}catch(e){if(xn(e,"CALL_EXCEPTION"))return null;throw e}if(e>=0&&e<2147483648){let t=e+2147483648;const n=await this.#we("addr(bytes32,uint)",[t]);if(Ln(n,20))return es(n)}let t=null;for(const n of this.provider.plugins)if(n instanceof mu&&n.supportsCoinType(e)){t=n;break}if(null==t)return null;const n=await this.#we("addr(bytes32,uint)",[e]);if(null==n||"0x"===n)return null;const r=await t.decodeAddress(e,n);if(null!=r)return r;Pn(!1,"invalid coin data","UNSUPPORTED_OPERATION",{operation:`getAddress(${e})`,info:{coinType:e,data:n}})}async getText(e){const t=await this.#we("text(bytes32,string)",[e]);return null==t||"0x"===t?null:t}async getContentHash(){const e=await this.#we("contenthash(bytes32)");if(null==e||"0x"===e)return null;const t=e.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(t){const e="e3010170"===t[1]?"ipfs":"ipns",n=parseInt(t[4],16);if(t[5].length===2*n)return`${e}://${function(e){const t=In(e);let n=Zn(t),r="";for(;n;)r=du[Number(n%pu)]+r,n/=pu;for(let e=0;e<t.length&&!t[e];e++)r=du[0]+r;return r}("0x"+t[2])}`}const n=e.match(/^0xe40101fa011b20([0-9a-f]*)$/);if(n&&64===n[1].length)return`bzz://${n[1]}`;Pn(!1,"invalid or unsupported content hash data","UNSUPPORTED_OPERATION",{operation:"getContentHash()",info:{data:e}})}async getAvatar(){return(await this._getAvatar()).url}async _getAvatar(){const e=[{type:"name",value:this.name}];try{const t=await this.getText("avatar");if(null==t)return e.push({type:"!avatar",value:""}),{url:null,linkage:e};e.push({type:"avatar",value:t});for(let n=0;n<yu.length;n++){const r=t.match(yu[n]);if(null==r)continue;const s=r[1].toLowerCase();switch(s){case"https":case"data":return e.push({type:"url",value:t}),{linkage:e,url:t};case"ipfs":{const n=fu(t);return e.push({type:"ipfs",value:t}),e.push({type:"url",value:n}),{linkage:e,url:n}}case"erc721":case"erc1155":{const n="erc721"===s?"tokenURI(uint256)":"uri(uint256)";e.push({type:s,value:t});const i=await this.getAddress();if(null==i)return e.push({type:"!owner",value:""}),{url:null,linkage:e};const o=(r[2]||"").split("/");if(2!==o.length)return e.push({type:`!${s}caip`,value:r[2]||""}),{url:null,linkage:e};const a=o[1],l=new Xo(o[0],["function tokenURI(uint) view returns (string)","function ownerOf(uint) view returns (address)","function uri(uint) view returns (string)","function balanceOf(address, uint256) view returns (uint)"],this.provider);if("erc721"===s){const t=await l.ownerOf(a);if(i!==t)return e.push({type:"!owner",value:t}),{url:null,linkage:e};e.push({type:"owner",value:t})}else if("erc1155"===s){const t=await l.balanceOf(i,a);if(!t)return e.push({type:"!balance",value:"0"}),{url:null,linkage:e};e.push({type:"balance",value:t.toString()})}let c=await l[n](a);if(null==c||"0x"===c)return e.push({type:"!metadata-url",value:""}),{url:null,linkage:e};e.push({type:"metadata-url-base",value:c}),"erc1155"===s&&(c=c.replace("{id}",er(a,32).substring(2)),e.push({type:"metadata-url-expanded",value:c})),c.match(/^ipfs:/i)&&(c=fu(c)),e.push({type:"metadata-url",value:c});let u={};const h=await new no(c).send();h.assertOk();try{u=h.bodyJson}catch(t){try{e.push({type:"!metadata",value:h.bodyText})}catch(t){const n=h.body;return n&&e.push({type:"!metadata",value:Mn(n)}),{url:null,linkage:e}}return{url:null,linkage:e}}if(!u)return e.push({type:"!metadata",value:""}),{url:null,linkage:e};e.push({type:"metadata",value:JSON.stringify(u)});let d=u.image;if("string"!=typeof d)return e.push({type:"!imageUrl",value:""}),{url:null,linkage:e};if(d.match(/^(https:\/\/|data:)/i));else{if(null==d.match(gu))return e.push({type:"!imageUrl-ipfs",value:d}),{url:null,linkage:e};e.push({type:"imageUrl-ipfs",value:d}),d=fu(d)}return e.push({type:"url",value:d}),{linkage:e,url:d}}}}}catch(e){}return{linkage:e,url:null}}static async getEnsAddress(e){const t=await e.getNetwork(),n=t.getPlugin("org.ethers.plugins.network.Ens");return Pn(n,"network does not support ENS","UNSUPPORTED_OPERATION",{operation:"getEnsAddress",info:{network:t}}),n.address}static async#ve(e,t){const n=await bu.getEnsAddress(e);try{const r=new Xo(n,["function resolver(bytes32) view returns (address)"],e),s=await r.resolver(yl(t),{enableCcipRead:!0});return s===io?null:s}catch(e){throw e}return null}static async fromName(e,t){let n=t;for(;;){if(""===n||"."===n)return null;if("eth"!==t&&"eth"===n)return null;const r=await bu.#ve(e,n);if(null!=r){const s=new bu(e,r,t);return n===t||await s.supportsWildcard()?s:null}n=n.split(".").slice(1).join(".")}}}const wu=BigInt(0);function vu(e,t){return function(n){return null==n?t:e(n)}}function Au(e,t){return n=>{if(t&&null==n)return null;if(!Array.isArray(n))throw new Error("not an array");return n.map((t=>e(t)))}}function _u(e,t){return n=>{const r={};for(const s in e){let i=s;if(t&&s in t&&!(i in n))for(const e of t[s])if(e in n){i=e;break}try{const t=e[s](n[i]);void 0!==t&&(r[s]=t)}catch(e){Pn(!1,`invalid value for value.${s} (${e instanceof Error?e.message:"not-an-error"})`,"BAD_DATA",{value:n})}}return r}}function Eu(e){return Rn(Ln(e,!0),"invalid data","value",e),e}function ku(e){return Rn(Ln(e,32),"invalid hash","value",e),e}const xu=_u({address:es,blockHash:ku,blockNumber:Xn,data:Eu,index:Xn,removed:vu((function(e){switch(e){case!0:case"true":return!0;case!1:case"false":return!1}Rn(!1,`invalid boolean; ${JSON.stringify(e)}`,"value",e)}),!1),topics:Au(ku),transactionHash:ku,transactionIndex:Xn},{index:["logIndex"]}),Cu=_u({hash:vu(ku),parentHash:ku,parentBeaconBlockRoot:vu(ku,null),number:Xn,timestamp:Xn,nonce:vu(Eu),difficulty:Kn,gasLimit:Kn,gasUsed:Kn,stateRoot:vu(ku,null),receiptsRoot:vu(ku,null),blobGasUsed:vu(Kn,null),excessBlobGas:vu(Kn,null),miner:vu(es),extraData:Eu,baseFeePerGas:vu(Kn)}),Nu=_u({transactionIndex:Xn,blockNumber:Xn,transactionHash:ku,address:es,topics:Au(ku),data:Eu,index:Xn,blockHash:ku},{index:["logIndex"]}),Pu=_u({to:vu(es,null),from:vu(es,null),contractAddress:vu(es,null),index:Xn,root:vu(Mn),gasUsed:Kn,blobGasUsed:vu(Kn,null),logsBloom:vu(Eu),blockHash:ku,hash:ku,logs:Au((function(e){return Nu(e)})),blockNumber:Xn,cumulativeGasUsed:Kn,effectiveGasPrice:vu(Kn),blobGasPrice:vu(Kn,null),status:vu(Xn),type:vu(Xn,0)},{effectiveGasPrice:["gasPrice"],hash:["transactionHash"],index:["transactionIndex"]});function Ru(e){e.to&&Kn(e.to)===wu&&(e.to="0x0000000000000000000000000000000000000000");const t=_u({hash:ku,index:vu(Xn,void 0),type:e=>"0x"===e||null==e?0:Xn(e),accessList:vu(Gi,null),blobVersionedHashes:vu(Au(ku,!0),null),blockHash:vu(ku,null),blockNumber:vu(Xn,null),transactionIndex:vu(Xn,null),from:es,gasPrice:vu(Kn),maxPriorityFeePerGas:vu(Kn),maxFeePerGas:vu(Kn),maxFeePerBlobGas:vu(Kn,null),gasLimit:Kn,to:vu(es,null),value:Kn,nonce:Xn,data:Eu,creates:vu(es,null),chainId:vu(Kn,null)},{data:["input"],gasLimit:["gas"],index:["transactionIndex"]})(e);if(null==t.to&&null==t.creates&&(t.creates=function(e){const t=es(e.from);let n=Kn(e.nonce,"tx.nonce").toString(16);return n="0"===n?"0x":n.length%2?"0x0"+n:"0x"+n,es(jn(Qr(qc([t,n])),12))}(t)),1!==e.type&&2!==e.type||null!=e.accessList||(t.accessList=[]),e.signature?t.signature=Pl.from(e.signature):t.signature=Pl.from(e),null==t.chainId){const e=t.signature.legacyChainId;null!=e&&(t.chainId=e)}return t.blockHash&&Kn(t.blockHash)===wu&&(t.blockHash=null),t}class Ou{name;constructor(e){En(this,{name:e})}clone(){return new Ou(this.name)}}class Bu extends Ou{effectiveBlock;txBase;txCreate;txDataZero;txDataNonzero;txAccessListStorageKey;txAccessListAddress;constructor(e,t){null==e&&(e=0),super(`org.ethers.network.plugins.GasCost#${e||0}`);const n={effectiveBlock:e};function r(e,r){let s=(t||{})[e];null==s&&(s=r),Rn("number"==typeof s,`invalud value for ${e}`,"costs",t),n[e]=s}r("txBase",21e3),r("txCreate",32e3),r("txDataZero",4),r("txDataNonzero",16),r("txAccessListStorageKey",1900),r("txAccessListAddress",2400),En(this,n)}clone(){return new Bu(this.effectiveBlock,this)}}class Su extends Ou{address;targetNetwork;constructor(e,t){super("org.ethers.plugins.network.Ens"),En(this,{address:e||"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",targetNetwork:null==t?1:t})}clone(){return new Su(this.address,this.targetNetwork)}}class Tu extends Ou{#C;#Ae;get url(){return this.#C}get processFunc(){return this.#Ae}constructor(e,t){super("org.ethers.plugins.network.FetchUrlFeeDataPlugin"),this.#C=e,this.#Ae=t}clone(){return this}}const Iu=new Map;class Fu{#_e;#de;#Ee;constructor(e,t){this.#_e=e,this.#de=Kn(t),this.#Ee=new Map}toJSON(){return{name:this.name,chainId:String(this.chainId)}}get name(){return this.#_e}set name(e){this.#_e=e}get chainId(){return this.#de}set chainId(e){this.#de=Kn(e,"chainId")}matches(e){if(null==e)return!1;if("string"==typeof e){try{return this.chainId===Kn(e)}catch(e){}return this.name===e}if("number"==typeof e||"bigint"==typeof e){try{return this.chainId===Kn(e)}catch(e){}return!1}if("object"==typeof e){if(null!=e.chainId){try{return this.chainId===Kn(e.chainId)}catch(e){}return!1}return null!=e.name&&this.name===e.name}return!1}get plugins(){return Array.from(this.#Ee.values())}attachPlugin(e){if(this.#Ee.get(e.name))throw new Error(`cannot replace existing plugin: ${e.name} `);return this.#Ee.set(e.name,e.clone()),this}getPlugin(e){return this.#Ee.get(e)||null}getPlugins(e){return this.plugins.filter((t=>t.name.split("#")[0]===e))}clone(){const e=new Fu(this.name,this.chainId);return this.plugins.forEach((t=>{e.attachPlugin(t.clone())})),e}computeIntrinsicGas(e){const t=this.getPlugin("org.ethers.plugins.network.GasCost")||new Bu;let n=t.txBase;if(null==e.to&&(n+=t.txCreate),e.data)for(let r=2;r<e.data.length;r+=2)"00"===e.data.substring(r,r+2)?n+=t.txDataZero:n+=t.txDataNonzero;if(e.accessList){const r=Gi(e.accessList);for(const e in r)n+=t.txAccessListAddress+t.txAccessListStorageKey*r[e].storageKeys.length}return n}static from(e){if(function(){function e(e,t,n){const r=function(){const r=new Fu(e,t);return null!=n.ensNetwork&&r.attachPlugin(new Su(null,n.ensNetwork)),r.attachPlugin(new Bu),(n.plugins||[]).forEach((e=>{r.attachPlugin(e)})),r};Fu.register(e,r),Fu.register(t,r),n.altNames&&n.altNames.forEach((e=>{Fu.register(e,r)}))}Mu||(Mu=!0,e("mainnet",1,{ensNetwork:1,altNames:["homestead"]}),e("ropsten",3,{ensNetwork:3}),e("rinkeby",4,{ensNetwork:4}),e("goerli",5,{ensNetwork:5}),e("kovan",42,{ensNetwork:42}),e("sepolia",11155111,{ensNetwork:11155111}),e("holesky",17e3,{ensNetwork:17e3}),e("classic",61,{}),e("classicKotti",6,{}),e("arbitrum",42161,{ensNetwork:1}),e("arbitrum-goerli",421613,{}),e("arbitrum-sepolia",421614,{}),e("base",8453,{ensNetwork:1}),e("base-goerli",84531,{}),e("base-sepolia",84532,{}),e("bnb",56,{ensNetwork:1}),e("bnbt",97,{}),e("linea",59144,{ensNetwork:1}),e("linea-goerli",59140,{}),e("matic",137,{ensNetwork:1,plugins:[Uu("https://gasstation.polygon.technology/v2")]}),e("matic-mumbai",80001,{altNames:["maticMumbai","maticmum"],plugins:[Uu("https://gasstation-testnet.polygon.technology/v2")]}),e("optimism",10,{ensNetwork:1,plugins:[]}),e("optimism-goerli",420,{}),e("optimism-sepolia",11155420,{}),e("xdai",100,{ensNetwork:1}))}(),null==e)return Fu.from("mainnet");if("number"==typeof e&&(e=BigInt(e)),"string"==typeof e||"bigint"==typeof e){const t=Iu.get(e);if(t)return t();if("bigint"==typeof e)return new Fu("unknown",e);Rn(!1,"unknown network","network",e)}if("function"==typeof e.clone)return e.clone();if("object"==typeof e){Rn("string"==typeof e.name&&"number"==typeof e.chainId,"invalid network object name or chainId","network",e);const t=new Fu(e.name,e.chainId);return(e.ensAddress||null!=e.ensNetwork)&&t.attachPlugin(new Su(e.ensAddress,e.ensNetwork)),t}Rn(!1,"invalid network","network",e)}static register(e,t){"number"==typeof e&&(e=BigInt(e));const n=Iu.get(e);n&&Rn(!1,`conflicting network for ${JSON.stringify(n.name)}`,"nameOrChainId",e),Iu.set(e,t)}}function Lu(e,t){const n=String(e);if(!n.match(/^[0-9.]+$/))throw new Error(`invalid gwei value: ${e}`);const r=n.split(".");if(1===r.length&&r.push(""),2!==r.length)throw new Error(`invalid gwei value: ${e}`);for(;r[1].length<t;)r[1]+="0";if(r[1].length>9){let e=BigInt(r[1].substring(0,9));r[1].substring(9).match(/^0+$/)||e++,r[1]=e.toString()}return BigInt(r[0]+r[1])}function Uu(e){return new Tu(e,(async(e,t,n)=>{let r;n.setHeader("User-Agent","ethers");try{const[t,s]=await Promise.all([n.send(),e()]);r=t;const i=r.bodyJson.standard;return{gasPrice:s.gasPrice,maxFeePerGas:Lu(i.maxFee,9),maxPriorityFeePerGas:Lu(i.maxPriorityFee,9)}}catch(e){Pn(!1,`error encountered with polygon gas station (${JSON.stringify(n.url)})`,"SERVER_ERROR",{request:n,response:r,error:e})}}))}let Mu=!1;function Du(e){return JSON.parse(JSON.stringify(e))}class $u{#ke;#xe;#Ce;#Ne;constructor(e){this.#ke=e,this.#xe=null,this.#Ce=4e3,this.#Ne=-2}get pollingInterval(){return this.#Ce}set pollingInterval(e){this.#Ce=e}async#Pe(){try{const e=await this.#ke.getBlockNumber();if(-2===this.#Ne)return void(this.#Ne=e);if(e!==this.#Ne){for(let t=this.#Ne+1;t<=e;t++){if(null==this.#xe)return;await this.#ke.emit("block",t)}this.#Ne=e}}catch(e){}null!=this.#xe&&(this.#xe=this.#ke._setTimeout(this.#Pe.bind(this),this.#Ce))}start(){this.#xe||(this.#xe=this.#ke._setTimeout(this.#Pe.bind(this),this.#Ce),this.#Pe())}stop(){this.#xe&&(this.#ke._clearTimeout(this.#xe),this.#xe=null)}pause(e){this.stop(),e&&(this.#Ne=-2)}resume(){this.start()}}class ju{#ke;#Pe;#Re;constructor(e){this.#ke=e,this.#Re=!1,this.#Pe=e=>{this._poll(e,this.#ke)}}async _poll(e,t){throw new Error("sub-classes must override this")}start(){this.#Re||(this.#Re=!0,this.#Pe(-2),this.#ke.on("block",this.#Pe))}stop(){this.#Re&&(this.#Re=!1,this.#ke.off("block",this.#Pe))}pause(e){this.stop()}resume(){this.start()}}class Vu extends ju{#Oe;#Be;constructor(e,t){super(e),this.#Oe=t,this.#Be=-2}pause(e){e&&(this.#Be=-2),super.pause(e)}async _poll(e,t){const n=await t.getBlock(this.#Oe);null!=n&&(-2===this.#Be?this.#Be=n.number:n.number>this.#Be&&(t.emit(this.#Oe,n.number),this.#Be=n.number))}}class Hu extends ju{#Z;constructor(e,t){super(e),this.#Z=Du(t)}async _poll(e,t){throw new Error("@TODO")}}class Gu extends ju{#Se;constructor(e,t){super(e),this.#Se=t}async _poll(e,t){const n=await t.getTransactionReceipt(this.#Se);n&&t.emit(this.#Se,n)}}class zu{#ke;#Z;#xe;#Re;#Ne;constructor(e,t){this.#ke=e,this.#Z=Du(t),this.#xe=this.#Pe.bind(this),this.#Re=!1,this.#Ne=-2}async#Pe(e){if(-2===this.#Ne)return;const t=Du(this.#Z);t.fromBlock=this.#Ne+1,t.toBlock=e;const n=await this.#ke.getLogs(t);if(0!==n.length)for(const e of n)this.#ke.emit(this.#Z,e),this.#Ne=e.blockNumber;else this.#Ne<e-60&&(this.#Ne=e-60)}start(){this.#Re||(this.#Re=!0,-2===this.#Ne&&this.#ke.getBlockNumber().then((e=>{this.#Ne=e})),this.#ke.on("block",this.#xe))}stop(){this.#Re&&(this.#Re=!1,this.#ke.off("block",this.#xe))}pause(e){this.stop(),e&&(this.#Ne=-2)}resume(){this.start()}}const qu=BigInt(2);function Qu(e){return e&&"function"==typeof e.then}function Ju(e,t){return e+":"+JSON.stringify(t,((e,t)=>{if(null==t)return"null";if("bigint"==typeof t)return`bigint:${t.toString()}`;if("string"==typeof t)return t.toLowerCase();if("object"==typeof t&&!Array.isArray(t)){const e=Object.keys(t);return e.sort(),e.reduce(((e,n)=>(e[n]=t[n],e)),{})}return t}))}class Ku{name;constructor(e){En(this,{name:e})}start(){}stop(){}pause(e){}resume(){}}function Wu(e){return(e=Array.from(new Set(e).values())).sort(),e}async function Yu(e,t){if(null==e)throw new Error("invalid event");if(Array.isArray(e)&&(e={topics:e}),"string"==typeof e)switch(e){case"block":case"debug":case"error":case"finalized":case"network":case"pending":case"safe":return{type:e,tag:e}}if(Ln(e,32)){const t=e.toLowerCase();return{type:"transaction",tag:Ju("tx",{hash:t}),hash:t}}if(e.orphan){const t=e;return{type:"orphan",tag:Ju("orphan",t),filter:(n=t,JSON.parse(JSON.stringify(n)))}}var n;if(e.address||e.topics){const n=e,r={topics:(n.topics||[]).map((e=>null==e?null:Array.isArray(e)?Wu(e.map((e=>e.toLowerCase()))):e.toLowerCase()))};if(n.address){const e=[],s=[],i=n=>{Ln(n)?e.push(n):s.push((async()=>{e.push(await Ni(n,t))})())};Array.isArray(n.address)?n.address.forEach(i):i(n.address),s.length&&await Promise.all(s),r.address=Wu(e.map((e=>e.toLowerCase())))}return{filter:r,tag:Ju("event",r),type:"event"}}Rn(!1,"unknown ProviderEvent","event",e)}function Zu(){return(new Date).getTime()}const Xu={cacheTimeout:250,pollingInterval:4e3};class eh{#Te;#Ee;#Ie;#Fe;#Le;#Ue;#Me;#De;#$e;#je;#Ve;#u;constructor(e,t){if(this.#u=Object.assign({},Xu,t||{}),"any"===e)this.#Ue=!0,this.#Le=null;else if(e){const t=Fu.from(e);this.#Ue=!1,this.#Le=Promise.resolve(t),setTimeout((()=>{this.emit("network",t,null)}),0)}else this.#Ue=!1,this.#Le=null;this.#De=-1,this.#Me=new Map,this.#Te=new Map,this.#Ee=new Map,this.#Ie=null,this.#Fe=!1,this.#$e=1,this.#je=new Map,this.#Ve=!1}get pollingInterval(){return this.#u.pollingInterval}get provider(){return this}get plugins(){return Array.from(this.#Ee.values())}attachPlugin(e){if(this.#Ee.get(e.name))throw new Error(`cannot replace existing plugin: ${e.name} `);return this.#Ee.set(e.name,e.connect(this)),this}getPlugin(e){return this.#Ee.get(e)||null}get disableCcipRead(){return this.#Ve}set disableCcipRead(e){this.#Ve=!!e}async#He(e){const t=this.#u.cacheTimeout;if(t<0)return await this._perform(e);const n=Ju(e.method,e);let r=this.#Me.get(n);return r||(r=this._perform(e),this.#Me.set(n,r),setTimeout((()=>{this.#Me.get(n)===r&&this.#Me.delete(n)}),t)),await r}async ccipReadFetch(e,t,n){if(this.disableCcipRead||0===n.length||null==e.to)return null;const r=e.to.toLowerCase(),s=t.toLowerCase(),i=[];for(let t=0;t<n.length;t++){const o=n[t],a=o.replace("{sender}",r).replace("{data}",s),l=new no(a);-1===o.indexOf("{data}")&&(l.body={data:s,sender:r}),this.emit("debug",{action:"sendCcipReadFetchRequest",request:l,index:t,urls:n});let c="unknown error";const u=await l.send();try{const e=u.bodyJson;if(e.data)return this.emit("debug",{action:"receiveCcipReadFetchResult",request:l,result:e}),e.data;e.message&&(c=e.message),this.emit("debug",{action:"receiveCcipReadFetchError",request:l,result:e})}catch(e){}Pn(u.statusCode<400||u.statusCode>=500,`response not found during CCIP fetch: ${c}`,"OFFCHAIN_FAULT",{reason:"404_MISSING_RESOURCE",transaction:e,info:{url:o,errorMessage:c}}),i.push(c)}Pn(!1,`error encountered during CCIP fetch: ${i.map((e=>JSON.stringify(e))).join(", ")}`,"OFFCHAIN_FAULT",{reason:"500_SERVER_ERROR",transaction:e,info:{urls:n,errorMessages:i}})}_wrapBlock(e,t){return new wo(function(e){const t=Cu(e);return t.transactions=e.transactions.map((e=>"string"==typeof e?e:Ru(e))),t}(e),this)}_wrapLog(e,t){return new vo(function(e){return xu(e)}(e),this)}_wrapTransactionReceipt(e,t){return new Ao(function(e){return Pu(e)}(e),this)}_wrapTransactionResponse(e,t){return new _o(Ru(e),this)}_detectNetwork(){Pn(!1,"sub-classes must implement this","UNSUPPORTED_OPERATION",{operation:"_detectNetwork"})}async _perform(e){Pn(!1,`unsupported method: ${e.method}`,"UNSUPPORTED_OPERATION",{operation:e.method,info:e})}async getBlockNumber(){const e=Xn(await this.#He({method:"getBlockNumber"}),"%response");return this.#De>=0&&(this.#De=e),e}_getAddress(e){return Ni(e,this)}_getBlockTag(e){if(null==e)return"latest";switch(e){case"earliest":return"0x0";case"finalized":case"latest":case"pending":case"safe":return e}return Ln(e)?Ln(e,32)?e:nr(e):("bigint"==typeof e&&(e=Xn(e,"blockTag")),"number"==typeof e?e>=0?nr(e):this.#De>=0?nr(this.#De+e):this.getBlockNumber().then((t=>nr(t+e))):void Rn(!1,"invalid blockTag","blockTag",e))}_getFilter(e){const t=(e.topics||[]).map((e=>null==e?null:Array.isArray(e)?Wu(e.map((e=>e.toLowerCase()))):e.toLowerCase())),n="blockHash"in e?e.blockHash:void 0,r=(e,r,s)=>{let i;switch(e.length){case 0:break;case 1:i=e[0];break;default:e.sort(),i=e}if(n&&(null!=r||null!=s))throw new Error("invalid filter");const o={};return i&&(o.address=i),t.length&&(o.topics=t),r&&(o.fromBlock=r),s&&(o.toBlock=s),n&&(o.blockHash=n),o};let s,i,o=[];if(e.address)if(Array.isArray(e.address))for(const t of e.address)o.push(this._getAddress(t));else o.push(this._getAddress(e.address));return"fromBlock"in e&&(s=this._getBlockTag(e.fromBlock)),"toBlock"in e&&(i=this._getBlockTag(e.toBlock)),o.filter((e=>"string"!=typeof e)).length||null!=s&&"string"!=typeof s||null!=i&&"string"!=typeof i?Promise.all([Promise.all(o),s,i]).then((e=>r(e[0],e[1],e[2]))):r(o,s,i)}_getTransactionRequest(e){const t=bo(e),n=[];if(["to","from"].forEach((e=>{if(null==t[e])return;const r=Ni(t[e],this);Qu(r)?n.push(async function(){t[e]=await r}()):t[e]=r})),null!=t.blockTag){const e=this._getBlockTag(t.blockTag);Qu(e)?n.push(async function(){t.blockTag=await e}()):t.blockTag=e}return n.length?async function(){return await Promise.all(n),t}():t}async getNetwork(){if(null==this.#Le){const e=(async()=>{try{const e=await this._detectNetwork();return this.emit("network",e,null),e}catch(t){throw this.#Le===e&&(this.#Le=null),t}})();return this.#Le=e,(await e).clone()}const e=this.#Le,[t,n]=await Promise.all([e,this._detectNetwork()]);return t.chainId!==n.chainId&&(this.#Ue?(this.emit("network",n,t),this.#Le===e&&(this.#Le=Promise.resolve(n))):Pn(!1,`network changed: ${t.chainId} => ${n.chainId} `,"NETWORK_ERROR",{event:"changed"})),t.clone()}async getFeeData(){const e=await this.getNetwork(),t=async()=>{const{_block:t,gasPrice:n,priorityFee:r}=await _n({_block:this.#Ge("latest",!1),gasPrice:(async()=>{try{return Kn(await this.#He({method:"getGasPrice"}),"%response")}catch(e){}return null})(),priorityFee:(async()=>{try{return Kn(await this.#He({method:"getPriorityFee"}),"%response")}catch(e){}return null})()});let s=null,i=null;const o=this._wrapBlock(t,e);return o&&o.baseFeePerGas&&(i=null!=r?r:BigInt("1000000000"),s=o.baseFeePerGas*qu+i),new yo(n,s,i)},n=e.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");if(n){const e=new no(n.url),r=await n.processFunc(t,this,e);return new yo(r.gasPrice,r.maxFeePerGas,r.maxPriorityFeePerGas)}return await t()}async estimateGas(e){let t=this._getTransactionRequest(e);return Qu(t)&&(t=await t),Kn(await this.#He({method:"estimateGas",transaction:t}),"%response")}async#ze(e,t,n){Pn(n<10,"CCIP read exceeded maximum redirections","OFFCHAIN_FAULT",{reason:"TOO_MANY_REDIRECTS",transaction:Object.assign({},e,{blockTag:t,enableCcipRead:!0})});const r=bo(e);try{return Mn(await this._perform({method:"call",transaction:r,blockTag:t}))}catch(e){if(!this.disableCcipRead&&Cn(e)&&e.data&&n>=0&&"latest"===t&&null!=r.to&&"0x556f1830"===jn(e.data,0,4)){const s=e.data,i=await Ni(r.to,this);let o;try{o=function(e){const t={sender:"",urls:[],calldata:"",selector:"",extraData:"",errorArgs:[]};Pn($n(e)>=160,"insufficient OffchainLookup data","OFFCHAIN_FAULT",{reason:"insufficient OffchainLookup data"});const n=jn(e,0,32);Pn(jn(n,0,12)===jn(ah,0,12),"corrupt OffchainLookup sender","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup sender"}),t.sender=jn(n,12);try{const n=[],r=Xn(jn(e,32,64)),s=Xn(jn(e,r,r+32)),i=jn(e,r+32);for(let e=0;e<s;e++){const t=th(i,32*e);if(null==t)throw new Error("abort");n.push(t)}t.urls=n}catch(e){Pn(!1,"corrupt OffchainLookup urls","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup urls"})}try{const n=nh(e,64);if(null==n)throw new Error("abort");t.calldata=n}catch(e){Pn(!1,"corrupt OffchainLookup calldata","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup calldata"})}Pn(jn(e,100,128)===jn(ah,0,28),"corrupt OffchainLookup callbaackSelector","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup callbaackSelector"}),t.selector=jn(e,96,100);try{const n=nh(e,128);if(null==n)throw new Error("abort");t.extraData=n}catch(e){Pn(!1,"corrupt OffchainLookup extraData","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup extraData"})}return t.errorArgs="sender,urls,calldata,selector,extraData".split(/,/).map((e=>t[e])),t}(jn(e.data,4))}catch(e){Pn(!1,e.message,"OFFCHAIN_FAULT",{reason:"BAD_DATA",transaction:r,info:{data:s}})}Pn(o.sender.toLowerCase()===i.toLowerCase(),"CCIP Read sender mismatch","CALL_EXCEPTION",{action:"call",data:s,reason:"OffchainLookup",transaction:r,invocation:null,revert:{signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",name:"OffchainLookup",args:o.errorArgs}});const a=await this.ccipReadFetch(r,o.calldata,o.urls);Pn(null!=a,"CCIP Read failed to fetch data","OFFCHAIN_FAULT",{reason:"FETCH_FAILED",transaction:r,info:{data:e.data,errorArgs:o.errorArgs}});const l={to:i,data:Dn([o.selector,oh([a,o.extraData])])};this.emit("debug",{action:"sendCcipReadCall",transaction:l});try{const e=await this.#ze(l,t,n+1);return this.emit("debug",{action:"receiveCcipReadCallResult",transaction:Object.assign({},l),result:e}),e}catch(e){throw this.emit("debug",{action:"receiveCcipReadCallError",transaction:Object.assign({},l),error:e}),e}}throw e}}async#qe(e){const{value:t}=await _n({network:this.getNetwork(),value:e});return t}async call(e){const{tx:t,blockTag:n}=await _n({tx:this._getTransactionRequest(e),blockTag:this._getBlockTag(e.blockTag)});return await this.#qe(this.#ze(t,n,e.enableCcipRead?0:-1))}async#Qe(e,t,n){let r=this._getAddress(t),s=this._getBlockTag(n);return"string"==typeof r&&"string"==typeof s||([r,s]=await Promise.all([r,s])),await this.#qe(this.#He(Object.assign(e,{address:r,blockTag:s})))}async getBalance(e,t){return Kn(await this.#Qe({method:"getBalance"},e,t),"%response")}async getTransactionCount(e,t){return Xn(await this.#Qe({method:"getTransactionCount"},e,t),"%response")}async getCode(e,t){return Mn(await this.#Qe({method:"getCode"},e,t))}async getStorage(e,t,n){const r=Kn(t,"position");return Mn(await this.#Qe({method:"getStorage",position:r},e,n))}async broadcastTransaction(e){const{blockNumber:t,hash:n,network:r}=await _n({blockNumber:this.getBlockNumber(),hash:this._perform({method:"broadcastTransaction",signedTransaction:e}),network:this.getNetwork()}),s=hu.from(e);if(s.hash!==n)throw new Error("@TODO: the returned hash did not match");return this._wrapTransactionResponse(s,r).replaceableTransaction(t)}async#Ge(e,t){if(Ln(e,32))return await this.#He({method:"getBlock",blockHash:e,includeTransactions:t});let n=this._getBlockTag(e);return"string"!=typeof n&&(n=await n),await this.#He({method:"getBlock",blockTag:n,includeTransactions:t})}async getBlock(e,t){const{network:n,params:r}=await _n({network:this.getNetwork(),params:this.#Ge(e,!!t)});return null==r?null:this._wrapBlock(r,n)}async getTransaction(e){const{network:t,params:n}=await _n({network:this.getNetwork(),params:this.#He({method:"getTransaction",hash:e})});return null==n?null:this._wrapTransactionResponse(n,t)}async getTransactionReceipt(e){const{network:t,params:n}=await _n({network:this.getNetwork(),params:this.#He({method:"getTransactionReceipt",hash:e})});if(null==n)return null;if(null==n.gasPrice&&null==n.effectiveGasPrice){const t=await this.#He({method:"getTransaction",hash:e});if(null==t)throw new Error("report this; could not find tx or effectiveGasPrice");n.effectiveGasPrice=t.gasPrice}return this._wrapTransactionReceipt(n,t)}async getTransactionResult(e){const{result:t}=await _n({network:this.getNetwork(),result:this.#He({method:"getTransactionResult",hash:e})});return null==t?null:Mn(t)}async getLogs(e){let t=this._getFilter(e);Qu(t)&&(t=await t);const{network:n,params:r}=await _n({network:this.getNetwork(),params:this.#He({method:"getLogs",filter:t})});return r.map((e=>this._wrapLog(e,n)))}_getProvider(e){Pn(!1,"provider cannot connect to target network","UNSUPPORTED_OPERATION",{operation:"_getProvider()"})}async getResolver(e){return await bu.fromName(this,e)}async getAvatar(e){const t=await this.getResolver(e);return t?await t.getAvatar():null}async resolveName(e){const t=await this.getResolver(e);return t?await t.getAddress():null}async lookupAddress(e){const t=yl((e=es(e)).substring(2).toLowerCase()+".addr.reverse");try{const n=await bu.getEnsAddress(this),r=new Xo(n,["function resolver(bytes32) view returns (address)"],this),s=await r.resolver(t);if(null==s||s===io)return null;const i=new Xo(s,["function name(bytes32) view returns (string)"],this),o=await i.name(t);return await this.resolveName(o)!==e?null:o}catch(e){if(xn(e,"BAD_DATA")&&"0x"===e.value)return null;if(xn(e,"CALL_EXCEPTION"))return null;throw e}return null}async waitForTransaction(e,t,n){const r=null!=t?t:1;return 0===r?this.getTransactionReceipt(e):new Promise((async(t,s)=>{let i=null;const o=async n=>{try{const s=await this.getTransactionReceipt(e);if(null!=s&&n-s.blockNumber+1>=r)return t(s),void(i&&(clearTimeout(i),i=null))}catch(e){console.log("EEE",e)}this.once("block",o)};null!=n&&(i=setTimeout((()=>{null!=i&&(i=null,this.off("block",o),s(Nn("timeout","TIMEOUT",{reason:"timeout"})))}),n)),o(await this.getBlockNumber())}))}async waitForBlock(e){Pn(!1,"not implemented yet","NOT_IMPLEMENTED",{operation:"waitForBlock"})}_clearTimeout(e){const t=this.#je.get(e);t&&(t.timer&&clearTimeout(t.timer),this.#je.delete(e))}_setTimeout(e,t){null==t&&(t=0);const n=this.#$e++,r=()=>{this.#je.delete(n),e()};if(this.paused)this.#je.set(n,{timer:null,func:r,time:t});else{const e=setTimeout(r,t);this.#je.set(n,{timer:e,func:r,time:Zu()})}return n}_forEachSubscriber(e){for(const t of this.#Te.values())e(t.subscriber)}_getSubscriber(e){switch(e.type){case"debug":case"error":case"network":return new Ku(e.type);case"block":{const e=new $u(this);return e.pollingInterval=this.pollingInterval,e}case"safe":case"finalized":return new Vu(this,e.type);case"event":return new zu(this,e.filter);case"transaction":return new Gu(this,e.hash);case"orphan":return new Hu(this,e.filter)}throw new Error(`unsupported event: ${e.type}`)}_recoverSubscriber(e,t){for(const n of this.#Te.values())if(n.subscriber===e){n.started&&n.subscriber.stop(),n.subscriber=t,n.started&&t.start(),null!=this.#Ie&&t.pause(this.#Ie);break}}async#Je(e,t){let n=await Yu(e,this);return"event"===n.type&&t&&t.length>0&&!0===t[0].removed&&(n=await Yu({orphan:"drop-log",log:t[0]},this)),this.#Te.get(n.tag)||null}async#Ke(e){const t=await Yu(e,this),n=t.tag;let r=this.#Te.get(n);return r||(r={subscriber:this._getSubscriber(t),tag:n,addressableMap:new WeakMap,nameMap:new Map,started:!1,listeners:[]},this.#Te.set(n,r)),r}async on(e,t){const n=await this.#Ke(e);return n.listeners.push({listener:t,once:!1}),n.started||(n.subscriber.start(),n.started=!0,null!=this.#Ie&&n.subscriber.pause(this.#Ie)),this}async once(e,t){const n=await this.#Ke(e);return n.listeners.push({listener:t,once:!0}),n.started||(n.subscriber.start(),n.started=!0,null!=this.#Ie&&n.subscriber.pause(this.#Ie)),this}async emit(e,...t){const n=await this.#Je(e,t);if(!n||0===n.listeners.length)return!1;const r=n.listeners.length;return n.listeners=n.listeners.filter((({listener:n,once:r})=>{const s=new xo(this,r?null:n,e);try{n.call(this,...t,s)}catch(e){}return!r})),0===n.listeners.length&&(n.started&&n.subscriber.stop(),this.#Te.delete(n.tag)),r>0}async listenerCount(e){if(e){const t=await this.#Je(e);return t?t.listeners.length:0}let t=0;for(const{listeners:e}of this.#Te.values())t+=e.length;return t}async listeners(e){if(e){const t=await this.#Je(e);return t?t.listeners.map((({listener:e})=>e)):[]}let t=[];for(const{listeners:e}of this.#Te.values())t=t.concat(e.map((({listener:e})=>e)));return t}async off(e,t){const n=await this.#Je(e);if(!n)return this;if(t){const e=n.listeners.map((({listener:e})=>e)).indexOf(t);e>=0&&n.listeners.splice(e,1)}return t&&0!==n.listeners.length||(n.started&&n.subscriber.stop(),this.#Te.delete(n.tag)),this}async removeAllListeners(e){if(e){const{tag:t,started:n,subscriber:r}=await this.#Ke(e);n&&r.stop(),this.#Te.delete(t)}else for(const[e,{started:t,subscriber:n}]of this.#Te)t&&n.stop(),this.#Te.delete(e);return this}async addListener(e,t){return await this.on(e,t)}async removeListener(e,t){return this.off(e,t)}get destroyed(){return this.#Fe}destroy(){this.removeAllListeners();for(const e of this.#je.keys())this._clearTimeout(e);this.#Fe=!0}get paused(){return null!=this.#Ie}set paused(e){!!e!==this.paused&&(this.paused?this.resume():this.pause(!1))}pause(e){if(this.#De=-1,null!=this.#Ie){if(this.#Ie==!!e)return;Pn(!1,"cannot change pause type; resume first","UNSUPPORTED_OPERATION",{operation:"pause"})}this._forEachSubscriber((t=>t.pause(e))),this.#Ie=!!e;for(const e of this.#je.values())e.timer&&clearTimeout(e.timer),e.time=Zu()-e.time}resume(){if(null!=this.#Ie){this._forEachSubscriber((e=>e.resume())),this.#Ie=null;for(const e of this.#je.values()){let t=e.time;t<0&&(t=0),e.time=Zu(),setTimeout(e.func,t)}}}}function th(e,t){try{const n=nh(e,t);if(n)return ks(n)}catch(e){}return null}function nh(e,t){if("0x"===e)return null;try{const n=Xn(jn(e,t,t+32)),r=Xn(jn(e,n,n+32));return jn(e,n+32,n+32+r)}catch(e){}return null}function rh(e){const t=tr(e);if(t.length>32)throw new Error("internal; should not happen");const n=new Uint8Array(32);return n.set(t,32-t.length),n}function sh(e){if(e.length%32==0)return e;const t=new Uint8Array(32*Math.ceil(e.length/32));return t.set(e),t}const ih=new Uint8Array([]);function oh(e){const t=[];let n=0;for(let r=0;r<e.length;r++)t.push(ih),n+=32;for(let r=0;r<e.length;r++){const s=In(e[r]);t[r]=rh(n),t.push(rh(s.length)),t.push(sh(s)),n+=32+32*Math.ceil(s.length/32)}return Dn(t)}const ah="0x0000000000000000000000000000000000000000000000000000000000000000";function lh(e,t){if(e.provider)return e.provider;Pn(!1,"missing provider","UNSUPPORTED_OPERATION",{operation:t})}async function ch(e,t){let n=bo(t);if(null!=n.to&&(n.to=Ni(n.to,e)),null!=n.from){const t=n.from;n.from=Promise.all([e.getAddress(),Ni(t,e)]).then((([e,t])=>(Rn(e.toLowerCase()===t.toLowerCase(),"transaction from mismatch","tx.from",t),e)))}else n.from=e.getAddress();return await _n(n)}class uh{provider;constructor(e){En(this,{provider:e||null})}async getNonce(e){return lh(this,"getTransactionCount").getTransactionCount(await this.getAddress(),e)}async populateCall(e){return await ch(this,e)}async populateTransaction(e){const t=lh(this,"populateTransaction"),n=await ch(this,e);null==n.nonce&&(n.nonce=await this.getNonce("pending")),null==n.gasLimit&&(n.gasLimit=await this.estimateGas(n));const r=await this.provider.getNetwork();null!=n.chainId?Rn(Kn(n.chainId)===r.chainId,"transaction chainId mismatch","tx.chainId",e.chainId):n.chainId=r.chainId;const s=null!=n.maxFeePerGas||null!=n.maxPriorityFeePerGas;if(null==n.gasPrice||2!==n.type&&!s?0!==n.type&&1!==n.type||!s||Rn(!1,"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","tx",e):Rn(!1,"eip-1559 transaction do not support gasPrice","tx",e),2!==n.type&&null!=n.type||null==n.maxFeePerGas||null==n.maxPriorityFeePerGas)if(0===n.type||1===n.type){const e=await t.getFeeData();Pn(null!=e.gasPrice,"network does not support gasPrice","UNSUPPORTED_OPERATION",{operation:"getGasPrice"}),null==n.gasPrice&&(n.gasPrice=e.gasPrice)}else{const e=await t.getFeeData();if(null==n.type)if(null!=e.maxFeePerGas&&null!=e.maxPriorityFeePerGas)if(n.type=2,null!=n.gasPrice){const e=n.gasPrice;delete n.gasPrice,n.maxFeePerGas=e,n.maxPriorityFeePerGas=e}else null==n.maxFeePerGas&&(n.maxFeePerGas=e.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=e.maxPriorityFeePerGas);else null!=e.gasPrice?(Pn(!s,"network does not support EIP-1559","UNSUPPORTED_OPERATION",{operation:"populateTransaction"}),null==n.gasPrice&&(n.gasPrice=e.gasPrice),n.type=0):Pn(!1,"failed to get consistent fee data","UNSUPPORTED_OPERATION",{operation:"signer.getFeeData"});else 2===n.type&&(null==n.maxFeePerGas&&(n.maxFeePerGas=e.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=e.maxPriorityFeePerGas))}else n.type=2;return await _n(n)}async estimateGas(e){return lh(this,"estimateGas").estimateGas(await this.populateCall(e))}async call(e){return lh(this,"call").call(await this.populateCall(e))}async resolveName(e){const t=lh(this,"resolveName");return await t.resolveName(e)}async sendTransaction(e){const t=lh(this,"sendTransaction"),n=await this.populateTransaction(e);delete n.from;const r=hu.from(n);return await t.broadcastTransaction(await this.signTransaction(r))}}class hh{#ke;#We;#xe;#Re;#Ye;#Ze;constructor(e){this.#ke=e,this.#We=null,this.#xe=this.#Pe.bind(this),this.#Re=!1,this.#Ye=null,this.#Ze=!1}_subscribe(e){throw new Error("subclasses must override this")}_emitResults(e,t){throw new Error("subclasses must override this")}_recover(e){throw new Error("subclasses must override this")}async#Pe(e){try{null==this.#We&&(this.#We=this._subscribe(this.#ke));let e=null;try{e=await this.#We}catch(e){if(!xn(e,"UNSUPPORTED_OPERATION")||"eth_newFilter"!==e.operation)throw e}if(null==e)return this.#We=null,void this.#ke._recoverSubscriber(this,this._recover(this.#ke));const t=await this.#ke.getNetwork();if(this.#Ye||(this.#Ye=t),this.#Ye.chainId!==t.chainId)throw new Error("chaid changed");if(this.#Ze)return;const n=await this.#ke.send("eth_getFilterChanges",[e]);await this._emitResults(this.#ke,n)}catch(e){console.log("@TODO",e)}this.#ke.once("block",this.#xe)}#Xe(){const e=this.#We;e&&(this.#We=null,e.then((e=>{this.#ke.send("eth_uninstallFilter",[e])})))}start(){this.#Re||(this.#Re=!0,this.#Pe(-2))}stop(){this.#Re&&(this.#Re=!1,this.#Ze=!0,this.#Xe(),this.#ke.off("block",this.#xe))}pause(e){e&&this.#Xe(),this.#ke.off("block",this.#xe)}resume(){this.start()}}class dh extends hh{#et;constructor(e,t){var n;super(e),this.#et=(n=t,JSON.parse(JSON.stringify(n)))}_recover(e){return new zu(e,this.#et)}async _subscribe(e){return await e.send("eth_newFilter",[this.#et])}async _emitResults(e,t){for(const n of t)e.emit(this.#et,e._wrapLog(n,e._network))}}class ph extends hh{async _subscribe(e){return await e.send("eth_newPendingTransactionFilter",[])}async _emitResults(e,t){for(const n of t)e.emit("pending",n)}}const fh="bigint,boolean,function,number,string,symbol".split(/,/g);function mh(e){if(null==e||fh.indexOf(typeof e)>=0)return e;if("function"==typeof e.getAddress)return e;if(Array.isArray(e))return e.map(mh);if("object"==typeof e)return Object.keys(e).reduce(((t,n)=>(t[n]=e[n],t)),{});throw new Error(`should not happen: ${e} (${typeof e})`)}function gh(e){return new Promise((t=>{setTimeout(t,e)}))}function yh(e){return e?e.toLowerCase():e}function bh(e){return e&&"number"==typeof e.pollingInterval}const wh={polling:!1,staticNetwork:null,batchStallTime:10,batchMaxSize:1<<20,batchMaxCount:100,cacheTimeout:250,pollingInterval:4e3};class vh extends uh{address;constructor(e,t){super(e),En(this,{address:t=es(t)})}connect(e){Pn(!1,"cannot reconnect JsonRpcSigner","UNSUPPORTED_OPERATION",{operation:"signer.connect"})}async getAddress(){return this.address}async populateTransaction(e){return await this.populateCall(e)}async sendUncheckedTransaction(e){const t=mh(e),n=[];if(t.from){const r=t.from;n.push((async()=>{const n=await Ni(r,this.provider);Rn(null!=n&&n.toLowerCase()===this.address.toLowerCase(),"from address mismatch","transaction",e),t.from=n})())}else t.from=this.address;if(null==t.gasLimit&&n.push((async()=>{t.gasLimit=await this.provider.estimateGas({...t,from:this.address})})()),null!=t.to){const e=t.to;n.push((async()=>{t.to=await Ni(e,this.provider)})())}n.length&&await Promise.all(n);const r=this.provider.getRpcTransaction(t);return this.provider.send("eth_sendTransaction",[r])}async sendTransaction(e){const t=await this.provider.getBlockNumber(),n=await this.sendUncheckedTransaction(e);return await new Promise(((e,r)=>{const s=[1e3,100];let i=0;const o=async()=>{try{const r=await this.provider.getTransaction(n);if(null!=r)return void e(r.replaceableTransaction(t))}catch(e){if(xn(e,"CANCELLED")||xn(e,"BAD_DATA")||xn(e,"NETWORK_ERROR"))return null==e.info&&(e.info={}),e.info.sendTransactionHash=n,void r(e);if(xn(e,"INVALID_ARGUMENT")&&(i++,null==e.info&&(e.info={}),e.info.sendTransactionHash=n,i>10))return void r(e);this.provider.emit("error",Nn("failed to fetch transation after sending (will try again)","UNKNOWN_ERROR",{error:e}))}this.provider._setTimeout((()=>{o()}),s.pop()||4e3)};o()}))}async signTransaction(e){const t=mh(e);if(t.from){const n=await Ni(t.from,this.provider);Rn(null!=n&&n.toLowerCase()===this.address.toLowerCase(),"from address mismatch","transaction",e),t.from=n}else t.from=this.address;const n=this.provider.getRpcTransaction(t);return await this.provider.send("eth_signTransaction",[n])}async signMessage(e){const t="string"==typeof e?Es(e):e;return await this.provider.send("personal_sign",[Mn(t),this.address.toLowerCase()])}async signTypedData(e,t,n){const r=mh(n),s=await Vi.resolveNames(e,t,r,(async e=>{const t=await Ni(e);return Rn(null!=t,"TypedData does not support null address","value",e),t}));return await this.provider.send("eth_signTypedData_v4",[this.address.toLowerCase(),JSON.stringify(Vi.getPayload(s.domain,t,s.value))])}async unlock(e){return this.provider.send("personal_unlockAccount",[this.address.toLowerCase(),e,null])}async _legacySignMessage(e){const t="string"==typeof e?Es(e):e;return await this.provider.send("eth_sign",[this.address.toLowerCase(),Mn(t)])}}class Ah extends eh{#u;#tt;#nt;#rt;#st;#Ye;#it;#ot(){if(this.#rt)return;const e=1===this._getOption("batchMaxCount")?0:this._getOption("batchStallTime");this.#rt=setTimeout((()=>{this.#rt=null;const e=this.#nt;for(this.#nt=[];e.length;){const t=[e.shift()];for(;e.length&&t.length!==this.#u.batchMaxCount;){t.push(e.shift());const n=JSON.stringify(t.map((e=>e.payload)));if(n.length>this.#u.batchMaxSize){e.unshift(t.pop());break}}(async()=>{const e=1===t.length?t[0].payload:t.map((e=>e.payload));this.emit("debug",{action:"sendRpcPayload",payload:e});try{const n=await this._send(e);this.emit("debug",{action:"receiveRpcResult",result:n});for(const{resolve:e,reject:r,payload:s}of t){if(this.destroyed){r(Nn("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:s.method}));continue}const t=n.filter((e=>e.id===s.id))[0];if(null!=t)"error"in t?r(this.getRpcError(s,t)):e(t.result);else{const e=Nn("missing response for request","BAD_DATA",{value:n,info:{payload:s}});this.emit("error",e),r(e)}}}catch(e){this.emit("debug",{action:"receiveRpcError",error:e});for(const{reject:n}of t)n(e)}})()}}),e)}constructor(e,t){super(e,t),this.#tt=1,this.#u=Object.assign({},wh,t||{}),this.#nt=[],this.#rt=null,this.#Ye=null,this.#it=null;{let e=null;const t=new Promise((t=>{e=t}));this.#st={promise:t,resolve:e}}const n=this._getOption("staticNetwork");"boolean"==typeof n?(Rn(!n||"any"!==e,"staticNetwork cannot be used on special network 'any'","options",t),n&&null!=e&&(this.#Ye=Fu.from(e))):n&&(Rn(null==e||n.matches(e),"staticNetwork MUST match network object","options",t),this.#Ye=n)}_getOption(e){return this.#u[e]}get _network(){return Pn(this.#Ye,"network is not available yet","NETWORK_ERROR"),this.#Ye}async _perform(e){if("call"===e.method||"estimateGas"===e.method){let t=e.transaction;if(t&&null!=t.type&&Kn(t.type)&&null==t.maxFeePerGas&&null==t.maxPriorityFeePerGas){const n=await this.getFeeData();null==n.maxFeePerGas&&null==n.maxPriorityFeePerGas&&(e=Object.assign({},e,{transaction:Object.assign({},t,{type:void 0})}))}}const t=this.getRpcRequest(e);return null!=t?await this.send(t.method,t.args):super._perform(e)}async _detectNetwork(){const e=this._getOption("staticNetwork");if(e){if(!0!==e)return e;if(this.#Ye)return this.#Ye}return this.#it?await this.#it:this.ready?(this.#it=(async()=>{try{const e=Fu.from(Kn(await this.send("eth_chainId",[])));return this.#it=null,e}catch(e){throw this.#it=null,e}})(),await this.#it):(this.#it=(async()=>{const e={id:this.#tt++,method:"eth_chainId",params:[],jsonrpc:"2.0"};let t;this.emit("debug",{action:"sendRpcPayload",payload:e});try{t=(await this._send(e))[0],this.#it=null}catch(e){throw this.#it=null,this.emit("debug",{action:"receiveRpcError",error:e}),e}if(this.emit("debug",{action:"receiveRpcResult",result:t}),"result"in t)return Fu.from(Kn(t.result));throw this.getRpcError(e,t)})(),await this.#it)}_start(){null!=this.#st&&null!=this.#st.resolve&&(this.#st.resolve(),this.#st=null,(async()=>{for(;null==this.#Ye&&!this.destroyed;)try{this.#Ye=await this._detectNetwork()}catch(e){if(this.destroyed)break;console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)"),this.emit("error",Nn("failed to bootstrap network detection","NETWORK_ERROR",{event:"initial-network-discovery",info:{error:e}})),await gh(1e3)}this.#ot()})())}async _waitUntilReady(){if(null!=this.#st)return await this.#st.promise}_getSubscriber(e){return"pending"===e.type?new ph(this):"event"===e.type?this._getOption("polling")?new zu(this,e.filter):new dh(this,e.filter):"orphan"===e.type&&"drop-log"===e.filter.orphan?new Ku("orphan"):super._getSubscriber(e)}get ready(){return null==this.#st}getRpcTransaction(e){const t={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((n=>{if(null==e[n])return;let r=n;"gasLimit"===n&&(r="gas"),t[r]=nr(Kn(e[n],`tx.${n}`))})),["from","to","data"].forEach((n=>{null!=e[n]&&(t[n]=Mn(e[n]))})),e.accessList&&(t.accessList=Gi(e.accessList)),t}getRpcRequest(e){switch(e.method){case"chainId":return{method:"eth_chainId",args:[]};case"getBlockNumber":return{method:"eth_blockNumber",args:[]};case"getGasPrice":return{method:"eth_gasPrice",args:[]};case"getPriorityFee":return{method:"eth_maxPriorityFeePerGas",args:[]};case"getBalance":return{method:"eth_getBalance",args:[yh(e.address),e.blockTag]};case"getTransactionCount":return{method:"eth_getTransactionCount",args:[yh(e.address),e.blockTag]};case"getCode":return{method:"eth_getCode",args:[yh(e.address),e.blockTag]};case"getStorage":return{method:"eth_getStorageAt",args:[yh(e.address),"0x"+e.position.toString(16),e.blockTag]};case"broadcastTransaction":return{method:"eth_sendRawTransaction",args:[e.signedTransaction]};case"getBlock":if("blockTag"in e)return{method:"eth_getBlockByNumber",args:[e.blockTag,!!e.includeTransactions]};if("blockHash"in e)return{method:"eth_getBlockByHash",args:[e.blockHash,!!e.includeTransactions]};break;case"getTransaction":return{method:"eth_getTransactionByHash",args:[e.hash]};case"getTransactionReceipt":return{method:"eth_getTransactionReceipt",args:[e.hash]};case"call":return{method:"eth_call",args:[this.getRpcTransaction(e.transaction),e.blockTag]};case"estimateGas":return{method:"eth_estimateGas",args:[this.getRpcTransaction(e.transaction)]};case"getLogs":return e.filter&&null!=e.filter.address&&(Array.isArray(e.filter.address)?e.filter.address=e.filter.address.map(yh):e.filter.address=yh(e.filter.address)),{method:"eth_getLogs",args:[e.filter]}}return null}getRpcError(e,t){const{method:n}=e,{error:r}=t;if("eth_estimateGas"===n&&r.message){const t=r.message;if(!t.match(/revert/i)&&t.match(/insufficient funds/i))return Nn("insufficient funds","INSUFFICIENT_FUNDS",{transaction:e.params[0],info:{payload:e,error:r}})}if("eth_call"===n||"eth_estimateGas"===n){const t=kh(r),s=ki.getBuiltinCallException("eth_call"===n?"call":"estimateGas",e.params[0],t?t.data:null);return s.info={error:r,payload:e},s}const s=JSON.stringify(function(e){const t=[];return xh(e,t),t}(r));if("string"==typeof r.message&&r.message.match(/user denied|ethers-user-denied/i))return Nn("user rejected action","ACTION_REJECTED",{action:{eth_sign:"signMessage",personal_sign:"signMessage",eth_signTypedData_v4:"signTypedData",eth_signTransaction:"signTransaction",eth_sendTransaction:"sendTransaction",eth_requestAccounts:"requestAccess",wallet_requestAccounts:"requestAccess"}[n]||"unknown",reason:"rejected",info:{payload:e,error:r}});if("eth_sendRawTransaction"===n||"eth_sendTransaction"===n){const t=e.params[0];if(s.match(/insufficient funds|base fee exceeds gas limit/i))return Nn("insufficient funds for intrinsic transaction cost","INSUFFICIENT_FUNDS",{transaction:t,info:{error:r}});if(s.match(/nonce/i)&&s.match(/too low/i))return Nn("nonce has already been used","NONCE_EXPIRED",{transaction:t,info:{error:r}});if(s.match(/replacement transaction/i)&&s.match(/underpriced/i))return Nn("replacement fee too low","REPLACEMENT_UNDERPRICED",{transaction:t,info:{error:r}});if(s.match(/only replay-protected/i))return Nn("legacy pre-eip-155 transactions not supported","UNSUPPORTED_OPERATION",{operation:n,info:{transaction:t,info:{error:r}}})}let i=!!s.match(/the method .* does not exist/i);return i||r&&r.details&&r.details.startsWith("Unauthorized method:")&&(i=!0),i?Nn("unsupported operation","UNSUPPORTED_OPERATION",{operation:e.method,info:{error:r,payload:e}}):Nn("could not coalesce error","UNKNOWN_ERROR",{error:r,payload:e})}send(e,t){if(this.destroyed)return Promise.reject(Nn("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:e}));const n=this.#tt++,r=new Promise(((r,s)=>{this.#nt.push({resolve:r,reject:s,payload:{method:e,params:t,id:n,jsonrpc:"2.0"}})}));return this.#ot(),r}async getSigner(e){null==e&&(e=0);const t=this.send("eth_accounts",[]);if("number"==typeof e){const n=await t;if(e>=n.length)throw new Error("no such account");return new vh(this,n[e])}const{accounts:n}=await _n({network:this.getNetwork(),accounts:t});e=es(e);for(const t of n)if(es(t)===e)return new vh(this,e);throw new Error("invalid account")}async listAccounts(){return(await this.send("eth_accounts",[])).map((e=>new vh(this,e)))}destroy(){this.#rt&&(clearTimeout(this.#rt),this.#rt=null);for(const{payload:e,reject:t}of this.#nt)t(Nn("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:e.method}));this.#nt=[],super.destroy()}}class _h extends Ah{#at;constructor(e,t){super(e,t),this.#at=4e3}_getSubscriber(e){const t=super._getSubscriber(e);return bh(t)&&(t.pollingInterval=this.#at),t}get pollingInterval(){return this.#at}set pollingInterval(e){if(!Number.isInteger(e)||e<0)throw new Error("invalid interval");this.#at=e,this._forEachSubscriber((e=>{bh(e)&&(e.pollingInterval=this.#at)}))}}class Eh extends _h{#lt;constructor(e,t,n){null==e&&(e="http://localhost:8545"),super(t,n),this.#lt="string"==typeof e?new no(e):e.clone()}_getConnection(){return this.#lt.clone()}async send(e,t){return await this._start(),await super.send(e,t)}async _send(e){const t=this._getConnection();t.body=JSON.stringify(e),t.setHeader("content-type","application/json");const n=await t.send();n.assertOk();let r=n.bodyJson;return Array.isArray(r)||(r=[r]),r}}function kh(e){if(null==e)return null;if("string"==typeof e.message&&e.message.match(/revert/i)&&Ln(e.data))return{message:e.message,data:e.data};if("object"==typeof e){for(const t in e){const n=kh(e[t]);if(n)return n}return null}if("string"==typeof e)try{return kh(JSON.parse(e))}catch(e){}return null}function xh(e,t){if(null!=e){if("string"==typeof e.message&&t.push(e.message),"object"==typeof e)for(const n in e)xh(e[n],t);if("string"==typeof e)try{return xh(JSON.parse(e),t)}catch(e){}}}class Ch extends _h{#D;constructor(e,t){Rn(e&&e.request,"invalid EIP-1193 provider","ethereum",e),super(t,{batchMaxCount:1}),this.#D=async(t,n)=>{const r={method:t,params:n};this.emit("debug",{action:"sendEip1193Request",payload:r});try{const t=await e.request(r);return this.emit("debug",{action:"receiveEip1193Result",result:t}),t}catch(e){const t=new Error(e.message);throw t.code=e.code,t.data=e.data,t.payload=r,this.emit("debug",{action:"receiveEip1193Error",error:t}),t}}}async send(e,t){return await this._start(),await super.send(e,t)}async _send(e){Rn(!Array.isArray(e),"EIP-1193 does not support batch request","payload",e);try{const t=await this.#D(e.method,e.params||[]);return[{id:e.id,result:t}]}catch(t){return[{id:e.id,error:{code:t.code,data:t.data,message:t.message}}]}}getRpcError(e,t){switch((t=JSON.parse(JSON.stringify(t))).error.code||-1){case 4001:t.error.message=`ethers-user-denied: ${t.error.message}`;break;case 4200:t.error.message=`ethers-unsupported: ${t.error.message}`}return super.getRpcError(e,t)}async hasSigner(e){null==e&&(e=0);const t=await this.send("eth_accounts",[]);return"number"==typeof e?t.length>e:(e=e.toLowerCase(),0!==t.filter((t=>t.toLowerCase()===e)).length)}async getSigner(e){if(null==e&&(e=0),!await this.hasSigner(e))try{await this.#D("eth_requestAccounts",[])}catch(e){const t=e.payload;throw this.getRpcError(t,{id:t.id,error:e})}return await super.getSigner(e)}}const Nh=new Set;function Ph(e){Nh.has(e)||(Nh.add(e),console.log("========= NOTICE ========="),console.log(`Request-Rate Exceeded for ${e} (this message will not be repeated)`),console.log(""),console.log("The default API keys for each service are provided as a highly-throttled,"),console.log("community resource for low-traffic projects and early prototyping."),console.log(""),console.log("While your application will continue to function, we highly recommended"),console.log("signing up for your own API keys to improve performance, increase your"),console.log("request rate/limit and enable other perks, such as metrics and advanced APIs."),console.log(""),console.log("For more details: https://docs.ethers.org/api-keys/"),console.log("=========================="))}const Rh="9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";class Oh extends Eh{apiKey;constructor(e,t){null==e&&(e="mainnet");const n=Fu.from(e);null==t&&(t=Rh);const r={polling:!0,staticNetwork:n};super(Oh.getRequest(n,t),n,r),En(this,{apiKey:t})}_getProvider(e){try{return new Oh(e,this.apiKey)}catch(e){}return super._getProvider(e)}static getRequest(e,t){null==t&&(t=Rh);const n=new no(`https://${function(e){switch(e){case"mainnet":return"rpc.ankr.com/eth";case"goerli":return"rpc.ankr.com/eth_goerli";case"sepolia":return"rpc.ankr.com/eth_sepolia";case"arbitrum":return"rpc.ankr.com/arbitrum";case"base":return"rpc.ankr.com/base";case"base-goerli":return"rpc.ankr.com/base_goerli";case"base-sepolia":return"rpc.ankr.com/base_sepolia";case"bnb":return"rpc.ankr.com/bsc";case"bnbt":return"rpc.ankr.com/bsc_testnet_chapel";case"matic":return"rpc.ankr.com/polygon";case"matic-mumbai":return"rpc.ankr.com/polygon_mumbai";case"optimism":return"rpc.ankr.com/optimism";case"optimism-goerli":return"rpc.ankr.com/optimism_testnet";case"optimism-sepolia":return"rpc.ankr.com/optimism_sepolia"}Rn(!1,"unsupported network","network",e)}(e.name)}/${t}`);return n.allowGzip=!0,t===Rh&&(n.retryFunc=async(e,t,n)=>(Ph("AnkrProvider"),!0)),n}getRpcError(e,t){return"eth_sendRawTransaction"===e.method&&t&&t.error&&"INTERNAL_ERROR: could not replace existing tx"===t.error.message&&(t.error.message="replacement transaction underpriced"),super.getRpcError(e,t)}isCommunityResource(){return this.apiKey===Rh}}const Bh="_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";class Sh extends Eh{apiKey;constructor(e,t){null==e&&(e="mainnet");const n=Fu.from(e);null==t&&(t=Bh),super(Sh.getRequest(n,t),n,{staticNetwork:n}),En(this,{apiKey:t})}_getProvider(e){try{return new Sh(e,this.apiKey)}catch(e){}return super._getProvider(e)}async _perform(e){if("getTransactionResult"===e.method){const{trace:t,tx:n}=await _n({trace:this.send("trace_transaction",[e.hash]),tx:this.getTransaction(e.hash)});if(null==t||null==n)return null;let r,s=!1;try{r=t[0].result.output,s="Reverted"===t[0].error}catch(e){}if(r)return Pn(!s,"an error occurred during transaction executions","CALL_EXCEPTION",{action:"getTransactionResult",data:r,reason:null,transaction:n,invocation:null,revert:null}),r;Pn(!1,"could not parse trace result","BAD_DATA",{value:t})}return await super._perform(e)}isCommunityResource(){return this.apiKey===Bh}static getRequest(e,t){null==t&&(t=Bh);const n=new no(`https://${function(e){switch(e){case"mainnet":return"eth-mainnet.alchemyapi.io";case"goerli":return"eth-goerli.g.alchemy.com";case"sepolia":return"eth-sepolia.g.alchemy.com";case"arbitrum":return"arb-mainnet.g.alchemy.com";case"arbitrum-goerli":return"arb-goerli.g.alchemy.com";case"arbitrum-sepolia":return"arb-sepolia.g.alchemy.com";case"base":return"base-mainnet.g.alchemy.com";case"base-goerli":return"base-goerli.g.alchemy.com";case"base-sepolia":return"base-sepolia.g.alchemy.com";case"matic":return"polygon-mainnet.g.alchemy.com";case"matic-mumbai":return"polygon-mumbai.g.alchemy.com";case"optimism":return"opt-mainnet.g.alchemy.com";case"optimism-goerli":return"opt-goerli.g.alchemy.com";case"optimism-sepolia":return"opt-sepolia.g.alchemy.com"}Rn(!1,"unsupported network","network",e)}(e.name)}/v2/${t}`);return n.allowGzip=!0,t===Bh&&(n.retryFunc=async(e,t,n)=>(Ph("alchemy"),!0)),n}}class Th extends Eh{constructor(e){null==e&&(e="mainnet");const t=Fu.from(e);Rn("mainnet"===t.name,"unsupported network","network",e),super("https://cloudflare-eth.com/",t,{staticNetwork:t})}}const Ih=["enableCcipRead"];let Fh=1;class Lh extends eh{network;apiKey;#ct;constructor(e,t){const n=null!=t?t:null;super();const r=Fu.from(e);this.#ct=r.getPlugin("org.ethers.plugins.provider.Etherscan"),En(this,{apiKey:n,network:r}),this.getBaseUrl()}getBaseUrl(){if(this.#ct)return this.#ct.baseUrl;switch(this.network.name){case"mainnet":return"https://api.etherscan.io";case"goerli":return"https://api-goerli.etherscan.io";case"sepolia":return"https://api-sepolia.etherscan.io";case"holesky":return"https://api-holesky.etherscan.io";case"arbitrum":return"https://api.arbiscan.io";case"arbitrum-goerli":return"https://api-goerli.arbiscan.io";case"bnb":return"https://api.bscscan.com";case"bnbt":return"https://api-testnet.bscscan.com";case"matic":return"https://api.polygonscan.com";case"matic-mumbai":return"https://api-testnet.polygonscan.com";case"optimism":return"https://api-optimistic.etherscan.io";case"optimism-goerli":return"https://api-goerli-optimistic.etherscan.io"}Rn(!1,"unsupported network","network",this.network)}getUrl(e,t){const n=Object.keys(t).reduce(((e,n)=>{const r=t[n];return null!=r&&(e+=`&${n}=${r}`),e}),""),r=this.apiKey?`&apikey=${this.apiKey}`:"";return`${this.getBaseUrl()}/api?module=${e}${n}${r}`}getPostUrl(){return`${this.getBaseUrl()}/api`}getPostData(e,t){return t.module=e,t.apikey=this.apiKey,t}async detectNetwork(){return this.network}async fetch(e,t,n){const r=Fh++,s=n?this.getPostUrl():this.getUrl(e,t),i=n?this.getPostData(e,t):null;this.emit("debug",{action:"sendRequest",id:r,url:s,payload:i});const o=new no(s);o.setThrottleParams({slotInterval:1e3}),o.retryFunc=(e,t,n)=>(this.isCommunityResource()&&Ph("Etherscan"),Promise.resolve(!0)),o.processFunc=async(t,n)=>{const s=n.hasBody()?JSON.parse(ks(n.body)):{},i=("string"==typeof s.result?s.result:"").toLowerCase().indexOf("rate limit")>=0;return"proxy"===e?s&&0==s.status&&"NOTOK"==s.message&&i&&(this.emit("debug",{action:"receiveError",id:r,reason:"proxy-NOTOK",error:s}),n.throwThrottleError(s.result,2e3)):i&&(this.emit("debug",{action:"receiveError",id:r,reason:"null result",error:s.result}),n.throwThrottleError(s.result,2e3)),n},i&&(o.setHeader("content-type","application/x-www-form-urlencoded; charset=UTF-8"),o.body=Object.keys(i).map((e=>`${e}=${i[e]}`)).join("&"));const a=await o.send();try{a.assertOk()}catch(e){this.emit("debug",{action:"receiveError",id:r,error:e,reason:"assertOk"}),Pn(!1,"response error","SERVER_ERROR",{request:o,response:a})}a.hasBody()||(this.emit("debug",{action:"receiveError",id:r,error:"missing body",reason:"null body"}),Pn(!1,"missing response","SERVER_ERROR",{request:o,response:a}));const l=JSON.parse(ks(a.body));return"proxy"===e?("2.0"!=l.jsonrpc&&(this.emit("debug",{action:"receiveError",id:r,result:l,reason:"invalid JSON-RPC"}),Pn(!1,"invalid JSON-RPC response (missing jsonrpc='2.0')","SERVER_ERROR",{request:o,response:a,info:{result:l}})),l.error&&(this.emit("debug",{action:"receiveError",id:r,result:l,reason:"JSON-RPC error"}),Pn(!1,"error response","SERVER_ERROR",{request:o,response:a,info:{result:l}})),this.emit("debug",{action:"receiveRequest",id:r,result:l}),l.result):0!=l.status||"No records found"!==l.message&&"No transactions found"!==l.message?((1!=l.status||"string"==typeof l.message&&!l.message.match(/^OK/))&&(this.emit("debug",{action:"receiveError",id:r,result:l}),Pn(!1,"error response","SERVER_ERROR",{request:o,response:a,info:{result:l}})),this.emit("debug",{action:"receiveRequest",id:r,result:l}),l.result):(this.emit("debug",{action:"receiveRequest",id:r,result:l}),l.result)}_getTransactionPostData(e){const t={};for(let n in e){if(Ih.indexOf(n)>=0)continue;if(null==e[n])continue;let r=e[n];"type"===n&&0===r||"blockTag"===n&&"latest"===r||(r={type:!0,gasLimit:!0,gasPrice:!0,maxFeePerGs:!0,maxPriorityFeePerGas:!0,nonce:!0,value:!0}[n]?nr(r):"accessList"===n?"["+Gi(r).map((e=>`{address:"${e.address}",storageKeys:["${e.storageKeys.join('","')}"]}`)).join(",")+"]":Mn(r),t[n]=r)}return t}_checkError(e,t,n){let r="";if(xn(t,"SERVER_ERROR")){try{r=t.info.result.error.message}catch(e){}if(!r)try{r=t.info.message}catch(e){}}if("estimateGas"===e.method&&!r.match(/revert/i)&&r.match(/insufficient funds/i)&&Pn(!1,"insufficient funds","INSUFFICIENT_FUNDS",{transaction:e.transaction}),("call"===e.method||"estimateGas"===e.method)&&r.match(/execution reverted/i)){let n="";try{n=t.info.result.error.data}catch(t){}const r=ki.getBuiltinCallException(e.method,e.transaction,n);throw r.info={request:e,error:t},r}if(r&&"broadcastTransaction"===e.method){const t=hu.from(e.signedTransaction);r.match(/replacement/i)&&r.match(/underpriced/i)&&Pn(!1,"replacement fee too low","REPLACEMENT_UNDERPRICED",{transaction:t}),r.match(/insufficient funds/)&&Pn(!1,"insufficient funds for intrinsic transaction cost","INSUFFICIENT_FUNDS",{transaction:t}),r.match(/same hash was already imported|transaction nonce is too low|nonce too low/)&&Pn(!1,"nonce has already been used","NONCE_EXPIRED",{transaction:t})}throw t}async _detectNetwork(){return this.network}async _perform(e){switch(e.method){case"chainId":return this.network.chainId;case"getBlockNumber":return this.fetch("proxy",{action:"eth_blockNumber"});case"getGasPrice":return this.fetch("proxy",{action:"eth_gasPrice"});case"getPriorityFee":if("mainnet"===this.network.name)return"1000000000";if("optimism"===this.network.name)return"1000000";throw new Error("fallback onto the AbstractProvider default");case"getBalance":return this.fetch("account",{action:"balance",address:e.address,tag:e.blockTag});case"getTransactionCount":return this.fetch("proxy",{action:"eth_getTransactionCount",address:e.address,tag:e.blockTag});case"getCode":return this.fetch("proxy",{action:"eth_getCode",address:e.address,tag:e.blockTag});case"getStorage":return this.fetch("proxy",{action:"eth_getStorageAt",address:e.address,position:e.position,tag:e.blockTag});case"broadcastTransaction":return this.fetch("proxy",{action:"eth_sendRawTransaction",hex:e.signedTransaction},!0).catch((t=>this._checkError(e,t,e.signedTransaction)));case"getBlock":if("blockTag"in e)return this.fetch("proxy",{action:"eth_getBlockByNumber",tag:e.blockTag,boolean:e.includeTransactions?"true":"false"});Pn(!1,"getBlock by blockHash not supported by Etherscan","UNSUPPORTED_OPERATION",{operation:"getBlock(blockHash)"});case"getTransaction":return this.fetch("proxy",{action:"eth_getTransactionByHash",txhash:e.hash});case"getTransactionReceipt":return this.fetch("proxy",{action:"eth_getTransactionReceipt",txhash:e.hash});case"call":{if("latest"!==e.blockTag)throw new Error("EtherscanProvider does not support blockTag for call");const t=this._getTransactionPostData(e.transaction);t.module="proxy",t.action="eth_call";try{return await this.fetch("proxy",t,!0)}catch(t){return this._checkError(e,t,e.transaction)}}case"estimateGas":{const t=this._getTransactionPostData(e.transaction);t.module="proxy",t.action="eth_estimateGas";try{return await this.fetch("proxy",t,!0)}catch(t){return this._checkError(e,t,e.transaction)}}}return super._perform(e)}async getNetwork(){return this.network}async getEtherPrice(){return"mainnet"!==this.network.name?0:parseFloat((await this.fetch("stats",{action:"ethprice"})).ethusd)}async getContract(e){let t=this._getAddress(e);var n;(n=t)&&"function"==typeof n.then&&(t=await t);try{const e=await this.fetch("contract",{action:"getabi",address:t}),n=JSON.parse(e);return new Xo(t,n,this)}catch(e){return null}}isCommunityResource(){return null==this.apiKey}}const Uh=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("unable to locate global object")}().WebSocket;class Mh{#ke;#Z;get filter(){return JSON.parse(this.#Z)}#ut;#ht;#dt;constructor(e,t){this.#ke=e,this.#Z=JSON.stringify(t),this.#ut=null,this.#ht=null,this.#dt=null}start(){this.#ut=this.#ke.send("eth_subscribe",this.filter).then((e=>(this.#ke._register(e,this),e)))}stop(){this.#ut.then((e=>{this.#ke.send("eth_unsubscribe",[e])})),this.#ut=null}pause(e){Pn(e,"preserve logs while paused not supported by SocketSubscriber yet","UNSUPPORTED_OPERATION",{operation:"pause(false)"}),this.#ht=!!e}resume(){this.#ht=null}_handleMessage(e){if(null!=this.#ut&&null===this.#ht){let t=this.#dt;t=null==t?this._emit(this.#ke,e):t.then((async()=>{await this._emit(this.#ke,e)})),this.#dt=t.then((()=>{this.#dt===t&&(this.#dt=null)}))}}async _emit(e,t){throw new Error("sub-classes must implemente this; _emit")}}class Dh extends Mh{constructor(e){super(e,["newHeads"])}async _emit(e,t){e.emit("block",parseInt(t.number))}}class $h extends Mh{constructor(e){super(e,["newPendingTransactions"])}async _emit(e,t){e.emit("pending",t)}}class jh extends Mh{#pt;get logFilter(){return JSON.parse(this.#pt)}constructor(e,t){super(e,["logs",t]),this.#pt=JSON.stringify(t)}async _emit(e,t){e.emit(this.logFilter,e._wrapLog(t,e._network))}}class Vh extends Ah{#ft;#Te;#mt;constructor(e,t){const n=Object.assign({},null!=t?t:{});Rn(null==n.batchMaxCount||1===n.batchMaxCount,"sockets-based providers do not support batches","options.batchMaxCount",t),n.batchMaxCount=1,null==n.staticNetwork&&(n.staticNetwork=!0),super(e,n),this.#ft=new Map,this.#Te=new Map,this.#mt=new Map}_getSubscriber(e){switch(e.type){case"close":return new Ku("close");case"block":return new Dh(this);case"pending":return new $h(this);case"event":return new jh(this,e.filter);case"orphan":if("drop-log"===e.filter.orphan)return new Ku("drop-log")}return super._getSubscriber(e)}_register(e,t){this.#Te.set(e,t);const n=this.#mt.get(e);if(n){for(const e of n)t._handleMessage(e);this.#mt.delete(e)}}async _send(e){Rn(!Array.isArray(e),"WebSocket does not support batch send","payload",e);const t=new Promise(((t,n)=>{this.#ft.set(e.id,{payload:e,resolve:t,reject:n})}));return await this._waitUntilReady(),await this._write(JSON.stringify(e)),[await t]}async _processMessage(e){const t=JSON.parse(e);if(t&&"object"==typeof t&&"id"in t){const e=this.#ft.get(t.id);if(null==e)return void this.emit("error",Nn("received result for unknown id","UNKNOWN_ERROR",{reasonCode:"UNKNOWN_ID",result:t}));this.#ft.delete(t.id),e.resolve(t)}else{if(!t||"eth_subscription"!==t.method)return void this.emit("error",Nn("received unexpected message","UNKNOWN_ERROR",{reasonCode:"UNEXPECTED_MESSAGE",result:t}));{const e=t.params.subscription,n=this.#Te.get(e);if(n)n._handleMessage(t.params.result);else{let n=this.#mt.get(e);null==n&&(n=[],this.#mt.set(e,n)),n.push(t.params.result)}}}}async _write(e){throw new Error("sub-classes must override this")}}class Hh extends Vh{#lt;#gt;get websocket(){if(null==this.#gt)throw new Error("websocket closed");return this.#gt}constructor(e,t,n){super(t,n),"string"==typeof e?(this.#lt=()=>new Uh(e),this.#gt=this.#lt()):"function"==typeof e?(this.#lt=e,this.#gt=e()):(this.#lt=null,this.#gt=e),this.websocket.onopen=async()=>{try{await this._start(),this.resume()}catch(e){console.log("failed to start WebsocketProvider",e)}},this.websocket.onmessage=e=>{this._processMessage(e.data)}}async _write(e){this.websocket.send(e)}async destroy(){null!=this.#gt&&(this.#gt.close(),this.#gt=null),super.destroy()}}const Gh="84842078b09946638c03157f83405213";class zh extends Hh{projectId;projectSecret;constructor(e,t){const n=new qh(e,t),r=n._getConnection();Pn(!r.credentials,"INFURA WebSocket project secrets unsupported","UNSUPPORTED_OPERATION",{operation:"InfuraProvider.getWebSocketProvider()"}),super(r.url.replace(/^http/i,"ws").replace("/v3/","/ws/v3/"),e),En(this,{projectId:n.projectId,projectSecret:n.projectSecret})}isCommunityResource(){return this.projectId===Gh}}class qh extends Eh{projectId;projectSecret;constructor(e,t,n){null==e&&(e="mainnet");const r=Fu.from(e);null==t&&(t=Gh),null==n&&(n=null),super(qh.getRequest(r,t,n),r,{staticNetwork:r}),En(this,{projectId:t,projectSecret:n})}_getProvider(e){try{return new qh(e,this.projectId,this.projectSecret)}catch(e){}return super._getProvider(e)}isCommunityResource(){return this.projectId===Gh}static getWebSocketProvider(e,t){return new zh(e,t)}static getRequest(e,t,n){null==t&&(t=Gh),null==n&&(n=null);const r=new no(`https://${function(e){switch(e){case"mainnet":return"mainnet.infura.io";case"goerli":return"goerli.infura.io";case"sepolia":return"sepolia.infura.io";case"arbitrum":return"arbitrum-mainnet.infura.io";case"arbitrum-goerli":return"arbitrum-goerli.infura.io";case"arbitrum-sepolia":return"arbitrum-sepolia.infura.io";case"base":return"base-mainnet.infura.io";case"base-goerlia":return"base-goerli.infura.io";case"base-sepolia":return"base-sepolia.infura.io";case"bnb":return"bnbsmartchain-mainnet.infura.io";case"bnbt":return"bnbsmartchain-testnet.infura.io";case"linea":return"linea-mainnet.infura.io";case"linea-goerli":return"linea-goerli.infura.io";case"matic":return"polygon-mainnet.infura.io";case"matic-mumbai":return"polygon-mumbai.infura.io";case"optimism":return"optimism-mainnet.infura.io";case"optimism-goerli":return"optimism-goerli.infura.io";case"optimism-sepolia":return"optimism-sepolia.infura.io"}Rn(!1,"unsupported network","network",e)}(e.name)}/v3/${t}`);return r.allowGzip=!0,n&&r.setCredentials("",n),t===Gh&&(r.retryFunc=async(e,t,n)=>(Ph("InfuraProvider"),!0)),r}}const Qh="919b412a057b5e9c9b6dce193c5a60242d6efadb";class Jh extends Eh{token;constructor(e,t){null==e&&(e="mainnet");const n=Fu.from(e);null==t&&(t=Qh),super(Jh.getRequest(n,t),n,{staticNetwork:n}),En(this,{token:t})}_getProvider(e){try{return new Jh(e,this.token)}catch(e){}return super._getProvider(e)}isCommunityResource(){return this.token===Qh}static getRequest(e,t){null==t&&(t=Qh);const n=new no(`https://${function(e){switch(e){case"mainnet":return"ethers.quiknode.pro";case"goerli":return"ethers.ethereum-goerli.quiknode.pro";case"sepolia":return"ethers.ethereum-sepolia.quiknode.pro";case"holesky":return"ethers.ethereum-holesky.quiknode.pro";case"arbitrum":return"ethers.arbitrum-mainnet.quiknode.pro";case"arbitrum-goerli":return"ethers.arbitrum-goerli.quiknode.pro";case"arbitrum-sepolia":return"ethers.arbitrum-sepolia.quiknode.pro";case"base":return"ethers.base-mainnet.quiknode.pro";case"base-goerli":return"ethers.base-goerli.quiknode.pro";case"base-spolia":return"ethers.base-sepolia.quiknode.pro";case"bnb":return"ethers.bsc.quiknode.pro";case"bnbt":return"ethers.bsc-testnet.quiknode.pro";case"matic":return"ethers.matic.quiknode.pro";case"matic-mumbai":return"ethers.matic-testnet.quiknode.pro";case"optimism":return"ethers.optimism.quiknode.pro";case"optimism-goerli":return"ethers.optimism-goerli.quiknode.pro";case"optimism-sepolia":return"ethers.optimism-sepolia.quiknode.pro";case"xdai":return"ethers.xdai.quiknode.pro"}Rn(!1,"unsupported network","network",e)}(e.name)}/${t}`);return n.allowGzip=!0,t===Qh&&(n.retryFunc=async(e,t,n)=>(Ph("QuickNodeProvider"),!0)),n}}const Kh=BigInt("1"),Wh=BigInt("2");function Yh(){return(new Date).getTime()}function Zh(e){return JSON.stringify(e,((e,t)=>"bigint"==typeof t?{type:"bigint",value:t.toString()}:t))}const Xh={stallTimeout:400,priority:1,weight:1},ed={blockNumber:-2,requests:0,lateResponses:0,errorResponses:0,outOfSync:-1,unsupportedEvents:0,rollingDuration:0,score:0,_network:null,_updateNumber:null,_totalTime:0,_lastFatalError:null,_lastFatalErrorTimestamp:0};function td(e){if(null==e)return"null";if(Array.isArray(e))return"["+e.map(td).join(",")+"]";if("object"==typeof e&&"function"==typeof e.toJSON)return td(e.toJSON());switch(typeof e){case"boolean":case"symbol":return e.toString();case"bigint":case"number":return BigInt(e).toString();case"string":return JSON.stringify(e);case"object":{const t=Object.keys(e);return t.sort(),"{"+t.map((t=>`${JSON.stringify(t)}:${td(e[t])}`)).join(",")+"}"}}throw console.log("Could not serialize",e),new Error("Hmm...")}function nd(e){if("error"in e){const t=e.error;return{tag:td(t),value:t}}const t=e.result;return{tag:td(t),value:t}}function rd(e,t){const n=new Map;for(const{value:e,tag:r,weight:s}of t){const t=n.get(r)||{value:e,weight:0};t.weight+=s,n.set(r,t)}let r=null;for(const t of n.values())t.weight>=e&&(!r||t.weight>r.weight)&&(r=t);if(r)return r.value}function sd(e,t){let n=0;const r=new Map;let s=null;const i=[];for(const{value:e,tag:o,weight:a}of t)if(e instanceof Error){const t=r.get(o)||{value:e,weight:0};t.weight+=a,r.set(o,t),(null==s||t.weight>s.weight)&&(s=t)}else i.push(BigInt(e)),n+=a;if(n<e)return s&&s.weight>=e?s.value:void 0;i.sort(((e,t)=>e<t?-1:t>e?1:0));const o=Math.floor(i.length/2);return i.length%2?i[o]:(i[o-1]+i[o]+Kh)/Wh}function id(e,t){const n=rd(e,t);if(void 0!==n)return n;for(const e of t)if(e.value)return e.value}class od extends eh{quorum;eventQuorum;eventWorkers;#yt;#bt;#wt;constructor(e,t,n){super(t,n),this.#yt=e.map((e=>e instanceof eh?Object.assign({provider:e},Xh,ed):Object.assign({},Xh,e,ed))),this.#bt=-2,this.#wt=null,n&&null!=n.quorum?this.quorum=n.quorum:this.quorum=Math.ceil(this.#yt.reduce(((e,t)=>e+t.weight),0)/2),this.eventQuorum=1,this.eventWorkers=1,Rn(this.quorum<=this.#yt.reduce(((e,t)=>e+t.weight),0),"quorum exceed provider wieght","quorum",this.quorum)}get providerConfigs(){return this.#yt.map((e=>{const t=Object.assign({},e);for(const e in t)"_"===e[0]&&delete t[e];return t}))}async _detectNetwork(){return Fu.from(Kn(await this._perform({method:"chainId"})))}async _translatePerform(e,t){switch(t.method){case"broadcastTransaction":return await e.broadcastTransaction(t.signedTransaction);case"call":return await e.call(Object.assign({},t.transaction,{blockTag:t.blockTag}));case"chainId":return(await e.getNetwork()).chainId;case"estimateGas":return await e.estimateGas(t.transaction);case"getBalance":return await e.getBalance(t.address,t.blockTag);case"getBlock":{const n="blockHash"in t?t.blockHash:t.blockTag;return await e.getBlock(n,t.includeTransactions)}case"getBlockNumber":return await e.getBlockNumber();case"getCode":return await e.getCode(t.address,t.blockTag);case"getGasPrice":return(await e.getFeeData()).gasPrice;case"getPriorityFee":return(await e.getFeeData()).maxPriorityFeePerGas;case"getLogs":return await e.getLogs(t.filter);case"getStorage":return await e.getStorage(t.address,t.position,t.blockTag);case"getTransaction":return await e.getTransaction(t.hash);case"getTransactionCount":return await e.getTransactionCount(t.address,t.blockTag);case"getTransactionReceipt":return await e.getTransactionReceipt(t.hash);case"getTransactionResult":return await e.getTransactionResult(t.hash)}}#vt(e){const t=Array.from(e).map((e=>e.config)),n=this.#yt.slice();!function(e){for(let t=e.length-1;t>0;t--){const n=Math.floor(Math.random()*(t+1)),r=e[t];e[t]=e[n],e[n]=r}}(n),n.sort(((e,t)=>e.priority-t.priority));for(const e of n)if(!e._lastFatalError&&-1===t.indexOf(e))return e;return null}#At(e,t){const n=this.#vt(e);if(null==n)return null;const r={config:n,result:null,didBump:!1,perform:null,staller:null},s=Yh();return r.perform=(async()=>{try{n.requests++;const e=await this._translatePerform(n.provider,t);r.result={result:e}}catch(e){n.errorResponses++,r.result={error:e}}const e=Yh()-s;n._totalTime+=e,n.rollingDuration=.95*n.rollingDuration+.05*e,r.perform=null})(),r.staller=(async()=>{var e;await(e=n.stallTimeout,new Promise((t=>{setTimeout(t,e)}))),r.staller=null})(),e.add(r),r}async#_t(){let e=this.#wt;if(!e){const t=[];this.#yt.forEach((e=>{t.push((async()=>{await async function(e,t){for(;(e.blockNumber<0||e.blockNumber<0)&&(e._updateNumber||(e._updateNumber=(async()=>{try{const t=await e.provider.getBlockNumber();t>e.blockNumber&&(e.blockNumber=t)}catch(t){e.blockNumber=-2,e._lastFatalError=t,e._lastFatalErrorTimestamp=Yh()}e._updateNumber=null})()),await e._updateNumber,e.outOfSync++,!e._lastFatalError););}(e),e._lastFatalError||(e._network=await e.provider.getNetwork())})())})),this.#wt=e=(async()=>{await Promise.all(t);let e=null;for(const t of this.#yt){if(t._lastFatalError)continue;const n=t._network;null==e?e=n.chainId:n.chainId!==e&&Pn(!1,"cannot mix providers on different networks","UNSUPPORTED_OPERATION",{operation:"new FallbackProvider"})}})()}await e}async#Et(e,t){const n=[];for(const t of e)if(null!=t.result){const{tag:e,value:r}=nd(t.result);n.push({tag:e,value:r,weight:t.config.weight})}if(!(n.reduce(((e,t)=>e+t.weight),0)<this.quorum)){switch(t.method){case"getBlockNumber":{-2===this.#bt&&(this.#bt=Math.ceil(Xn(sd(this.quorum,this.#yt.filter((e=>!e._lastFatalError)).map((e=>({value:e.blockNumber,tag:Xn(e.blockNumber).toString(),weight:e.weight})))))));const e=function(e,t){if(1===e)return Xn(sd(e,t),"%internal");const n=new Map,r=(e,t)=>{const r=n.get(e)||{result:e,weight:0};r.weight+=t,n.set(e,r)};for(const{weight:e,value:n}of t){const t=Xn(n);r(t-1,e),r(t,e),r(t+1,e)}let s,i=0;for(const{weight:t,result:r}of n.values())t>=e&&(t>i||null!=s&&t===i&&r>s)&&(i=t,s=r);return s}(this.quorum,n);if(void 0===e)return;return e>this.#bt&&(this.#bt=e),this.#bt}case"getGasPrice":case"getPriorityFee":case"estimateGas":return sd(this.quorum,n);case"getBlock":return"blockTag"in t&&"pending"===t.blockTag?id(this.quorum,n):rd(this.quorum,n);case"call":case"chainId":case"getBalance":case"getTransactionCount":case"getCode":case"getStorage":case"getTransaction":case"getTransactionReceipt":case"getLogs":return rd(this.quorum,n);case"broadcastTransaction":return id(this.quorum,n)}Pn(!1,"unsupported method","UNSUPPORTED_OPERATION",{operation:`_perform(${Zh(t.method)})`})}}async#kt(e,t){if(0===e.size)throw new Error("no runners?!");const n=[];let r=0;for(const t of e)t.perform&&n.push(t.perform),t.staller?n.push(t.staller):t.didBump||(t.didBump=!0,r++);const s=await this.#Et(e,t);if(void 0!==s){if(s instanceof Error)throw s;return s}for(let n=0;n<r;n++)this.#At(e,t);return Pn(n.length>0,"quorum not met","SERVER_ERROR",{request:"%sub-requests",info:{request:t,results:Array.from(e).map((e=>Zh(e.result)))}}),await Promise.race(n),await this.#kt(e,t)}async _perform(e){if("broadcastTransaction"===e.method){const t=this.#yt.map((e=>null)),n=this.#yt.map((async({provider:n,weight:r},s)=>{try{const i=await n._perform(e);t[s]=Object.assign(nd({result:i}),{weight:r})}catch(e){t[s]=Object.assign(nd({error:e}),{weight:r})}}));for(;;){const e=t.filter((e=>null!=e));for(const{value:t}of e)if(!(t instanceof Error))return t;const r=rd(this.quorum,t.filter((e=>null!=e)));if(xn(r,"INSUFFICIENT_FUNDS"))throw r;const s=n.filter(((e,n)=>null==t[n]));if(0===s.length)break;await Promise.race(s)}const r=id(this.quorum,t);if(Pn(void 0!==r,"problem multi-broadcasting","SERVER_ERROR",{request:"%sub-requests",info:{request:e,results:t.map(Zh)}}),r instanceof Error)throw r;return r}await this.#_t();const t=new Set;let n=0;for(;;){const r=this.#At(t,e);if(null==r)break;if(n+=r.config.weight,n>=this.quorum)break}const r=await this.#kt(t,e);for(const e of t)e.perform&&null==e.result&&e.config.lateResponses++;return r}async destroy(){for(const{provider:e}of this.#yt)e.destroy();super.destroy()}}const ad="goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" "),ld=JSON.parse('{"OL":"0x74558B39791BaAA5eB40CDF55F4Bd0928a501C71","Cl":"0xFbd7c085a15411820bAb1Ba85f14cC9E25FE2d3B","GQ":"0x33494c24d904B87B94A1cc9870D966780D56093c"}'),cd="address project, address deployer, string description",ud=ld.OL,hd=ld.GQ,dd=["function newProject(string projectName, string abbreviation, string description, address payment) returns (address)",`event ProjectDeployed(${cd})`,`function getProject(string name) view returns (tuple(${cd}))`,"function newContract(string name, string project, tuple(bytes32, bytes)[] genesisModules, address payment) returns (address)","function modifyContract(string project, address target, tuple(uint8, tuple(bytes32, bytes))[] moduleOperations, address payment)"];var pd;function fd(e){return new Xo(ud,dd,e)}async function md(e){return JSON.parse(localStorage.getItem("kanaloa.imported_projects")||"[]")}!function(e){e[e.INSTALL=0]="INSTALL",e[e.UNINSTALL=1]="UNINSTALL",e[e.UPGRADE=2]="UPGRADE",e[e.REINITIALIZE=3]="REINITIALIZE"}(pd||(pd={}));class gd{constructor(e){this.parent=e}async getProjects(){return await md(this.parent.wallet)}async newProject(e){const t=await async function(e,t){const n=fd(t);return await(await n.newProject(e.projectName,e.abbreviation,e.description,hd)).wait().then((async()=>(await n.getProject(e.projectName)).project))}(e,await this.parent.signer);return localStorage.setItem("kanaloa.imported_projects",JSON.stringify([...await md(this.parent.wallet),{address:t,project:e.projectName,deployer:await((await this.parent.signer)?.getAddress()),description:e.description}])),t}async newContract(e){await async function(e,t){const n=fd(t),r=await(await n.newContract(e.name,e.project,e.genesisModules.map((e=>[e.moduleSignature,e.initParams])),ld.GQ)).wait();return r}(e,await this.parent.signer)}async modifyContract(e){await async function(e,t){const n=fd(t),r=await(await n.modifyContract(e.project,e.target,e.moduleOperations.map((e=>[e[0],[e[1].moduleSignature,e[1].initParams]])),ld.GQ)).wait();return r}(e,await this.parent.signer)}}const yd=ld.Cl,bd=["function getOperationCost(uint8 op, address target, bytes32 info, address token, address client) view returns (uint256)","function calculateNewContractInvoice(address target, tuple(bytes32, bytes)[] genesisModules, address payment, address client) view returns (tuple(bool, uint256))","function calculateModifyContractInvoice(address target, tuple(uint8, tuple(bytes32, bytes))[] moduleOperations, address payment, address client) view returns (tuple(bool, uint256))"];var wd;!function(e){e[e.ENABLED=0]="ENABLED",e[e.NEW_PROJECT=1]="NEW_PROJECT",e[e.NEW_CONTRACT=2]="NEW_CONTRACT",e[e.NEW_MODULE=3]="NEW_MODULE",e[e.EDIT_CONTRACT=4]="EDIT_CONTRACT",e[e.EDIT_MODULE=5]="EDIT_MODULE"}(wd||(wd={}));class vd{constructor(e){this.parent=e}async calculateInvoice(e,t){return await async function(e,t,n){const r=new Xo(yd,bd,n),s=e==wd.NEW_CONTRACT?e=>[e.moduleSignature,e.initParams]:e=>[e[0],[e[1].moduleSignature,e[1].initParams]],[i,o]=e==wd.NEW_PROJECT?[!0,await r.getOperationCost(wd.NEW_PROJECT,io,wl,t.token,t.client)]:await r[e==wd.NEW_CONTRACT?"calculateNewContractInvoice":"calculateModifyContractInvoice"](t.target,t.payload.map(s),t.token,t.client);return i?o:void 0}(e,t,this.parent.wallet)}async requestAllowance(e,t=ld.GQ){const n=new Xo(t,["function allowance(address owner, address spender) view returns (uint256)","function approve(address spender, uint256 amount) returns (bool)"],await this.parent.signer);if(await n.allowance(await(await this.parent.signer).getAddress(),yd)<e)try{await(await n.approve(yd,e)).wait()}catch(e){return!1}return!0}}const Ad=new CustomEvent("wallet-changed");function _d(e){e.target.requestUpdate()}const Ed=new class{get signer(){return this._signer}set signer(e){this._signer=e,null!=e&&e.then((()=>{this.subscribedElements.forEach((e=>e.dispatchEvent(Ad)))}))}get avatar(){return this._avatar}constructor(){this.subscribedElements=new Set,this.KANA_TOKEN=ld.GQ,this.projectRegistry=new gd(this),this.paymentsProcessor=new vd(this),null!=window.ethereum?(this.wallet=new Ch(window.ethereum),this._signer=this.wallet.listAccounts().then((()=>this.wallet.getSigner())),this.signer=this._signer):(this.wallet=function(e,t){null==t&&(t={});const n=e=>"-"!==t[e]&&("string"==typeof t.exclusive?e===t.exclusive:!Array.isArray(t.exclusive)||-1!==t.exclusive.indexOf(e));if(e.match(/^https?:/))return new Eh(e);if(e.match(/^wss?:/)||(r=e)&&"function"==typeof r.send&&"function"==typeof r.close)return new Hh(e);var r;let s=null;try{s=Fu.from(e)}catch(e){}const i=[];if(n("publicPolygon")&&s&&"matic"===s.name&&i.push(new Eh("https://polygon-rpc.com/",s,{staticNetwork:s})),n("alchemy"))try{i.push(new Sh(e,t.alchemy))}catch(e){}if(n("ankr")&&null!=t.ankr)try{i.push(new Oh(e,t.ankr))}catch(e){}if(n("cloudflare"))try{i.push(new Th(e))}catch(e){}if(n("etherscan"))try{i.push(new Lh(e,t.etherscan))}catch(e){}if(n("infura"))try{let n,r=t.infura;"object"==typeof r&&(n=r.projectSecret,r=r.projectId),i.push(new qh(e,r,n))}catch(e){}if(n("quicknode"))try{let n=t.quicknode;i.push(new Jh(e,n))}catch(e){}if(Pn(i.length,"unsupported default network","UNSUPPORTED_OPERATION",{operation:"getDefaultProvider"}),1===i.length)return i[0];let o=Math.floor(i.length/2);return o>2&&(o=2),s&&-1!==ad.indexOf(s.name)&&(o=1),t&&t.quorum&&(o=t.quorum),new od(i,void 0,{quorum:o})}("mainnet"),this._signer=new Promise((e=>e(void 0))))}async requestSigner(){if(this.readOnly)throw new Error("KanaloaEthers: attempting to connect to read-only provider");return this.wallet.getSigner(0).then((e=>e))}subscribe(e){e.addEventListener(Ad.type,_d),this.subscribedElements.add(e)}unsubscribe(e){e.removeEventListener(Ad.type,_d),this.subscribedElements.delete(e)}get readOnly(){return!(this.wallet instanceof Ch)}};var kd=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class xd extends he{constructor(){super(),this.items=[],this.isLoading=!0}static get styles(){return[l`
                :host {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 2rem;
                    padding: 1rem;
                    flex: 1;
                }

                h1 {
                    font-size: 3rem;
                    display: block;
                    width: 100%;
                }

                .cards {
                    display: flex;
                    flex: 1;
                    flex-wrap: wrap;
                    gap: 1rem;
                    justify-content: start;
                    align-items: start;
                    width: 100%;
                }

                kana-button {
                    min-width: fit-content;
                    width: 50%;
                    font-size: 1.5rem;
                    min-height: 4rem;
                    margin-bottom: 3rem;
                }
                
                a {
                    min-width: fit-content;
                    width: 100%;
                    display: flex;
                    justify-content: center;
                    text-decoration: none;
                }
            `]}connectedCallback(){super.connectedCallback(),this.fetchData()}}kd([ge({type:Array})],xd.prototype,"items",void 0),kd([ge({type:Boolean,reflect:!0})],xd.prototype,"isLoading",void 0);let Cd=class extends xd{async fetchData(){this.isLoading=!0;const e=await Ed.projectRegistry.getProjects();Ed.readOnly&&(this.isLoading=!1,this.items=[]);const t=[];for(let n of e){const e=new Xo(n.address,["function balanceOf(address owner) view returns (uint256 balance)","function name() view returns (string)","function symbol() view returns (string)"],Ed.wallet);try{if(0!=await e.balanceOf(await((await Ed.signer)?.getAddress()))){const e=n.address,r=n.project;t.push(new Te({name:r,button:{text:"Contracts",link:`/projects/${e}`},address:e,description:n.description}))}}catch(e){console.error(e)}}this.isLoading=!1,this.items=t}render(){return Q`
            <h1>My Projects</h1>
            <div class="cards">
                ${wn(this.isLoading,(()=>Q`<loading-icon></loading-icon>`),(()=>bn(this.items,(e=>e.name),(e=>Q`${e}`))))}
            </div>
            <a href="new-project">
                <kana-button>Create new project</kana-button>
            </a>
        `}};Cd=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe("projects-page")],Cd);const Nd=Symbol();class Pd{get taskComplete(){return this.t||(1===this.status?this.t=new Promise(((e,t)=>{this.i=e,this.o=t})):3===this.status?this.t=Promise.reject(this.h):this.t=Promise.resolve(this.l)),this.t}constructor(e,t,n){this.u=0,this.status=0,(this.p=e).addController(this);const r="object"==typeof t?t:{task:t,args:n};this._=r.task,this.v=r.args,this.j=r.argsEqual??Rd,this.m=r.onComplete,this.g=r.onError,this.autoRun=r.autoRun??!0,"initialValue"in r&&(this.l=r.initialValue,this.status=2,this.k=this.A?.())}hostUpdate(){!0===this.autoRun&&this.O()}hostUpdated(){"afterUpdate"===this.autoRun&&this.O()}A(){if(void 0===this.v)return;const e=this.v();if(!Array.isArray(e))throw Error("The args function must return an array");return e}async O(){const e=this.A(),t=this.k;this.k=e,e===t||void 0===e||void 0!==t&&this.j(t,e)||await this.run(e)}async run(e){let t,n;e??=this.A(),this.k=e,1===this.status?this.T?.abort():(this.t=void 0,this.i=void 0,this.o=void 0),this.status=1,"afterUpdate"===this.autoRun?queueMicrotask((()=>this.p.requestUpdate())):this.p.requestUpdate();const r=++this.u;this.T=new AbortController;let s=!1;try{t=await this._(e,{signal:this.T.signal})}catch(e){s=!0,n=e}if(this.u===r){if(t===Nd)this.status=0;else{if(!1===s){try{this.m?.(t)}catch{}this.status=2,this.i?.(t)}else{try{this.g?.(n)}catch{}this.status=3,this.o?.(n)}this.l=t,this.h=n}this.p.requestUpdate()}}abort(e){1===this.status&&this.T?.abort(e)}get value(){return this.l}get error(){return this.h}render(e){switch(this.status){case 0:return e.initial?.();case 1:return e.pending?.();case 2:return e.complete?.(this.value);case 3:return e.error?.(this.error);default:throw Error("Unexpected status: "+this.status)}}}const Rd=(e,t)=>e===t||e.length===t.length&&e.every(((e,n)=>!E(e,t[n]))),{I:Od}=$t,Bd=Fe((e=>class extends e{get slots(){return{}}constructor(){super(),this.__privateSlots=new Set(null)}connectedCallback(){super.connectedCallback(),this._connectSlotMixin()}__renderAsNodes(e){const t=(ShadowRoot.prototype.createElement?this.shadowRoot:document).createElement("div"),{creationScope:n,host:r}=this.renderOptions;return Vt(e,t,{creationScope:n,host:r}),Array.from(t.childNodes)}_connectSlotMixin(){this.__isConnectedSlotMixin||(Object.keys(this.slots).forEach((e=>{if(!(""===e?Array.from(this.children).find((e=>!e.hasAttribute("slot"))):Array.from(this.children).find((t=>t.slot===e)))){const t=this.slots[e]();let n=[];((e,t)=>void 0!==(null==e?void 0:e._$litType$))(t)?n=this.__renderAsNodes(t):Array.isArray(t)||(n=[t]),n.forEach((t=>{t instanceof Node&&(t instanceof Element&&""!==e&&t.setAttribute("slot",e),this.appendChild(t),this.__privateSlots.add(e))}))}})),this.__isConnectedSlotMixin=!0)}_isPrivateSlot(e){return this.__privateSlots.has(e)}})),Sd=[Node.DOCUMENT_POSITION_PRECEDING,Node.DOCUMENT_POSITION_CONTAINS,Node.DOCUMENT_POSITION_CONTAINS|Node.DOCUMENT_POSITION_PRECEDING];function Td(e,{reverse:t}={}){const n=e.filter((e=>e));return n.sort(((e,t)=>{const n=e.compareDocumentPosition(t);return Sd.includes(n)?Jt?-1:1:Jt?1:-1})),t&&n.reverse(),n}class Id{constructor(e){this.type="unparseable",this.viewValue=e}toString(){return JSON.stringify({type:this.type,viewValue:this.viewValue})}}const Fd=Fe((e=>class extends e{constructor(){super(),this._parentFormGroup=void 0}connectedCallback(){super.connectedCallback(),this.dispatchEvent(new CustomEvent("form-element-register",{detail:{element:this},bubbles:!0}))}disconnectedCallback(){super.disconnectedCallback(),this.__unregisterFormElement()}__unregisterFormElement(){this._parentFormGroup&&this._parentFormGroup.removeFormElement(this)}})),Ld=Fe((e=>class extends(Fd(Le(Bd(e)))){static get properties(){return{name:{type:String,reflect:!0},readOnly:{type:Boolean,attribute:"readonly",reflect:!0},label:String,labelSrOnly:{type:Boolean,attribute:"label-sr-only",reflect:!0},helpText:{type:String,attribute:"help-text"},modelValue:{attribute:!1},_ariaLabelledNodes:{attribute:!1},_ariaDescribedNodes:{attribute:!1},_repropagationRole:{attribute:!1},_isRepropagationEndpoint:{attribute:!1}}}get label(){return this.__label||this._labelNode&&this._labelNode.textContent||""}set label(e){const t=this.label;this.__label=e,this.requestUpdate("label",t)}get helpText(){return this.__helpText||this._helpTextNode&&this._helpTextNode.textContent||""}set helpText(e){const t=this.helpText;this.__helpText=e,this.requestUpdate("helpText",t)}get fieldName(){return this.__fieldName||this.label||this.name||""}set fieldName(e){this.__fieldName=e}get slots(){return{...super.slots,label:()=>{const e=document.createElement("label");return e.textContent=this.label,e},"help-text":()=>{const e=document.createElement("div");return e.textContent=this.helpText,e}}}get _inputNode(){return this.__getDirectSlotChild("input")}get _labelNode(){return this.__getDirectSlotChild("label")}get _helpTextNode(){return this.__getDirectSlotChild("help-text")}get _feedbackNode(){return this.__getDirectSlotChild("feedback")}constructor(){super(),this.name="",this.readOnly=!1,this.label="",this.labelSrOnly=!1,this.helpText="",this._inputId=function(e=""){return`${e.length>0?`${e}-`:""}${Math.random().toString(36).substr(2,10)}`}(this.localName),this._ariaLabelledNodes=[],this._ariaDescribedNodes=[],this._repropagationRole="child",this._isRepropagationEndpoint=!1,this.addEventListener("model-value-changed",this.__repropagateChildrenValues),this._onLabelClick=this._onLabelClick.bind(this)}connectedCallback(){super.connectedCallback(),this._enhanceLightDomClasses(),this._enhanceLightDomA11y(),this._triggerInitialModelValueChangedEvent(),this._labelNode&&this._labelNode.addEventListener("click",this._onLabelClick)}disconnectedCallback(){super.disconnectedCallback(),this._labelNode&&this._labelNode.removeEventListener("click",this._onLabelClick)}updated(e){super.updated(e),e.has("_ariaLabelledNodes")&&this.__reflectAriaAttr("aria-labelledby",this._ariaLabelledNodes,this.__reorderAriaLabelledNodes),e.has("_ariaDescribedNodes")&&this.__reflectAriaAttr("aria-describedby",this._ariaDescribedNodes,this.__reorderAriaDescribedNodes),e.has("label")&&this._labelNode&&(this._labelNode.textContent=this.label),e.has("helpText")&&this._helpTextNode&&(this._helpTextNode.textContent=this.helpText),e.has("name")&&this.dispatchEvent(new CustomEvent("form-element-name-changed",{detail:{oldName:e.get("name"),newName:this.name},bubbles:!0}))}_triggerInitialModelValueChangedEvent(){this._dispatchInitialModelValueChangedEvent()}_enhanceLightDomClasses(){this._inputNode&&this._inputNode.classList.add("form-control")}_enhanceLightDomA11y(){const{_inputNode:e,_labelNode:t,_helpTextNode:n,_feedbackNode:r}=this;e&&(e.id=e.id||this._inputId),t&&(t.setAttribute("for",this._inputId),this.addToAriaLabelledBy(t,{idPrefix:"label"})),n&&this.addToAriaDescribedBy(n,{idPrefix:"help-text"}),r&&(this.addEventListener("focusin",(()=>{r.setAttribute("aria-live","polite")})),this.addEventListener("focusout",(()=>{r.setAttribute("aria-live","assertive")})),this.addToAriaDescribedBy(r,{idPrefix:"feedback"})),this._enhanceLightDomA11yForAdditionalSlots()}_enhanceLightDomA11yForAdditionalSlots(e=["prefix","suffix","before","after"]){e.forEach((e=>{const t=this.__getDirectSlotChild(e);t&&(t.hasAttribute("data-label")&&this.addToAriaLabelledBy(t,{idPrefix:e}),t.hasAttribute("data-description")&&this.addToAriaDescribedBy(t,{idPrefix:e}))}))}__reflectAriaAttr(e,t,n){if(this._inputNode){if(n){const e=t.filter((e=>this.contains(e))),n=t.filter((e=>!this.contains(e)));t=[...Td(e),...n]}const r=t.map((e=>e.id)).join(" ");this._inputNode.setAttribute(e,r)}}render(){return Et`
        <div class="form-field__group-one">${this._groupOneTemplate()}</div>
        <div class="form-field__group-two">${this._groupTwoTemplate()}</div>
      `}_groupOneTemplate(){return Et` ${this._labelTemplate()} ${this._helpTextTemplate()} `}_groupTwoTemplate(){return Et` ${this._inputGroupTemplate()} ${this._feedbackTemplate()} `}_labelTemplate(){return Et`
        <div class="form-field__label">
          <slot name="label"></slot>
        </div>
      `}_helpTextTemplate(){return Et`
        <small class="form-field__help-text">
          <slot name="help-text"></slot>
        </small>
      `}_inputGroupTemplate(){return Et`
        <div class="input-group">
          ${this._inputGroupBeforeTemplate()}
          <div class="input-group__container">
            ${this._inputGroupPrefixTemplate()} ${this._inputGroupInputTemplate()}
            ${this._inputGroupSuffixTemplate()}
          </div>
          ${this._inputGroupAfterTemplate()}
        </div>
      `}_inputGroupBeforeTemplate(){return Et`
        <div class="input-group__before">
          <slot name="before"></slot>
        </div>
      `}_inputGroupPrefixTemplate(){return Array.from(this.children).find((e=>"prefix"===e.slot))?Et`
            <div class="input-group__prefix">
              <slot name="prefix"></slot>
            </div>
          `:xt}_inputGroupInputTemplate(){return Et`
        <div class="input-group__input">
          <slot name="input"></slot>
        </div>
      `}_inputGroupSuffixTemplate(){return Array.from(this.children).find((e=>"suffix"===e.slot))?Et`
            <div class="input-group__suffix">
              <slot name="suffix"></slot>
            </div>
          `:xt}_inputGroupAfterTemplate(){return Et`
        <div class="input-group__after">
          <slot name="after"></slot>
        </div>
      `}_feedbackTemplate(){return Et`
        <div class="form-field__feedback">
          <slot name="feedback"></slot>
        </div>
      `}_isEmpty(e=this.modelValue){let t=e;if(this.modelValue instanceof Id&&(t=this.modelValue.viewValue),"object"==typeof t&&null!==t&&!(t instanceof Date))return!Object.keys(t).length;const n="number"==typeof t&&(0===t||Number.isNaN(t));return!(t||n||"boolean"==typeof t&&!1===t)}static get styles(){return[He`
          /**********************
            {block} .form-field
           ********************/

          :host {
            display: block;
          }

          :host([hidden]) {
            display: none;
          }

          :host([disabled]) {
            pointer-events: none;
          }

          :host([disabled]) .form-field__label ::slotted(*),
          :host([disabled]) .form-field__help-text ::slotted(*) {
            color: var(--disabled-text-color, #767676);
          }

          :host([label-sr-only]) .form-field__label {
            position: absolute;
            top: 0;
            width: 1px;
            height: 1px;
            overflow: hidden;
            clip-path: inset(100%);
            clip: rect(1px, 1px, 1px, 1px);
            white-space: nowrap;
            border: 0;
            margin: 0;
            padding: 0;
          }

          /***********************
            {block} .input-group
           *********************/

          .input-group__container {
            display: flex;
          }

          .input-group__input {
            flex: 1;
            display: flex;
          }

          /***** {state} :disabled *****/
          :host([disabled]) .input-group ::slotted([slot='input']) {
            color: var(--disabled-text-color, #767676);
          }

          /***********************
            {block} .form-control
           **********************/

          .input-group__container > .input-group__input ::slotted(.form-control) {
            flex: 1 1 auto;
            margin: 0; /* remove input margin in Safari */
            font-size: 100%; /* normalize default input font-size */
          }
        `]}_getAriaDescriptionElements(){return[this._helpTextNode,this._feedbackNode]}addToAriaLabelledBy(e,{idPrefix:t="",reorder:n=!0}={}){e.id=e.id||`${t}-${this._inputId}`,this._ariaLabelledNodes.includes(e)||(this._ariaLabelledNodes=[...this._ariaLabelledNodes,e],this.__reorderAriaLabelledNodes=Boolean(n))}removeFromAriaLabelledBy(e){this._ariaLabelledNodes.includes(e)&&(this._ariaLabelledNodes.splice(this._ariaLabelledNodes.indexOf(e),1),this._ariaLabelledNodes=[...this._ariaLabelledNodes],this.__reorderAriaLabelledNodes=!1)}addToAriaDescribedBy(e,{idPrefix:t="",reorder:n=!0}={}){e.id=e.id||`${t}-${this._inputId}`,this._ariaDescribedNodes.includes(e)||(this._ariaDescribedNodes=[...this._ariaDescribedNodes,e],this.__reorderAriaDescribedNodes=Boolean(n))}removeFromAriaDescribedBy(e){this._ariaDescribedNodes.includes(e)&&(this._ariaDescribedNodes.splice(this._ariaDescribedNodes.indexOf(e),1),this._ariaDescribedNodes=[...this._ariaDescribedNodes],this.__reorderAriaLabelledNodes=!1)}__getDirectSlotChild(e){return Array.from(this.children).find((t=>t.slot===e))}_dispatchInitialModelValueChangedEvent(){"child"!==this._repropagationRole&&(this.__repropagateChildrenInitialized=!0,this.dispatchEvent(new CustomEvent("model-value-changed",{bubbles:!0,detail:{formPath:[this],initialize:!0,isTriggeredByUser:!1}})))}_onBeforeRepropagateChildrenValues(e){}__repropagateChildrenValues(e){this._onBeforeRepropagateChildrenValues(e);const t=e.detail&&e.detail.element||e.target,n=this._isRepropagationEndpoint||"choice-group"===this._repropagationRole;if(t===this)return;e.stopImmediatePropagation();const r="child"!==this._repropagationRole&&!this.__repropagateChildrenInitialized,s=e.detail&&e.detail.initialize;if(r||s)return;if(!this._repropagationCondition(t))return;let i=[];n||(i=e.detail&&e.detail.formPath||[t]);const o=[...i,this];this.dispatchEvent(new CustomEvent("model-value-changed",{bubbles:!0,detail:{formPath:o,isTriggeredByUser:Boolean(e.detail?.isTriggeredByUser)}}))}_repropagationCondition(e){return Boolean(e)}_onLabelClick(){}}));class Ud extends Array{_keys(){return Object.keys(this).filter((e=>Number.isNaN(Number(e))))}}const Md=Fe((e=>class extends(Fd(e)){static get properties(){return{_isFormOrFieldset:{type:Boolean}}}constructor(){super(),this.formElements=new Ud,this._isFormOrFieldset=!1,this._onRequestToAddFormElement=this._onRequestToAddFormElement.bind(this),this._onRequestToChangeFormElementName=this._onRequestToChangeFormElementName.bind(this),this.addEventListener("form-element-register",this._onRequestToAddFormElement),this.addEventListener("form-element-name-changed",this._onRequestToChangeFormElementName),this.initComplete=new Promise(((e,t)=>{this.__resolveInitComplete=e,this.__rejectInitComplete=t})),this.registrationComplete=new Promise(((e,t)=>{this.__resolveRegistrationComplete=e,this.__rejectRegistrationComplete=t})),this.registrationComplete.done=!1,this.registrationComplete.then((()=>{this.registrationComplete.done=!0,this.__resolveInitComplete(void 0)}),(()=>{throw this.registrationComplete.done=!0,this.__rejectInitComplete(void 0),new Error("Registration could not finish. Please use await el.registrationComplete;")}))}connectedCallback(){super.connectedCallback(),this._completeRegistration()}_completeRegistration(){Promise.resolve().then((()=>this.__resolveRegistrationComplete(void 0)))}disconnectedCallback(){super.disconnectedCallback(),!1===this.registrationComplete.done&&Promise.resolve().then((()=>{Promise.resolve().then((()=>{this.__rejectRegistrationComplete()}))}))}isRegisteredFormElement(e){return this.formElements.some((t=>t===e))}addFormElement(e,t){if(e._parentFormGroup=this,t>=0?this.formElements.splice(t,0,e):this.formElements.push(e),this._isFormOrFieldset){const{name:n}=e;if(n===this.name)throw console.info("Error Node:",e),new TypeError(`You can not have the same name "${n}" as your parent`);if("[]"===n.substr(-2))Array.isArray(this.formElements[n])||(this.formElements[n]=new Ud),t>0?this.formElements[n].splice(t,0,e):this.formElements[n].push(e);else{if(this.formElements[n])throw console.info("Error Node:",e),new TypeError(`Name "${n}" is already registered - if you want an array add [] to the end`);this.formElements[n]=e}}}removeFormElement(e){const t=this.formElements.indexOf(e);if(t>-1&&this.formElements.splice(t,1),this._isFormOrFieldset){const{name:t}=e;if("[]"===t.substr(-2)&&this.formElements[t]){const n=this.formElements[t].indexOf(e);n>-1&&this.formElements[t].splice(n,1)}else this.formElements[t]&&delete this.formElements[t]}}_onRequestToAddFormElement(e){const t=e.detail.element;if(t===this)return;if(this.isRegisteredFormElement(t))return;e.stopPropagation();let n=-1;if(this.formElements&&Array.isArray(this.formElements))for(const[e,r]of this.formElements.entries())if(!(r.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING)){n=e;break}this.addFormElement(t,n)}_onRequestToChangeFormElementName(e){const t=this.formElements[e.detail.oldName];t&&(this.formElements[e.detail.newName]=t,delete this.formElements[e.detail.oldName])}_onRequestToRemoveFormElement(e){const t=e.detail.element;t!==this&&this.isRegisteredFormElement(t)&&(e.stopPropagation(),this.removeFormElement(t))}})),Dd="2.2.2",$d=window.scopedElementsVersions||(window.scopedElementsVersions=[]);$d.includes(Dd)||$d.push(Dd);const jd=!!ShadowRoot.prototype.createElement,Vd=Fe((e=>class extends e{static get scopedElements(){return{}}static get scopedElementsVersion(){return Dd}static get shadowRootOptions(){return this.__shadowRootOptions}static set shadowRootOptions(e){this.__shadowRootOptions=e}static get elementStyles(){return this.__elementStyles}static set elementStyles(e){this.__elementStyles=e}constructor(...e){super(),this.renderOptions=this.renderOptions||void 0}get registry(){return this.constructor.__registry}set registry(e){this.constructor.__registry=e}createRenderRoot(){const{scopedElements:e,shadowRootOptions:t,elementStyles:n}=this.constructor;if(!this.registry||this.registry===this.constructor.__registry&&!Object.prototype.hasOwnProperty.call(this.constructor,"__registry")){this.registry=jd?new CustomElementRegistry:customElements;for(const[t,n]of Object.entries(e))this.defineScopedElement(t,n)}const r={mode:"open",...t,customElements:this.registry,registry:this.registry},s=this.attachShadow(r);return jd&&(this.renderOptions.creationScope=s),s instanceof ShadowRoot&&(c(s,n),this.renderOptions.renderBefore=this.renderOptions.renderBefore||s.firstChild),s}createScopedElement(e){return(jd?this.shadowRoot:document).createElement(e)}defineScopedElement(e,t){const n=this.registry.get(e);return n&&!1===jd&&n!==t&&console.error([`You are trying to re-register the "${e}" custom element with a different class via ScopedElementsMixin.`,"This is only possible with a CustomElementRegistry.","Your browser does not support this feature so you will need to load a polyfill for it.",'Load "@webcomponents/scoped-custom-element-registry" before you register ANY web component to the global customElements registry.','e.g. add "<script src="/node_modules/@webcomponents/scoped-custom-element-registry/scoped-custom-element-registry.min.js"><\/script>" as your first script tag.',"For more details you can visit https://open-wc.org/docs/development/scoped-elements/"].join("\n")),n?this.registry.get(e):this.registry.define(e,t)}getScopedTagName(e){return this.constructor.getScopedTagName(e)}static getScopedTagName(e){return this.__registry.get(e)?e:void 0}})),Hd=Symbol.for("lion::SingletonManagerClassStorage"),Gd=globalThis||window,zd=new class{constructor(){this._map=Gd[Hd]?Gd[Hd]:Gd[Hd]=new Map}set(e,t){this.has(e)||this._map.set(e,t)}get(e){return this._map.get(e)}has(e){return this._map.has(e)}};function qd(e,t){return e(t={exports:{}},t.exports),t.exports}var Qd="long",Jd="short",Kd="narrow",Wd="numeric",Yd="2-digit",Zd={number:{decimal:{style:"decimal"},integer:{style:"decimal",maximumFractionDigits:0},currency:{style:"currency",currency:"USD"},percent:{style:"percent"},default:{style:"decimal"}},date:{short:{month:Wd,day:Wd,year:Yd},medium:{month:Jd,day:Wd,year:Wd},long:{month:Qd,day:Wd,year:Wd},full:{month:Qd,day:Wd,year:Wd,weekday:Qd},default:{month:Jd,day:Wd,year:Wd}},time:{short:{hour:Wd,minute:Wd},medium:{hour:Wd,minute:Wd,second:Wd},long:{hour:Wd,minute:Wd,second:Wd,timeZoneName:Jd},full:{hour:Wd,minute:Wd,second:Wd,timeZoneName:Jd},default:{hour:Wd,minute:Wd,second:Wd}},duration:{default:{hours:{minimumIntegerDigits:1,maximumFractionDigits:0},minutes:{minimumIntegerDigits:2,maximumFractionDigits:0},seconds:{minimumIntegerDigits:2,maximumFractionDigits:3}}},parseNumberPattern:function(e){if(e){var t={},n=e.match(/\b[A-Z]{3}\b/i),r=e.replace(/[^¤]/g,"").length;if(!r&&n&&(r=1),r?(t.style="currency",t.currencyDisplay=1===r?"symbol":2===r?"code":"name",t.currency=n?n[0].toUpperCase():"USD"):e.indexOf("%")>=0&&(t.style="percent"),!/[@#0]/.test(e))return t.style?t:void 0;if(t.useGrouping=e.indexOf(",")>=0,/E\+?[@#0]+/i.test(e)||e.indexOf("@")>=0){var s=e.replace(/E\+?[@#0]+|[^@#0]/gi,"");t.minimumSignificantDigits=Math.min(Math.max(s.replace(/[^@0]/g,"").length,1),21),t.maximumSignificantDigits=Math.min(Math.max(s.length,1),21)}else{for(var i=e.replace(/[^#0.]/g,"").split("."),o=i[0],a=o.length-1;"0"===o[a];)--a;t.minimumIntegerDigits=Math.min(Math.max(o.length-1-a,1),21);var l=i[1]||"";for(a=0;"0"===l[a];)++a;for(t.minimumFractionDigits=Math.min(Math.max(a,0),20);"#"===l[a];)++a;t.maximumFractionDigits=Math.min(Math.max(a,0),20)}return t}},parseDatePattern:function(e){if(e){for(var t={},n=0;n<e.length;){for(var r=e[n],s=1;e[++n]===r;)++s;switch(r){case"G":t.era=5===s?Kd:4===s?Qd:Jd;break;case"y":case"Y":t.year=2===s?Yd:Wd;break;case"M":case"L":s=Math.min(Math.max(s-1,0),4),t.month=[Wd,Yd,Jd,Qd,Kd][s];break;case"E":case"e":case"c":t.weekday=5===s?Kd:4===s?Qd:Jd;break;case"d":case"D":t.day=2===s?Yd:Wd;break;case"h":case"K":t.hour12=!0,t.hour=2===s?Yd:Wd;break;case"H":case"k":t.hour12=!1,t.hour=2===s?Yd:Wd;break;case"m":t.minute=2===s?Yd:Wd;break;case"s":case"S":t.second=2===s?Yd:Wd;break;case"z":case"Z":case"v":case"V":t.timeZoneName=1===s?Jd:Qd}}return Object.keys(t).length?t:void 0}}},Xd="zero",ep="one",tp="two",np="few",rp="many",sp="other",ip=[function(e){return 1==+e?ep:sp},function(e){var t=+e;return 0<=t&&t<=1?ep:sp},function(e){return 0===Math.floor(Math.abs(+e))||1==+e?ep:sp},function(e){var t=+e;return 0===t?Xd:1===t?ep:2===t?tp:3<=t%100&&t%100<=10?np:11<=t%100&&t%100<=99?rp:sp},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 1===t&&0===n?ep:sp},function(e){var t=+e;return t%10==1&&t%100!=11?ep:2<=t%10&&t%10<=4&&(t%100<12||14<t%100)?np:t%10==0||5<=t%10&&t%10<=9||11<=t%100&&t%100<=14?rp:sp},function(e){var t=+e;return t%10==1&&t%100!=11&&t%100!=71&&t%100!=91?ep:t%10==2&&t%100!=12&&t%100!=72&&t%100!=92?tp:(3<=t%10&&t%10<=4||t%10==9)&&(t%100<10||19<t%100)&&(t%100<70||79<t%100)&&(t%100<90||99<t%100)?np:0!==t&&t%1e6==0?rp:sp},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+(e+".").split(".")[1];return 0===n&&t%10==1&&t%100!=11||r%10==1&&r%100!=11?ep:0===n&&2<=t%10&&t%10<=4&&(t%100<12||14<t%100)||2<=r%10&&r%10<=4&&(r%100<12||14<r%100)?np:sp},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 1===t&&0===n?ep:2<=t&&t<=4&&0===n?np:0!==n?rp:sp},function(e){var t=+e;return 0===t?Xd:1===t?ep:2===t?tp:3===t?np:6===t?rp:sp},function(e){var t=Math.floor(Math.abs(+e)),n=+(""+e).replace(/^[^.]*.?|0+$/g,"");return 1==+e||0!==n&&(0===t||1===t)?ep:sp},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+(e+".").split(".")[1];return 0===n&&t%100==1||r%100==1?ep:0===n&&t%100==2||r%100==2?tp:0===n&&3<=t%100&&t%100<=4||3<=r%100&&r%100<=4?np:sp},function(e){var t=Math.floor(Math.abs(+e));return 0===t||1===t?ep:sp},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+(e+".").split(".")[1];return 0===n&&(1===t||2===t||3===t)||0===n&&t%10!=4&&t%10!=6&&t%10!=9||0!==n&&r%10!=4&&r%10!=6&&r%10!=9?ep:sp},function(e){var t=+e;return 1===t?ep:2===t?tp:3<=t&&t<=6?np:7<=t&&t<=10?rp:sp},function(e){var t=+e;return 1===t||11===t?ep:2===t||12===t?tp:3<=t&&t<=10||13<=t&&t<=19?np:sp},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 0===n&&t%10==1?ep:0===n&&t%10==2?tp:0!==n||t%100!=0&&t%100!=20&&t%100!=40&&t%100!=60&&t%100!=80?0!==n?rp:sp:np},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+e;return 1===t&&0===n?ep:2===t&&0===n?tp:0===n&&(r<0||10<r)&&r%10==0?rp:sp},function(e){var t=Math.floor(Math.abs(+e)),n=+(""+e).replace(/^[^.]*.?|0+$/g,"");return 0===n&&t%10==1&&t%100!=11||0!==n?ep:sp},function(e){var t=+e;return 1===t?ep:2===t?tp:sp},function(e){var t=+e;return 0===t?Xd:1===t?ep:sp},function(e){var t=Math.floor(Math.abs(+e)),n=+e;return 0===n?Xd:0!==t&&1!==t||0===n?sp:ep},function(e){var t=+(e+".").split(".")[1],n=+e;return n%10==1&&(n%100<11||19<n%100)?ep:2<=n%10&&n%10<=9&&(n%100<11||19<n%100)?np:0!==t?rp:sp},function(e){var t=(e+".").split(".")[1].length,n=+(e+".").split(".")[1],r=+e;return r%10==0||11<=r%100&&r%100<=19||2===t&&11<=n%100&&n%100<=19?Xd:r%10==1&&r%100!=11||2===t&&n%10==1&&n%100!=11||2!==t&&n%10==1?ep:sp},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+(e+".").split(".")[1];return 0===n&&t%10==1&&t%100!=11||r%10==1&&r%100!=11?ep:sp},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+e;return 1===t&&0===n?ep:0!==n||0===r||1!==r&&1<=r%100&&r%100<=19?np:sp},function(e){var t=+e;return 1===t?ep:0===t||2<=t%100&&t%100<=10?np:11<=t%100&&t%100<=19?rp:sp},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 1===t&&0===n?ep:0===n&&2<=t%10&&t%10<=4&&(t%100<12||14<t%100)?np:0===n&&1!==t&&0<=t%10&&t%10<=1||0===n&&5<=t%10&&t%10<=9||0===n&&12<=t%100&&t%100<=14?rp:sp},function(e){var t=Math.floor(Math.abs(+e));return 0<=t&&t<=1?ep:sp},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 0===n&&t%10==1&&t%100!=11?ep:0===n&&2<=t%10&&t%10<=4&&(t%100<12||14<t%100)?np:0===n&&t%10==0||0===n&&5<=t%10&&t%10<=9||0===n&&11<=t%100&&t%100<=14?rp:sp},function(e){var t=+e;return 0===Math.floor(Math.abs(+e))||1===t?ep:2<=t&&t<=10?np:sp},function(e){var t=Math.floor(Math.abs(+e)),n=+(e+".").split(".")[1],r=+e;return 0===r||1===r||0===t&&1===n?ep:sp},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 0===n&&t%100==1?ep:0===n&&t%100==2?tp:0===n&&3<=t%100&&t%100<=4||0!==n?np:sp},function(e){var t=+e;return 0<=t&&t<=1||11<=t&&t<=99?ep:sp},function(e){var t=+e;return 1===t||5===t||7===t||8===t||9===t||10===t?ep:2===t||3===t?tp:4===t?np:6===t?rp:sp},function(e){var t=Math.floor(Math.abs(+e));return t%10==1||t%10==2||t%10==5||t%10==7||t%10==8||t%100==20||t%100==50||t%100==70||t%100==80?ep:t%10==3||t%10==4||t%1e3==100||t%1e3==200||t%1e3==300||t%1e3==400||t%1e3==500||t%1e3==600||t%1e3==700||t%1e3==800||t%1e3==900?np:0===t||t%10==6||t%100==40||t%100==60||t%100==90?rp:sp},function(e){var t=+e;return t%10!=2&&t%10!=3||t%100==12||t%100==13?sp:np},function(e){var t=+e;return 1===t||3===t?ep:2===t?tp:4===t?np:sp},function(e){var t=+e;return 0===t||7===t||8===t||9===t?Xd:1===t?ep:2===t?tp:3===t||4===t?np:5===t||6===t?rp:sp},function(e){var t=+e;return t%10==1&&t%100!=11?ep:t%10==2&&t%100!=12?tp:t%10==3&&t%100!=13?np:sp},function(e){var t=+e;return 1===t?ep:2===t||3===t?tp:4===t?np:6===t?rp:sp},function(e){var t=+e;return 1===t||5===t?ep:sp},function(e){var t=+e;return 11===t||8===t||80===t||800===t?rp:sp},function(e){var t=Math.floor(Math.abs(+e));return 1===t?ep:0===t||2<=t%100&&t%100<=20||t%100==40||t%100==60||t%100==80?rp:sp},function(e){var t=+e;return t%10==6||t%10==9||t%10==0&&0!==t?rp:sp},function(e){var t=Math.floor(Math.abs(+e));return t%10==1&&t%100!=11?ep:t%10==2&&t%100!=12?tp:t%10!=7&&t%10!=8||t%100==17||t%100==18?sp:rp},function(e){var t=+e;return 1===t?ep:2===t||3===t?tp:4===t?np:sp},function(e){var t=+e;return 1<=t&&t<=4?ep:sp},function(e){var t=+e;return 1===t||5===t||7<=t&&t<=9?ep:2===t||3===t?tp:4===t?np:6===t?rp:sp},function(e){var t=+e;return 1===t?ep:t%10==4&&t%100!=14?rp:sp},function(e){var t=+e;return t%10!=1&&t%10!=2||t%100==11||t%100==12?sp:ep},function(e){var t=+e;return t%10==6||t%10==9||10===t?np:sp},function(e){var t=+e;return t%10==3&&t%100!=13?np:sp}],op={af:{cardinal:ip[0]},ak:{cardinal:ip[1]},am:{cardinal:ip[2]},ar:{cardinal:ip[3]},ars:{cardinal:ip[3]},as:{cardinal:ip[2],ordinal:ip[34]},asa:{cardinal:ip[0]},ast:{cardinal:ip[4]},az:{cardinal:ip[0],ordinal:ip[35]},be:{cardinal:ip[5],ordinal:ip[36]},bem:{cardinal:ip[0]},bez:{cardinal:ip[0]},bg:{cardinal:ip[0]},bh:{cardinal:ip[1]},bn:{cardinal:ip[2],ordinal:ip[34]},br:{cardinal:ip[6]},brx:{cardinal:ip[0]},bs:{cardinal:ip[7]},ca:{cardinal:ip[4],ordinal:ip[37]},ce:{cardinal:ip[0]},cgg:{cardinal:ip[0]},chr:{cardinal:ip[0]},ckb:{cardinal:ip[0]},cs:{cardinal:ip[8]},cy:{cardinal:ip[9],ordinal:ip[38]},da:{cardinal:ip[10]},de:{cardinal:ip[4]},dsb:{cardinal:ip[11]},dv:{cardinal:ip[0]},ee:{cardinal:ip[0]},el:{cardinal:ip[0]},en:{cardinal:ip[4],ordinal:ip[39]},eo:{cardinal:ip[0]},es:{cardinal:ip[0]},et:{cardinal:ip[4]},eu:{cardinal:ip[0]},fa:{cardinal:ip[2]},ff:{cardinal:ip[12]},fi:{cardinal:ip[4]},fil:{cardinal:ip[13],ordinal:ip[0]},fo:{cardinal:ip[0]},fr:{cardinal:ip[12],ordinal:ip[0]},fur:{cardinal:ip[0]},fy:{cardinal:ip[4]},ga:{cardinal:ip[14],ordinal:ip[0]},gd:{cardinal:ip[15]},gl:{cardinal:ip[4]},gsw:{cardinal:ip[0]},gu:{cardinal:ip[2],ordinal:ip[40]},guw:{cardinal:ip[1]},gv:{cardinal:ip[16]},ha:{cardinal:ip[0]},haw:{cardinal:ip[0]},he:{cardinal:ip[17]},hi:{cardinal:ip[2],ordinal:ip[40]},hr:{cardinal:ip[7]},hsb:{cardinal:ip[11]},hu:{cardinal:ip[0],ordinal:ip[41]},hy:{cardinal:ip[12],ordinal:ip[0]},io:{cardinal:ip[4]},is:{cardinal:ip[18]},it:{cardinal:ip[4],ordinal:ip[42]},iu:{cardinal:ip[19]},iw:{cardinal:ip[17]},jgo:{cardinal:ip[0]},ji:{cardinal:ip[4]},jmc:{cardinal:ip[0]},ka:{cardinal:ip[0],ordinal:ip[43]},kab:{cardinal:ip[12]},kaj:{cardinal:ip[0]},kcg:{cardinal:ip[0]},kk:{cardinal:ip[0],ordinal:ip[44]},kkj:{cardinal:ip[0]},kl:{cardinal:ip[0]},kn:{cardinal:ip[2]},ks:{cardinal:ip[0]},ksb:{cardinal:ip[0]},ksh:{cardinal:ip[20]},ku:{cardinal:ip[0]},kw:{cardinal:ip[19]},ky:{cardinal:ip[0]},lag:{cardinal:ip[21]},lb:{cardinal:ip[0]},lg:{cardinal:ip[0]},ln:{cardinal:ip[1]},lt:{cardinal:ip[22]},lv:{cardinal:ip[23]},mas:{cardinal:ip[0]},mg:{cardinal:ip[1]},mgo:{cardinal:ip[0]},mk:{cardinal:ip[24],ordinal:ip[45]},ml:{cardinal:ip[0]},mn:{cardinal:ip[0]},mo:{cardinal:ip[25],ordinal:ip[0]},mr:{cardinal:ip[2],ordinal:ip[46]},mt:{cardinal:ip[26]},nah:{cardinal:ip[0]},naq:{cardinal:ip[19]},nb:{cardinal:ip[0]},nd:{cardinal:ip[0]},ne:{cardinal:ip[0],ordinal:ip[47]},nl:{cardinal:ip[4]},nn:{cardinal:ip[0]},nnh:{cardinal:ip[0]},no:{cardinal:ip[0]},nr:{cardinal:ip[0]},nso:{cardinal:ip[1]},ny:{cardinal:ip[0]},nyn:{cardinal:ip[0]},om:{cardinal:ip[0]},or:{cardinal:ip[0],ordinal:ip[48]},os:{cardinal:ip[0]},pa:{cardinal:ip[1]},pap:{cardinal:ip[0]},pl:{cardinal:ip[27]},prg:{cardinal:ip[23]},ps:{cardinal:ip[0]},pt:{cardinal:ip[28]},"pt-PT":{cardinal:ip[4]},rm:{cardinal:ip[0]},ro:{cardinal:ip[25],ordinal:ip[0]},rof:{cardinal:ip[0]},ru:{cardinal:ip[29]},rwk:{cardinal:ip[0]},saq:{cardinal:ip[0]},scn:{cardinal:ip[4],ordinal:ip[42]},sd:{cardinal:ip[0]},sdh:{cardinal:ip[0]},se:{cardinal:ip[19]},seh:{cardinal:ip[0]},sh:{cardinal:ip[7]},shi:{cardinal:ip[30]},si:{cardinal:ip[31]},sk:{cardinal:ip[8]},sl:{cardinal:ip[32]},sma:{cardinal:ip[19]},smi:{cardinal:ip[19]},smj:{cardinal:ip[19]},smn:{cardinal:ip[19]},sms:{cardinal:ip[19]},sn:{cardinal:ip[0]},so:{cardinal:ip[0]},sq:{cardinal:ip[0],ordinal:ip[49]},sr:{cardinal:ip[7]},ss:{cardinal:ip[0]},ssy:{cardinal:ip[0]},st:{cardinal:ip[0]},sv:{cardinal:ip[4],ordinal:ip[50]},sw:{cardinal:ip[4]},syr:{cardinal:ip[0]},ta:{cardinal:ip[0]},te:{cardinal:ip[0]},teo:{cardinal:ip[0]},ti:{cardinal:ip[1]},tig:{cardinal:ip[0]},tk:{cardinal:ip[0],ordinal:ip[51]},tl:{cardinal:ip[13],ordinal:ip[0]},tn:{cardinal:ip[0]},tr:{cardinal:ip[0]},ts:{cardinal:ip[0]},tzm:{cardinal:ip[33]},ug:{cardinal:ip[0]},uk:{cardinal:ip[29],ordinal:ip[52]},ur:{cardinal:ip[4]},uz:{cardinal:ip[0]},ve:{cardinal:ip[0]},vo:{cardinal:ip[0]},vun:{cardinal:ip[0]},wa:{cardinal:ip[1]},wae:{cardinal:ip[0]},xh:{cardinal:ip[0]},xog:{cardinal:ip[0]},yi:{cardinal:ip[4]},zu:{cardinal:ip[2]},lo:{ordinal:ip[0]},ms:{ordinal:ip[0]},vi:{ordinal:ip[0]}},ap=qd((function(e,t){function n(e,t,s,i,o){var a=e.map((function(e){return function(e,t,s,i,o){if("string"==typeof e){var a=e;return function(){return a}}var c,u=e[0],h=e[1];if(t&&"#"===e[0]){u=t[0];var d=t[2],p=(i.number||l.number)([u,"number"],s);return function(e){return p(r(u,e)-d,e)}}"plural"===h||"selectordinal"===h?(c={},Object.keys(e[3]).forEach((function(t){c[t]=n(e[3][t],e,s,i,o)})),e=[e[0],e[1],e[2],c]):e[2]&&"object"==typeof e[2]&&(c={},Object.keys(e[2]).forEach((function(t){c[t]=n(e[2][t],e,s,i,o)})),e=[e[0],e[1],c]);var f=h&&(i[h]||l[h]);if(f){var m=f(e,s);return function(e){return m(r(u,e),e)}}return o?function(e){return String(r(u,e))}:function(e){return r(u,e)}}(e,t,s,i,o)}));return o?1===a.length?a[0]:function(e){for(var t="",n=0;n<a.length;++n)t+=a[n](e);return t}:function(e){return a.reduce((function(t,n){return t.concat(n(e))}),[])}}function r(e,t){if(t&&e in t)return t[e];for(var n=e.split("."),r=t,s=0,i=n.length;r&&s<i;++s)r=r[n[s]];return r}function s(e,t){var n=e[2],r=Zd.number[n]||Zd.parseNumberPattern(n)||Zd.number.default;return new Intl.NumberFormat(t,r).format}function i(e,t){var n=e[1],r=e[2],s=Zd[n][r]||Zd.parseDatePattern(r)||Zd[n].default;return new Intl.DateTimeFormat(t,s).format}function o(e,t){var n,r="selectordinal"===e[1]?"ordinal":"cardinal",s=e[2],i=e[3];if(Intl.PluralRules&&Intl.PluralRules.supportedLocalesOf(t).length>0)n=new Intl.PluralRules(t,{type:r});else{var o=function(e,t){if("string"==typeof e&&t[e])return e;for(var n=[].concat(e||[]),r=0,s=n.length;r<s;++r)for(var i=n[r].split("-");i.length;){var o=i.join("-");if(t[o])return o;i.pop()}}(t,op),l=o&&op[o][r]||a;n={select:l}}return function(e,t){return(i["="+ +e]||i[n.select(e-s)]||i.other)(t)}}function a(){return"other"}(t=e.exports=function(e,t,r){return n(e,null,t||"en",r||{},!0)}).toParts=function(e,t,r){return n(e,null,t||"en",r||{},!1)};var l={number:s,ordinal:s,spellout:s,duration:function(e,t){var n=e[2],r=Zd.duration[n]||Zd.duration.default,s=new Intl.NumberFormat(t,r.seconds).format,i=new Intl.NumberFormat(t,r.minutes).format,o=new Intl.NumberFormat(t,r.hours).format,a=/^fi$|^fi-|^da/.test(String(t))?".":":";return function(e,t){if(e=+e,!isFinite(e))return s(e);var n=~~(e/60/60),r=~~(e/60%60),l=(n?o(Math.abs(n))+a:"")+i(Math.abs(r))+a+s(Math.abs(e%60));return e<0?o(-1).replace(o(1),l):l}},date:i,time:i,plural:o,selectordinal:o,select:function(e,t){var n=e[2];return function(e,t){return(n[e]||n.other)(t)}}};t.types=l})),lp=(ap.toParts,ap.types,qd((function(e,t){var n="{",r="}",s=",",i="#",o="<",a=">",l="</",c="/>",u="'",h="offset:",d=["number","date","time","ordinal","duration","spellout"],p=["plural","select","selectordinal"];function f(e,t){var n=e.pattern,s=n.length,i=[],o=e.index,a=m(e,t);for(a&&i.push(a),a&&e.tokens&&e.tokens.push(["text",n.slice(o,e.index)]);e.index<s;){if(n[e.index]===r){if(!t)throw E(e);break}if(t&&e.tagsType&&n.slice(e.index,e.index+l.length)===l)break;i.push(b(e)),o=e.index,(a=m(e,t))&&i.push(a),a&&e.tokens&&e.tokens.push(["text",n.slice(o,e.index)])}return i}function m(e,t){for(var s=e.pattern,a=s.length,l="plural"===t||"selectordinal"===t,c=!!e.tagsType,h="{style}"===t,d="";e.index<a;){var p=s[e.index];if(p===n||p===r||l&&p===i||c&&p===o||h&&g(p.charCodeAt(0)))break;if(p===u)if((p=s[++e.index])===u)d+=p,++e.index;else if(p===n||p===r||l&&p===i||c&&p===o||h)for(d+=p;++e.index<a;)if((p=s[e.index])===u&&s[e.index+1]===u)d+=u,++e.index;else{if(p===u){++e.index;break}d+=p}else d+=u;else d+=p,++e.index}return d}function g(e){return e>=9&&e<=13||32===e||133===e||160===e||6158===e||e>=8192&&e<=8205||8232===e||8233===e||8239===e||8287===e||8288===e||12288===e||65279===e}function y(e){for(var t=e.pattern,n=t.length,r=e.index;e.index<n&&g(t.charCodeAt(e.index));)++e.index;r<e.index&&e.tokens&&e.tokens.push(["space",e.pattern.slice(r,e.index)])}function b(e){var t=e.pattern;if(t[e.index]===i)return e.tokens&&e.tokens.push(["syntax",i]),++e.index,[i];var u=function(e){var t=e.tagsType;if(t&&e.pattern[e.index]===o){if(e.pattern.slice(e.index,e.index+l.length)===l)throw E(e,null,"closing tag without matching opening tag");e.tokens&&e.tokens.push(["syntax",o]),++e.index;var n=w(e,!0);if(!n)throw E(e,"placeholder id");if(e.tokens&&e.tokens.push(["id",n]),y(e),e.pattern.slice(e.index,e.index+c.length)===c)return e.tokens&&e.tokens.push(["syntax",c]),e.index+=c.length,[n,t];if(e.pattern[e.index]!==a)throw E(e,a);e.tokens&&e.tokens.push(["syntax",a]),++e.index;var r=f(e,t),s=e.index;if(e.pattern.slice(e.index,e.index+l.length)!==l)throw E(e,l+n+a);e.tokens&&e.tokens.push(["syntax",l]),e.index+=l.length;var i=w(e,!0);if(i&&e.tokens&&e.tokens.push(["id",i]),n!==i)throw e.index=s,E(e,l+n+a,l+i+a);if(y(e),e.pattern[e.index]!==a)throw E(e,a);return e.tokens&&e.tokens.push(["syntax",a]),++e.index,[n,t,{children:r}]}}(e);if(u)return u;if(t[e.index]!==n)throw E(e,n);e.tokens&&e.tokens.push(["syntax",n]),++e.index,y(e);var p=w(e);if(!p)throw E(e,"placeholder id");e.tokens&&e.tokens.push(["id",p]),y(e);var m=t[e.index];if(m===r)return e.tokens&&e.tokens.push(["syntax",r]),++e.index,[p];if(m!==s)throw E(e,s+" or "+r);e.tokens&&e.tokens.push(["syntax",s]),++e.index,y(e);var g,b=w(e);if(!b)throw E(e,"placeholder type");if(e.tokens&&e.tokens.push(["type",b]),y(e),(m=t[e.index])===r){if(e.tokens&&e.tokens.push(["syntax",r]),"plural"===b||"selectordinal"===b||"select"===b)throw E(e,b+" sub-messages");return++e.index,[p,b]}if(m!==s)throw E(e,s+" or "+r);if(e.tokens&&e.tokens.push(["syntax",s]),++e.index,y(e),"plural"===b||"selectordinal"===b){var _=function(e){var t,n=e.pattern,r=n.length,s=0;if(n.slice(e.index,e.index+h.length)===h){e.tokens&&e.tokens.push(["offset","offset"],["syntax",":"]),e.index+=h.length,y(e);for(var i=e.index;e.index<r&&((t=n.charCodeAt(e.index))>=48&&t<=57);)++e.index;if(i===e.index)throw E(e,"offset number");e.tokens&&e.tokens.push(["number",n.slice(i,e.index)]),s=+n.slice(i,e.index)}return s}(e);y(e),g=[p,b,_,A(e,b)]}else if("select"===b)g=[p,b,A(e,b)];else if(d.indexOf(b)>=0)g=[p,b,v(e)];else{var k=e.index,x=v(e);y(e),t[e.index]===n&&(e.index=k,x=A(e,b)),g=[p,b,x]}if(y(e),t[e.index]!==r)throw E(e,r);return e.tokens&&e.tokens.push(["syntax",r]),++e.index,g}function w(e,t){for(var l=e.pattern,c=l.length,h="";e.index<c;){var d=l[e.index];if(d===n||d===r||d===s||d===i||d===u||g(d.charCodeAt(0))||t&&(d===o||d===a||"/"===d))break;h+=d,++e.index}return h}function v(e){var t=e.index,n=m(e,"{style}");if(!n)throw E(e,"placeholder style name");return e.tokens&&e.tokens.push(["style",e.pattern.slice(t,e.index)]),n}function A(e,t){for(var n=e.pattern,s=n.length,i={};e.index<s&&n[e.index]!==r;){var o=w(e);if(!o)throw E(e,"sub-message selector");e.tokens&&e.tokens.push(["selector",o]),y(e),i[o]=_(e,t),y(e)}if(!i.other&&p.indexOf(t)>=0)throw E(e,null,null,'"other" sub-message must be specified in '+t);return i}function _(e,t){if(e.pattern[e.index]!==n)throw E(e,n+" to start sub-message");e.tokens&&e.tokens.push(["syntax",n]),++e.index;var s=f(e,t);if(e.pattern[e.index]!==r)throw E(e,r+" to end sub-message");return e.tokens&&e.tokens.push(["syntax",r]),++e.index,s}function E(e,t,n,r){var s=e.pattern,i=s.slice(0,e.index).split(/\r?\n/),o=e.index,a=i.length,l=i.slice(-1)[0].length;return n=n||(e.index>=s.length?"end of message pattern":w(e)||s[e.index]),r||(r=function(e,t){return e?"Expected "+e+" but found "+t:"Unexpected "+t+" found"}(t,n)),new k(r+=" in "+s.replace(/\r?\n/g,"\n"),t,n,o,a,l)}function k(e,t,n,r,s,i){Error.call(this,e),this.name="SyntaxError",this.message=e,this.expected=t,this.found=n,this.offset=r,this.line=s,this.column=i}t=e.exports=function(e,t){return f({pattern:String(e),index:0,tagsType:t&&t.tagsType||null,tokens:t&&t.tokens||null},"")},k.prototype=Object.create(Error.prototype),t.SyntaxError=k}))),cp=(lp.SyntaxError,new RegExp("^("+Object.keys(op).join("|")+")\\b")),up=new WeakMap;function hp(e,t,n){if(!(this instanceof hp)||up.has(this))throw new TypeError("calling MessageFormat constructor without new is invalid");var r=lp(e);up.set(this,{ast:r,format:ap(r,t,n&&n.types),locale:hp.supportedLocalesOf(t)[0]||"en",locales:t,options:n})}var dp=hp;Object.defineProperties(hp.prototype,{format:{configurable:!0,get:function(){var e=up.get(this);if(!e)throw new TypeError("MessageFormat.prototype.format called on value that's not an object initialized as a MessageFormat");return e.format}},formatToParts:{configurable:!0,writable:!0,value:function(e){var t=up.get(this);if(!t)throw new TypeError("MessageFormat.prototype.formatToParts called on value that's not an object initialized as a MessageFormat");return(t.toParts||(t.toParts=ap.toParts(t.ast,t.locales,t.options&&t.options.types)))(e)}},resolvedOptions:{configurable:!0,writable:!0,value:function(){var e=up.get(this);if(!e)throw new TypeError("MessageFormat.prototype.resolvedOptions called on value that's not an object initialized as a MessageFormat");return{locale:e.locale}}}}),"undefined"!=typeof Symbol&&Object.defineProperty(hp.prototype,Symbol.toStringTag,{value:"Object"}),Object.defineProperties(hp,{supportedLocalesOf:{configurable:!0,writable:!0,value:function(e){return[].concat(Intl.NumberFormat.supportedLocalesOf(e),Intl.DateTimeFormat.supportedLocalesOf(e),Intl.PluralRules?Intl.PluralRules.supportedLocalesOf(e):[],[].concat(e||[]).filter((function(e){return cp.test(e)}))).filter((function(e,t,n){return n.indexOf(e)===t}))}}});const pp=dp;let fp=zd.get("@lion/localize::localize::0.10.x")||new class{constructor({autoLoadOnLocaleChange:e=!1,fallbackLocale:t="",showKeyAsFallback:n=!1}={}){this.__delegationTarget=document.createDocumentFragment(),this._autoLoadOnLocaleChange=!!e,this._fallbackLocale=t,this._showKeyAsFallback=n,this.__storage={},this.__namespacePatternsMap=new Map,this.__namespaceLoadersCache={},this.__namespaceLoaderPromisesCache={},this.formatNumberOptions={returnIfNaN:"",postProcessors:new Map},this.formatDateOptions={postProcessors:new Map};const r=document.documentElement.getAttribute("data-localize-lang");this._supportExternalTranslationTools=Boolean(r),this._supportExternalTranslationTools&&(this.locale=r||"en-GB",this._setupTranslationToolSupport()),document.documentElement.lang||(document.documentElement.lang=this.locale||"en-GB"),this._setupHtmlLangAttributeObserver()}_setupTranslationToolSupport(){this._langAttrSetByTranslationTool=document.documentElement.lang||null}teardown(){this._teardownHtmlLangAttributeObserver()}get locale(){return this._supportExternalTranslationTools?this.__locale||"":document.documentElement.lang}set locale(e){let t;this._supportExternalTranslationTools?(t=this.__locale,this.__locale=e,null===this._langAttrSetByTranslationTool&&this._setHtmlLangAttribute(e)):(t=document.documentElement.lang,this._setHtmlLangAttribute(e)),e.includes("-")||this.__handleLanguageOnly(e),this._onLocaleChanged(e,t)}_setHtmlLangAttribute(e){this._teardownHtmlLangAttributeObserver(),document.documentElement.lang=e,this._setupHtmlLangAttributeObserver()}__handleLanguageOnly(e){throw new Error(`\n      Locale was set to ${e}.\n      Language only locales are not allowed, please use the full language locale e.g. 'en-GB' instead of 'en'.\n      See https://github.com/ing-bank/lion/issues/187 for more information.\n    `)}get loadingComplete(){return"object"==typeof this.__namespaceLoaderPromisesCache[this.locale]?Promise.all(Object.values(this.__namespaceLoaderPromisesCache[this.locale])):Promise.resolve()}reset(){this.__storage={},this.__namespacePatternsMap=new Map,this.__namespaceLoadersCache={},this.__namespaceLoaderPromisesCache={}}addData(e,t,n){if(this._isNamespaceInCache(e,t))throw new Error(`Namespace "${t}" has been already added for the locale "${e}".`);this.__storage[e]=this.__storage[e]||{},this.__storage[e][t]=n}setupNamespaceLoader(e,t){this.__namespacePatternsMap.set(e,t)}loadNamespaces(e,{locale:t}={}){return Promise.all(e.map((e=>this.loadNamespace(e,{locale:t}))))}loadNamespace(e,{locale:t=this.locale}={locale:this.locale}){const n="object"==typeof e,r=n?Object.keys(e)[0]:e;if(this._isNamespaceInCache(t,r))return Promise.resolve();return this._getCachedNamespaceLoaderPromise(t,r)||this._loadNamespaceData(t,e,n,r)}msg(e,t,n={}){const r=n.locale?n.locale:this.locale,s=this._getMessageForKeys(e,r);return s?new pp(s,r).format(t):""}_setupHtmlLangAttributeObserver(){this._htmlLangAttributeObserver||(this._htmlLangAttributeObserver=new MutationObserver((e=>{e.forEach((e=>{this._supportExternalTranslationTools?"auto"===document.documentElement.lang?(this._langAttrSetByTranslationTool=null,this._setHtmlLangAttribute(this.locale)):this._langAttrSetByTranslationTool=document.documentElement.lang:this._onLocaleChanged(document.documentElement.lang,e.oldValue||"")}))}))),this._htmlLangAttributeObserver.observe(document.documentElement,{attributes:!0,attributeFilter:["lang"],attributeOldValue:!0})}_teardownHtmlLangAttributeObserver(){this._htmlLangAttributeObserver&&this._htmlLangAttributeObserver.disconnect()}_isNamespaceInCache(e,t){return!(!this.__storage[e]||!this.__storage[e][t])}_getCachedNamespaceLoaderPromise(e,t){return this.__namespaceLoaderPromisesCache[e]?this.__namespaceLoaderPromisesCache[e][t]:null}_loadNamespaceData(e,t,n,r){const s=this._getNamespaceLoader(t,n,r),i=this._getNamespaceLoaderPromise(s,e,r);return this._cacheNamespaceLoaderPromise(e,r,i),i.then((t=>{if(this.__namespaceLoaderPromisesCache[e]&&this.__namespaceLoaderPromisesCache[e][r]===i){const n=function(e){return!(!e||!e.default||"object"!=typeof e.default||1!==Object.keys(e).length)}(t)?t.default:t;this.addData(e,r,n)}}))}_getNamespaceLoader(e,t,n){let r=this.__namespaceLoadersCache[n];if(r||(t?(r=e[n],this.__namespaceLoadersCache[n]=r):(r=this._lookupNamespaceLoader(n),this.__namespaceLoadersCache[n]=r)),!r)throw new Error(`Namespace "${n}" was not properly setup.`);return this.__namespaceLoadersCache[n]=r,r}_getNamespaceLoaderPromise(e,t,n,r=this._fallbackLocale){return e(t,n).catch((()=>{const s=this._getLangFromLocale(t);return e(s,n).catch((()=>{if(r)return this._getNamespaceLoaderPromise(e,r,n,"").catch((()=>{const e=this._getLangFromLocale(r);throw new Error(`Data for namespace "${n}" and current locale "${t}" or fallback locale "${r}" could not be loaded. Make sure you have data either for locale "${t}" (and/or generic language "${s}") or for fallback "${r}" (and/or "${e}").`)}));throw new Error(`Data for namespace "${n}" and locale "${t}" could not be loaded. Make sure you have data for locale "${t}" (and/or generic language "${s}").`)}))}))}_cacheNamespaceLoaderPromise(e,t,n){this.__namespaceLoaderPromisesCache[e]||(this.__namespaceLoaderPromisesCache[e]={}),this.__namespaceLoaderPromisesCache[e][t]=n}_lookupNamespaceLoader(e){for(const[t,n]of this.__namespacePatternsMap){const r="string"==typeof t&&t===e,s="object"==typeof t&&"RegExp"===t.constructor.name&&t.test(e);if(r||s)return n}return null}_getLangFromLocale(e){return e.substring(0,2)}addEventListener(e,t,...n){this.__delegationTarget.addEventListener(e,t,...n)}removeEventListener(e,t,...n){this.__delegationTarget.removeEventListener(e,t,...n)}dispatchEvent(e){this.__delegationTarget.dispatchEvent(e)}_onLocaleChanged(e,t){this.dispatchEvent(new CustomEvent("__localeChanging")),e!==t&&(this._autoLoadOnLocaleChange?(this._loadAllMissing(e,t),this.loadingComplete.then((()=>{this.dispatchEvent(new CustomEvent("localeChanged",{detail:{newLocale:e,oldLocale:t}}))}))):this.dispatchEvent(new CustomEvent("localeChanged",{detail:{newLocale:e,oldLocale:t}})))}_loadAllMissing(e,t){const n=this.__storage[t]||{},r=this.__storage[e]||{};Object.keys(n).forEach((t=>{r[t]||this.loadNamespace(t,{locale:e})}))}_getMessageForKeys(e,t){if("string"==typeof e)return this._getMessageForKey(e,t);const n=Array.from(e).reverse();let r,s;for(;n.length;)if(r=n.pop(),s=this._getMessageForKey(r,t),s)return s}_getMessageForKey(e,t){if(!e||-1===e.indexOf(":"))throw new Error(`Namespace is missing in the key "${e}". The format for keys is "namespace:name".`);const[n,r]=e.split(":"),s=this.__storage[t],i=s?s[n]:{},o=r.split(".").reduce(((e,t)=>"object"==typeof e?e[t]:e),i);return String(o||(this._showKeyAsFallback?e:""))}setDatePostProcessorForLocale({locale:e,postProcessor:t}){this.formatDateOptions.postProcessors.set(e,t)}setNumberPostProcessorForLocale({locale:e,postProcessor:t}){this.formatNumberOptions.postProcessors.set(e,t)}}({autoLoadOnLocaleChange:!0,fallbackLocale:"en-GB"});class mp{constructor(){this.__running=!1,this.__queue=[]}add(e){this.__queue.push(e),this.__running||(this.complete=new Promise((e=>{this.__callComplete=e})),this.__run())}async __run(){this.__running=!0,await this.__queue[0](),this.__queue.shift(),this.__queue.length>0?this.__run():(this.__running=!1,this.__callComplete&&this.__callComplete())}}const gp=Fe((e=>class extends e{constructor(){super(),this.__SyncUpdatableNamespace={}}firstUpdated(e){super.firstUpdated(e),this.__syncUpdatableInitialize()}connectedCallback(){super.connectedCallback(),this.__SyncUpdatableNamespace.connected=!0}disconnectedCallback(){super.disconnectedCallback(),this.__SyncUpdatableNamespace.connected=!1}static __syncUpdatableHasChanged(e,t,n){const r=this.elementProperties;return r.get(e)&&r.get(e).hasChanged?r.get(e).hasChanged(t,n):t!==n}__syncUpdatableInitialize(){const e=this.__SyncUpdatableNamespace,t=this.constructor;e.initialized=!0,e.queue&&Array.from(e.queue).forEach((e=>{t.__syncUpdatableHasChanged(e,this[e],void 0)&&this.updateSync(e,void 0)}))}requestUpdate(e,t){super.requestUpdate(e,t),this.__SyncUpdatableNamespace=this.__SyncUpdatableNamespace||{};const n=this.__SyncUpdatableNamespace,r=this.constructor;n.initialized?r.__syncUpdatableHasChanged(e,this[e],t)&&this.updateSync(e,t):(n.queue=n.queue||new Set,n.queue.add(e))}updateSync(e,t){}}));class yp extends zt{static get properties(){return{feedbackData:{attribute:!1}}}_messageTemplate({message:e}){return e}updated(e){super.updated(e),this.feedbackData&&this.feedbackData[0]?(this.setAttribute("type",this.feedbackData[0].type),this.currentType=this.feedbackData[0].type,window.clearTimeout(this.removeMessage),"success"===this.currentType&&(this.removeMessage=window.setTimeout((()=>{this.removeAttribute("type"),this.feedbackData=[]}),3e3))):"success"!==this.currentType&&this.removeAttribute("type")}render(){return Et`
      ${this.feedbackData&&this.feedbackData.map((({message:e,type:t,validator:n})=>Et`
          ${this._messageTemplate({message:e,type:t,validator:n})}
        `))}
    `}}class bp extends EventTarget{constructor(e,t){super(),this.__param=e,this.__config=t||{},this.type=t?.type||"error"}static validatorName="";static async=!1;execute(e,t,n){if(!this.constructor.validatorName)throw new Error("A validator needs to have a name! Please set it via \"static get validatorName() { return 'IsCat'; }\"");return!0}set param(e){this.__param=e,this.dispatchEvent(new Event("param-changed"))}get param(){return this.__param}set config(e){this.__config=e,this.dispatchEvent(new Event("config-changed"))}get config(){return this.__config}async _getMessage(e){const t=this.constructor,n={name:t.validatorName,type:this.type,params:this.param,config:this.config,...e};if(this.config.getMessage){if("function"==typeof this.config.getMessage)return this.config.getMessage(n);throw new Error("You must provide a value for getMessage of type 'function', you provided a value of type: "+typeof this.config.getMessage)}return t.getMessage(n)}static async getMessage(e){return`Please configure an error message for "${this.name}" by overriding "static async getMessage()"`}onFormControlConnect(e){}onFormControlDisconnect(e){}abortExecution(){}}class wp extends bp{executeOnResults({regularValidationResult:e,prevValidationResult:t,prevShownValidationResult:n,validators:r}){return!0}}class vp extends bp{static get validatorName(){return"Required"}static get _compatibleRoles(){return["combobox","gridcell","input","listbox","radiogroup","select","spinbutton","textarea","textbox","tree"]}static get _compatibleTags(){return["input","select","textarea"]}onFormControlConnect({_inputNode:e}){if(e){const t=e.getAttribute("role")||"",n=e.tagName.toLowerCase(),r=this.constructor;(r._compatibleRoles.includes(t)||r._compatibleTags.includes(n))&&e.setAttribute("aria-required","true")}}onFormControlDisconnect({_inputNode:e}){e&&e.removeAttribute("aria-required")}}function Ap(e=[],t=[]){return e.filter((e=>!t.includes(e))).concat(t.filter((t=>!e.includes(t))))}const _p=Fe((e=>class extends(Ld(gp(Le(Bd(Vd(e)))))){static get scopedElements(){return{...super.constructor.scopedElements,"lion-validation-feedback":yp}}static get properties(){return{validators:{attribute:!1},hasFeedbackFor:{attribute:!1},shouldShowFeedbackFor:{attribute:!1},showsFeedbackFor:{type:Array,attribute:"shows-feedback-for",reflect:!0,converter:{fromAttribute:e=>e.split(","),toAttribute:e=>e.join(",")}},validationStates:{attribute:!1},isPending:{type:Boolean,attribute:"is-pending",reflect:!0},defaultValidators:{attribute:!1},_visibleMessagesAmount:{attribute:!1},__childModelValueChanged:{attribute:!1}}}static get validationTypes(){return["error"]}get slots(){return{...super.slots,feedback:()=>{const e=this.createScopedElement("lion-validation-feedback");return e.setAttribute("data-tag-name","lion-validation-feedback"),e}}}get _allValidators(){return[...this.validators,...this.defaultValidators]}constructor(){super(),this.hasFeedbackFor=[],this.showsFeedbackFor=[],this.shouldShowFeedbackFor=[],this.validationStates={},this.isPending=!1,this.validators=[],this.defaultValidators=[],this._visibleMessagesAmount=1,this.__syncValidationResult=[],this.__asyncValidationResult=[],this.__validationResult=[],this.__prevValidationResult=[],this.__prevShownValidationResult=[],this.__childModelValueChanged=!1,this._onValidatorUpdated=this._onValidatorUpdated.bind(this),this._updateFeedbackComponent=this._updateFeedbackComponent.bind(this)}connectedCallback(){super.connectedCallback(),fp.addEventListener("localeChanged",this._updateFeedbackComponent)}disconnectedCallback(){super.disconnectedCallback(),fp.removeEventListener("localeChanged",this._updateFeedbackComponent)}firstUpdated(e){super.firstUpdated(e),this.__validateInitialized=!0,this.validate(),"child"!==this._repropagationRole&&this.addEventListener("model-value-changed",(()=>{this.__childModelValueChanged=!0}))}updateSync(e,t){if(super.updateSync(e,t),"validators"===e?(this.__setupValidators(),this.validate({clearCurrentResult:!0})):"modelValue"===e&&this.validate({clearCurrentResult:!0}),["touched","dirty","prefilled","focused","submitted","hasFeedbackFor","filled"].includes(e)&&this._updateShouldShowFeedbackFor(),"showsFeedbackFor"===e){this._inputNode&&this._inputNode.setAttribute("aria-invalid",`${this._hasFeedbackVisibleFor("error")}`);const e=Ap(this.showsFeedbackFor,t);e.length>0&&this.dispatchEvent(new Event("showsFeedbackForChanged",{bubbles:!0})),e.forEach((e=>{var t;this.dispatchEvent(new Event(`showsFeedbackFor${t=e,t.charAt(0).toUpperCase()+t.slice(1)}Changed`,{bubbles:!0}))}))}"shouldShowFeedbackFor"===e&&Ap(this.shouldShowFeedbackFor,t).length>0&&this.dispatchEvent(new Event("shouldShowFeedbackForChanged",{bubbles:!0}))}async validate({clearCurrentResult:e}={}){if(this.disabled)return this.__clearValidationResults(),this.__finishValidation({source:"sync",hasAsync:!0}),void this._updateFeedbackComponent();this.__validateInitialized&&(this.__prevValidationResult=this.__validationResult,e&&this.__clearValidationResults(),await this.__executeValidators())}async __executeValidators(){this.validateComplete=new Promise((e=>{this.__validateCompleteResolve=e}));const e=this.modelValue instanceof Id?this.modelValue.viewValue:this.modelValue,t=this._allValidators.find((e=>e instanceof vp));if(this.__isEmpty(e))return t&&(this.__syncValidationResult=[{validator:t,outcome:!0}]),void this.__finishValidation({source:"sync"});const n=this._allValidators.filter((e=>!(e instanceof wp||e instanceof vp))),r=n.filter((e=>!e.constructor.async)),s=n.filter((e=>e.constructor.async));this.__executeSyncValidators(r,e,{hasAsync:Boolean(s.length)}),await this.__executeAsyncValidators(s,e)}__executeSyncValidators(e,t,{hasAsync:n}){e.length&&(this.__syncValidationResult=e.map((e=>({validator:e,outcome:e.execute(t,e.param,{node:this})}))).filter((e=>Boolean(e.outcome)))),this.__finishValidation({source:"sync",hasAsync:n})}async __executeAsyncValidators(e,t){if(e.length){this.isPending=!0;const n=e.map((e=>e.execute(t,e.param,{node:this}))),r=await Promise.all(n);this.__asyncValidationResult=r.map(((t,n)=>({validator:e[n],outcome:r[n]}))).filter((e=>Boolean(e.outcome))),this.__finishValidation({source:"async"}),this.isPending=!1}}__executeResultValidators(e){const t=this._allValidators.filter((e=>!e.constructor.async&&e instanceof wp));return t.length?this._isEmpty(this.modelValue)?(this.__prevShownValidationResult=[],[]):t.map((t=>({validator:t,outcome:t.executeOnResults({regularValidationResult:e.map((e=>e.validator)),prevValidationResult:this.__prevValidationResult.map((e=>e.validator)),prevShownValidationResult:this.__prevShownValidationResult.map((e=>e.validator))})}))).filter((e=>Boolean(e.outcome))):[]}__finishValidation({source:e,hasAsync:t}){const n=[...this.__syncValidationResult,...this.__asyncValidationResult],r=this.__executeResultValidators(n);this.__validationResult=[...r,...n];const s=this.constructor.validationTypes.reduce(((e,t)=>({...e,[t]:{}})),{});this.__validationResult.forEach((({validator:e,outcome:t})=>{s[e.type]||(s[e.type]={});const n=e.constructor;s[e.type][n.validatorName]=t})),this.validationStates=s,this.hasFeedbackFor=[...new Set(this.__validationResult.map((({validator:e})=>e.type)))],this.dispatchEvent(new Event("validate-performed",{bubbles:!0})),"async"!==e&&t||this.__validateCompleteResolve&&this.__validateCompleteResolve(!0)}__clearValidationResults(){this.__syncValidationResult=[],this.__asyncValidationResult=[]}_onValidatorUpdated(e){"param-changed"!==e.type&&"config-changed"!==e.type||this.validate()}__setupValidators(){const e=["param-changed","config-changed"];this.__prevValidators&&this.__prevValidators.forEach((t=>{e.forEach((e=>{t.removeEventListener&&t.removeEventListener(e,this._onValidatorUpdated)})),t.onFormControlDisconnect(this)})),this._allValidators.forEach((t=>{if(!(t instanceof bp)){const e=`Validators array only accepts class instances of Validator. Type "${Array.isArray(t)?"array":typeof t}" found. This may be caused by having multiple installations of @lion/form-core.`;throw console.error(e,this),new Error(e)}if(-1===this.constructor.validationTypes.indexOf(t.type)){const e=t.constructor,n=`This component does not support the validator type "${t.type}" used in "${e.validatorName}". You may change your validators type or add it to the components "static get validationTypes() {}".`;throw console.error(n,this),new Error(n)}e.forEach((e=>{t.addEventListener&&t.addEventListener(e,(e=>{this._onValidatorUpdated(e,{validator:t})}))})),t.onFormControlConnect(this)})),this.__prevValidators=this._allValidators}__isEmpty(e){return"function"==typeof this._isEmpty?this._isEmpty(e):null===this.modelValue||void 0===this.modelValue||""===this.modelValue}async __getFeedbackMessages(e){let t=await this.fieldName;return Promise.all(e.map((async({validator:e,outcome:n})=>(e.config.fieldName&&(t=await e.config.fieldName),{message:await e._getMessage({modelValue:this.modelValue,formControl:this,fieldName:t,outcome:n}),type:e.type,validator:e}))))}_updateFeedbackComponent(){const{_feedbackNode:e}=this;e&&(this.__feedbackQueue||(this.__feedbackQueue=new mp),this.showsFeedbackFor.length>0?this.__feedbackQueue.add((async()=>{const t=this._prioritizeAndFilterFeedback({validationResult:this.__validationResult.map((e=>e.validator))});this.__prioritizedResult=t.map((e=>{const t=this.__validationResult.find((t=>e===t.validator));return t})).filter(Boolean),this.__prioritizedResult.length>0&&(this.__prevShownValidationResult=this.__prioritizedResult);const n=await this.__getFeedbackMessages(this.__prioritizedResult);e.feedbackData=n.length?n:[]})):this.__feedbackQueue.add((async()=>{e.feedbackData=[]})),this.feedbackComplete=this.__feedbackQueue.complete)}_showFeedbackConditionFor(e,t){return!0}get _feedbackConditionMeta(){return{modelValue:this.modelValue,el:this}}feedbackCondition(e,t=this._feedbackConditionMeta,n=this._showFeedbackConditionFor.bind(this)){return n(e,t)}_hasFeedbackVisibleFor(e){return this.hasFeedbackFor&&this.hasFeedbackFor.includes(e)&&this.shouldShowFeedbackFor&&this.shouldShowFeedbackFor.includes(e)}updated(e){if(super.updated(e),e.has("shouldShowFeedbackFor")||e.has("hasFeedbackFor")){const e=this.constructor;this.showsFeedbackFor=e.validationTypes.map((e=>this._hasFeedbackVisibleFor(e)?e:void 0)).filter(Boolean),this._updateFeedbackComponent()}if(e.has("__childModelValueChanged")&&this.__childModelValueChanged&&(this.validate({clearCurrentResult:!0}),this.__childModelValueChanged=!1),e.has("validationStates")){const t=e.get("validationStates");t&&Object.entries(this.validationStates).forEach((([e,n])=>{t[e]&&JSON.stringify(n)!==JSON.stringify(t[e])&&this.dispatchEvent(new CustomEvent(`${e}StateChanged`,{detail:n}))}))}}_updateShouldShowFeedbackFor(){const e=this.constructor.validationTypes.map((e=>this.feedbackCondition(e,this._feedbackConditionMeta,this._showFeedbackConditionFor.bind(this))?e:void 0)).filter(Boolean);JSON.stringify(this.shouldShowFeedbackFor)!==JSON.stringify(e)&&(this.shouldShowFeedbackFor=e)}_prioritizeAndFilterFeedback({validationResult:e}){const t=this.constructor.validationTypes,n=e.filter((e=>this.feedbackCondition(e.type,this._feedbackConditionMeta,this._showFeedbackConditionFor.bind(this)))).sort(((e,n)=>t.indexOf(e.type)-t.indexOf(n.type)));return n.slice(0,this._visibleMessagesAmount)}}));class Ep extends bp{static get validatorName(){return"FormElementsHaveNoError"}execute(e,t,n){const r=n?.node._anyFormElementHasFeedbackFor("error");return r}static async getMessage(){return""}}const kp=Fe((e=>class extends(Md(Ld(_p(Le(Bd(e)))))){static get properties(){return{submitted:{type:Boolean,reflect:!0},focused:{type:Boolean,reflect:!0},dirty:{type:Boolean,reflect:!0},touched:{type:Boolean,reflect:!0},prefilled:{type:Boolean,reflect:!0}}}get _inputNode(){return this}get modelValue(){return this._getFromAllFormElements("modelValue")}set modelValue(e){this.__isInitialModelValue?(this.__isInitialModelValue=!1,this.registrationComplete.then((()=>{this._setValueMapForAllFormElements("modelValue",e)}))):this._setValueMapForAllFormElements("modelValue",e)}get serializedValue(){return this._getFromAllFormElements("serializedValue")}set serializedValue(e){this.__isInitialSerializedValue?(this.__isInitialSerializedValue=!1,this.registrationComplete.then((()=>{this._setValueMapForAllFormElements("serializedValue",e)}))):this._setValueMapForAllFormElements("serializedValue",e)}get formattedValue(){return this._getFromAllFormElements("formattedValue")}set formattedValue(e){this._setValueMapForAllFormElements("formattedValue",e)}get prefilled(){return this._everyFormElementHas("prefilled")}constructor(){super(),this.value="",this.disabled=!1,this.submitted=!1,this.dirty=!1,this.touched=!1,this.focused=!1,this.__addedSubValidators=!1,this.__isInitialModelValue=!0,this.__isInitialSerializedValue=!0,this._checkForOutsideClick=this._checkForOutsideClick.bind(this),this.addEventListener("focusin",this._syncFocused),this.addEventListener("focusout",this._onFocusOut),this.addEventListener("dirty-changed",this._syncDirty),this.addEventListener("validate-performed",this.__onChildValidatePerformed),this.defaultValidators=[new Ep],this.__descriptionElementsInParentChain=new Set,this.__pendingValues={modelValue:{},serializedValue:{}}}connectedCallback(){super.connectedCallback(),this.setAttribute("role","group"),this.initComplete.then((()=>{this.__isInitialModelValue=!1,this.__isInitialSerializedValue=!1,this.__initInteractionStates()}))}disconnectedCallback(){super.disconnectedCallback(),this.__hasActiveOutsideClickHandling&&(document.removeEventListener("click",this._checkForOutsideClick),this.__hasActiveOutsideClickHandling=!1),this.__descriptionElementsInParentChain.clear()}__initInteractionStates(){this.formElements.forEach((e=>{"function"==typeof e.initInteractionState&&e.initInteractionState()}))}_triggerInitialModelValueChangedEvent(){this.registrationComplete.then((()=>{this._dispatchInitialModelValueChangedEvent()}))}updated(e){super.updated(e),e.has("disabled")&&(this.disabled?this.__requestChildrenToBeDisabled():this.__retractRequestChildrenToBeDisabled()),e.has("focused")&&!0===this.focused&&this.__setupOutsideClickHandling()}__setupOutsideClickHandling(){this.__hasActiveOutsideClickHandling||(document.addEventListener("click",this._checkForOutsideClick),this.__hasActiveOutsideClickHandling=!0)}_checkForOutsideClick(e){!this.contains(e.target)&&(this.touched=!0)}__requestChildrenToBeDisabled(){this.formElements.forEach((e=>{e.makeRequestToBeDisabled&&e.makeRequestToBeDisabled()}))}__retractRequestChildrenToBeDisabled(){this.formElements.forEach((e=>{e.retractRequestToBeDisabled&&e.retractRequestToBeDisabled()}))}_inputGroupTemplate(){return Et`
        <div class="input-group">
          <slot></slot>
        </div>
      `}submitGroup(){this.submitted=!0,this.formElements.forEach((e=>{"function"==typeof e.submitGroup?e.submitGroup():e.submitted=!0}))}resetGroup(){this.formElements.forEach((e=>{"function"==typeof e.resetGroup?e.resetGroup():"function"==typeof e.reset&&e.reset()})),this.resetInteractionState()}clearGroup(){this.formElements.forEach((e=>{"function"==typeof e.clearGroup?e.clearGroup():"function"==typeof e.clear&&e.clear()})),this.resetInteractionState()}resetInteractionState(){this.submitted=!1,this.touched=!1,this.dirty=!1,this.formElements.forEach((e=>{"function"==typeof e.resetInteractionState&&e.resetInteractionState()}))}_getFromAllFormElementsFilter(e,t){return!e.disabled}_getFromAllFormElements(e,t){const n={},r=t||this._getFromAllFormElementsFilter;return this.formElements._keys().forEach((t=>{const s=this.formElements[t];s instanceof Ud?n[t]=s.filter((t=>r(t,e))).map((t=>t[e])):r(s,e)&&("function"==typeof s._getFromAllFormElements?n[t]=s._getFromAllFormElements(e):n[t]=s[e])})),n}_setValueForAllFormElements(e,t){this.formElements.forEach((n=>{n[e]=t}))}_setValueMapForAllFormElements(e,t){t&&"object"==typeof t&&Object.keys(t).forEach((n=>{Array.isArray(this.formElements[n])&&this.formElements[n].forEach(((r,s)=>{r[e]=t[n][s]})),this.formElements[n]?this.formElements[n][e]=t[n]:this.__pendingValues[e][n]=t[n]}))}_anyFormElementHas(e){return Object.keys(this.formElements).some((t=>Array.isArray(this.formElements[t])?this.formElements[t].some((t=>!!t[e])):!!this.formElements[t][e]))}_anyFormElementHasFeedbackFor(e){return Object.keys(this.formElements).some((t=>Array.isArray(this.formElements[t])?this.formElements[t].some((t=>Boolean(t.hasFeedbackFor&&t.hasFeedbackFor.includes(e)))):Boolean(this.formElements[t].hasFeedbackFor&&this.formElements[t].hasFeedbackFor.includes(e))))}_everyFormElementHas(e){return Object.keys(this.formElements).every((t=>Array.isArray(this.formElements[t])?this.formElements[t].every((t=>!!t[e])):!!this.formElements[t][e]))}__onChildValidatePerformed(e){e&&this.isRegisteredFormElement(e.target)&&this.validate()}_syncFocused(){this.focused=this._anyFormElementHas("focused")}_onFocusOut(e){const t=this.formElements[this.formElements.length-1];e.target===t&&(this.touched=!0),this.focused=!1}_syncDirty(){this.dirty=this._anyFormElementHas("dirty")}__storeAllDescriptionElementsInParentChain(){let e=this;for(;e;)Td(e._getAriaDescriptionElements(),{reverse:!0}).forEach((e=>{this.__descriptionElementsInParentChain.add(e)})),e=e._parentFormGroup}__linkParentMessages(e){this.__descriptionElementsInParentChain.forEach((t=>{"function"==typeof e.addToAriaDescribedBy&&e.addToAriaDescribedBy(t,{reorder:!1})}))}__unlinkParentMessages(e){this.__descriptionElementsInParentChain.forEach((t=>{"function"==typeof e.removeFromAriaDescribedBy&&e.removeFromAriaDescribedBy(t)}))}addFormElement(e,t){if(super.addFormElement(e,t),this.disabled&&e.makeRequestToBeDisabled(),this.__descriptionElementsInParentChain.size||this.__storeAllDescriptionElementsInParentChain(),this.__linkParentMessages(e),this.validate({clearCurrentResult:!0}),"function"==typeof e.addToAriaLabelledBy&&this._labelNode&&e.addToAriaLabelledBy(this._labelNode,{reorder:!1}),!e.modelValue){const t=this.__pendingValues;t.modelValue&&t.modelValue[e.name]?e.modelValue=t.modelValue[e.name]:t.serializedValue&&t.serializedValue[e.name]&&(e.serializedValue=t.serializedValue[e.name])}}get _initialModelValue(){return this._getFromAllFormElements("_initialModelValue")}removeFormElement(e){super.removeFormElement(e),this.validate({clearCurrentResult:!0}),"function"==typeof e.removeFromAriaLabelledBy&&this._labelNode&&e.removeFromAriaLabelledBy(this._labelNode,{reorder:!1}),this.__unlinkParentMessages(e)}}));class xp extends(kp(zt)){constructor(){super(),this._isFormOrFieldset=!0,this._repropagationRole="fieldset"}}const Cp=()=>{throw new Error("No form node found. Did you put a <form> element inside your custom-form element?")};class Np extends xp{constructor(){super(),this._submit=this._submit.bind(this),this._reset=this._reset.bind(this)}connectedCallback(){super.connectedCallback(),this.__registerEventsForLionForm(),this.removeAttribute("role")}disconnectedCallback(){super.disconnectedCallback(),this.__teardownEventsForLionForm()}get _formNode(){return this.querySelector("form")}submit(){this._formNode?this._formNode.dispatchEvent(new Event("submit",{cancelable:!0})):Cp()}_submit(e){e.preventDefault(),e.stopPropagation(),this.submitGroup(),this.dispatchEvent(new Event("submit",{bubbles:!0}))}reset(){this._formNode?this._formNode.reset():Cp()}_reset(e){e.preventDefault(),e.stopPropagation(),this.resetGroup(),this.dispatchEvent(new Event("reset",{bubbles:!0}))}__registerEventsForLionForm(){this._formNode.addEventListener("submit",this._submit),this._formNode.addEventListener("reset",this._reset)}__teardownEventsForLionForm(){this._formNode.removeEventListener("submit",this._submit),this._formNode.removeEventListener("reset",this._reset)}}const Pp=window,Rp=new WeakMap,Op=Fe((e=>class extends e{static get properties(){return{focused:{type:Boolean,reflect:!0},focusedVisible:{type:Boolean,reflect:!0,attribute:"focused-visible"}}}constructor(){super(),this.focused=!1,this.focusedVisible=!1}connectedCallback(){super.connectedCallback(),this.__registerEventsForFocusMixin()}disconnectedCallback(){super.disconnectedCallback(),this.__teardownEventsForFocusMixin()}focus(){this._focusableNode?.focus()}blur(){this._focusableNode?.blur()}get _focusableNode(){return this._inputNode||document.createElement("input")}__onFocus(){if(this.focused=!0,"function"==typeof Pp.applyFocusVisiblePolyfill)this.focusedVisible=this._focusableNode.hasAttribute("data-focus-visible-added");else try{this.focusedVisible=this._focusableNode.matches(":focus-visible")}catch(e){this.focusedVisible=!1}}__onBlur(){this.focused=!1,this.focusedVisible=!1}__registerEventsForFocusMixin(){var e;e=this.getRootNode(),Pp.applyFocusVisiblePolyfill&&!Rp.has(e)&&(Pp.applyFocusVisiblePolyfill(e),Rp.set(e,void 0)),this.__redispatchFocus=e=>{e.stopPropagation(),this.dispatchEvent(new Event("focus"))},this._focusableNode.addEventListener("focus",this.__redispatchFocus),this.__redispatchBlur=e=>{e.stopPropagation(),this.dispatchEvent(new Event("blur"))},this._focusableNode.addEventListener("blur",this.__redispatchBlur),this.__redispatchFocusin=e=>{e.stopPropagation(),this.__onFocus(),this.dispatchEvent(new Event("focusin",{bubbles:!0,composed:!0}))},this._focusableNode.addEventListener("focusin",this.__redispatchFocusin),this.__redispatchFocusout=e=>{e.stopPropagation(),this.__onBlur(),this.dispatchEvent(new Event("focusout",{bubbles:!0,composed:!0}))},this._focusableNode.addEventListener("focusout",this.__redispatchFocusout)}__teardownEventsForFocusMixin(){this._focusableNode.removeEventListener("focus",this.__redispatchFocus),this._focusableNode.removeEventListener("blur",this.__redispatchBlur),this._focusableNode.removeEventListener("focusin",this.__redispatchFocusin),this._focusableNode.removeEventListener("focusout",this.__redispatchFocusout)}})),Bp=Fe((e=>class extends(_p(Ld(e))){static get properties(){return{formattedValue:{attribute:!1},serializedValue:{attribute:!1},formatOptions:{attribute:!1}}}requestUpdate(e,t){super.requestUpdate(e,t),"modelValue"===e&&this.modelValue!==t&&this._onModelValueChanged({modelValue:this.modelValue},{modelValue:t}),"serializedValue"===e&&this.serializedValue!==t&&this._calculateValues({source:"serialized"}),"formattedValue"===e&&this.formattedValue!==t&&this._calculateValues({source:"formatted"})}get value(){return this._inputNode&&this._inputNode.value||this.__value||""}set value(e){this._inputNode?(this._inputNode.value=e,this.__value=void 0):this.__value=e}preprocessor(e,t){}parser(e,t){return e}formatter(e,t){return e}serializer(e){return void 0!==e?e:""}deserializer(e){return void 0===e?"":e}_calculateValues({source:e}={source:null}){this.__preventRecursiveTrigger||(this.__preventRecursiveTrigger=!0,"model"!==e&&("serialized"===e?this.modelValue=this.deserializer(this.serializedValue):"formatted"===e&&(this.modelValue=this._callParser())),"formatted"!==e&&(this.formattedValue=this._callFormatter()),"serialized"!==e&&(this.serializedValue=this.serializer(this.modelValue)),this._reflectBackFormattedValueToUser(),this.__preventRecursiveTrigger=!1,this.__prevViewValue=this.value)}_callParser(e=this.formattedValue){if(""===e)return"";if("string"!=typeof e)return;const t=this.parser(e,this.formatOptions);return void 0!==t?t:new Id(e)}_callFormatter(){return this._isHandlingUserInput&&this.hasFeedbackFor?.length&&this.hasFeedbackFor.includes("error")&&this._inputNode?this._inputNode?this.value:void 0:this.modelValue instanceof Id?this.modelValue.viewValue:this.formatter(this.modelValue,this.formatOptions)}_onModelValueChanged(...e){this._calculateValues({source:"model"}),this._dispatchModelValueChangedEvent(...e)}_dispatchModelValueChangedEvent(...e){this.dispatchEvent(new CustomEvent("model-value-changed",{bubbles:!0,detail:{formPath:[this],isTriggeredByUser:Boolean(this._isHandlingUserInput)}}))}_syncValueUpwards(){this.__isHandlingComposition||this.__handlePreprocessor();const e=this.formattedValue;this.modelValue=this._callParser(this.value),e===this.formattedValue&&this.__prevViewValue!==this.value&&this._calculateValues()}__handlePreprocessor(){const e=this.value;let t=this.value.length;this._inputNode&&"selectionStart"in this._inputNode&&"range"!==this._inputNode?.type&&(t=this._inputNode.selectionStart);const n=this.preprocessor(this.value,{...this.formatOptions,currentCaretIndex:t,prevViewValue:this.__prevViewValue});if(this.__prevViewValue=e,void 0!==n)if("string"==typeof n)this.value=n;else if("object"==typeof n){const{viewValue:e,caretIndex:t}=n;this.value=e,t&&this._inputNode&&"selectionStart"in this._inputNode&&(this._inputNode.selectionStart=t,this._inputNode.selectionEnd=t)}}_reflectBackFormattedValueToUser(){this._reflectBackOn()&&(this.value=void 0!==this.formattedValue?this.formattedValue:"")}_reflectBackOn(){return!this._isHandlingUserInput}_proxyInputEvent(){this.dispatchEvent(new Event("user-input-changed",{bubbles:!0}))}_onUserInputChanged(){this._isHandlingUserInput=!0,this._syncValueUpwards(),this._isHandlingUserInput=!1}__onCompositionEvent({type:e}){"compositionstart"===e?this.__isHandlingComposition=!0:"compositionend"===e&&(this.__isHandlingComposition=!1,this._syncValueUpwards())}constructor(){super(),this.formatOn="change",this.formatOptions={},this.formattedValue=void 0,this.serializedValue=void 0,this._isPasting=!1,this._isHandlingUserInput=!1,this.__prevViewValue="",this.__onCompositionEvent=this.__onCompositionEvent.bind(this),this.addEventListener("user-input-changed",this._onUserInputChanged),this.addEventListener("paste",this.__onPaste),this._reflectBackFormattedValueToUser=this._reflectBackFormattedValueToUser.bind(this),this._reflectBackFormattedValueDebounced=()=>{setTimeout(this._reflectBackFormattedValueToUser)}}__onPaste(){this._isPasting=!0,this.formatOptions.mode="pasted",setTimeout((()=>{this._isPasting=!1,this.formatOptions.mode="auto"}))}connectedCallback(){super.connectedCallback(),void 0===this.modelValue&&this._syncValueUpwards(),this.__prevViewValue=this.value,this._reflectBackFormattedValueToUser(),this._inputNode&&(this._inputNode.addEventListener(this.formatOn,this._reflectBackFormattedValueDebounced),this._inputNode.addEventListener("input",this._proxyInputEvent),this._inputNode.addEventListener("compositionstart",this.__onCompositionEvent),this._inputNode.addEventListener("compositionend",this.__onCompositionEvent))}disconnectedCallback(){super.disconnectedCallback(),this._inputNode&&(this._inputNode.removeEventListener("input",this._proxyInputEvent),this._inputNode.removeEventListener(this.formatOn,this._reflectBackFormattedValueDebounced),this._inputNode.removeEventListener("compositionstart",this.__onCompositionEvent),this._inputNode.removeEventListener("compositionend",this.__onCompositionEvent))}})),Sp=Fe((e=>class extends(Bp(Op(Ld(e)))){static get properties(){return{autocomplete:{type:String,reflect:!0}}}constructor(){super(),this.autocomplete=void 0}get _inputNode(){return super._inputNode}get selectionStart(){const e=this._inputNode;return e&&e.selectionStart?e.selectionStart:0}set selectionStart(e){const t=this._inputNode;t&&t.selectionStart&&(t.selectionStart=e)}get selectionEnd(){const e=this._inputNode;return e&&e.selectionEnd?e.selectionEnd:0}set selectionEnd(e){const t=this._inputNode;t&&t.selectionEnd&&(t.selectionEnd=e)}get value(){return this._inputNode&&this._inputNode.value||this.__value||""}set value(e){this._inputNode?(this._inputNode.value!==e&&this._setValueAndPreserveCaret(e),this.__value=void 0):this.__value=e}_setValueAndPreserveCaret(e){if(this.focused)try{if(!(this._inputNode instanceof HTMLSelectElement)){const t=this._inputNode.selectionStart;this._inputNode.value=e,this._inputNode.selectionStart=t,this._inputNode.selectionEnd=t}}catch(t){this._inputNode.value=e}else this._inputNode.value=e}_reflectBackFormattedValueToUser(){if(super._reflectBackFormattedValueToUser(),this._reflectBackOn()&&this.focused)try{this._inputNode.selectionStart=this._inputNode.value.length}catch(e){}}get _focusableNode(){return this._inputNode}})),Tp=Fe((e=>class extends(Ld(e)){static get properties(){return{touched:{type:Boolean,reflect:!0},dirty:{type:Boolean,reflect:!0},filled:{type:Boolean,reflect:!0},prefilled:{attribute:!1},submitted:{attribute:!1}}}requestUpdate(e,t){super.requestUpdate(e,t),"touched"===e&&this.touched!==t&&this._onTouchedChanged(),"modelValue"===e&&(this.filled=!this._isEmpty()),"dirty"===e&&this.dirty!==t&&this._onDirtyChanged()}constructor(){super(),this.touched=!1,this.dirty=!1,this.prefilled=!1,this.filled=!1,this._leaveEvent="blur",this._valueChangedEvent="model-value-changed",this._iStateOnLeave=this._iStateOnLeave.bind(this),this._iStateOnValueChange=this._iStateOnValueChange.bind(this)}connectedCallback(){super.connectedCallback(),this.addEventListener(this._leaveEvent,this._iStateOnLeave),this.addEventListener(this._valueChangedEvent,this._iStateOnValueChange),this.initInteractionState()}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener(this._leaveEvent,this._iStateOnLeave),this.removeEventListener(this._valueChangedEvent,this._iStateOnValueChange)}initInteractionState(){this.dirty=!1,this.prefilled=!this._isEmpty()}_iStateOnLeave(){this.touched=!0,this.prefilled=!this._isEmpty()}_iStateOnValueChange(){this.dirty=!0}resetInteractionState(){this.touched=!1,this.submitted=!1,this.dirty=!1,this.prefilled=!this._isEmpty()}_onTouchedChanged(){this.dispatchEvent(new Event("touched-changed",{bubbles:!0,composed:!0}))}_onDirtyChanged(){this.dispatchEvent(new Event("dirty-changed",{bubbles:!0,composed:!0}))}_showFeedbackConditionFor(e,t){return t.touched&&t.dirty||t.prefilled||t.submitted}get _feedbackConditionMeta(){return{...super._feedbackConditionMeta,submitted:this.submitted,touched:this.touched,dirty:this.dirty,filled:this.filled,prefilled:this.prefilled}}}));class Ip extends(Ld(Tp(Op(Bp(_p(Bd(zt))))))){firstUpdated(e){super.firstUpdated(e),this._initialModelValue=this.modelValue}connectedCallback(){super.connectedCallback(),this._onChange=this._onChange.bind(this),this._inputNode.addEventListener("change",this._onChange),this.classList.add("form-field")}disconnectedCallback(){super.disconnectedCallback(),this._inputNode.removeEventListener("change",this._onChange)}resetInteractionState(){super.resetInteractionState(),this.submitted=!1}reset(){this.modelValue=this._initialModelValue,this.resetInteractionState()}clear(){this.modelValue=""}_onChange(){this.dispatchEvent(new Event("user-input-changed",{bubbles:!0}))}get _feedbackConditionMeta(){return{...super._feedbackConditionMeta,focused:this.focused}}get _focusableNode(){return this._inputNode}}class Fp extends(Sp(Ip)){static get properties(){return{readOnly:{type:Boolean,attribute:"readonly",reflect:!0},type:{type:String,reflect:!0},placeholder:{type:String,reflect:!0}}}get slots(){return{...super.slots,input:()=>{const e=document.createElement("input"),t=this.getAttribute("value");return t&&e.setAttribute("value",t),e}}}get _inputNode(){return super._inputNode}constructor(){super(),this.readOnly=!1,this.type="text",this.placeholder=""}requestUpdate(e,t){super.requestUpdate(e,t),"readOnly"===e&&this.__delegateReadOnly()}firstUpdated(e){super.firstUpdated(e),this.__delegateReadOnly()}updated(e){super.updated(e),e.has("type")&&(this._inputNode.type=this.type),e.has("placeholder")&&(this._inputNode.placeholder=this.placeholder),e.has("disabled")&&(this._inputNode.disabled=this.disabled,this.validate()),e.has("name")&&(this._inputNode.name=this.name),e.has("autocomplete")&&(this._inputNode.autocomplete=this.autocomplete)}__delegateReadOnly(){this._inputNode&&(this._inputNode.readOnly=this.readOnly)}}const Lp=Fe((e=>class extends e{constructor(){super(),this.registrationTarget=void 0,this.__redispatchEventForFormRegistrarPortalMixin=this.__redispatchEventForFormRegistrarPortalMixin.bind(this),this.addEventListener("form-element-register",this.__redispatchEventForFormRegistrarPortalMixin)}__redispatchEventForFormRegistrarPortalMixin(e){if(e.stopPropagation(),!this.registrationTarget)throw new Error("A FormRegistrarPortal element requires a .registrationTarget");this.registrationTarget.dispatchEvent(new CustomEvent("form-element-register",{detail:{element:e.detail.element},bubbles:!0}))}}));class Up extends(Lp(zt)){static get properties(){return{role:{type:String,reflect:!0},tabIndex:{type:Number,reflect:!0,attribute:"tabindex"}}}constructor(){super(),this.role="listbox",this.tabIndex=0}createRenderRoot(){return this}}const Mp=(e,t={})=>e.value!==t.value||e.checked!==t.checked,Dp=Fe((e=>class extends(Bp(e)){static get properties(){return{checked:{type:Boolean,reflect:!0},disabled:{type:Boolean,reflect:!0},modelValue:{type:Object,hasChanged:Mp},choiceValue:{type:Object}}}get choiceValue(){return this.modelValue.value}set choiceValue(e){this.requestUpdate("choiceValue",this.choiceValue),this.modelValue.value!==e&&(this.modelValue={value:e,checked:this.modelValue.checked})}requestUpdate(e,t){super.requestUpdate(e,t),"modelValue"===e?this.modelValue.checked!==this.checked&&this.__syncModelCheckedToChecked(this.modelValue.checked):"checked"===e&&this.modelValue.checked!==this.checked&&this.__syncCheckedToModel(this.checked)}firstUpdated(e){super.firstUpdated(e),e.has("checked")&&this.__syncCheckedToInputElement()}updated(e){super.updated(e),e.has("modelValue")&&this.__syncCheckedToInputElement(),e.has("name")&&this._parentFormGroup&&this._parentFormGroup.name!==this.name&&this._syncNameToParentFormGroup()}constructor(){super(),this.modelValue={value:"",checked:!1},this.disabled=!1,this._preventDuplicateLabelClick=this._preventDuplicateLabelClick.bind(this),this._toggleChecked=this._toggleChecked.bind(this)}static get styles(){return[...super.styles||[],He`
          :host {
            display: flex;
            flex-wrap: wrap;
          }

          :host([hidden]) {
            display: none;
          }

          .choice-field__graphic-container {
            display: none;
          }
          .choice-field__help-text {
            display: block;
            flex-basis: 100%;
          }
        `]}render(){return Et`
        <slot name="input"></slot>
        <div class="choice-field__graphic-container">${this._choiceGraphicTemplate()}</div>
        <div class="choice-field__label">
          <slot name="label"></slot>
        </div>
        <small class="choice-field__help-text">
          <slot name="help-text"></slot>
        </small>
        ${this._afterTemplate()}
      `}_choiceGraphicTemplate(){return xt}_afterTemplate(){return xt}connectedCallback(){super.connectedCallback(),this._labelNode&&this._labelNode.addEventListener("click",this._preventDuplicateLabelClick),this.addEventListener("user-input-changed",this._toggleChecked)}disconnectedCallback(){super.disconnectedCallback(),this._labelNode&&this._labelNode.removeEventListener("click",this._preventDuplicateLabelClick),this.removeEventListener("user-input-changed",this._toggleChecked)}_preventDuplicateLabelClick(e){const t=e=>{e.stopImmediatePropagation(),this._inputNode.removeEventListener("click",t)};this._inputNode.addEventListener("click",t)}_toggleChecked(e){this.disabled||(this._isHandlingUserInput=!0,this.checked=!this.checked,this._isHandlingUserInput=!1)}_syncNameToParentFormGroup(){this._parentFormGroup.tagName.includes(this.tagName)&&(this.name=this._parentFormGroup?.name||"")}__syncModelCheckedToChecked(e){this.checked=e}__syncCheckedToModel(e){this.modelValue={value:this.choiceValue,checked:e}}__syncCheckedToInputElement(){this._inputNode&&(this._inputNode.checked=this.checked)}_proxyInputEvent(){}_onModelValueChanged({modelValue:e},t){let n;t&&t.modelValue&&(n=t.modelValue),this.constructor.elementProperties.get("modelValue").hasChanged(e,n)&&super._onModelValueChanged({modelValue:e})}parser(){return this.modelValue}formatter(e){return e&&void 0!==e.value?e.value:e}clear(){this.checked=!1}_isEmpty(){return!this.checked}_syncValueUpwards(){}}));class $p extends(Le(Dp(Fd(Bd(zt))))){static get properties(){return{active:{type:Boolean,reflect:!0}}}static get styles(){return[He`
        :host {
          display: block;
          background-color: white;
          padding: 4px;
          cursor: default;
        }

        :host([hidden]) {
          display: none;
        }

        :host(:hover) {
          background-color: #eee;
        }
        :host([active]) {
          background-color: #ddd;
        }

        :host([checked]) {
          background-color: #bde4ff;
        }

        :host([disabled]) {
          color: #adadad;
        }
      `]}get slots(){return{}}constructor(){super(),this.active=!1,this.__onClick=this.__onClick.bind(this),this.__registerEventListeners()}requestUpdate(e,t){super.requestUpdate(e,t),"active"===e&&this.active!==t&&this.dispatchEvent(new Event("active-changed",{bubbles:!0}))}updated(e){super.updated(e),e.has("checked")&&this.setAttribute("aria-selected",`${this.checked}`),e.has("disabled")&&this.setAttribute("aria-disabled",`${this.disabled}`)}render(){return Et`
      <div class="choice-field__label">
        <slot></slot>
      </div>
    `}connectedCallback(){super.connectedCallback(),this.setAttribute("role","option")}__registerEventListeners(){this.addEventListener("click",this.__onClick)}__unRegisterEventListeners(){this.removeEventListener("click",this.__onClick)}__onClick(){if(this.disabled)return;const e=this._parentFormGroup;this._isHandlingUserInput=!0,e&&e.multipleChoice?(this.checked=!this.checked,this.active=!this.active):(this.checked=!0,this.active=!0),this._isHandlingUserInput=!1}}class jp extends Ip{static get properties(){return{autocomplete:{type:String}}}constructor(){super(),this.autocomplete=void 0}get _inputNode(){return Array.from(this.children).find((e=>"input"===e.slot))}}class Vp extends jp{connectedCallback(){super.connectedCallback(),this._inputNode.addEventListener("change",this._proxyChangeEvent)}updated(e){super.updated(e),e.has("disabled")&&(this._inputNode.disabled=this.disabled,this.validate()),e.has("name")&&(this._inputNode.name=this.name),e.has("autocomplete")&&(this._inputNode.autocomplete=this.autocomplete)}disconnectedCallback(){super.disconnectedCallback(),this._inputNode.removeEventListener("change",this._proxyChangeEvent)}formatter(e){const t=Array.from(this._inputNode.options).find((t=>t.value===e));return t?t.text:""}_reflectBackFormattedValueToUser(){this._reflectBackOn()&&(this.value=void 0!==this.modelValue?this.modelValue:"")}_proxyChangeEvent(){this.dispatchEvent(new CustomEvent("user-input-changed",{bubbles:!0,composed:!0}))}}const Hp=e=>e==e&&"number"==typeof e;class Gp extends bp{static get validatorName(){return"IsNumber"}execute(e){let t=!1;return Hp(e)||(t=!0),t}}class zp extends bp{static get validatorName(){return"MinNumber"}execute(e,t=this.param){let n=!1;return(!Hp(e)||e<t)&&(n=!0),n}}class qp extends bp{static get validatorName(){return"MaxNumber"}execute(e,t=this.param){let n=!1;return(!Hp(e)||e>t)&&(n=!0),n}}class Qp extends bp{static get validatorName(){return"MinMaxNumber"}execute(e,{min:t=0,max:n=0}=this.param){let r=!1;return(!Hp(e)||e<t||e>n)&&(r=!0),r}}class Jp extends Fp{static get styles(){return[...super.styles,He`
        .input-group__container > .input-group__input ::slotted(.form-control) {
          text-align: center;
        }
      `]}static get properties(){return{min:{type:Number,reflect:!0},max:{type:Number,reflect:!0},step:{type:Number,reflect:!0}}}get currentValue(){return parseFloat(this.value)||0}get _inputNode(){return super._inputNode}constructor(){super(),this.parser=e=>parseFloat(e),this.min=1/0,this.max=1/0,this.step=1,this.values={max:this.max,min:this.min,step:this.step},this.__increment=this.__increment.bind(this),this.__decrement=this.__decrement.bind(this),this.__boundOnLeaveButton=this._onLeaveButton.bind(this)}connectedCallback(){super.connectedCallback(),this.values={max:this.max,min:this.min,step:this.step},this.role="spinbutton",this.addEventListener("keydown",this.__keyDownHandler),this._inputNode.setAttribute("inputmode","decimal"),this._inputNode.setAttribute("autocomplete","off"),this.setAttribute("aria-label",this.label),this.step=this.hasAttribute("step")?this.step:1,this.__setAriaLabelsAndValidator(),this.__toggleSpinnerButtonsState()}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("keydown",this.__keyDownHandler)}updated(e){super.updated(e),e.has("modelValue")&&this.__toggleSpinnerButtonsState(),e.has("min")&&(this._inputNode.min=`${this.min}`,this.values.min=this.min,this.__toggleSpinnerButtonsState()),e.has("max")&&(this._inputNode.max=`${this.max}`,this.values.max=this.max,this.__toggleSpinnerButtonsState()),e.has("step")&&(this._inputNode.step=`${this.step}`,this.values.step=this.step)}get slots(){return{...super.slots,prefix:()=>this.__getDecrementButtonNode(),suffix:()=>this.__getIncrementButtonNode()}}__setAriaLabelsAndValidator(){const e={"aria-valuemax":this.values.max,"aria-valuemin":this.values.min},t=Object.entries(e).map((([e,t])=>t!==1/0?(this.setAttribute(e,`${t}`),"aria-valuemax"===e?new qp(t):new zp(t)):null)).filter((e=>null!==e)),n=[new Gp,...t];this.defaultValidators.push(...n)}__keyDownHandler(e){"ArrowUp"===e.key&&this.__increment(),"ArrowDown"===e.key&&this.__decrement()}__toggleSpinnerButtonsState(){const{min:e,max:t}=this.values,n=this.__getSlot("prefix"),r=this.__getSlot("suffix"),s=this.currentValue>=t&&t!==1/0;n[this.currentValue<=e&&e!==1/0?"setAttribute":"removeAttribute"]("disabled","true"),r[s?"setAttribute":"removeAttribute"]("disabled","true"),this.setAttribute("aria-valuenow",`${this.currentValue}`)}__getSlot(e){return Array.from(this.children).find((t=>t.slot===e))||{}}__increment(){const{step:e,max:t}=this.values,n=this.currentValue+e;(n<=t||t===1/0)&&(this.value=`${n}`,this.__toggleSpinnerButtonsState(),this._proxyInputEvent())}__decrement(){const{step:e,min:t}=this.values,n=this.currentValue-e;(n>=t||t===1/0)&&(this.value=`${n}`,this.__toggleSpinnerButtonsState(),this._proxyInputEvent())}__getIncrementButtonNode(){const e=document.createElement("div");return Vt(this._incrementorTemplate(),e,{scopeName:this.localName,eventContext:this}),e.firstElementChild}__getDecrementButtonNode(){const e=document.createElement("div");return Vt(this._decrementorTemplate(),e,{scopeName:this.localName,eventContext:this}),e.firstElementChild}_onChange(){super._onChange(),this.__toggleSpinnerButtonsState()}_decrementorSignTemplate(){return"－"}_incrementorSignTemplate(){return"＋"}_decrementorTemplate(){return Et`
      <button
        ?disabled=${this.disabled||this.readOnly}
        @click=${this.__decrement}
        @blur=${this.__boundOnLeaveButton}
        tabindex="-1"
        type="button"
        aria-label="decrement"
      >
        ${this._decrementorSignTemplate()}
      </button>
    `}_incrementorTemplate(){return Et`
      <button
        ?disabled=${this.disabled||this.readOnly}
        @click=${this.__increment}
        @blur=${this.__boundOnLeaveButton}
        tabindex="-1"
        type="button"
        aria-label="increment"
      >
        ${this._incrementorSignTemplate()}
      </button>
    `}_onLeaveButton(){this.dispatchEvent(new Event(this._leaveEvent))}}class Kp{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,n){this._$Ct=e,this._$AM=t,this._$Ci=n}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}const Wp=(e,t)=>{var n,r;const s=e._$AN;if(void 0===s)return!1;for(const e of s)null===(r=(n=e)._$AO)||void 0===r||r.call(n,t,!1),Wp(e,t);return!0},Yp=e=>{let t,n;do{if(void 0===(t=e._$AM))break;n=t._$AN,n.delete(e),e=t}while(0===(null==n?void 0:n.size))},Zp=e=>{for(let t;t=e._$AM;e=t){let n=t._$AN;if(void 0===n)t._$AN=n=new Set;else if(n.has(e))break;n.add(e),tf(t)}};function Xp(e){void 0!==this._$AN?(Yp(this),this._$AM=e,Zp(this)):this._$AM=e}function ef(e,t=!1,n=0){const r=this._$AH,s=this._$AN;if(void 0!==s&&0!==s.size)if(t)if(Array.isArray(r))for(let e=n;e<r.length;e++)Wp(r[e],!1),Yp(r[e]);else null!=r&&(Wp(r,!1),Yp(r));else Wp(this,e)}const tf=e=>{var t,n,r,s;2==e.type&&(null!==(t=(r=e)._$AP)&&void 0!==t||(r._$AP=ef),null!==(n=(s=e)._$AQ)&&void 0!==n||(s._$AQ=Xp))};class nf extends Kp{constructor(){super(...arguments),this._$AN=void 0}_$AT(e,t,n){super._$AT(e,t,n),Zp(this),this.isConnected=e._$AU}_$AO(e,t=!0){var n,r;e!==this.isConnected&&(this.isConnected=e,e?null===(n=this.reconnected)||void 0===n||n.call(this):null===(r=this.disconnected)||void 0===r||r.call(this)),t&&(Wp(this,e),Yp(this))}setValue(e){if((e=>void 0===this._$Ct.strings)())this._$Ct._$AI(e,this);else{const t=[...this._$Ct._$AH];t[this._$Ci]=e,this._$Ct._$AI(t,this,0)}}disconnected(){}reconnected(){}}class rf{constructor(e){this.G=e}disconnect(){this.G=void 0}reconnect(e){this.G=e}deref(){return this.G}}class sf{constructor(){this.Y=void 0,this.Z=void 0}get(){return this.Y}pause(){var e;null!==(e=this.Y)&&void 0!==e||(this.Y=new Promise((e=>this.Z=e)))}resume(){var e;null===(e=this.Z)||void 0===e||e.call(this),this.Y=this.Z=void 0}}const of=e=>!(e=>null===e||"object"!=typeof e&&"function"!=typeof e)(e)&&"function"==typeof e.then,af=1073741823,lf=(uf=class extends nf{constructor(){super(...arguments),this._$C_t=af,this._$Cwt=[],this._$Cq=new rf(this),this._$CK=new sf}render(...e){var t;return null!==(t=e.find((e=>!of(e))))&&void 0!==t?t:kt}update(e,t){const n=this._$Cwt;let r=n.length;this._$Cwt=t;const s=this._$Cq,i=this._$CK;this.isConnected||this.disconnected();for(let e=0;e<t.length&&!(e>this._$C_t);e++){const o=t[e];if(!of(o))return this._$C_t=e,o;e<r&&o===n[e]||(this._$C_t=af,r=0,Promise.resolve(o).then((async e=>{for(;i.get();)await i.get();const t=s.deref();if(void 0!==t){const n=t._$Cwt.indexOf(o);n>-1&&n<t._$C_t&&(t._$C_t=n,t.setValue(e))}})))}return kt}disconnected(){this._$Cq.disconnect(),this._$CK.pause()}reconnected(){this._$Cq.reconnect(this),this._$CK.resume()}},(...e)=>({_$litDirective$:uf,values:e})),cf=Fe((e=>class extends e{static get localizeNamespaces(){return[]}static get waitForLocalizeNamespaces(){return!0}constructor(){super(),this.__boundLocalizeOnLocaleChanged=(...e)=>{const t=Array.from(e)[0];this.__localizeOnLocaleChanged(t)},this.__boundLocalizeOnLocaleChanging=()=>{this.__localizeOnLocaleChanging()},this.__localizeStartLoadingNamespaces(),this.localizeNamespacesLoaded&&this.localizeNamespacesLoaded.then((()=>{this.__localizeMessageSync=!0}))}async performUpdate(){Object.getPrototypeOf(this).constructor.waitForLocalizeNamespaces&&await this.localizeNamespacesLoaded,super.performUpdate()}connectedCallback(){super.connectedCallback(),this.localizeNamespacesLoaded&&this.localizeNamespacesLoaded.then((()=>this.onLocaleReady())),fp.addEventListener("__localeChanging",this.__boundLocalizeOnLocaleChanging),fp.addEventListener("localeChanged",this.__boundLocalizeOnLocaleChanged)}disconnectedCallback(){super.disconnectedCallback(),fp.removeEventListener("__localeChanging",this.__boundLocalizeOnLocaleChanging),fp.removeEventListener("localeChanged",this.__boundLocalizeOnLocaleChanged)}msgLit(e,t,n){return this.__localizeMessageSync?fp.msg(e,t,n):this.localizeNamespacesLoaded?lf(this.localizeNamespacesLoaded.then((()=>fp.msg(e,t,n))),xt):""}__getUniqueNamespaces(){const e=[],t=new Set;return Object.getPrototypeOf(this).constructor.localizeNamespaces.forEach(t.add.bind(t)),t.forEach((t=>{e.push(t)})),e}__localizeStartLoadingNamespaces(){this.localizeNamespacesLoaded=fp.loadNamespaces(this.__getUniqueNamespaces())}__localizeOnLocaleChanging(){this.__localizeStartLoadingNamespaces()}__localizeOnLocaleChanged(e){this.onLocaleChanged(e.detail.newLocale,e.detail.oldLocale)}onLocaleReady(){this.onLocaleUpdated()}onLocaleChanged(e,t){this.onLocaleUpdated(),this.requestUpdate()}onLocaleUpdated(){}}));var uf;function hf(e){return e||(fp&&fp.locale?fp.locale:"en-GB")}function df(e,t){if(t&&t.decimalSeparator)return t.decimalSeparator;const n=hf(e);return Intl.NumberFormat(n,{style:"decimal",minimumFractionDigits:1}).format(1)[1]}function pf(e){return 160===e.charCodeAt(0)||8239===e.charCodeAt(0)?" ":e}function ff(e,t){if(t&&t.groupSeparator)return t.groupSeparator;const n=hf(e);return pf(Intl.NumberFormat(n,{style:"decimal",minimumFractionDigits:0}).format(1e4)[2])}function mf(e){if("currency"===e[0].type){const t=e.splice(0,1),n=e.splice(0,1);e.push(n[0]),e.push(t[0])}else if("minusSign"===e[0].type&&"currency"===e[1].type){const t=e.splice(1,1),n=e.splice(1,1);e.push(n[0]),e.push(t[0])}return e}const gf={EUR:"€",USD:"$",JPY:"¥"};function yf(e,t={}){let n="string"==typeof e?parseFloat(e):e;const r=hf(t&&t.locale);if(Number.isNaN(n))return t&&t.returnIfNaN||fp.formatNumberOptions.returnIfNaN;t&&t.roundMode&&(n=function(e,t){switch(t){case"floor":return Math.floor(e);case"ceiling":return Math.ceil(e);case"round":return Math.round(e);default:throw new Error("roundMode can only be round|floor|ceiling")}}(e,t.roundMode));let s=[];const i=Intl.NumberFormat(r,t).format(n),{decimalSeparator:o,groupSeparator:a}=function(e,t,n){const r=/[0-9](?<sep>[\s,. _ '])[0-9]/g,s=[];let i;for(;null!==(i=r.exec(t));)i.groups&&i.groups.sep&&s.push(i.groups?.sep);let o=null,a=null;return s&&(1===s.length?t.split(s[0])[1].replace(/[^0-9]/g,"").length>=3&&(e>=1e3||e<=-1e3||n?.minimumIntegerDigits&&n.minimumIntegerDigits>3)?[o]=s:[a]=s:s.every((e=>e===s[0]))?[o]=s:([o]=s,a=s[s.length-1])),{groupSeparator:o,decimalSeparator:a}}(n,i,t),l=/[.,\s0-9 _ ]/,c=/[-]/,u=/[0-9]/,h=/[\s]/;let d="",p="",f=!1,m=!1;const g=ff(r,t),y=df(r,t);if(o&&a&&g===y)throw new Error(`Decimal and group (thousand) separator are the same character: '${g}'.\nThis can happen due to both props being specified as the same, or one of the props being the same as the other one from default locale.\nPlease specify .groupSeparator / .decimalSeparator on the formatOptions object to be different.`);for(let e=0;e<i.length;e+=1){if(c.test(i[e])&&s.push({type:"minusSign",value:"−"}),u.test(i[e])&&(p+=i[e]),l.test(i[e])||c.test(i[e])||(d+=i[e]),l.test(i[e])&&d&&(s.push({type:"currency",value:d}),d=""),i[e]===a&&i[e-1].match(u)&&i[e+1].match(u)&&(p&&(s.push({type:"integer",value:p}),p=""),s.push({type:"group",value:g}),m=!0),i[e]===o&&(p&&(s.push({type:"integer",value:p}),p=""),s.push({type:"decimal",value:y}),f=!0),h.test(i[e])){const t=!!p;p&&!f?(s.push({type:"integer",value:p}),p=""):p&&(s.push({type:"fraction",value:p}),p=""),pf(i[e])===g&&t&&!f?s.push({type:"group",value:i[e]}):m||s.push({type:"literal",value:i[e]})}m=!1,!0===f&&e===i.length-1?p&&s.push({type:"fraction",value:p}):e===i.length-1&&p&&s.push({type:"integer",value:p}),e===i.length-1&&d&&(s.push({type:"currency",value:d}),d="")}return s=function(e,t={},n){let r=function(e){const t=[];return e.forEach((e=>{t.push({type:e.type,value:pf(e.value)})})),t}(e);return"currency"===t.style&&("code"===t.currencyDisplay&&"nl"===n.slice(0,2)&&(r=mf(r)),"bg-BG"===n&&(r=function(e,t){let n,r,s=[];for(let t=0;t<e.length;t+=1)"integer"===e[t].type&&(n=e.splice(0,t),r=e.splice(0,1));if(void 0!==r){const i=r[0].value.length,o=i%3,a=Math.floor(i/3),l=[];let c=0,u="",h=!1;for(let e=0;e<i;e+=1)u+=r[0].value[e],u.length===o&&!1===h?(l.push({type:"integer",value:u}),i>3&&l.push({type:"group",value:t}),u="",h=!0):3===u.length&&e<i-1&&(c+=1,l.push({type:"integer",value:u}),c!==a&&l.push({type:"group",value:t}),u="");l.push({type:"integer",value:u}),n&&(s=n.concat(l,e))}return s}(r,ff()),r=function(e){return e.map((e=>("group"===e.type&&"0"===e.value&&(e.value=" "),e)))}(r)),"en-GB"!==n&&"en-US"!==n&&"en-AU"!==n&&"en-PH"!==n||(r=function(e,{currency:t,currencyDisplay:n}={}){const r=e.length,s={type:"literal",value:" "};return r>1&&t&&"code"===n&&("currency"===e[0].type&&"literal"!==e[1].type?e.splice(1,0,s):"minusSign"===e[0].type&&"currency"===e[1].type&&"literal"!==e[2].type?e.splice(2,0,s):"currency"===e[r-1].type&&"literal"!==e[r-2].type&&e.splice(r-1,0,s)),e}(r,t)),"fr-FR"!==n&&"fr-BE"!==n||(r=function(e,{currency:t,currencyDisplay:n}={}){const r=e,s=r.length;return s>1&&"JPY"===t&&"symbol"===n&&(r[s-1].value="¥"),r}(r,t)),"tr-TR"===n&&(r=function(e,{currency:t,currencyDisplay:n}={}){const r=e;return"TRY"===t&&"code"===n&&r.map((e=>{const t=e;return"currency"===e.type&&(t.value="TL"),t})),r}(r,t),"code"===t.currencyDisplay&&(r=mf(r))),"en-AU"===n&&(r=function(e,{currency:t,currencyDisplay:n}={}){const r=e;return e.length>1&&"symbol"===n&&t&&(Object.keys(gf).includes(t)&&(r[0].value=gf[t]),r[1].value=""),r}(r,t))),r}(s,t,r),s}function bf(e="EUR"){const t=yf(123,{style:"currency",currency:e}),[n]=t.filter((e=>"fraction"===e.type));return n?n.value.length:0}function wf(e,t){const n={currency:"EUR",...t};return void 0===n.minimumFractionDigits&&(n.minimumFractionDigits=bf(n.currency)),void 0===n.maximumFractionDigits&&(n.maximumFractionDigits=bf(n.currency)),function(e,t={}){if(null==e)return"";const n=yf(e,t);if(n===t.returnIfNaN||n===fp.formatNumberOptions.returnIfNaN)return n;let r="";const s=n&&n.length;for(let e=0;e<s;e+=1){const t=n[e];r+=t.value}const i=hf(t&&t.locale);return fp.formatNumberOptions.postProcessors.size>0&&Array.from(fp.formatNumberOptions.postProcessors).forEach((([e,t])=>{e===i&&(r=t(r))})),t.postProcessors&&t.postProcessors.size>0&&Array.from(t.postProcessors).forEach((([e,t])=>{e===i&&(r=t(r))})),r}(e,n)}function vf(e,t){const n=function(e,t){if(!e.match(/\d/g))return;const n=e.match(/[0-9,.\- ]/g);if(!n)return;const r=n.join(""),s=function(e,{mode:t="auto"}={}){const n=e.match(/[., ]/g);if("auto"===t&&n&&1===n.length)return"withLocale";if(e.length>4){const t=e[e.length-4];if(function(e){return"."===e||","===e}(t)){const n=e.substring(0,e.length-4).match(/[., ]/g);if(n){const e=t;return-1===n.indexOf(e)?"heuristic":"unparseable"}return"withLocale"}}return"heuristic"}(r,t);switch(s){case"unparseable":{const e=r.match(/[0-9]/g)?.join("");return e?parseFloat(e):NaN}case"withLocale":return function(e,t){const n=df(t&&t.locale?t.locale:void 0,t),r=new RegExp(`[0-9${n}-]`,"g");let s=e.match(r)?.join("");return","===n&&(s=s?.replace(",",".")),s?parseFloat(s):NaN}(r,t||{});case"heuristic":return function(e){if(e.match(/[0-9., ]/g)){const t=e.replace(/(,|\.)([^,|.]*)$/g,"_decSep_$2").replace(/(,|\.| )/g,"").replace(/_decSep_/,".");return parseFloat(t)}return 0}(r);default:return 0}}(e,t);if("number"!=typeof n)return n;const r={...t};return r.currency&&void 0===r.maximumFractionDigits&&(r.maximumFractionDigits=bf(r.currency)),function(e,t){return Number(void 0===t?e:`${Math.round(Number(`${e}e${t}`))}e-${t}`)}(n,r.maximumFractionDigits)}class Af extends(cf(Fp)){static get properties(){return{currency:String,modelValue:Number,locale:{attribute:!1}}}get slots(){return{...super.slots,after:()=>{const e=document.createElement("span");return e.setAttribute("data-label",""),e.textContent=this.__currencyLabel,e}}}static get styles(){return[...super.styles,He`
        .input-group__container > .input-group__input ::slotted(.form-control) {
          text-align: right;
        }
      `]}constructor(){super(),this.parser=vf,this.formatter=wf,this.currency=void 0,this.locale=void 0,this.__currencyDisplayNodeIsConnected=!0,this.defaultValidators.push(new Gp)}connectedCallback(){super.connectedCallback(),this.type="text",this._inputNode.setAttribute("inputmode","decimal"),this.currency&&this.__setCurrencyDisplayLabel()}updated(e){super.updated(e),e.has("currency")&&this._onCurrencyChanged({currency:this.currency||null}),e.has("locale")&&this.locale!==e.get("locale")&&(this.locale?this.formatOptions.locale=this.locale:delete this.formatOptions.locale,this.__reformat())}_connectSlotMixin(){super._connectSlotMixin(),this._isPrivateSlot("after")&&this._onCurrencyChanged({currency:this.currency||null})}onLocaleChanged(e,t){super.onLocaleChanged(e,t),this.locale||this.__reformat()}_reflectBackOn(){return super._reflectBackOn()||this._isPasting}_onCurrencyChanged({currency:e}){if(this.__currencyDisplayNode)if(this.formatOptions.currency=e||void 0,e){this.__currencyDisplayNodeIsConnected||(this.appendChild(this.__currencyDisplayNode),this.__currencyDisplayNodeIsConnected=!0),this.__currencyDisplayNode.textContent=this.__currencyLabel;try{this._calculateValues({source:null})}catch(e){throw e instanceof RangeError&&(this.__currencyDisplayNode?.remove(),this.__currencyDisplayNodeIsConnected=!1),e}this.__setCurrencyDisplayLabel()}else this.__currencyDisplayNode?.remove(),this.__currencyDisplayNodeIsConnected=!1}get __currencyDisplayNode(){const e=Array.from(this.children).find((e=>"after"===e.slot));return e&&(this.__storedCurrencyDisplayNode=e),e||this.__storedCurrencyDisplayNode}__setCurrencyDisplayLabel(){this.__currencyDisplayNode&&this.__currencyDisplayNode.setAttribute("aria-label",this.currency?function(e,t){let n=yf(1,{...t,style:"currency",currency:e,currencyDisplay:"name"}).filter((e=>"currency"===e.type)).map((e=>e.value)).join(" ");const r=t?.locale||fp.locale;return"PHP"===e&&"en-GB"===r&&(n=function(e){return"Philippine pesos"===e&&(e="Philippine pisos"),e}(n)),n}(this.currency,{}):"")}get __currencyLabel(){return this.currency?(e=this.currency,t=fp.locale,""===e?"":function(e,t){return"TRY"===e&&"tr-TR"===t?"TL":e}(e,t)):"";var e,t}__reformat(){this.formattedValue=this._callFormatter()}}var _f=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};const Ef=l`
        :host {
            display: inline-flex;
            position: relative;
        }

        :host * {
            display: inline-flex;
        }

        /* Can't believe ING would make something so ugly */
        .input-group,
        .form-field__group-two, 
        .input-group__container, 
        .input-group__input,
        .input-group__input * {
            flex: 1;
        }
    `,kf=[we,l`
        kana-input, input, kana-select {
            flex: 1;
            font-size: 1rem;
            position: relative;
        }

        input, select {
            font-family: sans;
        }

        input {
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: var(--primary-color);
            color: var(--foreground-color);
            box-sizing: border-box;
        }
        
        input:focus {
            outline: none;
            box-shadow: 0 0 0 2px var(--highlighted-light-color);
        }

        .small-input, .small-input * {
            flex: 0;
        }

        .small-input input {
            width: 8rem;
        }

        .form-row {
            display: flex;
            gap: 1rem;
            margin: 10px 0;
            flex-flow: row wrap;
        }

        select {
            padding: 10px;
            padding-right: 2rem;
            border: none;
            border-radius: 5px;
            background-color: var(--primary-color);
            color: var(--foreground-color);
            font-size: 1rem;
            appearance: none;
            cursor: pointer;
            flex: 1;
        }
        
        select:focus {
            outline: none;
            box-shadow: 0 0 0 2px var(--highlighted-light-color);
        }
        
        kana-button-submit {
            min-width: fit-content;
            flex: 1;
            font-size: 1.2rem;
            min-height: 3rem;
        }
    `,l`
        .form-row lion-validation-feedback {
            position: absolute;
            background-color: var(--highlighted-light-color);
            color: var(--background-color);
            padding: 10px;
            border-radius: 10px;
            display: inline-block;
            max-width: 12rem;
            font-size: 0.8rem;
            line-height: 1.2;
            bottom: 2rem;
            margin-left: -3rem;
            width: max-content;
            z-index: 1
        }

        .form-row lion-validation-feedback:not([type="error"]) {
            display: none;
        }
        
        .form-row lion-validation-feedback::before {
            content: '';
            position: absolute;
            bottom: -18px;
            left: 10%;
            margin-left: -10px;
            border: 10px solid transparent;
            border-top: 15px solid var(--highlighted-light-color);
        }
        
    `];function xf(e=1/0){return t=>t.slice(0,e)}function Cf(e){return t=>{let n=BigInt(t.replace(/[^0-9]/g,""));return n>e&&(n=e),n.toString()}}let Nf=class extends Np{static get styles(){return[Ef,l`
                ::slotted(form), .input-group * {
                    flex: 1;
                }
                
            `]}};Nf=_f([pe("kana-form")],Nf);let Pf=class extends Fp{static get styles(){return[Ef]}};Pf=_f([pe("kana-input")],Pf);let Rf=class extends Up{static get styles(){return[Ef]}};Rf=_f([pe("kana-options")],Rf);let Of=class extends $p{};Of=_f([pe("kana-option")],Of);let Bf=class extends Vp{static get styles(){return[l`
                :host {
                    position: relative;
                    display: inline-flex;
                }
                :host::after {
                    content: '';
                    display: block;
                    position: absolute;
                    right: 10px;
                    top: 50%;
                    transform: translateY(-50%);
                    border-left: 5px solid transparent;
                    border-right: 5px solid transparent;
                    border-top: 7px solid var(--foreground-color);
                    pointer-events: none;
               }
            `,Ef]}};Bf=_f([pe("kana-select")],Bf);let Sf=class extends Af{static get styles(){return[Ef]}};Sf=_f([pe("kana-input-amount")],Sf);let Tf=class extends Jp{static get styles(){return[Ef]}};Tf=_f([pe("kana-input-stepper")],Tf);const If=(vp.getMessage=async()=>"Please, enter a value",vp);let Ff=class extends he{static get styles(){return[l`
                :host {
                    background-color: var(--foreground-color);
                    color: var(--background-color);
                    border-radius: 1rem;
                    padding: 1rem;
                    display: flex;
                    flex: 1 1 auto;
                    width: 32rem;
                    max-width: 100%;
                    flex-direction: column;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                    box-sizing: border-box;
                }
            `]}render(){return Q`
            <slot></slot>
        `}};Ff=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe("kana-windowlet")],Ff);const Lf=e=>"string"==typeof e;class Uf extends bp{static get validatorName(){return"EqualsLength"}execute(e,t=this.param){let n=!1;return Lf(e)&&e.length===t||(n=!0),n}}class Mf extends bp{static get validatorName(){return"MinLength"}execute(e,t=this.param){let n=!1;return(!Lf(e)||e.length<t)&&(n=!0),n}}class Df extends bp{static get validatorName(){return"MaxLength"}execute(e,t=this.param){let n=!1;return(!Lf(e)||e.length>t)&&(n=!0),n}}class $f extends bp{static get validatorName(){return"MinMaxLength"}execute(e,{min:t=0,max:n=0}=this.param){let r=!1;return(!Lf(e)||e.length<t||e.length>n)&&(r=!0),r}}const jf=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;class Vf extends bp{static get validatorName(){return"IsEmail"}execute(e){let t=!1;return Lf(e)&&jf.test(e.toLowerCase())||(t=!0),t}}class Hf extends bp{static get validatorName(){return"Pattern"}execute(e,t=this.param){if(!(t instanceof RegExp))throw new Error('Psst... Pattern validator expects RegExp object as parameter e.g, new Pattern(/#LionRocks/) or new Pattern(RegExp("#LionRocks")');let n=!1;return Lf(e)&&((e,t)=>t.test(e))(e,t)||(n=!0),n}}function Gf(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate())}function zf(e){return"[object Date]"===Object.prototype.toString.call(e)&&!Number.isNaN(e.getTime())}class qf extends bp{static get validatorName(){return"IsDate"}execute(e){let t=!1;return zf(e)||(t=!0),t}}class Qf extends bp{static get validatorName(){return"MinDate"}execute(e,t=this.param){let n=!1;return(!zf(e)||Gf(e)<Gf(t))&&(n=!0),n}}class Jf extends bp{static get validatorName(){return"MaxDate"}execute(e,t=this.param){let n=!1;return(!zf(e)||Gf(e)>Gf(t))&&(n=!0),n}}class Kf extends bp{static get validatorName(){return"MinMaxDate"}execute(e,{min:t=0,max:n=0}=this.param){let r=!1;return(!zf(e)||Gf(e)<Gf(t)||Gf(e)>Gf(n))&&(r=!0),r}}class Wf extends bp{static get validatorName(){return"IsDateDisabled"}execute(e,t=this.param){let n=!1;return zf(e)&&!t(e)||(n=!0),n}}class Yf extends wp{constructor(...e){super(...e),this.type="success"}executeOnResults({regularValidationResult:e,prevShownValidationResult:t}){const n=e=>"error"===e.type||"warning"===e.type,r=!!e.filter(n).length,s=!!t.filter(n).length;return!r&&s}}let Zf;class Xf{static async loadLibPhoneNumber(){const e=(await s.e(849).then(s.bind(s,849))).default;return this.PhoneUtil=e,Zf(void 0),e}static get isLoaded(){return Boolean(this.PhoneUtil)}}function em(e,t){const n=Xf.PhoneUtil;let r=!1;if(t&&e?.length>=4&&e?.length<=16){let s;try{if(s=n(e,t),r=s.g.regionCode!==t,r)return"invalid-country-code"}catch(e){}const i=!s.isValid()&&s.g.possibility;return"is-possible"===i?"unknown":i}return"unknown"}Xf.loadComplete=new Promise((e=>{Zf=e})),Xf.loadLibPhoneNumber();class tm extends bp{static validatorName="PhoneNumber";static get async(){return!Xf.isLoaded}execute(e,t){return Xf.isLoaded?em(e,t):new Promise((n=>{Xf.loadComplete.then((()=>{n(em(e,t))}))}))}}let nm=!1;function rm(){if(!0===nm)return;const e=()=>fp.loadNamespace({"lion-validate":e=>{switch(e){case"bg-BG":return s.e(500).then(s.bind(s,500));case"bg":return s.e(770).then(s.bind(s,770));case"cs-CZ":return s.e(153).then(s.bind(s,153));case"cs":return s.e(875).then(s.bind(s,875));case"de-DE":return s.e(940).then(s.bind(s,940));case"de":return s.e(778).then(s.bind(s,778));case"en-AU":return s.e(941).then(s.bind(s,941));case"en-GB":return s.e(310).then(s.bind(s,310));case"en-US":return s.e(67).then(s.bind(s,67));case"en-PH":return s.e(559).then(s.bind(s,559));case"en":default:return s.e(342).then(s.bind(s,342));case"es-ES":return s.e(198).then(s.bind(s,198));case"es":return s.e(929).then(s.bind(s,929));case"fr-FR":return s.e(254).then(s.bind(s,254));case"fr-BE":return s.e(547).then(s.bind(s,547));case"fr":return s.e(865).then(s.bind(s,865));case"hu-HU":return s.e(428).then(s.bind(s,428));case"hu":return s.e(998).then(s.bind(s,998));case"it-IT":return s.e(484).then(s.bind(s,484));case"it":return s.e(920).then(s.bind(s,920));case"nl-BE":return s.e(797).then(s.bind(s,797));case"nl-NL":return s.e(546).then(s.bind(s,546));case"nl":return s.e(419).then(s.bind(s,419));case"pl-PL":return s.e(450).then(s.bind(s,450));case"pl":return s.e(461).then(s.bind(s,461));case"ro-RO":return s.e(204).then(s.bind(s,204));case"ro":return s.e(162).then(s.bind(s,162));case"ru-RU":return s.e(164).then(s.bind(s,164));case"ru":return s.e(224).then(s.bind(s,224));case"sk-SK":return s.e(986).then(s.bind(s,986));case"sk":return s.e(651).then(s.bind(s,651));case"uk-UA":return s.e(972).then(s.bind(s,972));case"uk":return s.e(841).then(s.bind(s,841));case"zh-CN":case"zh":return s.e(99).then(s.bind(s,99))}}},{locale:fp.locale}),t=async t=>(await e(),t?fp.msg(`lion-validate:${t.type}.${t.name}`,t):"");vp.getMessage=async e=>t(e),Uf.getMessage=async e=>t(e),Mf.getMessage=async e=>t(e),Df.getMessage=async e=>t(e),$f.getMessage=async e=>t(e),Hf.getMessage=async e=>t(e),Vf.getMessage=async e=>t(e),Gp.getMessage=async e=>t(e),zp.getMessage=async e=>t(e),qp.getMessage=async e=>t(e),Qp.getMessage=async e=>t(e),qf.getMessage=async e=>t(e),Qf.getMessage=async e=>t(e),Jf.getMessage=async e=>t(e),Kf.getMessage=async e=>t(e),Wf.getMessage=async e=>t(e),Yf.getMessage=async t=>{await e();const n=fp.msg("lion-validate:success.RandomOk").split(","),r=n[Math.floor(Math.random()*n.length)].trim();return fp.msg(`lion-validate:${r}`,t)},tm.getMessage=async t=>{await e();const{type:n,outcome:r}=t;return fp.msg(`lion-validate:${n}.Pattern`,t)},nm=!0}let sm=class extends he{constructor(){super(),this.calculatedCost=new Pd(this,{task:async([e])=>{const t=await(await Ed.signer).getAddress();return await Ed.paymentsProcessor.calculateInvoice(wd.NEW_PROJECT,{client:t,token:e})},args:()=>[Ed.KANA_TOKEN]}),rm(),vp.getMessage=async()=>"Please, enter a value"}static get styles(){return[l`
                :host {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 2rem;
                    padding: 1rem;
                    flex: 1 1 0%;
                }

                h1 {
                    font-size: 3rem;
                    display: block;
                    width: 100%;
                }

                h2 {
                    font-size: 2rem;
                    margin: 0.5rem 0 0.5rem;
                }

                h3 {
                    font-size: 1.5rem;
                    margin: 0;
                }

                hr {
                    border: none;
                    height: 2px;
                    background-color: var(--background-light-color);
                    margin: 0.5rem 0 1rem;
                }

                kana-input, input, kana-select {
                    flex: 1;
                    font-size: 1rem;
                    position: relative;
                }

                input, select {
                    font-family: sans;
                }

                input {
                    padding: 10px;
                    border: none;
                    border-radius: 5px;
                    background-color: var(--primary-color);
                    color: var(--foreground-color);
                    box-sizing: border-box;
                }
                
                input:focus {
                    outline: none;
                    box-shadow: 0 0 0 2px var(--highlighted-light-color);
                }

                .small-input, .small-input * {
                    flex: 0;
                }

                .small-input input {
                    width: 8rem;
                }

                .form-row {
                    display: flex;
                    gap: 1rem;
                    margin: 10px 0;
                    flex-flow: row wrap;
                }

                select {
                    padding: 10px;
                    padding-right: 2rem;
                    border: none;
                    border-radius: 5px;
                    background-color: var(--primary-color);
                    color: var(--foreground-color);
                    font-size: 1rem;
                    appearance: none;
                    cursor: pointer;
                    flex: 1;
                }
                
                select:focus {
                    outline: none;
                    box-shadow: 0 0 0 2px var(--highlighted-light-color);
                }
                
                span {
                    margin-left: 10px;
                }
                       
                kana-button-submit {
                    min-width: fit-content;
                    flex: 1;
                    font-size: 1.2rem;
                    min-height: 3rem;
                }

                kana-windowlet {
                    max-width: 32rem;
                    flex: 0 1 auto;
                }
            `,l`
                .form-row lion-validation-feedback {
                    position: absolute;
                    background-color: var(--highlighted-light-color);
                    color: var(--background-color);
                    padding: 10px;
                    border-radius: 10px;
                    display: inline-block;
                    max-width: 12rem;
                    font-size: 0.8rem;
                    line-height: 1.2;
                    bottom: 2rem;
                    margin-left: -3rem;
                    width: max-content;
                    z-index: 1
                }

                .form-row lion-validation-feedback:not([type="error"]) {
                    display: none;
                }
                
                .form-row lion-validation-feedback::before {
                    content: '';
                    position: absolute;
                    bottom: -18px;
                    left: 10%;
                    margin-left: -10px;
                    border: 10px solid transparent;
                    border-top: 15px solid var(--highlighted-light-color);
                }
                
            `]}async submitHandler(e){let t=e.target;if(t.hasFeedbackFor.includes("error"))return void t.formElements.find((e=>e.hasFeedbackFor.includes("error"))).focus();const n=e.target.modelValue,r=await Ed.paymentsProcessor.calculateInvoice(wd.NEW_PROJECT,{client:await(await await Ed.signer).getAddress(),token:Ed.KANA_TOKEN});0!=await Ed.paymentsProcessor.requestAllowance(r)&&await Ed.projectRegistry.newProject({projectName:n.name,abbreviation:n.abbreviation,description:n.description})}render(){const e=this.calculatedCost.render({pending:()=>Q`<span><loading-icon size="1em"><loading-icon></span>`,complete:e=>Q`<span>(${e/10n**18n} $KANA)</span>`,error:e=>Q`<p>(${e} ????)</p>`});return Q`
            <h1>New Project</h1>
            <kana-windowlet>
                <h2>New project</h2>
                <h3>Begin your journey</h3>
                <hr />
                <label>Project info</label>
                <kana-form @submit="${this.submitHandler}">
                    <form @submit=${e=>e.preventDefault()}>
                        <div class="form-row">
                            <kana-input
                                label-sr-only="Name"
                                placeholder="Name"
                                name="name"
                                .validators="${[new $f({min:4,max:16}),new vp]}"
                                .preprocessor=${xf(16)}
                            ></kana-input>
                            <kana-input
                                label-sr-only="Abbreviation"
                                placeholder="Abbreviation"
                                name="abbreviation"
                                class="small-input"
                                .validators="${[new $f({min:2,max:8}),new vp]}"
                                .preprocessor=${xf(8)}
                            ></kana-input>
                        </div>
                        <div class="form-row">
                            <kana-input
                                label-sr-only="Description"
                                placeholder="Description (maximum 64 characters)"
                                name="description"
                                .validators="${[new $f({min:0,max:64})]}"
                                .preprocessor=${xf(64)}
                            ></kana-input>
                        </div>
                        <div class="form-row">
                            <kana-button-submit>
                                Deploy new project ${e}
                            </kana-button-submit>
                        </div>
                    </form>
                </kana-form>
            </kana-windowlet>
        `}};sm=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe("new-project-page")],sm);var im=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let om=class extends xd{async fetchData(){this.isLoading=!0;const e=[],t=new Xo(this.address,["function balanceOf(address owner) view returns (uint256 balance)","function name() view returns (string)","function symbol() view returns (string)","function contractsRepositoryLength() view returns (uint256)","function getContracts(uint256 from, uint256 to) view returns (address[])"],Ed.wallet),n=["function name() view returns (string)"];let r=await t.contractsRepositoryLength();if(0!=r){let s=await t.getContracts(0,r);for(let t of s){const r=new Xo(t,n,Ed.wallet),s=await r.name();e.push(new Te({name:s,button:{text:"Edit",link:`${this.address}/${t}`},address:t,description:""}))}}this.isLoading=!1,this.items=e}render(){return Q`
            <h1>${this.name}</h1>
            <div class="cards">
                ${wn(this.isLoading,(()=>Q`<loading-icon></loading-icon>`),(()=>bn(this.items,(e=>e.name),(e=>Q`${e}`))))}
            </div>
            <a href="${this.address}/new-contract">
                <kana-button>Create new contract</kana-button>
            </a>
        `}};function am(e){for(let t of e._eventHandlers)e.addEventListener(t.event,t.handler,t.options)}function lm(e,t){return(n,r,s)=>{null==n._eventHandlers&&Object.defineProperty(n,"_eventHandlers",{enumerable:!1,value:[]}),n._eventHandlers.push({handler:s.value,event:e,options:t})}}im([ge({type:String})],om.prototype,"name",void 0),im([ge({type:String})],om.prototype,"address",void 0),om=im([pe("contracts-page")],om);var cm=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class um extends he{constructor(){super(),am(this)}static get styles(){return kf}get modelValue(){return this.kanaForm?.modelValue}get kanaForm(){return this.shadowRoot?.querySelector("kana-form")||void 0}modelUpdated(){null==this.kanaForm||this.kanaForm.hasFeedbackFor.find((e=>"error"==e))||this.dispatchEvent(new CustomEvent("payload-modified",{bubbles:!0,composed:!0}))}setParent(e){}load(e){this.loadedRawData=e;const t=ki.defaultAbiCoder().decode(Array.from(this.initializerABI.values()),this.loadedRawData),n=this.formatHook(Array.from(this.initializerABI.keys()).map(((e,n)=>({[e]:t[n]}))).reduce(((e,t)=>({...e,...t}))));return Object.entries(n).forEach((([e,t])=>{const n=this.shadowRoot?.querySelector(`[name=${e}]`);null!=n&&(n.modelValue=t)})),n}asUpstream(e){return e==this.loadedRawData}formatHook(e){return e}}um.formAssociated=!0,cm([ge({type:Boolean})],um.prototype,"enabled",void 0),cm([lm("model-value-changed",{capture:!0})],um.prototype,"modelUpdated",null),cm([ye()],um.prototype,"loadedRawData",void 0),BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),BigInt("1000000000000000000");const hm=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),dm=(BigInt("0x8000000000000000000000000000000000000000000000000000000000000000"),BigInt(-1),BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),function(e,t,n){const r=n.get,s=n.set;if(null==r||null==s)throw new TypeError(`Property ${t} does not have a getter or setter.`);n.get=function(){const e=r.call(this);return void 0!==e?e:this.hasAttribute(t)?this.getAttribute(t):void 0},n.set=function(e){this[t]!==e&&(null!=e?this.setAttribute(t,String(e)):this.removeAttribute(t)),s.call(this,e)}});function pm(e){return function(t,n,r){const s=r.set,i=r.get;if(null==s||null==i)throw new TypeError(`Property ${n} does not have a getter or setter.`);return r.set=function(t){s.call(this,t);const r=e.call(this);null!=t?r.setAttribute(n,String(t)):r.removeAttribute(n)},r}}function fm(e,t){return(n,r,s)=>{n.hasOwnProperty("_eventHandlers")||Object.defineProperty(n,"_eventHandlers",{enumerable:!1,value:[...n._eventHandlers||[]]}),n._eventHandlers.push({handler:s.value,event:e,options:t})}}var mm,gm,ym,bm,wm=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o},vm=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},Am=function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n};function _m(){return this.getInnerElement()}class Em extends HTMLElement{get name(){return vm(this,mm,"f")}set name(e){Am(this,mm,e,"f")}get disabled(){return vm(this,gm,"f")}set disabled(e){Am(this,gm,e,"f")}get readOnly(){return vm(this,ym,"f")}set readOnly(e){Am(this,ym,e,"f")}get invalid(){return vm(this,bm,"f")}set invalid(e){Am(this,bm,e,"f")}static get observedAttributes(){return["name","disabled","readOnly","invalid"]}constructor(){super(),mm.set(this,void 0),gm.set(this,void 0),ym.set(this,void 0),bm.set(this,void 0),this.elementInternals=this.attachInternals(),this.attachShadow({mode:"open"}),function(e){for(const t of e._eventHandlers)e.addEventListener(t.event,t.handler,t.options)}(this)}connectedCallback(){this.shadowRoot.innerHTML="",this.shadowRoot.append(this.getInnerElement()),this.dispatchEvent(new CustomEvent("input-connected",{detail:this,bubbles:!0,composed:!0}))}disconnectedCallback(){this.dispatchEvent(new CustomEvent("input-disconnected",{detail:this,bubbles:!0,composed:!0}))}handleInputDisconnected(e){e.stopPropagation()}handleInputConnected(e){e.stopPropagation()}}mm=new WeakMap,gm=new WeakMap,ym=new WeakMap,bm=new WeakMap,Em.formAssociated=!0,wm([dm],Em.prototype,"name",null),wm([dm,pm(_m)],Em.prototype,"disabled",null),wm([dm,pm(_m)],Em.prototype,"readOnly",null),wm([dm,pm(_m)],Em.prototype,"invalid",null),wm([function(e,t,n){const r=n.value;return n.value=function(){const e=this.constructor.observedAttributes;console.log("hello there");for(const t of e)if(this.hasAttribute(t)){const e=this.getAttribute(t);this[t]=e}this.connectedCallback=r,r.apply(this)},n}],Em.prototype,"connectedCallback",null),wm([fm("input-disconnected",{capture:!0})],Em.prototype,"handleInputDisconnected",null),wm([fm("input-connected",{capture:!0})],Em.prototype,"handleInputConnected",null);var km;const xm=e=>{switch(e){case"datalist":case"fieldset":case"select":case"textarea":return e;default:return"input"}},Cm=["datalist","select","fieldset"];class Nm extends Em{constructor(){super(...arguments),km.set(this,"text")}getInnerElement(){return this.inputElement}static get observedAttributes(){return[...super.observedAttributes,"type"]}get type(){return function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}(this,km,"f")}set type(e){!function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?s.call(e,n):s?s.value=n:t.set(e,n)}(this,km,e,"f")}set value(e){switch(this.type){case"select":case"datalist":if("object"==typeof e&&!Array.isArray(e)&&null!=e)throw new TypeError("Cannot assign object to selectlike field");if(Pm(this.inputElement).forEach((e=>e.selected=!1)),null!=e){const t=Array.isArray(e)?e:[e];for(const e of t){const t=this.inputElement.querySelector(`[name="${e}"]`);if(null==t)throw new RangeError("Option does not exist");t.selected=!0}}break;case"fieldset":if("object"!=typeof e||Array.isArray(e)||null==e)throw new TypeError("Attempting to set fieldset with non-object")}}get value(){switch(this.type){case"select":case"datalist":{const e=Pm(this.inputElement).map((e=>e.value));return 1==e.length?e[0]:0==e.length?null:e}case"fieldset":{const e={};return Array.from(this.inputElement?.children||[]).forEach((t=>{"value"in t&&"name"in t&&(e[t.name]=t.value)})),e}default:return this.inputElement.value}}render(){return this.inputElement.setAttribute("name",this.name||""),this.inputElement[null!=this.value?"setAttribute":"removeAttribute"]("value",this.value.toString()),this.inputElement[this.disabled?"setAttribute":"removeAttribute"]("disabled",""),this.inputElement[this.readOnly?"setAttribute":"removeAttribute"]("readonly",""),Cm.includes(this.type)&&(this.append(document.createElement("slot")),Array.from(this.children).forEach((e=>{this.inputElement?.append(e)}))),this.inputElement}reset(){this.inputElement=document.createElement(xm(this.type)),this.value="",this.invalid=!1,this.disabled=this.disabled,this.readOnly=this.readOnly}attributeChangedCallback(e,t,n){if(t!=n&&"type"===e){const e=xm(n);this.inputElement=document.createElement(e),"input"===e&&this.inputElement.setAttribute("type",n)}}}function Pm(e){return Array.from(e.querySelectorAll("> option:selected"))}km=new WeakMap,function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);i>3&&o&&Object.defineProperty(t,n,o)}([dm],Nm.prototype,"type",null),window.customElements.define("pulpito-input",Nm);var Rm;const Om="erc20-form";let Bm=Rm=class extends um{constructor(){super()}static get moduleSignature(){return"0xa7ea6982eb398487d571bb8d7880d038a52a2e20501e5d89251b0d77e2179769"}static get initializerABI(){return new Map([["_name","string"],["_symbol","string"],["_decimals","uint8"],["_supply","uint256"],["_mintTo","address"]])}get moduleSignature(){return Rm.moduleSignature}get initializerABI(){return Rm.initializerABI}load(e){const t=super.load(e);return this.getRootNode().host.newContractBaseWindowlet.value.formBase.value.querySelector("#root-name-input").modelValue=t._name,t}formatHook(e){return e._supply=Number(e._supply/10n**e._decimals),e._decimals=Number(e._decimals),e}async compileModuleParameters(e){const t=this.kanaForm;if(null==t)return null;if(t.validate(),t.hasFeedbackFor.includes("error"))return t.formElements.find((e=>e.hasFeedbackFor.includes("error"))).focus(),null;const n=t.modelValue;return{moduleSignature:Rm.moduleSignature,initParams:ki.defaultAbiCoder().encode(Array.from(Rm.initializerABI.values()),[e.name,n._symbol,n._decimals,BigInt(n._supply)*10n**BigInt(n._decimals),await(await Ed.signer).getAddress()])}}asUpstream(e){return e.slice(0,258)+wl.slice(2)+e.slice(322)==this.loadedRawData}render(){return Q`
            <h2>ERC20 module</h2>
            <hr>
            <h3>The fungible token standard</h3>
            <kana-form>
                <form>
                    <div class="form-row">
                        <span>
                            <label>Symbol</label>
                            <br/>
                            <kana-input
                                label-sr-only="Symbol"
                                placeholder="ie. USDC, BTC..."
                                name="_symbol"
                                .validators="${[new $f({min:2,max:8}),new If]}"
                                .preprocessor=${xf(8)}
                                class="small-input"
                            ></kana-input>
                        </span>
                    </div>
                    <div class="form-row">
                        <span>
                            <label>Supply</label>
                            <br/>
                            <kana-input-amount
                                label-sr-only="Supply"
                                placeholder="21000000"
                                name="_supply"
                                .validators="${[new zp(1),new qp(hm),new If]}"
                                .preprocessor=${Cf(hm)}
                                .modelValue=${21e6}
                            ></kana-input-amount>
                        </span>
                        <span>
                            <label>Token decimals</label>
                            <br/>
                            <kana-input-stepper
                                label-sr-only="Token decimals"
                                value="18"
                                name="_decimals"
                                .validators="${[new If]}"
                                min="0"
                                max="32"
                            ></kana-input-stepper>
                        </span>
                    </form>
            </kana-form>

        `}};Bm.formAssociated=!0,Bm=Rm=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe(Om)],Bm);var Sm;class Tm extends bp{static get validatorName(){return"EqualOrMoreThan"}execute(e,t){try{return!(BigInt(e)>=BigInt(t.modelValue?._supply))}catch(e){return!0}}}const Im="erc20_mint-burn";let Fm=Sm=class extends um{constructor(){super(),this.erc20Form=null}static get moduleSignature(){return"0x264bdde0a47811926d745d16b77330d8c0af6d379e622ae352a063a311402a23"}get moduleSignature(){return Sm.moduleSignature}get initializerABI(){return new Map([["maxSupply","uint256"]])}setParent(e){this.erc20Form=e}formatHook(e){return null==this.erc20Form||(e.maxSupply=Number(e.maxSupply/10n**BigInt(this.erc20Form.modelValue?._decimals||18))),e}async compileModuleParameters(e){const t=this.kanaForm;if(null==t)return null;if(t.formElements.forEach((e=>e.validate({clearCurrentResult:!0}))),t.validate({clearCurrentResult:!0}),t.hasFeedbackFor.includes("error"))return t.formElements.find((e=>e.hasFeedbackFor.includes("error"))).focus(),null;const n=t.modelValue;return{moduleSignature:this.moduleSignature,initParams:ki.defaultAbiCoder().encode(Array.from(this.initializerABI.values()),[BigInt(n.maxSupply)*10n**BigInt(e[Bm.moduleSignature]?._decimals)])}}render(){return Q`
            <hr>
            <h3>Basic mint and burn for ERC20</h3>
            <kana-form>
                <form>
                    <div class="form-row">
                        <span>
                            <label>Maximum supply</label>
                            <br/>
                            <kana-input-amount
                                label-sr-only="Maximum supply"
                                placeholder="21000000"
                                name="maxSupply"
                                .validators="${[new zp(1),new qp(hm),new If,new Tm(this.erc20Form,{getMessage:()=>"Maximum supply cannot be lower than total supply"})]}"
                                .modelValue=${21e6}
                                .preprocessor=${Cf(hm)}
                                ?readonly=${null!=this.loadedRawData}
                            ></kana-input-amount>
                        </span>
                    </div>
            </kana-form>

        `}};Fm.formAssociated=!0,Fm=Sm=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe(Im)],Fm);const Lm=[{name:"ERC20",signature:Bm.moduleSignature,customElement:Om}],Um={[Bm.moduleSignature]:[{name:"Mint/burn and variable supply",signature:Fm.moduleSignature,customElement:Im}]},Mm=(e,t)=>{const n=e._$AN;if(void 0===n)return!1;for(const e of n)e._$AO?.(t,!1),Mm(e,t);return!0},Dm=e=>{let t,n;do{if(void 0===(t=e._$AM))break;n=t._$AN,n.delete(e),e=t}while(0===n?.size)},$m=e=>{for(let t;t=e._$AM;e=t){let n=t._$AN;if(void 0===n)t._$AN=n=new Set;else if(n.has(e))break;n.add(e),Hm(t)}};function jm(e){void 0!==this._$AN?(Dm(this),this._$AM=e,$m(this)):this._$AM=e}function Vm(e,t=!1,n=0){const r=this._$AH,s=this._$AN;if(void 0!==s&&0!==s.size)if(t)if(Array.isArray(r))for(let e=n;e<r.length;e++)Mm(r[e],!1),Dm(r[e]);else null!=r&&(Mm(r,!1),Dm(r));else Mm(this,e)}const Hm=e=>{2==e.type&&(e._$AP??=Vm,e._$AQ??=jm)};class Gm extends un{constructor(){super(...arguments),this._$AN=void 0}_$AT(e,t,n){super._$AT(e,t,n),$m(this),this.isConnected=e._$AU}_$AO(e,t=!0){e!==this.isConnected&&(this.isConnected=e,e?this.reconnected?.():this.disconnected?.()),t&&(Mm(this,e),Dm(this))}setValue(e){if((e=>void 0===this._$Ct.strings)())this._$Ct._$AI(e,this);else{const t=[...this._$Ct._$AH];t[this._$Ci]=e,this._$Ct._$AI(t,this,0)}}disconnected(){}reconnected(){}}const zm=()=>new qm;class qm{}const Qm=new WeakMap,Jm=cn(class extends Gm{render(e){return K}update(e,[t]){const n=t!==this.Y;return n&&void 0!==this.Y&&this.rt(void 0),(n||this.lt!==this.ct)&&(this.Y=t,this.ht=e.options?.host,this.rt(this.ct=e.element)),K}rt(e){if("function"==typeof this.Y){const t=this.ht??globalThis;let n=Qm.get(t);void 0===n&&(n=new WeakMap,Qm.set(t,n)),void 0!==n.get(this.Y)&&this.Y.call(this.ht,void 0),n.set(this.Y,e),void 0!==e&&this.Y.call(this.ht,e)}else this.Y.value=e}get lt(){return"function"==typeof this.Y?Qm.get(this.ht??globalThis)?.get(this.Y):this.Y?.value}disconnected(){this.lt===this.ct&&this.rt(void 0)}reconnected(){this.rt(this.ct)}});class Km{constructor(e){this.Y=e}disconnect(){this.Y=void 0}reconnect(e){this.Y=e}deref(){return this.Y}}class Wm{constructor(){this.Z=void 0,this.q=void 0}get(){return this.Z}pause(){this.Z??=new Promise((e=>this.q=e))}resume(){this.q?.(),this.Z=this.q=void 0}}const Ym=e=>!(e=>null===e||"object"!=typeof e&&"function"!=typeof e)(e)&&"function"==typeof e.then,Zm=1073741823,Xm=cn(class extends Gm{constructor(){super(...arguments),this._$Cwt=Zm,this._$Cbt=[],this._$CK=new Km(this),this._$CX=new Wm}render(...e){return e.find((e=>!Ym(e)))??J}update(e,t){const n=this._$Cbt;let r=n.length;this._$Cbt=t;const s=this._$CK,i=this._$CX;this.isConnected||this.disconnected();for(let e=0;e<t.length&&!(e>this._$Cwt);e++){const o=t[e];if(!Ym(o))return this._$Cwt=e,o;e<r&&o===n[e]||(this._$Cwt=Zm,r=0,Promise.resolve(o).then((async e=>{for(;i.get();)await i.get();const t=s.deref();if(void 0!==t){const n=t._$Cbt.indexOf(o);n>-1&&n<t._$Cwt&&(t._$Cwt=n,t.setValue(e))}})))}return J}disconnected(){this._$CK.disconnect(),this._$CX.pause()}reconnected(){this._$CK.reconnect(this),this._$CX.resume()}});var eg=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let tg=class extends Ff{static get styles(){return[...super.styles,l`
                :host {
                    padding: 0;
                    overflow-x: hidden;
                    flex: 1;
                }
                
                loading-icon {
                    flex: 0 !important;
                }

                ul {
                    list-style: none;
                    padding: 0;
                    margin: 0;
                    overflow: scroll;
                    flex: 1 1 0;
                }
                
                li {
                    display: flex;
                    align-items: center;
                    padding: 0 1rem;
                    user-select: none;
                    box-sizing: border-box;
                    justify-content: space-between;
                    line-height: 3rem;
                }

                .base-module {
                    background-color: var(--primary-light-color);
                    color: var(--foreground-light-color);
                    position: sticky;
                    border-radius: inherit inherit 0 0;
                    height: 3.2rem;
                    width: 100%;
                }

                .redundant-container {
                    max-height: 100%;
                    overflow-y: auto;
                }

                input[type="radio"] {
                    display: none;
                }

                input[type="checkbox"] {
                    transform: scale(1.5);
                }
            `]}constructor(){super(),this.formCache={},this.onchainModules={},this.stateRecords={},this.contract=new Promise((e=>e(void 0)))}attributeChangedCallback(e,t,n){super.attributeChangedCallback(e,t,n),"contractaddress"==e&&t!=n&&(this.contract=new Promise(n?e=>e(new Xo(n,["function getActiveModule(bytes32 signature) view returns (address)","function peek(bytes32 signature) view returns (bytes memory)"],Ed.wallet)):e=>e(void 0)))}connectedCallback(){super.connectedCallback(),this.moduleListChanged()}onClickRadioHandler(e){const t=e.currentTarget.querySelector("input");t.checked=!0,t.dispatchEvent(new Event("change-module"))}moduleListChanged(e){if(e&&e.target){const t=e.target;this.stateRecords[t.value]=t.checked||!1}this.getSelectedModules(),this.dispatchEvent(new CustomEvent("selected-modules-updated",{bubbles:!0,composed:!0})),this.requestUpdate()}getModuleForm(e){if(null==this.formCache[e.signature]){const t=document.createElement(e.customElement);this.formCache[e.signature]=t}return this.formCache[e.signature]}getSelectedModules(){const e=[Lm.find((e=>e.signature==this.baseModule.signature)),...Array.from(this.shadowRoot?.querySelectorAll("input.module-enable[type='checkbox']:checked")||[]).map((e=>Um[this.baseModule.signature].find((t=>t.signature==e.getAttribute("value")))))],t=new Map;for(let n=0;n<e.length;n++){const r=e[n],s=this.getModuleForm(r);t.set(r.signature,s),s.setParent(t.values().next().value)}return t}async scanModule(e){const t=await this.contract;if(null==t)return delete this.onchainModules[e],[io,""];const n=await t.getActiveModule(e);n!=io?this.onchainModules[e]=[n,await t.peek(e)]:delete this.onchainModules[e];const r=this.formCache[e],s=this.onchainModules[e];return null!=r&&null!=s&&r.loadedRawData!=s[1]&&r.load(s[1]),void 0===this.stateRecords[e]&&n!=io&&(this.stateRecords[e]=!0,this.moduleListChanged()),s}moduleEntry(e,t=!1){const n=this.scanModule(e.signature),r=t=>Q`
                <input type="checkbox"
                    class="module-enable"
                    name="${e.signature}-enable"
                    value="${e.signature}"
                    ?checked=${this.stateRecords[e.signature]}
                    @change=${this.moduleListChanged}
                    ?hidden=${t}
                />
            `;return Q`
            <li 
                class=${t?"base-module":K}
                @click=${this.onClickRadioHandler}
            >
                <input type="radio"
                    name="_selectedModule"
                    value="${e.signature}"
                    .moduleInfo=${e}
                    ?checked=${t}
                />
                <label 
                    for="${t?K:e.signature}-enable"
                >
                    ${e.name}
                </label>
                ${t?"":Xm(n.then((()=>r(!1))),Q`
                            <loading-icon size="1.2em"></loading-icon>
                            ${r(!0)}
                        `)}
            </li>
        `}async compile(e,t=!0){const n=[],r=this.getSelectedModules();Object.entries(this.onchainModules).forEach((e=>{null==r.get(e[0])&&n.push([pd.UNINSTALL,{moduleSignature:e[0],initParams:"0x"}])}));const s=Array.from(r.entries());for(let r=0;r<s.length;r++){const[i,o]=s[r],a=this.onchainModules[i],l=await o.compileModuleParameters(e);if(null!=l)null!=a?o.asUpstream(l.initParams)||n.push([pd.REINITIALIZE,l]):n.push([pd.INSTALL,l]);else if(t)throw new Error("Errors in form")}return null!=await this.contract?n:n.map((e=>e[1]))}render(){const e=Lm.find((e=>e.signature==this.baseModule.signature)),t=Um[this.baseModule.signature]||[],n=bn(t,(e=>this.moduleEntry(e)));return Q`
            <ul>
                ${this.moduleEntry(e,!0)}
                ${0!=t.length?n:Q`
                            <li style="margin-top: 15px; color: grey;">
                                Hmm... there seem to be no available plugins
                                for this contract type yet.
                            </li>
                        `}
            </ul>

        `}};eg([ye()],tg.prototype,"baseModule",void 0),eg([ye()],tg.prototype,"onchainModules",void 0),eg([ye()],tg.prototype,"stateRecords",void 0),eg([ge({type:String})],tg.prototype,"contractAddress",void 0),eg([ye()],tg.prototype,"contract",void 0),tg=eg([pe("modules-windowlet")],tg);var ng=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let rg=class extends he{constructor(){super(),this.basicModules=Lm,this.allModules=[...Lm,...Object.values(Um).flatMap((e=>e))],this.modulesList=zm(),this.formWindowlet=zm(),this.newContractBaseWindowlet=zm(),this.price=new Promise((e=>e(void 0))),am(this),rm()}static get styles(){return[we,l`
                :host {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 2rem;
                    padding: 1rem;
                    flex: 1 1 0%;
                }

                .expanded {
                    flex: 1 1 max-content;
                }

                kana-form {
                    width: 100%;
                    height: 100%;
                }
        
                kana-form > form {
                    display: flex;
                    flex: 0 1 max-content;
                    margin: 0 auto;
                    transition: flex 0.1s;
                    gap: 1rem;
                    height: 100%;
                }
                
                .contract-overview-group {
                    display: flex;
                    flex-flow: column wrap;
                    gap: 1rem;
                }
            `]}async submitHandler(e){if(!this.expandedMode)return;0==(Array.from(this.modulesList.value?.getSelectedModules().values())||[]).length&&console.log("How did you get here?");const t=void 0===this.contract?e=>()=>Ed.projectRegistry.newContract({name:this.getRoot().name,project:this.projectName,genesisModules:e,payment:ld.GQ}):e=>()=>Ed.projectRegistry.modifyContract({project:this.projectName,target:this.contract,moduleOperations:e,payment:ld.GQ});this.compile().then((e=>{if(null==e||0==e.length)throw new Error("Attempting to execute a no-op");this.getInvoice(e).then((e=>{if(e)return Ed.paymentsProcessor.requestAllowance(e);throw new Error("Invoice is undefined")})).then((e=>{if(e)return!0;throw new Error("Allowance request rejected")})).then(t(e)).catch(console.error)})).catch(console.error)}captureSubmit(){this.shadowRoot.querySelector("kana-form").dispatchEvent(new Event("submit"))}expandForm(e){this.expandedMode=!0}baseTypeSelected(e){const t=e.detail.contractType;this.selectedBaseModule=t}selectedModulesUpdated(e){this.requestUpdate(),setTimeout((()=>this.recalculatePrice()),0)}recalculatePrice(e){this.price=this.compile(!1).then((e=>{if(null==e)throw new Error("Could not generate payload");return this.getInvoice(e)})).then((e=>{if(null==e)throw new Error("Could not calculate price");return Number(e/10n**18n)}))}async getInvoice(e){return await Ed.paymentsProcessor.calculateInvoice(this.contract?wd.EDIT_CONTRACT:wd.NEW_CONTRACT,{target:this.projectAddress,payload:e,token:Ed.KANA_TOKEN,client:await(await Ed.signer).getAddress()})}getRoot(){const e=this.newContractBaseWindowlet.value?.formBase.value?.modelValue;return this.modulesList.value?.getSelectedModules().forEach(((t,n)=>e[n]=t.modelValue)),e}async compile(e=!0){const t=this.getRoot();return this.modulesList.value?.compile(t,e)}render(){const e=this.modulesList.value?.getSelectedModules().values();return Q`
            ${wn(!this.expandedMode,(()=>Q`
                        <h1 id="page-title">
                            New contract for ${this.projectName}
                        </h1>
                    `))}
            <kana-form @submit=${this.submitHandler}>
                <form 
                    @submit=${e=>e.preventDefault()}
                    class="${this.expandedMode?"expanded":""}"
                >
                    <div class="contract-overview-group">
                        <kana-fieldset name="base-module-config">
                            <contract-base-windowlet 
                                ${Jm(this.newContractBaseWindowlet)}
                                .moduleList=${this.basicModules}
                                contract="${this.contract}"
                                .selectedBaseModule=${this.selectedBaseModule}
                                .price=${this.price}
                                name="${null!=this.contractName?this.contractName:""}"
                            >
                            </contract-base-windowlet>
                        </kana-fieldset>
                        ${this.expandedMode?Q`
                                <modules-windowlet
                                    ${Jm(this.modulesList)}
                                    .baseModule=${this.selectedBaseModule}
                                    contractAddress="${this.contract}"
                                >
                                </modules-windowlet>
                            `:""}
                    </div>
                    ${this.expandedMode?Q`
                                <kana-windowlet ${Jm(this.formWindowlet)}>
                                    ${Array.from(e||[]).map((e=>Q`<div>${e}</div>`))}
                                </kana-windowlet>
                            `:null}
                </form>
            </kana-form>
        `}};ng([ge({type:String})],rg.prototype,"projectName",void 0),ng([ge({type:String})],rg.prototype,"projectAddress",void 0),ng([ge({type:String})],rg.prototype,"contract",void 0),ng([ge({type:String})],rg.prototype,"contractName",void 0),ng([ge({type:Boolean})],rg.prototype,"expandedMode",void 0),ng([ye()],rg.prototype,"price",void 0),ng([ye()],rg.prototype,"selectedBaseModule",void 0),ng([ye()],rg.prototype,"modulesList",void 0),ng([ye()],rg.prototype,"formWindowlet",void 0),ng([ye()],rg.prototype,"newContractBaseWindowlet",void 0),ng([lm("submit-form",{capture:!0})],rg.prototype,"captureSubmit",null),ng([lm("base-selected",{once:!0})],rg.prototype,"expandForm",null),ng([lm("base-selected",{capture:!0})],rg.prototype,"baseTypeSelected",null),ng([lm("selected-modules-updated",{capture:!0})],rg.prototype,"selectedModulesUpdated",null),ng([lm("payload-modified",{capture:!0})],rg.prototype,"recalculatePrice",null),rg=ng([pe("contract-page")],rg);let sg=class extends Ff{constructor(){super(),this.formBase=zm(),this.price=new Promise((e=>e(void 0)))}connectedCallback(){super.connectedCallback()}static get styles(){return[...super.styles,...kf,l`
                span {
                    margin-left: 10px;
                    line-height: 1em;
                }
                
                kana-icon {
                    font-size: 1.4em;
                }

                loading-icon {
                    margin-left: 10px;
                }
            `]}selectContractType(e){const t=e.target.value;this.selectedBaseModule=this.moduleList.find((e=>e.signature==t)),this.dispatchEvent(new CustomEvent("base-selected",{bubbles:!0,composed:!0,detail:{contractType:this.selectedBaseModule}}))}render(){const e=Xm(this.price.then((e=>Q`
                    <span>
                        ${null!=e?`(${e} $KANA)`:Q`<kana-icon>pending</kana-icon>`}
                    </span>
                `)).catch((e=>(console.error(e),Q`<kana-icon>error</kana-icon>`))),Q`<loading-icon size="1.4em"></loading-icon>`),t=this.contract?Q`Update ${this.name}`:"Deploy new contract";return Q`
            <kana-form ${Jm(this.formBase)}>
                <form>
                    <h2 id="contract-title">
                        ${null==this.name||""==this.name?"New contract":this.name}
                    </h2>
                    <hr />
                    <label>Project info</label>
                    <div class="form-row">
                        <kana-input
                            id="root-name-input"
                            label-sr-only="Contract name"
                            placeholder="Contract name"
                            name="name"
                            .validators="${[new $f({min:4,max:16}),new If]}"
                            .preprocessor=${xf(16)}
                            @input=${e=>this.name=e.target.value}
                        ></kana-input>
                        <kana-select
                            label-sr-only="Contract type"
                            name="type"
                            placeholder="Contract type"
                            class="small-input"
                            .validators=${[new If]}
                            @change=${this.selectContractType}
                            .modelValue=${this.selectedBaseModule?.signature}
                            disabled=${this.contract||K}
                        >
                            <select name="type-select" slot="input">
                                <option hidden selected value>
                                    Select type
                                </option>
                                ${bn(this.moduleList,(e=>e.value),(e=>Q`
                                            <option
                                                name="${e.name}"
                                                value="${e.signature}"
                                            >
                                                ${e.name}
                                            </option>
                                        `))}
                            </select>
                        </kana-select>
                    </div>
                    <div class="form-row">
                        <kana-button-submit 
                            @click=${()=>this.dispatchEvent(new CustomEvent("submit-form",{bubbles:!0,composed:!0}))}
                            disabled=${null==this.selectedBaseModule||K}
                        >
                            ${t}${e}
                        </kana-button-submit>
                    </div>
                </form>
            </kana-form>
        `}};sg.formAssociated=!0,ng([ge({type:String})],sg.prototype,"name",void 0),ng([ge({type:String})],sg.prototype,"contract",void 0),ng([ye()],sg.prototype,"price",void 0),ng([ye()],sg.prototype,"moduleList",void 0),ng([ye()],sg.prototype,"selectedBaseModule",void 0),ng([ye()],sg.prototype,"formBase",void 0),sg=ng([pe("contract-base-windowlet")],sg);var ig=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class og extends Em{getInnerElement(){return this.form}constructor(){super(),this.value="",this.form=document.createElement("form"),this.fields=new Set,Array.from(this.children).forEach((e=>this.form.append(e))),this.append(this.form)}handleInputConnected(e){this.fields.add(e.detail),console.log("added"),e.stopPropagation()}handleInputDisconnected(e){this.fields.delete(e.detail),console.log("removed"),e.stopPropagation()}}ig([fm("input-connected",{capture:!0})],og.prototype,"handleInputConnected",null),ig([fm("input-disconnected",{capture:!0})],og.prototype,"handleInputDisconnected",null),window.customElements.define("pulpito-form",og);var ag=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let lg=class extends he{render(){return Q`
            <h1>${this.name}</h1>
        `}};ag([ge({type:String})],lg.prototype,"name",void 0),lg=ag([pe("home-page")],lg);const cg=[{path:"/projects",component:"projects-page",name:"My projects",icon:"backup_table"},{path:"/new-project",component:"new-project-page",name:"New project",icon:"add_box"}],ug=[{path:"/",component:"home-page",name:"HOME"},...cg,{path:"/projects/:address",component:"contracts-page",action:async(e,t)=>{const n=new Xo(e.params.address,["function name() view returns (string)"],Ed.wallet),r=await n.name(),s=t.component("contracts-page");return s.name=r,s.address=e.params.address,s}},{path:"/projects/:address/new-contract",component:"contract-page",action:async(e,t)=>{const n=new Xo(e.params.address,["function name() view returns (string)"],Ed.wallet),r=await n.name(),s=t.component("contract-page");return s.projectName=`${r}`,s.projectAddress=e.params.address,s.expandedMode=!1,s}},{path:"/projects/:address/:contract",component:"contract-page",action:async(e,t)=>{const n=new Xo(e.params.address,["function name() view returns (string)"],Ed.wallet),r=new Xo(e.params.contract,["function name() view returns (string)","function getActiveModule(bytes32 signature) view returns (address)"],Ed.wallet);let s;for(const e of Lm)if(await r.getActiveModule(e.signature)!=io){s=e;break}const i=await n.name(),o=t.component("contract-page");return o.selectedBaseModule=s,o.projectName=`${i}`,o.projectAddress=e.params.address,o.contract=e.params.contract,o.contractName=await r.name(),o.expandedMode=!0,o}}];function hg(e){return e=e||[],Array.isArray(e)?e:[e]}function dg(e){return`[Vaadin.Router] ${e}`}const pg="module",fg="nomodule",mg=[pg,fg];function gg(e){if(!e.match(/.+\.[m]?js$/))throw new Error(dg(`Unsupported type for bundle "${e}": .js or .mjs expected.`))}function yg(e){if(!e||!Eg(e.path))throw new Error(dg('Expected route config to be an object with a "path" string property, or an array of such objects'));const t=e.bundle,n=["component","redirect","bundle"];if(!(_g(e.action)||Array.isArray(e.children)||_g(e.children)||Ag(t)||n.some((t=>Eg(e[t])))))throw new Error(dg(`Expected route config "${e.path}" to include either "${n.join('", "')}" or "action" function but none found.`));if(t)if(Eg(t))gg(t);else{if(!mg.some((e=>e in t)))throw new Error(dg('Expected route bundle to include either "'+fg+'" or "'+pg+'" keys, or both'));mg.forEach((e=>e in t&&gg(t[e])))}e.redirect&&["bundle","component"].forEach((t=>{t in e&&console.warn(dg(`Route config "${e.path}" has both "redirect" and "${t}" properties, and "redirect" will always override the latter. Did you mean to only use "${t}"?`))}))}function bg(e){hg(e).forEach((e=>yg(e)))}function wg(e,t){let n=document.head.querySelector('script[src="'+e+'"][async]');return n||(n=document.createElement("script"),n.setAttribute("src",e),t===pg?n.setAttribute("type",pg):t===fg&&n.setAttribute(fg,""),n.async=!0),new Promise(((e,t)=>{n.onreadystatechange=n.onload=t=>{n.__dynamicImportLoaded=!0,e(t)},n.onerror=e=>{n.parentNode&&n.parentNode.removeChild(n),t(e)},null===n.parentNode?document.head.appendChild(n):n.__dynamicImportLoaded&&e()}))}function vg(e,t){return!window.dispatchEvent(new CustomEvent(`vaadin-router-${e}`,{cancelable:"go"===e,detail:t}))}function Ag(e){return"object"==typeof e&&!!e}function _g(e){return"function"==typeof e}function Eg(e){return"string"==typeof e}function kg(e){const t=new Error(dg(`Page not found (${e.pathname})`));return t.context=e,t.code=404,t}const xg=new class{};function Cg(e){if(e.defaultPrevented)return;if(0!==e.button)return;if(e.shiftKey||e.ctrlKey||e.altKey||e.metaKey)return;let t=e.target;const n=e.composedPath?e.composedPath():e.path||[];for(let e=0;e<n.length;e++){const r=n[e];if(r.nodeName&&"a"===r.nodeName.toLowerCase()){t=r;break}}for(;t&&"a"!==t.nodeName.toLowerCase();)t=t.parentNode;if(!t||"a"!==t.nodeName.toLowerCase())return;if(t.target&&"_self"!==t.target.toLowerCase())return;if(t.hasAttribute("download"))return;if(t.hasAttribute("router-ignore"))return;if(t.pathname===window.location.pathname&&""!==t.hash)return;const r=t.origin||function(e){const t=e.port,n=e.protocol;return`${n}//${"http:"===n&&"80"===t||"https:"===n&&"443"===t?e.hostname:e.host}`}(t);if(r!==window.location.origin)return;const{pathname:s,search:i,hash:o}=t;vg("go",{pathname:s,search:i,hash:o})&&(e.preventDefault(),e&&"click"===e.type&&window.scrollTo(0,0))}const Ng={activate(){window.document.addEventListener("click",Cg)},inactivate(){window.document.removeEventListener("click",Cg)}};function Pg(e){if("vaadin-router-ignore"===e.state)return;const{pathname:t,search:n,hash:r}=window.location;vg("go",{pathname:t,search:n,hash:r})}/Trident/.test(navigator.userAgent)&&!_g(window.PopStateEvent)&&(window.PopStateEvent=function(e,t){t=t||{};var n=document.createEvent("Event");return n.initEvent(e,Boolean(t.bubbles),Boolean(t.cancelable)),n.state=t.state||null,n},window.PopStateEvent.prototype=window.Event.prototype);const Rg={activate(){window.addEventListener("popstate",Pg)},inactivate(){window.removeEventListener("popstate",Pg)}};var Og=function e(t,n,r){return t instanceof RegExp?function(e,t){if(!t)return e;var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,pattern:null});return e}(t,n):Array.isArray(t)?function(t,n,r){for(var s=[],i=0;i<t.length;i++)s.push(e(t[i],n,r).source);return new RegExp("(?:"+s.join("|")+")",jg(r))}(t,n,r):function(e,t,n){return Vg(Ug(e,n),t,n)}(t,n,r)},Bg=Ug,Sg=Mg,Tg=Vg,Ig="/",Fg="./",Lg=new RegExp(["(\\\\.)","(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?"].join("|"),"g");function Ug(e,t){for(var n,r=[],s=0,i=0,o="",a=t&&t.delimiter||Ig,l=t&&t.delimiters||Fg,c=!1;null!==(n=Lg.exec(e));){var u=n[0],h=n[1],d=n.index;if(o+=e.slice(i,d),i=d+u.length,h)o+=h[1],c=!0;else{var p="",f=e[i],m=n[2],g=n[3],y=n[4],b=n[5];if(!c&&o.length){var w=o.length-1;l.indexOf(o[w])>-1&&(p=o[w],o=o.slice(0,w))}o&&(r.push(o),o="",c=!1);var v=""!==p&&void 0!==f&&f!==p,A="+"===b||"*"===b,_="?"===b||"*"===b,E=p||a,k=g||y;r.push({name:m||s++,prefix:p,delimiter:E,optional:_,repeat:A,partial:v,pattern:k?$g(k):"[^"+Dg(E)+"]+?"})}}return(o||i<e.length)&&r.push(o+e.substr(i)),r}function Mg(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,r){for(var s="",i=r&&r.encode||encodeURIComponent,o=0;o<e.length;o++){var a=e[o];if("string"!=typeof a){var l,c=n?n[a.name]:void 0;if(Array.isArray(c)){if(!a.repeat)throw new TypeError('Expected "'+a.name+'" to not repeat, but got array');if(0===c.length){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to not be empty')}for(var u=0;u<c.length;u++){if(l=i(c[u],a),!t[o].test(l))throw new TypeError('Expected all "'+a.name+'" to match "'+a.pattern+'"');s+=(0===u?a.prefix:a.delimiter)+l}}else if("string"!=typeof c&&"number"!=typeof c&&"boolean"!=typeof c){if(!a.optional)throw new TypeError('Expected "'+a.name+'" to be '+(a.repeat?"an array":"a string"));a.partial&&(s+=a.prefix)}else{if(l=i(String(c),a),!t[o].test(l))throw new TypeError('Expected "'+a.name+'" to match "'+a.pattern+'", but got "'+l+'"');s+=a.prefix+l}}else s+=a}return s}}function Dg(e){return e.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1")}function $g(e){return e.replace(/([=!:$/()])/g,"\\$1")}function jg(e){return e&&e.sensitive?"":"i"}function Vg(e,t,n){for(var r=(n=n||{}).strict,s=!1!==n.start,i=!1!==n.end,o=Dg(n.delimiter||Ig),a=n.delimiters||Fg,l=[].concat(n.endsWith||[]).map(Dg).concat("$").join("|"),c=s?"^":"",u=0===e.length,h=0;h<e.length;h++){var d=e[h];if("string"==typeof d)c+=Dg(d),u=h===e.length-1&&a.indexOf(d[d.length-1])>-1;else{var p=d.repeat?"(?:"+d.pattern+")(?:"+Dg(d.delimiter)+"(?:"+d.pattern+"))*":d.pattern;t&&t.push(d),d.optional?d.partial?c+=Dg(d.prefix)+"("+p+")?":c+="(?:"+Dg(d.prefix)+"("+p+"))?":c+=Dg(d.prefix)+"("+p+")"}}return i?(r||(c+="(?:"+o+")?"),c+="$"===l?"$":"(?="+l+")"):(r||(c+="(?:"+o+"(?="+l+"))?"),u||(c+="(?="+o+"|"+l+")")),new RegExp(c,jg(n))}Og.parse=Bg,Og.compile=function(e,t){return Mg(Ug(e,t))},Og.tokensToFunction=Sg,Og.tokensToRegExp=Tg;const{hasOwnProperty:Hg}=Object.prototype,Gg=new Map;function zg(e){try{return decodeURIComponent(e)}catch(t){return e}}function qg(e,t,n,r,s){let i,o,a=0,l=e.path||"";return"/"===l.charAt(0)&&(n&&(l=l.substr(1)),n=!0),{next(c){if(e===c)return{done:!0};const u=e.__children=e.__children||e.children;if(!i&&(i=function(e,t,n,r,s){const i=`${e}|${n=!!n}`;let o=Gg.get(i);if(!o){const t=[];o={keys:t,pattern:Og(e,t,{end:n,strict:""===e})},Gg.set(i,o)}const a=o.pattern.exec(t);if(!a)return null;const l=Object.assign({},s);for(let e=1;e<a.length;e++){const t=o.keys[e-1],n=t.name,r=a[e];void 0===r&&Hg.call(l,n)||(t.repeat?l[n]=r?r.split(t.delimiter).map(zg):[]:l[n]=r?zg(r):r)}return{path:a[0],keys:(r||[]).concat(o.keys),params:l}}(l,t,!u,r,s),i))return{done:!1,value:{route:e,keys:i.keys,params:i.params,path:i.path}};if(i&&u)for(;a<u.length;){if(!o){const r=u[a];r.parent=e;let s=i.path.length;s>0&&"/"===t.charAt(s)&&(s+=1),o=qg(r,t.substr(s),n,i.keys,i.params)}const r=o.next(c);if(!r.done)return{done:!1,value:r.value};o=null,a++}return{done:!0}}}}function Qg(e){if(_g(e.route.action))return e.route.action(e)}Gg.set("|false",{keys:[],pattern:/(?:)/});class Jg{constructor(e,t={}){if(Object(e)!==e)throw new TypeError("Invalid routes");this.baseUrl=t.baseUrl||"",this.errorHandler=t.errorHandler,this.resolveRoute=t.resolveRoute||Qg,this.context=Object.assign({resolver:this},t.context),this.root=Array.isArray(e)?{path:"",__children:e,parent:null,__synthetic:!0}:e,this.root.parent=null}getRoutes(){return[...this.root.__children]}setRoutes(e){bg(e);const t=[...hg(e)];this.root.__children=t}addRoutes(e){return bg(e),this.root.__children.push(...hg(e)),this.getRoutes()}removeRoutes(){this.setRoutes([])}resolve(e){const t=Object.assign({},this.context,Eg(e)?{pathname:e}:e),n=qg(this.root,this.__normalizePathname(t.pathname),this.baseUrl),r=this.resolveRoute;let s=null,i=null,o=t;function a(e,l=s.value.route,c){const u=null===c&&s.value.route;return s=i||n.next(u),i=null,e||!s.done&&function(e,t){let n=t;for(;n;)if(n=n.parent,n===e)return!0;return!1}(l,s.value.route)?s.done?Promise.reject(kg(t)):(o=Object.assign(o?{chain:o.chain?o.chain.slice(0):[]}:{},t,s.value),function(e,t){const{route:n,path:r}=t;if(n&&!n.__synthetic){const t={path:r,route:n};if(e.chain){if(n.parent){let t=e.chain.length;for(;t--&&e.chain[t].route&&e.chain[t].route!==n.parent;)e.chain.pop()}}else e.chain=[];e.chain.push(t)}}(o,s.value),Promise.resolve(r(o)).then((t=>null!=t&&t!==xg?(o.result=t.result||t,o):a(e,l,t)))):(i=s,Promise.resolve(xg))}return t.next=a,Promise.resolve().then((()=>a(!0,this.root))).catch((e=>{const t=function(e){let t=`Path '${e.pathname}' is not properly resolved due to an error.`;const n=(e.route||{}).path;return n&&(t+=` Resolution had failed on route: '${n}'`),t}(o);if(e?console.warn(t):e=new Error(t),e.context=e.context||o,e instanceof DOMException||(e.code=e.code||500),this.errorHandler)return o.result=this.errorHandler(e),o;throw e}))}static __createUrl(e,t){return new URL(e,t)}get __effectiveBaseUrl(){return this.baseUrl?this.constructor.__createUrl(this.baseUrl,document.baseURI||document.URL).href.replace(/[^\/]*$/,""):""}__normalizePathname(e){if(!this.baseUrl)return e;const t=this.__effectiveBaseUrl,n=this.constructor.__createUrl(e,t).href;return n.slice(0,t.length)===t?n.slice(t.length):void 0}}Jg.pathToRegexp=Og;const{pathToRegexp:Kg}=Jg,Wg=new Map;function Yg(e,t,n){const r=t.name||t.component;if(r&&(e.has(r)?e.get(r).push(t):e.set(r,[t])),Array.isArray(n))for(let r=0;r<n.length;r++){const s=n[r];s.parent=t,Yg(e,s,s.__children||s.children)}}function Zg(e,t){const n=e.get(t);if(n&&n.length>1)throw new Error(`Duplicate route with name "${t}". Try seting unique 'name' route properties.`);return n&&n[0]}function Xg(e){let t=e.path;return t=Array.isArray(t)?t[0]:t,void 0!==t?t:""}function ey(e,t={}){if(!(e instanceof Jg))throw new TypeError("An instance of Resolver is expected");const n=new Map;return(r,s)=>{let i=Zg(n,r);if(!i&&(n.clear(),Yg(n,e.root,e.root.__children),i=Zg(n,r),!i))throw new Error(`Route "${r}" not found`);let o=Wg.get(i.fullPath);if(!o){let e=Xg(i),t=i.parent;for(;t;){const n=Xg(t);n&&(e=n.replace(/\/$/,"")+"/"+e.replace(/^\//,"")),t=t.parent}const n=Kg.parse(e),r=Kg.tokensToFunction(n),s=Object.create(null);for(let e=0;e<n.length;e++)Eg(n[e])||(s[n[e].name]=!0);o={toPath:r,keys:s},Wg.set(e,o),i.fullPath=e}let a=o.toPath(s,t)||"/";if(t.stringifyQueryParams&&s){const e={},n=Object.keys(s);for(let t=0;t<n.length;t++){const r=n[t];o.keys[r]||(e[r]=s[r])}const r=t.stringifyQueryParams(e);r&&(a+="?"===r.charAt(0)?r:`?${r}`)}return a}}let ty=[];function ny(e){ty.forEach((e=>e.inactivate())),e.forEach((e=>e.activate())),ty=e}function ry(e,t){return e.classList.add(t),new Promise((n=>{if((e=>{const t=getComputedStyle(e).getPropertyValue("animation-name");return t&&"none"!==t})(e)){const r=e.getBoundingClientRect(),s=`height: ${r.bottom-r.top}px; width: ${r.right-r.left}px`;e.setAttribute("style",`position: absolute; ${s}`),((e,t)=>{const n=()=>{e.removeEventListener("animationend",n),t()};e.addEventListener("animationend",n)})(e,(()=>{e.classList.remove(t),e.removeAttribute("style"),n()}))}else e.classList.remove(t),n()}))}function sy(e){return null!=e}function iy({pathname:e="",search:t="",hash:n="",chain:r=[],params:s={},redirectFrom:i,resolver:o},a){const l=r.map((e=>e.route));return{baseUrl:o&&o.baseUrl||"",pathname:e,search:t,hash:n,routes:l,route:a||l.length&&l[l.length-1]||null,params:s,redirectFrom:i,getUrl:(e={})=>uy(dy.pathToRegexp.compile(hy(l))(Object.assign({},s,e)),o)}}function oy(e,t){const n=Object.assign({},e.params);return{redirect:{pathname:t,from:e.pathname,params:n}}}function ay(e,t,n){if(_g(e))return e.apply(n,t)}function ly(e,t,n){return r=>r&&(r.cancel||r.redirect)?r:n?ay(n[e],t,n):void 0}function cy(e){if(e&&e.length){const t=e[0].parentNode;for(let n=0;n<e.length;n++)t.removeChild(e[n])}}function uy(e,t){const n=t.__effectiveBaseUrl;return n?t.constructor.__createUrl(e.replace(/^\//,""),n).pathname:e}function hy(e){return e.map((e=>e.path)).reduce(((e,t)=>t.length?e.replace(/\/$/,"")+"/"+t.replace(/^\//,""):e),"")}class dy extends Jg{constructor(e,t){const n=document.head.querySelector("base"),r=n&&n.getAttribute("href");super([],Object.assign({baseUrl:r&&Jg.__createUrl(r,document.URL).pathname.replace(/[^\/]*$/,"")},t)),this.resolveRoute=e=>this.__resolveRoute(e);const s=dy.NavigationTrigger;dy.setTriggers.apply(dy,Object.keys(s).map((e=>s[e]))),this.baseUrl,this.ready,this.ready=Promise.resolve(e),this.location,this.location=iy({resolver:this}),this.__lastStartedRenderId=0,this.__navigationEventHandler=this.__onNavigationEvent.bind(this),this.setOutlet(e),this.subscribe(),this.__createdByRouter=new WeakMap,this.__addedByRouter=new WeakMap}__resolveRoute(e){const t=e.route;let n=Promise.resolve();_g(t.children)&&(n=n.then((()=>t.children(function(e){const t=Object.assign({},e);return delete t.next,t}(e)))).then((e=>{sy(e)||_g(t.children)||(e=t.children),function(e,t){if(!Array.isArray(e)&&!Ag(e))throw new Error(dg(`Incorrect "children" value for the route ${t.path}: expected array or object, but got ${e}`));t.__children=[];const n=hg(e);for(let e=0;e<n.length;e++)yg(n[e]),t.__children.push(n[e])}(e,t)})));const r={redirect:t=>oy(e,t),component:e=>{const t=document.createElement(e);return this.__createdByRouter.set(t,!0),t}};return n.then((()=>{if(this.__isLatestRender(e))return ay(t.action,[e,r],t)})).then((e=>{return sy(e)&&(e instanceof HTMLElement||e.redirect||e===xg)?e:Eg(t.redirect)?r.redirect(t.redirect):t.bundle?(n=t.bundle,Eg(n)?wg(n):Promise.race(mg.filter((e=>e in n)).map((e=>wg(n[e],e))))).then((()=>{}),(()=>{throw new Error(dg(`Bundle not found: ${t.bundle}. Check if the file name is correct`))})):void 0;var n})).then((e=>sy(e)?e:Eg(t.component)?r.component(t.component):void 0))}setOutlet(e){e&&this.__ensureOutlet(e),this.__outlet=e}getOutlet(){return this.__outlet}setRoutes(e,t=!1){return this.__previousContext=void 0,this.__urlForName=void 0,super.setRoutes(e),t||this.__onNavigationEvent(),this.ready}render(e,t){const n=++this.__lastStartedRenderId,r=Object.assign({search:"",hash:""},Eg(e)?{pathname:e}:e,{__renderId:n});return this.ready=this.resolve(r).then((e=>this.__fullyResolveChain(e))).then((e=>{if(this.__isLatestRender(e)){const r=this.__previousContext;if(e===r)return this.__updateBrowserHistory(r,!0),this.location;if(this.location=iy(e),t&&this.__updateBrowserHistory(e,1===n),vg("location-changed",{router:this,location:this.location}),e.__skipAttach)return this.__copyUnchangedElements(e,r),this.__previousContext=e,this.location;this.__addAppearingContent(e,r);const s=this.__animateIfNeeded(e);return this.__runOnAfterEnterCallbacks(e),this.__runOnAfterLeaveCallbacks(e,r),s.then((()=>{if(this.__isLatestRender(e))return this.__removeDisappearingContent(),this.__previousContext=e,this.location}))}})).catch((e=>{if(n===this.__lastStartedRenderId)throw t&&this.__updateBrowserHistory(r),cy(this.__outlet&&this.__outlet.children),this.location=iy(Object.assign(r,{resolver:this})),vg("error",Object.assign({router:this,error:e},r)),e})),this.ready}__fullyResolveChain(e,t=e){return this.__findComponentContextAfterAllRedirects(t).then((n=>{const r=n!==t?n:e,s=uy(hy(n.chain),n.resolver)===n.pathname,i=(e,t=e.route,n)=>e.next(void 0,t,n).then((n=>null===n||n===xg?s?e:null!==t.parent?i(e,t.parent,n):n:n));return i(n).then((e=>{if(null===e||e===xg)throw kg(r);return e&&e!==xg&&e!==n?this.__fullyResolveChain(r,e):this.__amendWithOnBeforeCallbacks(n)}))}))}__findComponentContextAfterAllRedirects(e){const t=e.result;return t instanceof HTMLElement?(function(e,t){t.location=iy(e);const n=e.chain.map((e=>e.route)).indexOf(e.route);e.chain[n].element=t}(e,t),Promise.resolve(e)):t.redirect?this.__redirect(t.redirect,e.__redirectCount,e.__renderId).then((e=>this.__findComponentContextAfterAllRedirects(e))):t instanceof Error?Promise.reject(t):Promise.reject(new Error(dg(`Invalid route resolution result for path "${e.pathname}". Expected redirect object or HTML element, but got: "${function(e){if("object"!=typeof e)return String(e);const t=Object.prototype.toString.call(e).match(/ (.*)\]$/)[1];return"Object"===t||"Array"===t?`${t} ${JSON.stringify(e)}`:t}(t)}". Double check the action return value for the route.`)))}__amendWithOnBeforeCallbacks(e){return this.__runOnBeforeCallbacks(e).then((t=>t===this.__previousContext||t===e?t:this.__fullyResolveChain(t)))}__runOnBeforeCallbacks(e){const t=this.__previousContext||{},n=t.chain||[],r=e.chain;let s=Promise.resolve();const i=()=>({cancel:!0}),o=t=>oy(e,t);if(e.__divergedChainIndex=0,e.__skipAttach=!1,n.length){for(let t=0;t<Math.min(n.length,r.length)&&n[t].route===r[t].route&&(n[t].path===r[t].path||n[t].element===r[t].element)&&this.__isReusableElement(n[t].element,r[t].element);t=++e.__divergedChainIndex);if(e.__skipAttach=r.length===n.length&&e.__divergedChainIndex==r.length&&this.__isReusableElement(e.result,t.result),e.__skipAttach){for(let t=r.length-1;t>=0;t--)s=this.__runOnBeforeLeaveCallbacks(s,e,{prevent:i},n[t]);for(let t=0;t<r.length;t++)s=this.__runOnBeforeEnterCallbacks(s,e,{prevent:i,redirect:o},r[t]),n[t].element.location=iy(e,n[t].route)}else for(let t=n.length-1;t>=e.__divergedChainIndex;t--)s=this.__runOnBeforeLeaveCallbacks(s,e,{prevent:i},n[t])}if(!e.__skipAttach)for(let t=0;t<r.length;t++)t<e.__divergedChainIndex?t<n.length&&n[t].element&&(n[t].element.location=iy(e,n[t].route)):(s=this.__runOnBeforeEnterCallbacks(s,e,{prevent:i,redirect:o},r[t]),r[t].element&&(r[t].element.location=iy(e,r[t].route)));return s.then((t=>{if(t){if(t.cancel)return this.__previousContext.__renderId=e.__renderId,this.__previousContext;if(t.redirect)return this.__redirect(t.redirect,e.__redirectCount,e.__renderId)}return e}))}__runOnBeforeLeaveCallbacks(e,t,n,r){const s=iy(t);return e.then((e=>{if(this.__isLatestRender(t))return ly("onBeforeLeave",[s,n,this],r.element)(e)})).then((e=>{if(!(e||{}).redirect)return e}))}__runOnBeforeEnterCallbacks(e,t,n,r){const s=iy(t,r.route);return e.then((e=>{if(this.__isLatestRender(t))return ly("onBeforeEnter",[s,n,this],r.element)(e)}))}__isReusableElement(e,t){return!(!e||!t)&&(this.__createdByRouter.get(e)&&this.__createdByRouter.get(t)?e.localName===t.localName:e===t)}__isLatestRender(e){return e.__renderId===this.__lastStartedRenderId}__redirect(e,t,n){if(t>256)throw new Error(dg(`Too many redirects when rendering ${e.from}`));return this.resolve({pathname:this.urlForPath(e.pathname,e.params),redirectFrom:e.from,__redirectCount:(t||0)+1,__renderId:n})}__ensureOutlet(e=this.__outlet){if(!(e instanceof Node))throw new TypeError(dg(`Expected router outlet to be a valid DOM Node (but got ${e})`))}__updateBrowserHistory({pathname:e,search:t="",hash:n=""},r){if(window.location.pathname!==e||window.location.search!==t||window.location.hash!==n){const s=r?"replaceState":"pushState";window.history[s](null,document.title,e+t+n),window.dispatchEvent(new PopStateEvent("popstate",{state:"vaadin-router-ignore"}))}}__copyUnchangedElements(e,t){let n=this.__outlet;for(let r=0;r<e.__divergedChainIndex;r++){const s=t&&t.chain[r].element;if(s){if(s.parentNode!==n)break;e.chain[r].element=s,n=s}}return n}__addAppearingContent(e,t){this.__ensureOutlet(),this.__removeAppearingContent();const n=this.__copyUnchangedElements(e,t);this.__appearingContent=[],this.__disappearingContent=Array.from(n.children).filter((t=>this.__addedByRouter.get(t)&&t!==e.result));let r=n;for(let t=e.__divergedChainIndex;t<e.chain.length;t++){const s=e.chain[t].element;s&&(r.appendChild(s),this.__addedByRouter.set(s,!0),r===n&&this.__appearingContent.push(s),r=s)}}__removeDisappearingContent(){this.__disappearingContent&&cy(this.__disappearingContent),this.__disappearingContent=null,this.__appearingContent=null}__removeAppearingContent(){this.__disappearingContent&&this.__appearingContent&&(cy(this.__appearingContent),this.__disappearingContent=null,this.__appearingContent=null)}__runOnAfterLeaveCallbacks(e,t){if(t)for(let n=t.chain.length-1;n>=e.__divergedChainIndex&&this.__isLatestRender(e);n--){const r=t.chain[n].element;if(r)try{const n=iy(e);ay(r.onAfterLeave,[n,{},t.resolver],r)}finally{this.__disappearingContent.indexOf(r)>-1&&cy(r.children)}}}__runOnAfterEnterCallbacks(e){for(let t=e.__divergedChainIndex;t<e.chain.length&&this.__isLatestRender(e);t++){const n=e.chain[t].element||{},r=iy(e,e.chain[t].route);ay(n.onAfterEnter,[r,{},e.resolver],n)}}__animateIfNeeded(e){const t=(this.__disappearingContent||[])[0],n=(this.__appearingContent||[])[0],r=[],s=e.chain;let i;for(let e=s.length;e>0;e--)if(s[e-1].route.animate){i=s[e-1].route.animate;break}if(t&&n&&i){const e=Ag(i)&&i.leave||"leaving",s=Ag(i)&&i.enter||"entering";r.push(ry(t,e)),r.push(ry(n,s))}return Promise.all(r).then((()=>e))}subscribe(){window.addEventListener("vaadin-router-go",this.__navigationEventHandler)}unsubscribe(){window.removeEventListener("vaadin-router-go",this.__navigationEventHandler)}__onNavigationEvent(e){const{pathname:t,search:n,hash:r}=e?e.detail:window.location;Eg(this.__normalizePathname(t))&&(e&&e.preventDefault&&e.preventDefault(),this.render({pathname:t,search:n,hash:r},!0))}static setTriggers(...e){ny(e)}urlForName(e,t){return this.__urlForName||(this.__urlForName=ey(this)),uy(this.__urlForName(e,t),this)}urlForPath(e,t){return uy(dy.pathToRegexp.compile(e)(t),this)}static go(e){const{pathname:t,search:n,hash:r}=Eg(e)?this.__createUrl(e,"http://a"):e;return vg("go",{pathname:t,search:n,hash:r})}}const py=/\/\*[\*!]\s+vaadin-dev-mode:start([\s\S]*)vaadin-dev-mode:end\s+\*\*\//i,fy=window.Vaadin&&window.Vaadin.Flow&&window.Vaadin.Flow.clients;function my(e,t){if("function"!=typeof e)return;const n=py.exec(e.toString());if(n)try{e=new Function(n[1])}catch(e){console.log("vaadin-development-mode-detector: uncommentAndRun() failed",e)}return e(t)}window.Vaadin=window.Vaadin||{};void 0===window.Vaadin.developmentMode&&(window.Vaadin.developmentMode=function(){try{return!!localStorage.getItem("vaadin.developmentmode.force")||["localhost","127.0.0.1"].indexOf(window.location.hostname)>=0&&(fy?!(fy&&Object.keys(fy).map((e=>fy[e])).filter((e=>e.productionMode)).length>0):!my((function(){return!0})))}catch(e){return!1}}()),window.Vaadin=window.Vaadin||{},window.Vaadin.registrations=window.Vaadin.registrations||[],window.Vaadin.registrations.push({is:"@vaadin/router",version:"1.7.4"}),function(e,t){if(window.Vaadin.developmentMode)my(e,t)}((function(){})),dy.NavigationTrigger={POPSTATE:Rg,CLICK:Ng};var gy=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let yy=class extends Yt{static get styles(){return[...super.styles]}};yy=gy([pe("kana-nav-button")],yy);let by=class extends he{constructor(){super(),this.opened=!1}static get styles(){return[l`
                :host {
                    width: var(--nav-width-collapsed);
                    transition: width 0.3s ease-in-out;
                    padding: 1rem;
                }
    
                :host([opened]) {
                    width: var(--nav-width-expanded);
                }
    
                nav {
                    display: flex;
                    flex-direction: column;
                    height: 100%;
                }
                    
                #logo-container {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    margin-bottom: 1rem;
                }

                #logo-container img {
                    max-width: 100%;
                    height: auto;
                }

                nav ul {
                    list-style: none;
                    padding: 0;
                    margin: 0;
                }
    
                nav li {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin-bottom: 1rem;
                }
    
                nav li a {
                    display: flex;
                    align-items: center;
                    text-decoration: none;
                    color: inherit;
                }
    
                kana-icon {
                    margin-right: 1rem;
                }
            `,l`
                :host {
                    --nav-width-collapsed: 90px;
                    --nav-width-expanded: 200px;
                }
            `,ve("-light")]}render(){return Q`
            <div id="logo-container">
                <img src="/media/img/logo.png" alt="Kanaloa Network logo" />
            </div>
            <nav>
                <ul>
                    ${bn(cg,(e=>e.path),(e=>Q`
                        <li>
                            <a href="${e.path}">
                                <kana-icon>${e.icon}</kana-icon>
                                ${e.name}
                            </a>
                        </li>
                    `))}
                </ul>
            </nav>
        `}};gy([ge({reflect:!0,type:Boolean})],by.prototype,"opened",void 0),by=gy([pe("kanaloa-navigation")],by);var wy=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let vy=class extends he{constructor(){super(),Ed.subscribe(this)}static get styles(){return l`
            :host {
                display: flex;
                align-items: center;
            }
            .wallet-img {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                object-fit: cover;
                margin-right: 8px;
                background-color: var(--foreground-color);
            }
            .wallet-address {
                display: inline-block;
                font-family: monospace;
            }
            kana-icon {
                margin-left: 8px;
            }

            a {
                text-decoration: none;
                color: inherit;
            }
        `}disconnectedCallback(){super.disconnectedCallback(),Ed.unsubscribe(this)}render(){const e=Q`
                <kana-button 
                    @click=${()=>Ed.requestSigner()}>
                    Connect wallet
                </kana-button>
            `;return Xm(Ed.signer.then((e=>e?.getAddress())).then((e=>e?Q`
                        <img class="wallet-img" 
                            src="${this.imageUrl||Oe(e)}" 
                            alt="Wallet icon" />
                        <span class="wallet-address">
                            ${e.slice(0,6)}...${e.slice(-4)}
                        </span>
                        <kana-icon><a href="/projects">menu</a></kana-icon>
                    `:Promise.reject())).catch((()=>e)),e)}};wy([ge({type:String})],vy.prototype,"imageUrl",void 0),vy=wy([pe("kana-wallet-info")],vy);var Ay=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let _y=class extends he{constructor(){super(),this.outlet=zm()}static get styles(){return[l`
                :host {
                    display: flex;
                    flex-direction: column;
                    flex-grow: 1;
                    padding: 1rem;
                }

                kanaloa-outlet {
                    display: flex;
                    flex-grow: 1;
                    margin-left: 2rem;
                }
                
                .top-bar {
                    display: flex;
                    justify-content: end;
                }
            `,ve("-dark")]}updated(){this.router?.setOutlet(this.outlet.value)}render(){return Q`
            <div class="top-bar">
                <kana-wallet-info>
                </kana-wallet-info>
            </div>
            <kanaloa-outlet 
                ${Jm(this.outlet)}>
            </kanaloa-outlet>
        `}};Ay([ge()],_y.prototype,"router",void 0),_y=Ay([pe("kanaloa-display")],_y),Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;class Ey extends he{render(){return Q`<slot></slot>`}connectedCallback(){super.connectedCallback(),"false"!==this.getAttribute("aria-hidden")?this.setAttribute("aria-hidden","true"):this.removeAttribute("aria-hidden")}}const ky=l`:host{font-size:var(--md-icon-size, 24px);width:var(--md-icon-size, 24px);height:var(--md-icon-size, 24px);color:inherit;font-variation-settings:inherit;font-weight:400;font-family:var(--md-icon-font, Material Symbols Outlined);display:inline-flex;font-style:normal;place-items:center;place-content:center;line-height:1;overflow:hidden;letter-spacing:normal;text-transform:none;user-select:none;white-space:nowrap;word-wrap:normal;flex-shrink:0;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale}::slotted(svg){fill:currentColor}::slotted(*){height:100%;width:100%}/*# sourceMappingURL=icon-styles.css.map */
`;let xy=class extends Ey{};xy.styles=[ky],xy=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe("md-icon")],xy);var Cy=s(692),Ny=s(408);let Py=class extends he{constructor(){super(),this.router=new dy}static get styles(){return[be,l`
                :host {
                    display: flex;
                    height: 100%;
                    overflow-y: hidden;
                }
            `]}firstUpdated(){this.router.setRoutes(ug)}render(){return Q`
            <kanaloa-navigation opened></kanaloa-navigation>
            <kanaloa-display 
                .router=${this.router}
            >
            </kanaloa-display>
        `}};Py=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe("kanaloa-app")],Py),(()=>{const e=document.createElement("style");e.innerText=`\n        html, body {\n            height: 100%;\n        }\n        ${Cy.A}\n        ${Ny.A}\n    `,document.head.appendChild(e)})(),document.querySelector("body")?.appendChild(new Py)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,