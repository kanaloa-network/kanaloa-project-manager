/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={408:(e,t,n)=>{n.d(t,{A:()=>d});var r=n(354),s=n.n(r),i=n(314),o=n.n(i),a=n(417),l=n.n(a),c=new URL(n(139),n.b),u=o()(s()),h=l()(c);u.push([e.id,`@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(${h}) format('truetype');\n}\n\n.gRd1oYHIxDKN1uv1lRRm {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n`,"",{version:3,sources:["webpack://./css/material-icons.module.css"],names:[],mappings:"AAAA;EACE,6BAA6B;EAC7B,kBAAkB;EAClB,gBAAgB;EAChB,+DAAiD;AACnD;;AAEA;EACE,6BAA6B;EAC7B,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,sBAAsB;EACtB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,cAAc;AAChB",sourcesContent:["@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(\"material-icons.ttf\") format('truetype');\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n}\n"],sourceRoot:""}]),u.locals={"material-icons":"gRd1oYHIxDKN1uv1lRRm"};const d=u},692:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(354),s=n.n(r),i=n(314),o=n.n(i)()(s());o.push([e.id,'*,\n*::before,\n*::after {\n  box-sizing: inherit;\n  padding: 0;\n  margin: 0;\n}\n\nhtml {\n  line-height: 1.15;\n  box-sizing: border-box;\n  font-family: sans-serif;\n}\n\nmain {\n  display: block;\n}\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\np + p {\n  margin-top: 1rem;\n}\n\na {\n  background-color: transparent;\n}\n\nabbr[title] {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  line-height: inherit;\n  border: 1px solid currentColor;\n}\n\nbutton {\n  overflow: visible;\n  text-transform: none;\n}\n\nbutton,\n[type=button],\n[type=reset],\n[type=submit] {\n  -webkit-appearance: button;\n  padding: 1px 6px;\n}\n\ninput {\n  overflow: visible;\n}\n\ninput,\ntextarea {\n  padding: 1px;\n}\n\nfieldset {\n  border: 1px solid currentColor;\n  margin: 0 2px;\n}\n\nlegend {\n  color: inherit;\n  display: table;\n  max-width: 100%;\n  white-space: normal;\n}\n\nprogress {\n  display: inline-block;\n  vertical-align: baseline;\n}\n\nselect {\n  text-transform: none;\n}\n\ntextarea {\n  overflow: auto;\n  vertical-align: top;\n}\n\n[type=search] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n\n[type=color] {\n  background: inherit;\n}\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.5;\n}\n\n::-webkit-search-decoration,\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n\n::-moz-focus-inner {\n  border: 0;\n}\n\n:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n  color: inherit;\n  overflow: visible;\n}\n\ndl,\nol,\nul {\n  margin: 0;\n}\n\nol ol,\nol ul,\nol dl,\nul ol,\nul ul,\nul dl,\ndl ol,\ndl ul,\ndl dl {\n  margin: 0;\n}\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\naudio,\nvideo {\n  display: inline-block;\n}\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\nimg {\n  border: 0;\n}\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\ntable {\n  text-indent: 0;\n  border-color: inherit;\n}\n\ndetails {\n  display: block;\n}\n\ndialog {\n  background-color: inherit;\n  border: solid;\n  color: inherit;\n  display: block;\n  height: fit-content;\n  left: 0;\n  margin: auto;\n  padding: 1em;\n  position: absolute;\n  right: 0;\n  width: fit-content;\n}\n\ndialog:not([open]) {\n  display: none;\n}\n\nsummary {\n  display: list-item;\n}\n\ncanvas {\n  display: inline-block;\n}\n\ntemplate {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}\n\n:root {\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n}\n',"",{version:3,sources:["webpack://./css/reseter.module.css"],names:[],mappings:"AAAA;;;EAGE,mBAAmB;EACnB,UAAU;EACV,SAAS;AACX;;AAEA;EACE,iBAAiB;EACjB,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,yCAAyC;UACjC,iCAAiC;AAC3C;;AAEA;;;;EAIE,iCAAiC;EACjC,cAAc;AAChB;;AAEA;;EAEE,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;;;;;EAKE,oBAAoB;EACpB,8BAA8B;AAChC;;AAEA;EACE,iBAAiB;EACjB,oBAAoB;AACtB;;AAEA;;;;EAIE,0BAA0B;EAC1B,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B,aAAa;AACf;;AAEA;EACE,cAAc;EACd,cAAc;EACd,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,wBAAwB;AAC1B;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,cAAc;EACd,mBAAmB;AACrB;;AAEA;EACE,6BAA6B;EAC7B,oBAAoB;AACtB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;;EAEE,YAAY;AACd;;AAEA;EACE,cAAc;EACd,YAAY;AACd;;AAEA;;EAEE,0BAA0B;EAC1B,aAAa;AACf;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,SAAS;EACT,cAAc;EACd,iBAAiB;AACnB;;AAEA;;;EAGE,SAAS;AACX;;AAEA;;;;;;;;;EASE,SAAS;AACX;;AAEA;;EAEE,mBAAmB;AACrB;;AAEA;;EAEE,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,qBAAqB;AACvB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,cAAc;EACd,cAAc;EACd,mBAAmB;EACnB,OAAO;EACP,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,QAAQ;EACR,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,wIAAwI;AAC1I",sourcesContent:['*,\n*::before,\n*::after {\n  box-sizing: inherit;\n  padding: 0;\n  margin: 0;\n}\n\nhtml {\n  line-height: 1.15;\n  box-sizing: border-box;\n  font-family: sans-serif;\n}\n\nmain {\n  display: block;\n}\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\np + p {\n  margin-top: 1rem;\n}\n\na {\n  background-color: transparent;\n}\n\nabbr[title] {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  line-height: inherit;\n  border: 1px solid currentColor;\n}\n\nbutton {\n  overflow: visible;\n  text-transform: none;\n}\n\nbutton,\n[type=button],\n[type=reset],\n[type=submit] {\n  -webkit-appearance: button;\n  padding: 1px 6px;\n}\n\ninput {\n  overflow: visible;\n}\n\ninput,\ntextarea {\n  padding: 1px;\n}\n\nfieldset {\n  border: 1px solid currentColor;\n  margin: 0 2px;\n}\n\nlegend {\n  color: inherit;\n  display: table;\n  max-width: 100%;\n  white-space: normal;\n}\n\nprogress {\n  display: inline-block;\n  vertical-align: baseline;\n}\n\nselect {\n  text-transform: none;\n}\n\ntextarea {\n  overflow: auto;\n  vertical-align: top;\n}\n\n[type=search] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n\n[type=color] {\n  background: inherit;\n}\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.5;\n}\n\n::-webkit-search-decoration,\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n\n::-moz-focus-inner {\n  border: 0;\n}\n\n:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n  color: inherit;\n  overflow: visible;\n}\n\ndl,\nol,\nul {\n  margin: 0;\n}\n\nol ol,\nol ul,\nol dl,\nul ol,\nul ul,\nul dl,\ndl ol,\ndl ul,\ndl dl {\n  margin: 0;\n}\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\naudio,\nvideo {\n  display: inline-block;\n}\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\nimg {\n  border: 0;\n}\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\ntable {\n  text-indent: 0;\n  border-color: inherit;\n}\n\ndetails {\n  display: block;\n}\n\ndialog {\n  background-color: inherit;\n  border: solid;\n  color: inherit;\n  display: block;\n  height: fit-content;\n  left: 0;\n  margin: auto;\n  padding: 1em;\n  position: absolute;\n  right: 0;\n  width: fit-content;\n}\n\ndialog:not([open]) {\n  display: none;\n}\n\nsummary {\n  display: list-item;\n}\n\ncanvas {\n  display: inline-block;\n}\n\ntemplate {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}\n\n:root {\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;\n}\n'],sourceRoot:""}]),o.locals={};const a=o},278:(e,t,n)=>{n.d(t,{A:()=>f});var r=n(354),s=n.n(r),i=n(314),o=n.n(i),a=n(417),l=n.n(a),c=new URL(n(434),n.b),u=new URL(n(48),n.b),h=o()(s()),d=l()(c),p=l()(u);h.push([e.id,`@font-face {\n    font-family: 'Ablation';\n    src: url(${d}) format('woff2');\n    font-weight: 800;\n    font-style: normal;\n    font-display: swap;\n}\n@font-face {\n    font-family: 'Ablation';\n    src: url(${p}) format('woff2');\n    font-weight: 900;\n    font-style: normal;\n    font-display: swap;\n}`,"",{version:3,sources:["webpack://./media/fonts/ablation.module.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,4DAAgE;IAChE,gBAAgB;IAChB,kBAAkB;IAClB,kBAAkB;AACtB;AACA;IACI,uBAAuB;IACvB,4DAA4D;IAC5D,gBAAgB;IAChB,kBAAkB;IAClB,kBAAkB;AACtB",sourcesContent:["@font-face {\n    font-family: 'Ablation';\n    src: url('/media/fonts/AblationExtraBold.woff2') format('woff2');\n    font-weight: 800;\n    font-style: normal;\n    font-display: swap;\n}\n@font-face {\n    font-family: 'Ablation';\n    src: url('/media/fonts/AblationBlack.woff2') format('woff2');\n    font-weight: 900;\n    font-style: normal;\n    font-display: swap;\n}"],sourceRoot:""}]),h.locals={};const f=h},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,s,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(o[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&o[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),s&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=s):u[4]="".concat(s)),t.push(u))}},t}},417:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(s," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},139:(e,t,n)=>{e.exports=n.p+"f20305dee9d396fea5c7.ttf"},48:(e,t,n)=>{e.exports=n.p+"0448b0c67ff4271fc92a.woff2"},434:(e,t,n)=>{e.exports=n.p+"ce3b17e97a70aad675a2.woff2"}},r={};function s(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,s),i.exports}s.m=n,s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,n)=>(s.f[n](e,t),t)),[])),s.u=e=>e+".bundle.js",s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="kanaloa-project-manager:",s.l=(n,r,i,o)=>{if(e[n])e[n].push(r);else{var a,l;if(void 0!==i)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var h=c[u];if(h.getAttribute("src")==n||h.getAttribute("data-webpack")==t+i){a=h;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",t+i),a.src=n),e[n]=[r];var d=(t,r)=>{a.onerror=a.onload=null,clearTimeout(p);var s=e[n];if(delete e[n],a.parentNode&&a.parentNode.removeChild(a),s&&s.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),l&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.p="/",(()=>{s.b=document.baseURI||self.location.href;var e={792:0};s.f.j=(t,n)=>{var r=s.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var i=new Promise(((n,s)=>r=e[t]=[n,s]));n.push(r[2]=i);var o=s.p+s.u(t),a=new Error;s.l(o,(n=>{if(s.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var i=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;a.message="Loading chunk "+t+" failed.\n("+i+": "+o+")",a.name="ChunkLoadError",a.type=i,a.request=o,r[1](a)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,i,[o,a,l]=n,c=0;if(o.some((t=>0!==e[t]))){for(r in a)s.o(a,r)&&(s.m[r]=a[r]);l&&l(s)}for(t&&t(n);c<o.length;c++)i=o[c],s.o(e,i)&&e[i]&&e[i][0](),e[i]=0},n=self.webpackChunkkanaloa_project_manager=self.webpackChunkkanaloa_project_manager||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{var e={};s.r(e),s.d(e,{OG:()=>Vl,My:()=>Tl,bytesToNumberBE:()=>Ll,lX:()=>Dl,Id:()=>jl,fg:()=>zl,qj:()=>$l,hexToBytes:()=>Fl,lq:()=>Ml,z:()=>Ul,Q5:()=>Ql});const t=globalThis,n=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,r=Symbol(),i=new WeakMap;class o{constructor(e,t,n){if(this._$cssResult$=!0,n!==r)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(n&&void 0===e){const n=void 0!==t&&1===t.length;n&&(e=i.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),n&&i.set(t,e))}return e}toString(){return this.cssText}}const a=e=>new o("string"==typeof e?e:e+"",void 0,r),l=(e,...t)=>{const n=1===e.length?e[0]:t.reduce(((t,n,r)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(n)+e[r+1]),e[0]);return new o(n,e,r)},c=(e,r)=>{if(n)e.adoptedStyleSheets=r.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet));else for(const n of r){const r=document.createElement("style"),s=t.litNonce;void 0!==s&&r.setAttribute("nonce",s),r.textContent=n.cssText,e.appendChild(r)}},u=n?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const n of e.cssRules)t+=n.cssText;return a(t)})(e):e,{is:h,defineProperty:d,getOwnPropertyDescriptor:p,getOwnPropertyNames:f,getOwnPropertySymbols:m,getPrototypeOf:g}=Object,y=globalThis,b=y.trustedTypes,w=b?b.emptyScript:"",v=y.reactiveElementPolyfillSupport,A=(e,t)=>e,_={toAttribute(e,t){switch(t){case Boolean:e=e?w:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let n=e;switch(t){case Boolean:n=null!==e;break;case Number:n=null===e?null:Number(e);break;case Object:case Array:try{n=JSON.parse(e)}catch(e){n=null}}return n}},E=(e,t)=>!h(e,t),k={attribute:!0,type:String,converter:_,reflect:!1,hasChanged:E};Symbol.metadata??=Symbol("metadata"),y.litPropertyMetadata??=new WeakMap;class x extends HTMLElement{static addInitializer(e){this._$Ei(),(this.l??=[]).push(e)}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(e,t=k){if(t.state&&(t.attribute=!1),this._$Ei(),this.elementProperties.set(e,t),!t.noAccessor){const n=Symbol(),r=this.getPropertyDescriptor(e,n,t);void 0!==r&&d(this.prototype,e,r)}}static getPropertyDescriptor(e,t,n){const{get:r,set:s}=p(this.prototype,e)??{get(){return this[t]},set(e){this[t]=e}};return{get(){return r?.call(this)},set(t){const i=r?.call(this);s.call(this,t),this.requestUpdate(e,i,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)??k}static _$Ei(){if(this.hasOwnProperty(A("elementProperties")))return;const e=g(this);e.finalize(),void 0!==e.l&&(this.l=[...e.l]),this.elementProperties=new Map(e.elementProperties)}static finalize(){if(this.hasOwnProperty(A("finalized")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(A("properties"))){const e=this.properties,t=[...f(e),...m(e)];for(const n of t)this.createProperty(n,e[n])}const e=this[Symbol.metadata];if(null!==e){const t=litPropertyMetadata.get(e);if(void 0!==t)for(const[e,n]of t)this.elementProperties.set(e,n)}this._$Eh=new Map;for(const[e,t]of this.elementProperties){const n=this._$Eu(e,t);void 0!==n&&this._$Eh.set(n,e)}this.elementStyles=this.finalizeStyles(this.styles)}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const n=new Set(e.flat(1/0).reverse());for(const e of n)t.unshift(u(e))}else void 0!==e&&t.push(u(e));return t}static _$Eu(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev()}_$Ev(){this._$ES=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach((e=>e(this)))}addController(e){(this._$EO??=new Set).add(e),void 0!==this.renderRoot&&this.isConnected&&e.hostConnected?.()}removeController(e){this._$EO?.delete(e)}_$E_(){const e=new Map,t=this.constructor.elementProperties;for(const n of t.keys())this.hasOwnProperty(n)&&(e.set(n,this[n]),delete this[n]);e.size>0&&(this._$Ep=e)}createRenderRoot(){const e=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return c(e,this.constructor.elementStyles),e}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach((e=>e.hostConnected?.()))}enableUpdating(e){}disconnectedCallback(){this._$EO?.forEach((e=>e.hostDisconnected?.()))}attributeChangedCallback(e,t,n){this._$AK(e,n)}_$EC(e,t){const n=this.constructor.elementProperties.get(e),r=this.constructor._$Eu(e,n);if(void 0!==r&&!0===n.reflect){const s=(void 0!==n.converter?.toAttribute?n.converter:_).toAttribute(t,n.type);this._$Em=e,null==s?this.removeAttribute(r):this.setAttribute(r,s),this._$Em=null}}_$AK(e,t){const n=this.constructor,r=n._$Eh.get(e);if(void 0!==r&&this._$Em!==r){const e=n.getPropertyOptions(r),s="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==e.converter?.fromAttribute?e.converter:_;this._$Em=r,this[r]=s.fromAttribute(t,e.type),this._$Em=null}}requestUpdate(e,t,n){if(void 0!==e){if(n??=this.constructor.getPropertyOptions(e),!(n.hasChanged??E)(this[e],t))return;this.P(e,t,n)}!1===this.isUpdatePending&&(this._$ES=this._$ET())}P(e,t,n){this._$AL.has(e)||this._$AL.set(e,t),!0===n.reflect&&this._$Em!==e&&(this._$Ej??=new Set).add(e)}async _$ET(){this.isUpdatePending=!0;try{await this._$ES}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[e,t]of this._$Ep)this[e]=t;this._$Ep=void 0}const e=this.constructor.elementProperties;if(e.size>0)for(const[t,n]of e)!0!==n.wrapped||this._$AL.has(t)||void 0===this[t]||this.P(t,this[t],n)}let e=!1;const t=this._$AL;try{e=this.shouldUpdate(t),e?(this.willUpdate(t),this._$EO?.forEach((e=>e.hostUpdate?.())),this.update(t)):this._$EU()}catch(t){throw e=!1,this._$EU(),t}e&&this._$AE(t)}willUpdate(e){}_$AE(e){this._$EO?.forEach((e=>e.hostUpdated?.())),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$EU(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(e){return!0}update(e){this._$Ej&&=this._$Ej.forEach((e=>this._$EC(e,this[e]))),this._$EU()}updated(e){}firstUpdated(e){}}x.elementStyles=[],x.shadowRootOptions={mode:"open"},x[A("elementProperties")]=new Map,x[A("finalized")]=new Map,v?.({ReactiveElement:x}),(y.reactiveElementVersions??=[]).push("2.0.4");const C=globalThis,N=C.trustedTypes,P=N?N.createPolicy("lit-html",{createHTML:e=>e}):void 0,R="$lit$",O=`lit$${(Math.random()+"").slice(9)}$`,B="?"+O,S=`<${B}>`,T=document,I=()=>T.createComment(""),F=e=>null===e||"object"!=typeof e&&"function"!=typeof e,L=Array.isArray,D=e=>L(e)||"function"==typeof e?.[Symbol.iterator],M="[ \t\n\f\r]",U=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,$=/-->/g,j=/>/g,V=RegExp(`>|${M}(?:([^\\s"'>=/]+)(${M}*=${M}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),H=/'/g,G=/"/g,z=/^(?:script|style|textarea|title)$/i,q=e=>(t,...n)=>({_$litType$:e,strings:t,values:n}),Q=q(1),J=(q(2),Symbol.for("lit-noChange")),K=Symbol.for("lit-nothing"),W=new WeakMap,Y=T.createTreeWalker(T,129);function Z(e,t){if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==P?P.createHTML(t):t}const X=(e,t)=>{const n=e.length-1,r=[];let s,i=2===t?"<svg>":"",o=U;for(let t=0;t<n;t++){const n=e[t];let a,l,c=-1,u=0;for(;u<n.length&&(o.lastIndex=u,l=o.exec(n),null!==l);)u=o.lastIndex,o===U?"!--"===l[1]?o=$:void 0!==l[1]?o=j:void 0!==l[2]?(z.test(l[2])&&(s=RegExp("</"+l[2],"g")),o=V):void 0!==l[3]&&(o=V):o===V?">"===l[0]?(o=s??U,c=-1):void 0===l[1]?c=-2:(c=o.lastIndex-l[2].length,a=l[1],o=void 0===l[3]?V:'"'===l[3]?G:H):o===G||o===H?o=V:o===$||o===j?o=U:(o=V,s=void 0);const h=o===V&&e[t+1].startsWith("/>")?" ":"";i+=o===U?n+S:c>=0?(r.push(a),n.slice(0,c)+R+n.slice(c)+O+h):n+O+(-2===c?t:h)}return[Z(e,i+(e[n]||"<?>")+(2===t?"</svg>":"")),r]};class ee{constructor({strings:e,_$litType$:t},n){let r;this.parts=[];let s=0,i=0;const o=e.length-1,a=this.parts,[l,c]=X(e,t);if(this.el=ee.createElement(l,n),Y.currentNode=this.el.content,2===t){const e=this.el.content.firstChild;e.replaceWith(...e.childNodes)}for(;null!==(r=Y.nextNode())&&a.length<o;){if(1===r.nodeType){if(r.hasAttributes())for(const e of r.getAttributeNames())if(e.endsWith(R)){const t=c[i++],n=r.getAttribute(e).split(O),o=/([.?@])?(.*)/.exec(t);a.push({type:1,index:s,name:o[2],strings:n,ctor:"."===o[1]?ie:"?"===o[1]?oe:"@"===o[1]?ae:se}),r.removeAttribute(e)}else e.startsWith(O)&&(a.push({type:6,index:s}),r.removeAttribute(e));if(z.test(r.tagName)){const e=r.textContent.split(O),t=e.length-1;if(t>0){r.textContent=N?N.emptyScript:"";for(let n=0;n<t;n++)r.append(e[n],I()),Y.nextNode(),a.push({type:2,index:++s});r.append(e[t],I())}}}else if(8===r.nodeType)if(r.data===B)a.push({type:2,index:s});else{let e=-1;for(;-1!==(e=r.data.indexOf(O,e+1));)a.push({type:7,index:s}),e+=O.length-1}s++}}static createElement(e,t){const n=T.createElement("template");return n.innerHTML=e,n}}function te(e,t,n=e,r){if(t===J)return t;let s=void 0!==r?n._$Co?.[r]:n._$Cl;const i=F(t)?void 0:t._$litDirective$;return s?.constructor!==i&&(s?._$AO?.(!1),void 0===i?s=void 0:(s=new i(e),s._$AT(e,n,r)),void 0!==r?(n._$Co??=[])[r]=s:n._$Cl=s),void 0!==s&&(t=te(e,s._$AS(e,t.values),s,r)),t}class ne{constructor(e,t){this._$AV=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){const{el:{content:t},parts:n}=this._$AD,r=(e?.creationScope??T).importNode(t,!0);Y.currentNode=r;let s=Y.nextNode(),i=0,o=0,a=n[0];for(;void 0!==a;){if(i===a.index){let t;2===a.type?t=new re(s,s.nextSibling,this,e):1===a.type?t=new a.ctor(s,a.name,a.strings,this,e):6===a.type&&(t=new le(s,this,e)),this._$AV.push(t),a=n[++o]}i!==a?.index&&(s=Y.nextNode(),i++)}return Y.currentNode=T,r}p(e){let t=0;for(const n of this._$AV)void 0!==n&&(void 0!==n.strings?(n._$AI(e,n,t),t+=n.strings.length-2):n._$AI(e[t])),t++}}class re{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(e,t,n,r){this.type=2,this._$AH=K,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=n,this.options=r,this._$Cv=r?.isConnected??!0}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===e?.nodeType&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=te(this,e,t),F(e)?e===K||null==e||""===e?(this._$AH!==K&&this._$AR(),this._$AH=K):e!==this._$AH&&e!==J&&this._(e):void 0!==e._$litType$?this.$(e):void 0!==e.nodeType?this.T(e):D(e)?this.k(e):this._(e)}S(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}T(e){this._$AH!==e&&(this._$AR(),this._$AH=this.S(e))}_(e){this._$AH!==K&&F(this._$AH)?this._$AA.nextSibling.data=e:this.T(T.createTextNode(e)),this._$AH=e}$(e){const{values:t,_$litType$:n}=e,r="number"==typeof n?this._$AC(e):(void 0===n.el&&(n.el=ee.createElement(Z(n.h,n.h[0]),this.options)),n);if(this._$AH?._$AD===r)this._$AH.p(t);else{const e=new ne(r,this),n=e.u(this.options);e.p(t),this.T(n),this._$AH=e}}_$AC(e){let t=W.get(e.strings);return void 0===t&&W.set(e.strings,t=new ee(e)),t}k(e){L(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let n,r=0;for(const s of e)r===t.length?t.push(n=new re(this.S(I()),this.S(I()),this,this.options)):n=t[r],n._$AI(s),r++;r<t.length&&(this._$AR(n&&n._$AB.nextSibling,r),t.length=r)}_$AR(e=this._$AA.nextSibling,t){for(this._$AP?.(!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){void 0===this._$AM&&(this._$Cv=e,this._$AP?.(e))}}class se{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(e,t,n,r,s){this.type=1,this._$AH=K,this._$AN=void 0,this.element=e,this.name=t,this._$AM=r,this.options=s,n.length>2||""!==n[0]||""!==n[1]?(this._$AH=Array(n.length-1).fill(new String),this.strings=n):this._$AH=K}_$AI(e,t=this,n,r){const s=this.strings;let i=!1;if(void 0===s)e=te(this,e,t,0),i=!F(e)||e!==this._$AH&&e!==J,i&&(this._$AH=e);else{const r=e;let o,a;for(e=s[0],o=0;o<s.length-1;o++)a=te(this,r[n+o],t,o),a===J&&(a=this._$AH[o]),i||=!F(a)||a!==this._$AH[o],a===K?e=K:e!==K&&(e+=(a??"")+s[o+1]),this._$AH[o]=a}i&&!r&&this.j(e)}j(e){e===K?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,e??"")}}class ie extends se{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===K?void 0:e}}class oe extends se{constructor(){super(...arguments),this.type=4}j(e){this.element.toggleAttribute(this.name,!!e&&e!==K)}}class ae extends se{constructor(e,t,n,r,s){super(e,t,n,r,s),this.type=5}_$AI(e,t=this){if((e=te(this,e,t,0)??K)===J)return;const n=this._$AH,r=e===K&&n!==K||e.capture!==n.capture||e.once!==n.once||e.passive!==n.passive,s=e!==K&&(n===K||r);r&&this.element.removeEventListener(this.name,this,n),s&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){"function"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,e):this._$AH.handleEvent(e)}}class le{constructor(e,t,n){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=n}get _$AU(){return this._$AM._$AU}_$AI(e){te(this,e)}}const ce={P:R,A:O,C:B,M:1,L:X,R:ne,D,V:te,I:re,H:se,N:oe,U:ae,B:ie,F:le},ue=C.litHtmlPolyfillSupport;ue?.(ee,re),(C.litHtmlVersions??=[]).push("3.1.2");class he extends x{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){const e=super.createRenderRoot();return this.renderOptions.renderBefore??=e.firstChild,e}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=((e,t,n)=>{const r=n?.renderBefore??t;let s=r._$litPart$;if(void 0===s){const e=n?.renderBefore??null;r._$litPart$=s=new re(t.insertBefore(I(),e),e,void 0,n??{})}return s._$AI(e),s})(t,this.renderRoot,this.renderOptions)}connectedCallback(){super.connectedCallback(),this._$Do?.setConnected(!0)}disconnectedCallback(){super.disconnectedCallback(),this._$Do?.setConnected(!1)}render(){return J}}he._$litElement$=!0,he.finalized=!0,globalThis.litElementHydrateSupport?.({LitElement:he});const de=globalThis.litElementPolyfillSupport;de?.({LitElement:he}),(globalThis.litElementVersions??=[]).push("4.0.4");const pe=e=>(t,n)=>{void 0!==n?n.addInitializer((()=>{customElements.define(e,t)})):customElements.define(e,t)},fe={attribute:!0,type:String,converter:_,reflect:!1,hasChanged:E},me=(e=fe,t,n)=>{const{kind:r,metadata:s}=n;let i=globalThis.litPropertyMetadata.get(s);if(void 0===i&&globalThis.litPropertyMetadata.set(s,i=new Map),i.set(n.name,e),"accessor"===r){const{name:r}=n;return{set(n){const s=t.get.call(this);t.set.call(this,n),this.requestUpdate(r,s,e)},init(t){return void 0!==t&&this.P(r,void 0,e),t}}}if("setter"===r){const{name:r}=n;return function(n){const s=this[r];t.call(this,n),this.requestUpdate(r,s,e)}}throw Error("Unsupported decorator location: "+r)};function ge(e){return(t,n)=>"object"==typeof n?me(e,t,n):((e,t,n)=>{const r=t.hasOwnProperty(n);return t.constructor.createProperty(n,r?{...e,wrapped:!0}:e),r?Object.getOwnPropertyDescriptor(t,n):void 0})(e,t,n)}function ye(e){return ge({...e,state:!0,attribute:!1})}const be=l`
    :host {
        /* Primary colors */
        --primary-color: #514983;
        --primary-light-color: #8274b3;
        --primary-dark-color: #2a2b4f;

        /* Highlighted colors */
        --highlighted-color: #EA3757;
        --highlighted-light-color: #ff6a84;
        --highlighted-dark-color: #b30033;

        /* Background colors */
        --background-color: #261F47;
        --background-light-color: #000;
        --background-dark-color: #17102e;
    
        /* Foreground colors */
        --foreground-color: #fff;
        --foreground-light-color: #fff;
        --foreground-dark-color: #fff;
    }
`,we=l`
    h1 {
        font-size: 3rem;
        display: block;
        width: 100%;
    }

    h2 {
        font-size: 2rem;
        margin: 0.5rem 0 0.5rem;
    }

    h3 {
        font-size: 1.5rem;
        margin: 0;
    }

    hr {
        border: none;
        height: 2px;
        background-color: var(--background-light-color);
        margin: 0.5rem 0 1rem;
    }
`;function ve(e=""){return l`
        :host {
            background-color: var(--background${a(e)}-color);
            color: var(--foreground${a(e)}-color);
        }
    `}function Ae(e=""){return l`
        :host {
            background-color: var(--foreground${a(e)}-color);
            color: var(--background${a(e)}-color);
        }
    `}const _e=new WeakMap;function Ee(e){return t=>{if(function(e,t){let n=t;for(;n;){if(_e.get(n)===e)return!0;n=Object.getPrototypeOf(n)}return!1}(e,t))return t;const n=e(t);return _e.set(n,e),n}}const ke=Ee((e=>class extends e{static get properties(){return{disabled:{type:Boolean,reflect:!0}}}constructor(){super(),this._requestedToBeDisabled=!1,this.__isUserSettingDisabled=!0,this.__restoreDisabledTo=!1,this.disabled=!1}makeRequestToBeDisabled(){!1===this._requestedToBeDisabled&&(this._requestedToBeDisabled=!0,this.__restoreDisabledTo=this.disabled,this.__internalSetDisabled(!0))}retractRequestToBeDisabled(){!0===this._requestedToBeDisabled&&(this._requestedToBeDisabled=!1,this.__internalSetDisabled(this.__restoreDisabledTo))}__internalSetDisabled(e){this.__isUserSettingDisabled=!1,this.disabled=e,this.__isUserSettingDisabled=!0}requestUpdate(e,t){super.requestUpdate(e,t),"disabled"===e&&(this.__isUserSettingDisabled&&(this.__restoreDisabledTo=this.disabled),!1===this.disabled&&!0===this._requestedToBeDisabled&&this.__internalSetDisabled(!0))}})),xe=Ee((e=>class extends(ke(e)){static get properties(){return{tabIndex:{type:Number,reflect:!0,attribute:"tabindex"}}}constructor(){super(),this.__isUserSettingTabIndex=!0,this.__restoreTabIndexTo=0,this.__internalSetTabIndex(0)}makeRequestToBeDisabled(){super.makeRequestToBeDisabled(),!1===this._requestedToBeDisabled&&null!=this.tabIndex&&(this.__restoreTabIndexTo=this.tabIndex)}retractRequestToBeDisabled(){super.retractRequestToBeDisabled(),!0===this._requestedToBeDisabled&&this.__internalSetTabIndex(this.__restoreTabIndexTo)}__internalSetTabIndex(e){this.__isUserSettingTabIndex=!1,this.tabIndex=e,this.__isUserSettingTabIndex=!0}requestUpdate(e,t){super.requestUpdate(e,t),"disabled"===e&&(this.disabled?this.__internalSetTabIndex(-1):this.__internalSetTabIndex(this.__restoreTabIndexTo)),"tabIndex"===e&&(this.__isUserSettingTabIndex&&null!=this.tabIndex&&(this.__restoreTabIndexTo=this.tabIndex),-1!==this.tabIndex&&!0===this._requestedToBeDisabled&&this.__internalSetTabIndex(-1))}firstUpdated(e){super.firstUpdated(e),this.disabled&&this.__internalSetTabIndex(-1)}})),Ce=window,Ne=Ce.ShadowRoot&&(void 0===Ce.ShadyCSS||Ce.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,Pe=Symbol(),Re=new WeakMap;class Oe{constructor(e,t,n){if(this._$cssResult$=!0,n!==Pe)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(Ne&&void 0===e){const n=void 0!==t&&1===t.length;n&&(e=Re.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),n&&Re.set(t,e))}return e}toString(){return this.cssText}}const Be=(e,...t)=>{const n=1===e.length?e[0]:t.reduce(((t,n,r)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(n)+e[r+1]),e[0]);return new Oe(n,e,Pe)},Se=Ne?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const n of e.cssRules)t+=n.cssText;return(e=>new Oe("string"==typeof e?e:e+"",void 0,Pe))(t)})(e):e;var Te;const Ie=window,Fe=Ie.trustedTypes,Le=Fe?Fe.emptyScript:"",De=Ie.reactiveElementPolyfillSupport,Me={toAttribute(e,t){switch(t){case Boolean:e=e?Le:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let n=e;switch(t){case Boolean:n=null!==e;break;case Number:n=null===e?null:Number(e);break;case Object:case Array:try{n=JSON.parse(e)}catch(e){n=null}}return n}},Ue=(e,t)=>t!==e&&(t==t||e==e),$e={attribute:!0,type:String,converter:Me,reflect:!1,hasChanged:Ue},je="finalized";class Ve extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this._$Eu()}static addInitializer(e){var t;this.finalize(),(null!==(t=this.h)&&void 0!==t?t:this.h=[]).push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,n)=>{const r=this._$Ep(n,t);void 0!==r&&(this._$Ev.set(r,n),e.push(r))})),e}static createProperty(e,t=$e){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const n="symbol"==typeof e?Symbol():"__"+e,r=this.getPropertyDescriptor(e,n,t);void 0!==r&&Object.defineProperty(this.prototype,e,r)}}static getPropertyDescriptor(e,t,n){return{get(){return this[t]},set(r){const s=this[e];this[t]=r,this.requestUpdate(e,s,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||$e}static finalize(){if(this.hasOwnProperty(je))return!1;this[je]=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),void 0!==e.h&&(this.h=[...e.h]),this.elementProperties=new Map(e.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const n of t)this.createProperty(n,e[n])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const n=new Set(e.flat(1/0).reverse());for(const e of n)t.unshift(Se(e))}else void 0!==e&&t.push(Se(e));return t}static _$Ep(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}_$Eu(){var e;this._$E_=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(e=this.constructor.h)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,n;(null!==(t=this._$ES)&&void 0!==t?t:this._$ES=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(n=e.hostConnected)||void 0===n||n.call(e))}removeController(e){var t;null===(t=this._$ES)||void 0===t||t.splice(this._$ES.indexOf(e)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Ei.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return((e,t)=>{Ne?e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):t.forEach((t=>{const n=document.createElement("style"),r=Ce.litNonce;void 0!==r&&n.setAttribute("nonce",r),n.textContent=t.cssText,e.appendChild(n)}))})(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,n){this._$AK(e,n)}_$EO(e,t,n=$e){var r;const s=this.constructor._$Ep(e,n);if(void 0!==s&&!0===n.reflect){const i=(void 0!==(null===(r=n.converter)||void 0===r?void 0:r.toAttribute)?n.converter:Me).toAttribute(t,n.type);this._$El=e,null==i?this.removeAttribute(s):this.setAttribute(s,i),this._$El=null}}_$AK(e,t){var n;const r=this.constructor,s=r._$Ev.get(e);if(void 0!==s&&this._$El!==s){const e=r.getPropertyOptions(s),i="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(n=e.converter)||void 0===n?void 0:n.fromAttribute)?e.converter:Me;this._$El=s,this[s]=i.fromAttribute(t,e.type),this._$El=null}}requestUpdate(e,t,n){let r=!0;void 0!==e&&(((n=n||this.constructor.getPropertyOptions(e)).hasChanged||Ue)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===n.reflect&&this._$El!==e&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(e,n))):r=!1),!this.isUpdatePending&&r&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((e,t)=>this[t]=e)),this._$Ei=void 0);let t=!1;const n=this._$AL;try{t=this.shouldUpdate(n),t?(this.willUpdate(n),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(n)):this._$Ek()}catch(e){throw t=!1,this._$Ek(),e}t&&this._$AE(n)}willUpdate(e){}_$AE(e){var t;null===(t=this._$ES)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(e){return!0}update(e){void 0!==this._$EC&&(this._$EC.forEach(((e,t)=>this._$EO(t,this[t],e))),this._$EC=void 0),this._$Ek()}updated(e){}firstUpdated(e){}}var He;Ve[je]=!0,Ve.elementProperties=new Map,Ve.elementStyles=[],Ve.shadowRootOptions={mode:"open"},null==De||De({ReactiveElement:Ve}),(null!==(Te=Ie.reactiveElementVersions)&&void 0!==Te?Te:Ie.reactiveElementVersions=[]).push("1.6.3");const Ge=window,ze=Ge.trustedTypes,qe=ze?ze.createPolicy("lit-html",{createHTML:e=>e}):void 0,Qe="$lit$",Je=`lit$${(Math.random()+"").slice(9)}$`,Ke="?"+Je,We=`<${Ke}>`,Ye=document,Ze=()=>Ye.createComment(""),Xe=e=>null===e||"object"!=typeof e&&"function"!=typeof e,et=Array.isArray,tt=e=>et(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]),nt="[ \t\n\f\r]",rt=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,st=/-->/g,it=/>/g,ot=RegExp(`>|${nt}(?:([^\\s"'>=/]+)(${nt}*=${nt}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),at=/'/g,lt=/"/g,ct=/^(?:script|style|textarea|title)$/i,ut=e=>(t,...n)=>({_$litType$:e,strings:t,values:n}),ht=ut(1),dt=(ut(2),Symbol.for("lit-noChange")),pt=Symbol.for("lit-nothing"),ft=new WeakMap,mt=Ye.createTreeWalker(Ye,129,null,!1);function gt(e,t){if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==qe?qe.createHTML(t):t}const yt=(e,t)=>{const n=e.length-1,r=[];let s,i=2===t?"<svg>":"",o=rt;for(let t=0;t<n;t++){const n=e[t];let a,l,c=-1,u=0;for(;u<n.length&&(o.lastIndex=u,l=o.exec(n),null!==l);)u=o.lastIndex,o===rt?"!--"===l[1]?o=st:void 0!==l[1]?o=it:void 0!==l[2]?(ct.test(l[2])&&(s=RegExp("</"+l[2],"g")),o=ot):void 0!==l[3]&&(o=ot):o===ot?">"===l[0]?(o=null!=s?s:rt,c=-1):void 0===l[1]?c=-2:(c=o.lastIndex-l[2].length,a=l[1],o=void 0===l[3]?ot:'"'===l[3]?lt:at):o===lt||o===at?o=ot:o===st||o===it?o=rt:(o=ot,s=void 0);const h=o===ot&&e[t+1].startsWith("/>")?" ":"";i+=o===rt?n+We:c>=0?(r.push(a),n.slice(0,c)+Qe+n.slice(c)+Je+h):n+Je+(-2===c?(r.push(void 0),t):h)}return[gt(e,i+(e[n]||"<?>")+(2===t?"</svg>":"")),r]};class bt{constructor({strings:e,_$litType$:t},n){let r;this.parts=[];let s=0,i=0;const o=e.length-1,a=this.parts,[l,c]=yt(e,t);if(this.el=bt.createElement(l,n),mt.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(r=mt.nextNode())&&a.length<o;){if(1===r.nodeType){if(r.hasAttributes()){const e=[];for(const t of r.getAttributeNames())if(t.endsWith(Qe)||t.startsWith(Je)){const n=c[i++];if(e.push(t),void 0!==n){const e=r.getAttribute(n.toLowerCase()+Qe).split(Je),t=/([.?@])?(.*)/.exec(n);a.push({type:1,index:s,name:t[2],strings:e,ctor:"."===t[1]?Et:"?"===t[1]?xt:"@"===t[1]?Ct:_t})}else a.push({type:6,index:s})}for(const t of e)r.removeAttribute(t)}if(ct.test(r.tagName)){const e=r.textContent.split(Je),t=e.length-1;if(t>0){r.textContent=ze?ze.emptyScript:"";for(let n=0;n<t;n++)r.append(e[n],Ze()),mt.nextNode(),a.push({type:2,index:++s});r.append(e[t],Ze())}}}else if(8===r.nodeType)if(r.data===Ke)a.push({type:2,index:s});else{let e=-1;for(;-1!==(e=r.data.indexOf(Je,e+1));)a.push({type:7,index:s}),e+=Je.length-1}s++}}static createElement(e,t){const n=Ye.createElement("template");return n.innerHTML=e,n}}function wt(e,t,n=e,r){var s,i,o,a;if(t===dt)return t;let l=void 0!==r?null===(s=n._$Co)||void 0===s?void 0:s[r]:n._$Cl;const c=Xe(t)?void 0:t._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(i=null==l?void 0:l._$AO)||void 0===i||i.call(l,!1),void 0===c?l=void 0:(l=new c(e),l._$AT(e,n,r)),void 0!==r?(null!==(o=(a=n)._$Co)&&void 0!==o?o:a._$Co=[])[r]=l:n._$Cl=l),void 0!==l&&(t=wt(e,l._$AS(e,t.values),l,r)),t}class vt{constructor(e,t){this._$AV=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){var t;const{el:{content:n},parts:r}=this._$AD,s=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:Ye).importNode(n,!0);mt.currentNode=s;let i=mt.nextNode(),o=0,a=0,l=r[0];for(;void 0!==l;){if(o===l.index){let t;2===l.type?t=new At(i,i.nextSibling,this,e):1===l.type?t=new l.ctor(i,l.name,l.strings,this,e):6===l.type&&(t=new Nt(i,this,e)),this._$AV.push(t),l=r[++a]}o!==(null==l?void 0:l.index)&&(i=mt.nextNode(),o++)}return mt.currentNode=Ye,s}v(e){let t=0;for(const n of this._$AV)void 0!==n&&(void 0!==n.strings?(n._$AI(e,n,t),t+=n.strings.length-2):n._$AI(e[t])),t++}}class At{constructor(e,t,n,r){var s;this.type=2,this._$AH=pt,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=n,this.options=r,this._$Cp=null===(s=null==r?void 0:r.isConnected)||void 0===s||s}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cp}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===(null==e?void 0:e.nodeType)&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=wt(this,e,t),Xe(e)?e===pt||null==e||""===e?(this._$AH!==pt&&this._$AR(),this._$AH=pt):e!==this._$AH&&e!==dt&&this._(e):void 0!==e._$litType$?this.g(e):void 0!==e.nodeType?this.$(e):tt(e)?this.T(e):this._(e)}k(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}$(e){this._$AH!==e&&(this._$AR(),this._$AH=this.k(e))}_(e){this._$AH!==pt&&Xe(this._$AH)?this._$AA.nextSibling.data=e:this.$(Ye.createTextNode(e)),this._$AH=e}g(e){var t;const{values:n,_$litType$:r}=e,s="number"==typeof r?this._$AC(e):(void 0===r.el&&(r.el=bt.createElement(gt(r.h,r.h[0]),this.options)),r);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===s)this._$AH.v(n);else{const e=new vt(s,this),t=e.u(this.options);e.v(n),this.$(t),this._$AH=e}}_$AC(e){let t=ft.get(e.strings);return void 0===t&&ft.set(e.strings,t=new bt(e)),t}T(e){et(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let n,r=0;for(const s of e)r===t.length?t.push(n=new At(this.k(Ze()),this.k(Ze()),this,this.options)):n=t[r],n._$AI(s),r++;r<t.length&&(this._$AR(n&&n._$AB.nextSibling,r),t.length=r)}_$AR(e=this._$AA.nextSibling,t){var n;for(null===(n=this._$AP)||void 0===n||n.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cp=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class _t{constructor(e,t,n,r,s){this.type=1,this._$AH=pt,this._$AN=void 0,this.element=e,this.name=t,this._$AM=r,this.options=s,n.length>2||""!==n[0]||""!==n[1]?(this._$AH=Array(n.length-1).fill(new String),this.strings=n):this._$AH=pt}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,n,r){const s=this.strings;let i=!1;if(void 0===s)e=wt(this,e,t,0),i=!Xe(e)||e!==this._$AH&&e!==dt,i&&(this._$AH=e);else{const r=e;let o,a;for(e=s[0],o=0;o<s.length-1;o++)a=wt(this,r[n+o],t,o),a===dt&&(a=this._$AH[o]),i||(i=!Xe(a)||a!==this._$AH[o]),a===pt?e=pt:e!==pt&&(e+=(null!=a?a:"")+s[o+1]),this._$AH[o]=a}i&&!r&&this.j(e)}j(e){e===pt?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class Et extends _t{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===pt?void 0:e}}const kt=ze?ze.emptyScript:"";class xt extends _t{constructor(){super(...arguments),this.type=4}j(e){e&&e!==pt?this.element.setAttribute(this.name,kt):this.element.removeAttribute(this.name)}}class Ct extends _t{constructor(e,t,n,r,s){super(e,t,n,r,s),this.type=5}_$AI(e,t=this){var n;if((e=null!==(n=wt(this,e,t,0))&&void 0!==n?n:pt)===dt)return;const r=this._$AH,s=e===pt&&r!==pt||e.capture!==r.capture||e.once!==r.once||e.passive!==r.passive,i=e!==pt&&(r===pt||s);s&&this.element.removeEventListener(this.name,this,r),i&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,n;"function"==typeof this._$AH?this._$AH.call(null!==(n=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==n?n:this.element,e):this._$AH.handleEvent(e)}}class Nt{constructor(e,t,n){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=n}get _$AU(){return this._$AM._$AU}_$AI(e){wt(this,e)}}const Pt={O:Qe,P:Je,A:Ke,C:1,M:yt,L:vt,R:tt,D:wt,I:At,V:_t,H:xt,N:Ct,U:Et,F:Nt},Rt=Ge.litHtmlPolyfillSupport;null==Rt||Rt(bt,At),(null!==(He=Ge.litHtmlVersions)&&void 0!==He?He:Ge.litHtmlVersions=[]).push("2.8.0");const Ot=(e,t,n)=>{var r,s;const i=null!==(r=null==n?void 0:n.renderBefore)&&void 0!==r?r:t;let o=i._$litPart$;if(void 0===o){const e=null!==(s=null==n?void 0:n.renderBefore)&&void 0!==s?s:null;i._$litPart$=o=new At(t.insertBefore(Ze(),e),e,void 0,null!=n?n:{})}return o._$AI(e),o};var Bt,St;class Tt extends Ve{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e,t;const n=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=n.firstChild),n}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=Ot(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!1)}render(){return dt}}Tt.finalized=!0,Tt._$litElement$=!0,null===(Bt=globalThis.litElementHydrateSupport)||void 0===Bt||Bt.call(globalThis,{LitElement:Tt});const It=globalThis.litElementPolyfillSupport;function Ft(e="google-chrome"){const t=window.chrome;if("chromium"===e)return t;const n=window.navigator,r=n.vendor,s=void 0!==window.opr,i=n.userAgent.indexOf("Edge")>-1,o=n.userAgent.match("CriOS");return"ios"===e?o:"google-chrome"===e?null!=t&&"Google Inc."===r&&!1===s&&!1===i:void 0}null==It||It({LitElement:Tt}),(null!==(St=globalThis.litElementVersions)&&void 0!==St?St:globalThis.litElementVersions=[]).push("3.3.3");const Lt=/Trident/.test(window.navigator.userAgent),Dt=(Ft(),Ft("ios"),Ft("chromium"),navigator.appVersion.indexOf("Mac"),e=>" "===e.key||"Enter"===e.key),Mt=e=>" "===e.key;class Ut extends(xe(Tt)){static get properties(){return{active:{type:Boolean,reflect:!0},type:{type:String,reflect:!0}}}render(){return ht` <div class="button-content" id="${this._buttonId}"><slot></slot></div> `}static get styles(){return[Be`
        :host {
          position: relative;
          display: inline-flex;
          box-sizing: border-box;
          vertical-align: middle;
          line-height: 24px;
          background: #eee; /* minimal styling to make it recognizable as btn */
          padding: 8px; /* padding to fix with min-height */
          outline: none; /* focus style handled below */
          cursor: default; /* we should always see the default arrow, never a caret */
          /* TODO: remove, native button also allows selection. Could be usability concern... */
          user-select: none;
          -webkit-user-select: none;
          -moz-user-select: none;
          -ms-user-select: none;
        }

        :host::before {
          content: '';

          /* center vertically and horizontally */
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);

          /* Minimum click area to meet [WCAG Success Criterion 2.5.5 Target Size (Enhanced)](https://www.w3.org/TR/WCAG22/#target-size-enhanced) */
          min-height: 44px;
          min-width: 44px;
          width: 100%;
          height: 100%;
        }

        .button-content {
          display: flex;
          align-items: center;
          justify-content: center;
        }

        /* Show focus styles on keyboard focus. */
        :host(:focus:not([disabled])),
        :host(:focus-visible) {
          /* if you extend, please overwrite */
          outline: 2px solid #bde4ff;
        }

        /* Hide focus styles if they're not needed, for example,
        when an element receives focus via the mouse. */
        :host(:focus:not(:focus-visible)) {
          outline: 0;
        }

        :host(:hover) {
          /* if you extend, please overwrite */
          background: #f4f6f7;
        }

        :host(:active), /* keep native :active to render quickly where possible */
        :host([active]) /* use custom [active] to fix IE11 */ {
          /* if you extend, please overwrite */
          background: gray;
        }

        :host([hidden]) {
          display: none;
        }

        :host([disabled]) {
          pointer-events: none;
          /* if you extend, please overwrite */
          background: lightgray;
          color: #adadad;
          fill: #adadad;
        }
      `]}constructor(){super(),this.type="button",this.active=!1,this._buttonId=`button-${Math.random().toString(36).substr(2,10)}`,Lt&&this.updateComplete.then((()=>{this.hasAttribute("aria-labelledby")||this.setAttribute("aria-labelledby",this._buttonId)})),this.__setupEvents()}connectedCallback(){super.connectedCallback(),this.hasAttribute("role")||this.setAttribute("role","button")}updated(e){super.updated(e),e.has("disabled")&&this.setAttribute("aria-disabled",`${this.disabled}`)}__setupEvents(){this.addEventListener("mousedown",this.__mousedownHandler),this.addEventListener("keydown",this.__keydownHandler),this.addEventListener("keyup",this.__keyupHandler)}__mousedownHandler(){this.active=!0;const e=()=>{this.active=!1,document.removeEventListener("mouseup",e),this.removeEventListener("mouseup",e)};document.addEventListener("mouseup",e),this.addEventListener("mouseup",e)}__keydownHandler(e){if(this.active||!Dt(e))return void(Mt(e)&&e.preventDefault());Mt(e)&&e.preventDefault(),this.active=!0;const t=e=>{Dt(e)&&(this.active=!1,document.removeEventListener("keyup",t,!0))};document.addEventListener("keyup",t,!0)}__keyupHandler(e){if(Dt(e)){if(e.target&&e.target!==this)return;this.click()}}}class $t extends Ut{constructor(){super(),this.type="reset",this.__setupDelegationInConstructor(),this.__submitAndResetHelperButton=document.createElement("button"),this.__preventEventLeakage=this.__preventEventLeakage.bind(this)}connectedCallback(){super.connectedCallback(),this.updateComplete.then((()=>{this._setupSubmitAndResetHelperOnConnected()}))}disconnectedCallback(){super.disconnectedCallback(),this._teardownSubmitAndResetHelperOnDisconnected()}__preventEventLeakage(e){e.target===this.__submitAndResetHelperButton&&e.stopImmediatePropagation()}_setupSubmitAndResetHelperOnConnected(){this.appendChild(this.__submitAndResetHelperButton),this._form=this.__submitAndResetHelperButton.form,this.removeChild(this.__submitAndResetHelperButton),this._form&&this._form.addEventListener("click",this.__preventEventLeakage)}_teardownSubmitAndResetHelperOnDisconnected(){this._form&&this._form.removeEventListener("click",this.__preventEventLeakage)}async __clickDelegationHandler(e){this._form||await this.updateComplete,"submit"!==this.type&&"reset"!==this.type||e.target!==this||!this._form||(this.__submitAndResetHelperButton.type=this.type,this._form.appendChild(this.__submitAndResetHelperButton),this.__submitAndResetHelperButton.click(),this._form.removeChild(this.__submitAndResetHelperButton))}__setupDelegationInConstructor(){this.addEventListener("click",this.__clickDelegationHandler,!0)}}const jt=new WeakMap;class Vt extends $t{get _nativeButtonNode(){return jt.get(this._form)?.helper||null}constructor(){super(),this.type="submit",this.__implicitSubmitHelperButton=null}_setupSubmitAndResetHelperOnConnected(){if(super._setupSubmitAndResetHelperOnConnected(),!this._form||"submit"!==this.type)return;const e=this._form;if(!jt.get(this._form)){const t=function(){const e=document.createElement("button");return e.tabIndex=-1,e.type="submit",e.setAttribute("aria-hidden","true"),e.style.cssText="\n    position: absolute;\n    top: 0;\n    left: 0;\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    overflow: hidden;\n    white-space: nowrap;\n    height: 1px;\n    width: 1px;\n    padding: 0; /* reset default agent styles */\n    border: 0; /* reset default agent styles */\n  ",e}(),n=document.createElement("div");n.appendChild(t),jt.set(this._form,{lionButtons:new Set,helper:t,observer:new MutationObserver((()=>{e.appendChild(n)}))}),e.appendChild(n),jt.get(e)?.observer.observe(n,{childList:!0})}jt.get(e)?.lionButtons.add(this)}_teardownSubmitAndResetHelperOnDisconnected(){if(super._teardownSubmitAndResetHelperOnDisconnected(),this._form){const e=jt.get(this._form);e&&(e.lionButtons.delete(this),e.lionButtons.size||(this._form.contains(e.helper)&&e.helper.remove(),jt.get(this._form)?.observer.disconnect(),jt.delete(this._form)))}}}var Ht=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};const Gt=[l`
        :host(:hover) {
            background-color: var(--highlighted-light-color);
            color: var(--background-light-color);
        }

        :host(:active), :host([active]) {
            background-color: var(--highlighted-dark-color);
            color: var(--foreground-color);
        }

        :host {
            justify-content: center;
            align-items: center;
            border-radius: 5px;
        }
    `,function(e=""){return l`
        :host {
            background-color: var(--highlighted${a(e)}-color);
            color: var(--foreground${a(e)}-color);
        }
    `}()];let zt=class extends Ut{static get styles(){return[...super.styles,...Gt]}};zt.formAssociated=!0,zt=Ht([pe("kana-button")],zt);let qt=class extends Vt{constructor(){super()}static get styles(){return[...super.styles,...Gt]}};qt.formAssociated=!0,qt=Ht([pe("kana-button-submit")],qt);var Qt=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let Jt=class extends he{static get styles(){return[l`
                :host {
                    font-family: 'Material Icons';
                    font-weight: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: normal;
                    text-transform: none;
                    display: inline-block;
                    white-space: nowrap;
                    word-wrap: normal;
                    direction: ltr;
                }
            `]}render(){return Q`
            <span style="${this.size?`font-size: ${this.size}`:K}">
                <slot></slot>
            </span>
        `}};Qt([ge({type:String})],Jt.prototype,"size",void 0),Jt=Qt([pe("kana-icon")],Jt);const Kt=9,Wt=95,Yt=45,Zt=5;function Xt(e){return e.split("").reduce(((e,t)=>(e^t.charCodeAt(0))*-Zt),Zt)>>>2}function en(e="",t=Wt,n=Yt,r=Xt){const s=r(e),i=s%Kt*(360/Kt);return[...Array(e?25:0)].reduce(((e,t,n)=>s&1<<n%15?e+`<rect x="${n>14?7-~~(n/5):~~(n/5)}" y="${n%5}" width="1" height="1"/>`:e),`<svg viewBox="-1.5 -1.5 8 8" xmlns="http://www.w3.org/2000/svg" fill="hsl(${i} ${t}% ${n}%)">`)+"</svg>"}HTMLElement;var tn=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let nn=class extends he{static get styles(){return l`
            img {
                width: auto;
                height: 100%;
            }
        `}constructor(){super()}render(){return Q`
            <img src="${rn(this.hash)}"/>
        `}};function rn(e){return`data:image/svg+xml;utf8,${encodeURIComponent(en(e||""))}`}tn([ge({type:String})],nn.prototype,"hash",void 0),nn=tn([pe("identicon-img")],nn);var sn=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let on=class extends he{constructor(){super(),this.address="",this.abridged=!1,this.clipboard=!1,this.tooltip=!1}static get styles(){return l`
            :host {
                display: flex;
                align-items: center;
                position: relative;
            }

            .wallet-address {
                display: inline-block;
                font-family: monospace;
            }

            kana-icon {
                margin-left: 8px;
                cursor: pointer;
            }

            .tooltip {
                position: absolute;
                right: 0;
                bottom: 100%;
                transform: translateY(5px);
                background-color: #555;
                color: white;
                text-align: center;
                border-radius: 6px;
                padding: 5px;
                z-index: 1;
                opacity: 0;
                transition: opacity 0.3s;
            }
          
            .tooltip.show {
                opacity: 1;
            }
        `}async copyToClipboard(){try{await navigator.clipboard.writeText(this.address),this.showTooltip(),console.log("Text copied to clipboard")}catch(e){console.error("Failed to copy text: ",e)}}showTooltip(){this.tooltip=!0,setTimeout((()=>{this.tooltip=!1}),1e3)}render(){return Q`
            <span class="wallet-address">
                ${this.abridged?`${this.address.slice(0,7)}...${this.address.slice(-5)}`:this.address}
            </span>
            ${this.clipboard?Q`
                    <kana-icon 
                        @click=${this.copyToClipboard}
                        size="inherit"
                    >
                        content_copy
                    </kana-icon>
                    <div class="tooltip ${this.tooltip?"show":""}">
                        Copied!
                    </div>
                `:""}
        `}};sn([ge({type:String})],on.prototype,"address",void 0),sn([ge({type:Boolean})],on.prototype,"abridged",void 0),sn([ge({type:Boolean})],on.prototype,"clipboard",void 0),sn([ge({type:Boolean})],on.prototype,"tooltip",void 0),on=sn([pe("evm-address")],on);const an=e=>e??K;var ln=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let cn=class extends he{constructor(e){super(),e&&(this.name=e.name||this.name,this.description=e.description||this.description,this.images=e.images||this.images||[],this.button=e.button||this.button,this.address=e.address)}static get styles(){return[l`
                :host {
                    display: block;
                    background-color: var(--foreground-color);
                    border-radius: 8px;
                    padding: 1rem;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                    width: 270px;
                    height: 370px;
                    margin-bottom: 1rem;
                }

                .title-row {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }

                .description {
                    height: 4rem;
                    max-width: 100%;
                    overflow: scroll;
                    overflow-wrap: break-word;
                    position: relative;
                }

                .description::after {
                    content: "";
                    position: absolute;
                    bottom: 0;
                    left: 0;
                    right: 0;
                    height: 2rem;
                    background-image: linear-gradient(to top, var(--foreground-color), transparent);
                }

                .images {
                    display: flex;
                    flex-wrap: wrap;
                    gap: 1rem;
                    margin-top: 1rem;
                    margin-bottom: 1rem;
                    height: 128px;
                    justify-content: center;
                }

                identicon-img {
                    height: 100%;
                    border-radius: 8px;
                    object-fit: cover;
                }

                kana-button {
                    display: block;
                    margin-top: 1rem;
                }

                a {
                    text-decoration: none;
                }

				.project-link {
					text-decoration: none;
					color: inherit;
				}

                evm-address {
                    width: 100%;
                    margin-top: 15px;
                    justify-content: center;
                    font-size: 0.9rem;
                }
            `,Ae()]}render(){return Q`
            <div class="title-row">
                <h2>${this.name}</h2>
		    ${""}
            </div>
            <div class="description">
                ${this.description}
            </div>
            <div class="images">
                <identicon-img hash="${an(this.address)}">
                </identicon-img>
            </div>
            <a href="${an(this.button.link)}">
                <kana-button>
                    ${this.button.text}
                </kana-button>
            </a>
            ${this.address?Q`
                    <evm-address address="${an(this.address)}" 
                        abridged 
                        clipboard
                    >
                    </evm-address>`:""}
        `}};ln([ge({type:String})],cn.prototype,"name",void 0),ln([ge({type:String})],cn.prototype,"description",void 0),ln([ge({type:Array})],cn.prototype,"images",void 0),ln([ge()],cn.prototype,"button",void 0),ln([ge({type:String})],cn.prototype,"address",void 0),cn=ln([pe("kana-card")],cn);var un=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let hn=class extends he{constructor(){super(),this.size="8rem"}static get styles(){return l`
      :host {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        flex: 1;
        z-index: 1;
      }

      .loader {
        display: inline-block;
        animation: rotation 1.5s linear infinite;
      }

      @keyframes rotation {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(359deg);
        }
      }
    `}render(){return Q`
      <kana-icon class="loader" style="font-size: ${this.size}">
        sync
      </kana-icon>
    `}};un([ge({type:String})],hn.prototype,"size",void 0),hn=un([pe("loading-icon")],hn);const dn="6.11.1";function pn(e,t,n){const r=t.split("|").map((e=>e.trim()));for(let n=0;n<r.length;n++)switch(t){case"any":return;case"bigint":case"boolean":case"number":case"string":if(typeof e===t)return}const s=new Error(`invalid value for type ${t}`);throw s.code="INVALID_ARGUMENT",s.argument=`value.${n}`,s.value=e,s}async function fn(e){const t=Object.keys(e),n=await Promise.all(t.map((t=>Promise.resolve(e[t]))));return n.reduce(((e,n,r)=>(e[t[r]]=n,e)),{})}function mn(e,t,n){for(let r in t){let s=t[r];const i=n?n[r]:null;i&&pn(s,i,r),Object.defineProperty(e,r,{enumerable:!0,value:s,writable:!1})}}function gn(e){if(null==e)return"null";if(Array.isArray(e))return"[ "+e.map(gn).join(", ")+" ]";if(e instanceof Uint8Array){const t="0123456789abcdef";let n="0x";for(let r=0;r<e.length;r++)n+=t[e[r]>>4],n+=t[15&e[r]];return n}if("object"==typeof e&&"function"==typeof e.toJSON)return gn(e.toJSON());switch(typeof e){case"boolean":case"symbol":case"number":return e.toString();case"bigint":return BigInt(e).toString();case"string":return JSON.stringify(e);case"object":{const t=Object.keys(e);return t.sort(),"{ "+t.map((t=>`${gn(t)}: ${gn(e[t])}`)).join(", ")+" }"}}return"[ COULD NOT SERIALIZE ]"}function yn(e,t){return e&&e.code===t}function bn(e){return yn(e,"CALL_EXCEPTION")}function wn(e,t,n){let r,s=e;{const r=[];if(n){if("message"in n||"code"in n||"name"in n)throw new Error(`value will overwrite populated values: ${gn(n)}`);for(const e in n){if("shortMessage"===e)continue;const t=n[e];r.push(e+"="+gn(t))}}r.push(`code=${t}`),r.push(`version=${dn}`),r.length&&(e+=" ("+r.join(", ")+")")}switch(t){case"INVALID_ARGUMENT":r=new TypeError(e);break;case"NUMERIC_FAULT":case"BUFFER_OVERRUN":r=new RangeError(e);break;default:r=new Error(e)}return mn(r,{code:t}),n&&Object.assign(r,n),null==r.shortMessage&&mn(r,{shortMessage:s}),r}function vn(e,t,n,r){if(!e)throw wn(t,n,r)}function An(e,t,n,r){vn(e,t,"INVALID_ARGUMENT",{argument:n,value:r})}function _n(e,t,n){null==n&&(n=""),n&&(n=": "+n),vn(e>=t,"missing arguemnt"+n,"MISSING_ARGUMENT",{count:e,expectedCount:t}),vn(e<=t,"too many arguments"+n,"UNEXPECTED_ARGUMENT",{count:e,expectedCount:t})}const En=["NFD","NFC","NFKD","NFKC"].reduce(((e,t)=>{try{if("test"!=="test".normalize(t))throw new Error("bad");if("NFD"===t){if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken")}e.push(t)}catch(e){}return e}),[]);function kn(e,t,n){if(null==n&&(n=""),e!==t){let e=n,t="new";n&&(e+=".",t+=" "+n),vn(!1,`private constructor; use ${e}from* methods`,"UNSUPPORTED_OPERATION",{operation:t})}}function xn(e,t,n){if(e instanceof Uint8Array)return n?new Uint8Array(e):e;if("string"==typeof e&&e.match(/^0x([0-9a-f][0-9a-f])*$/i)){const t=new Uint8Array((e.length-2)/2);let n=2;for(let r=0;r<t.length;r++)t[r]=parseInt(e.substring(n,n+2),16),n+=2;return t}An(!1,"invalid BytesLike value",t||"value",e)}function Cn(e,t){return xn(e,t,!1)}function Nn(e,t){return xn(e,t,!0)}function Pn(e,t){return!("string"!=typeof e||!e.match(/^0x[0-9A-Fa-f]*$/)||"number"==typeof t&&e.length!==2+2*t||!0===t&&e.length%2!=0)}const Rn="0123456789abcdef";function On(e){const t=Cn(e);let n="0x";for(let e=0;e<t.length;e++){const r=t[e];n+=Rn[(240&r)>>4]+Rn[15&r]}return n}function Bn(e){return"0x"+e.map((e=>On(e).substring(2))).join("")}function Sn(e){return Pn(e,!0)?(e.length-2)/2:Cn(e).length}function Tn(e,t,n){const r=Cn(e);return null!=n&&n>r.length&&vn(!1,"cannot slice beyond data bounds","BUFFER_OVERRUN",{buffer:r,length:r.length,offset:n}),On(r.slice(null==t?0:t,null==n?r.length:n))}function In(e,t,n){const r=Cn(e);vn(t>=r.length,"padding exceeds data length","BUFFER_OVERRUN",{buffer:new Uint8Array(r),length:t,offset:t+1});const s=new Uint8Array(t);return s.fill(0),n?s.set(r,t-r.length):s.set(r,0),On(s)}function Fn(e,t){return In(e,t,!0)}const Ln=BigInt(0),Dn=BigInt(1),Mn=9007199254740991;function Un(e,t){let n=jn(e,"value");const r=BigInt(zn(t,"width")),s=Dn<<r-Dn;return n<Ln?(n=-n,vn(n<=s,"too low","NUMERIC_FAULT",{operation:"toTwos",fault:"overflow",value:e}),(~n&(Dn<<r)-Dn)+Dn):(vn(n<s,"too high","NUMERIC_FAULT",{operation:"toTwos",fault:"overflow",value:e}),n)}function $n(e,t){const n=Vn(e,"value"),r=BigInt(zn(t,"bits"));return n&(Dn<<r)-Dn}function jn(e,t){switch(typeof e){case"bigint":return e;case"number":return An(Number.isInteger(e),"underflow",t||"value",e),An(e>=-Mn&&e<=Mn,"overflow",t||"value",e),BigInt(e);case"string":try{if(""===e)throw new Error("empty string");return"-"===e[0]&&"-"!==e[1]?-BigInt(e.substring(1)):BigInt(e)}catch(n){An(!1,`invalid BigNumberish string: ${n.message}`,t||"value",e)}}An(!1,"invalid BigNumberish value",t||"value",e)}function Vn(e,t){const n=jn(e,t);return vn(n>=Ln,"unsigned value cannot be negative","NUMERIC_FAULT",{fault:"overflow",operation:"getUint",value:e}),n}const Hn="0123456789abcdef";function Gn(e){if(e instanceof Uint8Array){let t="0x0";for(const n of e)t+=Hn[n>>4],t+=Hn[15&n];return BigInt(t)}return jn(e)}function zn(e,t){switch(typeof e){case"bigint":return An(e>=-Mn&&e<=Mn,"overflow",t||"value",e),Number(e);case"number":return An(Number.isInteger(e),"underflow",t||"value",e),An(e>=-Mn&&e<=Mn,"overflow",t||"value",e),e;case"string":try{if(""===e)throw new Error("empty string");return zn(BigInt(e),t)}catch(n){An(!1,`invalid numeric string: ${n.message}`,t||"value",e)}}An(!1,"invalid numeric value",t||"value",e)}function qn(e,t){let n=Vn(e,"value").toString(16);if(null==t)n.length%2&&(n="0"+n);else{const r=zn(t,"width");for(vn(2*r>=n.length,`value exceeds width (${r} bytes)`,"NUMERIC_FAULT",{operation:"toBeHex",fault:"overflow",value:e});n.length<2*r;)n="0"+n}return"0x"+n}function Qn(e){const t=Vn(e,"value");if(t===Ln)return new Uint8Array([]);let n=t.toString(16);n.length%2&&(n="0"+n);const r=new Uint8Array(n.length/2);for(let e=0;e<r.length;e++){const t=2*e;r[e]=parseInt(n.substring(t,t+2),16)}return r}function Jn(e){let t=On(function(e){return Pn(e,!0)||e instanceof Uint8Array}(e)?e:Qn(e)).substring(2);for(;t.startsWith("0");)t=t.substring(1);return""===t&&(t="0"),"0x"+t}const Kn=32,Wn=new Uint8Array(Kn),Yn=["then"],Zn={};function Xn(e,t){const n=new Error(`deferred error during ABI decoding triggered accessing ${e}`);throw n.error=t,n}class er extends Array{#e;constructor(...e){const t=e[0];let n=e[1],r=(e[2]||[]).slice(),s=!0;t!==Zn&&(n=e,r=[],s=!1),super(n.length),n.forEach(((e,t)=>{this[t]=e}));const i=r.reduce(((e,t)=>("string"==typeof t&&e.set(t,(e.get(t)||0)+1),e)),new Map);if(this.#e=Object.freeze(n.map(((e,t)=>{const n=r[t];return null!=n&&1===i.get(n)?n:null}))),s)return Object.freeze(this),new Proxy(this,{get:(e,t,n)=>{if("string"==typeof t){if(t.match(/^[0-9]+$/)){const n=zn(t,"%index");if(n<0||n>=this.length)throw new RangeError("out of result range");const r=e[n];return r instanceof Error&&Xn(`index ${n}`,r),r}if(Yn.indexOf(t)>=0)return Reflect.get(e,t,n);const r=e[t];if(r instanceof Function)return function(...t){return r.apply(this===n?e:this,t)};if(!(t in e))return e.getValue.apply(this===n?e:this,[t])}return Reflect.get(e,t,n)}})}toArray(){const e=[];return this.forEach(((t,n)=>{t instanceof Error&&Xn(`index ${n}`,t),e.push(t)})),e}toObject(){return this.#e.reduce(((e,t,n)=>(vn(null!=t,"value at index ${ index } unnamed","UNSUPPORTED_OPERATION",{operation:"toObject()"}),t in e||(e[t]=this.getValue(t)),e)),{})}slice(e,t){null==e&&(e=0),e<0&&(e+=this.length)<0&&(e=0),null==t&&(t=this.length),t<0&&(t+=this.length)<0&&(t=0),t>this.length&&(t=this.length);const n=[],r=[];for(let s=e;s<t;s++)n.push(this[s]),r.push(this.#e[s]);return new er(Zn,n,r)}filter(e,t){const n=[],r=[];for(let s=0;s<this.length;s++){const i=this[s];i instanceof Error&&Xn(`index ${s}`,i),e.call(t,i,s,this)&&(n.push(i),r.push(this.#e[s]))}return new er(Zn,n,r)}map(e,t){const n=[];for(let r=0;r<this.length;r++){const s=this[r];s instanceof Error&&Xn(`index ${r}`,s),n.push(e.call(t,s,r,this))}return n}getValue(e){const t=this.#e.indexOf(e);if(-1===t)return;const n=this[t];return n instanceof Error&&Xn(`property ${JSON.stringify(e)}`,n.error),n}static fromItems(e,t){return new er(Zn,e,t)}}function tr(e){let t=Qn(e);return vn(t.length<=Kn,"value out-of-bounds","BUFFER_OVERRUN",{buffer:t,length:Kn,offset:t.length}),t.length!==Kn&&(t=Nn(Bn([Wn.slice(t.length%Kn),t]))),t}class nr{name;type;localName;dynamic;constructor(e,t,n,r){mn(this,{name:e,type:t,localName:n,dynamic:r},{name:"string",type:"string",localName:"string",dynamic:"boolean"})}_throwError(e,t){An(!1,e,this.localName,t)}}class rr{#t;#n;constructor(){this.#t=[],this.#n=0}get data(){return Bn(this.#t)}get length(){return this.#n}#r(e){return this.#t.push(e),this.#n+=e.length,e.length}appendWriter(e){return this.#r(Nn(e.data))}writeBytes(e){let t=Nn(e);const n=t.length%Kn;return n&&(t=Nn(Bn([t,Wn.slice(n)]))),this.#r(t)}writeValue(e){return this.#r(tr(e))}writeUpdatableValue(){const e=this.#t.length;return this.#t.push(Wn),this.#n+=Kn,t=>{this.#t[e]=tr(t)}}}class sr{allowLoose;#t;#s;#i;#o;#a;constructor(e,t,n){mn(this,{allowLoose:!!t}),this.#t=Nn(e),this.#i=0,this.#o=null,this.#a=null!=n?n:1024,this.#s=0}get data(){return On(this.#t)}get dataLength(){return this.#t.length}get consumed(){return this.#s}get bytes(){return new Uint8Array(this.#t)}#l(e){if(this.#o)return this.#o.#l(e);this.#i+=e,vn(this.#a<1||this.#i<=this.#a*this.dataLength,`compressed ABI data exceeds inflation ratio of ${this.#a} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`,"BUFFER_OVERRUN",{buffer:Nn(this.#t),offset:this.#s,length:e,info:{bytesRead:this.#i,dataLength:this.dataLength}})}#c(e,t,n){let r=Math.ceil(t/Kn)*Kn;return this.#s+r>this.#t.length&&(this.allowLoose&&n&&this.#s+t<=this.#t.length?r=t:vn(!1,"data out-of-bounds","BUFFER_OVERRUN",{buffer:Nn(this.#t),length:this.#t.length,offset:this.#s+r})),this.#t.slice(this.#s,this.#s+r)}subReader(e){const t=new sr(this.#t.slice(this.#s+e),this.allowLoose,this.#a);return t.#o=this,t}readBytes(e,t){let n=this.#c(0,e,!!t);return this.#l(e),this.#s+=n.length,n.slice(0,e)}readValue(){return Gn(this.readBytes(Kn))}readIndex(){return zn(Gn(this.readBytes(Kn)))}}function ir(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}function or(e,...t){if(!(e instanceof Uint8Array))throw new Error("Expected Uint8Array");if(t.length>0&&!t.includes(e.length))throw new Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`)}function ar(e,t=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(t&&e.finished)throw new Error("Hash#digest() has already been called")}function lr(e,t){or(e);const n=t.outputLen;if(e.length<n)throw new Error(`digestInto() expects output buffer of length at least ${n}`)}const cr=BigInt(2**32-1),ur=BigInt(32);function hr(e,t=!1){return t?{h:Number(e&cr),l:Number(e>>ur&cr)}:{h:0|Number(e>>ur&cr),l:0|Number(e&cr)}}function dr(e,t=!1){let n=new Uint32Array(e.length),r=new Uint32Array(e.length);for(let s=0;s<e.length;s++){const{h:i,l:o}=hr(e[s],t);[n[s],r[s]]=[i,o]}return[n,r]}const pr="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0,fr=e=>e instanceof Uint8Array,mr=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),gr=(e,t)=>e<<32-t|e>>>t;if(68!==new Uint8Array(new Uint32Array([287454020]).buffer)[0])throw new Error("Non little-endian hardware is not supported");function yr(e){if("string"==typeof e&&(e=function(e){if("string"!=typeof e)throw new Error("utf8ToBytes expected string, got "+typeof e);return new Uint8Array((new TextEncoder).encode(e))}(e)),!fr(e))throw new Error("expected Uint8Array, got "+typeof e);return e}class br{clone(){return this._cloneInto()}}function wr(e){const t=t=>e().update(yr(t)).digest(),n=e();return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=()=>e(),t}function vr(e=32){if(pr&&"function"==typeof pr.getRandomValues)return pr.getRandomValues(new Uint8Array(e));throw new Error("crypto.getRandomValues must be defined")}const[Ar,_r,Er]=[[],[],[]],kr=BigInt(0),xr=BigInt(1),Cr=BigInt(2),Nr=BigInt(7),Pr=BigInt(256),Rr=BigInt(113);for(let e=0,t=xr,n=1,r=0;e<24;e++){[n,r]=[r,(2*n+3*r)%5],Ar.push(2*(5*r+n)),_r.push((e+1)*(e+2)/2%64);let s=kr;for(let e=0;e<7;e++)t=(t<<xr^(t>>Nr)*Rr)%Pr,t&Cr&&(s^=xr<<(xr<<BigInt(e))-xr);Er.push(s)}const[Or,Br]=dr(Er,!0),Sr=(e,t,n)=>n>32?((e,t,n)=>t<<n-32|e>>>64-n)(e,t,n):((e,t,n)=>e<<n|t>>>32-n)(e,t,n),Tr=(e,t,n)=>n>32?((e,t,n)=>e<<n-32|t>>>64-n)(e,t,n):((e,t,n)=>t<<n|e>>>32-n)(e,t,n);class Ir extends br{constructor(e,t,n,r=!1,s=24){if(super(),this.blockLen=e,this.suffix=t,this.outputLen=n,this.enableXOF=r,this.rounds=s,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,ir(n),0>=this.blockLen||this.blockLen>=200)throw new Error("Sha3 supports only keccak-f1600 function");var i;this.state=new Uint8Array(200),this.state32=(i=this.state,new Uint32Array(i.buffer,i.byteOffset,Math.floor(i.byteLength/4)))}keccak(){!function(e,t=24){const n=new Uint32Array(10);for(let r=24-t;r<24;r++){for(let t=0;t<10;t++)n[t]=e[t]^e[t+10]^e[t+20]^e[t+30]^e[t+40];for(let t=0;t<10;t+=2){const r=(t+8)%10,s=(t+2)%10,i=n[s],o=n[s+1],a=Sr(i,o,1)^n[r],l=Tr(i,o,1)^n[r+1];for(let n=0;n<50;n+=10)e[t+n]^=a,e[t+n+1]^=l}let t=e[2],s=e[3];for(let n=0;n<24;n++){const r=_r[n],i=Sr(t,s,r),o=Tr(t,s,r),a=Ar[n];t=e[a],s=e[a+1],e[a]=i,e[a+1]=o}for(let t=0;t<50;t+=10){for(let r=0;r<10;r++)n[r]=e[t+r];for(let r=0;r<10;r++)e[t+r]^=~n[(r+2)%10]&n[(r+4)%10]}e[0]^=Or[r],e[1]^=Br[r]}n.fill(0)}(this.state32,this.rounds),this.posOut=0,this.pos=0}update(e){ar(this);const{blockLen:t,state:n}=this,r=(e=yr(e)).length;for(let s=0;s<r;){const i=Math.min(t-this.pos,r-s);for(let t=0;t<i;t++)n[this.pos++]^=e[s++];this.pos===t&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;const{state:e,suffix:t,pos:n,blockLen:r}=this;e[n]^=t,0!=(128&t)&&n===r-1&&this.keccak(),e[r-1]^=128,this.keccak()}writeInto(e){ar(this,!1),or(e),this.finish();const t=this.state,{blockLen:n}=this;for(let r=0,s=e.length;r<s;){this.posOut>=n&&this.keccak();const i=Math.min(n-this.posOut,s-r);e.set(t.subarray(this.posOut,this.posOut+i),r),this.posOut+=i,r+=i}return e}xofInto(e){if(!this.enableXOF)throw new Error("XOF is not possible for this instance");return this.writeInto(e)}xof(e){return ir(e),this.xofInto(new Uint8Array(e))}digestInto(e){if(lr(e,this),this.finished)throw new Error("digest() was already called");return this.writeInto(e),this.destroy(),e}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(e){const{blockLen:t,suffix:n,outputLen:r,rounds:s,enableXOF:i}=this;return e||(e=new Ir(t,n,r,i,s)),e.state32.set(this.state32),e.pos=this.pos,e.posOut=this.posOut,e.finished=this.finished,e.rounds=s,e.suffix=n,e.outputLen=r,e.enableXOF=i,e.destroyed=this.destroyed,e}}const Fr=((e,t,n)=>wr((()=>new Ir(t,e,n))))(1,136,32);let Lr=!1;const Dr=function(e){return Fr(e)};let Mr=Dr;function Ur(e){const t=Cn(e,"data");return On(Mr(t))}Ur._=Dr,Ur.lock=function(){Lr=!0},Ur.register=function(e){if(Lr)throw new TypeError("keccak256 is locked");Mr=e},Object.freeze(Ur);const $r=BigInt(0),jr=BigInt(36);function Vr(e){const t=(e=e.toLowerCase()).substring(2).split(""),n=new Uint8Array(40);for(let e=0;e<40;e++)n[e]=t[e].charCodeAt(0);const r=Cn(Ur(n));for(let e=0;e<40;e+=2)r[e>>1]>>4>=8&&(t[e]=t[e].toUpperCase()),(15&r[e>>1])>=8&&(t[e+1]=t[e+1].toUpperCase());return"0x"+t.join("")}const Hr={};for(let e=0;e<10;e++)Hr[String(e)]=String(e);for(let e=0;e<26;e++)Hr[String.fromCharCode(65+e)]=String(10+e);const Gr=15;const zr=function(){const e={};for(let t=0;t<36;t++)e["0123456789abcdefghijklmnopqrstuvwxyz"[t]]=BigInt(t);return e}();function qr(e){if(An("string"==typeof e,"invalid address","address",e),e.match(/^(0x)?[0-9a-fA-F]{40}$/)){e.startsWith("0x")||(e="0x"+e);const t=Vr(e);return An(!e.match(/([A-F].*[a-f])|([a-f].*[A-F])/)||t===e,"bad address checksum","address",e),t}if(e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){An(e.substring(2,4)===function(e){let t=(e=(e=e.toUpperCase()).substring(4)+e.substring(0,2)+"00").split("").map((e=>Hr[e])).join("");for(;t.length>=Gr;){let e=t.substring(0,Gr);t=parseInt(e,10)%97+t.substring(e.length)}let n=String(98-parseInt(t,10)%97);for(;n.length<2;)n="0"+n;return n}(e),"bad icap checksum","address",e);let t=function(e){e=e.toLowerCase();let t=$r;for(let n=0;n<e.length;n++)t=t*jr+zr[e[n]];return t}(e.substring(4)).toString(16);for(;t.length<40;)t="0"+t;return Vr("0x"+t)}An(!1,"invalid address","address",e)}const Qr={};function Jr(e,t){let n=!1;return t<0&&(n=!0,t*=-1),new Yr(Qr,`${n?"":"u"}int${t}`,e,{signed:n,width:t})}function Kr(e,t){return new Yr(Qr,`bytes${t||""}`,e,{size:t})}const Wr=Symbol.for("_ethers_typed");class Yr{type;value;#u;_typedSymbol;constructor(e,t,n,r){null==r&&(r=null),kn(Qr,e,"Typed"),mn(this,{_typedSymbol:Wr,type:t,value:n}),this.#u=r,this.format()}format(){if("array"===this.type)throw new Error("");if("dynamicArray"===this.type)throw new Error("");return"tuple"===this.type?`tuple(${this.value.map((e=>e.format())).join(",")})`:this.type}defaultValue(){return 0}minValue(){return 0}maxValue(){return 0}isBigInt(){return!!this.type.match(/^u?int[0-9]+$/)}isData(){return this.type.startsWith("bytes")}isString(){return"string"===this.type}get tupleName(){if("tuple"!==this.type)throw TypeError("not a tuple");return this.#u}get arrayLength(){if("array"!==this.type)throw TypeError("not an array");return!0===this.#u?-1:!1===this.#u?this.value.length:null}static from(e,t){return new Yr(Qr,e,t)}static uint8(e){return Jr(e,8)}static uint16(e){return Jr(e,16)}static uint24(e){return Jr(e,24)}static uint32(e){return Jr(e,32)}static uint40(e){return Jr(e,40)}static uint48(e){return Jr(e,48)}static uint56(e){return Jr(e,56)}static uint64(e){return Jr(e,64)}static uint72(e){return Jr(e,72)}static uint80(e){return Jr(e,80)}static uint88(e){return Jr(e,88)}static uint96(e){return Jr(e,96)}static uint104(e){return Jr(e,104)}static uint112(e){return Jr(e,112)}static uint120(e){return Jr(e,120)}static uint128(e){return Jr(e,128)}static uint136(e){return Jr(e,136)}static uint144(e){return Jr(e,144)}static uint152(e){return Jr(e,152)}static uint160(e){return Jr(e,160)}static uint168(e){return Jr(e,168)}static uint176(e){return Jr(e,176)}static uint184(e){return Jr(e,184)}static uint192(e){return Jr(e,192)}static uint200(e){return Jr(e,200)}static uint208(e){return Jr(e,208)}static uint216(e){return Jr(e,216)}static uint224(e){return Jr(e,224)}static uint232(e){return Jr(e,232)}static uint240(e){return Jr(e,240)}static uint248(e){return Jr(e,248)}static uint256(e){return Jr(e,256)}static uint(e){return Jr(e,256)}static int8(e){return Jr(e,-8)}static int16(e){return Jr(e,-16)}static int24(e){return Jr(e,-24)}static int32(e){return Jr(e,-32)}static int40(e){return Jr(e,-40)}static int48(e){return Jr(e,-48)}static int56(e){return Jr(e,-56)}static int64(e){return Jr(e,-64)}static int72(e){return Jr(e,-72)}static int80(e){return Jr(e,-80)}static int88(e){return Jr(e,-88)}static int96(e){return Jr(e,-96)}static int104(e){return Jr(e,-104)}static int112(e){return Jr(e,-112)}static int120(e){return Jr(e,-120)}static int128(e){return Jr(e,-128)}static int136(e){return Jr(e,-136)}static int144(e){return Jr(e,-144)}static int152(e){return Jr(e,-152)}static int160(e){return Jr(e,-160)}static int168(e){return Jr(e,-168)}static int176(e){return Jr(e,-176)}static int184(e){return Jr(e,-184)}static int192(e){return Jr(e,-192)}static int200(e){return Jr(e,-200)}static int208(e){return Jr(e,-208)}static int216(e){return Jr(e,-216)}static int224(e){return Jr(e,-224)}static int232(e){return Jr(e,-232)}static int240(e){return Jr(e,-240)}static int248(e){return Jr(e,-248)}static int256(e){return Jr(e,-256)}static int(e){return Jr(e,-256)}static bytes1(e){return Kr(e,1)}static bytes2(e){return Kr(e,2)}static bytes3(e){return Kr(e,3)}static bytes4(e){return Kr(e,4)}static bytes5(e){return Kr(e,5)}static bytes6(e){return Kr(e,6)}static bytes7(e){return Kr(e,7)}static bytes8(e){return Kr(e,8)}static bytes9(e){return Kr(e,9)}static bytes10(e){return Kr(e,10)}static bytes11(e){return Kr(e,11)}static bytes12(e){return Kr(e,12)}static bytes13(e){return Kr(e,13)}static bytes14(e){return Kr(e,14)}static bytes15(e){return Kr(e,15)}static bytes16(e){return Kr(e,16)}static bytes17(e){return Kr(e,17)}static bytes18(e){return Kr(e,18)}static bytes19(e){return Kr(e,19)}static bytes20(e){return Kr(e,20)}static bytes21(e){return Kr(e,21)}static bytes22(e){return Kr(e,22)}static bytes23(e){return Kr(e,23)}static bytes24(e){return Kr(e,24)}static bytes25(e){return Kr(e,25)}static bytes26(e){return Kr(e,26)}static bytes27(e){return Kr(e,27)}static bytes28(e){return Kr(e,28)}static bytes29(e){return Kr(e,29)}static bytes30(e){return Kr(e,30)}static bytes31(e){return Kr(e,31)}static bytes32(e){return Kr(e,32)}static address(e){return new Yr(Qr,"address",e)}static bool(e){return new Yr(Qr,"bool",!!e)}static bytes(e){return new Yr(Qr,"bytes",e)}static string(e){return new Yr(Qr,"string",e)}static array(e,t){throw new Error("not implemented yet")}static tuple(e,t){throw new Error("not implemented yet")}static overrides(e){return new Yr(Qr,"overrides",Object.assign({},e))}static isTyped(e){return e&&"object"==typeof e&&"_typedSymbol"in e&&e._typedSymbol===Wr}static dereference(e,t){if(Yr.isTyped(e)){if(e.type!==t)throw new Error(`invalid type: expecetd ${t}, got ${e.type}`);return e.value}return e}}class Zr extends nr{constructor(e){super("address","address",e,!1)}defaultValue(){return"0x0000000000000000000000000000000000000000"}encode(e,t){let n=Yr.dereference(t,"string");try{n=qr(n)}catch(e){return this._throwError(e.message,t)}return e.writeValue(n)}decode(e){return qr(qn(e.readValue(),20))}}class Xr extends nr{coder;constructor(e){super(e.name,e.type,"_",e.dynamic),this.coder=e}defaultValue(){return this.coder.defaultValue()}encode(e,t){return this.coder.encode(e,t)}decode(e){return this.coder.decode(e)}}function es(e,t,n){let r=[];if(Array.isArray(n))r=n;else if(n&&"object"==typeof n){let e={};r=t.map((t=>{const r=t.localName;return vn(r,"cannot encode object for signature with missing names","INVALID_ARGUMENT",{argument:"values",info:{coder:t},value:n}),vn(!e[r],"cannot encode object for signature with duplicate names","INVALID_ARGUMENT",{argument:"values",info:{coder:t},value:n}),e[r]=!0,n[r]}))}else An(!1,"invalid tuple value","tuple",n);An(t.length===r.length,"types/value length mismatch","tuple",n);let s=new rr,i=new rr,o=[];t.forEach(((e,t)=>{let n=r[t];if(e.dynamic){let t=i.length;e.encode(i,n);let r=s.writeUpdatableValue();o.push((e=>{r(e+t)}))}else e.encode(s,n)})),o.forEach((e=>{e(s.length)}));let a=e.appendWriter(s);return a+=e.appendWriter(i),a}function ts(e,t){let n=[],r=[],s=e.subReader(0);return t.forEach((t=>{let i=null;if(t.dynamic){let n=e.readIndex(),r=s.subReader(n);try{i=t.decode(r)}catch(e){if(yn(e,"BUFFER_OVERRUN"))throw e;i=e,i.baseType=t.name,i.name=t.localName,i.type=t.type}}else try{i=t.decode(e)}catch(e){if(yn(e,"BUFFER_OVERRUN"))throw e;i=e,i.baseType=t.name,i.name=t.localName,i.type=t.type}if(null==i)throw new Error("investigate");n.push(i),r.push(t.localName||null)})),er.fromItems(n,r)}class ns extends nr{coder;length;constructor(e,t,n){super("array",e.type+"["+(t>=0?t:"")+"]",n,-1===t||e.dynamic),mn(this,{coder:e,length:t})}defaultValue(){const e=this.coder.defaultValue(),t=[];for(let n=0;n<this.length;n++)t.push(e);return t}encode(e,t){const n=Yr.dereference(t,"array");Array.isArray(n)||this._throwError("expected array value",n);let r=this.length;-1===r&&(r=n.length,e.writeValue(n.length)),_n(n.length,r,"coder array"+(this.localName?" "+this.localName:""));let s=[];for(let e=0;e<n.length;e++)s.push(this.coder);return es(e,s,n)}decode(e){let t=this.length;-1===t&&(t=e.readIndex(),vn(t*Kn<=e.dataLength,"insufficient data length","BUFFER_OVERRUN",{buffer:e.bytes,offset:t*Kn,length:e.dataLength}));let n=[];for(let e=0;e<t;e++)n.push(new Xr(this.coder));return ts(e,n)}}class rs extends nr{constructor(e){super("bool","bool",e,!1)}defaultValue(){return!1}encode(e,t){const n=Yr.dereference(t,"bool");return e.writeValue(n?1:0)}decode(e){return!!e.readValue()}}class ss extends nr{constructor(e,t){super(e,e,t,!0)}defaultValue(){return"0x"}encode(e,t){t=Nn(t);let n=e.writeValue(t.length);return n+=e.writeBytes(t),n}decode(e){return e.readBytes(e.readIndex(),!0)}}class is extends ss{constructor(e){super("bytes",e)}decode(e){return On(super.decode(e))}}class os extends nr{size;constructor(e,t){let n="bytes"+String(e);super(n,n,t,!1),mn(this,{size:e},{size:"number"})}defaultValue(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+2*this.size)}encode(e,t){let n=Nn(Yr.dereference(t,this.type));return n.length!==this.size&&this._throwError("incorrect data length",t),e.writeBytes(n)}decode(e){return On(e.readBytes(this.size))}}const as=new Uint8Array([]);class ls extends nr{constructor(e){super("null","",e,!1)}defaultValue(){return null}encode(e,t){return null!=t&&this._throwError("not null",t),e.writeBytes(as)}decode(e){return e.readBytes(0),null}}const cs=BigInt(0),us=BigInt(1),hs=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");class ds extends nr{size;signed;constructor(e,t,n){const r=(t?"int":"uint")+8*e;super(r,r,n,!1),mn(this,{size:e,signed:t},{size:"number",signed:"boolean"})}defaultValue(){return 0}encode(e,t){let n=jn(Yr.dereference(t,this.type)),r=$n(hs,256);if(this.signed){let e=$n(r,8*this.size-1);(n>e||n<-(e+us))&&this._throwError("value out-of-bounds",t),n=Un(n,256)}else(n<cs||n>$n(r,8*this.size))&&this._throwError("value out-of-bounds",t);return e.writeValue(n)}decode(e){let t=$n(e.readValue(),8*this.size);return this.signed&&(t=function(e,t){const n=Vn(e,"value"),r=BigInt(zn(t,"width"));return vn(n>>r===Ln,"overflow","NUMERIC_FAULT",{operation:"fromTwos",fault:"overflow",value:e}),n>>r-Dn?-((~n&(Dn<<r)-Dn)+Dn):n}(t,8*this.size)),t}}function ps(e,t,n,r,s){if("BAD_PREFIX"===e||"UNEXPECTED_CONTINUE"===e){let e=0;for(let r=t+1;r<n.length&&n[r]>>6==2;r++)e++;return e}return"OVERRUN"===e?n.length-t-1:0}const fs=Object.freeze({error:function(e,t,n,r,s){An(!1,`invalid codepoint at offset ${t}; ${e}`,"bytes",n)},ignore:ps,replace:function(e,t,n,r,s){return"OVERLONG"===e?(An("number"==typeof s,"invalid bad code point for replacement","badCodepoint",s),r.push(s),0):(r.push(65533),ps(e,t,n))}});function ms(e,t){An("string"==typeof e,"invalid string value","str",e),null!=t&&(function(e){vn(En.indexOf(e)>=0,"platform missing String.prototype.normalize","UNSUPPORTED_OPERATION",{operation:"String.prototype.normalize",info:{form:e}})}(t),e=e.normalize(t));let n=[];for(let t=0;t<e.length;t++){const r=e.charCodeAt(t);if(r<128)n.push(r);else if(r<2048)n.push(r>>6|192),n.push(63&r|128);else if(55296==(64512&r)){t++;const s=e.charCodeAt(t);An(t<e.length&&56320==(64512&s),"invalid surrogate pair","str",e);const i=65536+((1023&r)<<10)+(1023&s);n.push(i>>18|240),n.push(i>>12&63|128),n.push(i>>6&63|128),n.push(63&i|128)}else n.push(r>>12|224),n.push(r>>6&63|128),n.push(63&r|128)}return new Uint8Array(n)}function gs(e,t){return function(e,t){null==t&&(t=fs.error);const n=Cn(e,"bytes"),r=[];let s=0;for(;s<n.length;){const e=n[s++];if(e>>7==0){r.push(e);continue}let i=null,o=null;if(192==(224&e))i=1,o=127;else if(224==(240&e))i=2,o=2047;else{if(240!=(248&e)){s+=t(128==(192&e)?"UNEXPECTED_CONTINUE":"BAD_PREFIX",s-1,n,r);continue}i=3,o=65535}if(s-1+i>=n.length){s+=t("OVERRUN",s-1,n,r);continue}let a=e&(1<<8-i-1)-1;for(let e=0;e<i;e++){let e=n[s];if(128!=(192&e)){s+=t("MISSING_CONTINUE",s,n,r),a=null;break}a=a<<6|63&e,s++}null!==a&&(a>1114111?s+=t("OUT_OF_RANGE",s-1-i,n,r,a):a>=55296&&a<=57343?s+=t("UTF16_SURROGATE",s-1-i,n,r,a):a<=o?s+=t("OVERLONG",s-1-i,n,r,a):r.push(a))}return r}(e,t).map((e=>e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10&1023),56320+(1023&e))))).join("")}class ys extends ss{constructor(e){super("string",e)}defaultValue(){return""}encode(e,t){return super.encode(e,ms(Yr.dereference(t,"string")))}decode(e){return gs(super.decode(e))}}class bs extends nr{coders;constructor(e,t){let n=!1;const r=[];e.forEach((e=>{e.dynamic&&(n=!0),r.push(e.type)})),super("tuple","tuple("+r.join(",")+")",t,n),mn(this,{coders:Object.freeze(e.slice())})}defaultValue(){const e=[];this.coders.forEach((t=>{e.push(t.defaultValue())}));const t=this.coders.reduce(((e,t)=>{const n=t.localName;return n&&(e[n]||(e[n]=0),e[n]++),e}),{});return this.coders.forEach(((n,r)=>{let s=n.localName;s&&1===t[s]&&("length"===s&&(s="_length"),null==e[s]&&(e[s]=e[r]))})),Object.freeze(e)}encode(e,t){const n=Yr.dereference(t,"tuple");return es(e,this.coders,n)}decode(e){return ts(e,this.coders)}}function ws(e){return Ur(ms(e))}function vs(e){const t=new Set;return e.forEach((e=>t.add(e))),Object.freeze(t)}const As=vs("external public payable override".split(" ")),_s="constant external internal payable private public pure view override",Es=vs(_s.split(" ")),ks="constructor error event fallback function receive struct",xs=vs(ks.split(" ")),Cs="calldata memory storage payable indexed",Ns=vs(Cs.split(" ")),Ps=vs([ks,Cs,"tuple returns",_s].join(" ").split(" ")),Rs={"(":"OPEN_PAREN",")":"CLOSE_PAREN","[":"OPEN_BRACKET","]":"CLOSE_BRACKET",",":"COMMA","@":"AT"},Os=new RegExp("^(\\s*)"),Bs=new RegExp("^([0-9]+)"),Ss=new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"),Ts=new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"),Is=new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");class Fs{#s;#h;get offset(){return this.#s}get length(){return this.#h.length-this.#s}constructor(e){this.#s=0,this.#h=e.slice()}clone(){return new Fs(this.#h)}reset(){this.#s=0}#d(e=0,t=0){return new Fs(this.#h.slice(e,t).map((t=>Object.freeze(Object.assign({},t,{match:t.match-e,linkBack:t.linkBack-e,linkNext:t.linkNext-e})))))}popKeyword(e){const t=this.peek();if("KEYWORD"!==t.type||!e.has(t.text))throw new Error(`expected keyword ${t.text}`);return this.pop().text}popType(e){if(this.peek().type!==e){const t=this.peek();throw new Error(`expected ${e}; got ${t.type} ${JSON.stringify(t.text)}`)}return this.pop().text}popParen(){const e=this.peek();if("OPEN_PAREN"!==e.type)throw new Error("bad start");const t=this.#d(this.#s+1,e.match+1);return this.#s=e.match+1,t}popParams(){const e=this.peek();if("OPEN_PAREN"!==e.type)throw new Error("bad start");const t=[];for(;this.#s<e.match-1;){const e=this.peek().linkNext;t.push(this.#d(this.#s+1,e)),this.#s=e}return this.#s=e.match+1,t}peek(){if(this.#s>=this.#h.length)throw new Error("out-of-bounds");return this.#h[this.#s]}peekKeyword(e){const t=this.peekType("KEYWORD");return null!=t&&e.has(t)?t:null}peekType(e){if(0===this.length)return null;const t=this.peek();return t.type===e?t.text:null}pop(){const e=this.peek();return this.#s++,e}toString(){const e=[];for(let t=this.#s;t<this.#h.length;t++){const n=this.#h[t];e.push(`${n.type}:${n.text}`)}return`<TokenString ${e.join(" ")}>`}}function Ls(e){const t=[],n=t=>{const n=i<e.length?JSON.stringify(e[i]):"$EOI";throw new Error(`invalid token ${n} at ${i}: ${t}`)};let r=[],s=[],i=0;for(;i<e.length;){let o=e.substring(i),a=o.match(Os);a&&(i+=a[1].length,o=e.substring(i));const l={depth:r.length,linkBack:-1,linkNext:-1,match:-1,type:"",text:"",offset:i,value:-1};t.push(l);let c=Rs[o[0]]||"";if(c){if(l.type=c,l.text=o[0],i++,"OPEN_PAREN"===c)r.push(t.length-1),s.push(t.length-1);else if("CLOSE_PAREN"==c)0===r.length&&n("no matching open bracket"),l.match=r.pop(),t[l.match].match=t.length-1,l.depth--,l.linkBack=s.pop(),t[l.linkBack].linkNext=t.length-1;else if("COMMA"===c)l.linkBack=s.pop(),t[l.linkBack].linkNext=t.length-1,s.push(t.length-1);else if("OPEN_BRACKET"===c)l.type="BRACKET";else if("CLOSE_BRACKET"===c){let e=t.pop().text;if(t.length>0&&"NUMBER"===t[t.length-1].type){const n=t.pop().text;e=n+e,t[t.length-1].value=zn(n)}if(0===t.length||"BRACKET"!==t[t.length-1].type)throw new Error("missing opening bracket");t[t.length-1].text+=e}}else if(a=o.match(Ss),a){if(l.text=a[1],i+=l.text.length,Ps.has(l.text)){l.type="KEYWORD";continue}if(l.text.match(Is)){l.type="TYPE";continue}l.type="ID"}else{if(a=o.match(Bs),!a)throw new Error(`unexpected token ${JSON.stringify(o[0])} at position ${i}`);l.text=a[1],l.type="NUMBER",i+=l.text.length}}return new Fs(t.map((e=>Object.freeze(e))))}function Ds(e,t){let n=[];for(const r in t.keys())e.has(r)&&n.push(r);if(n.length>1)throw new Error(`conflicting types: ${n.join(", ")}`)}function Ms(e,t){if(t.peekKeyword(xs)){const n=t.pop().text;if(n!==e)throw new Error(`expected ${e}, got ${n}`)}return t.popType("ID")}function Us(e,t){const n=new Set;for(;;){const r=e.peekType("KEYWORD");if(null==r||t&&!t.has(r))break;if(e.pop(),n.has(r))throw new Error(`duplicate keywords: ${JSON.stringify(r)}`);n.add(r)}return Object.freeze(n)}function $s(e){let t=Us(e,Es);return Ds(t,vs("constant payable nonpayable".split(" "))),Ds(t,vs("pure view payable nonpayable".split(" "))),t.has("view")?"view":t.has("pure")?"pure":t.has("payable")?"payable":t.has("nonpayable")?"nonpayable":t.has("constant")?"view":"nonpayable"}function js(e,t){return e.popParams().map((e=>ti.from(e,t)))}function Vs(e){if(e.peekType("AT")){if(e.pop(),e.peekType("NUMBER"))return jn(e.pop().text);throw new Error("invalid gas")}return null}function Hs(e){if(e.length)throw new Error(`unexpected tokens at offset ${e.offset}: ${e.toString()}`)}const Gs=new RegExp(/^(.*)\[([0-9]*)\]$/);function zs(e){const t=e.match(Is);if(An(t,"invalid type","type",e),"uint"===e)return"uint256";if("int"===e)return"int256";if(t[2]){const n=parseInt(t[2]);An(0!==n&&n<=32,"invalid bytes length","type",e)}else if(t[3]){const n=parseInt(t[3]);An(0!==n&&n<=256&&n%8==0,"invalid numeric width","type",e)}return e}const qs={},Qs=Symbol.for("_ethers_internal"),Js="_ParamTypeInternal",Ks="_ErrorInternal",Ws="_EventInternal",Ys="_ConstructorInternal",Zs="_FallbackInternal",Xs="_FunctionInternal",ei="_StructInternal";class ti{name;type;baseType;indexed;components;arrayLength;arrayChildren;constructor(e,t,n,r,s,i,o,a){if(kn(e,qs,"ParamType"),Object.defineProperty(this,Qs,{value:Js}),i&&(i=Object.freeze(i.slice())),"array"===r){if(null==o||null==a)throw new Error("")}else if(null!=o||null!=a)throw new Error("");if("tuple"===r){if(null==i)throw new Error("")}else if(null!=i)throw new Error("");mn(this,{name:t,type:n,baseType:r,indexed:s,components:i,arrayLength:o,arrayChildren:a})}format(e){if(null==e&&(e="sighash"),"json"===e){const t=this.name||"";if(this.isArray()){const e=JSON.parse(this.arrayChildren.format("json"));return e.name=t,e.type+=`[${this.arrayLength<0?"":String(this.arrayLength)}]`,JSON.stringify(e)}const n={type:"tuple"===this.baseType?"tuple":this.type,name:t};return"boolean"==typeof this.indexed&&(n.indexed=this.indexed),this.isTuple()&&(n.components=this.components.map((t=>JSON.parse(t.format(e))))),JSON.stringify(n)}let t="";return this.isArray()?(t+=this.arrayChildren.format(e),t+=`[${this.arrayLength<0?"":String(this.arrayLength)}]`):this.isTuple()?t+="("+this.components.map((t=>t.format(e))).join("full"===e?", ":",")+")":t+=this.type,"sighash"!==e&&(!0===this.indexed&&(t+=" indexed"),"full"===e&&this.name&&(t+=" "+this.name)),t}isArray(){return"array"===this.baseType}isTuple(){return"tuple"===this.baseType}isIndexable(){return null!=this.indexed}walk(e,t){if(this.isArray()){if(!Array.isArray(e))throw new Error("invalid array value");if(-1!==this.arrayLength&&e.length!==this.arrayLength)throw new Error("array is wrong length");const n=this;return e.map((e=>n.arrayChildren.walk(e,t)))}if(this.isTuple()){if(!Array.isArray(e))throw new Error("invalid tuple value");if(e.length!==this.components.length)throw new Error("array is wrong length");const n=this;return e.map(((e,r)=>n.components[r].walk(e,t)))}return t(this.type,e)}#p(e,t,n,r){if(this.isArray()){if(!Array.isArray(t))throw new Error("invalid array value");if(-1!==this.arrayLength&&t.length!==this.arrayLength)throw new Error("array is wrong length");const s=this.arrayChildren,i=t.slice();return i.forEach(((t,r)=>{s.#p(e,t,n,(e=>{i[r]=e}))})),void r(i)}if(this.isTuple()){const s=this.components;let i;if(Array.isArray(t))i=t.slice();else{if(null==t||"object"!=typeof t)throw new Error("invalid tuple value");i=s.map((e=>{if(!e.name)throw new Error("cannot use object value with unnamed components");if(!(e.name in t))throw new Error(`missing value for component ${e.name}`);return t[e.name]}))}if(i.length!==this.components.length)throw new Error("array is wrong length");return i.forEach(((t,r)=>{s[r].#p(e,t,n,(e=>{i[r]=e}))})),void r(i)}const s=n(this.type,t);s.then?e.push(async function(){r(await s)}()):r(s)}async walkAsync(e,t){const n=[],r=[e];return this.#p(n,e,t,(e=>{r[0]=e})),n.length&&await Promise.all(n),r[0]}static from(e,t){if(ti.isParamType(e))return e;if("string"==typeof e)try{return ti.from(Ls(e),t)}catch(t){An(!1,"invalid param type","obj",e)}else if(e instanceof Fs){let n="",r="",s=null;Us(e,vs(["tuple"])).has("tuple")||e.peekType("OPEN_PAREN")?(r="tuple",s=e.popParams().map((e=>ti.from(e))),n=`tuple(${s.map((e=>e.format())).join(",")})`):(n=zs(e.popType("TYPE")),r=n);let i=null,o=null;for(;e.length&&e.peekType("BRACKET");){const t=e.pop();i=new ti(qs,"",n,r,null,s,o,i),o=t.value,n+=t.text,r="array",s=null}let a=null;if(Us(e,Ns).has("indexed")){if(!t)throw new Error("");a=!0}const l=e.peekType("ID")?e.pop().text:"";if(e.length)throw new Error("leftover tokens");return new ti(qs,l,n,r,a,s,o,i)}const n=e.name;An(!n||"string"==typeof n&&n.match(Ts),"invalid name","obj.name",n);let r=e.indexed;null!=r&&(An(t,"parameter cannot be indexed","obj.indexed",e.indexed),r=!!r);let s=e.type,i=s.match(Gs);if(i){const t=parseInt(i[2]||"-1"),o=ti.from({type:i[1],components:e.components});return new ti(qs,n||"",s,"array",r,null,t,o)}if("tuple"===s||s.startsWith("tuple(")||s.startsWith("(")){const t=null!=e.components?e.components.map((e=>ti.from(e))):null;return new ti(qs,n||"",s,"tuple",r,t,null,null)}return s=zs(e.type),new ti(qs,n||"",s,s,r,null,null,null)}static isParamType(e){return e&&e[Qs]===Js}}class ni{type;inputs;constructor(e,t,n){kn(e,qs,"Fragment"),mn(this,{type:t,inputs:n=Object.freeze(n.slice())})}static from(e){if("string"==typeof e){try{ni.from(JSON.parse(e))}catch(e){}return ni.from(Ls(e))}if(e instanceof Fs)switch(e.peekKeyword(xs)){case"constructor":return ai.from(e);case"error":return ii.from(e);case"event":return oi.from(e);case"fallback":case"receive":return li.from(e);case"function":return ci.from(e);case"struct":return ui.from(e)}else if("object"==typeof e){switch(e.type){case"constructor":return ai.from(e);case"error":return ii.from(e);case"event":return oi.from(e);case"fallback":case"receive":return li.from(e);case"function":return ci.from(e);case"struct":return ui.from(e)}vn(!1,`unsupported type: ${e.type}`,"UNSUPPORTED_OPERATION",{operation:"Fragment.from"})}An(!1,"unsupported frgament object","obj",e)}static isConstructor(e){return ai.isFragment(e)}static isError(e){return ii.isFragment(e)}static isEvent(e){return oi.isFragment(e)}static isFunction(e){return ci.isFragment(e)}static isStruct(e){return ui.isFragment(e)}}class ri extends ni{name;constructor(e,t,n,r){super(e,t,r),An("string"==typeof n&&n.match(Ts),"invalid identifier","name",n),r=Object.freeze(r.slice()),mn(this,{name:n})}}function si(e,t){return"("+t.map((t=>t.format(e))).join("full"===e?", ":",")+")"}class ii extends ri{constructor(e,t,n){super(e,"error",t,n),Object.defineProperty(this,Qs,{value:Ks})}get selector(){return ws(this.format("sighash")).substring(0,10)}format(e){if(null==e&&(e="sighash"),"json"===e)return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});const t=[];return"sighash"!==e&&t.push("error"),t.push(this.name+si(e,this.inputs)),t.join(" ")}static from(e){if(ii.isFragment(e))return e;if("string"==typeof e)return ii.from(Ls(e));if(e instanceof Fs){const t=Ms("error",e),n=js(e);return Hs(e),new ii(qs,t,n)}return new ii(qs,e.name,e.inputs?e.inputs.map(ti.from):[])}static isFragment(e){return e&&e[Qs]===Ks}}class oi extends ri{anonymous;constructor(e,t,n,r){super(e,"event",t,n),Object.defineProperty(this,Qs,{value:Ws}),mn(this,{anonymous:r})}get topicHash(){return ws(this.format("sighash"))}format(e){if(null==e&&(e="sighash"),"json"===e)return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});const t=[];return"sighash"!==e&&t.push("event"),t.push(this.name+si(e,this.inputs)),"sighash"!==e&&this.anonymous&&t.push("anonymous"),t.join(" ")}static getTopicHash(e,t){return t=(t||[]).map((e=>ti.from(e))),new oi(qs,e,t,!1).topicHash}static from(e){if(oi.isFragment(e))return e;if("string"==typeof e)try{return oi.from(Ls(e))}catch(t){An(!1,"invalid event fragment","obj",e)}else if(e instanceof Fs){const t=Ms("event",e),n=js(e,!0),r=!!Us(e,vs(["anonymous"])).has("anonymous");return Hs(e),new oi(qs,t,n,r)}return new oi(qs,e.name,e.inputs?e.inputs.map((e=>ti.from(e,!0))):[],!!e.anonymous)}static isFragment(e){return e&&e[Qs]===Ws}}class ai extends ni{payable;gas;constructor(e,t,n,r,s){super(e,t,n),Object.defineProperty(this,Qs,{value:Ys}),mn(this,{payable:r,gas:s})}format(e){if(vn(null!=e&&"sighash"!==e,"cannot format a constructor for sighash","UNSUPPORTED_OPERATION",{operation:"format(sighash)"}),"json"===e)return JSON.stringify({type:"constructor",stateMutability:this.payable?"payable":"undefined",payable:this.payable,gas:null!=this.gas?this.gas:void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});const t=[`constructor${si(e,this.inputs)}`];return this.payable&&t.push("payable"),null!=this.gas&&t.push(`@${this.gas.toString()}`),t.join(" ")}static from(e){if(ai.isFragment(e))return e;if("string"==typeof e)try{return ai.from(Ls(e))}catch(t){An(!1,"invalid constuctor fragment","obj",e)}else if(e instanceof Fs){Us(e,vs(["constructor"]));const t=js(e),n=!!Us(e,As).has("payable"),r=Vs(e);return Hs(e),new ai(qs,"constructor",t,n,r)}return new ai(qs,"constructor",e.inputs?e.inputs.map(ti.from):[],!!e.payable,null!=e.gas?e.gas:null)}static isFragment(e){return e&&e[Qs]===Ys}}class li extends ni{payable;constructor(e,t,n){super(e,"fallback",t),Object.defineProperty(this,Qs,{value:Zs}),mn(this,{payable:n})}format(e){const t=0===this.inputs.length?"receive":"fallback";if("json"===e){const e=this.payable?"payable":"nonpayable";return JSON.stringify({type:t,stateMutability:e})}return`${t}()${this.payable?" payable":""}`}static from(e){if(li.isFragment(e))return e;if("string"==typeof e)try{return li.from(Ls(e))}catch(t){An(!1,"invalid fallback fragment","obj",e)}else if(e instanceof Fs){const t=e.toString();if(An(e.peekKeyword(vs(["fallback","receive"])),"type must be fallback or receive","obj",t),"receive"===e.popKeyword(vs(["fallback","receive"]))){const t=js(e);return An(0===t.length,"receive cannot have arguments","obj.inputs",t),Us(e,vs(["payable"])),Hs(e),new li(qs,[],!0)}let n=js(e);n.length?An(1===n.length&&"bytes"===n[0].type,"invalid fallback inputs","obj.inputs",n.map((e=>e.format("minimal"))).join(", ")):n=[ti.from("bytes")];const r=$s(e);if(An("nonpayable"===r||"payable"===r,"fallback cannot be constants","obj.stateMutability",r),Us(e,vs(["returns"])).has("returns")){const t=js(e);An(1===t.length&&"bytes"===t[0].type,"invalid fallback outputs","obj.outputs",t.map((e=>e.format("minimal"))).join(", "))}return Hs(e),new li(qs,n,"payable"===r)}if("receive"===e.type)return new li(qs,[],!0);if("fallback"===e.type){const t=[ti.from("bytes")],n="payable"===e.stateMutability;return new li(qs,t,n)}An(!1,"invalid fallback description","obj",e)}static isFragment(e){return e&&e[Qs]===Zs}}class ci extends ri{constant;outputs;stateMutability;payable;gas;constructor(e,t,n,r,s,i){super(e,"function",t,r),Object.defineProperty(this,Qs,{value:Xs}),mn(this,{constant:"view"===n||"pure"===n,gas:i,outputs:s=Object.freeze(s.slice()),payable:"payable"===n,stateMutability:n})}get selector(){return ws(this.format("sighash")).substring(0,10)}format(e){if(null==e&&(e="sighash"),"json"===e)return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:null!=this.gas?this.gas:void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e)))),outputs:this.outputs.map((t=>JSON.parse(t.format(e))))});const t=[];return"sighash"!==e&&t.push("function"),t.push(this.name+si(e,this.inputs)),"sighash"!==e&&("nonpayable"!==this.stateMutability&&t.push(this.stateMutability),this.outputs&&this.outputs.length&&(t.push("returns"),t.push(si(e,this.outputs))),null!=this.gas&&t.push(`@${this.gas.toString()}`)),t.join(" ")}static getSelector(e,t){return t=(t||[]).map((e=>ti.from(e))),new ci(qs,e,"view",t,[],null).selector}static from(e){if(ci.isFragment(e))return e;if("string"==typeof e)try{return ci.from(Ls(e))}catch(t){An(!1,"invalid function fragment","obj",e)}else if(e instanceof Fs){const t=Ms("function",e),n=js(e),r=$s(e);let s=[];Us(e,vs(["returns"])).has("returns")&&(s=js(e));const i=Vs(e);return Hs(e),new ci(qs,t,r,n,s,i)}let t=e.stateMutability;return null==t&&(t="payable","boolean"==typeof e.constant?(t="view",e.constant||(t="payable","boolean"!=typeof e.payable||e.payable||(t="nonpayable"))):"boolean"!=typeof e.payable||e.payable||(t="nonpayable")),new ci(qs,e.name,t,e.inputs?e.inputs.map(ti.from):[],e.outputs?e.outputs.map(ti.from):[],null!=e.gas?e.gas:null)}static isFragment(e){return e&&e[Qs]===Xs}}class ui extends ri{constructor(e,t,n){super(e,"struct",t,n),Object.defineProperty(this,Qs,{value:ei})}format(){throw new Error("@TODO")}static from(e){if("string"==typeof e)try{return ui.from(Ls(e))}catch(t){An(!1,"invalid struct fragment","obj",e)}else if(e instanceof Fs){const t=Ms("struct",e),n=js(e);return Hs(e),new ui(qs,t,n)}return new ui(qs,e.name,e.inputs?e.inputs.map(ti.from):[])}static isFragment(e){return e&&e[Qs]===ei}}const hi=new Map;hi.set(0,"GENERIC_PANIC"),hi.set(1,"ASSERT_FALSE"),hi.set(17,"OVERFLOW"),hi.set(18,"DIVIDE_BY_ZERO"),hi.set(33,"ENUM_RANGE_ERROR"),hi.set(34,"BAD_STORAGE_DATA"),hi.set(49,"STACK_UNDERFLOW"),hi.set(50,"ARRAY_RANGE_ERROR"),hi.set(65,"OUT_OF_MEMORY"),hi.set(81,"UNINITIALIZED_FUNCTION_CALL");const di=new RegExp(/^bytes([0-9]*)$/),pi=new RegExp(/^(u?int)([0-9]*)$/);let fi=null,mi=1024;class gi{#f(e){if(e.isArray())return new ns(this.#f(e.arrayChildren),e.arrayLength,e.name);if(e.isTuple())return new bs(e.components.map((e=>this.#f(e))),e.name);switch(e.baseType){case"address":return new Zr(e.name);case"bool":return new rs(e.name);case"string":return new ys(e.name);case"bytes":return new is(e.name);case"":return new ls(e.name)}let t=e.type.match(pi);if(t){let n=parseInt(t[2]||"256");return An(0!==n&&n<=256&&n%8==0,"invalid "+t[1]+" bit length","param",e),new ds(n/8,"int"===t[1],e.name)}if(t=e.type.match(di),t){let n=parseInt(t[1]);return An(0!==n&&n<=32,"invalid bytes length","param",e),new os(n,e.name)}An(!1,"invalid type","type",e.type)}getDefaultValue(e){const t=e.map((e=>this.#f(ti.from(e))));return new bs(t,"_").defaultValue()}encode(e,t){_n(t.length,e.length,"types/values length mismatch");const n=e.map((e=>this.#f(ti.from(e)))),r=new bs(n,"_"),s=new rr;return r.encode(s,t),s.data}decode(e,t,n){const r=e.map((e=>this.#f(ti.from(e))));return new bs(r,"_").decode(new sr(t,n,mi))}static _setDefaultMaxInflation(e){An("number"==typeof e&&Number.isInteger(e),"invalid defaultMaxInflation factor","value",e),mi=e}static defaultAbiCoder(){return null==fi&&(fi=new gi),fi}static getBuiltinCallException(e,t,n){return function(e,t,n,r){let s="missing revert data",i=null,o=null;if(n){s="execution reverted";const e=Cn(n);if(n=On(n),0===e.length)s+=" (no data present; likely require(false) occurred",i="require(false)";else if(e.length%32!=4)s+=" (could not decode reason; invalid data length)";else if("0x08c379a0"===On(e.slice(0,4)))try{i=r.decode(["string"],e.slice(4))[0],o={signature:"Error(string)",name:"Error",args:[i]},s+=`: ${JSON.stringify(i)}`}catch(e){s+=" (could not decode reason; invalid string data)"}else if("0x4e487b71"===On(e.slice(0,4)))try{const t=Number(r.decode(["uint256"],e.slice(4))[0]);o={signature:"Panic(uint256)",name:"Panic",args:[t]},i=`Panic due to ${hi.get(t)||"UNKNOWN"}(${t})`,s+=`: ${i}`}catch(e){s+=" (could not decode panic code)"}else s+=" (unknown custom error)"}const a={to:t.to?qr(t.to):null,data:t.data||"0x"};return t.from&&(a.from=qr(t.from)),wn(s,"CALL_EXCEPTION",{action:e,data:n,reason:i,transaction:a,invocation:null,revert:o})}(e,t,n,gi.defaultAbiCoder())}}function yi(e){return e&&"function"==typeof e.getAddress}async function bi(e,t){const n=await t;return null!=n&&"0x0000000000000000000000000000000000000000"!==n||(vn("string"!=typeof e,"unconfigured name","UNCONFIGURED_NAME",{value:e}),An(!1,"invalid AddressLike value; did not resolve to a value address","target",e)),qr(n)}function wi(e,t){return"string"==typeof e?e.match(/^0x[0-9a-f]{40}$/i)?qr(e):(vn(null!=t,"ENS resolution requires a provider","UNSUPPORTED_OPERATION",{operation:"resolveName"}),bi(e,t.resolveName(e))):yi(e)?bi(e,e.getAddress()):e&&"function"==typeof e.then?bi(e,e):void An(!1,"unsupported addressable value","target",e)}const vi=new Uint8Array(32);vi.fill(0);const Ai=BigInt(-1),_i=BigInt(0),Ei=BigInt(1),ki=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),xi=qn(Ei,32),Ci=qn(_i,32),Ni={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},Pi=["name","version","chainId","verifyingContract","salt"];function Ri(e){return function(t){return An("string"==typeof t,`invalid domain value for ${JSON.stringify(e)}`,`domain.${e}`,t),t}}const Oi={name:Ri("name"),version:Ri("version"),chainId:function(e){const t=jn(e,"domain.chainId");return An(t>=0,"invalid chain ID","domain.chainId",e),Number.isSafeInteger(t)?Number(t):Jn(t)},verifyingContract:function(e){try{return qr(e).toLowerCase()}catch(e){}An(!1,'invalid domain value "verifyingContract"',"domain.verifyingContract",e)},salt:function(e){const t=Cn(e,"domain.salt");return An(32===t.length,'invalid domain value "salt"',"domain.salt",e),On(t)}};function Bi(e){{const t=e.match(/^(u?)int(\d+)$/);if(t){const n=""===t[1],r=parseInt(t[2]);An(r%8==0&&0!==r&&r<=256&&t[2]===String(r),"invalid numeric width","type",e);const s=$n(ki,n?r-1:r),i=n?(s+Ei)*Ai:_i;return function(t){const r=jn(t,"value");return An(r>=i&&r<=s,`value out-of-bounds for ${e}`,"value",r),qn(n?Un(r,256):r,32)}}}{const t=e.match(/^bytes(\d+)$/);if(t){const n=parseInt(t[1]);return An(0!==n&&n<=32&&t[1]===String(n),"invalid bytes width","type",e),function(t){return An(Cn(t).length===n,`invalid length for ${e}`,"value",t),function(e){const t=Cn(e),n=t.length%32;return n?Bn([t,vi.slice(n)]):On(t)}(t)}}}switch(e){case"address":return function(e){return Fn(qr(e),32)};case"bool":return function(e){return e?xi:Ci};case"bytes":return function(e){return Ur(e)};case"string":return function(e){return ws(e)}}return null}function Si(e,t){return`${e}(${t.map((({name:e,type:t})=>t+" "+e)).join(",")})`}function Ti(e){const t=e.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);return t?{base:t[1],index:t[2]+t[4],array:{base:t[1],prefix:t[1]+t[2],count:t[5]?parseInt(t[5]):-1}}:{base:e}}class Ii{primaryType;#m;get types(){return JSON.parse(this.#m)}#g;#y;constructor(e){this.#g=new Map,this.#y=new Map;const t=new Map,n=new Map,r=new Map,s={};Object.keys(e).forEach((i=>{s[i]=e[i].map((({name:t,type:n})=>{let{base:r,index:s}=Ti(n);return"int"!==r||e.int||(r="int256"),"uint"!==r||e.uint||(r="uint256"),{name:t,type:r+(s||"")}})),t.set(i,new Set),n.set(i,[]),r.set(i,new Set)})),this.#m=JSON.stringify(s);for(const r in s){const i=new Set;for(const o of s[r]){An(!i.has(o.name),`duplicate variable name ${JSON.stringify(o.name)} in ${JSON.stringify(r)}`,"types",e),i.add(o.name);const s=Ti(o.type).base;An(s!==r,`circular type reference to ${JSON.stringify(s)}`,"types",e),Bi(s)||(An(n.has(s),`unknown type ${JSON.stringify(s)}`,"types",e),n.get(s).push(r),t.get(r).add(s))}}const i=Array.from(n.keys()).filter((e=>0===n.get(e).length));An(0!==i.length,"missing primary type","types",e),An(1===i.length,`ambiguous primary types or unused types: ${i.map((e=>JSON.stringify(e))).join(", ")}`,"types",e),mn(this,{primaryType:i[0]}),function s(i,o){An(!o.has(i),`circular type reference to ${JSON.stringify(i)}`,"types",e),o.add(i);for(const e of t.get(i))if(n.has(e)){s(e,o);for(const t of o)r.get(t).add(e)}o.delete(i)}(this.primaryType,new Set);for(const[e,t]of r){const n=Array.from(t);n.sort(),this.#g.set(e,Si(e,s[e])+n.map((e=>Si(e,s[e]))).join(""))}}getEncoder(e){let t=this.#y.get(e);return t||(t=this.#b(e),this.#y.set(e,t)),t}#b(e){{const t=Bi(e);if(t)return t}const t=Ti(e).array;if(t){const e=t.prefix,n=this.getEncoder(e);return r=>{An(-1===t.count||t.count===r.length,`array length mismatch; expected length ${t.count}`,"value",r);let s=r.map(n);return this.#g.has(e)&&(s=s.map(Ur)),Ur(Bn(s))}}const n=this.types[e];if(n){const t=ws(this.#g.get(e));return e=>{const r=n.map((({name:t,type:n})=>{const r=this.getEncoder(n)(e[t]);return this.#g.has(n)?Ur(r):r}));return r.unshift(t),Bn(r)}}An(!1,`unknown type: ${e}`,"type",e)}encodeType(e){const t=this.#g.get(e);return An(t,`unknown type: ${JSON.stringify(e)}`,"name",e),t}encodeData(e,t){return this.getEncoder(e)(t)}hashStruct(e,t){return Ur(this.encodeData(e,t))}encode(e){return this.encodeData(this.primaryType,e)}hash(e){return this.hashStruct(this.primaryType,e)}_visit(e,t,n){if(Bi(e))return n(e,t);const r=Ti(e).array;if(r)return An(-1===r.count||r.count===t.length,`array length mismatch; expected length ${r.count}`,"value",t),t.map((e=>this._visit(r.prefix,e,n)));const s=this.types[e];if(s)return s.reduce(((e,{name:r,type:s})=>(e[r]=this._visit(s,t[r],n),e)),{});An(!1,`unknown type: ${e}`,"type",e)}visit(e,t){return this._visit(this.primaryType,e,t)}static from(e){return new Ii(e)}static getPrimaryType(e){return Ii.from(e).primaryType}static hashStruct(e,t,n){return Ii.from(t).hashStruct(e,n)}static hashDomain(e){const t=[];for(const n in e){if(null==e[n])continue;const r=Ni[n];An(r,`invalid typed-data domain key: ${JSON.stringify(n)}`,"domain",e),t.push({name:n,type:r})}return t.sort(((e,t)=>Pi.indexOf(e.name)-Pi.indexOf(t.name))),Ii.hashStruct("EIP712Domain",{EIP712Domain:t},e)}static encode(e,t,n){return Bn(["0x1901",Ii.hashDomain(e),Ii.from(t).hash(n)])}static hash(e,t,n){return Ur(Ii.encode(e,t,n))}static async resolveNames(e,t,n,r){e=Object.assign({},e);for(const t in e)null==e[t]&&delete e[t];const s={};e.verifyingContract&&!Pn(e.verifyingContract,20)&&(s[e.verifyingContract]="0x");const i=Ii.from(t);i.visit(n,((e,t)=>("address"!==e||Pn(t,20)||(s[t]="0x"),t)));for(const e in s)s[e]=await r(e);return e.verifyingContract&&s[e.verifyingContract]&&(e.verifyingContract=s[e.verifyingContract]),{domain:e,value:n=i.visit(n,((e,t)=>"address"===e&&s[t]?s[t]:t))}}static getPayload(e,t,n){Ii.hashDomain(e);const r={},s=[];Pi.forEach((t=>{const n=e[t];null!=n&&(r[t]=Oi[t](n),s.push({name:t,type:Ni[t]}))}));const i=Ii.from(t);t=i.types;const o=Object.assign({},t);return An(null==o.EIP712Domain,"types must not contain EIP712Domain type","types.EIP712Domain",t),o.EIP712Domain=s,i.encode(n),{types:o,domain:r,primaryType:i.primaryType,message:i.visit(n,((e,t)=>{if(e.match(/^bytes(\d*)/))return On(Cn(t));if(e.match(/^u?int/))return jn(t).toString();switch(e){case"address":return t.toLowerCase();case"bool":return!!t;case"string":return An("string"==typeof t,"invalid string","value",t),t}An(!1,"unsupported type","type",e)}))}}}function Fi(e,t){return{address:qr(e),storageKeys:t.map(((e,t)=>(An(Pn(e,32),"invalid slot",`storageKeys[${t}]`,e),e.toLowerCase())))}}function Li(e){if(Array.isArray(e))return e.map(((t,n)=>Array.isArray(t)?(An(2===t.length,"invalid slot set",`value[${n}]`,t),Fi(t[0],t[1])):(An(null!=t&&"object"==typeof t,"invalid address-slot set","value",e),Fi(t.address,t.storageKeys))));An(null!=e&&"object"==typeof e,"invalid access list","value",e);const t=Object.keys(e).map((t=>{const n=e[t].reduce(((e,t)=>(e[t]=!0,e)),{});return Fi(t,Object.keys(n).sort())}));return t.sort(((e,t)=>e.address.localeCompare(t.address))),t}function Di(e){return async function(e,t){const n=e.url.split(":")[0].toLowerCase();let r;if(vn("http"===n||"https"===n,`unsupported protocol ${n}`,"UNSUPPORTED_OPERATION",{info:{protocol:n},operation:"request"}),vn("https"===n||!e.credentials||e.allowInsecureAuthentication,"insecure authorized connections unsupported","UNSUPPORTED_OPERATION",{operation:"request"}),t){const e=new AbortController;r=e.signal,t.addListener((()=>{e.abort()}))}const s={method:e.method,headers:new Headers(Array.from(e)),body:e.body||void 0,signal:r},i=await fetch(e.url,s),o={};i.headers.forEach(((e,t)=>{o[t.toLowerCase()]=e}));const a=await i.arrayBuffer(),l=null==a?null:new Uint8Array(a);return{statusCode:i.status,statusMessage:i.statusText,headers:o,body:l}}}Di();let Mi=Di();const Ui=new RegExp("^data:([^;:]*)?(;base64)?,(.*)$","i"),$i=new RegExp("^ipfs://(ipfs/)?(.*)$","i");let ji=!1;async function Vi(e,t){try{const t=e.match(Ui);if(!t)throw new Error("invalid data");return new Ki(200,"OK",{"content-type":t[1]||"text/plain"},t[2]?function(e){e=atob(e);const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return Cn(t)}(t[3]):ms(t[3].replace(/%([0-9a-f][0-9a-f])/gi,((e,t)=>String.fromCharCode(parseInt(t,16))))))}catch(t){return new Ki(599,"BAD REQUEST (invalid data: URI)",{},null,new Ji(e))}}function Hi(e){return async function(t,n){try{const n=t.match($i);if(!n)throw new Error("invalid link");return new Ji(`${e}${n[2]}`)}catch(e){return new Ki(599,"BAD REQUEST (invalid IPFS URI)",{},null,new Ji(t))}}}const Gi={data:Vi,ipfs:Hi("https://gateway.ipfs.io/ipfs/")},zi=new WeakMap;class qi{#w;#v;constructor(e){this.#w=[],this.#v=!1,zi.set(e,(()=>{if(!this.#v){this.#v=!0;for(const e of this.#w)setTimeout((()=>{e()}),0);this.#w=[]}}))}addListener(e){vn(!this.#v,"singal already cancelled","UNSUPPORTED_OPERATION",{operation:"fetchCancelSignal.addCancelListener"}),this.#w.push(e)}get cancelled(){return this.#v}checkSignal(){vn(!this.cancelled,"cancelled","CANCELLED",{})}}function Qi(e){if(null==e)throw new Error("missing signal; should not happen");return e.checkSignal(),e}class Ji{#A;#_;#E;#k;#x;#C;#N;#P;#R;#O;#B;#S;#T;#I;#F;get url(){return this.#C}set url(e){this.#C=String(e)}get body(){return null==this.#N?null:new Uint8Array(this.#N)}set body(e){if(null==e)this.#N=void 0,this.#P=void 0;else if("string"==typeof e)this.#N=ms(e),this.#P="text/plain";else if(e instanceof Uint8Array)this.#N=e,this.#P="application/octet-stream";else{if("object"!=typeof e)throw new Error("invalid body");this.#N=ms(JSON.stringify(e)),this.#P="application/json"}}hasBody(){return null!=this.#N}get method(){return this.#k?this.#k:this.hasBody()?"POST":"GET"}set method(e){null==e&&(e=""),this.#k=String(e).toUpperCase()}get headers(){const e=Object.assign({},this.#E);return this.#R&&(e.authorization=`Basic ${function(e){const t=Cn(e);let n="";for(let e=0;e<t.length;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(ms(this.#R))}`),this.allowGzip&&(e["accept-encoding"]="gzip"),null==e["content-type"]&&this.#P&&(e["content-type"]=this.#P),this.body&&(e["content-length"]=String(this.body.length)),e}getHeader(e){return this.headers[e.toLowerCase()]}setHeader(e,t){this.#E[String(e).toLowerCase()]=String(t)}clearHeaders(){this.#E={}}[Symbol.iterator](){const e=this.headers,t=Object.keys(e);let n=0;return{next:()=>{if(n<t.length){const r=t[n++];return{value:[r,e[r]],done:!1}}return{value:void 0,done:!0}}}}get credentials(){return this.#R||null}setCredentials(e,t){An(!e.match(/:/),"invalid basic authentication username","username","[REDACTED]"),this.#R=`${e}:${t}`}get allowGzip(){return this.#_}set allowGzip(e){this.#_=!!e}get allowInsecureAuthentication(){return!!this.#A}set allowInsecureAuthentication(e){this.#A=!!e}get timeout(){return this.#x}set timeout(e){An(e>=0,"timeout must be non-zero","timeout",e),this.#x=e}get preflightFunc(){return this.#O||null}set preflightFunc(e){this.#O=e}get processFunc(){return this.#B||null}set processFunc(e){this.#B=e}get retryFunc(){return this.#S||null}set retryFunc(e){this.#S=e}get getUrlFunc(){return this.#F||Mi}set getUrlFunc(e){this.#F=e}constructor(e){this.#C=String(e),this.#A=!1,this.#_=!0,this.#E={},this.#k="",this.#x=3e5,this.#I={slotInterval:250,maxAttempts:12},this.#F=null}toString(){return`<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#N?On(this.#N):"null"}>`}setThrottleParams(e){null!=e.slotInterval&&(this.#I.slotInterval=e.slotInterval),null!=e.maxAttempts&&(this.#I.maxAttempts=e.maxAttempts)}async#L(e,t,n,r,s){if(e>=this.#I.maxAttempts)return s.makeServerError("exceeded maximum retry limit");vn(Wi()<=t,"timeout","TIMEOUT",{operation:"request.send",reason:"timeout",request:r}),n>0&&await function(e){return new Promise((t=>setTimeout(t,e)))}(n);let i=this.clone();const o=(i.url.split(":")[0]||"").toLowerCase();if(o in Gi){const e=await Gi[o](i.url,Qi(r.#T));if(e instanceof Ki){let t=e;if(this.processFunc){Qi(r.#T);try{t=await this.processFunc(i,t)}catch(e){null!=e.throttle&&"number"==typeof e.stall||t.makeServerError("error in post-processing function",e).assertOk()}}return t}i=e}this.preflightFunc&&(i=await this.preflightFunc(i));const a=await this.getUrlFunc(i,Qi(r.#T));let l=new Ki(a.statusCode,a.statusMessage,a.headers,a.body,r);if(301===l.statusCode||302===l.statusCode){try{const n=l.headers.location||"";return i.redirect(n).#L(e+1,t,0,r,l)}catch(e){}return l}if(429===l.statusCode&&(null==this.retryFunc||await this.retryFunc(i,l,e))){const n=l.headers["retry-after"];let s=this.#I.slotInterval*Math.trunc(Math.random()*Math.pow(2,e));return"string"==typeof n&&n.match(/^[1-9][0-9]*$/)&&(s=parseInt(n)),i.clone().#L(e+1,t,s,r,l)}if(this.processFunc){Qi(r.#T);try{l=await this.processFunc(i,l)}catch(n){null!=n.throttle&&"number"==typeof n.stall||l.makeServerError("error in post-processing function",n).assertOk();let s=this.#I.slotInterval*Math.trunc(Math.random()*Math.pow(2,e));return n.stall>=0&&(s=n.stall),i.clone().#L(e+1,t,s,r,l)}}return l}send(){return vn(null==this.#T,"request already sent","UNSUPPORTED_OPERATION",{operation:"fetchRequest.send"}),this.#T=new qi(this),this.#L(0,Wi()+this.timeout,0,this,new Ki(0,"",{},null,this))}cancel(){vn(null!=this.#T,"request has not been sent","UNSUPPORTED_OPERATION",{operation:"fetchRequest.cancel"});const e=zi.get(this);if(!e)throw new Error("missing signal; should not happen");e()}redirect(e){const t=this.url.split(":")[0].toLowerCase(),n=e.split(":")[0].toLowerCase();vn("GET"===this.method&&("https"!==t||"http"!==n)&&e.match(/^https?:/),"unsupported redirect","UNSUPPORTED_OPERATION",{operation:`redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(e)})`});const r=new Ji(e);return r.method="GET",r.allowGzip=this.allowGzip,r.timeout=this.timeout,r.#E=Object.assign({},this.#E),this.#N&&(r.#N=new Uint8Array(this.#N)),r.#P=this.#P,r}clone(){const e=new Ji(this.url);return e.#k=this.#k,this.#N&&(e.#N=this.#N),e.#P=this.#P,e.#E=Object.assign({},this.#E),e.#R=this.#R,this.allowGzip&&(e.allowGzip=!0),e.timeout=this.timeout,this.allowInsecureAuthentication&&(e.allowInsecureAuthentication=!0),e.#O=this.#O,e.#B=this.#B,e.#S=this.#S,e.#F=this.#F,e}static lockConfig(){ji=!0}static getGateway(e){return Gi[e.toLowerCase()]||null}static registerGateway(e,t){if("http"===(e=e.toLowerCase())||"https"===e)throw new Error(`cannot intercept ${e}; use registerGetUrl`);if(ji)throw new Error("gateways locked");Gi[e]=t}static registerGetUrl(e){if(ji)throw new Error("gateways locked");Mi=e}static createGetUrlFunc(e){return Di()}static createDataGateway(){return Vi}static createIpfsGatewayFunc(e){return Hi(e)}}class Ki{#D;#M;#E;#N;#U;#$;toString(){return`<FetchResponse status=${this.statusCode} body=${this.#N?On(this.#N):"null"}>`}get statusCode(){return this.#D}get statusMessage(){return this.#M}get headers(){return Object.assign({},this.#E)}get body(){return null==this.#N?null:new Uint8Array(this.#N)}get bodyText(){try{return null==this.#N?"":gs(this.#N)}catch(e){vn(!1,"response body is not valid UTF-8 data","UNSUPPORTED_OPERATION",{operation:"bodyText",info:{response:this}})}}get bodyJson(){try{return JSON.parse(this.bodyText)}catch(e){vn(!1,"response body is not valid JSON","UNSUPPORTED_OPERATION",{operation:"bodyJson",info:{response:this}})}}[Symbol.iterator](){const e=this.headers,t=Object.keys(e);let n=0;return{next:()=>{if(n<t.length){const r=t[n++];return{value:[r,e[r]],done:!1}}return{value:void 0,done:!0}}}}constructor(e,t,n,r,s){this.#D=e,this.#M=t,this.#E=Object.keys(n).reduce(((e,t)=>(e[t.toLowerCase()]=String(n[t]),e)),{}),this.#N=null==r?null:new Uint8Array(r),this.#U=s||null,this.#$={message:""}}makeServerError(e,t){let n;n=e?`CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${e})`:`CLIENT ESCALATED SERVER ERROR (${e=`${this.statusCode} ${this.statusMessage}`})`;const r=new Ki(599,n,this.headers,this.body,this.#U||void 0);return r.#$={message:e,error:t},r}throwThrottleError(e,t){null==t?t=-1:An(Number.isInteger(t)&&t>=0,"invalid stall timeout","stall",t);const n=new Error(e||"throttling requests");throw mn(n,{stall:t,throttle:!0}),n}getHeader(e){return this.headers[e.toLowerCase()]}hasBody(){return null!=this.#N}get request(){return this.#U}ok(){return""===this.#$.message&&this.statusCode>=200&&this.statusCode<300}assertOk(){if(this.ok())return;let{message:e,error:t}=this.#$;""===e&&(e=`server response ${this.statusCode} ${this.statusMessage}`);let n=null;this.request&&(n=this.request.url);let r=null;try{this.#N&&(r=gs(this.#N))}catch(e){}vn(!1,e,"SERVER_ERROR",{request:this.request||"unknown request",response:this,error:t,info:{requestUrl:n,responseBody:r,responseStatus:`${this.statusCode} ${this.statusMessage}`}})}}function Wi(){return(new Date).getTime()}const Yi="0x0000000000000000000000000000000000000000";class Zi{fragment;name;signature;topic;args;constructor(e,t,n){const r=e.name,s=e.format();mn(this,{fragment:e,name:r,signature:s,topic:t,args:n})}}class Xi{fragment;name;args;signature;selector;value;constructor(e,t,n,r){const s=e.name,i=e.format();mn(this,{fragment:e,name:s,args:n,signature:i,selector:t,value:r})}}class eo{fragment;name;args;signature;selector;constructor(e,t,n){const r=e.name,s=e.format();mn(this,{fragment:e,name:r,args:n,signature:s,selector:t})}}class to{hash;_isIndexed;static isIndexed(e){return!(!e||!e._isIndexed)}constructor(e){mn(this,{hash:e,_isIndexed:!0})}}const no={0:"generic panic",1:"assert(false)",17:"arithmetic overflow",18:"division or modulo by zero",33:"enum overflow",34:"invalid encoded storage byte array accessed",49:"out-of-bounds array access; popping on an empty array",50:"out-of-bounds access of an array or bytesN",65:"out of memory",81:"uninitialized function"},ro={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:e=>`reverted with reason string ${JSON.stringify(e)}`},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"],reason:e=>{let t="unknown panic code";return e>=0&&e<=255&&no[e.toString()]&&(t=no[e.toString()]),`reverted with panic code 0x${e.toString(16)} (${t})`}}};class so{fragments;deploy;fallback;receive;#j;#V;#H;#G;constructor(e){let t=[];t="string"==typeof e?JSON.parse(e):e,this.#H=new Map,this.#j=new Map,this.#V=new Map;const n=[];for(const e of t)try{n.push(ni.from(e))}catch(t){console.log(`[Warning] Invalid Fragment ${JSON.stringify(e)}:`,t.message)}mn(this,{fragments:Object.freeze(n)});let r=null,s=!1;this.#G=this.getAbiCoder(),this.fragments.forEach(((e,t)=>{let n;switch(e.type){case"constructor":return this.deploy?void console.log("duplicate definition - constructor"):void mn(this,{deploy:e});case"fallback":return void(0===e.inputs.length?s=!0:(An(!r||e.payable!==r.payable,"conflicting fallback fragments",`fragments[${t}]`,e),r=e,s=r.payable));case"function":n=this.#H;break;case"event":n=this.#V;break;case"error":n=this.#j;break;default:return}const i=e.format();n.has(i)||n.set(i,e)})),this.deploy||mn(this,{deploy:ai.from("constructor()")}),mn(this,{fallback:r,receive:s})}format(e){const t=e?"minimal":"full",n=this.fragments.map((e=>e.format(t)));return n}formatJson(){const e=this.fragments.map((e=>e.format("json")));return JSON.stringify(e.map((e=>JSON.parse(e))))}getAbiCoder(){return gi.defaultAbiCoder()}#z(e,t,n){if(Pn(e)){const t=e.toLowerCase();for(const e of this.#H.values())if(t===e.selector)return e;return null}if(-1===e.indexOf("(")){const r=[];for(const[t,n]of this.#H)t.split("(")[0]===e&&r.push(n);if(t){const e=t.length>0?t[t.length-1]:null;let n=t.length,s=!0;Yr.isTyped(e)&&"overrides"===e.type&&(s=!1,n--);for(let e=r.length-1;e>=0;e--){const t=r[e].inputs.length;t===n||s&&t===n-1||r.splice(e,1)}for(let e=r.length-1;e>=0;e--){const n=r[e].inputs;for(let s=0;s<t.length;s++)if(Yr.isTyped(t[s])){if(s>=n.length){if("overrides"===t[s].type)continue;r.splice(e,1);break}if(t[s].type!==n[s].baseType){r.splice(e,1);break}}}}if(1===r.length&&t&&t.length!==r[0].inputs.length){const e=t[t.length-1];(null==e||Array.isArray(e)||"object"!=typeof e)&&r.splice(0,1)}if(0===r.length)return null;if(r.length>1&&n){const t=r.map((e=>JSON.stringify(e.format()))).join(", ");An(!1,`ambiguous function description (i.e. matches ${t})`,"key",e)}return r[0]}return this.#H.get(ci.from(e).format())||null}getFunctionName(e){const t=this.#z(e,null,!1);return An(t,"no matching function","key",e),t.name}hasFunction(e){return!!this.#z(e,null,!1)}getFunction(e,t){return this.#z(e,t||null,!0)}forEachFunction(e){const t=Array.from(this.#H.keys());t.sort(((e,t)=>e.localeCompare(t)));for(let n=0;n<t.length;n++){const r=t[n];e(this.#H.get(r),n)}}#q(e,t,n){if(Pn(e)){const t=e.toLowerCase();for(const e of this.#V.values())if(t===e.topicHash)return e;return null}if(-1===e.indexOf("(")){const r=[];for(const[t,n]of this.#V)t.split("(")[0]===e&&r.push(n);if(t){for(let e=r.length-1;e>=0;e--)r[e].inputs.length<t.length&&r.splice(e,1);for(let e=r.length-1;e>=0;e--){const n=r[e].inputs;for(let s=0;s<t.length;s++)if(Yr.isTyped(t[s])&&t[s].type!==n[s].baseType){r.splice(e,1);break}}}if(0===r.length)return null;if(r.length>1&&n){const t=r.map((e=>JSON.stringify(e.format()))).join(", ");An(!1,`ambiguous event description (i.e. matches ${t})`,"key",e)}return r[0]}return this.#V.get(oi.from(e).format())||null}getEventName(e){const t=this.#q(e,null,!1);return An(t,"no matching event","key",e),t.name}hasEvent(e){return!!this.#q(e,null,!1)}getEvent(e,t){return this.#q(e,t||null,!0)}forEachEvent(e){const t=Array.from(this.#V.keys());t.sort(((e,t)=>e.localeCompare(t)));for(let n=0;n<t.length;n++){const r=t[n];e(this.#V.get(r),n)}}getError(e,t){if(Pn(e)){const t=e.toLowerCase();if(ro[t])return ii.from(ro[t].signature);for(const e of this.#j.values())if(t===e.selector)return e;return null}if(-1===e.indexOf("(")){const t=[];for(const[n,r]of this.#j)n.split("(")[0]===e&&t.push(r);if(0===t.length)return"Error"===e?ii.from("error Error(string)"):"Panic"===e?ii.from("error Panic(uint256)"):null;if(t.length>1){const n=t.map((e=>JSON.stringify(e.format()))).join(", ");An(!1,`ambiguous error description (i.e. ${n})`,"name",e)}return t[0]}if("Error(string)"===(e=ii.from(e).format()))return ii.from("error Error(string)");if("Panic(uint256)"===e)return ii.from("error Panic(uint256)");return this.#j.get(e)||null}forEachError(e){const t=Array.from(this.#j.keys());t.sort(((e,t)=>e.localeCompare(t)));for(let n=0;n<t.length;n++){const r=t[n];e(this.#j.get(r),n)}}_decodeParams(e,t){return this.#G.decode(e,t)}_encodeParams(e,t){return this.#G.encode(e,t)}encodeDeploy(e){return this._encodeParams(this.deploy.inputs,e||[])}decodeErrorResult(e,t){if("string"==typeof e){const t=this.getError(e);An(t,"unknown error","fragment",e),e=t}return An(Tn(t,0,4)===e.selector,`data signature does not match error ${e.name}.`,"data",t),this._decodeParams(e.inputs,Tn(t,4))}encodeErrorResult(e,t){if("string"==typeof e){const t=this.getError(e);An(t,"unknown error","fragment",e),e=t}return Bn([e.selector,this._encodeParams(e.inputs,t||[])])}decodeFunctionData(e,t){if("string"==typeof e){const t=this.getFunction(e);An(t,"unknown function","fragment",e),e=t}return An(Tn(t,0,4)===e.selector,`data signature does not match function ${e.name}.`,"data",t),this._decodeParams(e.inputs,Tn(t,4))}encodeFunctionData(e,t){if("string"==typeof e){const t=this.getFunction(e);An(t,"unknown function","fragment",e),e=t}return Bn([e.selector,this._encodeParams(e.inputs,t||[])])}decodeFunctionResult(e,t){if("string"==typeof e){const t=this.getFunction(e);An(t,"unknown function","fragment",e),e=t}let n="invalid length for result data";const r=Nn(t);if(r.length%32==0)try{return this.#G.decode(e.outputs,r)}catch(e){n="could not decode result data"}vn(!1,n,"BAD_DATA",{value:On(r),info:{method:e.name,signature:e.format()}})}makeError(e,t){const n=Cn(e,"data"),r=gi.getBuiltinCallException("call",t,n);if(r.message.startsWith("execution reverted (unknown custom error)")){const e=On(n.slice(0,4)),t=this.getError(e);if(t)try{const e=this.#G.decode(t.inputs,n.slice(4));r.revert={name:t.name,signature:t.format(),args:e},r.reason=r.revert.signature,r.message=`execution reverted: ${r.reason}`}catch(e){r.message="execution reverted (coult not decode custom error)"}}const s=this.parseTransaction(t);return s&&(r.invocation={method:s.name,signature:s.signature,args:s.args}),r}encodeFunctionResult(e,t){if("string"==typeof e){const t=this.getFunction(e);An(t,"unknown function","fragment",e),e=t}return On(this.#G.encode(e.outputs,t||[]))}encodeFilterTopics(e,t){if("string"==typeof e){const t=this.getEvent(e);An(t,"unknown event","eventFragment",e),e=t}vn(t.length<=e.inputs.length,`too many arguments for ${e.format()}`,"UNEXPECTED_ARGUMENT",{count:t.length,expectedCount:e.inputs.length});const n=[];e.anonymous||n.push(e.topicHash);const r=(e,t)=>"string"===e.type?ws(t):"bytes"===e.type?Ur(On(t)):("bool"===e.type&&"boolean"==typeof t?t=t?"0x01":"0x00":e.type.match(/^u?int/)?t=qn(t):e.type.match(/^bytes/)?t=In(t,32,!1):"address"===e.type&&this.#G.encode(["address"],[t]),Fn(On(t),32));for(t.forEach(((t,s)=>{const i=e.inputs[s];i.indexed?null==t?n.push(null):"array"===i.baseType||"tuple"===i.baseType?An(!1,"filtering with tuples or arrays not supported","contract."+i.name,t):Array.isArray(t)?n.push(t.map((e=>r(i,e)))):n.push(r(i,t)):An(null==t,"cannot filter non-indexed parameters; must be null","contract."+i.name,t)}));n.length&&null===n[n.length-1];)n.pop();return n}encodeEventLog(e,t){if("string"==typeof e){const t=this.getEvent(e);An(t,"unknown event","eventFragment",e),e=t}const n=[],r=[],s=[];return e.anonymous||n.push(e.topicHash),An(t.length===e.inputs.length,"event arguments/values mismatch","values",t),e.inputs.forEach(((e,i)=>{const o=t[i];if(e.indexed)if("string"===e.type)n.push(ws(o));else if("bytes"===e.type)n.push(Ur(o));else{if("tuple"===e.baseType||"array"===e.baseType)throw new Error("not implemented");n.push(this.#G.encode([e.type],[o]))}else r.push(e),s.push(o)})),{data:this.#G.encode(r,s),topics:n}}decodeEventLog(e,t,n){if("string"==typeof e){const t=this.getEvent(e);An(t,"unknown event","eventFragment",e),e=t}if(null!=n&&!e.anonymous){const t=e.topicHash;An(Pn(n[0],32)&&n[0].toLowerCase()===t,"fragment/topic mismatch","topics[0]",n[0]),n=n.slice(1)}const r=[],s=[],i=[];e.inputs.forEach(((e,t)=>{e.indexed?"string"===e.type||"bytes"===e.type||"tuple"===e.baseType||"array"===e.baseType?(r.push(ti.from({type:"bytes32",name:e.name})),i.push(!0)):(r.push(e),i.push(!1)):(s.push(e),i.push(!1))}));const o=null!=n?this.#G.decode(r,Bn(n)):null,a=this.#G.decode(s,t,!0),l=[],c=[];let u=0,h=0;return e.inputs.forEach(((e,t)=>{let n=null;if(e.indexed)if(null==o)n=new to(null);else if(i[t])n=new to(o[h++]);else try{n=o[h++]}catch(e){n=e}else try{n=a[u++]}catch(e){n=e}l.push(n),c.push(e.name||null)})),er.fromItems(l,c)}parseTransaction(e){const t=Cn(e.data,"tx.data"),n=jn(null!=e.value?e.value:0,"tx.value"),r=this.getFunction(On(t.slice(0,4)));if(!r)return null;const s=this.#G.decode(r.inputs,t.slice(4));return new Xi(r,r.selector,s,n)}parseCallResult(e){throw new Error("@TODO")}parseLog(e){const t=this.getEvent(e.topics[0]);return!t||t.anonymous?null:new Zi(t,t.topicHash,this.decodeEventLog(t,e.data,e.topics))}parseError(e){const t=On(e),n=this.getError(Tn(t,0,4));if(!n)return null;const r=this.#G.decode(n.inputs,Tn(t,4));return new eo(n,n.selector,r)}static from(e){return e instanceof so?e:"string"==typeof e?new so(JSON.parse(e)):"function"==typeof e.format?new so(e.format("json")):new so(e)}}const io=BigInt(0);function oo(e){return null==e?null:e}function ao(e){return null==e?null:e.toString()}class lo{gasPrice;maxFeePerGas;maxPriorityFeePerGas;constructor(e,t,n){mn(this,{gasPrice:oo(e),maxFeePerGas:oo(t),maxPriorityFeePerGas:oo(n)})}toJSON(){const{gasPrice:e,maxFeePerGas:t,maxPriorityFeePerGas:n}=this;return{_type:"FeeData",gasPrice:ao(e),maxFeePerGas:ao(t),maxPriorityFeePerGas:ao(n)}}}function co(e){const t={};e.to&&(t.to=e.to),e.from&&(t.from=e.from),e.data&&(t.data=On(e.data));const n="chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);for(const r of n)r in e&&null!=e[r]&&(t[r]=jn(e[r],`request.${r}`));const r="type,nonce".split(/,/);for(const n of r)n in e&&null!=e[n]&&(t[n]=zn(e[n],`request.${n}`));return e.accessList&&(t.accessList=Li(e.accessList)),"blockTag"in e&&(t.blockTag=e.blockTag),"enableCcipRead"in e&&(t.enableCcipRead=!!e.enableCcipRead),"customData"in e&&(t.customData=e.customData),t}class uo{provider;number;hash;timestamp;parentHash;parentBeaconBlockRoot;nonce;difficulty;gasLimit;gasUsed;stateRoot;receiptsRoot;blobGasUsed;excessBlobGas;miner;extraData;baseFeePerGas;#Q;constructor(e,t){this.#Q=e.transactions.map((e=>"string"!=typeof e?new fo(e,t):e)),mn(this,{provider:t,hash:oo(e.hash),number:e.number,timestamp:e.timestamp,parentHash:e.parentHash,parentBeaconBlockRoot:e.parentBeaconBlockRoot,nonce:e.nonce,difficulty:e.difficulty,gasLimit:e.gasLimit,gasUsed:e.gasUsed,blobGasUsed:e.blobGasUsed,excessBlobGas:e.excessBlobGas,miner:e.miner,extraData:e.extraData,baseFeePerGas:oo(e.baseFeePerGas),stateRoot:e.stateRoot,receiptsRoot:e.receiptsRoot})}get transactions(){return this.#Q.map((e=>"string"==typeof e?e:e.hash))}get prefetchedTransactions(){const e=this.#Q.slice();return 0===e.length?[]:(vn("object"==typeof e[0],"transactions were not prefetched with block request","UNSUPPORTED_OPERATION",{operation:"transactionResponses()"}),e)}toJSON(){const{baseFeePerGas:e,difficulty:t,extraData:n,gasLimit:r,gasUsed:s,hash:i,miner:o,nonce:a,number:l,parentHash:c,parentBeaconBlockRoot:u,stateRoot:h,receiptsRoot:d,timestamp:p,transactions:f}=this;return{_type:"Block",baseFeePerGas:ao(e),difficulty:ao(t),extraData:n,gasLimit:ao(r),gasUsed:ao(s),blobGasUsed:ao(this.blobGasUsed),excessBlobGas:ao(this.excessBlobGas),hash:i,miner:o,nonce:a,number:l,parentHash:c,timestamp:p,parentBeaconBlockRoot:u,stateRoot:h,receiptsRoot:d,transactions:f}}[Symbol.iterator](){let e=0;const t=this.transactions;return{next:()=>e<this.length?{value:t[e++],done:!1}:{value:void 0,done:!0}}}get length(){return this.#Q.length}get date(){return null==this.timestamp?null:new Date(1e3*this.timestamp)}async getTransaction(e){let t;if("number"==typeof e)t=this.#Q[e];else{const n=e.toLowerCase();for(const e of this.#Q){if("string"==typeof e){if(e!==n)continue;t=e;break}if(e.hash!==n){t=e;break}}}if(null==t)throw new Error("no such tx");return"string"==typeof t?await this.provider.getTransaction(t):t}getPrefetchedTransaction(e){const t=this.prefetchedTransactions;if("number"==typeof e)return t[e];e=e.toLowerCase();for(const n of t)if(n.hash===e)return n;An(!1,"no matching transaction","indexOrHash",e)}isMined(){return!!this.hash}isLondon(){return!!this.baseFeePerGas}orphanedEvent(){if(!this.isMined())throw new Error("");return{orphan:"drop-block",hash:this.hash,number:this.number}}}class ho{provider;transactionHash;blockHash;blockNumber;removed;address;data;topics;index;transactionIndex;constructor(e,t){this.provider=t;const n=Object.freeze(e.topics.slice());mn(this,{transactionHash:e.transactionHash,blockHash:e.blockHash,blockNumber:e.blockNumber,removed:e.removed,address:e.address,data:e.data,topics:n,index:e.index,transactionIndex:e.transactionIndex})}toJSON(){const{address:e,blockHash:t,blockNumber:n,data:r,index:s,removed:i,topics:o,transactionHash:a,transactionIndex:l}=this;return{_type:"log",address:e,blockHash:t,blockNumber:n,data:r,index:s,removed:i,topics:o,transactionHash:a,transactionIndex:l}}async getBlock(){const e=await this.provider.getBlock(this.blockHash);return vn(!!e,"failed to find transaction","UNKNOWN_ERROR",{}),e}async getTransaction(){const e=await this.provider.getTransaction(this.transactionHash);return vn(!!e,"failed to find transaction","UNKNOWN_ERROR",{}),e}async getTransactionReceipt(){const e=await this.provider.getTransactionReceipt(this.transactionHash);return vn(!!e,"failed to find transaction receipt","UNKNOWN_ERROR",{}),e}removedEvent(){return function(e){return{orphan:"drop-log",log:{transactionHash:e.transactionHash,blockHash:e.blockHash,blockNumber:e.blockNumber,address:e.address,data:e.data,topics:Object.freeze(e.topics.slice()),index:e.index}}}(this)}}class po{provider;to;from;contractAddress;hash;index;blockHash;blockNumber;logsBloom;gasUsed;blobGasUsed;cumulativeGasUsed;gasPrice;blobGasPrice;type;status;root;#J;constructor(e,t){this.#J=Object.freeze(e.logs.map((e=>new ho(e,t))));let n=io;null!=e.effectiveGasPrice?n=e.effectiveGasPrice:null!=e.gasPrice&&(n=e.gasPrice),mn(this,{provider:t,to:e.to,from:e.from,contractAddress:e.contractAddress,hash:e.hash,index:e.index,blockHash:e.blockHash,blockNumber:e.blockNumber,logsBloom:e.logsBloom,gasUsed:e.gasUsed,cumulativeGasUsed:e.cumulativeGasUsed,blobGasUsed:e.blobGasUsed,gasPrice:n,blobGasPrice:e.blobGasPrice,type:e.type,status:e.status,root:e.root})}get logs(){return this.#J}toJSON(){const{to:e,from:t,contractAddress:n,hash:r,index:s,blockHash:i,blockNumber:o,logsBloom:a,logs:l,status:c,root:u}=this;return{_type:"TransactionReceipt",blockHash:i,blockNumber:o,contractAddress:n,cumulativeGasUsed:ao(this.cumulativeGasUsed),from:t,gasPrice:ao(this.gasPrice),blobGasUsed:ao(this.blobGasUsed),blobGasPrice:ao(this.blobGasPrice),gasUsed:ao(this.gasUsed),hash:r,index:s,logs:l,logsBloom:a,root:u,status:c,to:e}}get length(){return this.logs.length}[Symbol.iterator](){let e=0;return{next:()=>e<this.length?{value:this.logs[e++],done:!1}:{value:void 0,done:!0}}}get fee(){return this.gasUsed*this.gasPrice}async getBlock(){const e=await this.provider.getBlock(this.blockHash);if(null==e)throw new Error("TODO");return e}async getTransaction(){const e=await this.provider.getTransaction(this.hash);if(null==e)throw new Error("TODO");return e}async getResult(){return await this.provider.getTransactionResult(this.hash)}async confirmations(){return await this.provider.getBlockNumber()-this.blockNumber+1}removedEvent(){return go(this)}reorderedEvent(e){return vn(!e||e.isMined(),"unmined 'other' transction cannot be orphaned","UNSUPPORTED_OPERATION",{operation:"reorderedEvent(other)"}),mo(this,e)}}class fo{provider;blockNumber;blockHash;index;hash;type;to;from;nonce;gasLimit;gasPrice;maxPriorityFeePerGas;maxFeePerGas;maxFeePerBlobGas;data;value;chainId;signature;accessList;blobVersionedHashes;#K;constructor(e,t){this.provider=t,this.blockNumber=null!=e.blockNumber?e.blockNumber:null,this.blockHash=null!=e.blockHash?e.blockHash:null,this.hash=e.hash,this.index=e.index,this.type=e.type,this.from=e.from,this.to=e.to||null,this.gasLimit=e.gasLimit,this.nonce=e.nonce,this.data=e.data,this.value=e.value,this.gasPrice=e.gasPrice,this.maxPriorityFeePerGas=null!=e.maxPriorityFeePerGas?e.maxPriorityFeePerGas:null,this.maxFeePerGas=null!=e.maxFeePerGas?e.maxFeePerGas:null,this.maxFeePerBlobGas=null!=e.maxFeePerBlobGas?e.maxFeePerBlobGas:null,this.chainId=e.chainId,this.signature=e.signature,this.accessList=null!=e.accessList?e.accessList:null,this.blobVersionedHashes=null!=e.blobVersionedHashes?e.blobVersionedHashes:null,this.#K=-1}toJSON(){const{blockNumber:e,blockHash:t,index:n,hash:r,type:s,to:i,from:o,nonce:a,data:l,signature:c,accessList:u,blobVersionedHashes:h}=this;return{_type:"TransactionResponse",accessList:u,blockNumber:e,blockHash:t,blobVersionedHashes:h,chainId:ao(this.chainId),data:l,from:o,gasLimit:ao(this.gasLimit),gasPrice:ao(this.gasPrice),hash:r,maxFeePerGas:ao(this.maxFeePerGas),maxPriorityFeePerGas:ao(this.maxPriorityFeePerGas),maxFeePerBlobGas:ao(this.maxFeePerBlobGas),nonce:a,signature:c,to:i,index:n,type:s,value:ao(this.value)}}async getBlock(){let e=this.blockNumber;if(null==e){const t=await this.getTransaction();t&&(e=t.blockNumber)}if(null==e)return null;const t=this.provider.getBlock(e);if(null==t)throw new Error("TODO");return t}async getTransaction(){return this.provider.getTransaction(this.hash)}async confirmations(){if(null==this.blockNumber){const{tx:e,blockNumber:t}=await fn({tx:this.getTransaction(),blockNumber:this.provider.getBlockNumber()});return null==e||null==e.blockNumber?0:t-e.blockNumber+1}return await this.provider.getBlockNumber()-this.blockNumber+1}async wait(e,t){const n=null==e?1:e,r=null==t?0:t;let s=this.#K,i=-1,o=-1===s;const a=async()=>{if(o)return null;const{blockNumber:e,nonce:t}=await fn({blockNumber:this.provider.getBlockNumber(),nonce:this.provider.getTransactionCount(this.from)});if(t<this.nonce)return void(s=e);if(o)return null;const r=await this.getTransaction();if(!r||null==r.blockNumber)for(-1===i&&(i=s-3,i<this.#K&&(i=this.#K));i<=e;){if(o)return null;const t=await this.provider.getBlock(i,!0);if(null==t)return;for(const e of t)if(e===this.hash)return;for(let r=0;r<t.length;r++){const i=await t.getTransaction(r);if(i.from===this.from&&i.nonce===this.nonce){if(o)return null;const t=await this.provider.getTransactionReceipt(i.hash);if(null==t)return;if(e-t.blockNumber+1<n)return;let r="replaced";i.data===this.data&&i.to===this.to&&i.value===this.value?r="repriced":"0x"===i.data&&i.from===i.to&&i.value===io&&(r="cancelled"),vn(!1,"transaction was replaced","TRANSACTION_REPLACED",{cancelled:"replaced"===r||"cancelled"===r,reason:r,replacement:i.replaceableTransaction(s),hash:i.hash,receipt:t})}}i++}},l=e=>{if(null==e||0!==e.status)return e;vn(!1,"transaction execution reverted","CALL_EXCEPTION",{action:"sendTransaction",data:null,reason:null,invocation:null,revert:null,transaction:{to:e.to,from:e.from,data:""},receipt:e})},c=await this.provider.getTransactionReceipt(this.hash);if(0===n)return l(c);if(c){if(await c.confirmations()>=n)return l(c)}else if(await a(),0===n)return null;const u=new Promise(((e,t)=>{const i=[],c=()=>{i.forEach((e=>e()))};if(i.push((()=>{o=!0})),r>0){const e=setTimeout((()=>{c(),t(wn("wait for transaction timeout","TIMEOUT"))}),r);i.push((()=>{clearTimeout(e)}))}const u=async r=>{if(await r.confirmations()>=n){c();try{e(l(r))}catch(e){t(e)}}};if(i.push((()=>{this.provider.off(this.hash,u)})),this.provider.on(this.hash,u),s>=0){const e=async()=>{try{await a()}catch(e){if(yn(e,"TRANSACTION_REPLACED"))return c(),void t(e)}o||this.provider.once("block",e)};i.push((()=>{this.provider.off("block",e)})),this.provider.once("block",e)}}));return await u}isMined(){return null!=this.blockHash}isLegacy(){return 0===this.type}isBerlin(){return 1===this.type}isLondon(){return 2===this.type}isCancun(){return 3===this.type}removedEvent(){return vn(this.isMined(),"unmined transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),go(this)}reorderedEvent(e){return vn(this.isMined(),"unmined transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),vn(!e||e.isMined(),"unmined 'other' transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),mo(this,e)}replaceableTransaction(e){An(Number.isInteger(e)&&e>=0,"invalid startBlock","startBlock",e);const t=new fo(this,this.provider);return t.#K=e,t}}function mo(e,t){return{orphan:"reorder-transaction",tx:e,other:t}}function go(e){return{orphan:"drop-transaction",tx:e}}class yo{filter;emitter;#W;constructor(e,t,n){this.#W=t,mn(this,{emitter:e,filter:n})}async removeListener(){null!=this.#W&&await this.emitter.off(this.filter,this.#W)}}class bo extends ho{interface;fragment;args;constructor(e,t,n){super(e,e.provider),mn(this,{args:t.decodeEventLog(n,e.data,e.topics),fragment:n,interface:t})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}class wo extends ho{error;constructor(e,t){super(e,e.provider),mn(this,{error:t})}}class vo extends po{#Y;constructor(e,t,n){super(n,t),this.#Y=e}get logs(){return super.logs.map((e=>{const t=e.topics.length?this.#Y.getEvent(e.topics[0]):null;if(t)try{return new bo(e,this.#Y,t)}catch(t){return new wo(e,t)}return e}))}}class Ao extends fo{#Y;constructor(e,t,n){super(n,t),this.#Y=e}async wait(e,t){const n=await super.wait(e,t);return null==n?null:new vo(this.#Y,this.provider,n)}}class _o extends yo{log;constructor(e,t,n,r){super(e,t,n),mn(this,{log:r})}async getBlock(){return await this.log.getBlock()}async getTransaction(){return await this.log.getTransaction()}async getTransactionReceipt(){return await this.log.getTransactionReceipt()}}class Eo extends _o{constructor(e,t,n,r,s){super(e,t,n,new bo(s,e.interface,r)),mn(this,{args:e.interface.decodeEventLog(r,this.log.data,this.log.topics),fragment:r})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}const ko=BigInt(0);function xo(e){return e&&"function"==typeof e.call}function Co(e){return e&&"function"==typeof e.estimateGas}function No(e){return e&&"function"==typeof e.resolveName}function Po(e){return e&&"function"==typeof e.sendTransaction}function Ro(e){if(null!=e){if(No(e))return e;if(e.provider)return e.provider}}class Oo{#Z;fragment;constructor(e,t,n){if(mn(this,{fragment:t}),t.inputs.length<n.length)throw new Error("too many arguments");const r=Bo(e.runner,"resolveName"),s=No(r)?r:null;this.#Z=async function(){const r=await Promise.all(t.inputs.map(((e,t)=>null==n[t]?null:e.walkAsync(n[t],((e,t)=>"address"===e?Array.isArray(t)?Promise.all(t.map((e=>wi(e,s)))):wi(t,s):t)))));return e.interface.encodeFilterTopics(t,r)}()}getTopicFilter(){return this.#Z}}function Bo(e,t){return null==e?null:"function"==typeof e[t]?e:e.provider&&"function"==typeof e.provider[t]?e.provider:null}function So(e){return null==e?null:e.provider||null}async function To(e,t){const n=Yr.dereference(e,"overrides");An("object"==typeof n,"invalid overrides parameter","overrides",e);const r=co(n);return An(null==r.to||(t||[]).indexOf("to")>=0,"cannot override to","overrides.to",r.to),An(null==r.data||(t||[]).indexOf("data")>=0,"cannot override data","overrides.data",r.data),r.from&&(r.from=r.from),r}function Io(e){const t=async function(t){const n=await To(t,["data"]);n.to=await e.getAddress(),n.from&&(n.from=await wi(n.from,Ro(e.runner)));const r=e.interface,s=jn(n.value||ko,"overrides.value")===ko,i="0x"===(n.data||"0x");return!r.fallback||r.fallback.payable||!r.receive||i||s||An(!1,"cannot send data to receive or send value to non-payable fallback","overrides",t),An(r.fallback||i,"cannot send data to receive-only contract","overrides.data",n.data),An(r.receive||r.fallback&&r.fallback.payable||s,"cannot send value to non-payable fallback","overrides.value",n.value),An(r.fallback||i,"cannot send data to receive-only contract","overrides.data",n.data),n},n=async function(n){const r=e.runner;vn(Po(r),"contract runner does not support sending transactions","UNSUPPORTED_OPERATION",{operation:"sendTransaction"});const s=await r.sendTransaction(await t(n)),i=So(e.runner);return new Ao(e.interface,i,s)},r=async e=>await n(e);return mn(r,{_contract:e,estimateGas:async function(n){const r=Bo(e.runner,"estimateGas");return vn(Co(r),"contract runner does not support gas estimation","UNSUPPORTED_OPERATION",{operation:"estimateGas"}),await r.estimateGas(await t(n))},populateTransaction:t,send:n,staticCall:async function(n){const r=Bo(e.runner,"call");vn(xo(r),"contract runner does not support calling","UNSUPPORTED_OPERATION",{operation:"call"});const s=await t(n);try{return await r.call(s)}catch(t){if(bn(t)&&t.data)throw e.interface.makeError(t.data,s);throw t}}}),r}const Fo=Symbol.for("_ethersInternal_contract"),Lo=new WeakMap;function Do(e){return Lo.get(e[Fo])}async function Mo(e,t){let n,r=null;if(Array.isArray(t)){const r=function(t){if(Pn(t,32))return t;const n=e.interface.getEvent(t);return An(n,"unknown fragment","name",t),n.topicHash};n=t.map((e=>null==e?null:Array.isArray(e)?e.map(r):r(e)))}else"*"===t?n=[null]:"string"==typeof t?Pn(t,32)?n=[t]:(r=e.interface.getEvent(t),An(r,"unknown fragment","event",t),n=[r.topicHash]):(s=t)&&"object"==typeof s&&"getTopicFilter"in s&&"function"==typeof s.getTopicFilter&&s.fragment?n=await t.getTopicFilter():"fragment"in t?(r=t.fragment,n=[r.topicHash]):An(!1,"unknown event name","event",t);var s;return n=n.map((e=>{if(null==e)return null;if(Array.isArray(e)){const t=Array.from(new Set(e.map((e=>e.toLowerCase()))).values());return 1===t.length?t[0]:(t.sort(),t)}return e.toLowerCase()})),{fragment:r,tag:n.map((e=>null==e?"null":Array.isArray(e)?e.join("|"):e)).join("&"),topics:n}}async function Uo(e,t){const{subs:n}=Do(e);return n.get((await Mo(e,t)).tag)||null}async function $o(e,t,n){const r=So(e.runner);vn(r,"contract runner does not support subscribing","UNSUPPORTED_OPERATION",{operation:t});const{fragment:s,tag:i,topics:o}=await Mo(e,n),{addr:a,subs:l}=Do(e);let c=l.get(i);if(!c){const t={address:a||e,topics:o},u=t=>{let r=s;if(null==r)try{r=e.interface.getEvent(t.topics[0])}catch(e){}if(r){const i=r,o=s?e.interface.decodeEventLog(s,t.data,t.topics):[];Vo(e,n,o,(r=>new Eo(e,r,n,i,t)))}else Vo(e,n,[],(r=>new _o(e,r,n,t)))};let h=[];c={tag:i,listeners:[],start:()=>{h.length||h.push(r.on(t,u))},stop:async()=>{if(0==h.length)return;let e=h;h=[],await Promise.all(e),r.off(t,u)}},l.set(i,c)}return c}let jo=Promise.resolve();async function Vo(e,t,n,r){try{await jo}catch(e){}const s=async function(e,t,n,r){await jo;const s=await Uo(e,t);if(!s)return!1;const i=s.listeners.length;return s.listeners=s.listeners.filter((({listener:t,once:s})=>{const i=Array.from(n);r&&i.push(r(s?null:t));try{t.call(e,...i)}catch(e){}return!s})),0===s.listeners.length&&(s.stop(),Do(e).subs.delete(s.tag)),i>0}(e,t,n,r);return jo=s,await s}const Ho=["then"];class Go{target;interface;runner;filters;[Fo];fallback;constructor(e,t,n,r){An("string"==typeof e||yi(e),"invalid value for Contract target","target",e),null==n&&(n=null);const s=so.from(t);let i;mn(this,{target:e,runner:n,interface:s}),Object.defineProperty(this,Fo,{value:{}});let o=null,a=null;if(r){const e=So(n);a=new Ao(this.interface,e,r)}let l=new Map;if("string"==typeof e)if(Pn(e))o=e,i=Promise.resolve(e);else{const t=Bo(n,"resolveName");if(!No(t))throw wn("contract runner does not support name resolution","UNSUPPORTED_OPERATION",{operation:"resolveName"});i=t.resolveName(e).then((t=>{if(null==t)throw wn("an ENS name used for a contract target must be correctly configured","UNCONFIGURED_NAME",{value:e});return Do(this).addr=t,t}))}else i=e.getAddress().then((e=>{if(null==e)throw new Error("TODO");return Do(this).addr=e,e}));var c;c={addrPromise:i,addr:o,deployTx:a,subs:l},Lo.set(this[Fo],c);const u=new Proxy({},{get:(e,t,n)=>{if("symbol"==typeof t||Ho.indexOf(t)>=0)return Reflect.get(e,t,n);try{return this.getEvent(t)}catch(e){if(!yn(e,"INVALID_ARGUMENT")||"key"!==e.argument)throw e}},has:(e,t)=>Ho.indexOf(t)>=0?Reflect.has(e,t):Reflect.has(e,t)||this.interface.hasEvent(String(t))});return mn(this,{filters:u}),mn(this,{fallback:s.receive||s.fallback?Io(this):null}),new Proxy(this,{get:(e,t,n)=>{if("symbol"==typeof t||t in e||Ho.indexOf(t)>=0)return Reflect.get(e,t,n);try{return e.getFunction(t)}catch(e){if(!yn(e,"INVALID_ARGUMENT")||"key"!==e.argument)throw e}},has:(e,t)=>"symbol"==typeof t||t in e||Ho.indexOf(t)>=0?Reflect.has(e,t):e.interface.hasFunction(t)})}connect(e){return new Go(this.target,this.interface,e)}attach(e){return new Go(e,this.interface,this.runner)}async getAddress(){return await Do(this).addrPromise}async getDeployedCode(){const e=So(this.runner);vn(e,"runner does not support .provider","UNSUPPORTED_OPERATION",{operation:"getDeployedCode"});const t=await e.getCode(await this.getAddress());return"0x"===t?null:t}async waitForDeployment(){const e=this.deploymentTransaction();if(e)return await e.wait(),this;if(null!=await this.getDeployedCode())return this;const t=So(this.runner);return vn(null!=t,"contract runner does not support .provider","UNSUPPORTED_OPERATION",{operation:"waitForDeployment"}),new Promise(((e,n)=>{const r=async()=>{try{if(null!=await this.getDeployedCode())return e(this);t.once("block",r)}catch(e){n(e)}};r()}))}deploymentTransaction(){return Do(this).deployTx}getFunction(e){return"string"!=typeof e&&(e=e.format()),function(e,t){const n=function(...n){const r=e.interface.getFunction(t,n);return vn(r,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t,args:n}}),r},r=async function(...t){const r=n(...t);let s={};if(r.inputs.length+1===t.length&&(s=await To(t.pop()),s.from&&(s.from=await wi(s.from,Ro(e.runner)))),r.inputs.length!==t.length)throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");const i=await async function(e,t,n){const r=Bo(e,"resolveName"),s=No(r)?r:null;return await Promise.all(t.map(((e,t)=>e.walkAsync(n[t],((e,t)=>(t=Yr.dereference(t,e),"address"===e?wi(t,s):t))))))}(e.runner,r.inputs,t);return Object.assign({},s,await fn({to:e.getAddress(),data:e.interface.encodeFunctionData(r,i)}))},s=async function(...e){const t=await o(...e);return 1===t.length?t[0]:t},i=async function(...t){const n=e.runner;vn(Po(n),"contract runner does not support sending transactions","UNSUPPORTED_OPERATION",{operation:"sendTransaction"});const s=await n.sendTransaction(await r(...t)),i=So(e.runner);return new Ao(e.interface,i,s)},o=async function(...t){const s=Bo(e.runner,"call");vn(xo(s),"contract runner does not support calling","UNSUPPORTED_OPERATION",{operation:"call"});const i=await r(...t);let o="0x";try{o=await s.call(i)}catch(t){if(bn(t)&&t.data)throw e.interface.makeError(t.data,i);throw t}const a=n(...t);return e.interface.decodeFunctionResult(a,o)},a=async(...e)=>n(...e).constant?await s(...e):await i(...e);return mn(a,{name:e.interface.getFunctionName(t),_contract:e,_key:t,getFragment:n,estimateGas:async function(...t){const n=Bo(e.runner,"estimateGas");return vn(Co(n),"contract runner does not support gas estimation","UNSUPPORTED_OPERATION",{operation:"estimateGas"}),await n.estimateGas(await r(...t))},populateTransaction:r,send:i,staticCall:s,staticCallResult:o}),Object.defineProperty(a,"fragment",{configurable:!1,enumerable:!0,get:()=>{const n=e.interface.getFunction(t);return vn(n,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t}}),n}}),a}(this,e)}getEvent(e){return"string"!=typeof e&&(e=e.format()),function(e,t){const n=function(...n){const r=e.interface.getEvent(t,n);return vn(r,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t,args:n}}),r},r=function(...t){return new Oo(e,n(...t),t)};return mn(r,{name:e.interface.getEventName(t),_contract:e,_key:t,getFragment:n}),Object.defineProperty(r,"fragment",{configurable:!1,enumerable:!0,get:()=>{const n=e.interface.getEvent(t);return vn(n,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t}}),n}}),r}(this,e)}async queryTransaction(e){throw new Error("@TODO")}async queryFilter(e,t,n){null==t&&(t=0),null==n&&(n="latest");const{addr:r,addrPromise:s}=Do(this),i=r||await s,{fragment:o,topics:a}=await Mo(this,e),l={address:i,topics:a,fromBlock:t,toBlock:n},c=So(this.runner);return vn(c,"contract runner does not have a provider","UNSUPPORTED_OPERATION",{operation:"queryFilter"}),(await c.getLogs(l)).map((e=>{let t=o;if(null==t)try{t=this.interface.getEvent(e.topics[0])}catch(e){}if(t)try{return new bo(e,this.interface,t)}catch(t){return new wo(e,t)}return new ho(e,c)}))}async on(e,t){const n=await $o(this,"on",e);return n.listeners.push({listener:t,once:!1}),n.start(),this}async once(e,t){const n=await $o(this,"once",e);return n.listeners.push({listener:t,once:!0}),n.start(),this}async emit(e,...t){return await Vo(this,e,t,null)}async listenerCount(e){if(e){const t=await Uo(this,e);return t?t.listeners.length:0}const{subs:t}=Do(this);let n=0;for(const{listeners:e}of t.values())n+=e.length;return n}async listeners(e){if(e){const t=await Uo(this,e);return t?t.listeners.map((({listener:e})=>e)):[]}const{subs:t}=Do(this);let n=[];for(const{listeners:e}of t.values())n=n.concat(e.map((({listener:e})=>e)));return n}async off(e,t){const n=await Uo(this,e);if(!n)return this;if(t){const e=n.listeners.map((({listener:e})=>e)).indexOf(t);e>=0&&n.listeners.splice(e,1)}return null!=t&&0!==n.listeners.length||(n.stop(),Do(this).subs.delete(n.tag)),this}async removeAllListeners(e){if(e){const t=await Uo(this,e);if(!t)return this;t.stop(),Do(this).subs.delete(t.tag)}else{const{subs:e}=Do(this);for(const{tag:t,stop:n}of e.values())n(),e.delete(t)}return this}async addListener(e,t){return await this.on(e,t)}async removeListener(e,t){return await this.off(e,t)}static buildClass(e){return class extends Go{constructor(t,n=null){super(t,e,n)}}}static from(e,t,n){return null==n&&(n=null),new this(e,t,n)}}class zo extends(function(){return Go}()){}var qo="";const Qo=new Map([[8217,"apostrophe"],[8260,"fraction slash"],[12539,"middle dot"]]),Jo=4;function Ko(e){return function(e){let t=0;return()=>e[t++]}(function(e){let t=0;function n(){return e[t++]<<8|e[t++]}let r=n(),s=1,i=[0,1];for(let e=1;e<r;e++)i.push(s+=n());let o=n(),a=t;t+=o;let l=0,c=0;function u(){return 0==l&&(c=c<<8|e[t++],l=8),c>>--l&1}const h=2**31,d=h>>>1,p=h-1;let f=0;for(let e=0;e<31;e++)f=f<<1|u();let m=[],g=0,y=h;for(;;){let e=Math.floor(((f-g+1)*s-1)/y),t=0,n=r;for(;n-t>1;){let r=t+n>>>1;e<i[r]?n=r:t=r}if(0==t)break;m.push(t);let o=g+Math.floor(y*i[t]/s),a=g+Math.floor(y*i[t+1]/s)-1;for(;0==((o^a)&d);)f=f<<1&p|u(),o=o<<1&p,a=a<<1&p|1;for(;o&~a&536870912;)f=f&d|f<<1&p>>>1|u(),o=o<<1^d,a=(a^d)<<1|d|1;g=o,y=1+a-o}let b=r-4;return m.map((t=>{switch(t-b){case 3:return b+65792+(e[a++]<<16|e[a++]<<8|e[a++]);case 2:return b+256+(e[a++]<<8|e[a++]);case 1:return b+e[a++];default:return t-1}}))}(function(e){let t=[];[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach(((e,n)=>t[e.charCodeAt(0)]=n));let n=e.length,r=new Uint8Array(6*n>>3);for(let s=0,i=0,o=0,a=0;s<n;s++)a=a<<6|t[e.charCodeAt(s)],o+=6,o>=8&&(r[i++]=a>>(o-=8));return r}(e)))}function Wo(e){return 1&e?~e>>1:e>>1}function Yo(e,t){let n=Array(e);for(let r=0,s=0;r<e;r++)n[r]=s+=Wo(t());return n}function Zo(e,t=0){let n=[];for(;;){let r=e(),s=e();if(!s)break;t+=r;for(let e=0;e<s;e++)n.push(t+e);t+=s+1}return n}function Xo(e){return ta((()=>{let t=Zo(e);if(t.length)return t}))}function ea(e){let t=[];for(;;){let n=e();if(0==n)break;t.push(ra(n,e))}for(;;){let n=e()-1;if(n<0)break;t.push(sa(n,e))}return t.flat()}function ta(e){let t=[];for(;;){let n=e(t.length);if(!n)break;t.push(n)}return t}function na(e,t,n){let r=Array(e).fill().map((()=>[]));for(let s=0;s<t;s++)Yo(e,n).forEach(((e,t)=>r[t].push(e)));return r}function ra(e,t){let n=1+t(),r=t(),s=ta(t);return na(s.length,1+e,t).flatMap(((e,t)=>{let[i,...o]=e;return Array(s[t]).fill().map(((e,t)=>{let s=t*r;return[i+t*n,o.map((e=>e+s))]}))}))}function sa(e,t){return na(1+t(),1+e,t).map((e=>[e[0],e.slice(1)]))}function ia(e){return`{${function(e){return e.toString(16).toUpperCase().padStart(2,"0")}(e)}}`}function oa(e){let t=e.length;if(t<4096)return String.fromCodePoint(...e);let n=[];for(let r=0;r<t;)n.push(String.fromCodePoint(...e.slice(r,r+=4096)));return n.join("")}function aa(e,t){let n=e.length,r=n-t.length;for(let s=0;0==r&&s<n;s++)r=e[s]-t[s];return r}var la="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";const ca=44032,ua=4352,ha=4449,da=4519,pa=28,fa=21*pa,ma=ca+19*fa,ga=ua+19,ya=ha+21,ba=da+pa;function wa(e){return e>>24&255}function va(e){return 16777215&e}let Aa,_a,Ea,ka;function xa(e){return e>=ca&&e<ma}function Ca(e,t){if(e>=ua&&e<ga&&t>=ha&&t<ya)return ca+(e-ua)*fa+(t-ha)*pa;if(xa(e)&&t>da&&t<ba&&(e-ca)%pa==0)return e+(t-da);{let n=ka.get(e);return n&&(n=n.get(t),n)?n:-1}}function Na(e){Aa||function(){let e=Ko(la);Aa=new Map(Xo(e).flatMap(((e,t)=>e.map((e=>[e,t+1<<24]))))),_a=new Set(Zo(e)),Ea=new Map,ka=new Map;for(let[t,n]of ea(e)){if(!_a.has(t)&&2==n.length){let[e,r]=n,s=ka.get(e);s||(s=new Map,ka.set(e,s)),s.set(r,t)}Ea.set(t,n.reverse())}}();let t=[],n=[],r=!1;function s(e){let n=Aa.get(e);n&&(r=!0,e|=n),t.push(e)}for(let r of e)for(;;){if(r<128)t.push(r);else if(xa(r)){let e=r-ca,t=e%fa/pa|0,n=e%pa;s(ua+(e/fa|0)),s(ha+t),n>0&&s(da+n)}else{let e=Ea.get(r);e?n.push(...e):s(r)}if(!n.length)break;r=n.pop()}if(r&&t.length>1){let e=wa(t[0]);for(let n=1;n<t.length;n++){let r=wa(t[n]);if(0==r||e<=r){e=r;continue}let s=n-1;for(;;){let n=t[s+1];if(t[s+1]=t[s],t[s]=n,!s)break;if(e=wa(t[--s]),e<=r)break}e=wa(t[n])}}return t}function Pa(e){return Na(e).map(va)}function Ra(e){return function(e){let t=[],n=[],r=-1,s=0;for(let i of e){let e=wa(i),o=va(i);if(-1==r)0==e?r=o:t.push(o);else if(s>0&&s>=e)0==e?(t.push(r,...n),n.length=0,r=o):n.push(o),s=e;else{let i=Ca(r,o);i>=0?r=i:0==s&&0==e?(t.push(r),r=o):(n.push(o),s=e)}}return r>=0&&t.push(r,...n),t}(Na(e))}const Oa=45,Ba=".",Sa=65039,Ta=1,Ia=e=>Array.from(e);function Fa(e,t){return e.P.has(t)||e.Q.has(t)}class La extends Array{get is_emoji(){return!0}}let Da,Ma,Ua,$a,ja,Va,Ha,Ga,za,qa,Qa,Ja;function Ka(){if(Da)return;let e=Ko(qo);const t=()=>Zo(e),n=()=>new Set(t()),r=(e,t)=>t.forEach((t=>e.add(t)));Da=new Map(ea(e)),Ma=n(),Ua=t(),$a=new Set(t().map((e=>Ua[e]))),Ua=new Set(Ua),ja=n(),Va=n();let s=Xo(e),i=e();const o=()=>{let e=new Set;return t().forEach((t=>r(e,s[t]))),r(e,t()),e};Ha=ta((t=>{let n=ta(e).map((e=>e+96));if(n.length){let r=t>=i;return n[0]-=32,n=oa(n),r&&(n=`Restricted[${n}]`),{N:n,P:o(),Q:o(),M:!e(),R:r}}})),Ga=n(),za=new Map;let a=t().concat(Ia(Ga)).sort(((e,t)=>e-t));a.forEach(((t,n)=>{let r=e(),s=a[n]=r?a[n-r]:{V:[],M:new Map};s.V.push(t),Ga.has(t)||za.set(t,s)}));for(let{V:e,M:t}of new Set(za.values())){let n=[];for(let t of e){let e=Ha.filter((e=>Fa(e,t))),s=n.find((({G:t})=>e.some((e=>t.has(e)))));s||(s={G:new Set,V:[]},n.push(s)),s.V.push(t),r(s.G,e)}let s=n.flatMap((e=>Ia(e.G)));for(let{G:e,V:r}of n){let n=new Set(s.filter((t=>!e.has(t))));for(let e of r)t.set(e,n)}}qa=new Set;let l=new Set;const c=e=>qa.has(e)?l.add(e):qa.add(e);for(let e of Ha){for(let t of e.P)c(t);for(let t of e.Q)c(t)}for(let e of qa)za.has(e)||l.has(e)||za.set(e,Ta);r(qa,Pa(qa)),Qa=function(e){let t=[],n=Zo(e);return function e({S:n,B:r},s,i){if(!(4&n&&i===s[s.length-1])){2&n&&(i=s[s.length-1]),1&n&&t.push(s);for(let t of r)for(let n of t.Q)e(t,[...s,n],i)}}(function t(r){let s=e(),i=ta((()=>{let r=Zo(e).map((e=>n[e]));if(r.length)return t(r)}));return{S:s,B:i,Q:r}}([]),[]),t}(e).map((e=>La.from(e))).sort(aa),Ja=new Map;for(let e of Qa){let t=[Ja];for(let n of e){let e=t.map((e=>{let t=e.get(n);return t||(t=new Map,e.set(n,t)),t}));n===Sa?t.push(...e):t=e}for(let n of t)n.V=e}}function Wa(e){return(Xa(e)?"":`${Ya(Za([e]))} `)+ia(e)}function Ya(e){return`"${e}"‎`}function Za(e,t=1/0,n=ia){let r=[];var s;s=e[0],Ka(),Ua.has(s)&&r.push("◌"),e.length>t&&(t>>=1,e=[...e.slice(0,t),8230,...e.slice(-t)]);let i=0,o=e.length;for(let t=0;t<o;t++){let s=e[t];Xa(s)&&(r.push(oa(e.slice(i,t))),r.push(n(s)),i=t+1)}return r.push(oa(e.slice(i,o))),r.join("")}function Xa(e){return Ka(),ja.has(e)}function el(e,t,n){if(!e)return[];Ka();let r=0;return e.split(Ba).map((e=>{let s=function(e){let t=[];for(let n=0,r=e.length;n<r;){let r=e.codePointAt(n);n+=r<65536?1:2,t.push(r)}return t}(e),i={input:s,offset:r};r+=s.length+1;try{let e,r=i.tokens=function(e,t,n){let r=[],s=[];for(e=e.slice().reverse();e.length;){let i=il(e);if(i)s.length&&(r.push(t(s)),s=[]),r.push(n(i));else{let t=e.pop();if(qa.has(t))s.push(t);else{let e=Da.get(t);if(e)s.push(...e);else if(!Ma.has(t))throw tl(t)}}}return s.length&&r.push(t(s)),r}(s,t,n),o=r.length;if(!o)throw new Error("empty label");let a=i.output=r.flat();if(function(e){for(let t=e.lastIndexOf(95);t>0;)if(95!==e[--t])throw new Error("underscore allowed only at start")}(a),!(i.emoji=o>1||r[0].is_emoji)&&a.every((e=>e<128)))!function(e){if(e.length>=4&&e[2]==Oa&&e[3]==Oa)throw new Error(`invalid label extension: "${oa(e.slice(0,4))}"`)}(a),e="ASCII";else{let t=r.flatMap((e=>e.is_emoji?[]:e));if(t.length){if(Ua.has(a[0]))throw rl("leading combining mark");for(let e=1;e<o;e++){let t=r[e];if(!t.is_emoji&&Ua.has(t[0]))throw rl(`emoji + combining mark: "${oa(r[e-1])} + ${Za([t[0]])}"`)}!function(e){let t=e[0],n=Qo.get(t);if(n)throw rl(`leading ${n}`);let r=e.length,s=-1;for(let i=1;i<r;i++){t=e[i];let r=Qo.get(t);if(r){if(s==i)throw rl(`${n} + ${r}`);s=i+1,n=r}}if(s==r)throw rl(`trailing ${n}`)}(a);let n=Ia(new Set(t)),[s]=function(e){let t=Ha;for(let n of e){let e=t.filter((e=>Fa(e,n)));if(!e.length)throw Ha.some((e=>Fa(e,n)))?nl(t[0],n):tl(n);if(t=e,1==e.length)break}return t}(n);!function(e,t){for(let n of t)if(!Fa(e,n))throw nl(e,n);if(e.M){let e=Pa(t);for(let t=1,n=e.length;t<n;t++)if($a.has(e[t])){let r=t+1;for(let s;r<n&&$a.has(s=e[r]);r++)for(let n=t;n<r;n++)if(e[n]==s)throw new Error(`duplicate non-spacing marks: ${Wa(s)}`);if(r-t>Jo)throw new Error(`excessive non-spacing marks: ${Ya(Za(e.slice(t-1,r)))} (${r-t}/${Jo})`);t=r}}}(s,t),function(e,t){let n,r=[];for(let e of t){let t=za.get(e);if(t===Ta)return;if(t){let r=t.M.get(e);if(n=n?n.filter((e=>r.has(e))):Ia(r),!n.length)return}else r.push(e)}if(n)for(let t of n)if(r.every((e=>Fa(t,e))))throw new Error(`whole-script confusable: ${e.N}/${t.N}`)}(s,n),e=s.N}else e="Emoji"}i.type=e}catch(e){i.error=e}return i}))}function tl(e){return new Error(`disallowed character: ${Wa(e)}`)}function nl(e,t){let n=Wa(t),r=Ha.find((e=>e.P.has(t)));return r&&(n=`${r.N} ${n}`),new Error(`illegal mixture: ${e.N} + ${n}`)}function rl(e){return new Error(`illegal placement: ${e}`)}function sl(e){return e.filter((e=>e!=Sa))}function il(e,t){let n,r=Ja,s=e.length;for(;s&&(r=r.get(e[--s]),r);){let{V:i}=r;i&&(n=i,t&&t.push(...e.slice(s).reverse()),e.length=s)}return n}const ol=new Uint8Array(32);function al(e){return An(0!==e.length,"invalid ENS name; empty component","comp",e),e}function ll(e){const t=ms(function(e){try{if(0===e.length)throw new Error("empty label");return function(e){return function(e){return e.map((({input:t,error:n,output:r})=>{if(n){let r=n.message;throw new Error(1==e.length?r:`Invalid label ${Ya(Za(t,63))}: ${r}`)}return oa(r)})).join(Ba)}(el(e,Ra,sl))}(e)}catch(t){An(!1,`invalid ENS name (${t.message})`,"name",e)}}(e)),n=[];if(0===e.length)return n;let r=0;for(let e=0;e<t.length;e++)46===t[e]&&(n.push(al(t.slice(r,e))),r=e+1);return An(r<t.length,"invalid ENS name; empty component","name",e),n.push(al(t.slice(r))),n}function cl(e){An("string"==typeof e,"invalid ENS name; not a string","name",e),An(e.length,"invalid ENS name (empty label)","name",e);let t=ol;const n=ll(e);for(;n.length;)t=Ur(Bn([t,Ur(n.pop())]));return On(t)}function ul(e,t){const n=null!=t?t:63;return An(n<=255,"DNS encoded label cannot exceed 255","length",n),On(Bn(ll(e).map((t=>{An(t.length<=n,`label ${JSON.stringify(e)} exceeds ${n} bytes`,"name",e);const r=new Uint8Array(t.length+1);return r.set(t,1),r[0]=r.length-1,r}))))+"00"}ol.fill(0);const hl="0x0000000000000000000000000000000000000000000000000000000000000000",dl=BigInt(0),pl=BigInt(1),fl=BigInt(2),ml=BigInt(27),gl=BigInt(28),yl=BigInt(35),bl={};function wl(e){return Fn(Qn(e),32)}class vl{#X;#ee;#te;#ne;get r(){return this.#X}set r(e){An(32===Sn(e),"invalid r","value",e),this.#X=On(e)}get s(){return this.#ee}set s(e){An(32===Sn(e),"invalid s","value",e);const t=On(e);An(parseInt(t.substring(0,3))<8,"non-canonical s","value",t),this.#ee=t}get v(){return this.#te}set v(e){const t=zn(e,"value");An(27===t||28===t,"invalid v","v",e),this.#te=t}get networkV(){return this.#ne}get legacyChainId(){const e=this.networkV;return null==e?null:vl.getChainId(e)}get yParity(){return 27===this.v?0:1}get yParityAndS(){const e=Cn(this.s);return this.yParity&&(e[0]|=128),On(e)}get compactSerialized(){return Bn([this.r,this.yParityAndS])}get serialized(){return Bn([this.r,this.s,this.yParity?"0x1c":"0x1b"])}constructor(e,t,n,r){kn(e,bl,"Signature"),this.#X=t,this.#ee=n,this.#te=r,this.#ne=null}[Symbol.for("nodejs.util.inspect.custom")](){return`Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`}clone(){const e=new vl(bl,this.r,this.s,this.v);return this.networkV&&(e.#ne=this.networkV),e}toJSON(){const e=this.networkV;return{_type:"signature",networkV:null!=e?e.toString():null,r:this.r,s:this.s,v:this.v}}static getChainId(e){const t=jn(e,"v");return t==ml||t==gl?dl:(An(t>=yl,"invalid EIP-155 v","v",e),(t-yl)/fl)}static getChainIdV(e,t){return jn(e)*fl+BigInt(35+t-27)}static getNormalizedV(e){const t=jn(e);return t===dl||t===ml?27:t===pl||t===gl?28:(An(t>=yl,"invalid v","v",e),t&pl?27:28)}static from(e){function t(t,n){An(t,n,"signature",e)}if(null==e)return new vl(bl,hl,hl,27);if("string"==typeof e){const n=Cn(e,"signature");if(64===n.length){const e=On(n.slice(0,32)),t=n.slice(32,64),r=128&t[0]?28:27;return t[0]&=127,new vl(bl,e,On(t),r)}if(65===n.length){const e=On(n.slice(0,32)),r=n.slice(32,64);t(0==(128&r[0]),"non-canonical s");const s=vl.getNormalizedV(n[64]);return new vl(bl,e,On(r),s)}t(!1,"invalid raw signature length")}if(e instanceof vl)return e.clone();const n=e.r;t(null!=n,"missing r");const r=wl(n),s=function(e,n){if(null!=e)return wl(e);if(null!=n){t(Pn(n,32),"invalid yParityAndS");const e=Cn(n);return e[0]&=127,On(e)}t(!1,"missing s")}(e.s,e.yParityAndS);t(0==(128&Cn(s)[0]),"non-canonical s");const{networkV:i,v:o}=function(e,n,r){if(null!=e){const t=jn(e);return{networkV:t>=yl?t:void 0,v:vl.getNormalizedV(t)}}if(null!=n)return t(Pn(n,32),"invalid yParityAndS"),{v:128&Cn(n)[0]?28:27};if(null!=r){switch(zn(r,"sig.yParity")){case 0:return{v:27};case 1:return{v:28}}t(!1,"invalid yParity")}t(!1,"missing v")}(e.v,e.yParityAndS,e.yParity),a=new vl(bl,r,s,o);return i&&(a.#ne=i),t(null==e.yParity||zn(e.yParity,"sig.yParity")===a.yParity,"yParity mismatch"),t(null==e.yParityAndS||e.yParityAndS===a.yParityAndS,"yParityAndS mismatch"),a}}class Al extends br{constructor(e,t,n,r){super(),this.blockLen=e,this.outputLen=t,this.padOffset=n,this.isLE=r,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=mr(this.buffer)}update(e){ar(this);const{view:t,buffer:n,blockLen:r}=this,s=(e=yr(e)).length;for(let i=0;i<s;){const o=Math.min(r-this.pos,s-i);if(o!==r)n.set(e.subarray(i,i+o),this.pos),this.pos+=o,i+=o,this.pos===r&&(this.process(t,0),this.pos=0);else{const t=mr(e);for(;r<=s-i;i+=r)this.process(t,i)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){ar(this),lr(e,this),this.finished=!0;const{buffer:t,view:n,blockLen:r,isLE:s}=this;let{pos:i}=this;t[i++]=128,this.buffer.subarray(i).fill(0),this.padOffset>r-i&&(this.process(n,0),i=0);for(let e=i;e<r;e++)t[e]=0;!function(e,t,n,r){if("function"==typeof e.setBigUint64)return e.setBigUint64(t,n,r);const s=BigInt(32),i=BigInt(4294967295),o=Number(n>>s&i),a=Number(n&i),l=r?4:0,c=r?0:4;e.setUint32(t+l,o,r),e.setUint32(t+c,a,r)}(n,r-8,BigInt(8*this.length),s),this.process(n,0);const o=mr(e),a=this.outputLen;if(a%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const l=a/4,c=this.get();if(l>c.length)throw new Error("_sha2: outputLen bigger than state");for(let e=0;e<l;e++)o.setUint32(4*e,c[e],s)}digest(){const{buffer:e,outputLen:t}=this;this.digestInto(e);const n=e.slice(0,t);return this.destroy(),n}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:t,buffer:n,length:r,finished:s,destroyed:i,pos:o}=this;return e.length=r,e.pos=o,e.finished=s,e.destroyed=i,r%t&&e.buffer.set(n),e}}const _l=(e,t,n)=>e&t^~e&n,El=(e,t,n)=>e&t^e&n^t&n,kl=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),xl=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),Cl=new Uint32Array(64);class Nl extends Al{constructor(){super(64,32,8,!1),this.A=0|xl[0],this.B=0|xl[1],this.C=0|xl[2],this.D=0|xl[3],this.E=0|xl[4],this.F=0|xl[5],this.G=0|xl[6],this.H=0|xl[7]}get(){const{A:e,B:t,C:n,D:r,E:s,F:i,G:o,H:a}=this;return[e,t,n,r,s,i,o,a]}set(e,t,n,r,s,i,o,a){this.A=0|e,this.B=0|t,this.C=0|n,this.D=0|r,this.E=0|s,this.F=0|i,this.G=0|o,this.H=0|a}process(e,t){for(let n=0;n<16;n++,t+=4)Cl[n]=e.getUint32(t,!1);for(let e=16;e<64;e++){const t=Cl[e-15],n=Cl[e-2],r=gr(t,7)^gr(t,18)^t>>>3,s=gr(n,17)^gr(n,19)^n>>>10;Cl[e]=s+Cl[e-7]+r+Cl[e-16]|0}let{A:n,B:r,C:s,D:i,E:o,F:a,G:l,H:c}=this;for(let e=0;e<64;e++){const t=c+(gr(o,6)^gr(o,11)^gr(o,25))+_l(o,a,l)+kl[e]+Cl[e]|0,u=(gr(n,2)^gr(n,13)^gr(n,22))+El(n,r,s)|0;c=l,l=a,a=o,o=i+t|0,i=s,s=r,r=n,n=t+u|0}n=n+this.A|0,r=r+this.B|0,s=s+this.C|0,i=i+this.D|0,o=o+this.E|0,a=a+this.F|0,l=l+this.G|0,c=c+this.H|0,this.set(n,r,s,i,o,a,l,c)}roundClean(){Cl.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const Pl=wr((()=>new Nl)),Rl=(BigInt(0),BigInt(1)),Ol=BigInt(2),Bl=e=>e instanceof Uint8Array,Sl=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,"0")));function Tl(e){if(!Bl(e))throw new Error("Uint8Array expected");let t="";for(let n=0;n<e.length;n++)t+=Sl[e[n]];return t}function Il(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);return BigInt(""===e?"0":`0x${e}`)}function Fl(e){if("string"!=typeof e)throw new Error("hex string expected, got "+typeof e);const t=e.length;if(t%2)throw new Error("padded hex string expected, got unpadded hex of length "+t);const n=new Uint8Array(t/2);for(let t=0;t<n.length;t++){const r=2*t,s=e.slice(r,r+2),i=Number.parseInt(s,16);if(Number.isNaN(i)||i<0)throw new Error("Invalid byte sequence");n[t]=i}return n}function Ll(e){return Il(Tl(e))}function Dl(e){if(!Bl(e))throw new Error("Uint8Array expected");return Il(Tl(Uint8Array.from(e).reverse()))}function Ml(e,t){return Fl(e.toString(16).padStart(2*t,"0"))}function Ul(e,t){return Ml(e,t).reverse()}function $l(e,t,n){let r;if("string"==typeof t)try{r=Fl(t)}catch(n){throw new Error(`${e} must be valid hex string, got "${t}". Cause: ${n}`)}else{if(!Bl(t))throw new Error(`${e} must be hex string or Uint8Array`);r=Uint8Array.from(t)}const s=r.length;if("number"==typeof n&&s!==n)throw new Error(`${e} expected ${n} bytes, got ${s}`);return r}function jl(...e){const t=new Uint8Array(e.reduce(((e,t)=>e+t.length),0));let n=0;return e.forEach((e=>{if(!Bl(e))throw new Error("Uint8Array expected");t.set(e,n),n+=e.length})),t}const Vl=e=>(Ol<<BigInt(e-1))-Rl,Hl=e=>new Uint8Array(e),Gl=e=>Uint8Array.from(e);function zl(e,t,n){if("number"!=typeof e||e<2)throw new Error("hashLen must be a number");if("number"!=typeof t||t<2)throw new Error("qByteLen must be a number");if("function"!=typeof n)throw new Error("hmacFn must be a function");let r=Hl(e),s=Hl(e),i=0;const o=()=>{r.fill(1),s.fill(0),i=0},a=(...e)=>n(s,r,...e),l=(e=Hl())=>{s=a(Gl([0]),e),r=a(),0!==e.length&&(s=a(Gl([1]),e),r=a())},c=()=>{if(i++>=1e3)throw new Error("drbg: tried 1000 values");let e=0;const n=[];for(;e<t;){r=a();const t=r.slice();n.push(t),e+=r.length}return jl(...n)};return(e,t)=>{let n;for(o(),l(e);!(n=t(c()));)l();return o(),n}}const ql={bigint:e=>"bigint"==typeof e,function:e=>"function"==typeof e,boolean:e=>"boolean"==typeof e,string:e=>"string"==typeof e,stringOrUint8Array:e=>"string"==typeof e||e instanceof Uint8Array,isSafeInteger:e=>Number.isSafeInteger(e),array:e=>Array.isArray(e),field:(e,t)=>t.Fp.isValid(e),hash:e=>"function"==typeof e&&Number.isSafeInteger(e.outputLen)};function Ql(e,t,n={}){const r=(t,n,r)=>{const s=ql[n];if("function"!=typeof s)throw new Error(`Invalid validator "${n}", expected function`);const i=e[t];if(!(r&&void 0===i||s(i,e)))throw new Error(`Invalid param ${String(t)}=${i} (${typeof i}), expected ${n}`)};for(const[e,n]of Object.entries(t))r(e,n,!1);for(const[e,t]of Object.entries(n))r(e,t,!0);return e}const Jl=BigInt(0),Kl=BigInt(1),Wl=BigInt(2),Yl=BigInt(3),Zl=BigInt(4),Xl=BigInt(5),ec=BigInt(8);function tc(e,t){const n=e%t;return n>=Jl?n:t+n}function nc(e,t,n){if(n<=Jl||t<Jl)throw new Error("Expected power/modulo > 0");if(n===Kl)return Jl;let r=Kl;for(;t>Jl;)t&Kl&&(r=r*e%n),e=e*e%n,t>>=Kl;return r}function rc(e,t,n){let r=e;for(;t-- >Jl;)r*=r,r%=n;return r}function sc(e,t){if(e===Jl||t<=Jl)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let n=tc(e,t),r=t,s=Jl,i=Kl,o=Kl,a=Jl;for(;n!==Jl;){const e=r/n,t=r%n,l=s-o*e,c=i-a*e;r=n,n=t,s=o,i=a,o=l,a=c}if(r!==Kl)throw new Error("invert: does not exist");return tc(s,t)}BigInt(9),BigInt(16);const ic=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function oc(e,t){const n=void 0!==t?t:e.toString(2).length;return{nBitLength:n,nByteLength:Math.ceil(n/8)}}function ac(e){if("bigint"!=typeof e)throw new Error("field order must be bigint");const t=e.toString(2).length;return Math.ceil(t/8)}function lc(e){const t=ac(e);return t+Math.ceil(t/2)}class cc extends br{constructor(e,t){super(),this.finished=!1,this.destroyed=!1,function(e){if("function"!=typeof e||"function"!=typeof e.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");ir(e.outputLen),ir(e.blockLen)}(e);const n=yr(t);if(this.iHash=e.create(),"function"!=typeof this.iHash.update)throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const r=this.blockLen,s=new Uint8Array(r);s.set(n.length>r?e.create().update(n).digest():n);for(let e=0;e<s.length;e++)s[e]^=54;this.iHash.update(s),this.oHash=e.create();for(let e=0;e<s.length;e++)s[e]^=106;this.oHash.update(s),s.fill(0)}update(e){return ar(this),this.iHash.update(e),this}digestInto(e){ar(this),or(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:t,iHash:n,finished:r,destroyed:s,blockLen:i,outputLen:o}=this;return e.finished=r,e.destroyed=s,e.blockLen=i,e.outputLen=o,e.oHash=t._cloneInto(e.oHash),e.iHash=n._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const uc=(e,t,n)=>new cc(e,t).update(n).digest();uc.create=(e,t)=>new cc(e,t);const hc=BigInt(0),dc=BigInt(1);function pc(e){return Ql(e.Fp,ic.reduce(((e,t)=>(e[t]="function",e)),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"})),Ql(e,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...oc(e.n,e.nBitLength),...e,p:e.Fp.ORDER})}const{bytesToNumberBE:fc,hexToBytes:mc}=e,gc={Err:class extends Error{constructor(e=""){super(e)}},_parseInt(e){const{Err:t}=gc;if(e.length<2||2!==e[0])throw new t("Invalid signature integer tag");const n=e[1],r=e.subarray(2,n+2);if(!n||r.length!==n)throw new t("Invalid signature integer: wrong length");if(128&r[0])throw new t("Invalid signature integer: negative");if(0===r[0]&&!(128&r[1]))throw new t("Invalid signature integer: unnecessary leading zero");return{d:fc(r),l:e.subarray(n+2)}},toSig(e){const{Err:t}=gc,n="string"==typeof e?mc(e):e;if(!(n instanceof Uint8Array))throw new Error("ui8a expected");let r=n.length;if(r<2||48!=n[0])throw new t("Invalid signature tag");if(n[1]!==r-2)throw new t("Invalid signature: incorrect length");const{d:s,l:i}=gc._parseInt(n.subarray(2)),{d:o,l:a}=gc._parseInt(i);if(a.length)throw new t("Invalid signature: left bytes after parsing");return{r:s,s:o}},hexFromSig(e){const t=e=>8&Number.parseInt(e[0],16)?"00"+e:e,n=e=>{const t=e.toString(16);return 1&t.length?`0${t}`:t},r=t(n(e.s)),s=t(n(e.r)),i=r.length/2,o=s.length/2,a=n(i),l=n(o);return`30${n(o+i+4)}02${l}${s}02${a}${r}`}},yc=BigInt(0),bc=BigInt(1),wc=(BigInt(2),BigInt(3));function vc(e){const t=function(e){const t=pc(e);return Ql(t,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...t})}(e),{Fp:n,n:r}=t,s=n.BYTES+1,i=2*n.BYTES+1;function o(e){return tc(e,r)}function a(e){return sc(e,r)}const{ProjectivePoint:l,normPrivateKeyToScalar:c,weierstrassEquation:u,isWithinCurveOrder:h}=function(e){const t=function(e){const t=pc(e);Ql(t,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo:n,Fp:r,a:s}=t;if(n){if(!r.eql(s,r.ZERO))throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");if("object"!=typeof n||"bigint"!=typeof n.beta||"function"!=typeof n.splitScalar)throw new Error("Expected endomorphism with beta: bigint and splitScalar: function")}return Object.freeze({...t})}(e),{Fp:n}=t,r=t.toBytes||((e,t,r)=>{const s=t.toAffine();return jl(Uint8Array.from([4]),n.toBytes(s.x),n.toBytes(s.y))}),s=t.fromBytes||(e=>{const t=e.subarray(1);return{x:n.fromBytes(t.subarray(0,n.BYTES)),y:n.fromBytes(t.subarray(n.BYTES,2*n.BYTES))}});function i(e){const{a:r,b:s}=t,i=n.sqr(e),o=n.mul(i,e);return n.add(n.add(o,n.mul(e,r)),s)}if(!n.eql(n.sqr(t.Gy),i(t.Gx)))throw new Error("bad generator point: equation left != right");function o(e){return"bigint"==typeof e&&yc<e&&e<t.n}function a(e){if(!o(e))throw new Error("Expected valid bigint: 0 < bigint < curve.n")}function l(e){const{allowedPrivateKeyLengths:n,nByteLength:r,wrapPrivateKey:s,n:i}=t;if(n&&"bigint"!=typeof e){if(e instanceof Uint8Array&&(e=Tl(e)),"string"!=typeof e||!n.includes(e.length))throw new Error("Invalid key");e=e.padStart(2*r,"0")}let o;try{o="bigint"==typeof e?e:Ll($l("private key",e,r))}catch(t){throw new Error(`private key must be ${r} bytes, hex or bigint, not ${typeof e}`)}return s&&(o=tc(o,i)),a(o),o}const c=new Map;function u(e){if(!(e instanceof h))throw new Error("ProjectivePoint expected")}class h{constructor(e,t,r){if(this.px=e,this.py=t,this.pz=r,null==e||!n.isValid(e))throw new Error("x required");if(null==t||!n.isValid(t))throw new Error("y required");if(null==r||!n.isValid(r))throw new Error("z required")}static fromAffine(e){const{x:t,y:r}=e||{};if(!e||!n.isValid(t)||!n.isValid(r))throw new Error("invalid affine point");if(e instanceof h)throw new Error("projective point not allowed");const s=e=>n.eql(e,n.ZERO);return s(t)&&s(r)?h.ZERO:new h(t,r,n.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(e){const t=n.invertBatch(e.map((e=>e.pz)));return e.map(((e,n)=>e.toAffine(t[n]))).map(h.fromAffine)}static fromHex(e){const t=h.fromAffine(s($l("pointHex",e)));return t.assertValidity(),t}static fromPrivateKey(e){return h.BASE.multiply(l(e))}_setWindowSize(e){this._WINDOW_SIZE=e,c.delete(this)}assertValidity(){if(this.is0()){if(t.allowInfinityPoint&&!n.is0(this.py))return;throw new Error("bad point: ZERO")}const{x:e,y:r}=this.toAffine();if(!n.isValid(e)||!n.isValid(r))throw new Error("bad point: x or y not FE");const s=n.sqr(r),o=i(e);if(!n.eql(s,o))throw new Error("bad point: equation left != right");if(!this.isTorsionFree())throw new Error("bad point: not in prime-order subgroup")}hasEvenY(){const{y:e}=this.toAffine();if(n.isOdd)return!n.isOdd(e);throw new Error("Field doesn't support isOdd")}equals(e){u(e);const{px:t,py:r,pz:s}=this,{px:i,py:o,pz:a}=e,l=n.eql(n.mul(t,a),n.mul(i,s)),c=n.eql(n.mul(r,a),n.mul(o,s));return l&&c}negate(){return new h(this.px,n.neg(this.py),this.pz)}double(){const{a:e,b:r}=t,s=n.mul(r,wc),{px:i,py:o,pz:a}=this;let l=n.ZERO,c=n.ZERO,u=n.ZERO,d=n.mul(i,i),p=n.mul(o,o),f=n.mul(a,a),m=n.mul(i,o);return m=n.add(m,m),u=n.mul(i,a),u=n.add(u,u),l=n.mul(e,u),c=n.mul(s,f),c=n.add(l,c),l=n.sub(p,c),c=n.add(p,c),c=n.mul(l,c),l=n.mul(m,l),u=n.mul(s,u),f=n.mul(e,f),m=n.sub(d,f),m=n.mul(e,m),m=n.add(m,u),u=n.add(d,d),d=n.add(u,d),d=n.add(d,f),d=n.mul(d,m),c=n.add(c,d),f=n.mul(o,a),f=n.add(f,f),d=n.mul(f,m),l=n.sub(l,d),u=n.mul(f,p),u=n.add(u,u),u=n.add(u,u),new h(l,c,u)}add(e){u(e);const{px:r,py:s,pz:i}=this,{px:o,py:a,pz:l}=e;let c=n.ZERO,d=n.ZERO,p=n.ZERO;const f=t.a,m=n.mul(t.b,wc);let g=n.mul(r,o),y=n.mul(s,a),b=n.mul(i,l),w=n.add(r,s),v=n.add(o,a);w=n.mul(w,v),v=n.add(g,y),w=n.sub(w,v),v=n.add(r,i);let A=n.add(o,l);return v=n.mul(v,A),A=n.add(g,b),v=n.sub(v,A),A=n.add(s,i),c=n.add(a,l),A=n.mul(A,c),c=n.add(y,b),A=n.sub(A,c),p=n.mul(f,v),c=n.mul(m,b),p=n.add(c,p),c=n.sub(y,p),p=n.add(y,p),d=n.mul(c,p),y=n.add(g,g),y=n.add(y,g),b=n.mul(f,b),v=n.mul(m,v),y=n.add(y,b),b=n.sub(g,b),b=n.mul(f,b),v=n.add(v,b),g=n.mul(y,v),d=n.add(d,g),g=n.mul(A,v),c=n.mul(w,c),c=n.sub(c,g),g=n.mul(w,y),p=n.mul(A,p),p=n.add(p,g),new h(c,d,p)}subtract(e){return this.add(e.negate())}is0(){return this.equals(h.ZERO)}wNAF(e){return p.wNAFCached(this,c,e,(e=>{const t=n.invertBatch(e.map((e=>e.pz)));return e.map(((e,n)=>e.toAffine(t[n]))).map(h.fromAffine)}))}multiplyUnsafe(e){const r=h.ZERO;if(e===yc)return r;if(a(e),e===bc)return this;const{endo:s}=t;if(!s)return p.unsafeLadder(this,e);let{k1neg:i,k1:o,k2neg:l,k2:c}=s.splitScalar(e),u=r,d=r,f=this;for(;o>yc||c>yc;)o&bc&&(u=u.add(f)),c&bc&&(d=d.add(f)),f=f.double(),o>>=bc,c>>=bc;return i&&(u=u.negate()),l&&(d=d.negate()),d=new h(n.mul(d.px,s.beta),d.py,d.pz),u.add(d)}multiply(e){a(e);let r,s,i=e;const{endo:o}=t;if(o){const{k1neg:e,k1:t,k2neg:a,k2:l}=o.splitScalar(i);let{p:c,f:u}=this.wNAF(t),{p:d,f}=this.wNAF(l);c=p.constTimeNegate(e,c),d=p.constTimeNegate(a,d),d=new h(n.mul(d.px,o.beta),d.py,d.pz),r=c.add(d),s=u.add(f)}else{const{p:e,f:t}=this.wNAF(i);r=e,s=t}return h.normalizeZ([r,s])[0]}multiplyAndAddUnsafe(e,t,n){const r=h.BASE,s=(e,t)=>t!==yc&&t!==bc&&e.equals(r)?e.multiply(t):e.multiplyUnsafe(t),i=s(this,t).add(s(e,n));return i.is0()?void 0:i}toAffine(e){const{px:t,py:r,pz:s}=this,i=this.is0();null==e&&(e=i?n.ONE:n.inv(s));const o=n.mul(t,e),a=n.mul(r,e),l=n.mul(s,e);if(i)return{x:n.ZERO,y:n.ZERO};if(!n.eql(l,n.ONE))throw new Error("invZ was invalid");return{x:o,y:a}}isTorsionFree(){const{h:e,isTorsionFree:n}=t;if(e===bc)return!0;if(n)return n(h,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:e,clearCofactor:n}=t;return e===bc?this:n?n(h,this):this.multiplyUnsafe(t.h)}toRawBytes(e=!0){return this.assertValidity(),r(h,this,e)}toHex(e=!0){return Tl(this.toRawBytes(e))}}h.BASE=new h(t.Gx,t.Gy,n.ONE),h.ZERO=new h(n.ZERO,n.ONE,n.ZERO);const d=t.nBitLength,p=function(e,t){const n=(e,t)=>{const n=t.negate();return e?n:t},r=e=>({windows:Math.ceil(t/e)+1,windowSize:2**(e-1)});return{constTimeNegate:n,unsafeLadder(t,n){let r=e.ZERO,s=t;for(;n>hc;)n&dc&&(r=r.add(s)),s=s.double(),n>>=dc;return r},precomputeWindow(e,t){const{windows:n,windowSize:s}=r(t),i=[];let o=e,a=o;for(let e=0;e<n;e++){a=o,i.push(a);for(let e=1;e<s;e++)a=a.add(o),i.push(a);o=a.double()}return i},wNAF(t,s,i){const{windows:o,windowSize:a}=r(t);let l=e.ZERO,c=e.BASE;const u=BigInt(2**t-1),h=2**t,d=BigInt(t);for(let e=0;e<o;e++){const t=e*a;let r=Number(i&u);i>>=d,r>a&&(r-=h,i+=dc);const o=t,p=t+Math.abs(r)-1,f=e%2!=0,m=r<0;0===r?c=c.add(n(f,s[o])):l=l.add(n(m,s[p]))}return{p:l,f:c}},wNAFCached(e,t,n,r){const s=e._WINDOW_SIZE||1;let i=t.get(e);return i||(i=this.precomputeWindow(e,s),1!==s&&t.set(e,r(i))),this.wNAF(s,i,n)}}}(h,t.endo?Math.ceil(d/2):d);return{CURVE:t,ProjectivePoint:h,normPrivateKeyToScalar:l,weierstrassEquation:i,isWithinCurveOrder:o}}({...t,toBytes(e,t,r){const s=t.toAffine(),i=n.toBytes(s.x),o=jl;return r?o(Uint8Array.from([t.hasEvenY()?2:3]),i):o(Uint8Array.from([4]),i,n.toBytes(s.y))},fromBytes(e){const t=e.length,r=e[0],o=e.subarray(1);if(t!==s||2!==r&&3!==r){if(t===i&&4===r)return{x:n.fromBytes(o.subarray(0,n.BYTES)),y:n.fromBytes(o.subarray(n.BYTES,2*n.BYTES))};throw new Error(`Point of length ${t} was invalid. Expected ${s} compressed bytes or ${i} uncompressed bytes`)}{const e=Ll(o);if(!(yc<(a=e)&&a<n.ORDER))throw new Error("Point is not on curve");const t=u(e);let s=n.sqrt(t);return 1==(1&r)!=((s&bc)===bc)&&(s=n.neg(s)),{x:e,y:s}}var a}}),d=e=>Tl(Ml(e,t.nByteLength));function p(e){return e>r>>bc}const f=(e,t,n)=>Ll(e.slice(t,n));class m{constructor(e,t,n){this.r=e,this.s=t,this.recovery=n,this.assertValidity()}static fromCompact(e){const n=t.nByteLength;return e=$l("compactSignature",e,2*n),new m(f(e,0,n),f(e,n,2*n))}static fromDER(e){const{r:t,s:n}=gc.toSig($l("DER",e));return new m(t,n)}assertValidity(){if(!h(this.r))throw new Error("r must be 0 < r < CURVE.n");if(!h(this.s))throw new Error("s must be 0 < s < CURVE.n")}addRecoveryBit(e){return new m(this.r,this.s,e)}recoverPublicKey(e){const{r,s,recovery:i}=this,c=w($l("msgHash",e));if(null==i||![0,1,2,3].includes(i))throw new Error("recovery id invalid");const u=2===i||3===i?r+t.n:r;if(u>=n.ORDER)throw new Error("recovery id 2 or 3 invalid");const h=0==(1&i)?"02":"03",p=l.fromHex(h+d(u)),f=a(u),m=o(-c*f),g=o(s*f),y=l.BASE.multiplyAndAddUnsafe(p,m,g);if(!y)throw new Error("point at infinify");return y.assertValidity(),y}hasHighS(){return p(this.s)}normalizeS(){return this.hasHighS()?new m(this.r,o(-this.s),this.recovery):this}toDERRawBytes(){return Fl(this.toDERHex())}toDERHex(){return gc.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return Fl(this.toCompactHex())}toCompactHex(){return d(this.r)+d(this.s)}}const g={isValidPrivateKey(e){try{return c(e),!0}catch(e){return!1}},normPrivateKeyToScalar:c,randomPrivateKey:()=>{const e=lc(t.n);return function(e,t,n=!1){const r=e.length,s=ac(t),i=lc(t);if(r<16||r<i||r>1024)throw new Error(`expected ${i}-1024 bytes of input, got ${r}`);const o=tc(n?Ll(e):Dl(e),t-Kl)+Kl;return n?Ul(o,s):Ml(o,s)}(t.randomBytes(e),t.n)},precompute:(e=8,t=l.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)};function y(e){const t=e instanceof Uint8Array,n="string"==typeof e,r=(t||n)&&e.length;return t?r===s||r===i:n?r===2*s||r===2*i:e instanceof l}const b=t.bits2int||function(e){const n=Ll(e),r=8*e.length-t.nBitLength;return r>0?n>>BigInt(r):n},w=t.bits2int_modN||function(e){return o(b(e))},v=Vl(t.nBitLength);function A(e){if("bigint"!=typeof e)throw new Error("bigint expected");if(!(yc<=e&&e<v))throw new Error(`bigint expected < 2^${t.nBitLength}`);return Ml(e,t.nByteLength)}const _={lowS:t.lowS,prehash:!1},E={lowS:t.lowS,prehash:!1};return l.BASE._setWindowSize(8),{CURVE:t,getPublicKey:function(e,t=!0){return l.fromPrivateKey(e).toRawBytes(t)},getSharedSecret:function(e,t,n=!0){if(y(e))throw new Error("first arg must be private key");if(!y(t))throw new Error("second arg must be public key");return l.fromHex(t).multiply(c(e)).toRawBytes(n)},sign:function(e,r,s=_){const{seed:i,k2sig:u}=function(e,r,s=_){if(["recovered","canonical"].some((e=>e in s)))throw new Error("sign() legacy options not supported");const{hash:i,randomBytes:u}=t;let{lowS:d,prehash:f,extraEntropy:g}=s;null==d&&(d=!0),e=$l("msgHash",e),f&&(e=$l("prehashed msgHash",i(e)));const y=w(e),v=c(r),E=[A(v),A(y)];if(null!=g){const e=!0===g?u(n.BYTES):g;E.push($l("extraEntropy",e))}const k=jl(...E),x=y;return{seed:k,k2sig:function(e){const t=b(e);if(!h(t))return;const n=a(t),r=l.BASE.multiply(t).toAffine(),s=o(r.x);if(s===yc)return;const i=o(n*o(x+s*v));if(i===yc)return;let c=(r.x===s?0:2)|Number(r.y&bc),u=i;return d&&p(i)&&(u=function(e){return p(e)?o(-e):e}(i),c^=1),new m(s,u,c)}}}(e,r,s),d=t;return zl(d.hash.outputLen,d.nByteLength,d.hmac)(i,u)},verify:function(e,n,r,s=E){const i=e;if(n=$l("msgHash",n),r=$l("publicKey",r),"strict"in s)throw new Error("options.strict was renamed to lowS");const{lowS:c,prehash:u}=s;let h,d;try{if("string"==typeof i||i instanceof Uint8Array)try{h=m.fromDER(i)}catch(e){if(!(e instanceof gc.Err))throw e;h=m.fromCompact(i)}else{if("object"!=typeof i||"bigint"!=typeof i.r||"bigint"!=typeof i.s)throw new Error("PARSE");{const{r:e,s:t}=i;h=new m(e,t)}}d=l.fromHex(r)}catch(e){if("PARSE"===e.message)throw new Error("signature must be Signature instance, Uint8Array or hex string");return!1}if(c&&h.hasHighS())return!1;u&&(n=t.hash(n));const{r:p,s:f}=h,g=w(n),y=a(f),b=o(g*y),v=o(p*y),A=l.BASE.multiplyAndAddUnsafe(d,b,v)?.toAffine();return!!A&&o(A.x)===p},ProjectivePoint:l,Signature:m,utils:g}}function Ac(e){return{hash:e,hmac:(t,...n)=>uc(e,t,function(...e){const t=new Uint8Array(e.reduce(((e,t)=>e+t.length),0));let n=0;return e.forEach((e=>{if(!fr(e))throw new Error("Uint8Array expected");t.set(e,n),n+=e.length})),t}(...n)),randomBytes:vr}}BigInt(4);const _c=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),Ec=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),kc=BigInt(1),xc=BigInt(2),Cc=(e,t)=>(e+t/xc)/t;const Nc=function(e,t,n=!1,r={}){if(e<=Jl)throw new Error(`Expected Field ORDER > 0, got ${e}`);const{nBitLength:s,nByteLength:i}=oc(e,t);if(i>2048)throw new Error("Field lengths over 2048 bytes are not supported");const o=function(e){if(e%Zl===Yl){const t=(e+Kl)/Zl;return function(e,n){const r=e.pow(n,t);if(!e.eql(e.sqr(r),n))throw new Error("Cannot find square root");return r}}if(e%ec===Xl){const t=(e-Xl)/ec;return function(e,n){const r=e.mul(n,Wl),s=e.pow(r,t),i=e.mul(n,s),o=e.mul(e.mul(i,Wl),s),a=e.mul(i,e.sub(o,e.ONE));if(!e.eql(e.sqr(a),n))throw new Error("Cannot find square root");return a}}return function(e){const t=(e-Kl)/Wl;let n,r,s;for(n=e-Kl,r=0;n%Wl===Jl;n/=Wl,r++);for(s=Wl;s<e&&nc(s,t,e)!==e-Kl;s++);if(1===r){const t=(e+Kl)/Zl;return function(e,n){const r=e.pow(n,t);if(!e.eql(e.sqr(r),n))throw new Error("Cannot find square root");return r}}const i=(n+Kl)/Wl;return function(e,o){if(e.pow(o,t)===e.neg(e.ONE))throw new Error("Cannot find square root");let a=r,l=e.pow(e.mul(e.ONE,s),n),c=e.pow(o,i),u=e.pow(o,n);for(;!e.eql(u,e.ONE);){if(e.eql(u,e.ZERO))return e.ZERO;let t=1;for(let n=e.sqr(u);t<a&&!e.eql(n,e.ONE);t++)n=e.sqr(n);const n=e.pow(l,Kl<<BigInt(a-t-1));l=e.sqr(n),c=e.mul(c,n),u=e.mul(u,l),a=t}return c}}(e)}(e),a=Object.freeze({ORDER:e,BITS:s,BYTES:i,MASK:Vl(s),ZERO:Jl,ONE:Kl,create:t=>tc(t,e),isValid:t=>{if("bigint"!=typeof t)throw new Error("Invalid field element: expected bigint, got "+typeof t);return Jl<=t&&t<e},is0:e=>e===Jl,isOdd:e=>(e&Kl)===Kl,neg:t=>tc(-t,e),eql:(e,t)=>e===t,sqr:t=>tc(t*t,e),add:(t,n)=>tc(t+n,e),sub:(t,n)=>tc(t-n,e),mul:(t,n)=>tc(t*n,e),pow:(e,t)=>function(e,t,n){if(n<Jl)throw new Error("Expected power > 0");if(n===Jl)return e.ONE;if(n===Kl)return t;let r=e.ONE,s=t;for(;n>Jl;)n&Kl&&(r=e.mul(r,s)),s=e.sqr(s),n>>=Kl;return r}(a,e,t),div:(t,n)=>tc(t*sc(n,e),e),sqrN:e=>e*e,addN:(e,t)=>e+t,subN:(e,t)=>e-t,mulN:(e,t)=>e*t,inv:t=>sc(t,e),sqrt:r.sqrt||(e=>o(a,e)),invertBatch:e=>function(e,t){const n=new Array(t.length),r=t.reduce(((t,r,s)=>e.is0(r)?t:(n[s]=t,e.mul(t,r))),e.ONE),s=e.inv(r);return t.reduceRight(((t,r,s)=>e.is0(r)?t:(n[s]=e.mul(t,n[s]),e.mul(t,r))),s),n}(a,e),cmov:(e,t,n)=>n?t:e,toBytes:e=>n?Ul(e,i):Ml(e,i),fromBytes:e=>{if(e.length!==i)throw new Error(`Fp.fromBytes: expected ${i}, got ${e.length}`);return n?Dl(e):Ll(e)}});return Object.freeze(a)}(_c,void 0,void 0,{sqrt:function(e){const t=_c,n=BigInt(3),r=BigInt(6),s=BigInt(11),i=BigInt(22),o=BigInt(23),a=BigInt(44),l=BigInt(88),c=e*e*e%t,u=c*c*e%t,h=rc(u,n,t)*u%t,d=rc(h,n,t)*u%t,p=rc(d,xc,t)*c%t,f=rc(p,s,t)*p%t,m=rc(f,i,t)*f%t,g=rc(m,a,t)*m%t,y=rc(g,l,t)*g%t,b=rc(y,a,t)*m%t,w=rc(b,n,t)*u%t,v=rc(w,o,t)*f%t,A=rc(v,r,t)*c%t,_=rc(A,xc,t);if(!Nc.eql(Nc.sqr(_),e))throw new Error("Cannot find square root");return _}}),Pc=function(e,t){const n=t=>vc({...e,...Ac(t)});return Object.freeze({...n(t),create:n})}({a:BigInt(0),b:BigInt(7),Fp:Nc,n:Ec,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:e=>{const t=Ec,n=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-kc*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),s=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=n,o=BigInt("0x100000000000000000000000000000000"),a=Cc(i*e,t),l=Cc(-r*e,t);let c=tc(e-a*n-l*s,t),u=tc(-a*r-l*i,t);const h=c>o,d=u>o;if(h&&(c=t-c),d&&(u=t-u),c>o||u>o)throw new Error("splitScalar: Endomorphism failed, k="+e);return{k1neg:h,k1:c,k2neg:d,k2:u}}}},Pl);BigInt(0),Pc.ProjectivePoint;class Rc{#re;constructor(e){An(32===Sn(e),"invalid private key","privateKey","[REDACTED]"),this.#re=On(e)}get privateKey(){return this.#re}get publicKey(){return Rc.computePublicKey(this.#re)}get compressedPublicKey(){return Rc.computePublicKey(this.#re,!0)}sign(e){An(32===Sn(e),"invalid digest length","digest",e);const t=Pc.sign(Nn(e),Nn(this.#re),{lowS:!0});return vl.from({r:qn(t.r,32),s:qn(t.s,32),v:t.recovery?28:27})}computeSharedSecret(e){const t=Rc.computePublicKey(e);return On(Pc.getSharedSecret(Nn(this.#re),Cn(t),!1))}static computePublicKey(e,t){let n=Cn(e,"key");if(32===n.length)return On(Pc.getPublicKey(n,!!t));if(64===n.length){const e=new Uint8Array(65);e[0]=4,e.set(n,1),n=e}return On(Pc.ProjectivePoint.fromHex(n).toRawBytes(t))}static recoverPublicKey(e,t){An(32===Sn(e),"invalid digest length","digest",e);const n=vl.from(t);let r=Pc.Signature.fromCompact(Nn(Bn([n.r,n.s])));r=r.addRecoveryBit(n.yParity);const s=r.recoverPublicKey(Nn(e));return An(null!=s,"invalid signautre for digest","signature",t),"0x"+s.toHex(!1)}static addPoints(e,t,n){const r=Pc.ProjectivePoint.fromHex(Rc.computePublicKey(e).substring(2)),s=Pc.ProjectivePoint.fromHex(Rc.computePublicKey(t).substring(2));return"0x"+r.add(s).toHex(!!n)}}function Oc(e){let t=e.toString(16);for(;t.length<2;)t="0"+t;return"0x"+t}function Bc(e,t,n){let r=0;for(let s=0;s<n;s++)r=256*r+e[t+s];return r}function Sc(e,t,n,r){const s=[];for(;n<t+1+r;){const i=Tc(e,n);s.push(i.result),vn((n+=i.consumed)<=t+1+r,"child data too short","BUFFER_OVERRUN",{buffer:e,length:r,offset:t})}return{consumed:1+r,result:s}}function Tc(e,t){vn(0!==e.length,"data too short","BUFFER_OVERRUN",{buffer:e,length:0,offset:1});const n=t=>{vn(t<=e.length,"data short segment too short","BUFFER_OVERRUN",{buffer:e,length:e.length,offset:t})};if(e[t]>=248){const r=e[t]-247;n(t+1+r);const s=Bc(e,t+1,r);return n(t+1+r+s),Sc(e,t,t+1+r,r+s)}if(e[t]>=192){const r=e[t]-192;return n(t+1+r),Sc(e,t,t+1,r)}if(e[t]>=184){const r=e[t]-183;n(t+1+r);const s=Bc(e,t+1,r);return n(t+1+r+s),{consumed:1+r+s,result:On(e.slice(t+1+r,t+1+r+s))}}if(e[t]>=128){const r=e[t]-128;return n(t+1+r),{consumed:1+r,result:On(e.slice(t+1,t+1+r))}}return{consumed:1,result:Oc(e[t])}}function Ic(e){const t=Cn(e,"data"),n=Tc(t,0);return An(n.consumed===t.length,"unexpected junk after rlp payload","data",e),n.result}function Fc(e){const t=[];for(;e;)t.unshift(255&e),e>>=8;return t}function Lc(e){if(Array.isArray(e)){let t=[];if(e.forEach((function(e){t=t.concat(Lc(e))})),t.length<=55)return t.unshift(192+t.length),t;const n=Fc(t.length);return n.unshift(247+n.length),n.concat(t)}const t=Array.prototype.slice.call(Cn(e,"object"));if(1===t.length&&t[0]<=127)return t;if(t.length<=55)return t.unshift(128+t.length),t;const n=Fc(t.length);return n.unshift(183+n.length),n.concat(t)}const Dc="0123456789abcdef";function Mc(e){let t="0x";for(const n of Lc(e))t+=Dc[n>>4],t+=Dc[15&n];return t}const Uc=BigInt(0),$c=BigInt(2),jc=BigInt(27),Vc=BigInt(28),Hc=BigInt(35),Gc=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");function zc(e){return"0x"===e?null:qr(e)}function qc(e,t){try{return Li(e)}catch(n){An(!1,n.message,t,e)}}function Qc(e,t){return"0x"===e?0:zn(e,t)}function Jc(e,t){if("0x"===e)return Uc;const n=jn(e,t);return An(n<=Gc,"value exceeds uint size",t,n),n}function Kc(e,t){const n=jn(e,"value"),r=Qn(n);return An(r.length<=32,"value too large",`tx.${t}`,n),r}function Wc(e){return Li(e).map((e=>[e.address,e.storageKeys]))}function Yc(e,t){An(Array.isArray(e),`invalid ${t}`,"value",e);for(let t=0;t<e.length;t++)An(Pn(e[t],32),"invalid ${ param } hash",`value[${t}]`,e[t]);return e}function Zc(e,t){const n=[Kc(e.nonce,"nonce"),Kc(e.gasPrice||0,"gasPrice"),Kc(e.gasLimit,"gasLimit"),e.to||"0x",Kc(e.value,"value"),e.data];let r=Uc;if(e.chainId!=Uc)r=jn(e.chainId,"tx.chainId"),An(!t||null==t.networkV||t.legacyChainId===r,"tx.chainId/sig.v mismatch","sig",t);else if(e.signature){const t=e.signature.legacyChainId;null!=t&&(r=t)}if(!t)return r!==Uc&&(n.push(Qn(r)),n.push("0x"),n.push("0x")),Mc(n);let s=BigInt(27+t.yParity);return r!==Uc?s=vl.getChainIdV(r,t.v):BigInt(t.v)!==s&&An(!1,"tx.chainId/sig.v mismatch","sig",t),n.push(Qn(s)),n.push(Qn(t.r)),n.push(Qn(t.s)),Mc(n)}function Xc(e,t){let n;try{if(n=Qc(t[0],"yParity"),0!==n&&1!==n)throw new Error("bad yParity")}catch(e){An(!1,"invalid yParity","yParity",t[0])}const r=Fn(t[1],32),s=Fn(t[2],32),i=vl.from({r,s,yParity:n});e.signature=i}function eu(e,t){const n=[Kc(e.chainId,"chainId"),Kc(e.nonce,"nonce"),Kc(e.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),Kc(e.maxFeePerGas||0,"maxFeePerGas"),Kc(e.gasLimit,"gasLimit"),e.to||"0x",Kc(e.value,"value"),e.data,Wc(e.accessList||[])];return t&&(n.push(Kc(t.yParity,"yParity")),n.push(Qn(t.r)),n.push(Qn(t.s))),Bn(["0x02",Mc(n)])}function tu(e,t){const n=[Kc(e.chainId,"chainId"),Kc(e.nonce,"nonce"),Kc(e.gasPrice||0,"gasPrice"),Kc(e.gasLimit,"gasLimit"),e.to||"0x",Kc(e.value,"value"),e.data,Wc(e.accessList||[])];return t&&(n.push(Kc(t.yParity,"recoveryParam")),n.push(Qn(t.r)),n.push(Qn(t.s))),Bn(["0x01",Mc(n)])}function nu(e,t){const n=[Kc(e.chainId,"chainId"),Kc(e.nonce,"nonce"),Kc(e.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),Kc(e.maxFeePerGas||0,"maxFeePerGas"),Kc(e.gasLimit,"gasLimit"),e.to||Yi,Kc(e.value,"value"),e.data,Wc(e.accessList||[]),Kc(e.maxFeePerBlobGas||0,"maxFeePerBlobGas"),Yc(e.blobVersionedHashes||[],"blobVersionedHashes")];return t&&(n.push(Kc(t.yParity,"yParity")),n.push(Qn(t.r)),n.push(Qn(t.s))),Bn(["0x03",Mc(n)])}class ru{#se;#ie;#t;#oe;#ae;#le;#ce;#ue;#he;#de;#pe;#fe;#me;#ge;get type(){return this.#se}set type(e){switch(e){case null:this.#se=null;break;case 0:case"legacy":this.#se=0;break;case 1:case"berlin":case"eip-2930":this.#se=1;break;case 2:case"london":case"eip-1559":this.#se=2;break;case 3:case"cancun":case"eip-4844":this.#se=3;break;default:An(!1,"unsupported transaction type","type",e)}}get typeName(){switch(this.type){case 0:return"legacy";case 1:return"eip-2930";case 2:return"eip-1559";case 3:return"eip-4844"}return null}get to(){const e=this.#ie;return null==e&&3===this.type?Yi:e}set to(e){this.#ie=null==e?null:qr(e)}get nonce(){return this.#oe}set nonce(e){this.#oe=zn(e,"value")}get gasLimit(){return this.#ae}set gasLimit(e){this.#ae=jn(e)}get gasPrice(){const e=this.#le;return null!=e||0!==this.type&&1!==this.type?e:Uc}set gasPrice(e){this.#le=null==e?null:jn(e,"gasPrice")}get maxPriorityFeePerGas(){const e=this.#ce;return null==e?2===this.type||3===this.type?Uc:null:e}set maxPriorityFeePerGas(e){this.#ce=null==e?null:jn(e,"maxPriorityFeePerGas")}get maxFeePerGas(){const e=this.#ue;return null==e?2===this.type||3===this.type?Uc:null:e}set maxFeePerGas(e){this.#ue=null==e?null:jn(e,"maxFeePerGas")}get data(){return this.#t}set data(e){this.#t=On(e)}get value(){return this.#he}set value(e){this.#he=jn(e,"value")}get chainId(){return this.#de}set chainId(e){this.#de=jn(e)}get signature(){return this.#pe||null}set signature(e){this.#pe=null==e?null:vl.from(e)}get accessList(){const e=this.#fe||null;return null==e?1===this.type||2===this.type||3===this.type?[]:null:e}set accessList(e){this.#fe=null==e?null:Li(e)}get maxFeePerBlobGas(){const e=this.#me;return null==e&&3===this.type?Uc:e}set maxFeePerBlobGas(e){this.#me=null==e?null:jn(e,"maxFeePerBlobGas")}get blobVersionedHashes(){let e=this.#ge;return null==e&&3===this.type?[]:e}set blobVersionedHashes(e){if(null!=e){An(Array.isArray(e),"blobVersionedHashes must be an Array","value",e),e=e.slice();for(let t=0;t<e.length;t++)An(Pn(e[t],32),"invalid blobVersionedHash",`value[${t}]`,e[t])}this.#ge=e}constructor(){this.#se=null,this.#ie=null,this.#oe=0,this.#ae=Uc,this.#le=null,this.#ce=null,this.#ue=null,this.#t="0x",this.#he=Uc,this.#de=Uc,this.#pe=null,this.#fe=null,this.#me=null,this.#ge=null}get hash(){return null==this.signature?null:Ur(this.serialized)}get unsignedHash(){return Ur(this.unsignedSerialized)}get from(){return null==this.signature?null:(e=this.unsignedHash,t=this.signature,function(e){let t;return t="string"==typeof e?Rc.computePublicKey(e,!1):e.publicKey,qr(Ur("0x"+t.substring(4)).substring(26))}(Rc.recoverPublicKey(e,t)));var e,t}get fromPublicKey(){return null==this.signature?null:Rc.recoverPublicKey(this.unsignedHash,this.signature)}isSigned(){return null!=this.signature}get serialized(){switch(vn(null!=this.signature,"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized","UNSUPPORTED_OPERATION",{operation:".serialized"}),this.inferType()){case 0:return Zc(this,this.signature);case 1:return tu(this,this.signature);case 2:return eu(this,this.signature);case 3:return nu(this,this.signature)}vn(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:".serialized"})}get unsignedSerialized(){switch(this.inferType()){case 0:return Zc(this);case 1:return tu(this);case 2:return eu(this);case 3:return nu(this)}vn(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:".unsignedSerialized"})}inferType(){const e=this.inferTypes();return e.indexOf(2)>=0?2:e.pop()}inferTypes(){const e=null!=this.gasPrice,t=null!=this.maxFeePerGas||null!=this.maxPriorityFeePerGas,n=null!=this.accessList,r=null!=this.#me||this.#ge;null!=this.maxFeePerGas&&null!=this.maxPriorityFeePerGas&&vn(this.maxFeePerGas>=this.maxPriorityFeePerGas,"priorityFee cannot be more than maxFee","BAD_DATA",{value:this}),vn(!t||0!==this.type&&1!==this.type,"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas","BAD_DATA",{value:this}),vn(0!==this.type||!n,"legacy transaction cannot have accessList","BAD_DATA",{value:this});const s=[];return null!=this.type?s.push(this.type):t?s.push(2):e?(s.push(1),n||s.push(0)):n?(s.push(1),s.push(2)):(r&&this.to||(s.push(0),s.push(1),s.push(2)),s.push(3)),s.sort(),s}isLegacy(){return 0===this.type}isBerlin(){return 1===this.type}isLondon(){return 2===this.type}isCancun(){return 3===this.type}clone(){return ru.from(this)}toJSON(){const e=e=>null==e?null:e.toString();return{type:this.type,to:this.to,data:this.data,nonce:this.nonce,gasLimit:e(this.gasLimit),gasPrice:e(this.gasPrice),maxPriorityFeePerGas:e(this.maxPriorityFeePerGas),maxFeePerGas:e(this.maxFeePerGas),value:e(this.value),chainId:e(this.chainId),sig:this.signature?this.signature.toJSON():null,accessList:this.accessList}}static from(e){if(null==e)return new ru;if("string"==typeof e){const t=Cn(e);if(t[0]>=127)return ru.from(function(e){const t=Ic(e);An(Array.isArray(t)&&(9===t.length||6===t.length),"invalid field count for legacy transaction","data",e);const n={type:0,nonce:Qc(t[0],"nonce"),gasPrice:Jc(t[1],"gasPrice"),gasLimit:Jc(t[2],"gasLimit"),to:zc(t[3]),value:Jc(t[4],"value"),data:On(t[5]),chainId:Uc};if(6===t.length)return n;const r=Jc(t[6],"v"),s=Jc(t[7],"r"),i=Jc(t[8],"s");if(s===Uc&&i===Uc)n.chainId=r;else{let s=(r-Hc)/$c;s<Uc&&(s=Uc),n.chainId=s,An(s!==Uc||r===jc||r===Vc,"non-canonical legacy v","v",t[6]),n.signature=vl.from({r:Fn(t[7],32),s:Fn(t[8],32),v:r}),n.hash=Ur(e)}return n}(t));switch(t[0]){case 1:return ru.from(function(e){const t=Ic(Cn(e).slice(1));An(Array.isArray(t)&&(8===t.length||11===t.length),"invalid field count for transaction type: 1","data",On(e));const n={type:1,chainId:Jc(t[0],"chainId"),nonce:Qc(t[1],"nonce"),gasPrice:Jc(t[2],"gasPrice"),gasLimit:Jc(t[3],"gasLimit"),to:zc(t[4]),value:Jc(t[5],"value"),data:On(t[6]),accessList:qc(t[7],"accessList")};return 8===t.length||(n.hash=Ur(e),Xc(n,t.slice(8))),n}(t));case 2:return ru.from(function(e){const t=Ic(Cn(e).slice(1));An(Array.isArray(t)&&(9===t.length||12===t.length),"invalid field count for transaction type: 2","data",On(e));const n={type:2,chainId:Jc(t[0],"chainId"),nonce:Qc(t[1],"nonce"),maxPriorityFeePerGas:Jc(t[2],"maxPriorityFeePerGas"),maxFeePerGas:Jc(t[3],"maxFeePerGas"),gasPrice:null,gasLimit:Jc(t[4],"gasLimit"),to:zc(t[5]),value:Jc(t[6],"value"),data:On(t[7]),accessList:qc(t[8],"accessList")};return 9===t.length||(n.hash=Ur(e),Xc(n,t.slice(9))),n}(t));case 3:return ru.from(function(e){const t=Ic(Cn(e).slice(1));An(Array.isArray(t)&&(11===t.length||14===t.length),"invalid field count for transaction type: 3","data",On(e));const n={type:3,chainId:Jc(t[0],"chainId"),nonce:Qc(t[1],"nonce"),maxPriorityFeePerGas:Jc(t[2],"maxPriorityFeePerGas"),maxFeePerGas:Jc(t[3],"maxFeePerGas"),gasPrice:null,gasLimit:Jc(t[4],"gasLimit"),to:zc(t[5]),value:Jc(t[6],"value"),data:On(t[7]),accessList:qc(t[8],"accessList"),maxFeePerBlobGas:Jc(t[9],"maxFeePerBlobGas"),blobVersionedHashes:t[10]};An(null!=n.to,"invalid address for transaction type: 3","data",e),An(Array.isArray(n.blobVersionedHashes),"invalid blobVersionedHashes: must be an array","data",e);for(let t=0;t<n.blobVersionedHashes.length;t++)An(Pn(n.blobVersionedHashes[t],32),`invalid blobVersionedHash at index ${t}: must be length 32`,"data",e);return 11===t.length||(n.hash=Ur(e),Xc(n,t.slice(11))),n}(t))}vn(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:"from"})}const t=new ru;return null!=e.type&&(t.type=e.type),null!=e.to&&(t.to=e.to),null!=e.nonce&&(t.nonce=e.nonce),null!=e.gasLimit&&(t.gasLimit=e.gasLimit),null!=e.gasPrice&&(t.gasPrice=e.gasPrice),null!=e.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas),null!=e.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null!=e.maxFeePerBlobGas&&(t.maxFeePerBlobGas=e.maxFeePerBlobGas),null!=e.data&&(t.data=e.data),null!=e.value&&(t.value=e.value),null!=e.chainId&&(t.chainId=e.chainId),null!=e.signature&&(t.signature=vl.from(e.signature)),null!=e.accessList&&(t.accessList=e.accessList),null!=e.blobVersionedHashes&&(t.blobVersionedHashes=e.blobVersionedHashes),null!=e.hash&&(An(t.isSigned(),"unsigned transaction cannot define hash","tx",e),An(t.hash===e.hash,"hash mismatch","tx",e)),null!=e.from&&(An(t.isSigned(),"unsigned transaction cannot define from","tx",e),An(t.from.toLowerCase()===(e.from||"").toLowerCase(),"from mismatch","tx",e)),t}}const su="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";BigInt(0);const iu=BigInt(58);function ou(e){return e.match(/^ipfs:\/\/ipfs\//i)?e=e.substring(12):e.match(/^ipfs:\/\//i)?e=e.substring(7):An(!1,"unsupported IPFS format","link",e),`https://gateway.ipfs.io/ipfs/${e}`}class au{name;constructor(e){mn(this,{name:e})}connect(e){return this}supportsCoinType(e){return!1}async encodeAddress(e,t){throw new Error("unsupported coin")}async decodeAddress(e,t){throw new Error("unsupported coin")}}const lu=new RegExp("^(ipfs)://(.*)$","i"),cu=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),lu,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")];class uu{provider;address;name;#ye;#be;constructor(e,t,n){mn(this,{provider:e,address:t,name:n}),this.#ye=null,this.#be=new zo(t,["function supportsInterface(bytes4) view returns (bool)","function resolve(bytes, bytes) view returns (bytes)","function addr(bytes32) view returns (address)","function addr(bytes32, uint) view returns (bytes)","function text(bytes32, string) view returns (string)","function contenthash(bytes32) view returns (bytes)"],e)}async supportsWildcard(){return null==this.#ye&&(this.#ye=(async()=>{try{return await this.#be.supportsInterface("0x9061b923")}catch(e){if(yn(e,"CALL_EXCEPTION"))return!1;throw this.#ye=null,e}})()),await this.#ye}async#we(e,t){t=(t||[]).slice();const n=this.#be.interface;t.unshift(cl(this.name));let r=null;await this.supportsWildcard()&&(r=n.getFunction(e),vn(r,"missing fragment","UNKNOWN_ERROR",{info:{funcName:e}}),t=[ul(this.name,255),n.encodeFunctionData(r,t)],e="resolve(bytes,bytes)"),t.push({enableCcipRead:!0});try{const s=await this.#be[e](...t);return r?n.decodeFunctionResult(r,s)[0]:s}catch(e){if(!yn(e,"CALL_EXCEPTION"))throw e}return null}async getAddress(e){if(null==e&&(e=60),60===e)try{const e=await this.#we("addr(bytes32)");return null==e||e===Yi?null:e}catch(e){if(yn(e,"CALL_EXCEPTION"))return null;throw e}if(e>=0&&e<2147483648){let t=e+2147483648;const n=await this.#we("addr(bytes32,uint)",[t]);if(Pn(n,20))return qr(n)}let t=null;for(const n of this.provider.plugins)if(n instanceof au&&n.supportsCoinType(e)){t=n;break}if(null==t)return null;const n=await this.#we("addr(bytes32,uint)",[e]);if(null==n||"0x"===n)return null;const r=await t.decodeAddress(e,n);if(null!=r)return r;vn(!1,"invalid coin data","UNSUPPORTED_OPERATION",{operation:`getAddress(${e})`,info:{coinType:e,data:n}})}async getText(e){const t=await this.#we("text(bytes32,string)",[e]);return null==t||"0x"===t?null:t}async getContentHash(){const e=await this.#we("contenthash(bytes32)");if(null==e||"0x"===e)return null;const t=e.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(t){const e="e3010170"===t[1]?"ipfs":"ipns",n=parseInt(t[4],16);if(t[5].length===2*n)return`${e}://${function(e){const t=Cn(e);let n=Gn(t),r="";for(;n;)r=su[Number(n%iu)]+r,n/=iu;for(let e=0;e<t.length&&!t[e];e++)r=su[0]+r;return r}("0x"+t[2])}`}const n=e.match(/^0xe40101fa011b20([0-9a-f]*)$/);if(n&&64===n[1].length)return`bzz://${n[1]}`;vn(!1,"invalid or unsupported content hash data","UNSUPPORTED_OPERATION",{operation:"getContentHash()",info:{data:e}})}async getAvatar(){return(await this._getAvatar()).url}async _getAvatar(){const e=[{type:"name",value:this.name}];try{const t=await this.getText("avatar");if(null==t)return e.push({type:"!avatar",value:""}),{url:null,linkage:e};e.push({type:"avatar",value:t});for(let n=0;n<cu.length;n++){const r=t.match(cu[n]);if(null==r)continue;const s=r[1].toLowerCase();switch(s){case"https":case"data":return e.push({type:"url",value:t}),{linkage:e,url:t};case"ipfs":{const n=ou(t);return e.push({type:"ipfs",value:t}),e.push({type:"url",value:n}),{linkage:e,url:n}}case"erc721":case"erc1155":{const n="erc721"===s?"tokenURI(uint256)":"uri(uint256)";e.push({type:s,value:t});const i=await this.getAddress();if(null==i)return e.push({type:"!owner",value:""}),{url:null,linkage:e};const o=(r[2]||"").split("/");if(2!==o.length)return e.push({type:`!${s}caip`,value:r[2]||""}),{url:null,linkage:e};const a=o[1],l=new zo(o[0],["function tokenURI(uint) view returns (string)","function ownerOf(uint) view returns (address)","function uri(uint) view returns (string)","function balanceOf(address, uint256) view returns (uint)"],this.provider);if("erc721"===s){const t=await l.ownerOf(a);if(i!==t)return e.push({type:"!owner",value:t}),{url:null,linkage:e};e.push({type:"owner",value:t})}else if("erc1155"===s){const t=await l.balanceOf(i,a);if(!t)return e.push({type:"!balance",value:"0"}),{url:null,linkage:e};e.push({type:"balance",value:t.toString()})}let c=await l[n](a);if(null==c||"0x"===c)return e.push({type:"!metadata-url",value:""}),{url:null,linkage:e};e.push({type:"metadata-url-base",value:c}),"erc1155"===s&&(c=c.replace("{id}",qn(a,32).substring(2)),e.push({type:"metadata-url-expanded",value:c})),c.match(/^ipfs:/i)&&(c=ou(c)),e.push({type:"metadata-url",value:c});let u={};const h=await new Ji(c).send();h.assertOk();try{u=h.bodyJson}catch(t){try{e.push({type:"!metadata",value:h.bodyText})}catch(t){const n=h.body;return n&&e.push({type:"!metadata",value:On(n)}),{url:null,linkage:e}}return{url:null,linkage:e}}if(!u)return e.push({type:"!metadata",value:""}),{url:null,linkage:e};e.push({type:"metadata",value:JSON.stringify(u)});let d=u.image;if("string"!=typeof d)return e.push({type:"!imageUrl",value:""}),{url:null,linkage:e};if(d.match(/^(https:\/\/|data:)/i));else{if(null==d.match(lu))return e.push({type:"!imageUrl-ipfs",value:d}),{url:null,linkage:e};e.push({type:"imageUrl-ipfs",value:d}),d=ou(d)}return e.push({type:"url",value:d}),{linkage:e,url:d}}}}}catch(e){}return{linkage:e,url:null}}static async getEnsAddress(e){const t=await e.getNetwork(),n=t.getPlugin("org.ethers.plugins.network.Ens");return vn(n,"network does not support ENS","UNSUPPORTED_OPERATION",{operation:"getEnsAddress",info:{network:t}}),n.address}static async#ve(e,t){const n=await uu.getEnsAddress(e);try{const r=new zo(n,["function resolver(bytes32) view returns (address)"],e),s=await r.resolver(cl(t),{enableCcipRead:!0});return s===Yi?null:s}catch(e){throw e}return null}static async fromName(e,t){let n=t;for(;;){if(""===n||"."===n)return null;if("eth"!==t&&"eth"===n)return null;const r=await uu.#ve(e,n);if(null!=r){const s=new uu(e,r,t);return n===t||await s.supportsWildcard()?s:null}n=n.split(".").slice(1).join(".")}}}const hu=BigInt(0);function du(e,t){return function(n){return null==n?t:e(n)}}function pu(e,t){return n=>{if(t&&null==n)return null;if(!Array.isArray(n))throw new Error("not an array");return n.map((t=>e(t)))}}function fu(e,t){return n=>{const r={};for(const s in e){let i=s;if(t&&s in t&&!(i in n))for(const e of t[s])if(e in n){i=e;break}try{const t=e[s](n[i]);void 0!==t&&(r[s]=t)}catch(e){vn(!1,`invalid value for value.${s} (${e instanceof Error?e.message:"not-an-error"})`,"BAD_DATA",{value:n})}}return r}}function mu(e){return An(Pn(e,!0),"invalid data","value",e),e}function gu(e){return An(Pn(e,32),"invalid hash","value",e),e}const yu=fu({address:qr,blockHash:gu,blockNumber:zn,data:mu,index:zn,removed:du((function(e){switch(e){case!0:case"true":return!0;case!1:case"false":return!1}An(!1,`invalid boolean; ${JSON.stringify(e)}`,"value",e)}),!1),topics:pu(gu),transactionHash:gu,transactionIndex:zn},{index:["logIndex"]}),bu=fu({hash:du(gu),parentHash:gu,parentBeaconBlockRoot:du(gu,null),number:zn,timestamp:zn,nonce:du(mu),difficulty:jn,gasLimit:jn,gasUsed:jn,stateRoot:du(gu,null),receiptsRoot:du(gu,null),blobGasUsed:du(jn,null),excessBlobGas:du(jn,null),miner:du(qr),extraData:mu,baseFeePerGas:du(jn)}),wu=fu({transactionIndex:zn,blockNumber:zn,transactionHash:gu,address:qr,topics:pu(gu),data:mu,index:zn,blockHash:gu},{index:["logIndex"]}),vu=fu({to:du(qr,null),from:du(qr,null),contractAddress:du(qr,null),index:zn,root:du(On),gasUsed:jn,blobGasUsed:du(jn,null),logsBloom:du(mu),blockHash:gu,hash:gu,logs:pu((function(e){return wu(e)})),blockNumber:zn,cumulativeGasUsed:jn,effectiveGasPrice:du(jn),blobGasPrice:du(jn,null),status:du(zn),type:du(zn,0)},{effectiveGasPrice:["gasPrice"],hash:["transactionHash"],index:["transactionIndex"]});function Au(e){e.to&&jn(e.to)===hu&&(e.to="0x0000000000000000000000000000000000000000");const t=fu({hash:gu,index:du(zn,void 0),type:e=>"0x"===e||null==e?0:zn(e),accessList:du(Li,null),blobVersionedHashes:du(pu(gu,!0),null),blockHash:du(gu,null),blockNumber:du(zn,null),transactionIndex:du(zn,null),from:qr,gasPrice:du(jn),maxPriorityFeePerGas:du(jn),maxFeePerGas:du(jn),maxFeePerBlobGas:du(jn,null),gasLimit:jn,to:du(qr,null),value:jn,nonce:zn,data:mu,creates:du(qr,null),chainId:du(jn,null)},{data:["input"],gasLimit:["gas"],index:["transactionIndex"]})(e);if(null==t.to&&null==t.creates&&(t.creates=function(e){const t=qr(e.from);let n=jn(e.nonce,"tx.nonce").toString(16);return n="0"===n?"0x":n.length%2?"0x0"+n:"0x"+n,qr(Tn(Ur(Mc([t,n])),12))}(t)),1!==e.type&&2!==e.type||null!=e.accessList||(t.accessList=[]),e.signature?t.signature=vl.from(e.signature):t.signature=vl.from(e),null==t.chainId){const e=t.signature.legacyChainId;null!=e&&(t.chainId=e)}return t.blockHash&&jn(t.blockHash)===hu&&(t.blockHash=null),t}class _u{name;constructor(e){mn(this,{name:e})}clone(){return new _u(this.name)}}class Eu extends _u{effectiveBlock;txBase;txCreate;txDataZero;txDataNonzero;txAccessListStorageKey;txAccessListAddress;constructor(e,t){null==e&&(e=0),super(`org.ethers.network.plugins.GasCost#${e||0}`);const n={effectiveBlock:e};function r(e,r){let s=(t||{})[e];null==s&&(s=r),An("number"==typeof s,`invalud value for ${e}`,"costs",t),n[e]=s}r("txBase",21e3),r("txCreate",32e3),r("txDataZero",4),r("txDataNonzero",16),r("txAccessListStorageKey",1900),r("txAccessListAddress",2400),mn(this,n)}clone(){return new Eu(this.effectiveBlock,this)}}class ku extends _u{address;targetNetwork;constructor(e,t){super("org.ethers.plugins.network.Ens"),mn(this,{address:e||"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",targetNetwork:null==t?1:t})}clone(){return new ku(this.address,this.targetNetwork)}}class xu extends _u{#C;#Ae;get url(){return this.#C}get processFunc(){return this.#Ae}constructor(e,t){super("org.ethers.plugins.network.FetchUrlFeeDataPlugin"),this.#C=e,this.#Ae=t}clone(){return this}}const Cu=new Map;class Nu{#_e;#de;#Ee;constructor(e,t){this.#_e=e,this.#de=jn(t),this.#Ee=new Map}toJSON(){return{name:this.name,chainId:String(this.chainId)}}get name(){return this.#_e}set name(e){this.#_e=e}get chainId(){return this.#de}set chainId(e){this.#de=jn(e,"chainId")}matches(e){if(null==e)return!1;if("string"==typeof e){try{return this.chainId===jn(e)}catch(e){}return this.name===e}if("number"==typeof e||"bigint"==typeof e){try{return this.chainId===jn(e)}catch(e){}return!1}if("object"==typeof e){if(null!=e.chainId){try{return this.chainId===jn(e.chainId)}catch(e){}return!1}return null!=e.name&&this.name===e.name}return!1}get plugins(){return Array.from(this.#Ee.values())}attachPlugin(e){if(this.#Ee.get(e.name))throw new Error(`cannot replace existing plugin: ${e.name} `);return this.#Ee.set(e.name,e.clone()),this}getPlugin(e){return this.#Ee.get(e)||null}getPlugins(e){return this.plugins.filter((t=>t.name.split("#")[0]===e))}clone(){const e=new Nu(this.name,this.chainId);return this.plugins.forEach((t=>{e.attachPlugin(t.clone())})),e}computeIntrinsicGas(e){const t=this.getPlugin("org.ethers.plugins.network.GasCost")||new Eu;let n=t.txBase;if(null==e.to&&(n+=t.txCreate),e.data)for(let r=2;r<e.data.length;r+=2)"00"===e.data.substring(r,r+2)?n+=t.txDataZero:n+=t.txDataNonzero;if(e.accessList){const r=Li(e.accessList);for(const e in r)n+=t.txAccessListAddress+t.txAccessListStorageKey*r[e].storageKeys.length}return n}static from(e){if(function(){function e(e,t,n){const r=function(){const r=new Nu(e,t);return null!=n.ensNetwork&&r.attachPlugin(new ku(null,n.ensNetwork)),r.attachPlugin(new Eu),(n.plugins||[]).forEach((e=>{r.attachPlugin(e)})),r};Nu.register(e,r),Nu.register(t,r),n.altNames&&n.altNames.forEach((e=>{Nu.register(e,r)}))}Ou||(Ou=!0,e("mainnet",1,{ensNetwork:1,altNames:["homestead"]}),e("ropsten",3,{ensNetwork:3}),e("rinkeby",4,{ensNetwork:4}),e("goerli",5,{ensNetwork:5}),e("kovan",42,{ensNetwork:42}),e("sepolia",11155111,{ensNetwork:11155111}),e("holesky",17e3,{ensNetwork:17e3}),e("classic",61,{}),e("classicKotti",6,{}),e("arbitrum",42161,{ensNetwork:1}),e("arbitrum-goerli",421613,{}),e("arbitrum-sepolia",421614,{}),e("base",8453,{ensNetwork:1}),e("base-goerli",84531,{}),e("base-sepolia",84532,{}),e("bnb",56,{ensNetwork:1}),e("bnbt",97,{}),e("linea",59144,{ensNetwork:1}),e("linea-goerli",59140,{}),e("matic",137,{ensNetwork:1,plugins:[Ru("https://gasstation.polygon.technology/v2")]}),e("matic-mumbai",80001,{altNames:["maticMumbai","maticmum"],plugins:[Ru("https://gasstation-testnet.polygon.technology/v2")]}),e("optimism",10,{ensNetwork:1,plugins:[]}),e("optimism-goerli",420,{}),e("optimism-sepolia",11155420,{}),e("xdai",100,{ensNetwork:1}))}(),null==e)return Nu.from("mainnet");if("number"==typeof e&&(e=BigInt(e)),"string"==typeof e||"bigint"==typeof e){const t=Cu.get(e);if(t)return t();if("bigint"==typeof e)return new Nu("unknown",e);An(!1,"unknown network","network",e)}if("function"==typeof e.clone)return e.clone();if("object"==typeof e){An("string"==typeof e.name&&"number"==typeof e.chainId,"invalid network object name or chainId","network",e);const t=new Nu(e.name,e.chainId);return(e.ensAddress||null!=e.ensNetwork)&&t.attachPlugin(new ku(e.ensAddress,e.ensNetwork)),t}An(!1,"invalid network","network",e)}static register(e,t){"number"==typeof e&&(e=BigInt(e));const n=Cu.get(e);n&&An(!1,`conflicting network for ${JSON.stringify(n.name)}`,"nameOrChainId",e),Cu.set(e,t)}}function Pu(e,t){const n=String(e);if(!n.match(/^[0-9.]+$/))throw new Error(`invalid gwei value: ${e}`);const r=n.split(".");if(1===r.length&&r.push(""),2!==r.length)throw new Error(`invalid gwei value: ${e}`);for(;r[1].length<t;)r[1]+="0";if(r[1].length>9){let e=BigInt(r[1].substring(0,9));r[1].substring(9).match(/^0+$/)||e++,r[1]=e.toString()}return BigInt(r[0]+r[1])}function Ru(e){return new xu(e,(async(e,t,n)=>{let r;n.setHeader("User-Agent","ethers");try{const[t,s]=await Promise.all([n.send(),e()]);r=t;const i=r.bodyJson.standard;return{gasPrice:s.gasPrice,maxFeePerGas:Pu(i.maxFee,9),maxPriorityFeePerGas:Pu(i.maxPriorityFee,9)}}catch(e){vn(!1,`error encountered with polygon gas station (${JSON.stringify(n.url)})`,"SERVER_ERROR",{request:n,response:r,error:e})}}))}let Ou=!1;function Bu(e){return JSON.parse(JSON.stringify(e))}class Su{#ke;#xe;#Ce;#Ne;constructor(e){this.#ke=e,this.#xe=null,this.#Ce=4e3,this.#Ne=-2}get pollingInterval(){return this.#Ce}set pollingInterval(e){this.#Ce=e}async#Pe(){try{const e=await this.#ke.getBlockNumber();if(-2===this.#Ne)return void(this.#Ne=e);if(e!==this.#Ne){for(let t=this.#Ne+1;t<=e;t++){if(null==this.#xe)return;await this.#ke.emit("block",t)}this.#Ne=e}}catch(e){}null!=this.#xe&&(this.#xe=this.#ke._setTimeout(this.#Pe.bind(this),this.#Ce))}start(){this.#xe||(this.#xe=this.#ke._setTimeout(this.#Pe.bind(this),this.#Ce),this.#Pe())}stop(){this.#xe&&(this.#ke._clearTimeout(this.#xe),this.#xe=null)}pause(e){this.stop(),e&&(this.#Ne=-2)}resume(){this.start()}}class Tu{#ke;#Pe;#Re;constructor(e){this.#ke=e,this.#Re=!1,this.#Pe=e=>{this._poll(e,this.#ke)}}async _poll(e,t){throw new Error("sub-classes must override this")}start(){this.#Re||(this.#Re=!0,this.#Pe(-2),this.#ke.on("block",this.#Pe))}stop(){this.#Re&&(this.#Re=!1,this.#ke.off("block",this.#Pe))}pause(e){this.stop()}resume(){this.start()}}class Iu extends Tu{#Oe;#Be;constructor(e,t){super(e),this.#Oe=t,this.#Be=-2}pause(e){e&&(this.#Be=-2),super.pause(e)}async _poll(e,t){const n=await t.getBlock(this.#Oe);null!=n&&(-2===this.#Be?this.#Be=n.number:n.number>this.#Be&&(t.emit(this.#Oe,n.number),this.#Be=n.number))}}class Fu extends Tu{#Z;constructor(e,t){super(e),this.#Z=Bu(t)}async _poll(e,t){throw new Error("@TODO")}}class Lu extends Tu{#Se;constructor(e,t){super(e),this.#Se=t}async _poll(e,t){const n=await t.getTransactionReceipt(this.#Se);n&&t.emit(this.#Se,n)}}class Du{#ke;#Z;#xe;#Re;#Ne;constructor(e,t){this.#ke=e,this.#Z=Bu(t),this.#xe=this.#Pe.bind(this),this.#Re=!1,this.#Ne=-2}async#Pe(e){if(-2===this.#Ne)return;const t=Bu(this.#Z);t.fromBlock=this.#Ne+1,t.toBlock=e;const n=await this.#ke.getLogs(t);if(0!==n.length)for(const e of n)this.#ke.emit(this.#Z,e),this.#Ne=e.blockNumber;else this.#Ne<e-60&&(this.#Ne=e-60)}start(){this.#Re||(this.#Re=!0,-2===this.#Ne&&this.#ke.getBlockNumber().then((e=>{this.#Ne=e})),this.#ke.on("block",this.#xe))}stop(){this.#Re&&(this.#Re=!1,this.#ke.off("block",this.#xe))}pause(e){this.stop(),e&&(this.#Ne=-2)}resume(){this.start()}}const Mu=BigInt(2);function Uu(e){return e&&"function"==typeof e.then}function $u(e,t){return e+":"+JSON.stringify(t,((e,t)=>{if(null==t)return"null";if("bigint"==typeof t)return`bigint:${t.toString()}`;if("string"==typeof t)return t.toLowerCase();if("object"==typeof t&&!Array.isArray(t)){const e=Object.keys(t);return e.sort(),e.reduce(((e,n)=>(e[n]=t[n],e)),{})}return t}))}class ju{name;constructor(e){mn(this,{name:e})}start(){}stop(){}pause(e){}resume(){}}function Vu(e){return(e=Array.from(new Set(e).values())).sort(),e}async function Hu(e,t){if(null==e)throw new Error("invalid event");if(Array.isArray(e)&&(e={topics:e}),"string"==typeof e)switch(e){case"block":case"debug":case"error":case"finalized":case"network":case"pending":case"safe":return{type:e,tag:e}}if(Pn(e,32)){const t=e.toLowerCase();return{type:"transaction",tag:$u("tx",{hash:t}),hash:t}}if(e.orphan){const t=e;return{type:"orphan",tag:$u("orphan",t),filter:(n=t,JSON.parse(JSON.stringify(n)))}}var n;if(e.address||e.topics){const n=e,r={topics:(n.topics||[]).map((e=>null==e?null:Array.isArray(e)?Vu(e.map((e=>e.toLowerCase()))):e.toLowerCase()))};if(n.address){const e=[],s=[],i=n=>{Pn(n)?e.push(n):s.push((async()=>{e.push(await wi(n,t))})())};Array.isArray(n.address)?n.address.forEach(i):i(n.address),s.length&&await Promise.all(s),r.address=Vu(e.map((e=>e.toLowerCase())))}return{filter:r,tag:$u("event",r),type:"event"}}An(!1,"unknown ProviderEvent","event",e)}function Gu(){return(new Date).getTime()}const zu={cacheTimeout:250,pollingInterval:4e3};class qu{#Te;#Ee;#Ie;#Fe;#Le;#De;#Me;#Ue;#$e;#je;#Ve;#u;constructor(e,t){if(this.#u=Object.assign({},zu,t||{}),"any"===e)this.#De=!0,this.#Le=null;else if(e){const t=Nu.from(e);this.#De=!1,this.#Le=Promise.resolve(t),setTimeout((()=>{this.emit("network",t,null)}),0)}else this.#De=!1,this.#Le=null;this.#Ue=-1,this.#Me=new Map,this.#Te=new Map,this.#Ee=new Map,this.#Ie=null,this.#Fe=!1,this.#$e=1,this.#je=new Map,this.#Ve=!1}get pollingInterval(){return this.#u.pollingInterval}get provider(){return this}get plugins(){return Array.from(this.#Ee.values())}attachPlugin(e){if(this.#Ee.get(e.name))throw new Error(`cannot replace existing plugin: ${e.name} `);return this.#Ee.set(e.name,e.connect(this)),this}getPlugin(e){return this.#Ee.get(e)||null}get disableCcipRead(){return this.#Ve}set disableCcipRead(e){this.#Ve=!!e}async#He(e){const t=this.#u.cacheTimeout;if(t<0)return await this._perform(e);const n=$u(e.method,e);let r=this.#Me.get(n);return r||(r=this._perform(e),this.#Me.set(n,r),setTimeout((()=>{this.#Me.get(n)===r&&this.#Me.delete(n)}),t)),await r}async ccipReadFetch(e,t,n){if(this.disableCcipRead||0===n.length||null==e.to)return null;const r=e.to.toLowerCase(),s=t.toLowerCase(),i=[];for(let t=0;t<n.length;t++){const o=n[t],a=o.replace("{sender}",r).replace("{data}",s),l=new Ji(a);-1===o.indexOf("{data}")&&(l.body={data:s,sender:r}),this.emit("debug",{action:"sendCcipReadFetchRequest",request:l,index:t,urls:n});let c="unknown error";const u=await l.send();try{const e=u.bodyJson;if(e.data)return this.emit("debug",{action:"receiveCcipReadFetchResult",request:l,result:e}),e.data;e.message&&(c=e.message),this.emit("debug",{action:"receiveCcipReadFetchError",request:l,result:e})}catch(e){}vn(u.statusCode<400||u.statusCode>=500,`response not found during CCIP fetch: ${c}`,"OFFCHAIN_FAULT",{reason:"404_MISSING_RESOURCE",transaction:e,info:{url:o,errorMessage:c}}),i.push(c)}vn(!1,`error encountered during CCIP fetch: ${i.map((e=>JSON.stringify(e))).join(", ")}`,"OFFCHAIN_FAULT",{reason:"500_SERVER_ERROR",transaction:e,info:{urls:n,errorMessages:i}})}_wrapBlock(e,t){return new uo(function(e){const t=bu(e);return t.transactions=e.transactions.map((e=>"string"==typeof e?e:Au(e))),t}(e),this)}_wrapLog(e,t){return new ho(function(e){return yu(e)}(e),this)}_wrapTransactionReceipt(e,t){return new po(function(e){return vu(e)}(e),this)}_wrapTransactionResponse(e,t){return new fo(Au(e),this)}_detectNetwork(){vn(!1,"sub-classes must implement this","UNSUPPORTED_OPERATION",{operation:"_detectNetwork"})}async _perform(e){vn(!1,`unsupported method: ${e.method}`,"UNSUPPORTED_OPERATION",{operation:e.method,info:e})}async getBlockNumber(){const e=zn(await this.#He({method:"getBlockNumber"}),"%response");return this.#Ue>=0&&(this.#Ue=e),e}_getAddress(e){return wi(e,this)}_getBlockTag(e){if(null==e)return"latest";switch(e){case"earliest":return"0x0";case"finalized":case"latest":case"pending":case"safe":return e}return Pn(e)?Pn(e,32)?e:Jn(e):("bigint"==typeof e&&(e=zn(e,"blockTag")),"number"==typeof e?e>=0?Jn(e):this.#Ue>=0?Jn(this.#Ue+e):this.getBlockNumber().then((t=>Jn(t+e))):void An(!1,"invalid blockTag","blockTag",e))}_getFilter(e){const t=(e.topics||[]).map((e=>null==e?null:Array.isArray(e)?Vu(e.map((e=>e.toLowerCase()))):e.toLowerCase())),n="blockHash"in e?e.blockHash:void 0,r=(e,r,s)=>{let i;switch(e.length){case 0:break;case 1:i=e[0];break;default:e.sort(),i=e}if(n&&(null!=r||null!=s))throw new Error("invalid filter");const o={};return i&&(o.address=i),t.length&&(o.topics=t),r&&(o.fromBlock=r),s&&(o.toBlock=s),n&&(o.blockHash=n),o};let s,i,o=[];if(e.address)if(Array.isArray(e.address))for(const t of e.address)o.push(this._getAddress(t));else o.push(this._getAddress(e.address));return"fromBlock"in e&&(s=this._getBlockTag(e.fromBlock)),"toBlock"in e&&(i=this._getBlockTag(e.toBlock)),o.filter((e=>"string"!=typeof e)).length||null!=s&&"string"!=typeof s||null!=i&&"string"!=typeof i?Promise.all([Promise.all(o),s,i]).then((e=>r(e[0],e[1],e[2]))):r(o,s,i)}_getTransactionRequest(e){const t=co(e),n=[];if(["to","from"].forEach((e=>{if(null==t[e])return;const r=wi(t[e],this);Uu(r)?n.push(async function(){t[e]=await r}()):t[e]=r})),null!=t.blockTag){const e=this._getBlockTag(t.blockTag);Uu(e)?n.push(async function(){t.blockTag=await e}()):t.blockTag=e}return n.length?async function(){return await Promise.all(n),t}():t}async getNetwork(){if(null==this.#Le){const e=(async()=>{try{const e=await this._detectNetwork();return this.emit("network",e,null),e}catch(t){throw this.#Le===e&&(this.#Le=null),t}})();return this.#Le=e,(await e).clone()}const e=this.#Le,[t,n]=await Promise.all([e,this._detectNetwork()]);return t.chainId!==n.chainId&&(this.#De?(this.emit("network",n,t),this.#Le===e&&(this.#Le=Promise.resolve(n))):vn(!1,`network changed: ${t.chainId} => ${n.chainId} `,"NETWORK_ERROR",{event:"changed"})),t.clone()}async getFeeData(){const e=await this.getNetwork(),t=async()=>{const{_block:t,gasPrice:n,priorityFee:r}=await fn({_block:this.#Ge("latest",!1),gasPrice:(async()=>{try{return jn(await this.#He({method:"getGasPrice"}),"%response")}catch(e){}return null})(),priorityFee:(async()=>{try{return jn(await this.#He({method:"getPriorityFee"}),"%response")}catch(e){}return null})()});let s=null,i=null;const o=this._wrapBlock(t,e);return o&&o.baseFeePerGas&&(i=null!=r?r:BigInt("1000000000"),s=o.baseFeePerGas*Mu+i),new lo(n,s,i)},n=e.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");if(n){const e=new Ji(n.url),r=await n.processFunc(t,this,e);return new lo(r.gasPrice,r.maxFeePerGas,r.maxPriorityFeePerGas)}return await t()}async estimateGas(e){let t=this._getTransactionRequest(e);return Uu(t)&&(t=await t),jn(await this.#He({method:"estimateGas",transaction:t}),"%response")}async#ze(e,t,n){vn(n<10,"CCIP read exceeded maximum redirections","OFFCHAIN_FAULT",{reason:"TOO_MANY_REDIRECTS",transaction:Object.assign({},e,{blockTag:t,enableCcipRead:!0})});const r=co(e);try{return On(await this._perform({method:"call",transaction:r,blockTag:t}))}catch(e){if(!this.disableCcipRead&&bn(e)&&e.data&&n>=0&&"latest"===t&&null!=r.to&&"0x556f1830"===Tn(e.data,0,4)){const s=e.data,i=await wi(r.to,this);let o;try{o=function(e){const t={sender:"",urls:[],calldata:"",selector:"",extraData:"",errorArgs:[]};vn(Sn(e)>=160,"insufficient OffchainLookup data","OFFCHAIN_FAULT",{reason:"insufficient OffchainLookup data"});const n=Tn(e,0,32);vn(Tn(n,0,12)===Tn(Xu,0,12),"corrupt OffchainLookup sender","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup sender"}),t.sender=Tn(n,12);try{const n=[],r=zn(Tn(e,32,64)),s=zn(Tn(e,r,r+32)),i=Tn(e,r+32);for(let e=0;e<s;e++){const t=Qu(i,32*e);if(null==t)throw new Error("abort");n.push(t)}t.urls=n}catch(e){vn(!1,"corrupt OffchainLookup urls","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup urls"})}try{const n=Ju(e,64);if(null==n)throw new Error("abort");t.calldata=n}catch(e){vn(!1,"corrupt OffchainLookup calldata","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup calldata"})}vn(Tn(e,100,128)===Tn(Xu,0,28),"corrupt OffchainLookup callbaackSelector","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup callbaackSelector"}),t.selector=Tn(e,96,100);try{const n=Ju(e,128);if(null==n)throw new Error("abort");t.extraData=n}catch(e){vn(!1,"corrupt OffchainLookup extraData","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup extraData"})}return t.errorArgs="sender,urls,calldata,selector,extraData".split(/,/).map((e=>t[e])),t}(Tn(e.data,4))}catch(e){vn(!1,e.message,"OFFCHAIN_FAULT",{reason:"BAD_DATA",transaction:r,info:{data:s}})}vn(o.sender.toLowerCase()===i.toLowerCase(),"CCIP Read sender mismatch","CALL_EXCEPTION",{action:"call",data:s,reason:"OffchainLookup",transaction:r,invocation:null,revert:{signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",name:"OffchainLookup",args:o.errorArgs}});const a=await this.ccipReadFetch(r,o.calldata,o.urls);vn(null!=a,"CCIP Read failed to fetch data","OFFCHAIN_FAULT",{reason:"FETCH_FAILED",transaction:r,info:{data:e.data,errorArgs:o.errorArgs}});const l={to:i,data:Bn([o.selector,Zu([a,o.extraData])])};this.emit("debug",{action:"sendCcipReadCall",transaction:l});try{const e=await this.#ze(l,t,n+1);return this.emit("debug",{action:"receiveCcipReadCallResult",transaction:Object.assign({},l),result:e}),e}catch(e){throw this.emit("debug",{action:"receiveCcipReadCallError",transaction:Object.assign({},l),error:e}),e}}throw e}}async#qe(e){const{value:t}=await fn({network:this.getNetwork(),value:e});return t}async call(e){const{tx:t,blockTag:n}=await fn({tx:this._getTransactionRequest(e),blockTag:this._getBlockTag(e.blockTag)});return await this.#qe(this.#ze(t,n,e.enableCcipRead?0:-1))}async#Qe(e,t,n){let r=this._getAddress(t),s=this._getBlockTag(n);return"string"==typeof r&&"string"==typeof s||([r,s]=await Promise.all([r,s])),await this.#qe(this.#He(Object.assign(e,{address:r,blockTag:s})))}async getBalance(e,t){return jn(await this.#Qe({method:"getBalance"},e,t),"%response")}async getTransactionCount(e,t){return zn(await this.#Qe({method:"getTransactionCount"},e,t),"%response")}async getCode(e,t){return On(await this.#Qe({method:"getCode"},e,t))}async getStorage(e,t,n){const r=jn(t,"position");return On(await this.#Qe({method:"getStorage",position:r},e,n))}async broadcastTransaction(e){const{blockNumber:t,hash:n,network:r}=await fn({blockNumber:this.getBlockNumber(),hash:this._perform({method:"broadcastTransaction",signedTransaction:e}),network:this.getNetwork()}),s=ru.from(e);if(s.hash!==n)throw new Error("@TODO: the returned hash did not match");return this._wrapTransactionResponse(s,r).replaceableTransaction(t)}async#Ge(e,t){if(Pn(e,32))return await this.#He({method:"getBlock",blockHash:e,includeTransactions:t});let n=this._getBlockTag(e);return"string"!=typeof n&&(n=await n),await this.#He({method:"getBlock",blockTag:n,includeTransactions:t})}async getBlock(e,t){const{network:n,params:r}=await fn({network:this.getNetwork(),params:this.#Ge(e,!!t)});return null==r?null:this._wrapBlock(r,n)}async getTransaction(e){const{network:t,params:n}=await fn({network:this.getNetwork(),params:this.#He({method:"getTransaction",hash:e})});return null==n?null:this._wrapTransactionResponse(n,t)}async getTransactionReceipt(e){const{network:t,params:n}=await fn({network:this.getNetwork(),params:this.#He({method:"getTransactionReceipt",hash:e})});if(null==n)return null;if(null==n.gasPrice&&null==n.effectiveGasPrice){const t=await this.#He({method:"getTransaction",hash:e});if(null==t)throw new Error("report this; could not find tx or effectiveGasPrice");n.effectiveGasPrice=t.gasPrice}return this._wrapTransactionReceipt(n,t)}async getTransactionResult(e){const{result:t}=await fn({network:this.getNetwork(),result:this.#He({method:"getTransactionResult",hash:e})});return null==t?null:On(t)}async getLogs(e){let t=this._getFilter(e);Uu(t)&&(t=await t);const{network:n,params:r}=await fn({network:this.getNetwork(),params:this.#He({method:"getLogs",filter:t})});return r.map((e=>this._wrapLog(e,n)))}_getProvider(e){vn(!1,"provider cannot connect to target network","UNSUPPORTED_OPERATION",{operation:"_getProvider()"})}async getResolver(e){return await uu.fromName(this,e)}async getAvatar(e){const t=await this.getResolver(e);return t?await t.getAvatar():null}async resolveName(e){const t=await this.getResolver(e);return t?await t.getAddress():null}async lookupAddress(e){const t=cl((e=qr(e)).substring(2).toLowerCase()+".addr.reverse");try{const n=await uu.getEnsAddress(this),r=new zo(n,["function resolver(bytes32) view returns (address)"],this),s=await r.resolver(t);if(null==s||s===Yi)return null;const i=new zo(s,["function name(bytes32) view returns (string)"],this),o=await i.name(t);return await this.resolveName(o)!==e?null:o}catch(e){if(yn(e,"BAD_DATA")&&"0x"===e.value)return null;if(yn(e,"CALL_EXCEPTION"))return null;throw e}return null}async waitForTransaction(e,t,n){const r=null!=t?t:1;return 0===r?this.getTransactionReceipt(e):new Promise((async(t,s)=>{let i=null;const o=async n=>{try{const s=await this.getTransactionReceipt(e);if(null!=s&&n-s.blockNumber+1>=r)return t(s),void(i&&(clearTimeout(i),i=null))}catch(e){console.log("EEE",e)}this.once("block",o)};null!=n&&(i=setTimeout((()=>{null!=i&&(i=null,this.off("block",o),s(wn("timeout","TIMEOUT",{reason:"timeout"})))}),n)),o(await this.getBlockNumber())}))}async waitForBlock(e){vn(!1,"not implemented yet","NOT_IMPLEMENTED",{operation:"waitForBlock"})}_clearTimeout(e){const t=this.#je.get(e);t&&(t.timer&&clearTimeout(t.timer),this.#je.delete(e))}_setTimeout(e,t){null==t&&(t=0);const n=this.#$e++,r=()=>{this.#je.delete(n),e()};if(this.paused)this.#je.set(n,{timer:null,func:r,time:t});else{const e=setTimeout(r,t);this.#je.set(n,{timer:e,func:r,time:Gu()})}return n}_forEachSubscriber(e){for(const t of this.#Te.values())e(t.subscriber)}_getSubscriber(e){switch(e.type){case"debug":case"error":case"network":return new ju(e.type);case"block":{const e=new Su(this);return e.pollingInterval=this.pollingInterval,e}case"safe":case"finalized":return new Iu(this,e.type);case"event":return new Du(this,e.filter);case"transaction":return new Lu(this,e.hash);case"orphan":return new Fu(this,e.filter)}throw new Error(`unsupported event: ${e.type}`)}_recoverSubscriber(e,t){for(const n of this.#Te.values())if(n.subscriber===e){n.started&&n.subscriber.stop(),n.subscriber=t,n.started&&t.start(),null!=this.#Ie&&t.pause(this.#Ie);break}}async#Je(e,t){let n=await Hu(e,this);return"event"===n.type&&t&&t.length>0&&!0===t[0].removed&&(n=await Hu({orphan:"drop-log",log:t[0]},this)),this.#Te.get(n.tag)||null}async#Ke(e){const t=await Hu(e,this),n=t.tag;let r=this.#Te.get(n);return r||(r={subscriber:this._getSubscriber(t),tag:n,addressableMap:new WeakMap,nameMap:new Map,started:!1,listeners:[]},this.#Te.set(n,r)),r}async on(e,t){const n=await this.#Ke(e);return n.listeners.push({listener:t,once:!1}),n.started||(n.subscriber.start(),n.started=!0,null!=this.#Ie&&n.subscriber.pause(this.#Ie)),this}async once(e,t){const n=await this.#Ke(e);return n.listeners.push({listener:t,once:!0}),n.started||(n.subscriber.start(),n.started=!0,null!=this.#Ie&&n.subscriber.pause(this.#Ie)),this}async emit(e,...t){const n=await this.#Je(e,t);if(!n||0===n.listeners.length)return!1;const r=n.listeners.length;return n.listeners=n.listeners.filter((({listener:n,once:r})=>{const s=new yo(this,r?null:n,e);try{n.call(this,...t,s)}catch(e){}return!r})),0===n.listeners.length&&(n.started&&n.subscriber.stop(),this.#Te.delete(n.tag)),r>0}async listenerCount(e){if(e){const t=await this.#Je(e);return t?t.listeners.length:0}let t=0;for(const{listeners:e}of this.#Te.values())t+=e.length;return t}async listeners(e){if(e){const t=await this.#Je(e);return t?t.listeners.map((({listener:e})=>e)):[]}let t=[];for(const{listeners:e}of this.#Te.values())t=t.concat(e.map((({listener:e})=>e)));return t}async off(e,t){const n=await this.#Je(e);if(!n)return this;if(t){const e=n.listeners.map((({listener:e})=>e)).indexOf(t);e>=0&&n.listeners.splice(e,1)}return t&&0!==n.listeners.length||(n.started&&n.subscriber.stop(),this.#Te.delete(n.tag)),this}async removeAllListeners(e){if(e){const{tag:t,started:n,subscriber:r}=await this.#Ke(e);n&&r.stop(),this.#Te.delete(t)}else for(const[e,{started:t,subscriber:n}]of this.#Te)t&&n.stop(),this.#Te.delete(e);return this}async addListener(e,t){return await this.on(e,t)}async removeListener(e,t){return this.off(e,t)}get destroyed(){return this.#Fe}destroy(){this.removeAllListeners();for(const e of this.#je.keys())this._clearTimeout(e);this.#Fe=!0}get paused(){return null!=this.#Ie}set paused(e){!!e!==this.paused&&(this.paused?this.resume():this.pause(!1))}pause(e){if(this.#Ue=-1,null!=this.#Ie){if(this.#Ie==!!e)return;vn(!1,"cannot change pause type; resume first","UNSUPPORTED_OPERATION",{operation:"pause"})}this._forEachSubscriber((t=>t.pause(e))),this.#Ie=!!e;for(const e of this.#je.values())e.timer&&clearTimeout(e.timer),e.time=Gu()-e.time}resume(){if(null!=this.#Ie){this._forEachSubscriber((e=>e.resume())),this.#Ie=null;for(const e of this.#je.values()){let t=e.time;t<0&&(t=0),e.time=Gu(),setTimeout(e.func,t)}}}}function Qu(e,t){try{const n=Ju(e,t);if(n)return gs(n)}catch(e){}return null}function Ju(e,t){if("0x"===e)return null;try{const n=zn(Tn(e,t,t+32)),r=zn(Tn(e,n,n+32));return Tn(e,n+32,n+32+r)}catch(e){}return null}function Ku(e){const t=Qn(e);if(t.length>32)throw new Error("internal; should not happen");const n=new Uint8Array(32);return n.set(t,32-t.length),n}function Wu(e){if(e.length%32==0)return e;const t=new Uint8Array(32*Math.ceil(e.length/32));return t.set(e),t}const Yu=new Uint8Array([]);function Zu(e){const t=[];let n=0;for(let r=0;r<e.length;r++)t.push(Yu),n+=32;for(let r=0;r<e.length;r++){const s=Cn(e[r]);t[r]=Ku(n),t.push(Ku(s.length)),t.push(Wu(s)),n+=32+32*Math.ceil(s.length/32)}return Bn(t)}const Xu="0x0000000000000000000000000000000000000000000000000000000000000000";function eh(e,t){if(e.provider)return e.provider;vn(!1,"missing provider","UNSUPPORTED_OPERATION",{operation:t})}async function th(e,t){let n=co(t);if(null!=n.to&&(n.to=wi(n.to,e)),null!=n.from){const t=n.from;n.from=Promise.all([e.getAddress(),wi(t,e)]).then((([e,t])=>(An(e.toLowerCase()===t.toLowerCase(),"transaction from mismatch","tx.from",t),e)))}else n.from=e.getAddress();return await fn(n)}class nh{provider;constructor(e){mn(this,{provider:e||null})}async getNonce(e){return eh(this,"getTransactionCount").getTransactionCount(await this.getAddress(),e)}async populateCall(e){return await th(this,e)}async populateTransaction(e){const t=eh(this,"populateTransaction"),n=await th(this,e);null==n.nonce&&(n.nonce=await this.getNonce("pending")),null==n.gasLimit&&(n.gasLimit=await this.estimateGas(n));const r=await this.provider.getNetwork();null!=n.chainId?An(jn(n.chainId)===r.chainId,"transaction chainId mismatch","tx.chainId",e.chainId):n.chainId=r.chainId;const s=null!=n.maxFeePerGas||null!=n.maxPriorityFeePerGas;if(null==n.gasPrice||2!==n.type&&!s?0!==n.type&&1!==n.type||!s||An(!1,"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","tx",e):An(!1,"eip-1559 transaction do not support gasPrice","tx",e),2!==n.type&&null!=n.type||null==n.maxFeePerGas||null==n.maxPriorityFeePerGas)if(0===n.type||1===n.type){const e=await t.getFeeData();vn(null!=e.gasPrice,"network does not support gasPrice","UNSUPPORTED_OPERATION",{operation:"getGasPrice"}),null==n.gasPrice&&(n.gasPrice=e.gasPrice)}else{const e=await t.getFeeData();if(null==n.type)if(null!=e.maxFeePerGas&&null!=e.maxPriorityFeePerGas)if(n.type=2,null!=n.gasPrice){const e=n.gasPrice;delete n.gasPrice,n.maxFeePerGas=e,n.maxPriorityFeePerGas=e}else null==n.maxFeePerGas&&(n.maxFeePerGas=e.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=e.maxPriorityFeePerGas);else null!=e.gasPrice?(vn(!s,"network does not support EIP-1559","UNSUPPORTED_OPERATION",{operation:"populateTransaction"}),null==n.gasPrice&&(n.gasPrice=e.gasPrice),n.type=0):vn(!1,"failed to get consistent fee data","UNSUPPORTED_OPERATION",{operation:"signer.getFeeData"});else 2===n.type&&(null==n.maxFeePerGas&&(n.maxFeePerGas=e.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=e.maxPriorityFeePerGas))}else n.type=2;return await fn(n)}async estimateGas(e){return eh(this,"estimateGas").estimateGas(await this.populateCall(e))}async call(e){return eh(this,"call").call(await this.populateCall(e))}async resolveName(e){const t=eh(this,"resolveName");return await t.resolveName(e)}async sendTransaction(e){const t=eh(this,"sendTransaction"),n=await this.populateTransaction(e);delete n.from;const r=ru.from(n);return await t.broadcastTransaction(await this.signTransaction(r))}}class rh{#ke;#We;#xe;#Re;#Ye;#Ze;constructor(e){this.#ke=e,this.#We=null,this.#xe=this.#Pe.bind(this),this.#Re=!1,this.#Ye=null,this.#Ze=!1}_subscribe(e){throw new Error("subclasses must override this")}_emitResults(e,t){throw new Error("subclasses must override this")}_recover(e){throw new Error("subclasses must override this")}async#Pe(e){try{null==this.#We&&(this.#We=this._subscribe(this.#ke));let e=null;try{e=await this.#We}catch(e){if(!yn(e,"UNSUPPORTED_OPERATION")||"eth_newFilter"!==e.operation)throw e}if(null==e)return this.#We=null,void this.#ke._recoverSubscriber(this,this._recover(this.#ke));const t=await this.#ke.getNetwork();if(this.#Ye||(this.#Ye=t),this.#Ye.chainId!==t.chainId)throw new Error("chaid changed");if(this.#Ze)return;const n=await this.#ke.send("eth_getFilterChanges",[e]);await this._emitResults(this.#ke,n)}catch(e){console.log("@TODO",e)}this.#ke.once("block",this.#xe)}#Xe(){const e=this.#We;e&&(this.#We=null,e.then((e=>{this.#ke.send("eth_uninstallFilter",[e])})))}start(){this.#Re||(this.#Re=!0,this.#Pe(-2))}stop(){this.#Re&&(this.#Re=!1,this.#Ze=!0,this.#Xe(),this.#ke.off("block",this.#xe))}pause(e){e&&this.#Xe(),this.#ke.off("block",this.#xe)}resume(){this.start()}}class sh extends rh{#et;constructor(e,t){var n;super(e),this.#et=(n=t,JSON.parse(JSON.stringify(n)))}_recover(e){return new Du(e,this.#et)}async _subscribe(e){return await e.send("eth_newFilter",[this.#et])}async _emitResults(e,t){for(const n of t)e.emit(this.#et,e._wrapLog(n,e._network))}}class ih extends rh{async _subscribe(e){return await e.send("eth_newPendingTransactionFilter",[])}async _emitResults(e,t){for(const n of t)e.emit("pending",n)}}const oh="bigint,boolean,function,number,string,symbol".split(/,/g);function ah(e){if(null==e||oh.indexOf(typeof e)>=0)return e;if("function"==typeof e.getAddress)return e;if(Array.isArray(e))return e.map(ah);if("object"==typeof e)return Object.keys(e).reduce(((t,n)=>(t[n]=e[n],t)),{});throw new Error(`should not happen: ${e} (${typeof e})`)}function lh(e){return new Promise((t=>{setTimeout(t,e)}))}function ch(e){return e?e.toLowerCase():e}function uh(e){return e&&"number"==typeof e.pollingInterval}const hh={polling:!1,staticNetwork:null,batchStallTime:10,batchMaxSize:1<<20,batchMaxCount:100,cacheTimeout:250,pollingInterval:4e3};class dh extends nh{address;constructor(e,t){super(e),mn(this,{address:t=qr(t)})}connect(e){vn(!1,"cannot reconnect JsonRpcSigner","UNSUPPORTED_OPERATION",{operation:"signer.connect"})}async getAddress(){return this.address}async populateTransaction(e){return await this.populateCall(e)}async sendUncheckedTransaction(e){const t=ah(e),n=[];if(t.from){const r=t.from;n.push((async()=>{const n=await wi(r,this.provider);An(null!=n&&n.toLowerCase()===this.address.toLowerCase(),"from address mismatch","transaction",e),t.from=n})())}else t.from=this.address;if(null==t.gasLimit&&n.push((async()=>{t.gasLimit=await this.provider.estimateGas({...t,from:this.address})})()),null!=t.to){const e=t.to;n.push((async()=>{t.to=await wi(e,this.provider)})())}n.length&&await Promise.all(n);const r=this.provider.getRpcTransaction(t);return this.provider.send("eth_sendTransaction",[r])}async sendTransaction(e){const t=await this.provider.getBlockNumber(),n=await this.sendUncheckedTransaction(e);return await new Promise(((e,r)=>{const s=[1e3,100];let i=0;const o=async()=>{try{const r=await this.provider.getTransaction(n);if(null!=r)return void e(r.replaceableTransaction(t))}catch(e){if(yn(e,"CANCELLED")||yn(e,"BAD_DATA")||yn(e,"NETWORK_ERROR"))return null==e.info&&(e.info={}),e.info.sendTransactionHash=n,void r(e);if(yn(e,"INVALID_ARGUMENT")&&(i++,null==e.info&&(e.info={}),e.info.sendTransactionHash=n,i>10))return void r(e);this.provider.emit("error",wn("failed to fetch transation after sending (will try again)","UNKNOWN_ERROR",{error:e}))}this.provider._setTimeout((()=>{o()}),s.pop()||4e3)};o()}))}async signTransaction(e){const t=ah(e);if(t.from){const n=await wi(t.from,this.provider);An(null!=n&&n.toLowerCase()===this.address.toLowerCase(),"from address mismatch","transaction",e),t.from=n}else t.from=this.address;const n=this.provider.getRpcTransaction(t);return await this.provider.send("eth_signTransaction",[n])}async signMessage(e){const t="string"==typeof e?ms(e):e;return await this.provider.send("personal_sign",[On(t),this.address.toLowerCase()])}async signTypedData(e,t,n){const r=ah(n),s=await Ii.resolveNames(e,t,r,(async e=>{const t=await wi(e);return An(null!=t,"TypedData does not support null address","value",e),t}));return await this.provider.send("eth_signTypedData_v4",[this.address.toLowerCase(),JSON.stringify(Ii.getPayload(s.domain,t,s.value))])}async unlock(e){return this.provider.send("personal_unlockAccount",[this.address.toLowerCase(),e,null])}async _legacySignMessage(e){const t="string"==typeof e?ms(e):e;return await this.provider.send("eth_sign",[this.address.toLowerCase(),On(t)])}}class ph extends qu{#u;#tt;#nt;#rt;#st;#Ye;#it;#ot(){if(this.#rt)return;const e=1===this._getOption("batchMaxCount")?0:this._getOption("batchStallTime");this.#rt=setTimeout((()=>{this.#rt=null;const e=this.#nt;for(this.#nt=[];e.length;){const t=[e.shift()];for(;e.length&&t.length!==this.#u.batchMaxCount;){t.push(e.shift());const n=JSON.stringify(t.map((e=>e.payload)));if(n.length>this.#u.batchMaxSize){e.unshift(t.pop());break}}(async()=>{const e=1===t.length?t[0].payload:t.map((e=>e.payload));this.emit("debug",{action:"sendRpcPayload",payload:e});try{const n=await this._send(e);this.emit("debug",{action:"receiveRpcResult",result:n});for(const{resolve:e,reject:r,payload:s}of t){if(this.destroyed){r(wn("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:s.method}));continue}const t=n.filter((e=>e.id===s.id))[0];if(null!=t)"error"in t?r(this.getRpcError(s,t)):e(t.result);else{const e=wn("missing response for request","BAD_DATA",{value:n,info:{payload:s}});this.emit("error",e),r(e)}}}catch(e){this.emit("debug",{action:"receiveRpcError",error:e});for(const{reject:n}of t)n(e)}})()}}),e)}constructor(e,t){super(e,t),this.#tt=1,this.#u=Object.assign({},hh,t||{}),this.#nt=[],this.#rt=null,this.#Ye=null,this.#it=null;{let e=null;const t=new Promise((t=>{e=t}));this.#st={promise:t,resolve:e}}const n=this._getOption("staticNetwork");"boolean"==typeof n?(An(!n||"any"!==e,"staticNetwork cannot be used on special network 'any'","options",t),n&&null!=e&&(this.#Ye=Nu.from(e))):n&&(An(null==e||n.matches(e),"staticNetwork MUST match network object","options",t),this.#Ye=n)}_getOption(e){return this.#u[e]}get _network(){return vn(this.#Ye,"network is not available yet","NETWORK_ERROR"),this.#Ye}async _perform(e){if("call"===e.method||"estimateGas"===e.method){let t=e.transaction;if(t&&null!=t.type&&jn(t.type)&&null==t.maxFeePerGas&&null==t.maxPriorityFeePerGas){const n=await this.getFeeData();null==n.maxFeePerGas&&null==n.maxPriorityFeePerGas&&(e=Object.assign({},e,{transaction:Object.assign({},t,{type:void 0})}))}}const t=this.getRpcRequest(e);return null!=t?await this.send(t.method,t.args):super._perform(e)}async _detectNetwork(){const e=this._getOption("staticNetwork");if(e){if(!0!==e)return e;if(this.#Ye)return this.#Ye}return this.#it?await this.#it:this.ready?(this.#it=(async()=>{try{const e=Nu.from(jn(await this.send("eth_chainId",[])));return this.#it=null,e}catch(e){throw this.#it=null,e}})(),await this.#it):(this.#it=(async()=>{const e={id:this.#tt++,method:"eth_chainId",params:[],jsonrpc:"2.0"};let t;this.emit("debug",{action:"sendRpcPayload",payload:e});try{t=(await this._send(e))[0],this.#it=null}catch(e){throw this.#it=null,this.emit("debug",{action:"receiveRpcError",error:e}),e}if(this.emit("debug",{action:"receiveRpcResult",result:t}),"result"in t)return Nu.from(jn(t.result));throw this.getRpcError(e,t)})(),await this.#it)}_start(){null!=this.#st&&null!=this.#st.resolve&&(this.#st.resolve(),this.#st=null,(async()=>{for(;null==this.#Ye&&!this.destroyed;)try{this.#Ye=await this._detectNetwork()}catch(e){if(this.destroyed)break;console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)"),this.emit("error",wn("failed to bootstrap network detection","NETWORK_ERROR",{event:"initial-network-discovery",info:{error:e}})),await lh(1e3)}this.#ot()})())}async _waitUntilReady(){if(null!=this.#st)return await this.#st.promise}_getSubscriber(e){return"pending"===e.type?new ih(this):"event"===e.type?this._getOption("polling")?new Du(this,e.filter):new sh(this,e.filter):"orphan"===e.type&&"drop-log"===e.filter.orphan?new ju("orphan"):super._getSubscriber(e)}get ready(){return null==this.#st}getRpcTransaction(e){const t={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((n=>{if(null==e[n])return;let r=n;"gasLimit"===n&&(r="gas"),t[r]=Jn(jn(e[n],`tx.${n}`))})),["from","to","data"].forEach((n=>{null!=e[n]&&(t[n]=On(e[n]))})),e.accessList&&(t.accessList=Li(e.accessList)),t}getRpcRequest(e){switch(e.method){case"chainId":return{method:"eth_chainId",args:[]};case"getBlockNumber":return{method:"eth_blockNumber",args:[]};case"getGasPrice":return{method:"eth_gasPrice",args:[]};case"getPriorityFee":return{method:"eth_maxPriorityFeePerGas",args:[]};case"getBalance":return{method:"eth_getBalance",args:[ch(e.address),e.blockTag]};case"getTransactionCount":return{method:"eth_getTransactionCount",args:[ch(e.address),e.blockTag]};case"getCode":return{method:"eth_getCode",args:[ch(e.address),e.blockTag]};case"getStorage":return{method:"eth_getStorageAt",args:[ch(e.address),"0x"+e.position.toString(16),e.blockTag]};case"broadcastTransaction":return{method:"eth_sendRawTransaction",args:[e.signedTransaction]};case"getBlock":if("blockTag"in e)return{method:"eth_getBlockByNumber",args:[e.blockTag,!!e.includeTransactions]};if("blockHash"in e)return{method:"eth_getBlockByHash",args:[e.blockHash,!!e.includeTransactions]};break;case"getTransaction":return{method:"eth_getTransactionByHash",args:[e.hash]};case"getTransactionReceipt":return{method:"eth_getTransactionReceipt",args:[e.hash]};case"call":return{method:"eth_call",args:[this.getRpcTransaction(e.transaction),e.blockTag]};case"estimateGas":return{method:"eth_estimateGas",args:[this.getRpcTransaction(e.transaction)]};case"getLogs":return e.filter&&null!=e.filter.address&&(Array.isArray(e.filter.address)?e.filter.address=e.filter.address.map(ch):e.filter.address=ch(e.filter.address)),{method:"eth_getLogs",args:[e.filter]}}return null}getRpcError(e,t){const{method:n}=e,{error:r}=t;if("eth_estimateGas"===n&&r.message){const t=r.message;if(!t.match(/revert/i)&&t.match(/insufficient funds/i))return wn("insufficient funds","INSUFFICIENT_FUNDS",{transaction:e.params[0],info:{payload:e,error:r}})}if("eth_call"===n||"eth_estimateGas"===n){const t=gh(r),s=gi.getBuiltinCallException("eth_call"===n?"call":"estimateGas",e.params[0],t?t.data:null);return s.info={error:r,payload:e},s}const s=JSON.stringify(function(e){const t=[];return yh(e,t),t}(r));if("string"==typeof r.message&&r.message.match(/user denied|ethers-user-denied/i))return wn("user rejected action","ACTION_REJECTED",{action:{eth_sign:"signMessage",personal_sign:"signMessage",eth_signTypedData_v4:"signTypedData",eth_signTransaction:"signTransaction",eth_sendTransaction:"sendTransaction",eth_requestAccounts:"requestAccess",wallet_requestAccounts:"requestAccess"}[n]||"unknown",reason:"rejected",info:{payload:e,error:r}});if("eth_sendRawTransaction"===n||"eth_sendTransaction"===n){const t=e.params[0];if(s.match(/insufficient funds|base fee exceeds gas limit/i))return wn("insufficient funds for intrinsic transaction cost","INSUFFICIENT_FUNDS",{transaction:t,info:{error:r}});if(s.match(/nonce/i)&&s.match(/too low/i))return wn("nonce has already been used","NONCE_EXPIRED",{transaction:t,info:{error:r}});if(s.match(/replacement transaction/i)&&s.match(/underpriced/i))return wn("replacement fee too low","REPLACEMENT_UNDERPRICED",{transaction:t,info:{error:r}});if(s.match(/only replay-protected/i))return wn("legacy pre-eip-155 transactions not supported","UNSUPPORTED_OPERATION",{operation:n,info:{transaction:t,info:{error:r}}})}let i=!!s.match(/the method .* does not exist/i);return i||r&&r.details&&r.details.startsWith("Unauthorized method:")&&(i=!0),i?wn("unsupported operation","UNSUPPORTED_OPERATION",{operation:e.method,info:{error:r,payload:e}}):wn("could not coalesce error","UNKNOWN_ERROR",{error:r,payload:e})}send(e,t){if(this.destroyed)return Promise.reject(wn("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:e}));const n=this.#tt++,r=new Promise(((r,s)=>{this.#nt.push({resolve:r,reject:s,payload:{method:e,params:t,id:n,jsonrpc:"2.0"}})}));return this.#ot(),r}async getSigner(e){null==e&&(e=0);const t=this.send("eth_accounts",[]);if("number"==typeof e){const n=await t;if(e>=n.length)throw new Error("no such account");return new dh(this,n[e])}const{accounts:n}=await fn({network:this.getNetwork(),accounts:t});e=qr(e);for(const t of n)if(qr(t)===e)return new dh(this,e);throw new Error("invalid account")}async listAccounts(){return(await this.send("eth_accounts",[])).map((e=>new dh(this,e)))}destroy(){this.#rt&&(clearTimeout(this.#rt),this.#rt=null);for(const{payload:e,reject:t}of this.#nt)t(wn("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:e.method}));this.#nt=[],super.destroy()}}class fh extends ph{#at;constructor(e,t){super(e,t),this.#at=4e3}_getSubscriber(e){const t=super._getSubscriber(e);return uh(t)&&(t.pollingInterval=this.#at),t}get pollingInterval(){return this.#at}set pollingInterval(e){if(!Number.isInteger(e)||e<0)throw new Error("invalid interval");this.#at=e,this._forEachSubscriber((e=>{uh(e)&&(e.pollingInterval=this.#at)}))}}class mh extends fh{#lt;constructor(e,t,n){null==e&&(e="http://localhost:8545"),super(t,n),this.#lt="string"==typeof e?new Ji(e):e.clone()}_getConnection(){return this.#lt.clone()}async send(e,t){return await this._start(),await super.send(e,t)}async _send(e){const t=this._getConnection();t.body=JSON.stringify(e),t.setHeader("content-type","application/json");const n=await t.send();n.assertOk();let r=n.bodyJson;return Array.isArray(r)||(r=[r]),r}}function gh(e){if(null==e)return null;if("string"==typeof e.message&&e.message.match(/revert/i)&&Pn(e.data))return{message:e.message,data:e.data};if("object"==typeof e){for(const t in e){const n=gh(e[t]);if(n)return n}return null}if("string"==typeof e)try{return gh(JSON.parse(e))}catch(e){}return null}function yh(e,t){if(null!=e){if("string"==typeof e.message&&t.push(e.message),"object"==typeof e)for(const n in e)yh(e[n],t);if("string"==typeof e)try{return yh(JSON.parse(e),t)}catch(e){}}}class bh extends fh{#U;constructor(e,t){An(e&&e.request,"invalid EIP-1193 provider","ethereum",e),super(t,{batchMaxCount:1}),this.#U=async(t,n)=>{const r={method:t,params:n};this.emit("debug",{action:"sendEip1193Request",payload:r});try{const t=await e.request(r);return this.emit("debug",{action:"receiveEip1193Result",result:t}),t}catch(e){const t=new Error(e.message);throw t.code=e.code,t.data=e.data,t.payload=r,this.emit("debug",{action:"receiveEip1193Error",error:t}),t}}}async send(e,t){return await this._start(),await super.send(e,t)}async _send(e){An(!Array.isArray(e),"EIP-1193 does not support batch request","payload",e);try{const t=await this.#U(e.method,e.params||[]);return[{id:e.id,result:t}]}catch(t){return[{id:e.id,error:{code:t.code,data:t.data,message:t.message}}]}}getRpcError(e,t){switch((t=JSON.parse(JSON.stringify(t))).error.code||-1){case 4001:t.error.message=`ethers-user-denied: ${t.error.message}`;break;case 4200:t.error.message=`ethers-unsupported: ${t.error.message}`}return super.getRpcError(e,t)}async hasSigner(e){null==e&&(e=0);const t=await this.send("eth_accounts",[]);return"number"==typeof e?t.length>e:(e=e.toLowerCase(),0!==t.filter((t=>t.toLowerCase()===e)).length)}async getSigner(e){if(null==e&&(e=0),!await this.hasSigner(e))try{await this.#U("eth_requestAccounts",[])}catch(e){const t=e.payload;throw this.getRpcError(t,{id:t.id,error:e})}return await super.getSigner(e)}}const wh=new Set;function vh(e){wh.has(e)||(wh.add(e),console.log("========= NOTICE ========="),console.log(`Request-Rate Exceeded for ${e} (this message will not be repeated)`),console.log(""),console.log("The default API keys for each service are provided as a highly-throttled,"),console.log("community resource for low-traffic projects and early prototyping."),console.log(""),console.log("While your application will continue to function, we highly recommended"),console.log("signing up for your own API keys to improve performance, increase your"),console.log("request rate/limit and enable other perks, such as metrics and advanced APIs."),console.log(""),console.log("For more details: https://docs.ethers.org/api-keys/"),console.log("=========================="))}const Ah="9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";class _h extends mh{apiKey;constructor(e,t){null==e&&(e="mainnet");const n=Nu.from(e);null==t&&(t=Ah);const r={polling:!0,staticNetwork:n};super(_h.getRequest(n,t),n,r),mn(this,{apiKey:t})}_getProvider(e){try{return new _h(e,this.apiKey)}catch(e){}return super._getProvider(e)}static getRequest(e,t){null==t&&(t=Ah);const n=new Ji(`https://${function(e){switch(e){case"mainnet":return"rpc.ankr.com/eth";case"goerli":return"rpc.ankr.com/eth_goerli";case"sepolia":return"rpc.ankr.com/eth_sepolia";case"arbitrum":return"rpc.ankr.com/arbitrum";case"base":return"rpc.ankr.com/base";case"base-goerli":return"rpc.ankr.com/base_goerli";case"base-sepolia":return"rpc.ankr.com/base_sepolia";case"bnb":return"rpc.ankr.com/bsc";case"bnbt":return"rpc.ankr.com/bsc_testnet_chapel";case"matic":return"rpc.ankr.com/polygon";case"matic-mumbai":return"rpc.ankr.com/polygon_mumbai";case"optimism":return"rpc.ankr.com/optimism";case"optimism-goerli":return"rpc.ankr.com/optimism_testnet";case"optimism-sepolia":return"rpc.ankr.com/optimism_sepolia"}An(!1,"unsupported network","network",e)}(e.name)}/${t}`);return n.allowGzip=!0,t===Ah&&(n.retryFunc=async(e,t,n)=>(vh("AnkrProvider"),!0)),n}getRpcError(e,t){return"eth_sendRawTransaction"===e.method&&t&&t.error&&"INTERNAL_ERROR: could not replace existing tx"===t.error.message&&(t.error.message="replacement transaction underpriced"),super.getRpcError(e,t)}isCommunityResource(){return this.apiKey===Ah}}const Eh="_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";class kh extends mh{apiKey;constructor(e,t){null==e&&(e="mainnet");const n=Nu.from(e);null==t&&(t=Eh),super(kh.getRequest(n,t),n,{staticNetwork:n}),mn(this,{apiKey:t})}_getProvider(e){try{return new kh(e,this.apiKey)}catch(e){}return super._getProvider(e)}async _perform(e){if("getTransactionResult"===e.method){const{trace:t,tx:n}=await fn({trace:this.send("trace_transaction",[e.hash]),tx:this.getTransaction(e.hash)});if(null==t||null==n)return null;let r,s=!1;try{r=t[0].result.output,s="Reverted"===t[0].error}catch(e){}if(r)return vn(!s,"an error occurred during transaction executions","CALL_EXCEPTION",{action:"getTransactionResult",data:r,reason:null,transaction:n,invocation:null,revert:null}),r;vn(!1,"could not parse trace result","BAD_DATA",{value:t})}return await super._perform(e)}isCommunityResource(){return this.apiKey===Eh}static getRequest(e,t){null==t&&(t=Eh);const n=new Ji(`https://${function(e){switch(e){case"mainnet":return"eth-mainnet.alchemyapi.io";case"goerli":return"eth-goerli.g.alchemy.com";case"sepolia":return"eth-sepolia.g.alchemy.com";case"arbitrum":return"arb-mainnet.g.alchemy.com";case"arbitrum-goerli":return"arb-goerli.g.alchemy.com";case"arbitrum-sepolia":return"arb-sepolia.g.alchemy.com";case"base":return"base-mainnet.g.alchemy.com";case"base-goerli":return"base-goerli.g.alchemy.com";case"base-sepolia":return"base-sepolia.g.alchemy.com";case"matic":return"polygon-mainnet.g.alchemy.com";case"matic-mumbai":return"polygon-mumbai.g.alchemy.com";case"optimism":return"opt-mainnet.g.alchemy.com";case"optimism-goerli":return"opt-goerli.g.alchemy.com";case"optimism-sepolia":return"opt-sepolia.g.alchemy.com"}An(!1,"unsupported network","network",e)}(e.name)}/v2/${t}`);return n.allowGzip=!0,t===Eh&&(n.retryFunc=async(e,t,n)=>(vh("alchemy"),!0)),n}}class xh extends mh{constructor(e){null==e&&(e="mainnet");const t=Nu.from(e);An("mainnet"===t.name,"unsupported network","network",e),super("https://cloudflare-eth.com/",t,{staticNetwork:t})}}const Ch=["enableCcipRead"];let Nh=1;class Ph extends qu{network;apiKey;#ct;constructor(e,t){const n=null!=t?t:null;super();const r=Nu.from(e);this.#ct=r.getPlugin("org.ethers.plugins.provider.Etherscan"),mn(this,{apiKey:n,network:r}),this.getBaseUrl()}getBaseUrl(){if(this.#ct)return this.#ct.baseUrl;switch(this.network.name){case"mainnet":return"https://api.etherscan.io";case"goerli":return"https://api-goerli.etherscan.io";case"sepolia":return"https://api-sepolia.etherscan.io";case"holesky":return"https://api-holesky.etherscan.io";case"arbitrum":return"https://api.arbiscan.io";case"arbitrum-goerli":return"https://api-goerli.arbiscan.io";case"bnb":return"https://api.bscscan.com";case"bnbt":return"https://api-testnet.bscscan.com";case"matic":return"https://api.polygonscan.com";case"matic-mumbai":return"https://api-testnet.polygonscan.com";case"optimism":return"https://api-optimistic.etherscan.io";case"optimism-goerli":return"https://api-goerli-optimistic.etherscan.io"}An(!1,"unsupported network","network",this.network)}getUrl(e,t){const n=Object.keys(t).reduce(((e,n)=>{const r=t[n];return null!=r&&(e+=`&${n}=${r}`),e}),""),r=this.apiKey?`&apikey=${this.apiKey}`:"";return`${this.getBaseUrl()}/api?module=${e}${n}${r}`}getPostUrl(){return`${this.getBaseUrl()}/api`}getPostData(e,t){return t.module=e,t.apikey=this.apiKey,t}async detectNetwork(){return this.network}async fetch(e,t,n){const r=Nh++,s=n?this.getPostUrl():this.getUrl(e,t),i=n?this.getPostData(e,t):null;this.emit("debug",{action:"sendRequest",id:r,url:s,payload:i});const o=new Ji(s);o.setThrottleParams({slotInterval:1e3}),o.retryFunc=(e,t,n)=>(this.isCommunityResource()&&vh("Etherscan"),Promise.resolve(!0)),o.processFunc=async(t,n)=>{const s=n.hasBody()?JSON.parse(gs(n.body)):{},i=("string"==typeof s.result?s.result:"").toLowerCase().indexOf("rate limit")>=0;return"proxy"===e?s&&0==s.status&&"NOTOK"==s.message&&i&&(this.emit("debug",{action:"receiveError",id:r,reason:"proxy-NOTOK",error:s}),n.throwThrottleError(s.result,2e3)):i&&(this.emit("debug",{action:"receiveError",id:r,reason:"null result",error:s.result}),n.throwThrottleError(s.result,2e3)),n},i&&(o.setHeader("content-type","application/x-www-form-urlencoded; charset=UTF-8"),o.body=Object.keys(i).map((e=>`${e}=${i[e]}`)).join("&"));const a=await o.send();try{a.assertOk()}catch(e){this.emit("debug",{action:"receiveError",id:r,error:e,reason:"assertOk"}),vn(!1,"response error","SERVER_ERROR",{request:o,response:a})}a.hasBody()||(this.emit("debug",{action:"receiveError",id:r,error:"missing body",reason:"null body"}),vn(!1,"missing response","SERVER_ERROR",{request:o,response:a}));const l=JSON.parse(gs(a.body));return"proxy"===e?("2.0"!=l.jsonrpc&&(this.emit("debug",{action:"receiveError",id:r,result:l,reason:"invalid JSON-RPC"}),vn(!1,"invalid JSON-RPC response (missing jsonrpc='2.0')","SERVER_ERROR",{request:o,response:a,info:{result:l}})),l.error&&(this.emit("debug",{action:"receiveError",id:r,result:l,reason:"JSON-RPC error"}),vn(!1,"error response","SERVER_ERROR",{request:o,response:a,info:{result:l}})),this.emit("debug",{action:"receiveRequest",id:r,result:l}),l.result):0!=l.status||"No records found"!==l.message&&"No transactions found"!==l.message?((1!=l.status||"string"==typeof l.message&&!l.message.match(/^OK/))&&(this.emit("debug",{action:"receiveError",id:r,result:l}),vn(!1,"error response","SERVER_ERROR",{request:o,response:a,info:{result:l}})),this.emit("debug",{action:"receiveRequest",id:r,result:l}),l.result):(this.emit("debug",{action:"receiveRequest",id:r,result:l}),l.result)}_getTransactionPostData(e){const t={};for(let n in e){if(Ch.indexOf(n)>=0)continue;if(null==e[n])continue;let r=e[n];"type"===n&&0===r||"blockTag"===n&&"latest"===r||(r={type:!0,gasLimit:!0,gasPrice:!0,maxFeePerGs:!0,maxPriorityFeePerGas:!0,nonce:!0,value:!0}[n]?Jn(r):"accessList"===n?"["+Li(r).map((e=>`{address:"${e.address}",storageKeys:["${e.storageKeys.join('","')}"]}`)).join(",")+"]":On(r),t[n]=r)}return t}_checkError(e,t,n){let r="";if(yn(t,"SERVER_ERROR")){try{r=t.info.result.error.message}catch(e){}if(!r)try{r=t.info.message}catch(e){}}if("estimateGas"===e.method&&!r.match(/revert/i)&&r.match(/insufficient funds/i)&&vn(!1,"insufficient funds","INSUFFICIENT_FUNDS",{transaction:e.transaction}),("call"===e.method||"estimateGas"===e.method)&&r.match(/execution reverted/i)){let n="";try{n=t.info.result.error.data}catch(t){}const r=gi.getBuiltinCallException(e.method,e.transaction,n);throw r.info={request:e,error:t},r}if(r&&"broadcastTransaction"===e.method){const t=ru.from(e.signedTransaction);r.match(/replacement/i)&&r.match(/underpriced/i)&&vn(!1,"replacement fee too low","REPLACEMENT_UNDERPRICED",{transaction:t}),r.match(/insufficient funds/)&&vn(!1,"insufficient funds for intrinsic transaction cost","INSUFFICIENT_FUNDS",{transaction:t}),r.match(/same hash was already imported|transaction nonce is too low|nonce too low/)&&vn(!1,"nonce has already been used","NONCE_EXPIRED",{transaction:t})}throw t}async _detectNetwork(){return this.network}async _perform(e){switch(e.method){case"chainId":return this.network.chainId;case"getBlockNumber":return this.fetch("proxy",{action:"eth_blockNumber"});case"getGasPrice":return this.fetch("proxy",{action:"eth_gasPrice"});case"getPriorityFee":if("mainnet"===this.network.name)return"1000000000";if("optimism"===this.network.name)return"1000000";throw new Error("fallback onto the AbstractProvider default");case"getBalance":return this.fetch("account",{action:"balance",address:e.address,tag:e.blockTag});case"getTransactionCount":return this.fetch("proxy",{action:"eth_getTransactionCount",address:e.address,tag:e.blockTag});case"getCode":return this.fetch("proxy",{action:"eth_getCode",address:e.address,tag:e.blockTag});case"getStorage":return this.fetch("proxy",{action:"eth_getStorageAt",address:e.address,position:e.position,tag:e.blockTag});case"broadcastTransaction":return this.fetch("proxy",{action:"eth_sendRawTransaction",hex:e.signedTransaction},!0).catch((t=>this._checkError(e,t,e.signedTransaction)));case"getBlock":if("blockTag"in e)return this.fetch("proxy",{action:"eth_getBlockByNumber",tag:e.blockTag,boolean:e.includeTransactions?"true":"false"});vn(!1,"getBlock by blockHash not supported by Etherscan","UNSUPPORTED_OPERATION",{operation:"getBlock(blockHash)"});case"getTransaction":return this.fetch("proxy",{action:"eth_getTransactionByHash",txhash:e.hash});case"getTransactionReceipt":return this.fetch("proxy",{action:"eth_getTransactionReceipt",txhash:e.hash});case"call":{if("latest"!==e.blockTag)throw new Error("EtherscanProvider does not support blockTag for call");const t=this._getTransactionPostData(e.transaction);t.module="proxy",t.action="eth_call";try{return await this.fetch("proxy",t,!0)}catch(t){return this._checkError(e,t,e.transaction)}}case"estimateGas":{const t=this._getTransactionPostData(e.transaction);t.module="proxy",t.action="eth_estimateGas";try{return await this.fetch("proxy",t,!0)}catch(t){return this._checkError(e,t,e.transaction)}}}return super._perform(e)}async getNetwork(){return this.network}async getEtherPrice(){return"mainnet"!==this.network.name?0:parseFloat((await this.fetch("stats",{action:"ethprice"})).ethusd)}async getContract(e){let t=this._getAddress(e);var n;(n=t)&&"function"==typeof n.then&&(t=await t);try{const e=await this.fetch("contract",{action:"getabi",address:t}),n=JSON.parse(e);return new zo(t,n,this)}catch(e){return null}}isCommunityResource(){return null==this.apiKey}}const Rh=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("unable to locate global object")}().WebSocket;class Oh{#ke;#Z;get filter(){return JSON.parse(this.#Z)}#ut;#ht;#dt;constructor(e,t){this.#ke=e,this.#Z=JSON.stringify(t),this.#ut=null,this.#ht=null,this.#dt=null}start(){this.#ut=this.#ke.send("eth_subscribe",this.filter).then((e=>(this.#ke._register(e,this),e)))}stop(){this.#ut.then((e=>{this.#ke.send("eth_unsubscribe",[e])})),this.#ut=null}pause(e){vn(e,"preserve logs while paused not supported by SocketSubscriber yet","UNSUPPORTED_OPERATION",{operation:"pause(false)"}),this.#ht=!!e}resume(){this.#ht=null}_handleMessage(e){if(null!=this.#ut&&null===this.#ht){let t=this.#dt;t=null==t?this._emit(this.#ke,e):t.then((async()=>{await this._emit(this.#ke,e)})),this.#dt=t.then((()=>{this.#dt===t&&(this.#dt=null)}))}}async _emit(e,t){throw new Error("sub-classes must implemente this; _emit")}}class Bh extends Oh{constructor(e){super(e,["newHeads"])}async _emit(e,t){e.emit("block",parseInt(t.number))}}class Sh extends Oh{constructor(e){super(e,["newPendingTransactions"])}async _emit(e,t){e.emit("pending",t)}}class Th extends Oh{#pt;get logFilter(){return JSON.parse(this.#pt)}constructor(e,t){super(e,["logs",t]),this.#pt=JSON.stringify(t)}async _emit(e,t){e.emit(this.logFilter,e._wrapLog(t,e._network))}}class Ih extends ph{#ft;#Te;#mt;constructor(e,t){const n=Object.assign({},null!=t?t:{});An(null==n.batchMaxCount||1===n.batchMaxCount,"sockets-based providers do not support batches","options.batchMaxCount",t),n.batchMaxCount=1,null==n.staticNetwork&&(n.staticNetwork=!0),super(e,n),this.#ft=new Map,this.#Te=new Map,this.#mt=new Map}_getSubscriber(e){switch(e.type){case"close":return new ju("close");case"block":return new Bh(this);case"pending":return new Sh(this);case"event":return new Th(this,e.filter);case"orphan":if("drop-log"===e.filter.orphan)return new ju("drop-log")}return super._getSubscriber(e)}_register(e,t){this.#Te.set(e,t);const n=this.#mt.get(e);if(n){for(const e of n)t._handleMessage(e);this.#mt.delete(e)}}async _send(e){An(!Array.isArray(e),"WebSocket does not support batch send","payload",e);const t=new Promise(((t,n)=>{this.#ft.set(e.id,{payload:e,resolve:t,reject:n})}));return await this._waitUntilReady(),await this._write(JSON.stringify(e)),[await t]}async _processMessage(e){const t=JSON.parse(e);if(t&&"object"==typeof t&&"id"in t){const e=this.#ft.get(t.id);if(null==e)return void this.emit("error",wn("received result for unknown id","UNKNOWN_ERROR",{reasonCode:"UNKNOWN_ID",result:t}));this.#ft.delete(t.id),e.resolve(t)}else{if(!t||"eth_subscription"!==t.method)return void this.emit("error",wn("received unexpected message","UNKNOWN_ERROR",{reasonCode:"UNEXPECTED_MESSAGE",result:t}));{const e=t.params.subscription,n=this.#Te.get(e);if(n)n._handleMessage(t.params.result);else{let n=this.#mt.get(e);null==n&&(n=[],this.#mt.set(e,n)),n.push(t.params.result)}}}}async _write(e){throw new Error("sub-classes must override this")}}class Fh extends Ih{#lt;#gt;get websocket(){if(null==this.#gt)throw new Error("websocket closed");return this.#gt}constructor(e,t,n){super(t,n),"string"==typeof e?(this.#lt=()=>new Rh(e),this.#gt=this.#lt()):"function"==typeof e?(this.#lt=e,this.#gt=e()):(this.#lt=null,this.#gt=e),this.websocket.onopen=async()=>{try{await this._start(),this.resume()}catch(e){console.log("failed to start WebsocketProvider",e)}},this.websocket.onmessage=e=>{this._processMessage(e.data)}}async _write(e){this.websocket.send(e)}async destroy(){null!=this.#gt&&(this.#gt.close(),this.#gt=null),super.destroy()}}const Lh="84842078b09946638c03157f83405213";class Dh extends Fh{projectId;projectSecret;constructor(e,t){const n=new Mh(e,t),r=n._getConnection();vn(!r.credentials,"INFURA WebSocket project secrets unsupported","UNSUPPORTED_OPERATION",{operation:"InfuraProvider.getWebSocketProvider()"}),super(r.url.replace(/^http/i,"ws").replace("/v3/","/ws/v3/"),e),mn(this,{projectId:n.projectId,projectSecret:n.projectSecret})}isCommunityResource(){return this.projectId===Lh}}class Mh extends mh{projectId;projectSecret;constructor(e,t,n){null==e&&(e="mainnet");const r=Nu.from(e);null==t&&(t=Lh),null==n&&(n=null),super(Mh.getRequest(r,t,n),r,{staticNetwork:r}),mn(this,{projectId:t,projectSecret:n})}_getProvider(e){try{return new Mh(e,this.projectId,this.projectSecret)}catch(e){}return super._getProvider(e)}isCommunityResource(){return this.projectId===Lh}static getWebSocketProvider(e,t){return new Dh(e,t)}static getRequest(e,t,n){null==t&&(t=Lh),null==n&&(n=null);const r=new Ji(`https://${function(e){switch(e){case"mainnet":return"mainnet.infura.io";case"goerli":return"goerli.infura.io";case"sepolia":return"sepolia.infura.io";case"arbitrum":return"arbitrum-mainnet.infura.io";case"arbitrum-goerli":return"arbitrum-goerli.infura.io";case"arbitrum-sepolia":return"arbitrum-sepolia.infura.io";case"base":return"base-mainnet.infura.io";case"base-goerlia":return"base-goerli.infura.io";case"base-sepolia":return"base-sepolia.infura.io";case"bnb":return"bnbsmartchain-mainnet.infura.io";case"bnbt":return"bnbsmartchain-testnet.infura.io";case"linea":return"linea-mainnet.infura.io";case"linea-goerli":return"linea-goerli.infura.io";case"matic":return"polygon-mainnet.infura.io";case"matic-mumbai":return"polygon-mumbai.infura.io";case"optimism":return"optimism-mainnet.infura.io";case"optimism-goerli":return"optimism-goerli.infura.io";case"optimism-sepolia":return"optimism-sepolia.infura.io"}An(!1,"unsupported network","network",e)}(e.name)}/v3/${t}`);return r.allowGzip=!0,n&&r.setCredentials("",n),t===Lh&&(r.retryFunc=async(e,t,n)=>(vh("InfuraProvider"),!0)),r}}const Uh="919b412a057b5e9c9b6dce193c5a60242d6efadb";class $h extends mh{token;constructor(e,t){null==e&&(e="mainnet");const n=Nu.from(e);null==t&&(t=Uh),super($h.getRequest(n,t),n,{staticNetwork:n}),mn(this,{token:t})}_getProvider(e){try{return new $h(e,this.token)}catch(e){}return super._getProvider(e)}isCommunityResource(){return this.token===Uh}static getRequest(e,t){null==t&&(t=Uh);const n=new Ji(`https://${function(e){switch(e){case"mainnet":return"ethers.quiknode.pro";case"goerli":return"ethers.ethereum-goerli.quiknode.pro";case"sepolia":return"ethers.ethereum-sepolia.quiknode.pro";case"holesky":return"ethers.ethereum-holesky.quiknode.pro";case"arbitrum":return"ethers.arbitrum-mainnet.quiknode.pro";case"arbitrum-goerli":return"ethers.arbitrum-goerli.quiknode.pro";case"arbitrum-sepolia":return"ethers.arbitrum-sepolia.quiknode.pro";case"base":return"ethers.base-mainnet.quiknode.pro";case"base-goerli":return"ethers.base-goerli.quiknode.pro";case"base-spolia":return"ethers.base-sepolia.quiknode.pro";case"bnb":return"ethers.bsc.quiknode.pro";case"bnbt":return"ethers.bsc-testnet.quiknode.pro";case"matic":return"ethers.matic.quiknode.pro";case"matic-mumbai":return"ethers.matic-testnet.quiknode.pro";case"optimism":return"ethers.optimism.quiknode.pro";case"optimism-goerli":return"ethers.optimism-goerli.quiknode.pro";case"optimism-sepolia":return"ethers.optimism-sepolia.quiknode.pro";case"xdai":return"ethers.xdai.quiknode.pro"}An(!1,"unsupported network","network",e)}(e.name)}/${t}`);return n.allowGzip=!0,t===Uh&&(n.retryFunc=async(e,t,n)=>(vh("QuickNodeProvider"),!0)),n}}const jh=BigInt("1"),Vh=BigInt("2");function Hh(){return(new Date).getTime()}function Gh(e){return JSON.stringify(e,((e,t)=>"bigint"==typeof t?{type:"bigint",value:t.toString()}:t))}const zh={stallTimeout:400,priority:1,weight:1},qh={blockNumber:-2,requests:0,lateResponses:0,errorResponses:0,outOfSync:-1,unsupportedEvents:0,rollingDuration:0,score:0,_network:null,_updateNumber:null,_totalTime:0,_lastFatalError:null,_lastFatalErrorTimestamp:0};function Qh(e){if(null==e)return"null";if(Array.isArray(e))return"["+e.map(Qh).join(",")+"]";if("object"==typeof e&&"function"==typeof e.toJSON)return Qh(e.toJSON());switch(typeof e){case"boolean":case"symbol":return e.toString();case"bigint":case"number":return BigInt(e).toString();case"string":return JSON.stringify(e);case"object":{const t=Object.keys(e);return t.sort(),"{"+t.map((t=>`${JSON.stringify(t)}:${Qh(e[t])}`)).join(",")+"}"}}throw console.log("Could not serialize",e),new Error("Hmm...")}function Jh(e){if("error"in e){const t=e.error;return{tag:Qh(t),value:t}}const t=e.result;return{tag:Qh(t),value:t}}function Kh(e,t){const n=new Map;for(const{value:e,tag:r,weight:s}of t){const t=n.get(r)||{value:e,weight:0};t.weight+=s,n.set(r,t)}let r=null;for(const t of n.values())t.weight>=e&&(!r||t.weight>r.weight)&&(r=t);if(r)return r.value}function Wh(e,t){let n=0;const r=new Map;let s=null;const i=[];for(const{value:e,tag:o,weight:a}of t)if(e instanceof Error){const t=r.get(o)||{value:e,weight:0};t.weight+=a,r.set(o,t),(null==s||t.weight>s.weight)&&(s=t)}else i.push(BigInt(e)),n+=a;if(n<e)return s&&s.weight>=e?s.value:void 0;i.sort(((e,t)=>e<t?-1:t>e?1:0));const o=Math.floor(i.length/2);return i.length%2?i[o]:(i[o-1]+i[o]+jh)/Vh}function Yh(e,t){const n=Kh(e,t);if(void 0!==n)return n;for(const e of t)if(e.value)return e.value}class Zh extends qu{quorum;eventQuorum;eventWorkers;#yt;#bt;#wt;constructor(e,t,n){super(t,n),this.#yt=e.map((e=>e instanceof qu?Object.assign({provider:e},zh,qh):Object.assign({},zh,e,qh))),this.#bt=-2,this.#wt=null,n&&null!=n.quorum?this.quorum=n.quorum:this.quorum=Math.ceil(this.#yt.reduce(((e,t)=>e+t.weight),0)/2),this.eventQuorum=1,this.eventWorkers=1,An(this.quorum<=this.#yt.reduce(((e,t)=>e+t.weight),0),"quorum exceed provider wieght","quorum",this.quorum)}get providerConfigs(){return this.#yt.map((e=>{const t=Object.assign({},e);for(const e in t)"_"===e[0]&&delete t[e];return t}))}async _detectNetwork(){return Nu.from(jn(await this._perform({method:"chainId"})))}async _translatePerform(e,t){switch(t.method){case"broadcastTransaction":return await e.broadcastTransaction(t.signedTransaction);case"call":return await e.call(Object.assign({},t.transaction,{blockTag:t.blockTag}));case"chainId":return(await e.getNetwork()).chainId;case"estimateGas":return await e.estimateGas(t.transaction);case"getBalance":return await e.getBalance(t.address,t.blockTag);case"getBlock":{const n="blockHash"in t?t.blockHash:t.blockTag;return await e.getBlock(n,t.includeTransactions)}case"getBlockNumber":return await e.getBlockNumber();case"getCode":return await e.getCode(t.address,t.blockTag);case"getGasPrice":return(await e.getFeeData()).gasPrice;case"getPriorityFee":return(await e.getFeeData()).maxPriorityFeePerGas;case"getLogs":return await e.getLogs(t.filter);case"getStorage":return await e.getStorage(t.address,t.position,t.blockTag);case"getTransaction":return await e.getTransaction(t.hash);case"getTransactionCount":return await e.getTransactionCount(t.address,t.blockTag);case"getTransactionReceipt":return await e.getTransactionReceipt(t.hash);case"getTransactionResult":return await e.getTransactionResult(t.hash)}}#vt(e){const t=Array.from(e).map((e=>e.config)),n=this.#yt.slice();!function(e){for(let t=e.length-1;t>0;t--){const n=Math.floor(Math.random()*(t+1)),r=e[t];e[t]=e[n],e[n]=r}}(n),n.sort(((e,t)=>e.priority-t.priority));for(const e of n)if(!e._lastFatalError&&-1===t.indexOf(e))return e;return null}#At(e,t){const n=this.#vt(e);if(null==n)return null;const r={config:n,result:null,didBump:!1,perform:null,staller:null},s=Hh();return r.perform=(async()=>{try{n.requests++;const e=await this._translatePerform(n.provider,t);r.result={result:e}}catch(e){n.errorResponses++,r.result={error:e}}const e=Hh()-s;n._totalTime+=e,n.rollingDuration=.95*n.rollingDuration+.05*e,r.perform=null})(),r.staller=(async()=>{var e;await(e=n.stallTimeout,new Promise((t=>{setTimeout(t,e)}))),r.staller=null})(),e.add(r),r}async#_t(){let e=this.#wt;if(!e){const t=[];this.#yt.forEach((e=>{t.push((async()=>{await async function(e,t){for(;(e.blockNumber<0||e.blockNumber<0)&&(e._updateNumber||(e._updateNumber=(async()=>{try{const t=await e.provider.getBlockNumber();t>e.blockNumber&&(e.blockNumber=t)}catch(t){e.blockNumber=-2,e._lastFatalError=t,e._lastFatalErrorTimestamp=Hh()}e._updateNumber=null})()),await e._updateNumber,e.outOfSync++,!e._lastFatalError););}(e),e._lastFatalError||(e._network=await e.provider.getNetwork())})())})),this.#wt=e=(async()=>{await Promise.all(t);let e=null;for(const t of this.#yt){if(t._lastFatalError)continue;const n=t._network;null==e?e=n.chainId:n.chainId!==e&&vn(!1,"cannot mix providers on different networks","UNSUPPORTED_OPERATION",{operation:"new FallbackProvider"})}})()}await e}async#Et(e,t){const n=[];for(const t of e)if(null!=t.result){const{tag:e,value:r}=Jh(t.result);n.push({tag:e,value:r,weight:t.config.weight})}if(!(n.reduce(((e,t)=>e+t.weight),0)<this.quorum)){switch(t.method){case"getBlockNumber":{-2===this.#bt&&(this.#bt=Math.ceil(zn(Wh(this.quorum,this.#yt.filter((e=>!e._lastFatalError)).map((e=>({value:e.blockNumber,tag:zn(e.blockNumber).toString(),weight:e.weight})))))));const e=function(e,t){if(1===e)return zn(Wh(e,t),"%internal");const n=new Map,r=(e,t)=>{const r=n.get(e)||{result:e,weight:0};r.weight+=t,n.set(e,r)};for(const{weight:e,value:n}of t){const t=zn(n);r(t-1,e),r(t,e),r(t+1,e)}let s,i=0;for(const{weight:t,result:r}of n.values())t>=e&&(t>i||null!=s&&t===i&&r>s)&&(i=t,s=r);return s}(this.quorum,n);if(void 0===e)return;return e>this.#bt&&(this.#bt=e),this.#bt}case"getGasPrice":case"getPriorityFee":case"estimateGas":return Wh(this.quorum,n);case"getBlock":return"blockTag"in t&&"pending"===t.blockTag?Yh(this.quorum,n):Kh(this.quorum,n);case"call":case"chainId":case"getBalance":case"getTransactionCount":case"getCode":case"getStorage":case"getTransaction":case"getTransactionReceipt":case"getLogs":return Kh(this.quorum,n);case"broadcastTransaction":return Yh(this.quorum,n)}vn(!1,"unsupported method","UNSUPPORTED_OPERATION",{operation:`_perform(${Gh(t.method)})`})}}async#kt(e,t){if(0===e.size)throw new Error("no runners?!");const n=[];let r=0;for(const t of e)t.perform&&n.push(t.perform),t.staller?n.push(t.staller):t.didBump||(t.didBump=!0,r++);const s=await this.#Et(e,t);if(void 0!==s){if(s instanceof Error)throw s;return s}for(let n=0;n<r;n++)this.#At(e,t);return vn(n.length>0,"quorum not met","SERVER_ERROR",{request:"%sub-requests",info:{request:t,results:Array.from(e).map((e=>Gh(e.result)))}}),await Promise.race(n),await this.#kt(e,t)}async _perform(e){if("broadcastTransaction"===e.method){const t=this.#yt.map((e=>null)),n=this.#yt.map((async({provider:n,weight:r},s)=>{try{const i=await n._perform(e);t[s]=Object.assign(Jh({result:i}),{weight:r})}catch(e){t[s]=Object.assign(Jh({error:e}),{weight:r})}}));for(;;){const e=t.filter((e=>null!=e));for(const{value:t}of e)if(!(t instanceof Error))return t;const r=Kh(this.quorum,t.filter((e=>null!=e)));if(yn(r,"INSUFFICIENT_FUNDS"))throw r;const s=n.filter(((e,n)=>null==t[n]));if(0===s.length)break;await Promise.race(s)}const r=Yh(this.quorum,t);if(vn(void 0!==r,"problem multi-broadcasting","SERVER_ERROR",{request:"%sub-requests",info:{request:e,results:t.map(Gh)}}),r instanceof Error)throw r;return r}await this.#_t();const t=new Set;let n=0;for(;;){const r=this.#At(t,e);if(null==r)break;if(n+=r.config.weight,n>=this.quorum)break}const r=await this.#kt(t,e);for(const e of t)e.perform&&null==e.result&&e.config.lateResponses++;return r}async destroy(){for(const{provider:e}of this.#yt)e.destroy();super.destroy()}}const Xh="goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" "),ed=JSON.parse('{"OL":"0x74558B39791BaAA5eB40CDF55F4Bd0928a501C71","Cl":"0xFbd7c085a15411820bAb1Ba85f14cC9E25FE2d3B","GQ":"0x33494c24d904B87B94A1cc9870D966780D56093c"}'),td="address project, address deployer, string description",nd=ed.OL,rd=ed.GQ,sd=["function newProject(string projectName, string abbreviation, string description, address payment) returns (address)",`event ProjectDeployed(${td})`,`function getProject(string name) view returns (tuple(${td}))`,"function newContract(string name, string project, tuple(bytes32, bytes)[] genesisModules, address payment) returns (address)","function modifyContract(string project, address target, tuple(uint8, tuple(bytes32, bytes))[] moduleOperations, address payment)"];var id;function od(e){return new zo(nd,sd,e)}async function ad(e){return JSON.parse(localStorage.getItem("kanaloa.imported_projects")||"[]")}!function(e){e[e.INSTALL=0]="INSTALL",e[e.UNINSTALL=1]="UNINSTALL",e[e.UPGRADE=2]="UPGRADE",e[e.REINITIALIZE=3]="REINITIALIZE"}(id||(id={}));class ld{constructor(e){this.parent=e}async getProjects(){return await ad(this.parent.wallet)}async newProject(e){const t=await async function(e,t){const n=od(t);return await(await n.newProject(e.projectName,e.abbreviation,e.description,rd)).wait().then((async()=>(await n.getProject(e.projectName)).project))}(e,await this.parent.signer);return localStorage.setItem("kanaloa.imported_projects",JSON.stringify([...await ad(this.parent.wallet),{address:t,project:e.projectName,deployer:await((await this.parent.signer)?.getAddress()),description:e.description}])),t}async newContract(e){await async function(e,t){const n=od(t),r=await(await n.newContract(e.name,e.project,e.genesisModules.map((e=>[e.moduleSignature,e.initParams])),ed.GQ)).wait();return r}(e,await this.parent.signer)}async modifyContract(e){await async function(e,t){const n=od(t),r=await(await n.modifyContract(e.project,e.target,e.moduleOperations.map((e=>[e[0],[e[1].moduleSignature,e[1].initParams]])),ed.GQ)).wait();return r}(e,await this.parent.signer)}}const cd=ed.Cl,ud=["function getOperationCost(uint8 op, address target, bytes32 info, address token, address client) view returns (uint256)","function calculateNewContractInvoice(address target, tuple(bytes32, bytes)[] genesisModules, address payment, address client) view returns (tuple(bool, uint256))","function calculateModifyContractInvoice(address target, tuple(uint8, tuple(bytes32, bytes))[] moduleOperations, address payment, address client) view returns (tuple(bool, uint256))"];var hd;!function(e){e[e.ENABLED=0]="ENABLED",e[e.NEW_PROJECT=1]="NEW_PROJECT",e[e.NEW_CONTRACT=2]="NEW_CONTRACT",e[e.NEW_MODULE=3]="NEW_MODULE",e[e.EDIT_CONTRACT=4]="EDIT_CONTRACT",e[e.EDIT_MODULE=5]="EDIT_MODULE"}(hd||(hd={}));class dd{constructor(e){this.parent=e}async calculateInvoice(e,t){return await async function(e,t,n){const r=new zo(cd,ud,n),s=e==hd.NEW_CONTRACT?e=>[e.moduleSignature,e.initParams]:e=>[e[0],[e[1].moduleSignature,e[1].initParams]],[i,o]=e==hd.NEW_PROJECT?[!0,await r.getOperationCost(hd.NEW_PROJECT,Yi,hl,t.token,t.client)]:await r[e==hd.NEW_CONTRACT?"calculateNewContractInvoice":"calculateModifyContractInvoice"](t.target,t.payload.map(s),t.token,t.client);return i?o:void 0}(e,t,this.parent.wallet)}async requestAllowance(e,t=ed.GQ){const n=new zo(t,["function allowance(address owner, address spender) view returns (uint256)","function approve(address spender, uint256 amount) returns (bool)"],await this.parent.signer);if(await n.allowance(await(await this.parent.signer).getAddress(),cd)<e)try{await(await n.approve(cd,e)).wait()}catch(e){return!1}return!0}}const pd=new CustomEvent("wallet-changed");function fd(e){e.target.requestUpdate()}const md=new class{get signer(){return this._signer}set signer(e){this._signer=e,null!=e&&e.then((()=>{this.subscribedElements.forEach((e=>e.dispatchEvent(pd)))}))}get avatar(){return this._avatar}constructor(){this.subscribedElements=new Set,this.KANA_TOKEN=ed.GQ,this.projectRegistry=new ld(this),this.paymentsProcessor=new dd(this),null!=window.ethereum?(this.wallet=new bh(window.ethereum),this._signer=this.wallet.listAccounts().then((()=>this.wallet.getSigner())),this.signer=this._signer):(this.wallet=function(e,t){null==t&&(t={});const n=e=>"-"!==t[e]&&("string"==typeof t.exclusive?e===t.exclusive:!Array.isArray(t.exclusive)||-1!==t.exclusive.indexOf(e));if(e.match(/^https?:/))return new mh(e);if(e.match(/^wss?:/)||(r=e)&&"function"==typeof r.send&&"function"==typeof r.close)return new Fh(e);var r;let s=null;try{s=Nu.from(e)}catch(e){}const i=[];if(n("publicPolygon")&&s&&"matic"===s.name&&i.push(new mh("https://polygon-rpc.com/",s,{staticNetwork:s})),n("alchemy"))try{i.push(new kh(e,t.alchemy))}catch(e){}if(n("ankr")&&null!=t.ankr)try{i.push(new _h(e,t.ankr))}catch(e){}if(n("cloudflare"))try{i.push(new xh(e))}catch(e){}if(n("etherscan"))try{i.push(new Ph(e,t.etherscan))}catch(e){}if(n("infura"))try{let n,r=t.infura;"object"==typeof r&&(n=r.projectSecret,r=r.projectId),i.push(new Mh(e,r,n))}catch(e){}if(n("quicknode"))try{let n=t.quicknode;i.push(new $h(e,n))}catch(e){}if(vn(i.length,"unsupported default network","UNSUPPORTED_OPERATION",{operation:"getDefaultProvider"}),1===i.length)return i[0];let o=Math.floor(i.length/2);return o>2&&(o=2),s&&-1!==Xh.indexOf(s.name)&&(o=1),t&&t.quorum&&(o=t.quorum),new Zh(i,void 0,{quorum:o})}("mainnet"),this._signer=new Promise((e=>e(void 0))))}async requestSigner(){if(this.readOnly)throw new Error("KanaloaEthers: attempting to connect to read-only provider");return this.wallet.getSigner(0).then((e=>e))}subscribe(e){e.addEventListener(pd.type,fd),this.subscribedElements.add(e)}unsubscribe(e){e.removeEventListener(pd.type,fd),this.subscribedElements.delete(e)}get readOnly(){return!(this.wallet instanceof bh)}};var gd=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class yd extends he{constructor(){super(),this.items=[],this.isLoading=!0}static get styles(){return[l`
                :host {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 2rem;
                    padding: 1rem;
                    flex: 1;
                }

                h1 {
                    font-size: 3rem;
                    display: block;
                    width: 100%;
                }

                .cards {
                    display: flex;
                    flex: 1;
                    flex-wrap: wrap;
                    gap: 1rem;
                    justify-content: start;
                    align-items: start;
                    width: 100%;
                }

                kana-button {
                    min-width: fit-content;
                    width: 50%;
                    font-size: 1.5rem;
                    min-height: 4rem;
                    margin-bottom: 3rem;
                }
                
                a {
                    min-width: fit-content;
                    width: 100%;
                    display: flex;
                    justify-content: center;
                    text-decoration: none;
                }
            `]}connectedCallback(){super.connectedCallback(),this.fetchData()}}gd([ge({type:Array})],yd.prototype,"items",void 0),gd([ge({type:Boolean,reflect:!0})],yd.prototype,"isLoading",void 0);const{I:bd}=Pt,wd=Ee((e=>class extends e{get slots(){return{}}constructor(){super(),this.__privateSlots=new Set(null)}connectedCallback(){super.connectedCallback(),this._connectSlotMixin()}__renderAsNodes(e){const t=(ShadowRoot.prototype.createElement?this.shadowRoot:document).createElement("div"),{creationScope:n,host:r}=this.renderOptions;return Ot(e,t,{creationScope:n,host:r}),Array.from(t.childNodes)}_connectSlotMixin(){this.__isConnectedSlotMixin||(Object.keys(this.slots).forEach((e=>{if(!(""===e?Array.from(this.children).find((e=>!e.hasAttribute("slot"))):Array.from(this.children).find((t=>t.slot===e)))){const t=this.slots[e]();let n=[];((e,t)=>void 0!==(null==e?void 0:e._$litType$))(t)?n=this.__renderAsNodes(t):Array.isArray(t)||(n=[t]),n.forEach((t=>{t instanceof Node&&(t instanceof Element&&""!==e&&t.setAttribute("slot",e),this.appendChild(t),this.__privateSlots.add(e))}))}})),this.__isConnectedSlotMixin=!0)}_isPrivateSlot(e){return this.__privateSlots.has(e)}})),vd=[Node.DOCUMENT_POSITION_PRECEDING,Node.DOCUMENT_POSITION_CONTAINS,Node.DOCUMENT_POSITION_CONTAINS|Node.DOCUMENT_POSITION_PRECEDING];function Ad(e,{reverse:t}={}){const n=e.filter((e=>e));return n.sort(((e,t)=>{const n=e.compareDocumentPosition(t);return vd.includes(n)?Lt?-1:1:Lt?1:-1})),t&&n.reverse(),n}class _d{constructor(e){this.type="unparseable",this.viewValue=e}toString(){return JSON.stringify({type:this.type,viewValue:this.viewValue})}}const Ed=Ee((e=>class extends e{constructor(){super(),this._parentFormGroup=void 0}connectedCallback(){super.connectedCallback(),this.dispatchEvent(new CustomEvent("form-element-register",{detail:{element:this},bubbles:!0}))}disconnectedCallback(){super.disconnectedCallback(),this.__unregisterFormElement()}__unregisterFormElement(){this._parentFormGroup&&this._parentFormGroup.removeFormElement(this)}})),kd=Ee((e=>class extends(Ed(ke(wd(e)))){static get properties(){return{name:{type:String,reflect:!0},readOnly:{type:Boolean,attribute:"readonly",reflect:!0},label:String,labelSrOnly:{type:Boolean,attribute:"label-sr-only",reflect:!0},helpText:{type:String,attribute:"help-text"},modelValue:{attribute:!1},_ariaLabelledNodes:{attribute:!1},_ariaDescribedNodes:{attribute:!1},_repropagationRole:{attribute:!1},_isRepropagationEndpoint:{attribute:!1}}}get label(){return this.__label||this._labelNode&&this._labelNode.textContent||""}set label(e){const t=this.label;this.__label=e,this.requestUpdate("label",t)}get helpText(){return this.__helpText||this._helpTextNode&&this._helpTextNode.textContent||""}set helpText(e){const t=this.helpText;this.__helpText=e,this.requestUpdate("helpText",t)}get fieldName(){return this.__fieldName||this.label||this.name||""}set fieldName(e){this.__fieldName=e}get slots(){return{...super.slots,label:()=>{const e=document.createElement("label");return e.textContent=this.label,e},"help-text":()=>{const e=document.createElement("div");return e.textContent=this.helpText,e}}}get _inputNode(){return this.__getDirectSlotChild("input")}get _labelNode(){return this.__getDirectSlotChild("label")}get _helpTextNode(){return this.__getDirectSlotChild("help-text")}get _feedbackNode(){return this.__getDirectSlotChild("feedback")}constructor(){super(),this.name="",this.readOnly=!1,this.label="",this.labelSrOnly=!1,this.helpText="",this._inputId=function(e=""){return`${e.length>0?`${e}-`:""}${Math.random().toString(36).substr(2,10)}`}(this.localName),this._ariaLabelledNodes=[],this._ariaDescribedNodes=[],this._repropagationRole="child",this._isRepropagationEndpoint=!1,this.addEventListener("model-value-changed",this.__repropagateChildrenValues),this._onLabelClick=this._onLabelClick.bind(this)}connectedCallback(){super.connectedCallback(),this._enhanceLightDomClasses(),this._enhanceLightDomA11y(),this._triggerInitialModelValueChangedEvent(),this._labelNode&&this._labelNode.addEventListener("click",this._onLabelClick)}disconnectedCallback(){super.disconnectedCallback(),this._labelNode&&this._labelNode.removeEventListener("click",this._onLabelClick)}updated(e){super.updated(e),e.has("_ariaLabelledNodes")&&this.__reflectAriaAttr("aria-labelledby",this._ariaLabelledNodes,this.__reorderAriaLabelledNodes),e.has("_ariaDescribedNodes")&&this.__reflectAriaAttr("aria-describedby",this._ariaDescribedNodes,this.__reorderAriaDescribedNodes),e.has("label")&&this._labelNode&&(this._labelNode.textContent=this.label),e.has("helpText")&&this._helpTextNode&&(this._helpTextNode.textContent=this.helpText),e.has("name")&&this.dispatchEvent(new CustomEvent("form-element-name-changed",{detail:{oldName:e.get("name"),newName:this.name},bubbles:!0}))}_triggerInitialModelValueChangedEvent(){this._dispatchInitialModelValueChangedEvent()}_enhanceLightDomClasses(){this._inputNode&&this._inputNode.classList.add("form-control")}_enhanceLightDomA11y(){const{_inputNode:e,_labelNode:t,_helpTextNode:n,_feedbackNode:r}=this;e&&(e.id=e.id||this._inputId),t&&(t.setAttribute("for",this._inputId),this.addToAriaLabelledBy(t,{idPrefix:"label"})),n&&this.addToAriaDescribedBy(n,{idPrefix:"help-text"}),r&&(this.addEventListener("focusin",(()=>{r.setAttribute("aria-live","polite")})),this.addEventListener("focusout",(()=>{r.setAttribute("aria-live","assertive")})),this.addToAriaDescribedBy(r,{idPrefix:"feedback"})),this._enhanceLightDomA11yForAdditionalSlots()}_enhanceLightDomA11yForAdditionalSlots(e=["prefix","suffix","before","after"]){e.forEach((e=>{const t=this.__getDirectSlotChild(e);t&&(t.hasAttribute("data-label")&&this.addToAriaLabelledBy(t,{idPrefix:e}),t.hasAttribute("data-description")&&this.addToAriaDescribedBy(t,{idPrefix:e}))}))}__reflectAriaAttr(e,t,n){if(this._inputNode){if(n){const e=t.filter((e=>this.contains(e))),n=t.filter((e=>!this.contains(e)));t=[...Ad(e),...n]}const r=t.map((e=>e.id)).join(" ");this._inputNode.setAttribute(e,r)}}render(){return ht`
        <div class="form-field__group-one">${this._groupOneTemplate()}</div>
        <div class="form-field__group-two">${this._groupTwoTemplate()}</div>
      `}_groupOneTemplate(){return ht` ${this._labelTemplate()} ${this._helpTextTemplate()} `}_groupTwoTemplate(){return ht` ${this._inputGroupTemplate()} ${this._feedbackTemplate()} `}_labelTemplate(){return ht`
        <div class="form-field__label">
          <slot name="label"></slot>
        </div>
      `}_helpTextTemplate(){return ht`
        <small class="form-field__help-text">
          <slot name="help-text"></slot>
        </small>
      `}_inputGroupTemplate(){return ht`
        <div class="input-group">
          ${this._inputGroupBeforeTemplate()}
          <div class="input-group__container">
            ${this._inputGroupPrefixTemplate()} ${this._inputGroupInputTemplate()}
            ${this._inputGroupSuffixTemplate()}
          </div>
          ${this._inputGroupAfterTemplate()}
        </div>
      `}_inputGroupBeforeTemplate(){return ht`
        <div class="input-group__before">
          <slot name="before"></slot>
        </div>
      `}_inputGroupPrefixTemplate(){return Array.from(this.children).find((e=>"prefix"===e.slot))?ht`
            <div class="input-group__prefix">
              <slot name="prefix"></slot>
            </div>
          `:pt}_inputGroupInputTemplate(){return ht`
        <div class="input-group__input">
          <slot name="input"></slot>
        </div>
      `}_inputGroupSuffixTemplate(){return Array.from(this.children).find((e=>"suffix"===e.slot))?ht`
            <div class="input-group__suffix">
              <slot name="suffix"></slot>
            </div>
          `:pt}_inputGroupAfterTemplate(){return ht`
        <div class="input-group__after">
          <slot name="after"></slot>
        </div>
      `}_feedbackTemplate(){return ht`
        <div class="form-field__feedback">
          <slot name="feedback"></slot>
        </div>
      `}_isEmpty(e=this.modelValue){let t=e;if(this.modelValue instanceof _d&&(t=this.modelValue.viewValue),"object"==typeof t&&null!==t&&!(t instanceof Date))return!Object.keys(t).length;const n="number"==typeof t&&(0===t||Number.isNaN(t));return!(t||n||"boolean"==typeof t&&!1===t)}static get styles(){return[Be`
          /**********************
            {block} .form-field
           ********************/

          :host {
            display: block;
          }

          :host([hidden]) {
            display: none;
          }

          :host([disabled]) {
            pointer-events: none;
          }

          :host([disabled]) .form-field__label ::slotted(*),
          :host([disabled]) .form-field__help-text ::slotted(*) {
            color: var(--disabled-text-color, #767676);
          }

          :host([label-sr-only]) .form-field__label {
            position: absolute;
            top: 0;
            width: 1px;
            height: 1px;
            overflow: hidden;
            clip-path: inset(100%);
            clip: rect(1px, 1px, 1px, 1px);
            white-space: nowrap;
            border: 0;
            margin: 0;
            padding: 0;
          }

          /***********************
            {block} .input-group
           *********************/

          .input-group__container {
            display: flex;
          }

          .input-group__input {
            flex: 1;
            display: flex;
          }

          /***** {state} :disabled *****/
          :host([disabled]) .input-group ::slotted([slot='input']) {
            color: var(--disabled-text-color, #767676);
          }

          /***********************
            {block} .form-control
           **********************/

          .input-group__container > .input-group__input ::slotted(.form-control) {
            flex: 1 1 auto;
            margin: 0; /* remove input margin in Safari */
            font-size: 100%; /* normalize default input font-size */
          }
        `]}_getAriaDescriptionElements(){return[this._helpTextNode,this._feedbackNode]}addToAriaLabelledBy(e,{idPrefix:t="",reorder:n=!0}={}){e.id=e.id||`${t}-${this._inputId}`,this._ariaLabelledNodes.includes(e)||(this._ariaLabelledNodes=[...this._ariaLabelledNodes,e],this.__reorderAriaLabelledNodes=Boolean(n))}removeFromAriaLabelledBy(e){this._ariaLabelledNodes.includes(e)&&(this._ariaLabelledNodes.splice(this._ariaLabelledNodes.indexOf(e),1),this._ariaLabelledNodes=[...this._ariaLabelledNodes],this.__reorderAriaLabelledNodes=!1)}addToAriaDescribedBy(e,{idPrefix:t="",reorder:n=!0}={}){e.id=e.id||`${t}-${this._inputId}`,this._ariaDescribedNodes.includes(e)||(this._ariaDescribedNodes=[...this._ariaDescribedNodes,e],this.__reorderAriaDescribedNodes=Boolean(n))}removeFromAriaDescribedBy(e){this._ariaDescribedNodes.includes(e)&&(this._ariaDescribedNodes.splice(this._ariaDescribedNodes.indexOf(e),1),this._ariaDescribedNodes=[...this._ariaDescribedNodes],this.__reorderAriaLabelledNodes=!1)}__getDirectSlotChild(e){return Array.from(this.children).find((t=>t.slot===e))}_dispatchInitialModelValueChangedEvent(){"child"!==this._repropagationRole&&(this.__repropagateChildrenInitialized=!0,this.dispatchEvent(new CustomEvent("model-value-changed",{bubbles:!0,detail:{formPath:[this],initialize:!0,isTriggeredByUser:!1}})))}_onBeforeRepropagateChildrenValues(e){}__repropagateChildrenValues(e){this._onBeforeRepropagateChildrenValues(e);const t=e.detail&&e.detail.element||e.target,n=this._isRepropagationEndpoint||"choice-group"===this._repropagationRole;if(t===this)return;e.stopImmediatePropagation();const r="child"!==this._repropagationRole&&!this.__repropagateChildrenInitialized,s=e.detail&&e.detail.initialize;if(r||s)return;if(!this._repropagationCondition(t))return;let i=[];n||(i=e.detail&&e.detail.formPath||[t]);const o=[...i,this];this.dispatchEvent(new CustomEvent("model-value-changed",{bubbles:!0,detail:{formPath:o,isTriggeredByUser:Boolean(e.detail?.isTriggeredByUser)}}))}_repropagationCondition(e){return Boolean(e)}_onLabelClick(){}}));class xd extends Array{_keys(){return Object.keys(this).filter((e=>Number.isNaN(Number(e))))}}const Cd=Ee((e=>class extends(Ed(e)){static get properties(){return{_isFormOrFieldset:{type:Boolean}}}constructor(){super(),this.formElements=new xd,this._isFormOrFieldset=!1,this._onRequestToAddFormElement=this._onRequestToAddFormElement.bind(this),this._onRequestToChangeFormElementName=this._onRequestToChangeFormElementName.bind(this),this.addEventListener("form-element-register",this._onRequestToAddFormElement),this.addEventListener("form-element-name-changed",this._onRequestToChangeFormElementName),this.initComplete=new Promise(((e,t)=>{this.__resolveInitComplete=e,this.__rejectInitComplete=t})),this.registrationComplete=new Promise(((e,t)=>{this.__resolveRegistrationComplete=e,this.__rejectRegistrationComplete=t})),this.registrationComplete.done=!1,this.registrationComplete.then((()=>{this.registrationComplete.done=!0,this.__resolveInitComplete(void 0)}),(()=>{throw this.registrationComplete.done=!0,this.__rejectInitComplete(void 0),new Error("Registration could not finish. Please use await el.registrationComplete;")}))}connectedCallback(){super.connectedCallback(),this._completeRegistration()}_completeRegistration(){Promise.resolve().then((()=>this.__resolveRegistrationComplete(void 0)))}disconnectedCallback(){super.disconnectedCallback(),!1===this.registrationComplete.done&&Promise.resolve().then((()=>{Promise.resolve().then((()=>{this.__rejectRegistrationComplete()}))}))}isRegisteredFormElement(e){return this.formElements.some((t=>t===e))}addFormElement(e,t){if(e._parentFormGroup=this,t>=0?this.formElements.splice(t,0,e):this.formElements.push(e),this._isFormOrFieldset){const{name:n}=e;if(n===this.name)throw console.info("Error Node:",e),new TypeError(`You can not have the same name "${n}" as your parent`);if("[]"===n.substr(-2))Array.isArray(this.formElements[n])||(this.formElements[n]=new xd),t>0?this.formElements[n].splice(t,0,e):this.formElements[n].push(e);else{if(this.formElements[n])throw console.info("Error Node:",e),new TypeError(`Name "${n}" is already registered - if you want an array add [] to the end`);this.formElements[n]=e}}}removeFormElement(e){const t=this.formElements.indexOf(e);if(t>-1&&this.formElements.splice(t,1),this._isFormOrFieldset){const{name:t}=e;if("[]"===t.substr(-2)&&this.formElements[t]){const n=this.formElements[t].indexOf(e);n>-1&&this.formElements[t].splice(n,1)}else this.formElements[t]&&delete this.formElements[t]}}_onRequestToAddFormElement(e){const t=e.detail.element;if(t===this)return;if(this.isRegisteredFormElement(t))return;e.stopPropagation();let n=-1;if(this.formElements&&Array.isArray(this.formElements))for(const[e,r]of this.formElements.entries())if(!(r.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING)){n=e;break}this.addFormElement(t,n)}_onRequestToChangeFormElementName(e){const t=this.formElements[e.detail.oldName];t&&(this.formElements[e.detail.newName]=t,delete this.formElements[e.detail.oldName])}_onRequestToRemoveFormElement(e){const t=e.detail.element;t!==this&&this.isRegisteredFormElement(t)&&(e.stopPropagation(),this.removeFormElement(t))}})),Nd="2.2.2",Pd=window.scopedElementsVersions||(window.scopedElementsVersions=[]);Pd.includes(Nd)||Pd.push(Nd);const Rd=!!ShadowRoot.prototype.createElement,Od=Ee((e=>class extends e{static get scopedElements(){return{}}static get scopedElementsVersion(){return Nd}static get shadowRootOptions(){return this.__shadowRootOptions}static set shadowRootOptions(e){this.__shadowRootOptions=e}static get elementStyles(){return this.__elementStyles}static set elementStyles(e){this.__elementStyles=e}constructor(...e){super(),this.renderOptions=this.renderOptions||void 0}get registry(){return this.constructor.__registry}set registry(e){this.constructor.__registry=e}createRenderRoot(){const{scopedElements:e,shadowRootOptions:t,elementStyles:n}=this.constructor;if(!this.registry||this.registry===this.constructor.__registry&&!Object.prototype.hasOwnProperty.call(this.constructor,"__registry")){this.registry=Rd?new CustomElementRegistry:customElements;for(const[t,n]of Object.entries(e))this.defineScopedElement(t,n)}const r={mode:"open",...t,customElements:this.registry,registry:this.registry},s=this.attachShadow(r);return Rd&&(this.renderOptions.creationScope=s),s instanceof ShadowRoot&&(c(s,n),this.renderOptions.renderBefore=this.renderOptions.renderBefore||s.firstChild),s}createScopedElement(e){return(Rd?this.shadowRoot:document).createElement(e)}defineScopedElement(e,t){const n=this.registry.get(e);return n&&!1===Rd&&n!==t&&console.error([`You are trying to re-register the "${e}" custom element with a different class via ScopedElementsMixin.`,"This is only possible with a CustomElementRegistry.","Your browser does not support this feature so you will need to load a polyfill for it.",'Load "@webcomponents/scoped-custom-element-registry" before you register ANY web component to the global customElements registry.','e.g. add "<script src="/node_modules/@webcomponents/scoped-custom-element-registry/scoped-custom-element-registry.min.js"><\/script>" as your first script tag.',"For more details you can visit https://open-wc.org/docs/development/scoped-elements/"].join("\n")),n?this.registry.get(e):this.registry.define(e,t)}getScopedTagName(e){return this.constructor.getScopedTagName(e)}static getScopedTagName(e){return this.__registry.get(e)?e:void 0}})),Bd=Symbol.for("lion::SingletonManagerClassStorage"),Sd=globalThis||window,Td=new class{constructor(){this._map=Sd[Bd]?Sd[Bd]:Sd[Bd]=new Map}set(e,t){this.has(e)||this._map.set(e,t)}get(e){return this._map.get(e)}has(e){return this._map.has(e)}};function Id(e,t){return e(t={exports:{}},t.exports),t.exports}var Fd="long",Ld="short",Dd="narrow",Md="numeric",Ud="2-digit",$d={number:{decimal:{style:"decimal"},integer:{style:"decimal",maximumFractionDigits:0},currency:{style:"currency",currency:"USD"},percent:{style:"percent"},default:{style:"decimal"}},date:{short:{month:Md,day:Md,year:Ud},medium:{month:Ld,day:Md,year:Md},long:{month:Fd,day:Md,year:Md},full:{month:Fd,day:Md,year:Md,weekday:Fd},default:{month:Ld,day:Md,year:Md}},time:{short:{hour:Md,minute:Md},medium:{hour:Md,minute:Md,second:Md},long:{hour:Md,minute:Md,second:Md,timeZoneName:Ld},full:{hour:Md,minute:Md,second:Md,timeZoneName:Ld},default:{hour:Md,minute:Md,second:Md}},duration:{default:{hours:{minimumIntegerDigits:1,maximumFractionDigits:0},minutes:{minimumIntegerDigits:2,maximumFractionDigits:0},seconds:{minimumIntegerDigits:2,maximumFractionDigits:3}}},parseNumberPattern:function(e){if(e){var t={},n=e.match(/\b[A-Z]{3}\b/i),r=e.replace(/[^¤]/g,"").length;if(!r&&n&&(r=1),r?(t.style="currency",t.currencyDisplay=1===r?"symbol":2===r?"code":"name",t.currency=n?n[0].toUpperCase():"USD"):e.indexOf("%")>=0&&(t.style="percent"),!/[@#0]/.test(e))return t.style?t:void 0;if(t.useGrouping=e.indexOf(",")>=0,/E\+?[@#0]+/i.test(e)||e.indexOf("@")>=0){var s=e.replace(/E\+?[@#0]+|[^@#0]/gi,"");t.minimumSignificantDigits=Math.min(Math.max(s.replace(/[^@0]/g,"").length,1),21),t.maximumSignificantDigits=Math.min(Math.max(s.length,1),21)}else{for(var i=e.replace(/[^#0.]/g,"").split("."),o=i[0],a=o.length-1;"0"===o[a];)--a;t.minimumIntegerDigits=Math.min(Math.max(o.length-1-a,1),21);var l=i[1]||"";for(a=0;"0"===l[a];)++a;for(t.minimumFractionDigits=Math.min(Math.max(a,0),20);"#"===l[a];)++a;t.maximumFractionDigits=Math.min(Math.max(a,0),20)}return t}},parseDatePattern:function(e){if(e){for(var t={},n=0;n<e.length;){for(var r=e[n],s=1;e[++n]===r;)++s;switch(r){case"G":t.era=5===s?Dd:4===s?Fd:Ld;break;case"y":case"Y":t.year=2===s?Ud:Md;break;case"M":case"L":s=Math.min(Math.max(s-1,0),4),t.month=[Md,Ud,Ld,Fd,Dd][s];break;case"E":case"e":case"c":t.weekday=5===s?Dd:4===s?Fd:Ld;break;case"d":case"D":t.day=2===s?Ud:Md;break;case"h":case"K":t.hour12=!0,t.hour=2===s?Ud:Md;break;case"H":case"k":t.hour12=!1,t.hour=2===s?Ud:Md;break;case"m":t.minute=2===s?Ud:Md;break;case"s":case"S":t.second=2===s?Ud:Md;break;case"z":case"Z":case"v":case"V":t.timeZoneName=1===s?Ld:Fd}}return Object.keys(t).length?t:void 0}}},jd="zero",Vd="one",Hd="two",Gd="few",zd="many",qd="other",Qd=[function(e){return 1==+e?Vd:qd},function(e){var t=+e;return 0<=t&&t<=1?Vd:qd},function(e){return 0===Math.floor(Math.abs(+e))||1==+e?Vd:qd},function(e){var t=+e;return 0===t?jd:1===t?Vd:2===t?Hd:3<=t%100&&t%100<=10?Gd:11<=t%100&&t%100<=99?zd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 1===t&&0===n?Vd:qd},function(e){var t=+e;return t%10==1&&t%100!=11?Vd:2<=t%10&&t%10<=4&&(t%100<12||14<t%100)?Gd:t%10==0||5<=t%10&&t%10<=9||11<=t%100&&t%100<=14?zd:qd},function(e){var t=+e;return t%10==1&&t%100!=11&&t%100!=71&&t%100!=91?Vd:t%10==2&&t%100!=12&&t%100!=72&&t%100!=92?Hd:(3<=t%10&&t%10<=4||t%10==9)&&(t%100<10||19<t%100)&&(t%100<70||79<t%100)&&(t%100<90||99<t%100)?Gd:0!==t&&t%1e6==0?zd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+(e+".").split(".")[1];return 0===n&&t%10==1&&t%100!=11||r%10==1&&r%100!=11?Vd:0===n&&2<=t%10&&t%10<=4&&(t%100<12||14<t%100)||2<=r%10&&r%10<=4&&(r%100<12||14<r%100)?Gd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 1===t&&0===n?Vd:2<=t&&t<=4&&0===n?Gd:0!==n?zd:qd},function(e){var t=+e;return 0===t?jd:1===t?Vd:2===t?Hd:3===t?Gd:6===t?zd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=+(""+e).replace(/^[^.]*.?|0+$/g,"");return 1==+e||0!==n&&(0===t||1===t)?Vd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+(e+".").split(".")[1];return 0===n&&t%100==1||r%100==1?Vd:0===n&&t%100==2||r%100==2?Hd:0===n&&3<=t%100&&t%100<=4||3<=r%100&&r%100<=4?Gd:qd},function(e){var t=Math.floor(Math.abs(+e));return 0===t||1===t?Vd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+(e+".").split(".")[1];return 0===n&&(1===t||2===t||3===t)||0===n&&t%10!=4&&t%10!=6&&t%10!=9||0!==n&&r%10!=4&&r%10!=6&&r%10!=9?Vd:qd},function(e){var t=+e;return 1===t?Vd:2===t?Hd:3<=t&&t<=6?Gd:7<=t&&t<=10?zd:qd},function(e){var t=+e;return 1===t||11===t?Vd:2===t||12===t?Hd:3<=t&&t<=10||13<=t&&t<=19?Gd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 0===n&&t%10==1?Vd:0===n&&t%10==2?Hd:0!==n||t%100!=0&&t%100!=20&&t%100!=40&&t%100!=60&&t%100!=80?0!==n?zd:qd:Gd},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+e;return 1===t&&0===n?Vd:2===t&&0===n?Hd:0===n&&(r<0||10<r)&&r%10==0?zd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=+(""+e).replace(/^[^.]*.?|0+$/g,"");return 0===n&&t%10==1&&t%100!=11||0!==n?Vd:qd},function(e){var t=+e;return 1===t?Vd:2===t?Hd:qd},function(e){var t=+e;return 0===t?jd:1===t?Vd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=+e;return 0===n?jd:0!==t&&1!==t||0===n?qd:Vd},function(e){var t=+(e+".").split(".")[1],n=+e;return n%10==1&&(n%100<11||19<n%100)?Vd:2<=n%10&&n%10<=9&&(n%100<11||19<n%100)?Gd:0!==t?zd:qd},function(e){var t=(e+".").split(".")[1].length,n=+(e+".").split(".")[1],r=+e;return r%10==0||11<=r%100&&r%100<=19||2===t&&11<=n%100&&n%100<=19?jd:r%10==1&&r%100!=11||2===t&&n%10==1&&n%100!=11||2!==t&&n%10==1?Vd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+(e+".").split(".")[1];return 0===n&&t%10==1&&t%100!=11||r%10==1&&r%100!=11?Vd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length,r=+e;return 1===t&&0===n?Vd:0!==n||0===r||1!==r&&1<=r%100&&r%100<=19?Gd:qd},function(e){var t=+e;return 1===t?Vd:0===t||2<=t%100&&t%100<=10?Gd:11<=t%100&&t%100<=19?zd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 1===t&&0===n?Vd:0===n&&2<=t%10&&t%10<=4&&(t%100<12||14<t%100)?Gd:0===n&&1!==t&&0<=t%10&&t%10<=1||0===n&&5<=t%10&&t%10<=9||0===n&&12<=t%100&&t%100<=14?zd:qd},function(e){var t=Math.floor(Math.abs(+e));return 0<=t&&t<=1?Vd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 0===n&&t%10==1&&t%100!=11?Vd:0===n&&2<=t%10&&t%10<=4&&(t%100<12||14<t%100)?Gd:0===n&&t%10==0||0===n&&5<=t%10&&t%10<=9||0===n&&11<=t%100&&t%100<=14?zd:qd},function(e){var t=+e;return 0===Math.floor(Math.abs(+e))||1===t?Vd:2<=t&&t<=10?Gd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=+(e+".").split(".")[1],r=+e;return 0===r||1===r||0===t&&1===n?Vd:qd},function(e){var t=Math.floor(Math.abs(+e)),n=(e+".").split(".")[1].length;return 0===n&&t%100==1?Vd:0===n&&t%100==2?Hd:0===n&&3<=t%100&&t%100<=4||0!==n?Gd:qd},function(e){var t=+e;return 0<=t&&t<=1||11<=t&&t<=99?Vd:qd},function(e){var t=+e;return 1===t||5===t||7===t||8===t||9===t||10===t?Vd:2===t||3===t?Hd:4===t?Gd:6===t?zd:qd},function(e){var t=Math.floor(Math.abs(+e));return t%10==1||t%10==2||t%10==5||t%10==7||t%10==8||t%100==20||t%100==50||t%100==70||t%100==80?Vd:t%10==3||t%10==4||t%1e3==100||t%1e3==200||t%1e3==300||t%1e3==400||t%1e3==500||t%1e3==600||t%1e3==700||t%1e3==800||t%1e3==900?Gd:0===t||t%10==6||t%100==40||t%100==60||t%100==90?zd:qd},function(e){var t=+e;return t%10!=2&&t%10!=3||t%100==12||t%100==13?qd:Gd},function(e){var t=+e;return 1===t||3===t?Vd:2===t?Hd:4===t?Gd:qd},function(e){var t=+e;return 0===t||7===t||8===t||9===t?jd:1===t?Vd:2===t?Hd:3===t||4===t?Gd:5===t||6===t?zd:qd},function(e){var t=+e;return t%10==1&&t%100!=11?Vd:t%10==2&&t%100!=12?Hd:t%10==3&&t%100!=13?Gd:qd},function(e){var t=+e;return 1===t?Vd:2===t||3===t?Hd:4===t?Gd:6===t?zd:qd},function(e){var t=+e;return 1===t||5===t?Vd:qd},function(e){var t=+e;return 11===t||8===t||80===t||800===t?zd:qd},function(e){var t=Math.floor(Math.abs(+e));return 1===t?Vd:0===t||2<=t%100&&t%100<=20||t%100==40||t%100==60||t%100==80?zd:qd},function(e){var t=+e;return t%10==6||t%10==9||t%10==0&&0!==t?zd:qd},function(e){var t=Math.floor(Math.abs(+e));return t%10==1&&t%100!=11?Vd:t%10==2&&t%100!=12?Hd:t%10!=7&&t%10!=8||t%100==17||t%100==18?qd:zd},function(e){var t=+e;return 1===t?Vd:2===t||3===t?Hd:4===t?Gd:qd},function(e){var t=+e;return 1<=t&&t<=4?Vd:qd},function(e){var t=+e;return 1===t||5===t||7<=t&&t<=9?Vd:2===t||3===t?Hd:4===t?Gd:6===t?zd:qd},function(e){var t=+e;return 1===t?Vd:t%10==4&&t%100!=14?zd:qd},function(e){var t=+e;return t%10!=1&&t%10!=2||t%100==11||t%100==12?qd:Vd},function(e){var t=+e;return t%10==6||t%10==9||10===t?Gd:qd},function(e){var t=+e;return t%10==3&&t%100!=13?Gd:qd}],Jd={af:{cardinal:Qd[0]},ak:{cardinal:Qd[1]},am:{cardinal:Qd[2]},ar:{cardinal:Qd[3]},ars:{cardinal:Qd[3]},as:{cardinal:Qd[2],ordinal:Qd[34]},asa:{cardinal:Qd[0]},ast:{cardinal:Qd[4]},az:{cardinal:Qd[0],ordinal:Qd[35]},be:{cardinal:Qd[5],ordinal:Qd[36]},bem:{cardinal:Qd[0]},bez:{cardinal:Qd[0]},bg:{cardinal:Qd[0]},bh:{cardinal:Qd[1]},bn:{cardinal:Qd[2],ordinal:Qd[34]},br:{cardinal:Qd[6]},brx:{cardinal:Qd[0]},bs:{cardinal:Qd[7]},ca:{cardinal:Qd[4],ordinal:Qd[37]},ce:{cardinal:Qd[0]},cgg:{cardinal:Qd[0]},chr:{cardinal:Qd[0]},ckb:{cardinal:Qd[0]},cs:{cardinal:Qd[8]},cy:{cardinal:Qd[9],ordinal:Qd[38]},da:{cardinal:Qd[10]},de:{cardinal:Qd[4]},dsb:{cardinal:Qd[11]},dv:{cardinal:Qd[0]},ee:{cardinal:Qd[0]},el:{cardinal:Qd[0]},en:{cardinal:Qd[4],ordinal:Qd[39]},eo:{cardinal:Qd[0]},es:{cardinal:Qd[0]},et:{cardinal:Qd[4]},eu:{cardinal:Qd[0]},fa:{cardinal:Qd[2]},ff:{cardinal:Qd[12]},fi:{cardinal:Qd[4]},fil:{cardinal:Qd[13],ordinal:Qd[0]},fo:{cardinal:Qd[0]},fr:{cardinal:Qd[12],ordinal:Qd[0]},fur:{cardinal:Qd[0]},fy:{cardinal:Qd[4]},ga:{cardinal:Qd[14],ordinal:Qd[0]},gd:{cardinal:Qd[15]},gl:{cardinal:Qd[4]},gsw:{cardinal:Qd[0]},gu:{cardinal:Qd[2],ordinal:Qd[40]},guw:{cardinal:Qd[1]},gv:{cardinal:Qd[16]},ha:{cardinal:Qd[0]},haw:{cardinal:Qd[0]},he:{cardinal:Qd[17]},hi:{cardinal:Qd[2],ordinal:Qd[40]},hr:{cardinal:Qd[7]},hsb:{cardinal:Qd[11]},hu:{cardinal:Qd[0],ordinal:Qd[41]},hy:{cardinal:Qd[12],ordinal:Qd[0]},io:{cardinal:Qd[4]},is:{cardinal:Qd[18]},it:{cardinal:Qd[4],ordinal:Qd[42]},iu:{cardinal:Qd[19]},iw:{cardinal:Qd[17]},jgo:{cardinal:Qd[0]},ji:{cardinal:Qd[4]},jmc:{cardinal:Qd[0]},ka:{cardinal:Qd[0],ordinal:Qd[43]},kab:{cardinal:Qd[12]},kaj:{cardinal:Qd[0]},kcg:{cardinal:Qd[0]},kk:{cardinal:Qd[0],ordinal:Qd[44]},kkj:{cardinal:Qd[0]},kl:{cardinal:Qd[0]},kn:{cardinal:Qd[2]},ks:{cardinal:Qd[0]},ksb:{cardinal:Qd[0]},ksh:{cardinal:Qd[20]},ku:{cardinal:Qd[0]},kw:{cardinal:Qd[19]},ky:{cardinal:Qd[0]},lag:{cardinal:Qd[21]},lb:{cardinal:Qd[0]},lg:{cardinal:Qd[0]},ln:{cardinal:Qd[1]},lt:{cardinal:Qd[22]},lv:{cardinal:Qd[23]},mas:{cardinal:Qd[0]},mg:{cardinal:Qd[1]},mgo:{cardinal:Qd[0]},mk:{cardinal:Qd[24],ordinal:Qd[45]},ml:{cardinal:Qd[0]},mn:{cardinal:Qd[0]},mo:{cardinal:Qd[25],ordinal:Qd[0]},mr:{cardinal:Qd[2],ordinal:Qd[46]},mt:{cardinal:Qd[26]},nah:{cardinal:Qd[0]},naq:{cardinal:Qd[19]},nb:{cardinal:Qd[0]},nd:{cardinal:Qd[0]},ne:{cardinal:Qd[0],ordinal:Qd[47]},nl:{cardinal:Qd[4]},nn:{cardinal:Qd[0]},nnh:{cardinal:Qd[0]},no:{cardinal:Qd[0]},nr:{cardinal:Qd[0]},nso:{cardinal:Qd[1]},ny:{cardinal:Qd[0]},nyn:{cardinal:Qd[0]},om:{cardinal:Qd[0]},or:{cardinal:Qd[0],ordinal:Qd[48]},os:{cardinal:Qd[0]},pa:{cardinal:Qd[1]},pap:{cardinal:Qd[0]},pl:{cardinal:Qd[27]},prg:{cardinal:Qd[23]},ps:{cardinal:Qd[0]},pt:{cardinal:Qd[28]},"pt-PT":{cardinal:Qd[4]},rm:{cardinal:Qd[0]},ro:{cardinal:Qd[25],ordinal:Qd[0]},rof:{cardinal:Qd[0]},ru:{cardinal:Qd[29]},rwk:{cardinal:Qd[0]},saq:{cardinal:Qd[0]},scn:{cardinal:Qd[4],ordinal:Qd[42]},sd:{cardinal:Qd[0]},sdh:{cardinal:Qd[0]},se:{cardinal:Qd[19]},seh:{cardinal:Qd[0]},sh:{cardinal:Qd[7]},shi:{cardinal:Qd[30]},si:{cardinal:Qd[31]},sk:{cardinal:Qd[8]},sl:{cardinal:Qd[32]},sma:{cardinal:Qd[19]},smi:{cardinal:Qd[19]},smj:{cardinal:Qd[19]},smn:{cardinal:Qd[19]},sms:{cardinal:Qd[19]},sn:{cardinal:Qd[0]},so:{cardinal:Qd[0]},sq:{cardinal:Qd[0],ordinal:Qd[49]},sr:{cardinal:Qd[7]},ss:{cardinal:Qd[0]},ssy:{cardinal:Qd[0]},st:{cardinal:Qd[0]},sv:{cardinal:Qd[4],ordinal:Qd[50]},sw:{cardinal:Qd[4]},syr:{cardinal:Qd[0]},ta:{cardinal:Qd[0]},te:{cardinal:Qd[0]},teo:{cardinal:Qd[0]},ti:{cardinal:Qd[1]},tig:{cardinal:Qd[0]},tk:{cardinal:Qd[0],ordinal:Qd[51]},tl:{cardinal:Qd[13],ordinal:Qd[0]},tn:{cardinal:Qd[0]},tr:{cardinal:Qd[0]},ts:{cardinal:Qd[0]},tzm:{cardinal:Qd[33]},ug:{cardinal:Qd[0]},uk:{cardinal:Qd[29],ordinal:Qd[52]},ur:{cardinal:Qd[4]},uz:{cardinal:Qd[0]},ve:{cardinal:Qd[0]},vo:{cardinal:Qd[0]},vun:{cardinal:Qd[0]},wa:{cardinal:Qd[1]},wae:{cardinal:Qd[0]},xh:{cardinal:Qd[0]},xog:{cardinal:Qd[0]},yi:{cardinal:Qd[4]},zu:{cardinal:Qd[2]},lo:{ordinal:Qd[0]},ms:{ordinal:Qd[0]},vi:{ordinal:Qd[0]}},Kd=Id((function(e,t){function n(e,t,s,i,o){var a=e.map((function(e){return function(e,t,s,i,o){if("string"==typeof e){var a=e;return function(){return a}}var c,u=e[0],h=e[1];if(t&&"#"===e[0]){u=t[0];var d=t[2],p=(i.number||l.number)([u,"number"],s);return function(e){return p(r(u,e)-d,e)}}"plural"===h||"selectordinal"===h?(c={},Object.keys(e[3]).forEach((function(t){c[t]=n(e[3][t],e,s,i,o)})),e=[e[0],e[1],e[2],c]):e[2]&&"object"==typeof e[2]&&(c={},Object.keys(e[2]).forEach((function(t){c[t]=n(e[2][t],e,s,i,o)})),e=[e[0],e[1],c]);var f=h&&(i[h]||l[h]);if(f){var m=f(e,s);return function(e){return m(r(u,e),e)}}return o?function(e){return String(r(u,e))}:function(e){return r(u,e)}}(e,t,s,i,o)}));return o?1===a.length?a[0]:function(e){for(var t="",n=0;n<a.length;++n)t+=a[n](e);return t}:function(e){return a.reduce((function(t,n){return t.concat(n(e))}),[])}}function r(e,t){if(t&&e in t)return t[e];for(var n=e.split("."),r=t,s=0,i=n.length;r&&s<i;++s)r=r[n[s]];return r}function s(e,t){var n=e[2],r=$d.number[n]||$d.parseNumberPattern(n)||$d.number.default;return new Intl.NumberFormat(t,r).format}function i(e,t){var n=e[1],r=e[2],s=$d[n][r]||$d.parseDatePattern(r)||$d[n].default;return new Intl.DateTimeFormat(t,s).format}function o(e,t){var n,r="selectordinal"===e[1]?"ordinal":"cardinal",s=e[2],i=e[3];if(Intl.PluralRules&&Intl.PluralRules.supportedLocalesOf(t).length>0)n=new Intl.PluralRules(t,{type:r});else{var o=function(e,t){if("string"==typeof e&&t[e])return e;for(var n=[].concat(e||[]),r=0,s=n.length;r<s;++r)for(var i=n[r].split("-");i.length;){var o=i.join("-");if(t[o])return o;i.pop()}}(t,Jd),l=o&&Jd[o][r]||a;n={select:l}}return function(e,t){return(i["="+ +e]||i[n.select(e-s)]||i.other)(t)}}function a(){return"other"}(t=e.exports=function(e,t,r){return n(e,null,t||"en",r||{},!0)}).toParts=function(e,t,r){return n(e,null,t||"en",r||{},!1)};var l={number:s,ordinal:s,spellout:s,duration:function(e,t){var n=e[2],r=$d.duration[n]||$d.duration.default,s=new Intl.NumberFormat(t,r.seconds).format,i=new Intl.NumberFormat(t,r.minutes).format,o=new Intl.NumberFormat(t,r.hours).format,a=/^fi$|^fi-|^da/.test(String(t))?".":":";return function(e,t){if(e=+e,!isFinite(e))return s(e);var n=~~(e/60/60),r=~~(e/60%60),l=(n?o(Math.abs(n))+a:"")+i(Math.abs(r))+a+s(Math.abs(e%60));return e<0?o(-1).replace(o(1),l):l}},date:i,time:i,plural:o,selectordinal:o,select:function(e,t){var n=e[2];return function(e,t){return(n[e]||n.other)(t)}}};t.types=l})),Wd=(Kd.toParts,Kd.types,Id((function(e,t){var n="{",r="}",s=",",i="#",o="<",a=">",l="</",c="/>",u="'",h="offset:",d=["number","date","time","ordinal","duration","spellout"],p=["plural","select","selectordinal"];function f(e,t){var n=e.pattern,s=n.length,i=[],o=e.index,a=m(e,t);for(a&&i.push(a),a&&e.tokens&&e.tokens.push(["text",n.slice(o,e.index)]);e.index<s;){if(n[e.index]===r){if(!t)throw E(e);break}if(t&&e.tagsType&&n.slice(e.index,e.index+l.length)===l)break;i.push(b(e)),o=e.index,(a=m(e,t))&&i.push(a),a&&e.tokens&&e.tokens.push(["text",n.slice(o,e.index)])}return i}function m(e,t){for(var s=e.pattern,a=s.length,l="plural"===t||"selectordinal"===t,c=!!e.tagsType,h="{style}"===t,d="";e.index<a;){var p=s[e.index];if(p===n||p===r||l&&p===i||c&&p===o||h&&g(p.charCodeAt(0)))break;if(p===u)if((p=s[++e.index])===u)d+=p,++e.index;else if(p===n||p===r||l&&p===i||c&&p===o||h)for(d+=p;++e.index<a;)if((p=s[e.index])===u&&s[e.index+1]===u)d+=u,++e.index;else{if(p===u){++e.index;break}d+=p}else d+=u;else d+=p,++e.index}return d}function g(e){return e>=9&&e<=13||32===e||133===e||160===e||6158===e||e>=8192&&e<=8205||8232===e||8233===e||8239===e||8287===e||8288===e||12288===e||65279===e}function y(e){for(var t=e.pattern,n=t.length,r=e.index;e.index<n&&g(t.charCodeAt(e.index));)++e.index;r<e.index&&e.tokens&&e.tokens.push(["space",e.pattern.slice(r,e.index)])}function b(e){var t=e.pattern;if(t[e.index]===i)return e.tokens&&e.tokens.push(["syntax",i]),++e.index,[i];var u=function(e){var t=e.tagsType;if(t&&e.pattern[e.index]===o){if(e.pattern.slice(e.index,e.index+l.length)===l)throw E(e,null,"closing tag without matching opening tag");e.tokens&&e.tokens.push(["syntax",o]),++e.index;var n=w(e,!0);if(!n)throw E(e,"placeholder id");if(e.tokens&&e.tokens.push(["id",n]),y(e),e.pattern.slice(e.index,e.index+c.length)===c)return e.tokens&&e.tokens.push(["syntax",c]),e.index+=c.length,[n,t];if(e.pattern[e.index]!==a)throw E(e,a);e.tokens&&e.tokens.push(["syntax",a]),++e.index;var r=f(e,t),s=e.index;if(e.pattern.slice(e.index,e.index+l.length)!==l)throw E(e,l+n+a);e.tokens&&e.tokens.push(["syntax",l]),e.index+=l.length;var i=w(e,!0);if(i&&e.tokens&&e.tokens.push(["id",i]),n!==i)throw e.index=s,E(e,l+n+a,l+i+a);if(y(e),e.pattern[e.index]!==a)throw E(e,a);return e.tokens&&e.tokens.push(["syntax",a]),++e.index,[n,t,{children:r}]}}(e);if(u)return u;if(t[e.index]!==n)throw E(e,n);e.tokens&&e.tokens.push(["syntax",n]),++e.index,y(e);var p=w(e);if(!p)throw E(e,"placeholder id");e.tokens&&e.tokens.push(["id",p]),y(e);var m=t[e.index];if(m===r)return e.tokens&&e.tokens.push(["syntax",r]),++e.index,[p];if(m!==s)throw E(e,s+" or "+r);e.tokens&&e.tokens.push(["syntax",s]),++e.index,y(e);var g,b=w(e);if(!b)throw E(e,"placeholder type");if(e.tokens&&e.tokens.push(["type",b]),y(e),(m=t[e.index])===r){if(e.tokens&&e.tokens.push(["syntax",r]),"plural"===b||"selectordinal"===b||"select"===b)throw E(e,b+" sub-messages");return++e.index,[p,b]}if(m!==s)throw E(e,s+" or "+r);if(e.tokens&&e.tokens.push(["syntax",s]),++e.index,y(e),"plural"===b||"selectordinal"===b){var _=function(e){var t,n=e.pattern,r=n.length,s=0;if(n.slice(e.index,e.index+h.length)===h){e.tokens&&e.tokens.push(["offset","offset"],["syntax",":"]),e.index+=h.length,y(e);for(var i=e.index;e.index<r&&((t=n.charCodeAt(e.index))>=48&&t<=57);)++e.index;if(i===e.index)throw E(e,"offset number");e.tokens&&e.tokens.push(["number",n.slice(i,e.index)]),s=+n.slice(i,e.index)}return s}(e);y(e),g=[p,b,_,A(e,b)]}else if("select"===b)g=[p,b,A(e,b)];else if(d.indexOf(b)>=0)g=[p,b,v(e)];else{var k=e.index,x=v(e);y(e),t[e.index]===n&&(e.index=k,x=A(e,b)),g=[p,b,x]}if(y(e),t[e.index]!==r)throw E(e,r);return e.tokens&&e.tokens.push(["syntax",r]),++e.index,g}function w(e,t){for(var l=e.pattern,c=l.length,h="";e.index<c;){var d=l[e.index];if(d===n||d===r||d===s||d===i||d===u||g(d.charCodeAt(0))||t&&(d===o||d===a||"/"===d))break;h+=d,++e.index}return h}function v(e){var t=e.index,n=m(e,"{style}");if(!n)throw E(e,"placeholder style name");return e.tokens&&e.tokens.push(["style",e.pattern.slice(t,e.index)]),n}function A(e,t){for(var n=e.pattern,s=n.length,i={};e.index<s&&n[e.index]!==r;){var o=w(e);if(!o)throw E(e,"sub-message selector");e.tokens&&e.tokens.push(["selector",o]),y(e),i[o]=_(e,t),y(e)}if(!i.other&&p.indexOf(t)>=0)throw E(e,null,null,'"other" sub-message must be specified in '+t);return i}function _(e,t){if(e.pattern[e.index]!==n)throw E(e,n+" to start sub-message");e.tokens&&e.tokens.push(["syntax",n]),++e.index;var s=f(e,t);if(e.pattern[e.index]!==r)throw E(e,r+" to end sub-message");return e.tokens&&e.tokens.push(["syntax",r]),++e.index,s}function E(e,t,n,r){var s=e.pattern,i=s.slice(0,e.index).split(/\r?\n/),o=e.index,a=i.length,l=i.slice(-1)[0].length;return n=n||(e.index>=s.length?"end of message pattern":w(e)||s[e.index]),r||(r=function(e,t){return e?"Expected "+e+" but found "+t:"Unexpected "+t+" found"}(t,n)),new k(r+=" in "+s.replace(/\r?\n/g,"\n"),t,n,o,a,l)}function k(e,t,n,r,s,i){Error.call(this,e),this.name="SyntaxError",this.message=e,this.expected=t,this.found=n,this.offset=r,this.line=s,this.column=i}t=e.exports=function(e,t){return f({pattern:String(e),index:0,tagsType:t&&t.tagsType||null,tokens:t&&t.tokens||null},"")},k.prototype=Object.create(Error.prototype),t.SyntaxError=k}))),Yd=(Wd.SyntaxError,new RegExp("^("+Object.keys(Jd).join("|")+")\\b")),Zd=new WeakMap;function Xd(e,t,n){if(!(this instanceof Xd)||Zd.has(this))throw new TypeError("calling MessageFormat constructor without new is invalid");var r=Wd(e);Zd.set(this,{ast:r,format:Kd(r,t,n&&n.types),locale:Xd.supportedLocalesOf(t)[0]||"en",locales:t,options:n})}var ep=Xd;Object.defineProperties(Xd.prototype,{format:{configurable:!0,get:function(){var e=Zd.get(this);if(!e)throw new TypeError("MessageFormat.prototype.format called on value that's not an object initialized as a MessageFormat");return e.format}},formatToParts:{configurable:!0,writable:!0,value:function(e){var t=Zd.get(this);if(!t)throw new TypeError("MessageFormat.prototype.formatToParts called on value that's not an object initialized as a MessageFormat");return(t.toParts||(t.toParts=Kd.toParts(t.ast,t.locales,t.options&&t.options.types)))(e)}},resolvedOptions:{configurable:!0,writable:!0,value:function(){var e=Zd.get(this);if(!e)throw new TypeError("MessageFormat.prototype.resolvedOptions called on value that's not an object initialized as a MessageFormat");return{locale:e.locale}}}}),"undefined"!=typeof Symbol&&Object.defineProperty(Xd.prototype,Symbol.toStringTag,{value:"Object"}),Object.defineProperties(Xd,{supportedLocalesOf:{configurable:!0,writable:!0,value:function(e){return[].concat(Intl.NumberFormat.supportedLocalesOf(e),Intl.DateTimeFormat.supportedLocalesOf(e),Intl.PluralRules?Intl.PluralRules.supportedLocalesOf(e):[],[].concat(e||[]).filter((function(e){return Yd.test(e)}))).filter((function(e,t,n){return n.indexOf(e)===t}))}}});const tp=ep;let np=Td.get("@lion/localize::localize::0.10.x")||new class{constructor({autoLoadOnLocaleChange:e=!1,fallbackLocale:t="",showKeyAsFallback:n=!1}={}){this.__delegationTarget=document.createDocumentFragment(),this._autoLoadOnLocaleChange=!!e,this._fallbackLocale=t,this._showKeyAsFallback=n,this.__storage={},this.__namespacePatternsMap=new Map,this.__namespaceLoadersCache={},this.__namespaceLoaderPromisesCache={},this.formatNumberOptions={returnIfNaN:"",postProcessors:new Map},this.formatDateOptions={postProcessors:new Map};const r=document.documentElement.getAttribute("data-localize-lang");this._supportExternalTranslationTools=Boolean(r),this._supportExternalTranslationTools&&(this.locale=r||"en-GB",this._setupTranslationToolSupport()),document.documentElement.lang||(document.documentElement.lang=this.locale||"en-GB"),this._setupHtmlLangAttributeObserver()}_setupTranslationToolSupport(){this._langAttrSetByTranslationTool=document.documentElement.lang||null}teardown(){this._teardownHtmlLangAttributeObserver()}get locale(){return this._supportExternalTranslationTools?this.__locale||"":document.documentElement.lang}set locale(e){let t;this._supportExternalTranslationTools?(t=this.__locale,this.__locale=e,null===this._langAttrSetByTranslationTool&&this._setHtmlLangAttribute(e)):(t=document.documentElement.lang,this._setHtmlLangAttribute(e)),e.includes("-")||this.__handleLanguageOnly(e),this._onLocaleChanged(e,t)}_setHtmlLangAttribute(e){this._teardownHtmlLangAttributeObserver(),document.documentElement.lang=e,this._setupHtmlLangAttributeObserver()}__handleLanguageOnly(e){throw new Error(`\n      Locale was set to ${e}.\n      Language only locales are not allowed, please use the full language locale e.g. 'en-GB' instead of 'en'.\n      See https://github.com/ing-bank/lion/issues/187 for more information.\n    `)}get loadingComplete(){return"object"==typeof this.__namespaceLoaderPromisesCache[this.locale]?Promise.all(Object.values(this.__namespaceLoaderPromisesCache[this.locale])):Promise.resolve()}reset(){this.__storage={},this.__namespacePatternsMap=new Map,this.__namespaceLoadersCache={},this.__namespaceLoaderPromisesCache={}}addData(e,t,n){if(this._isNamespaceInCache(e,t))throw new Error(`Namespace "${t}" has been already added for the locale "${e}".`);this.__storage[e]=this.__storage[e]||{},this.__storage[e][t]=n}setupNamespaceLoader(e,t){this.__namespacePatternsMap.set(e,t)}loadNamespaces(e,{locale:t}={}){return Promise.all(e.map((e=>this.loadNamespace(e,{locale:t}))))}loadNamespace(e,{locale:t=this.locale}={locale:this.locale}){const n="object"==typeof e,r=n?Object.keys(e)[0]:e;if(this._isNamespaceInCache(t,r))return Promise.resolve();return this._getCachedNamespaceLoaderPromise(t,r)||this._loadNamespaceData(t,e,n,r)}msg(e,t,n={}){const r=n.locale?n.locale:this.locale,s=this._getMessageForKeys(e,r);return s?new tp(s,r).format(t):""}_setupHtmlLangAttributeObserver(){this._htmlLangAttributeObserver||(this._htmlLangAttributeObserver=new MutationObserver((e=>{e.forEach((e=>{this._supportExternalTranslationTools?"auto"===document.documentElement.lang?(this._langAttrSetByTranslationTool=null,this._setHtmlLangAttribute(this.locale)):this._langAttrSetByTranslationTool=document.documentElement.lang:this._onLocaleChanged(document.documentElement.lang,e.oldValue||"")}))}))),this._htmlLangAttributeObserver.observe(document.documentElement,{attributes:!0,attributeFilter:["lang"],attributeOldValue:!0})}_teardownHtmlLangAttributeObserver(){this._htmlLangAttributeObserver&&this._htmlLangAttributeObserver.disconnect()}_isNamespaceInCache(e,t){return!(!this.__storage[e]||!this.__storage[e][t])}_getCachedNamespaceLoaderPromise(e,t){return this.__namespaceLoaderPromisesCache[e]?this.__namespaceLoaderPromisesCache[e][t]:null}_loadNamespaceData(e,t,n,r){const s=this._getNamespaceLoader(t,n,r),i=this._getNamespaceLoaderPromise(s,e,r);return this._cacheNamespaceLoaderPromise(e,r,i),i.then((t=>{if(this.__namespaceLoaderPromisesCache[e]&&this.__namespaceLoaderPromisesCache[e][r]===i){const n=function(e){return!(!e||!e.default||"object"!=typeof e.default||1!==Object.keys(e).length)}(t)?t.default:t;this.addData(e,r,n)}}))}_getNamespaceLoader(e,t,n){let r=this.__namespaceLoadersCache[n];if(r||(t?(r=e[n],this.__namespaceLoadersCache[n]=r):(r=this._lookupNamespaceLoader(n),this.__namespaceLoadersCache[n]=r)),!r)throw new Error(`Namespace "${n}" was not properly setup.`);return this.__namespaceLoadersCache[n]=r,r}_getNamespaceLoaderPromise(e,t,n,r=this._fallbackLocale){return e(t,n).catch((()=>{const s=this._getLangFromLocale(t);return e(s,n).catch((()=>{if(r)return this._getNamespaceLoaderPromise(e,r,n,"").catch((()=>{const e=this._getLangFromLocale(r);throw new Error(`Data for namespace "${n}" and current locale "${t}" or fallback locale "${r}" could not be loaded. Make sure you have data either for locale "${t}" (and/or generic language "${s}") or for fallback "${r}" (and/or "${e}").`)}));throw new Error(`Data for namespace "${n}" and locale "${t}" could not be loaded. Make sure you have data for locale "${t}" (and/or generic language "${s}").`)}))}))}_cacheNamespaceLoaderPromise(e,t,n){this.__namespaceLoaderPromisesCache[e]||(this.__namespaceLoaderPromisesCache[e]={}),this.__namespaceLoaderPromisesCache[e][t]=n}_lookupNamespaceLoader(e){for(const[t,n]of this.__namespacePatternsMap){const r="string"==typeof t&&t===e,s="object"==typeof t&&"RegExp"===t.constructor.name&&t.test(e);if(r||s)return n}return null}_getLangFromLocale(e){return e.substring(0,2)}addEventListener(e,t,...n){this.__delegationTarget.addEventListener(e,t,...n)}removeEventListener(e,t,...n){this.__delegationTarget.removeEventListener(e,t,...n)}dispatchEvent(e){this.__delegationTarget.dispatchEvent(e)}_onLocaleChanged(e,t){this.dispatchEvent(new CustomEvent("__localeChanging")),e!==t&&(this._autoLoadOnLocaleChange?(this._loadAllMissing(e,t),this.loadingComplete.then((()=>{this.dispatchEvent(new CustomEvent("localeChanged",{detail:{newLocale:e,oldLocale:t}}))}))):this.dispatchEvent(new CustomEvent("localeChanged",{detail:{newLocale:e,oldLocale:t}})))}_loadAllMissing(e,t){const n=this.__storage[t]||{},r=this.__storage[e]||{};Object.keys(n).forEach((t=>{r[t]||this.loadNamespace(t,{locale:e})}))}_getMessageForKeys(e,t){if("string"==typeof e)return this._getMessageForKey(e,t);const n=Array.from(e).reverse();let r,s;for(;n.length;)if(r=n.pop(),s=this._getMessageForKey(r,t),s)return s}_getMessageForKey(e,t){if(!e||-1===e.indexOf(":"))throw new Error(`Namespace is missing in the key "${e}". The format for keys is "namespace:name".`);const[n,r]=e.split(":"),s=this.__storage[t],i=s?s[n]:{},o=r.split(".").reduce(((e,t)=>"object"==typeof e?e[t]:e),i);return String(o||(this._showKeyAsFallback?e:""))}setDatePostProcessorForLocale({locale:e,postProcessor:t}){this.formatDateOptions.postProcessors.set(e,t)}setNumberPostProcessorForLocale({locale:e,postProcessor:t}){this.formatNumberOptions.postProcessors.set(e,t)}}({autoLoadOnLocaleChange:!0,fallbackLocale:"en-GB"});class rp{constructor(){this.__running=!1,this.__queue=[]}add(e){this.__queue.push(e),this.__running||(this.complete=new Promise((e=>{this.__callComplete=e})),this.__run())}async __run(){this.__running=!0,await this.__queue[0](),this.__queue.shift(),this.__queue.length>0?this.__run():(this.__running=!1,this.__callComplete&&this.__callComplete())}}const sp=Ee((e=>class extends e{constructor(){super(),this.__SyncUpdatableNamespace={}}firstUpdated(e){super.firstUpdated(e),this.__syncUpdatableInitialize()}connectedCallback(){super.connectedCallback(),this.__SyncUpdatableNamespace.connected=!0}disconnectedCallback(){super.disconnectedCallback(),this.__SyncUpdatableNamespace.connected=!1}static __syncUpdatableHasChanged(e,t,n){const r=this.elementProperties;return r.get(e)&&r.get(e).hasChanged?r.get(e).hasChanged(t,n):t!==n}__syncUpdatableInitialize(){const e=this.__SyncUpdatableNamespace,t=this.constructor;e.initialized=!0,e.queue&&Array.from(e.queue).forEach((e=>{t.__syncUpdatableHasChanged(e,this[e],void 0)&&this.updateSync(e,void 0)}))}requestUpdate(e,t){super.requestUpdate(e,t),this.__SyncUpdatableNamespace=this.__SyncUpdatableNamespace||{};const n=this.__SyncUpdatableNamespace,r=this.constructor;n.initialized?r.__syncUpdatableHasChanged(e,this[e],t)&&this.updateSync(e,t):(n.queue=n.queue||new Set,n.queue.add(e))}updateSync(e,t){}}));class ip extends Tt{static get properties(){return{feedbackData:{attribute:!1}}}_messageTemplate({message:e}){return e}updated(e){super.updated(e),this.feedbackData&&this.feedbackData[0]?(this.setAttribute("type",this.feedbackData[0].type),this.currentType=this.feedbackData[0].type,window.clearTimeout(this.removeMessage),"success"===this.currentType&&(this.removeMessage=window.setTimeout((()=>{this.removeAttribute("type"),this.feedbackData=[]}),3e3))):"success"!==this.currentType&&this.removeAttribute("type")}render(){return ht`
      ${this.feedbackData&&this.feedbackData.map((({message:e,type:t,validator:n})=>ht`
          ${this._messageTemplate({message:e,type:t,validator:n})}
        `))}
    `}}class op extends EventTarget{constructor(e,t){super(),this.__param=e,this.__config=t||{},this.type=t?.type||"error"}static validatorName="";static async=!1;execute(e,t,n){if(!this.constructor.validatorName)throw new Error("A validator needs to have a name! Please set it via \"static get validatorName() { return 'IsCat'; }\"");return!0}set param(e){this.__param=e,this.dispatchEvent(new Event("param-changed"))}get param(){return this.__param}set config(e){this.__config=e,this.dispatchEvent(new Event("config-changed"))}get config(){return this.__config}async _getMessage(e){const t=this.constructor,n={name:t.validatorName,type:this.type,params:this.param,config:this.config,...e};if(this.config.getMessage){if("function"==typeof this.config.getMessage)return this.config.getMessage(n);throw new Error("You must provide a value for getMessage of type 'function', you provided a value of type: "+typeof this.config.getMessage)}return t.getMessage(n)}static async getMessage(e){return`Please configure an error message for "${this.name}" by overriding "static async getMessage()"`}onFormControlConnect(e){}onFormControlDisconnect(e){}abortExecution(){}}class ap extends op{executeOnResults({regularValidationResult:e,prevValidationResult:t,prevShownValidationResult:n,validators:r}){return!0}}class lp extends op{static get validatorName(){return"Required"}static get _compatibleRoles(){return["combobox","gridcell","input","listbox","radiogroup","select","spinbutton","textarea","textbox","tree"]}static get _compatibleTags(){return["input","select","textarea"]}onFormControlConnect({_inputNode:e}){if(e){const t=e.getAttribute("role")||"",n=e.tagName.toLowerCase(),r=this.constructor;(r._compatibleRoles.includes(t)||r._compatibleTags.includes(n))&&e.setAttribute("aria-required","true")}}onFormControlDisconnect({_inputNode:e}){e&&e.removeAttribute("aria-required")}}function cp(e=[],t=[]){return e.filter((e=>!t.includes(e))).concat(t.filter((t=>!e.includes(t))))}const up=Ee((e=>class extends(kd(sp(ke(wd(Od(e)))))){static get scopedElements(){return{...super.constructor.scopedElements,"lion-validation-feedback":ip}}static get properties(){return{validators:{attribute:!1},hasFeedbackFor:{attribute:!1},shouldShowFeedbackFor:{attribute:!1},showsFeedbackFor:{type:Array,attribute:"shows-feedback-for",reflect:!0,converter:{fromAttribute:e=>e.split(","),toAttribute:e=>e.join(",")}},validationStates:{attribute:!1},isPending:{type:Boolean,attribute:"is-pending",reflect:!0},defaultValidators:{attribute:!1},_visibleMessagesAmount:{attribute:!1},__childModelValueChanged:{attribute:!1}}}static get validationTypes(){return["error"]}get slots(){return{...super.slots,feedback:()=>{const e=this.createScopedElement("lion-validation-feedback");return e.setAttribute("data-tag-name","lion-validation-feedback"),e}}}get _allValidators(){return[...this.validators,...this.defaultValidators]}constructor(){super(),this.hasFeedbackFor=[],this.showsFeedbackFor=[],this.shouldShowFeedbackFor=[],this.validationStates={},this.isPending=!1,this.validators=[],this.defaultValidators=[],this._visibleMessagesAmount=1,this.__syncValidationResult=[],this.__asyncValidationResult=[],this.__validationResult=[],this.__prevValidationResult=[],this.__prevShownValidationResult=[],this.__childModelValueChanged=!1,this._onValidatorUpdated=this._onValidatorUpdated.bind(this),this._updateFeedbackComponent=this._updateFeedbackComponent.bind(this)}connectedCallback(){super.connectedCallback(),np.addEventListener("localeChanged",this._updateFeedbackComponent)}disconnectedCallback(){super.disconnectedCallback(),np.removeEventListener("localeChanged",this._updateFeedbackComponent)}firstUpdated(e){super.firstUpdated(e),this.__validateInitialized=!0,this.validate(),"child"!==this._repropagationRole&&this.addEventListener("model-value-changed",(()=>{this.__childModelValueChanged=!0}))}updateSync(e,t){if(super.updateSync(e,t),"validators"===e?(this.__setupValidators(),this.validate({clearCurrentResult:!0})):"modelValue"===e&&this.validate({clearCurrentResult:!0}),["touched","dirty","prefilled","focused","submitted","hasFeedbackFor","filled"].includes(e)&&this._updateShouldShowFeedbackFor(),"showsFeedbackFor"===e){this._inputNode&&this._inputNode.setAttribute("aria-invalid",`${this._hasFeedbackVisibleFor("error")}`);const e=cp(this.showsFeedbackFor,t);e.length>0&&this.dispatchEvent(new Event("showsFeedbackForChanged",{bubbles:!0})),e.forEach((e=>{var t;this.dispatchEvent(new Event(`showsFeedbackFor${t=e,t.charAt(0).toUpperCase()+t.slice(1)}Changed`,{bubbles:!0}))}))}"shouldShowFeedbackFor"===e&&cp(this.shouldShowFeedbackFor,t).length>0&&this.dispatchEvent(new Event("shouldShowFeedbackForChanged",{bubbles:!0}))}async validate({clearCurrentResult:e}={}){if(this.disabled)return this.__clearValidationResults(),this.__finishValidation({source:"sync",hasAsync:!0}),void this._updateFeedbackComponent();this.__validateInitialized&&(this.__prevValidationResult=this.__validationResult,e&&this.__clearValidationResults(),await this.__executeValidators())}async __executeValidators(){this.validateComplete=new Promise((e=>{this.__validateCompleteResolve=e}));const e=this.modelValue instanceof _d?this.modelValue.viewValue:this.modelValue,t=this._allValidators.find((e=>e instanceof lp));if(this.__isEmpty(e))return t&&(this.__syncValidationResult=[{validator:t,outcome:!0}]),void this.__finishValidation({source:"sync"});const n=this._allValidators.filter((e=>!(e instanceof ap||e instanceof lp))),r=n.filter((e=>!e.constructor.async)),s=n.filter((e=>e.constructor.async));this.__executeSyncValidators(r,e,{hasAsync:Boolean(s.length)}),await this.__executeAsyncValidators(s,e)}__executeSyncValidators(e,t,{hasAsync:n}){e.length&&(this.__syncValidationResult=e.map((e=>({validator:e,outcome:e.execute(t,e.param,{node:this})}))).filter((e=>Boolean(e.outcome)))),this.__finishValidation({source:"sync",hasAsync:n})}async __executeAsyncValidators(e,t){if(e.length){this.isPending=!0;const n=e.map((e=>e.execute(t,e.param,{node:this}))),r=await Promise.all(n);this.__asyncValidationResult=r.map(((t,n)=>({validator:e[n],outcome:r[n]}))).filter((e=>Boolean(e.outcome))),this.__finishValidation({source:"async"}),this.isPending=!1}}__executeResultValidators(e){const t=this._allValidators.filter((e=>!e.constructor.async&&e instanceof ap));return t.length?this._isEmpty(this.modelValue)?(this.__prevShownValidationResult=[],[]):t.map((t=>({validator:t,outcome:t.executeOnResults({regularValidationResult:e.map((e=>e.validator)),prevValidationResult:this.__prevValidationResult.map((e=>e.validator)),prevShownValidationResult:this.__prevShownValidationResult.map((e=>e.validator))})}))).filter((e=>Boolean(e.outcome))):[]}__finishValidation({source:e,hasAsync:t}){const n=[...this.__syncValidationResult,...this.__asyncValidationResult],r=this.__executeResultValidators(n);this.__validationResult=[...r,...n];const s=this.constructor.validationTypes.reduce(((e,t)=>({...e,[t]:{}})),{});this.__validationResult.forEach((({validator:e,outcome:t})=>{s[e.type]||(s[e.type]={});const n=e.constructor;s[e.type][n.validatorName]=t})),this.validationStates=s,this.hasFeedbackFor=[...new Set(this.__validationResult.map((({validator:e})=>e.type)))],this.dispatchEvent(new Event("validate-performed",{bubbles:!0})),"async"!==e&&t||this.__validateCompleteResolve&&this.__validateCompleteResolve(!0)}__clearValidationResults(){this.__syncValidationResult=[],this.__asyncValidationResult=[]}_onValidatorUpdated(e){"param-changed"!==e.type&&"config-changed"!==e.type||this.validate()}__setupValidators(){const e=["param-changed","config-changed"];this.__prevValidators&&this.__prevValidators.forEach((t=>{e.forEach((e=>{t.removeEventListener&&t.removeEventListener(e,this._onValidatorUpdated)})),t.onFormControlDisconnect(this)})),this._allValidators.forEach((t=>{if(!(t instanceof op)){const e=`Validators array only accepts class instances of Validator. Type "${Array.isArray(t)?"array":typeof t}" found. This may be caused by having multiple installations of @lion/form-core.`;throw console.error(e,this),new Error(e)}if(-1===this.constructor.validationTypes.indexOf(t.type)){const e=t.constructor,n=`This component does not support the validator type "${t.type}" used in "${e.validatorName}". You may change your validators type or add it to the components "static get validationTypes() {}".`;throw console.error(n,this),new Error(n)}e.forEach((e=>{t.addEventListener&&t.addEventListener(e,(e=>{this._onValidatorUpdated(e,{validator:t})}))})),t.onFormControlConnect(this)})),this.__prevValidators=this._allValidators}__isEmpty(e){return"function"==typeof this._isEmpty?this._isEmpty(e):null===this.modelValue||void 0===this.modelValue||""===this.modelValue}async __getFeedbackMessages(e){let t=await this.fieldName;return Promise.all(e.map((async({validator:e,outcome:n})=>(e.config.fieldName&&(t=await e.config.fieldName),{message:await e._getMessage({modelValue:this.modelValue,formControl:this,fieldName:t,outcome:n}),type:e.type,validator:e}))))}_updateFeedbackComponent(){const{_feedbackNode:e}=this;e&&(this.__feedbackQueue||(this.__feedbackQueue=new rp),this.showsFeedbackFor.length>0?this.__feedbackQueue.add((async()=>{const t=this._prioritizeAndFilterFeedback({validationResult:this.__validationResult.map((e=>e.validator))});this.__prioritizedResult=t.map((e=>{const t=this.__validationResult.find((t=>e===t.validator));return t})).filter(Boolean),this.__prioritizedResult.length>0&&(this.__prevShownValidationResult=this.__prioritizedResult);const n=await this.__getFeedbackMessages(this.__prioritizedResult);e.feedbackData=n.length?n:[]})):this.__feedbackQueue.add((async()=>{e.feedbackData=[]})),this.feedbackComplete=this.__feedbackQueue.complete)}_showFeedbackConditionFor(e,t){return!0}get _feedbackConditionMeta(){return{modelValue:this.modelValue,el:this}}feedbackCondition(e,t=this._feedbackConditionMeta,n=this._showFeedbackConditionFor.bind(this)){return n(e,t)}_hasFeedbackVisibleFor(e){return this.hasFeedbackFor&&this.hasFeedbackFor.includes(e)&&this.shouldShowFeedbackFor&&this.shouldShowFeedbackFor.includes(e)}updated(e){if(super.updated(e),e.has("shouldShowFeedbackFor")||e.has("hasFeedbackFor")){const e=this.constructor;this.showsFeedbackFor=e.validationTypes.map((e=>this._hasFeedbackVisibleFor(e)?e:void 0)).filter(Boolean),this._updateFeedbackComponent()}if(e.has("__childModelValueChanged")&&this.__childModelValueChanged&&(this.validate({clearCurrentResult:!0}),this.__childModelValueChanged=!1),e.has("validationStates")){const t=e.get("validationStates");t&&Object.entries(this.validationStates).forEach((([e,n])=>{t[e]&&JSON.stringify(n)!==JSON.stringify(t[e])&&this.dispatchEvent(new CustomEvent(`${e}StateChanged`,{detail:n}))}))}}_updateShouldShowFeedbackFor(){const e=this.constructor.validationTypes.map((e=>this.feedbackCondition(e,this._feedbackConditionMeta,this._showFeedbackConditionFor.bind(this))?e:void 0)).filter(Boolean);JSON.stringify(this.shouldShowFeedbackFor)!==JSON.stringify(e)&&(this.shouldShowFeedbackFor=e)}_prioritizeAndFilterFeedback({validationResult:e}){const t=this.constructor.validationTypes,n=e.filter((e=>this.feedbackCondition(e.type,this._feedbackConditionMeta,this._showFeedbackConditionFor.bind(this)))).sort(((e,n)=>t.indexOf(e.type)-t.indexOf(n.type)));return n.slice(0,this._visibleMessagesAmount)}}));class hp extends op{static get validatorName(){return"FormElementsHaveNoError"}execute(e,t,n){const r=n?.node._anyFormElementHasFeedbackFor("error");return r}static async getMessage(){return""}}const dp=Ee((e=>class extends(Cd(kd(up(ke(wd(e)))))){static get properties(){return{submitted:{type:Boolean,reflect:!0},focused:{type:Boolean,reflect:!0},dirty:{type:Boolean,reflect:!0},touched:{type:Boolean,reflect:!0},prefilled:{type:Boolean,reflect:!0}}}get _inputNode(){return this}get modelValue(){return this._getFromAllFormElements("modelValue")}set modelValue(e){this.__isInitialModelValue?(this.__isInitialModelValue=!1,this.registrationComplete.then((()=>{this._setValueMapForAllFormElements("modelValue",e)}))):this._setValueMapForAllFormElements("modelValue",e)}get serializedValue(){return this._getFromAllFormElements("serializedValue")}set serializedValue(e){this.__isInitialSerializedValue?(this.__isInitialSerializedValue=!1,this.registrationComplete.then((()=>{this._setValueMapForAllFormElements("serializedValue",e)}))):this._setValueMapForAllFormElements("serializedValue",e)}get formattedValue(){return this._getFromAllFormElements("formattedValue")}set formattedValue(e){this._setValueMapForAllFormElements("formattedValue",e)}get prefilled(){return this._everyFormElementHas("prefilled")}constructor(){super(),this.value="",this.disabled=!1,this.submitted=!1,this.dirty=!1,this.touched=!1,this.focused=!1,this.__addedSubValidators=!1,this.__isInitialModelValue=!0,this.__isInitialSerializedValue=!0,this._checkForOutsideClick=this._checkForOutsideClick.bind(this),this.addEventListener("focusin",this._syncFocused),this.addEventListener("focusout",this._onFocusOut),this.addEventListener("dirty-changed",this._syncDirty),this.addEventListener("validate-performed",this.__onChildValidatePerformed),this.defaultValidators=[new hp],this.__descriptionElementsInParentChain=new Set,this.__pendingValues={modelValue:{},serializedValue:{}}}connectedCallback(){super.connectedCallback(),this.setAttribute("role","group"),this.initComplete.then((()=>{this.__isInitialModelValue=!1,this.__isInitialSerializedValue=!1,this.__initInteractionStates()}))}disconnectedCallback(){super.disconnectedCallback(),this.__hasActiveOutsideClickHandling&&(document.removeEventListener("click",this._checkForOutsideClick),this.__hasActiveOutsideClickHandling=!1),this.__descriptionElementsInParentChain.clear()}__initInteractionStates(){this.formElements.forEach((e=>{"function"==typeof e.initInteractionState&&e.initInteractionState()}))}_triggerInitialModelValueChangedEvent(){this.registrationComplete.then((()=>{this._dispatchInitialModelValueChangedEvent()}))}updated(e){super.updated(e),e.has("disabled")&&(this.disabled?this.__requestChildrenToBeDisabled():this.__retractRequestChildrenToBeDisabled()),e.has("focused")&&!0===this.focused&&this.__setupOutsideClickHandling()}__setupOutsideClickHandling(){this.__hasActiveOutsideClickHandling||(document.addEventListener("click",this._checkForOutsideClick),this.__hasActiveOutsideClickHandling=!0)}_checkForOutsideClick(e){!this.contains(e.target)&&(this.touched=!0)}__requestChildrenToBeDisabled(){this.formElements.forEach((e=>{e.makeRequestToBeDisabled&&e.makeRequestToBeDisabled()}))}__retractRequestChildrenToBeDisabled(){this.formElements.forEach((e=>{e.retractRequestToBeDisabled&&e.retractRequestToBeDisabled()}))}_inputGroupTemplate(){return ht`
        <div class="input-group">
          <slot></slot>
        </div>
      `}submitGroup(){this.submitted=!0,this.formElements.forEach((e=>{"function"==typeof e.submitGroup?e.submitGroup():e.submitted=!0}))}resetGroup(){this.formElements.forEach((e=>{"function"==typeof e.resetGroup?e.resetGroup():"function"==typeof e.reset&&e.reset()})),this.resetInteractionState()}clearGroup(){this.formElements.forEach((e=>{"function"==typeof e.clearGroup?e.clearGroup():"function"==typeof e.clear&&e.clear()})),this.resetInteractionState()}resetInteractionState(){this.submitted=!1,this.touched=!1,this.dirty=!1,this.formElements.forEach((e=>{"function"==typeof e.resetInteractionState&&e.resetInteractionState()}))}_getFromAllFormElementsFilter(e,t){return!e.disabled}_getFromAllFormElements(e,t){const n={},r=t||this._getFromAllFormElementsFilter;return this.formElements._keys().forEach((t=>{const s=this.formElements[t];s instanceof xd?n[t]=s.filter((t=>r(t,e))).map((t=>t[e])):r(s,e)&&("function"==typeof s._getFromAllFormElements?n[t]=s._getFromAllFormElements(e):n[t]=s[e])})),n}_setValueForAllFormElements(e,t){this.formElements.forEach((n=>{n[e]=t}))}_setValueMapForAllFormElements(e,t){t&&"object"==typeof t&&Object.keys(t).forEach((n=>{Array.isArray(this.formElements[n])&&this.formElements[n].forEach(((r,s)=>{r[e]=t[n][s]})),this.formElements[n]?this.formElements[n][e]=t[n]:this.__pendingValues[e][n]=t[n]}))}_anyFormElementHas(e){return Object.keys(this.formElements).some((t=>Array.isArray(this.formElements[t])?this.formElements[t].some((t=>!!t[e])):!!this.formElements[t][e]))}_anyFormElementHasFeedbackFor(e){return Object.keys(this.formElements).some((t=>Array.isArray(this.formElements[t])?this.formElements[t].some((t=>Boolean(t.hasFeedbackFor&&t.hasFeedbackFor.includes(e)))):Boolean(this.formElements[t].hasFeedbackFor&&this.formElements[t].hasFeedbackFor.includes(e))))}_everyFormElementHas(e){return Object.keys(this.formElements).every((t=>Array.isArray(this.formElements[t])?this.formElements[t].every((t=>!!t[e])):!!this.formElements[t][e]))}__onChildValidatePerformed(e){e&&this.isRegisteredFormElement(e.target)&&this.validate()}_syncFocused(){this.focused=this._anyFormElementHas("focused")}_onFocusOut(e){const t=this.formElements[this.formElements.length-1];e.target===t&&(this.touched=!0),this.focused=!1}_syncDirty(){this.dirty=this._anyFormElementHas("dirty")}__storeAllDescriptionElementsInParentChain(){let e=this;for(;e;)Ad(e._getAriaDescriptionElements(),{reverse:!0}).forEach((e=>{this.__descriptionElementsInParentChain.add(e)})),e=e._parentFormGroup}__linkParentMessages(e){this.__descriptionElementsInParentChain.forEach((t=>{"function"==typeof e.addToAriaDescribedBy&&e.addToAriaDescribedBy(t,{reorder:!1})}))}__unlinkParentMessages(e){this.__descriptionElementsInParentChain.forEach((t=>{"function"==typeof e.removeFromAriaDescribedBy&&e.removeFromAriaDescribedBy(t)}))}addFormElement(e,t){if(super.addFormElement(e,t),this.disabled&&e.makeRequestToBeDisabled(),this.__descriptionElementsInParentChain.size||this.__storeAllDescriptionElementsInParentChain(),this.__linkParentMessages(e),this.validate({clearCurrentResult:!0}),"function"==typeof e.addToAriaLabelledBy&&this._labelNode&&e.addToAriaLabelledBy(this._labelNode,{reorder:!1}),!e.modelValue){const t=this.__pendingValues;t.modelValue&&t.modelValue[e.name]?e.modelValue=t.modelValue[e.name]:t.serializedValue&&t.serializedValue[e.name]&&(e.serializedValue=t.serializedValue[e.name])}}get _initialModelValue(){return this._getFromAllFormElements("_initialModelValue")}removeFormElement(e){super.removeFormElement(e),this.validate({clearCurrentResult:!0}),"function"==typeof e.removeFromAriaLabelledBy&&this._labelNode&&e.removeFromAriaLabelledBy(this._labelNode,{reorder:!1}),this.__unlinkParentMessages(e)}}));class pp extends(dp(Tt)){constructor(){super(),this._isFormOrFieldset=!0,this._repropagationRole="fieldset"}}const fp=()=>{throw new Error("No form node found. Did you put a <form> element inside your custom-form element?")};class mp extends pp{constructor(){super(),this._submit=this._submit.bind(this),this._reset=this._reset.bind(this)}connectedCallback(){super.connectedCallback(),this.__registerEventsForLionForm(),this.removeAttribute("role")}disconnectedCallback(){super.disconnectedCallback(),this.__teardownEventsForLionForm()}get _formNode(){return this.querySelector("form")}submit(){this._formNode?this._formNode.dispatchEvent(new Event("submit",{cancelable:!0})):fp()}_submit(e){e.preventDefault(),e.stopPropagation(),this.submitGroup(),this.dispatchEvent(new Event("submit",{bubbles:!0}))}reset(){this._formNode?this._formNode.reset():fp()}_reset(e){e.preventDefault(),e.stopPropagation(),this.resetGroup(),this.dispatchEvent(new Event("reset",{bubbles:!0}))}__registerEventsForLionForm(){this._formNode.addEventListener("submit",this._submit),this._formNode.addEventListener("reset",this._reset)}__teardownEventsForLionForm(){this._formNode.removeEventListener("submit",this._submit),this._formNode.removeEventListener("reset",this._reset)}}const gp=window,yp=new WeakMap,bp=Ee((e=>class extends e{static get properties(){return{focused:{type:Boolean,reflect:!0},focusedVisible:{type:Boolean,reflect:!0,attribute:"focused-visible"}}}constructor(){super(),this.focused=!1,this.focusedVisible=!1}connectedCallback(){super.connectedCallback(),this.__registerEventsForFocusMixin()}disconnectedCallback(){super.disconnectedCallback(),this.__teardownEventsForFocusMixin()}focus(){this._focusableNode?.focus()}blur(){this._focusableNode?.blur()}get _focusableNode(){return this._inputNode||document.createElement("input")}__onFocus(){if(this.focused=!0,"function"==typeof gp.applyFocusVisiblePolyfill)this.focusedVisible=this._focusableNode.hasAttribute("data-focus-visible-added");else try{this.focusedVisible=this._focusableNode.matches(":focus-visible")}catch(e){this.focusedVisible=!1}}__onBlur(){this.focused=!1,this.focusedVisible=!1}__registerEventsForFocusMixin(){var e;e=this.getRootNode(),gp.applyFocusVisiblePolyfill&&!yp.has(e)&&(gp.applyFocusVisiblePolyfill(e),yp.set(e,void 0)),this.__redispatchFocus=e=>{e.stopPropagation(),this.dispatchEvent(new Event("focus"))},this._focusableNode.addEventListener("focus",this.__redispatchFocus),this.__redispatchBlur=e=>{e.stopPropagation(),this.dispatchEvent(new Event("blur"))},this._focusableNode.addEventListener("blur",this.__redispatchBlur),this.__redispatchFocusin=e=>{e.stopPropagation(),this.__onFocus(),this.dispatchEvent(new Event("focusin",{bubbles:!0,composed:!0}))},this._focusableNode.addEventListener("focusin",this.__redispatchFocusin),this.__redispatchFocusout=e=>{e.stopPropagation(),this.__onBlur(),this.dispatchEvent(new Event("focusout",{bubbles:!0,composed:!0}))},this._focusableNode.addEventListener("focusout",this.__redispatchFocusout)}__teardownEventsForFocusMixin(){this._focusableNode.removeEventListener("focus",this.__redispatchFocus),this._focusableNode.removeEventListener("blur",this.__redispatchBlur),this._focusableNode.removeEventListener("focusin",this.__redispatchFocusin),this._focusableNode.removeEventListener("focusout",this.__redispatchFocusout)}})),wp=Ee((e=>class extends(up(kd(e))){static get properties(){return{formattedValue:{attribute:!1},serializedValue:{attribute:!1},formatOptions:{attribute:!1}}}requestUpdate(e,t){super.requestUpdate(e,t),"modelValue"===e&&this.modelValue!==t&&this._onModelValueChanged({modelValue:this.modelValue},{modelValue:t}),"serializedValue"===e&&this.serializedValue!==t&&this._calculateValues({source:"serialized"}),"formattedValue"===e&&this.formattedValue!==t&&this._calculateValues({source:"formatted"})}get value(){return this._inputNode&&this._inputNode.value||this.__value||""}set value(e){this._inputNode?(this._inputNode.value=e,this.__value=void 0):this.__value=e}preprocessor(e,t){}parser(e,t){return e}formatter(e,t){return e}serializer(e){return void 0!==e?e:""}deserializer(e){return void 0===e?"":e}_calculateValues({source:e}={source:null}){this.__preventRecursiveTrigger||(this.__preventRecursiveTrigger=!0,"model"!==e&&("serialized"===e?this.modelValue=this.deserializer(this.serializedValue):"formatted"===e&&(this.modelValue=this._callParser())),"formatted"!==e&&(this.formattedValue=this._callFormatter()),"serialized"!==e&&(this.serializedValue=this.serializer(this.modelValue)),this._reflectBackFormattedValueToUser(),this.__preventRecursiveTrigger=!1,this.__prevViewValue=this.value)}_callParser(e=this.formattedValue){if(""===e)return"";if("string"!=typeof e)return;const t=this.parser(e,this.formatOptions);return void 0!==t?t:new _d(e)}_callFormatter(){return this._isHandlingUserInput&&this.hasFeedbackFor?.length&&this.hasFeedbackFor.includes("error")&&this._inputNode?this._inputNode?this.value:void 0:this.modelValue instanceof _d?this.modelValue.viewValue:this.formatter(this.modelValue,this.formatOptions)}_onModelValueChanged(...e){this._calculateValues({source:"model"}),this._dispatchModelValueChangedEvent(...e)}_dispatchModelValueChangedEvent(...e){this.dispatchEvent(new CustomEvent("model-value-changed",{bubbles:!0,detail:{formPath:[this],isTriggeredByUser:Boolean(this._isHandlingUserInput)}}))}_syncValueUpwards(){this.__isHandlingComposition||this.__handlePreprocessor();const e=this.formattedValue;this.modelValue=this._callParser(this.value),e===this.formattedValue&&this.__prevViewValue!==this.value&&this._calculateValues()}__handlePreprocessor(){const e=this.value;let t=this.value.length;this._inputNode&&"selectionStart"in this._inputNode&&"range"!==this._inputNode?.type&&(t=this._inputNode.selectionStart);const n=this.preprocessor(this.value,{...this.formatOptions,currentCaretIndex:t,prevViewValue:this.__prevViewValue});if(this.__prevViewValue=e,void 0!==n)if("string"==typeof n)this.value=n;else if("object"==typeof n){const{viewValue:e,caretIndex:t}=n;this.value=e,t&&this._inputNode&&"selectionStart"in this._inputNode&&(this._inputNode.selectionStart=t,this._inputNode.selectionEnd=t)}}_reflectBackFormattedValueToUser(){this._reflectBackOn()&&(this.value=void 0!==this.formattedValue?this.formattedValue:"")}_reflectBackOn(){return!this._isHandlingUserInput}_proxyInputEvent(){this.dispatchEvent(new Event("user-input-changed",{bubbles:!0}))}_onUserInputChanged(){this._isHandlingUserInput=!0,this._syncValueUpwards(),this._isHandlingUserInput=!1}__onCompositionEvent({type:e}){"compositionstart"===e?this.__isHandlingComposition=!0:"compositionend"===e&&(this.__isHandlingComposition=!1,this._syncValueUpwards())}constructor(){super(),this.formatOn="change",this.formatOptions={},this.formattedValue=void 0,this.serializedValue=void 0,this._isPasting=!1,this._isHandlingUserInput=!1,this.__prevViewValue="",this.__onCompositionEvent=this.__onCompositionEvent.bind(this),this.addEventListener("user-input-changed",this._onUserInputChanged),this.addEventListener("paste",this.__onPaste),this._reflectBackFormattedValueToUser=this._reflectBackFormattedValueToUser.bind(this),this._reflectBackFormattedValueDebounced=()=>{setTimeout(this._reflectBackFormattedValueToUser)}}__onPaste(){this._isPasting=!0,this.formatOptions.mode="pasted",setTimeout((()=>{this._isPasting=!1,this.formatOptions.mode="auto"}))}connectedCallback(){super.connectedCallback(),void 0===this.modelValue&&this._syncValueUpwards(),this.__prevViewValue=this.value,this._reflectBackFormattedValueToUser(),this._inputNode&&(this._inputNode.addEventListener(this.formatOn,this._reflectBackFormattedValueDebounced),this._inputNode.addEventListener("input",this._proxyInputEvent),this._inputNode.addEventListener("compositionstart",this.__onCompositionEvent),this._inputNode.addEventListener("compositionend",this.__onCompositionEvent))}disconnectedCallback(){super.disconnectedCallback(),this._inputNode&&(this._inputNode.removeEventListener("input",this._proxyInputEvent),this._inputNode.removeEventListener(this.formatOn,this._reflectBackFormattedValueDebounced),this._inputNode.removeEventListener("compositionstart",this.__onCompositionEvent),this._inputNode.removeEventListener("compositionend",this.__onCompositionEvent))}})),vp=Ee((e=>class extends(wp(bp(kd(e)))){static get properties(){return{autocomplete:{type:String,reflect:!0}}}constructor(){super(),this.autocomplete=void 0}get _inputNode(){return super._inputNode}get selectionStart(){const e=this._inputNode;return e&&e.selectionStart?e.selectionStart:0}set selectionStart(e){const t=this._inputNode;t&&t.selectionStart&&(t.selectionStart=e)}get selectionEnd(){const e=this._inputNode;return e&&e.selectionEnd?e.selectionEnd:0}set selectionEnd(e){const t=this._inputNode;t&&t.selectionEnd&&(t.selectionEnd=e)}get value(){return this._inputNode&&this._inputNode.value||this.__value||""}set value(e){this._inputNode?(this._inputNode.value!==e&&this._setValueAndPreserveCaret(e),this.__value=void 0):this.__value=e}_setValueAndPreserveCaret(e){if(this.focused)try{if(!(this._inputNode instanceof HTMLSelectElement)){const t=this._inputNode.selectionStart;this._inputNode.value=e,this._inputNode.selectionStart=t,this._inputNode.selectionEnd=t}}catch(t){this._inputNode.value=e}else this._inputNode.value=e}_reflectBackFormattedValueToUser(){if(super._reflectBackFormattedValueToUser(),this._reflectBackOn()&&this.focused)try{this._inputNode.selectionStart=this._inputNode.value.length}catch(e){}}get _focusableNode(){return this._inputNode}})),Ap=Ee((e=>class extends(kd(e)){static get properties(){return{touched:{type:Boolean,reflect:!0},dirty:{type:Boolean,reflect:!0},filled:{type:Boolean,reflect:!0},prefilled:{attribute:!1},submitted:{attribute:!1}}}requestUpdate(e,t){super.requestUpdate(e,t),"touched"===e&&this.touched!==t&&this._onTouchedChanged(),"modelValue"===e&&(this.filled=!this._isEmpty()),"dirty"===e&&this.dirty!==t&&this._onDirtyChanged()}constructor(){super(),this.touched=!1,this.dirty=!1,this.prefilled=!1,this.filled=!1,this._leaveEvent="blur",this._valueChangedEvent="model-value-changed",this._iStateOnLeave=this._iStateOnLeave.bind(this),this._iStateOnValueChange=this._iStateOnValueChange.bind(this)}connectedCallback(){super.connectedCallback(),this.addEventListener(this._leaveEvent,this._iStateOnLeave),this.addEventListener(this._valueChangedEvent,this._iStateOnValueChange),this.initInteractionState()}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener(this._leaveEvent,this._iStateOnLeave),this.removeEventListener(this._valueChangedEvent,this._iStateOnValueChange)}initInteractionState(){this.dirty=!1,this.prefilled=!this._isEmpty()}_iStateOnLeave(){this.touched=!0,this.prefilled=!this._isEmpty()}_iStateOnValueChange(){this.dirty=!0}resetInteractionState(){this.touched=!1,this.submitted=!1,this.dirty=!1,this.prefilled=!this._isEmpty()}_onTouchedChanged(){this.dispatchEvent(new Event("touched-changed",{bubbles:!0,composed:!0}))}_onDirtyChanged(){this.dispatchEvent(new Event("dirty-changed",{bubbles:!0,composed:!0}))}_showFeedbackConditionFor(e,t){return t.touched&&t.dirty||t.prefilled||t.submitted}get _feedbackConditionMeta(){return{...super._feedbackConditionMeta,submitted:this.submitted,touched:this.touched,dirty:this.dirty,filled:this.filled,prefilled:this.prefilled}}}));class _p extends(kd(Ap(bp(wp(up(wd(Tt))))))){firstUpdated(e){super.firstUpdated(e),this._initialModelValue=this.modelValue}connectedCallback(){super.connectedCallback(),this._onChange=this._onChange.bind(this),this._inputNode.addEventListener("change",this._onChange),this.classList.add("form-field")}disconnectedCallback(){super.disconnectedCallback(),this._inputNode.removeEventListener("change",this._onChange)}resetInteractionState(){super.resetInteractionState(),this.submitted=!1}reset(){this.modelValue=this._initialModelValue,this.resetInteractionState()}clear(){this.modelValue=""}_onChange(){this.dispatchEvent(new Event("user-input-changed",{bubbles:!0}))}get _feedbackConditionMeta(){return{...super._feedbackConditionMeta,focused:this.focused}}get _focusableNode(){return this._inputNode}}class Ep extends(vp(_p)){static get properties(){return{readOnly:{type:Boolean,attribute:"readonly",reflect:!0},type:{type:String,reflect:!0},placeholder:{type:String,reflect:!0}}}get slots(){return{...super.slots,input:()=>{const e=document.createElement("input"),t=this.getAttribute("value");return t&&e.setAttribute("value",t),e}}}get _inputNode(){return super._inputNode}constructor(){super(),this.readOnly=!1,this.type="text",this.placeholder=""}requestUpdate(e,t){super.requestUpdate(e,t),"readOnly"===e&&this.__delegateReadOnly()}firstUpdated(e){super.firstUpdated(e),this.__delegateReadOnly()}updated(e){super.updated(e),e.has("type")&&(this._inputNode.type=this.type),e.has("placeholder")&&(this._inputNode.placeholder=this.placeholder),e.has("disabled")&&(this._inputNode.disabled=this.disabled,this.validate()),e.has("name")&&(this._inputNode.name=this.name),e.has("autocomplete")&&(this._inputNode.autocomplete=this.autocomplete)}__delegateReadOnly(){this._inputNode&&(this._inputNode.readOnly=this.readOnly)}}const kp=Ee((e=>class extends e{constructor(){super(),this.registrationTarget=void 0,this.__redispatchEventForFormRegistrarPortalMixin=this.__redispatchEventForFormRegistrarPortalMixin.bind(this),this.addEventListener("form-element-register",this.__redispatchEventForFormRegistrarPortalMixin)}__redispatchEventForFormRegistrarPortalMixin(e){if(e.stopPropagation(),!this.registrationTarget)throw new Error("A FormRegistrarPortal element requires a .registrationTarget");this.registrationTarget.dispatchEvent(new CustomEvent("form-element-register",{detail:{element:e.detail.element},bubbles:!0}))}}));class xp extends(kp(Tt)){static get properties(){return{role:{type:String,reflect:!0},tabIndex:{type:Number,reflect:!0,attribute:"tabindex"}}}constructor(){super(),this.role="listbox",this.tabIndex=0}createRenderRoot(){return this}}const Cp=(e,t={})=>e.value!==t.value||e.checked!==t.checked,Np=Ee((e=>class extends(wp(e)){static get properties(){return{checked:{type:Boolean,reflect:!0},disabled:{type:Boolean,reflect:!0},modelValue:{type:Object,hasChanged:Cp},choiceValue:{type:Object}}}get choiceValue(){return this.modelValue.value}set choiceValue(e){this.requestUpdate("choiceValue",this.choiceValue),this.modelValue.value!==e&&(this.modelValue={value:e,checked:this.modelValue.checked})}requestUpdate(e,t){super.requestUpdate(e,t),"modelValue"===e?this.modelValue.checked!==this.checked&&this.__syncModelCheckedToChecked(this.modelValue.checked):"checked"===e&&this.modelValue.checked!==this.checked&&this.__syncCheckedToModel(this.checked)}firstUpdated(e){super.firstUpdated(e),e.has("checked")&&this.__syncCheckedToInputElement()}updated(e){super.updated(e),e.has("modelValue")&&this.__syncCheckedToInputElement(),e.has("name")&&this._parentFormGroup&&this._parentFormGroup.name!==this.name&&this._syncNameToParentFormGroup()}constructor(){super(),this.modelValue={value:"",checked:!1},this.disabled=!1,this._preventDuplicateLabelClick=this._preventDuplicateLabelClick.bind(this),this._toggleChecked=this._toggleChecked.bind(this)}static get styles(){return[...super.styles||[],Be`
          :host {
            display: flex;
            flex-wrap: wrap;
          }

          :host([hidden]) {
            display: none;
          }

          .choice-field__graphic-container {
            display: none;
          }
          .choice-field__help-text {
            display: block;
            flex-basis: 100%;
          }
        `]}render(){return ht`
        <slot name="input"></slot>
        <div class="choice-field__graphic-container">${this._choiceGraphicTemplate()}</div>
        <div class="choice-field__label">
          <slot name="label"></slot>
        </div>
        <small class="choice-field__help-text">
          <slot name="help-text"></slot>
        </small>
        ${this._afterTemplate()}
      `}_choiceGraphicTemplate(){return pt}_afterTemplate(){return pt}connectedCallback(){super.connectedCallback(),this._labelNode&&this._labelNode.addEventListener("click",this._preventDuplicateLabelClick),this.addEventListener("user-input-changed",this._toggleChecked)}disconnectedCallback(){super.disconnectedCallback(),this._labelNode&&this._labelNode.removeEventListener("click",this._preventDuplicateLabelClick),this.removeEventListener("user-input-changed",this._toggleChecked)}_preventDuplicateLabelClick(e){const t=e=>{e.stopImmediatePropagation(),this._inputNode.removeEventListener("click",t)};this._inputNode.addEventListener("click",t)}_toggleChecked(e){this.disabled||(this._isHandlingUserInput=!0,this.checked=!this.checked,this._isHandlingUserInput=!1)}_syncNameToParentFormGroup(){this._parentFormGroup.tagName.includes(this.tagName)&&(this.name=this._parentFormGroup?.name||"")}__syncModelCheckedToChecked(e){this.checked=e}__syncCheckedToModel(e){this.modelValue={value:this.choiceValue,checked:e}}__syncCheckedToInputElement(){this._inputNode&&(this._inputNode.checked=this.checked)}_proxyInputEvent(){}_onModelValueChanged({modelValue:e},t){let n;t&&t.modelValue&&(n=t.modelValue),this.constructor.elementProperties.get("modelValue").hasChanged(e,n)&&super._onModelValueChanged({modelValue:e})}parser(){return this.modelValue}formatter(e){return e&&void 0!==e.value?e.value:e}clear(){this.checked=!1}_isEmpty(){return!this.checked}_syncValueUpwards(){}}));class Pp extends(ke(Np(Ed(wd(Tt))))){static get properties(){return{active:{type:Boolean,reflect:!0}}}static get styles(){return[Be`
        :host {
          display: block;
          background-color: white;
          padding: 4px;
          cursor: default;
        }

        :host([hidden]) {
          display: none;
        }

        :host(:hover) {
          background-color: #eee;
        }
        :host([active]) {
          background-color: #ddd;
        }

        :host([checked]) {
          background-color: #bde4ff;
        }

        :host([disabled]) {
          color: #adadad;
        }
      `]}get slots(){return{}}constructor(){super(),this.active=!1,this.__onClick=this.__onClick.bind(this),this.__registerEventListeners()}requestUpdate(e,t){super.requestUpdate(e,t),"active"===e&&this.active!==t&&this.dispatchEvent(new Event("active-changed",{bubbles:!0}))}updated(e){super.updated(e),e.has("checked")&&this.setAttribute("aria-selected",`${this.checked}`),e.has("disabled")&&this.setAttribute("aria-disabled",`${this.disabled}`)}render(){return ht`
      <div class="choice-field__label">
        <slot></slot>
      </div>
    `}connectedCallback(){super.connectedCallback(),this.setAttribute("role","option")}__registerEventListeners(){this.addEventListener("click",this.__onClick)}__unRegisterEventListeners(){this.removeEventListener("click",this.__onClick)}__onClick(){if(this.disabled)return;const e=this._parentFormGroup;this._isHandlingUserInput=!0,e&&e.multipleChoice?(this.checked=!this.checked,this.active=!this.active):(this.checked=!0,this.active=!0),this._isHandlingUserInput=!1}}class Rp extends _p{static get properties(){return{autocomplete:{type:String}}}constructor(){super(),this.autocomplete=void 0}get _inputNode(){return Array.from(this.children).find((e=>"input"===e.slot))}}class Op extends Rp{connectedCallback(){super.connectedCallback(),this._inputNode.addEventListener("change",this._proxyChangeEvent)}updated(e){super.updated(e),e.has("disabled")&&(this._inputNode.disabled=this.disabled,this.validate()),e.has("name")&&(this._inputNode.name=this.name),e.has("autocomplete")&&(this._inputNode.autocomplete=this.autocomplete)}disconnectedCallback(){super.disconnectedCallback(),this._inputNode.removeEventListener("change",this._proxyChangeEvent)}formatter(e){const t=Array.from(this._inputNode.options).find((t=>t.value===e));return t?t.text:""}_reflectBackFormattedValueToUser(){this._reflectBackOn()&&(this.value=void 0!==this.modelValue?this.modelValue:"")}_proxyChangeEvent(){this.dispatchEvent(new CustomEvent("user-input-changed",{bubbles:!0,composed:!0}))}}const Bp=e=>e==e&&"number"==typeof e;class Sp extends op{static get validatorName(){return"IsNumber"}execute(e){let t=!1;return Bp(e)||(t=!0),t}}class Tp extends op{static get validatorName(){return"MinNumber"}execute(e,t=this.param){let n=!1;return(!Bp(e)||e<t)&&(n=!0),n}}class Ip extends op{static get validatorName(){return"MaxNumber"}execute(e,t=this.param){let n=!1;return(!Bp(e)||e>t)&&(n=!0),n}}class Fp extends op{static get validatorName(){return"MinMaxNumber"}execute(e,{min:t=0,max:n=0}=this.param){let r=!1;return(!Bp(e)||e<t||e>n)&&(r=!0),r}}class Lp extends Ep{static get styles(){return[...super.styles,Be`
        .input-group__container > .input-group__input ::slotted(.form-control) {
          text-align: center;
        }
      `]}static get properties(){return{min:{type:Number,reflect:!0},max:{type:Number,reflect:!0},step:{type:Number,reflect:!0}}}get currentValue(){return parseFloat(this.value)||0}get _inputNode(){return super._inputNode}constructor(){super(),this.parser=e=>parseFloat(e),this.min=1/0,this.max=1/0,this.step=1,this.values={max:this.max,min:this.min,step:this.step},this.__increment=this.__increment.bind(this),this.__decrement=this.__decrement.bind(this),this.__boundOnLeaveButton=this._onLeaveButton.bind(this)}connectedCallback(){super.connectedCallback(),this.values={max:this.max,min:this.min,step:this.step},this.role="spinbutton",this.addEventListener("keydown",this.__keyDownHandler),this._inputNode.setAttribute("inputmode","decimal"),this._inputNode.setAttribute("autocomplete","off"),this.setAttribute("aria-label",this.label),this.step=this.hasAttribute("step")?this.step:1,this.__setAriaLabelsAndValidator(),this.__toggleSpinnerButtonsState()}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("keydown",this.__keyDownHandler)}updated(e){super.updated(e),e.has("modelValue")&&this.__toggleSpinnerButtonsState(),e.has("min")&&(this._inputNode.min=`${this.min}`,this.values.min=this.min,this.__toggleSpinnerButtonsState()),e.has("max")&&(this._inputNode.max=`${this.max}`,this.values.max=this.max,this.__toggleSpinnerButtonsState()),e.has("step")&&(this._inputNode.step=`${this.step}`,this.values.step=this.step)}get slots(){return{...super.slots,prefix:()=>this.__getDecrementButtonNode(),suffix:()=>this.__getIncrementButtonNode()}}__setAriaLabelsAndValidator(){const e={"aria-valuemax":this.values.max,"aria-valuemin":this.values.min},t=Object.entries(e).map((([e,t])=>t!==1/0?(this.setAttribute(e,`${t}`),"aria-valuemax"===e?new Ip(t):new Tp(t)):null)).filter((e=>null!==e)),n=[new Sp,...t];this.defaultValidators.push(...n)}__keyDownHandler(e){"ArrowUp"===e.key&&this.__increment(),"ArrowDown"===e.key&&this.__decrement()}__toggleSpinnerButtonsState(){const{min:e,max:t}=this.values,n=this.__getSlot("prefix"),r=this.__getSlot("suffix"),s=this.currentValue>=t&&t!==1/0;n[this.currentValue<=e&&e!==1/0?"setAttribute":"removeAttribute"]("disabled","true"),r[s?"setAttribute":"removeAttribute"]("disabled","true"),this.setAttribute("aria-valuenow",`${this.currentValue}`)}__getSlot(e){return Array.from(this.children).find((t=>t.slot===e))||{}}__increment(){const{step:e,max:t}=this.values,n=this.currentValue+e;(n<=t||t===1/0)&&(this.value=`${n}`,this.__toggleSpinnerButtonsState(),this._proxyInputEvent())}__decrement(){const{step:e,min:t}=this.values,n=this.currentValue-e;(n>=t||t===1/0)&&(this.value=`${n}`,this.__toggleSpinnerButtonsState(),this._proxyInputEvent())}__getIncrementButtonNode(){const e=document.createElement("div");return Ot(this._incrementorTemplate(),e,{scopeName:this.localName,eventContext:this}),e.firstElementChild}__getDecrementButtonNode(){const e=document.createElement("div");return Ot(this._decrementorTemplate(),e,{scopeName:this.localName,eventContext:this}),e.firstElementChild}_onChange(){super._onChange(),this.__toggleSpinnerButtonsState()}_decrementorSignTemplate(){return"－"}_incrementorSignTemplate(){return"＋"}_decrementorTemplate(){return ht`
      <button
        ?disabled=${this.disabled||this.readOnly}
        @click=${this.__decrement}
        @blur=${this.__boundOnLeaveButton}
        tabindex="-1"
        type="button"
        aria-label="decrement"
      >
        ${this._decrementorSignTemplate()}
      </button>
    `}_incrementorTemplate(){return ht`
      <button
        ?disabled=${this.disabled||this.readOnly}
        @click=${this.__increment}
        @blur=${this.__boundOnLeaveButton}
        tabindex="-1"
        type="button"
        aria-label="increment"
      >
        ${this._incrementorSignTemplate()}
      </button>
    `}_onLeaveButton(){this.dispatchEvent(new Event(this._leaveEvent))}}class Dp{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,n){this._$Ct=e,this._$AM=t,this._$Ci=n}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}const Mp=(e,t)=>{var n,r;const s=e._$AN;if(void 0===s)return!1;for(const e of s)null===(r=(n=e)._$AO)||void 0===r||r.call(n,t,!1),Mp(e,t);return!0},Up=e=>{let t,n;do{if(void 0===(t=e._$AM))break;n=t._$AN,n.delete(e),e=t}while(0===(null==n?void 0:n.size))},$p=e=>{for(let t;t=e._$AM;e=t){let n=t._$AN;if(void 0===n)t._$AN=n=new Set;else if(n.has(e))break;n.add(e),Hp(t)}};function jp(e){void 0!==this._$AN?(Up(this),this._$AM=e,$p(this)):this._$AM=e}function Vp(e,t=!1,n=0){const r=this._$AH,s=this._$AN;if(void 0!==s&&0!==s.size)if(t)if(Array.isArray(r))for(let e=n;e<r.length;e++)Mp(r[e],!1),Up(r[e]);else null!=r&&(Mp(r,!1),Up(r));else Mp(this,e)}const Hp=e=>{var t,n,r,s;2==e.type&&(null!==(t=(r=e)._$AP)&&void 0!==t||(r._$AP=Vp),null!==(n=(s=e)._$AQ)&&void 0!==n||(s._$AQ=jp))};class Gp extends Dp{constructor(){super(...arguments),this._$AN=void 0}_$AT(e,t,n){super._$AT(e,t,n),$p(this),this.isConnected=e._$AU}_$AO(e,t=!0){var n,r;e!==this.isConnected&&(this.isConnected=e,e?null===(n=this.reconnected)||void 0===n||n.call(this):null===(r=this.disconnected)||void 0===r||r.call(this)),t&&(Mp(this,e),Up(this))}setValue(e){if((e=>void 0===this._$Ct.strings)())this._$Ct._$AI(e,this);else{const t=[...this._$Ct._$AH];t[this._$Ci]=e,this._$Ct._$AI(t,this,0)}}disconnected(){}reconnected(){}}class zp{constructor(e){this.G=e}disconnect(){this.G=void 0}reconnect(e){this.G=e}deref(){return this.G}}class qp{constructor(){this.Y=void 0,this.Z=void 0}get(){return this.Y}pause(){var e;null!==(e=this.Y)&&void 0!==e||(this.Y=new Promise((e=>this.Z=e)))}resume(){var e;null===(e=this.Z)||void 0===e||e.call(this),this.Y=this.Z=void 0}}const Qp=e=>!(e=>null===e||"object"!=typeof e&&"function"!=typeof e)(e)&&"function"==typeof e.then,Jp=1073741823,Kp=(Yp=class extends Gp{constructor(){super(...arguments),this._$C_t=Jp,this._$Cwt=[],this._$Cq=new zp(this),this._$CK=new qp}render(...e){var t;return null!==(t=e.find((e=>!Qp(e))))&&void 0!==t?t:dt}update(e,t){const n=this._$Cwt;let r=n.length;this._$Cwt=t;const s=this._$Cq,i=this._$CK;this.isConnected||this.disconnected();for(let e=0;e<t.length&&!(e>this._$C_t);e++){const o=t[e];if(!Qp(o))return this._$C_t=e,o;e<r&&o===n[e]||(this._$C_t=Jp,r=0,Promise.resolve(o).then((async e=>{for(;i.get();)await i.get();const t=s.deref();if(void 0!==t){const n=t._$Cwt.indexOf(o);n>-1&&n<t._$C_t&&(t._$C_t=n,t.setValue(e))}})))}return dt}disconnected(){this._$Cq.disconnect(),this._$CK.pause()}reconnected(){this._$Cq.reconnect(this),this._$CK.resume()}},(...e)=>({_$litDirective$:Yp,values:e})),Wp=Ee((e=>class extends e{static get localizeNamespaces(){return[]}static get waitForLocalizeNamespaces(){return!0}constructor(){super(),this.__boundLocalizeOnLocaleChanged=(...e)=>{const t=Array.from(e)[0];this.__localizeOnLocaleChanged(t)},this.__boundLocalizeOnLocaleChanging=()=>{this.__localizeOnLocaleChanging()},this.__localizeStartLoadingNamespaces(),this.localizeNamespacesLoaded&&this.localizeNamespacesLoaded.then((()=>{this.__localizeMessageSync=!0}))}async performUpdate(){Object.getPrototypeOf(this).constructor.waitForLocalizeNamespaces&&await this.localizeNamespacesLoaded,super.performUpdate()}connectedCallback(){super.connectedCallback(),this.localizeNamespacesLoaded&&this.localizeNamespacesLoaded.then((()=>this.onLocaleReady())),np.addEventListener("__localeChanging",this.__boundLocalizeOnLocaleChanging),np.addEventListener("localeChanged",this.__boundLocalizeOnLocaleChanged)}disconnectedCallback(){super.disconnectedCallback(),np.removeEventListener("__localeChanging",this.__boundLocalizeOnLocaleChanging),np.removeEventListener("localeChanged",this.__boundLocalizeOnLocaleChanged)}msgLit(e,t,n){return this.__localizeMessageSync?np.msg(e,t,n):this.localizeNamespacesLoaded?Kp(this.localizeNamespacesLoaded.then((()=>np.msg(e,t,n))),pt):""}__getUniqueNamespaces(){const e=[],t=new Set;return Object.getPrototypeOf(this).constructor.localizeNamespaces.forEach(t.add.bind(t)),t.forEach((t=>{e.push(t)})),e}__localizeStartLoadingNamespaces(){this.localizeNamespacesLoaded=np.loadNamespaces(this.__getUniqueNamespaces())}__localizeOnLocaleChanging(){this.__localizeStartLoadingNamespaces()}__localizeOnLocaleChanged(e){this.onLocaleChanged(e.detail.newLocale,e.detail.oldLocale)}onLocaleReady(){this.onLocaleUpdated()}onLocaleChanged(e,t){this.onLocaleUpdated(),this.requestUpdate()}onLocaleUpdated(){}}));var Yp;function Zp(e){return e||(np&&np.locale?np.locale:"en-GB")}function Xp(e,t){if(t&&t.decimalSeparator)return t.decimalSeparator;const n=Zp(e);return Intl.NumberFormat(n,{style:"decimal",minimumFractionDigits:1}).format(1)[1]}function ef(e){return 160===e.charCodeAt(0)||8239===e.charCodeAt(0)?" ":e}function tf(e,t){if(t&&t.groupSeparator)return t.groupSeparator;const n=Zp(e);return ef(Intl.NumberFormat(n,{style:"decimal",minimumFractionDigits:0}).format(1e4)[2])}function nf(e){if("currency"===e[0].type){const t=e.splice(0,1),n=e.splice(0,1);e.push(n[0]),e.push(t[0])}else if("minusSign"===e[0].type&&"currency"===e[1].type){const t=e.splice(1,1),n=e.splice(1,1);e.push(n[0]),e.push(t[0])}return e}const rf={EUR:"€",USD:"$",JPY:"¥"};function sf(e,t={}){let n="string"==typeof e?parseFloat(e):e;const r=Zp(t&&t.locale);if(Number.isNaN(n))return t&&t.returnIfNaN||np.formatNumberOptions.returnIfNaN;t&&t.roundMode&&(n=function(e,t){switch(t){case"floor":return Math.floor(e);case"ceiling":return Math.ceil(e);case"round":return Math.round(e);default:throw new Error("roundMode can only be round|floor|ceiling")}}(e,t.roundMode));let s=[];const i=Intl.NumberFormat(r,t).format(n),{decimalSeparator:o,groupSeparator:a}=function(e,t,n){const r=/[0-9](?<sep>[\s,. _ '])[0-9]/g,s=[];let i;for(;null!==(i=r.exec(t));)i.groups&&i.groups.sep&&s.push(i.groups?.sep);let o=null,a=null;return s&&(1===s.length?t.split(s[0])[1].replace(/[^0-9]/g,"").length>=3&&(e>=1e3||e<=-1e3||n?.minimumIntegerDigits&&n.minimumIntegerDigits>3)?[o]=s:[a]=s:s.every((e=>e===s[0]))?[o]=s:([o]=s,a=s[s.length-1])),{groupSeparator:o,decimalSeparator:a}}(n,i,t),l=/[.,\s0-9 _ ]/,c=/[-]/,u=/[0-9]/,h=/[\s]/;let d="",p="",f=!1,m=!1;const g=tf(r,t),y=Xp(r,t);if(o&&a&&g===y)throw new Error(`Decimal and group (thousand) separator are the same character: '${g}'.\nThis can happen due to both props being specified as the same, or one of the props being the same as the other one from default locale.\nPlease specify .groupSeparator / .decimalSeparator on the formatOptions object to be different.`);for(let e=0;e<i.length;e+=1){if(c.test(i[e])&&s.push({type:"minusSign",value:"−"}),u.test(i[e])&&(p+=i[e]),l.test(i[e])||c.test(i[e])||(d+=i[e]),l.test(i[e])&&d&&(s.push({type:"currency",value:d}),d=""),i[e]===a&&i[e-1].match(u)&&i[e+1].match(u)&&(p&&(s.push({type:"integer",value:p}),p=""),s.push({type:"group",value:g}),m=!0),i[e]===o&&(p&&(s.push({type:"integer",value:p}),p=""),s.push({type:"decimal",value:y}),f=!0),h.test(i[e])){const t=!!p;p&&!f?(s.push({type:"integer",value:p}),p=""):p&&(s.push({type:"fraction",value:p}),p=""),ef(i[e])===g&&t&&!f?s.push({type:"group",value:i[e]}):m||s.push({type:"literal",value:i[e]})}m=!1,!0===f&&e===i.length-1?p&&s.push({type:"fraction",value:p}):e===i.length-1&&p&&s.push({type:"integer",value:p}),e===i.length-1&&d&&(s.push({type:"currency",value:d}),d="")}return s=function(e,t={},n){let r=function(e){const t=[];return e.forEach((e=>{t.push({type:e.type,value:ef(e.value)})})),t}(e);return"currency"===t.style&&("code"===t.currencyDisplay&&"nl"===n.slice(0,2)&&(r=nf(r)),"bg-BG"===n&&(r=function(e,t){let n,r,s=[];for(let t=0;t<e.length;t+=1)"integer"===e[t].type&&(n=e.splice(0,t),r=e.splice(0,1));if(void 0!==r){const i=r[0].value.length,o=i%3,a=Math.floor(i/3),l=[];let c=0,u="",h=!1;for(let e=0;e<i;e+=1)u+=r[0].value[e],u.length===o&&!1===h?(l.push({type:"integer",value:u}),i>3&&l.push({type:"group",value:t}),u="",h=!0):3===u.length&&e<i-1&&(c+=1,l.push({type:"integer",value:u}),c!==a&&l.push({type:"group",value:t}),u="");l.push({type:"integer",value:u}),n&&(s=n.concat(l,e))}return s}(r,tf()),r=function(e){return e.map((e=>("group"===e.type&&"0"===e.value&&(e.value=" "),e)))}(r)),"en-GB"!==n&&"en-US"!==n&&"en-AU"!==n&&"en-PH"!==n||(r=function(e,{currency:t,currencyDisplay:n}={}){const r=e.length,s={type:"literal",value:" "};return r>1&&t&&"code"===n&&("currency"===e[0].type&&"literal"!==e[1].type?e.splice(1,0,s):"minusSign"===e[0].type&&"currency"===e[1].type&&"literal"!==e[2].type?e.splice(2,0,s):"currency"===e[r-1].type&&"literal"!==e[r-2].type&&e.splice(r-1,0,s)),e}(r,t)),"fr-FR"!==n&&"fr-BE"!==n||(r=function(e,{currency:t,currencyDisplay:n}={}){const r=e,s=r.length;return s>1&&"JPY"===t&&"symbol"===n&&(r[s-1].value="¥"),r}(r,t)),"tr-TR"===n&&(r=function(e,{currency:t,currencyDisplay:n}={}){const r=e;return"TRY"===t&&"code"===n&&r.map((e=>{const t=e;return"currency"===e.type&&(t.value="TL"),t})),r}(r,t),"code"===t.currencyDisplay&&(r=nf(r))),"en-AU"===n&&(r=function(e,{currency:t,currencyDisplay:n}={}){const r=e;return e.length>1&&"symbol"===n&&t&&(Object.keys(rf).includes(t)&&(r[0].value=rf[t]),r[1].value=""),r}(r,t))),r}(s,t,r),s}function of(e="EUR"){const t=sf(123,{style:"currency",currency:e}),[n]=t.filter((e=>"fraction"===e.type));return n?n.value.length:0}function af(e,t){const n={currency:"EUR",...t};return void 0===n.minimumFractionDigits&&(n.minimumFractionDigits=of(n.currency)),void 0===n.maximumFractionDigits&&(n.maximumFractionDigits=of(n.currency)),function(e,t={}){if(null==e)return"";const n=sf(e,t);if(n===t.returnIfNaN||n===np.formatNumberOptions.returnIfNaN)return n;let r="";const s=n&&n.length;for(let e=0;e<s;e+=1){const t=n[e];r+=t.value}const i=Zp(t&&t.locale);return np.formatNumberOptions.postProcessors.size>0&&Array.from(np.formatNumberOptions.postProcessors).forEach((([e,t])=>{e===i&&(r=t(r))})),t.postProcessors&&t.postProcessors.size>0&&Array.from(t.postProcessors).forEach((([e,t])=>{e===i&&(r=t(r))})),r}(e,n)}function lf(e,t){const n=function(e,t){if(!e.match(/\d/g))return;const n=e.match(/[0-9,.\- ]/g);if(!n)return;const r=n.join(""),s=function(e,{mode:t="auto"}={}){const n=e.match(/[., ]/g);if("auto"===t&&n&&1===n.length)return"withLocale";if(e.length>4){const t=e[e.length-4];if(function(e){return"."===e||","===e}(t)){const n=e.substring(0,e.length-4).match(/[., ]/g);if(n){const e=t;return-1===n.indexOf(e)?"heuristic":"unparseable"}return"withLocale"}}return"heuristic"}(r,t);switch(s){case"unparseable":{const e=r.match(/[0-9]/g)?.join("");return e?parseFloat(e):NaN}case"withLocale":return function(e,t){const n=Xp(t&&t.locale?t.locale:void 0,t),r=new RegExp(`[0-9${n}-]`,"g");let s=e.match(r)?.join("");return","===n&&(s=s?.replace(",",".")),s?parseFloat(s):NaN}(r,t||{});case"heuristic":return function(e){if(e.match(/[0-9., ]/g)){const t=e.replace(/(,|\.)([^,|.]*)$/g,"_decSep_$2").replace(/(,|\.| )/g,"").replace(/_decSep_/,".");return parseFloat(t)}return 0}(r);default:return 0}}(e,t);if("number"!=typeof n)return n;const r={...t};return r.currency&&void 0===r.maximumFractionDigits&&(r.maximumFractionDigits=of(r.currency)),function(e,t){return Number(void 0===t?e:`${Math.round(Number(`${e}e${t}`))}e-${t}`)}(n,r.maximumFractionDigits)}class cf extends(Wp(Ep)){static get properties(){return{currency:String,modelValue:Number,locale:{attribute:!1}}}get slots(){return{...super.slots,after:()=>{const e=document.createElement("span");return e.setAttribute("data-label",""),e.textContent=this.__currencyLabel,e}}}static get styles(){return[...super.styles,Be`
        .input-group__container > .input-group__input ::slotted(.form-control) {
          text-align: right;
        }
      `]}constructor(){super(),this.parser=lf,this.formatter=af,this.currency=void 0,this.locale=void 0,this.__currencyDisplayNodeIsConnected=!0,this.defaultValidators.push(new Sp)}connectedCallback(){super.connectedCallback(),this.type="text",this._inputNode.setAttribute("inputmode","decimal"),this.currency&&this.__setCurrencyDisplayLabel()}updated(e){super.updated(e),e.has("currency")&&this._onCurrencyChanged({currency:this.currency||null}),e.has("locale")&&this.locale!==e.get("locale")&&(this.locale?this.formatOptions.locale=this.locale:delete this.formatOptions.locale,this.__reformat())}_connectSlotMixin(){super._connectSlotMixin(),this._isPrivateSlot("after")&&this._onCurrencyChanged({currency:this.currency||null})}onLocaleChanged(e,t){super.onLocaleChanged(e,t),this.locale||this.__reformat()}_reflectBackOn(){return super._reflectBackOn()||this._isPasting}_onCurrencyChanged({currency:e}){if(this.__currencyDisplayNode)if(this.formatOptions.currency=e||void 0,e){this.__currencyDisplayNodeIsConnected||(this.appendChild(this.__currencyDisplayNode),this.__currencyDisplayNodeIsConnected=!0),this.__currencyDisplayNode.textContent=this.__currencyLabel;try{this._calculateValues({source:null})}catch(e){throw e instanceof RangeError&&(this.__currencyDisplayNode?.remove(),this.__currencyDisplayNodeIsConnected=!1),e}this.__setCurrencyDisplayLabel()}else this.__currencyDisplayNode?.remove(),this.__currencyDisplayNodeIsConnected=!1}get __currencyDisplayNode(){const e=Array.from(this.children).find((e=>"after"===e.slot));return e&&(this.__storedCurrencyDisplayNode=e),e||this.__storedCurrencyDisplayNode}__setCurrencyDisplayLabel(){this.__currencyDisplayNode&&this.__currencyDisplayNode.setAttribute("aria-label",this.currency?function(e,t){let n=sf(1,{...t,style:"currency",currency:e,currencyDisplay:"name"}).filter((e=>"currency"===e.type)).map((e=>e.value)).join(" ");const r=t?.locale||np.locale;return"PHP"===e&&"en-GB"===r&&(n=function(e){return"Philippine pesos"===e&&(e="Philippine pisos"),e}(n)),n}(this.currency,{}):"")}get __currencyLabel(){return this.currency?(e=this.currency,t=np.locale,""===e?"":function(e,t){return"TRY"===e&&"tr-TR"===t?"TL":e}(e,t)):"";var e,t}__reformat(){this.formattedValue=this._callFormatter()}}var uf=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};const hf=l`
        :host {
            display: inline-flex;
            position: relative;
        }

        :host * {
            display: inline-flex;
        }

        /* Can't believe ING would make something so ugly */
        .input-group,
        .form-field__group-two, 
        .input-group__container, 
        .input-group__input,
        .input-group__input * {
            flex: 1;
        }
    `,df=[we,l`
        kana-input, input, kana-select {
            flex: 1;
            font-size: 1rem;
            position: relative;
        }

        input, select {
            font-family: sans;
        }

        input {
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: var(--primary-color);
            color: var(--foreground-color);
            box-sizing: border-box;
        }
        
        input:focus {
            outline: none;
            box-shadow: 0 0 0 2px var(--highlighted-light-color);
        }

        .small-input, .small-input * {
            flex: 0;
        }

        .small-input input {
            width: 8rem;
        }

        .form-row {
            display: flex;
            gap: 1rem;
            margin: 10px 0;
            flex-flow: row wrap;
        }

        select {
            padding: 10px;
            padding-right: 2rem;
            border: none;
            border-radius: 5px;
            background-color: var(--primary-color);
            color: var(--foreground-color);
            font-size: 1rem;
            appearance: none;
            cursor: pointer;
            flex: 1;
        }
        
        select:focus {
            outline: none;
            box-shadow: 0 0 0 2px var(--highlighted-light-color);
        }
        
        kana-button-submit {
            min-width: fit-content;
            flex: 1;
            font-size: 1.2rem;
            min-height: 3rem;
        }
    `,l`
        .form-row lion-validation-feedback {
            position: absolute;
            background-color: var(--highlighted-light-color);
            color: var(--background-color);
            padding: 10px;
            border-radius: 10px;
            display: inline-block;
            max-width: 12rem;
            font-size: 0.8rem;
            line-height: 1.2;
            bottom: 2rem;
            margin-left: -3rem;
            width: max-content;
            z-index: 1
        }

        .form-row lion-validation-feedback:not([type="error"]) {
            display: none;
        }
        
        .form-row lion-validation-feedback::before {
            content: '';
            position: absolute;
            bottom: -18px;
            left: 10%;
            margin-left: -10px;
            border: 10px solid transparent;
            border-top: 15px solid var(--highlighted-light-color);
        }
        
    `];function pf(e=1/0){return t=>t.slice(0,e)}function ff(e){return t=>{let n=BigInt(t.replace(/[^0-9]/g,""));return n>e&&(n=e),n.toString()}}let mf=class extends mp{static get styles(){return[hf,l`
                ::slotted(form), .input-group * {
                    flex: 1;
                }
                
            `]}};mf=uf([pe("kana-form")],mf);let gf=class extends Ep{static get styles(){return[hf]}};gf=uf([pe("kana-input")],gf);let yf=class extends xp{static get styles(){return[hf]}};yf=uf([pe("kana-options")],yf);let bf=class extends Pp{};bf=uf([pe("kana-option")],bf);let wf=class extends Op{static get styles(){return[l`
                :host {
                    position: relative;
                    display: inline-flex;
                }
                :host::after {
                    content: '';
                    display: block;
                    position: absolute;
                    right: 10px;
                    top: 50%;
                    transform: translateY(-50%);
                    border-left: 5px solid transparent;
                    border-right: 5px solid transparent;
                    border-top: 7px solid var(--foreground-color);
                    pointer-events: none;
               }
            `,hf]}};wf=uf([pe("kana-select")],wf);let vf=class extends cf{static get styles(){return[hf]}};vf=uf([pe("kana-input-amount")],vf);let Af=class extends Lp{static get styles(){return[hf]}};Af=uf([pe("kana-input-stepper")],Af);const _f=(lp.getMessage=async()=>"Please, enter a value",lp),Ef=e=>"string"==typeof e;class kf extends op{static get validatorName(){return"EqualsLength"}execute(e,t=this.param){let n=!1;return Ef(e)&&e.length===t||(n=!0),n}}class xf extends op{static get validatorName(){return"MinLength"}execute(e,t=this.param){let n=!1;return(!Ef(e)||e.length<t)&&(n=!0),n}}class Cf extends op{static get validatorName(){return"MaxLength"}execute(e,t=this.param){let n=!1;return(!Ef(e)||e.length>t)&&(n=!0),n}}class Nf extends op{static get validatorName(){return"MinMaxLength"}execute(e,{min:t=0,max:n=0}=this.param){let r=!1;return(!Ef(e)||e.length<t||e.length>n)&&(r=!0),r}}const Pf=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;class Rf extends op{static get validatorName(){return"IsEmail"}execute(e){let t=!1;return Ef(e)&&Pf.test(e.toLowerCase())||(t=!0),t}}class Of extends op{static get validatorName(){return"Pattern"}execute(e,t=this.param){if(!(t instanceof RegExp))throw new Error('Psst... Pattern validator expects RegExp object as parameter e.g, new Pattern(/#LionRocks/) or new Pattern(RegExp("#LionRocks")');let n=!1;return Ef(e)&&((e,t)=>t.test(e))(e,t)||(n=!0),n}}function Bf(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate())}function Sf(e){return"[object Date]"===Object.prototype.toString.call(e)&&!Number.isNaN(e.getTime())}class Tf extends op{static get validatorName(){return"IsDate"}execute(e){let t=!1;return Sf(e)||(t=!0),t}}class If extends op{static get validatorName(){return"MinDate"}execute(e,t=this.param){let n=!1;return(!Sf(e)||Bf(e)<Bf(t))&&(n=!0),n}}class Ff extends op{static get validatorName(){return"MaxDate"}execute(e,t=this.param){let n=!1;return(!Sf(e)||Bf(e)>Bf(t))&&(n=!0),n}}class Lf extends op{static get validatorName(){return"MinMaxDate"}execute(e,{min:t=0,max:n=0}=this.param){let r=!1;return(!Sf(e)||Bf(e)<Bf(t)||Bf(e)>Bf(n))&&(r=!0),r}}class Df extends op{static get validatorName(){return"IsDateDisabled"}execute(e,t=this.param){let n=!1;return Sf(e)&&!t(e)||(n=!0),n}}class Mf extends ap{constructor(...e){super(...e),this.type="success"}executeOnResults({regularValidationResult:e,prevShownValidationResult:t}){const n=e=>"error"===e.type||"warning"===e.type,r=!!e.filter(n).length,s=!!t.filter(n).length;return!r&&s}}let Uf;class $f{static async loadLibPhoneNumber(){const e=(await s.e(849).then(s.bind(s,849))).default;return this.PhoneUtil=e,Uf(void 0),e}static get isLoaded(){return Boolean(this.PhoneUtil)}}function jf(e,t){const n=$f.PhoneUtil;let r=!1;if(t&&e?.length>=4&&e?.length<=16){let s;try{if(s=n(e,t),r=s.g.regionCode!==t,r)return"invalid-country-code"}catch(e){}const i=!s.isValid()&&s.g.possibility;return"is-possible"===i?"unknown":i}return"unknown"}$f.loadComplete=new Promise((e=>{Uf=e})),$f.loadLibPhoneNumber();class Vf extends op{static validatorName="PhoneNumber";static get async(){return!$f.isLoaded}execute(e,t){return $f.isLoaded?jf(e,t):new Promise((n=>{$f.loadComplete.then((()=>{n(jf(e,t))}))}))}}let Hf=!1;function Gf(){if(!0===Hf)return;const e=()=>np.loadNamespace({"lion-validate":e=>{switch(e){case"bg-BG":return s.e(500).then(s.bind(s,500));case"bg":return s.e(770).then(s.bind(s,770));case"cs-CZ":return s.e(153).then(s.bind(s,153));case"cs":return s.e(875).then(s.bind(s,875));case"de-DE":return s.e(940).then(s.bind(s,940));case"de":return s.e(778).then(s.bind(s,778));case"en-AU":return s.e(941).then(s.bind(s,941));case"en-GB":return s.e(310).then(s.bind(s,310));case"en-US":return s.e(67).then(s.bind(s,67));case"en-PH":return s.e(559).then(s.bind(s,559));case"en":default:return s.e(342).then(s.bind(s,342));case"es-ES":return s.e(198).then(s.bind(s,198));case"es":return s.e(929).then(s.bind(s,929));case"fr-FR":return s.e(254).then(s.bind(s,254));case"fr-BE":return s.e(547).then(s.bind(s,547));case"fr":return s.e(865).then(s.bind(s,865));case"hu-HU":return s.e(428).then(s.bind(s,428));case"hu":return s.e(998).then(s.bind(s,998));case"it-IT":return s.e(484).then(s.bind(s,484));case"it":return s.e(920).then(s.bind(s,920));case"nl-BE":return s.e(797).then(s.bind(s,797));case"nl-NL":return s.e(546).then(s.bind(s,546));case"nl":return s.e(419).then(s.bind(s,419));case"pl-PL":return s.e(450).then(s.bind(s,450));case"pl":return s.e(461).then(s.bind(s,461));case"ro-RO":return s.e(204).then(s.bind(s,204));case"ro":return s.e(162).then(s.bind(s,162));case"ru-RU":return s.e(164).then(s.bind(s,164));case"ru":return s.e(224).then(s.bind(s,224));case"sk-SK":return s.e(986).then(s.bind(s,986));case"sk":return s.e(651).then(s.bind(s,651));case"uk-UA":return s.e(972).then(s.bind(s,972));case"uk":return s.e(841).then(s.bind(s,841));case"zh-CN":case"zh":return s.e(99).then(s.bind(s,99))}}},{locale:np.locale}),t=async t=>(await e(),t?np.msg(`lion-validate:${t.type}.${t.name}`,t):"");lp.getMessage=async e=>t(e),kf.getMessage=async e=>t(e),xf.getMessage=async e=>t(e),Cf.getMessage=async e=>t(e),Nf.getMessage=async e=>t(e),Of.getMessage=async e=>t(e),Rf.getMessage=async e=>t(e),Sp.getMessage=async e=>t(e),Tp.getMessage=async e=>t(e),Ip.getMessage=async e=>t(e),Fp.getMessage=async e=>t(e),Tf.getMessage=async e=>t(e),If.getMessage=async e=>t(e),Ff.getMessage=async e=>t(e),Lf.getMessage=async e=>t(e),Df.getMessage=async e=>t(e),Mf.getMessage=async t=>{await e();const n=np.msg("lion-validate:success.RandomOk").split(","),r=n[Math.floor(Math.random()*n.length)].trim();return np.msg(`lion-validate:${r}`,t)},Vf.getMessage=async t=>{await e();const{type:n,outcome:r}=t;return np.msg(`lion-validate:${n}.Pattern`,t)},Hf=!0}let zf=class extends yd{constructor(){super(),Gf(),lp.getMessage=async()=>"Please, enter a value"}async fetchData(){this.isLoading=!0,md.readOnly&&(this.isLoading=!1,this.items=[]),this.isLoading=!1,this.items=[]}static get styles(){return[we,l`
                .container {
					display: flex;
					flex-direction: column;
					justify-content: center;
					gap: 40px;
					margin-top: 20px;
					height: 100%;
					width: 100%;
                }

				.card-container {
					display: flex;
					flex-direction: row;
					gap: 40px;

					@media only screen and (max-width: 1100px) {
						flex-direction: column;
					}
				}

				.card {
					display: flex;
					flex-direction: column;
					gap: 20px;
					background-color: var(--foreground-color);
                    color: var(--background-color);
					border-radius: 1rem;
                    padding: 30px;
					box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                    box-sizing: border-box;
					width: 100%;
				}

				.card-title {
					font-size: 18px;
				}
			`,l`
				.profile-card {

				}

				.profile-card-sub-container {
					display: flex;
					flex-direction: column;
					gap: 20px;
				}

				.profile-image-container {
					width: 200px;
					height: 200px;
					align-self: center;
				}

				.profile-image-1 {
					fill: var(--primary-color);
				}

				.profile-wallet-address {
					color: #000000;
					font-weight: bold;
				}

				.profile-line {
					border: 1px solid var(--primary-color);
					border-radius: 3px;
					margin: 0;
				}

				.profile-form-inputs {
					
				}

				kana-form {
					width: 100%;
				}

				kana-input, input, kana-select {
                    flex: 1;
                    font-size: 1rem;
                    position: relative;
                }

                input, select {
                    font-family: sans;
                }

                input {
                    padding: 10px;
                    border: none;
                    border-radius: 10px;
                    background-color: var(--primary-color);
                    color: var(--foreground-color);
                    box-sizing: border-box;
					font-size: 18px;
                }

				input::placeholder {
					color: var(--foreground-color);
				}
                
                input:focus {
                    outline: none;
                    box-shadow: 0 0 0 2px var(--highlighted-light-color);
                }

                .small-input, .small-input * {
                    flex: 0;
                }

                .small-input input {
                    width: 8rem;
                }

                .form-row {
                    display: flex;
                    gap: 1rem;
                    margin: 10px 0;
                    flex-flow: row wrap;
                }

                select {
                    padding: 10px;
                    padding-right: 2rem;
                    border: none;
                    border-radius: 10px;
                    background-color: var(--primary-color);
                    color: var(--foreground-color);
                    font-size: 1rem;
                    appearance: none;
                    cursor: pointer;
                    flex: 1;
					font-size: 18px;
                }
                
                select:focus {
                    outline: none;
                    box-shadow: 0 0 0 2px var(--highlighted-light-color);
                }
                
                kana-button-submit {
					border-radius: 10px;
                    min-width: fit-content;
                    flex: 1;
                }

				.profile-wallet-container {
					min-height: 70px;
				}

				.profile-project-container {
					display: flex;
					flex-direction: row;
					gap: 20px;

					> a {
						width: 100%;

						> kana-button {
							width: 100%;
						}
					}

					@media only screen and (max-width: 700px) {
						flex-direction: column;
					}
				}
			`,l`
                .form-row lion-validation-feedback {
                    position: absolute;
                    background-color: var(--highlighted-light-color);
                    color: var(--background-color);
                    padding: 10px;
                    border-radius: 10px;
                    display: inline-block;
                    max-width: 12rem;
                    font-size: 0.8rem;
                    line-height: 1.2;
                    bottom: 2rem;
                    margin-left: -3rem;
                    width: max-content;
                    z-index: 1
                }

                .form-row lion-validation-feedback:not([type="error"]) {
                    display: none;
                }
                
                .form-row lion-validation-feedback::before {
                    content: '';
                    position: absolute;
                    bottom: -18px;
                    left: 10%;
                    margin-left: -10px;
                    border: 10px solid transparent;
                    border-top: 15px solid var(--highlighted-light-color);
                }
            `,l`
				.overview-card {
					width: 100%
					min-height: 400px;
				}
			`,l`
				.project-card {
					
				}

				.project-container {

				}
			`,l`
				.role-card {
					
				}

				.role-container {

				}
			`,l`
				.button-container {
					display: flex;
					flex-direction: row;
					gap: 20px;
					justify-content: flex-end;

					@media only screen and (max-width: 900px) {
						flex-direction: column;
					}
				}

				.update-button {
					width: 350px;

					@media only screen and (max-width: 900px) {
						width: 100%;
					}
				}

				.cancel-button {
					width: 120px;

					@media only screen and (max-width: 900px) {
						width: 100%;
					}
				}
            `]}async submitHandler(e){let t=e.target;if(t.hasFeedbackFor.includes("error"))t.formElements.find((e=>e.hasFeedbackFor.includes("error"))).focus();else{const t=e.target.modelValue;console.log(t)}}render(){return Q`
            <div class="container">
				<div class="card-container">
					<div class="card profile-card">
						<div class="profile-card-sub-container">
							<div class="profile-image-container">
								<svg class="profile-image-1" viewBox="0 0 24 24">
									<path d="M0 0h24v24H0z" fill="none"></path>
									<path d="M18.39 14.56C16.71 13.7 14.53 13 12 13s-4.71.7-6.39 1.56A2.97 2.97 0 0 0 4 17.22V20h16v-2.78c0-1.12-.61-2.15-1.61-2.66zM9.78 12h4.44c1.21 0 2.14-1.06 1.98-2.26l-.32-2.45C15.57 5.39 13.92 4 12 4S8.43 5.39 8.12 7.29L7.8 9.74c-.16 1.2.77 2.26 1.98 2.26z"></path>
								</svg>
							</div>
							<div class="profile-wallet-address">
								<span>Wallet Adress:</span>
								<span></span>
							</div>
						</div>

						<hr class="profile-line"/>

						<div class="profile-form-inputs">
							<kana-form @submit="${this.submitHandler}">
								<form @submit=${e=>e.preventDefault()}>
									<div class="form-row">
										<kana-input
											label-sr-only="Display Name"
											placeholder="Display Name"
											name="add-wallet-display-name"
											.validators="${[new Nf({min:4,max:16}),new lp]}"
											.preprocessor=${pf(16)}
										></kana-input>
									</div>
									<div class="form-row">
										<kana-select
											label-sr-only="Visibility"
											placeholder="Visibility"
											name="add-wallet-visibility"
											.validators=${[new lp]}
										>
											<select name="visibility-select" slot="input">
												<option name="public" value="public" selected>Public</option>
												<option name="option1" value="option1">Option 1</option>
												<option name="option2" value="option2">Option 2</option>
												<option name="option3" value="option3">Option 3</option>
											</select>
										</kana-select>
									</div>
									<div class="form-row">
										<kana-input
											label-sr-only="Chain"
											placeholder="Chain"
											name="add-wallet-chain"
											.validators="${[new Nf({min:0,max:64})]}"
											.preprocessor=${pf(64)}
										></kana-input>
									</div>
									<div class="form-row">
										<kana-button-submit>Add Wallet</kana-button-submit>
									</div>
								</form>
							</kana-form>
						</div>
						<div class="profile-wallet-container">
							<span>My Wallets</span>
						</div>
						<div class="profile-project-container">
							<a href="projects">
								<kana-button>My Projects</kana-button>
							</a>
							<a href="new-project">
								<kana-button>New</kana-button>
							</a>
						</div>
					</div>
					<div class="card project-card overview-card">
						<h2 class="card-title">Overview Projects</h2>

						<div class="project-container">
							
						</div>
					</div>
					<div class="card role-card overview-card">
						<h2 class="card-title">Overview Roles</h2>

						<div class="role-container">
							
						</div>
					</div>
				</div>

				<div class="button-container">
					<kana-button class="update-button">Update</kana-button>

					<a href="projects">
						<kana-button class="cancel-button">Cancel</kana-button>
					</a>
				</div>
			</div>
        `}};zf=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe("profile-page")],zf);const qf=e=>(...t)=>({_$litDirective$:e,values:t});class Qf{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,n){this._$Ct=e,this._$AM=t,this._$Ci=n}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}const{I:Jf}=ce,Kf=()=>document.createComment(""),Wf=(e,t,n)=>{const r=e._$AA.parentNode,s=void 0===t?e._$AB:t._$AA;if(void 0===n){const t=r.insertBefore(Kf(),s),i=r.insertBefore(Kf(),s);n=new Jf(t,i,e,e.options)}else{const t=n._$AB.nextSibling,i=n._$AM,o=i!==e;if(o){let t;n._$AQ?.(e),n._$AM=e,void 0!==n._$AP&&(t=e._$AU)!==i._$AU&&n._$AP(t)}if(t!==s||o){let e=n._$AA;for(;e!==t;){const t=e.nextSibling;r.insertBefore(e,s),e=t}}}return n},Yf=(e,t,n=e)=>(e._$AI(t,n),e),Zf={},Xf=e=>{e._$AP?.(!1,!0);let t=e._$AA;const n=e._$AB.nextSibling;for(;t!==n;){const e=t.nextSibling;t.remove(),t=e}},em=(e,t,n)=>{const r=new Map;for(let s=t;s<=n;s++)r.set(e[s],s);return r},tm=qf(class extends Qf{constructor(e){if(super(e),2!==e.type)throw Error("repeat() can only be used in text expressions")}dt(e,t,n){let r;void 0===n?n=t:void 0!==t&&(r=t);const s=[],i=[];let o=0;for(const t of e)s[o]=r?r(t,o):o,i[o]=n(t,o),o++;return{values:i,keys:s}}render(e,t,n){return this.dt(e,t,n).values}update(e,[t,n,r]){const s=(e=>e._$AH)(e),{values:i,keys:o}=this.dt(t,n,r);if(!Array.isArray(s))return this.ut=o,i;const a=this.ut??=[],l=[];let c,u,h=0,d=s.length-1,p=0,f=i.length-1;for(;h<=d&&p<=f;)if(null===s[h])h++;else if(null===s[d])d--;else if(a[h]===o[p])l[p]=Yf(s[h],i[p]),h++,p++;else if(a[d]===o[f])l[f]=Yf(s[d],i[f]),d--,f--;else if(a[h]===o[f])l[f]=Yf(s[h],i[f]),Wf(e,l[f+1],s[h]),h++,f--;else if(a[d]===o[p])l[p]=Yf(s[d],i[p]),Wf(e,s[h],s[d]),d--,p++;else if(void 0===c&&(c=em(o,p,f),u=em(a,h,d)),c.has(a[h]))if(c.has(a[d])){const t=u.get(o[p]),n=void 0!==t?s[t]:null;if(null===n){const t=Wf(e,s[h]);Yf(t,i[p]),l[p]=t}else l[p]=Yf(n,i[p]),Wf(e,s[h],n),s[t]=null;p++}else Xf(s[d]),d--;else Xf(s[h]),h++;for(;p<=f;){const t=Wf(e,l[f+1]);Yf(t,i[p]),l[p++]=t}for(;h<=d;){const e=s[h++];null!==e&&Xf(e)}return this.ut=o,((e,t=Zf)=>{e._$AH=t})(e,l),J}});function nm(e,t,n){return e?t(e):n?.(e)}let rm=class extends yd{async fetchData(){this.isLoading=!0;const e=await md.projectRegistry.getProjects();md.readOnly&&(this.isLoading=!1,this.items=[]);const t=[];for(let n of e){const e=new zo(n.address,["function balanceOf(address owner) view returns (uint256 balance)","function name() view returns (string)","function symbol() view returns (string)"],md.wallet);try{if(0!=await e.balanceOf(await((await md.signer)?.getAddress()))){const e=n.address,r=n.project;t.push(new cn({name:r,button:{text:"Contracts",link:`/projects/${e}`},address:e,description:n.description}))}}catch(e){console.error(e)}}this.isLoading=!1,this.items=t}render(){return Q`
            <h1>My Projects</h1>
            <div class="cards">
                ${nm(this.isLoading,(()=>Q`<loading-icon></loading-icon>`),(()=>tm(this.items,(e=>e.name),(e=>Q`${e}`))))}
            </div>
            <a href="new-project">
                <kana-button>Create new project</kana-button>
            </a>
        `}};rm=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe("projects-page")],rm);const sm=Symbol();class im{get taskComplete(){return this.t||(1===this.status?this.t=new Promise(((e,t)=>{this.i=e,this.o=t})):3===this.status?this.t=Promise.reject(this.h):this.t=Promise.resolve(this.l)),this.t}constructor(e,t,n){this.u=0,this.status=0,(this.p=e).addController(this);const r="object"==typeof t?t:{task:t,args:n};this._=r.task,this.v=r.args,this.j=r.argsEqual??om,this.m=r.onComplete,this.g=r.onError,this.autoRun=r.autoRun??!0,"initialValue"in r&&(this.l=r.initialValue,this.status=2,this.k=this.A?.())}hostUpdate(){!0===this.autoRun&&this.O()}hostUpdated(){"afterUpdate"===this.autoRun&&this.O()}A(){if(void 0===this.v)return;const e=this.v();if(!Array.isArray(e))throw Error("The args function must return an array");return e}async O(){const e=this.A(),t=this.k;this.k=e,e===t||void 0===e||void 0!==t&&this.j(t,e)||await this.run(e)}async run(e){let t,n;e??=this.A(),this.k=e,1===this.status?this.T?.abort():(this.t=void 0,this.i=void 0,this.o=void 0),this.status=1,"afterUpdate"===this.autoRun?queueMicrotask((()=>this.p.requestUpdate())):this.p.requestUpdate();const r=++this.u;this.T=new AbortController;let s=!1;try{t=await this._(e,{signal:this.T.signal})}catch(e){s=!0,n=e}if(this.u===r){if(t===sm)this.status=0;else{if(!1===s){try{this.m?.(t)}catch{}this.status=2,this.i?.(t)}else{try{this.g?.(n)}catch{}this.status=3,this.o?.(n)}this.l=t,this.h=n}this.p.requestUpdate()}}abort(e){1===this.status&&this.T?.abort(e)}get value(){return this.l}get error(){return this.h}render(e){switch(this.status){case 0:return e.initial?.();case 1:return e.pending?.();case 2:return e.complete?.(this.value);case 3:return e.error?.(this.error);default:throw Error("Unexpected status: "+this.status)}}}const om=(e,t)=>e===t||e.length===t.length&&e.every(((e,n)=>!E(e,t[n])));let am=class extends he{static get styles(){return[l`
                :host {
                    background-color: var(--foreground-color);
                    color: var(--background-color);
                    border-radius: 1rem;
                    padding: 1rem;
                    display: flex;
                    flex: 1 1 auto;
                    width: 32rem;
                    max-width: 100%;
                    flex-direction: column;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                    box-sizing: border-box;
                }
            `]}render(){return Q`
            <slot></slot>
        `}};function lm(e){return e=e||[],Array.isArray(e)?e:[e]}function cm(e){return`[Vaadin.Router] ${e}`}am=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe("kana-windowlet")],am);const um="module",hm="nomodule",dm=[um,hm];function pm(e){if(!e.match(/.+\.[m]?js$/))throw new Error(cm(`Unsupported type for bundle "${e}": .js or .mjs expected.`))}function fm(e){if(!e||!vm(e.path))throw new Error(cm('Expected route config to be an object with a "path" string property, or an array of such objects'));const t=e.bundle,n=["component","redirect","bundle"];if(!(wm(e.action)||Array.isArray(e.children)||wm(e.children)||bm(t)||n.some((t=>vm(e[t])))))throw new Error(cm(`Expected route config "${e.path}" to include either "${n.join('", "')}" or "action" function but none found.`));if(t)if(vm(t))pm(t);else{if(!dm.some((e=>e in t)))throw new Error(cm('Expected route bundle to include either "'+hm+'" or "'+um+'" keys, or both'));dm.forEach((e=>e in t&&pm(t[e])))}e.redirect&&["bundle","component"].forEach((t=>{t in e&&console.warn(cm(`Route config "${e.path}" has both "redirect" and "${t}" properties, and "redirect" will always override the latter. Did you mean to only use "${t}"?`))}))}function mm(e){lm(e).forEach((e=>fm(e)))}function gm(e,t){let n=document.head.querySelector('script[src="'+e+'"][async]');return n||(n=document.createElement("script"),n.setAttribute("src",e),t===um?n.setAttribute("type",um):t===hm&&n.setAttribute(hm,""),n.async=!0),new Promise(((e,t)=>{n.onreadystatechange=n.onload=t=>{n.__dynamicImportLoaded=!0,e(t)},n.onerror=e=>{n.parentNode&&n.parentNode.removeChild(n),t(e)},null===n.parentNode?document.head.appendChild(n):n.__dynamicImportLoaded&&e()}))}function ym(e,t){return!window.dispatchEvent(new CustomEvent(`vaadin-router-${e}`,{cancelable:"go"===e,detail:t}))}function bm(e){return"object"==typeof e&&!!e}function wm(e){return"function"==typeof e}function vm(e){return"string"==typeof e}function Am(e){const t=new Error(cm(`Page not found (${e.pathname})`));return t.context=e,t.code=404,t}const _m=new class{};function Em(e){if(e.defaultPrevented)return;if(0!==e.button)return;if(e.shiftKey||e.ctrlKey||e.altKey||e.metaKey)return;let t=e.target;const n=e.composedPath?e.composedPath():e.path||[];for(let e=0;e<n.length;e++){const r=n[e];if(r.nodeName&&"a"===r.nodeName.toLowerCase()){t=r;break}}for(;t&&"a"!==t.nodeName.toLowerCase();)t=t.parentNode;if(!t||"a"!==t.nodeName.toLowerCase())return;if(t.target&&"_self"!==t.target.toLowerCase())return;if(t.hasAttribute("download"))return;if(t.hasAttribute("router-ignore"))return;if(t.pathname===window.location.pathname&&""!==t.hash)return;const r=t.origin||function(e){const t=e.port,n=e.protocol;return`${n}//${"http:"===n&&"80"===t||"https:"===n&&"443"===t?e.hostname:e.host}`}(t);if(r!==window.location.origin)return;const{pathname:s,search:i,hash:o}=t;ym("go",{pathname:s,search:i,hash:o})&&(e.preventDefault(),e&&"click"===e.type&&window.scrollTo(0,0))}const km={activate(){window.document.addEventListener("click",Em)},inactivate(){window.document.removeEventListener("click",Em)}};function xm(e){if("vaadin-router-ignore"===e.state)return;const{pathname:t,search:n,hash:r}=window.location;ym("go",{pathname:t,search:n,hash:r})}/Trident/.test(navigator.userAgent)&&!wm(window.PopStateEvent)&&(window.PopStateEvent=function(e,t){t=t||{};var n=document.createEvent("Event");return n.initEvent(e,Boolean(t.bubbles),Boolean(t.cancelable)),n.state=t.state||null,n},window.PopStateEvent.prototype=window.Event.prototype);const Cm={activate(){window.addEventListener("popstate",xm)},inactivate(){window.removeEventListener("popstate",xm)}};var Nm=function e(t,n,r){return t instanceof RegExp?function(e,t){if(!t)return e;var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,pattern:null});return e}(t,n):Array.isArray(t)?function(t,n,r){for(var s=[],i=0;i<t.length;i++)s.push(e(t[i],n,r).source);return new RegExp("(?:"+s.join("|")+")",Mm(r))}(t,n,r):function(e,t,n){return Um(Im(e,n),t,n)}(t,n,r)},Pm=Im,Rm=Fm,Om=Um,Bm="/",Sm="./",Tm=new RegExp(["(\\\\.)","(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?"].join("|"),"g");function Im(e,t){for(var n,r=[],s=0,i=0,o="",a=t&&t.delimiter||Bm,l=t&&t.delimiters||Sm,c=!1;null!==(n=Tm.exec(e));){var u=n[0],h=n[1],d=n.index;if(o+=e.slice(i,d),i=d+u.length,h)o+=h[1],c=!0;else{var p="",f=e[i],m=n[2],g=n[3],y=n[4],b=n[5];if(!c&&o.length){var w=o.length-1;l.indexOf(o[w])>-1&&(p=o[w],o=o.slice(0,w))}o&&(r.push(o),o="",c=!1);var v=""!==p&&void 0!==f&&f!==p,A="+"===b||"*"===b,_="?"===b||"*"===b,E=p||a,k=g||y;r.push({name:m||s++,prefix:p,delimiter:E,optional:_,repeat:A,partial:v,pattern:k?Dm(k):"[^"+Lm(E)+"]+?"})}}return(o||i<e.length)&&r.push(o+e.substr(i)),r}function Fm(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,r){for(var s="",i=r&&r.encode||encodeURIComponent,o=0;o<e.length;o++){var a=e[o];if("string"!=typeof a){var l,c=n?n[a.name]:void 0;if(Array.isArray(c)){if(!a.repeat)throw new TypeError('Expected "'+a.name+'" to not repeat, but got array');if(0===c.length){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to not be empty')}for(var u=0;u<c.length;u++){if(l=i(c[u],a),!t[o].test(l))throw new TypeError('Expected all "'+a.name+'" to match "'+a.pattern+'"');s+=(0===u?a.prefix:a.delimiter)+l}}else if("string"!=typeof c&&"number"!=typeof c&&"boolean"!=typeof c){if(!a.optional)throw new TypeError('Expected "'+a.name+'" to be '+(a.repeat?"an array":"a string"));a.partial&&(s+=a.prefix)}else{if(l=i(String(c),a),!t[o].test(l))throw new TypeError('Expected "'+a.name+'" to match "'+a.pattern+'", but got "'+l+'"');s+=a.prefix+l}}else s+=a}return s}}function Lm(e){return e.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1")}function Dm(e){return e.replace(/([=!:$/()])/g,"\\$1")}function Mm(e){return e&&e.sensitive?"":"i"}function Um(e,t,n){for(var r=(n=n||{}).strict,s=!1!==n.start,i=!1!==n.end,o=Lm(n.delimiter||Bm),a=n.delimiters||Sm,l=[].concat(n.endsWith||[]).map(Lm).concat("$").join("|"),c=s?"^":"",u=0===e.length,h=0;h<e.length;h++){var d=e[h];if("string"==typeof d)c+=Lm(d),u=h===e.length-1&&a.indexOf(d[d.length-1])>-1;else{var p=d.repeat?"(?:"+d.pattern+")(?:"+Lm(d.delimiter)+"(?:"+d.pattern+"))*":d.pattern;t&&t.push(d),d.optional?d.partial?c+=Lm(d.prefix)+"("+p+")?":c+="(?:"+Lm(d.prefix)+"("+p+"))?":c+=Lm(d.prefix)+"("+p+")"}}return i?(r||(c+="(?:"+o+")?"),c+="$"===l?"$":"(?="+l+")"):(r||(c+="(?:"+o+"(?="+l+"))?"),u||(c+="(?="+o+"|"+l+")")),new RegExp(c,Mm(n))}Nm.parse=Pm,Nm.compile=function(e,t){return Fm(Im(e,t))},Nm.tokensToFunction=Rm,Nm.tokensToRegExp=Om;const{hasOwnProperty:$m}=Object.prototype,jm=new Map;function Vm(e){try{return decodeURIComponent(e)}catch(t){return e}}function Hm(e,t,n,r,s){let i,o,a=0,l=e.path||"";return"/"===l.charAt(0)&&(n&&(l=l.substr(1)),n=!0),{next(c){if(e===c)return{done:!0};const u=e.__children=e.__children||e.children;if(!i&&(i=function(e,t,n,r,s){const i=`${e}|${n=!!n}`;let o=jm.get(i);if(!o){const t=[];o={keys:t,pattern:Nm(e,t,{end:n,strict:""===e})},jm.set(i,o)}const a=o.pattern.exec(t);if(!a)return null;const l=Object.assign({},s);for(let e=1;e<a.length;e++){const t=o.keys[e-1],n=t.name,r=a[e];void 0===r&&$m.call(l,n)||(t.repeat?l[n]=r?r.split(t.delimiter).map(Vm):[]:l[n]=r?Vm(r):r)}return{path:a[0],keys:(r||[]).concat(o.keys),params:l}}(l,t,!u,r,s),i))return{done:!1,value:{route:e,keys:i.keys,params:i.params,path:i.path}};if(i&&u)for(;a<u.length;){if(!o){const r=u[a];r.parent=e;let s=i.path.length;s>0&&"/"===t.charAt(s)&&(s+=1),o=Hm(r,t.substr(s),n,i.keys,i.params)}const r=o.next(c);if(!r.done)return{done:!1,value:r.value};o=null,a++}return{done:!0}}}}function Gm(e){if(wm(e.route.action))return e.route.action(e)}jm.set("|false",{keys:[],pattern:/(?:)/});class zm{constructor(e,t={}){if(Object(e)!==e)throw new TypeError("Invalid routes");this.baseUrl=t.baseUrl||"",this.errorHandler=t.errorHandler,this.resolveRoute=t.resolveRoute||Gm,this.context=Object.assign({resolver:this},t.context),this.root=Array.isArray(e)?{path:"",__children:e,parent:null,__synthetic:!0}:e,this.root.parent=null}getRoutes(){return[...this.root.__children]}setRoutes(e){mm(e);const t=[...lm(e)];this.root.__children=t}addRoutes(e){return mm(e),this.root.__children.push(...lm(e)),this.getRoutes()}removeRoutes(){this.setRoutes([])}resolve(e){const t=Object.assign({},this.context,vm(e)?{pathname:e}:e),n=Hm(this.root,this.__normalizePathname(t.pathname),this.baseUrl),r=this.resolveRoute;let s=null,i=null,o=t;function a(e,l=s.value.route,c){const u=null===c&&s.value.route;return s=i||n.next(u),i=null,e||!s.done&&function(e,t){let n=t;for(;n;)if(n=n.parent,n===e)return!0;return!1}(l,s.value.route)?s.done?Promise.reject(Am(t)):(o=Object.assign(o?{chain:o.chain?o.chain.slice(0):[]}:{},t,s.value),function(e,t){const{route:n,path:r}=t;if(n&&!n.__synthetic){const t={path:r,route:n};if(e.chain){if(n.parent){let t=e.chain.length;for(;t--&&e.chain[t].route&&e.chain[t].route!==n.parent;)e.chain.pop()}}else e.chain=[];e.chain.push(t)}}(o,s.value),Promise.resolve(r(o)).then((t=>null!=t&&t!==_m?(o.result=t.result||t,o):a(e,l,t)))):(i=s,Promise.resolve(_m))}return t.next=a,Promise.resolve().then((()=>a(!0,this.root))).catch((e=>{const t=function(e){let t=`Path '${e.pathname}' is not properly resolved due to an error.`;const n=(e.route||{}).path;return n&&(t+=` Resolution had failed on route: '${n}'`),t}(o);if(e?console.warn(t):e=new Error(t),e.context=e.context||o,e instanceof DOMException||(e.code=e.code||500),this.errorHandler)return o.result=this.errorHandler(e),o;throw e}))}static __createUrl(e,t){return new URL(e,t)}get __effectiveBaseUrl(){return this.baseUrl?this.constructor.__createUrl(this.baseUrl,document.baseURI||document.URL).href.replace(/[^\/]*$/,""):""}__normalizePathname(e){if(!this.baseUrl)return e;const t=this.__effectiveBaseUrl,n=this.constructor.__createUrl(e,t).href;return n.slice(0,t.length)===t?n.slice(t.length):void 0}}zm.pathToRegexp=Nm;const{pathToRegexp:qm}=zm,Qm=new Map;function Jm(e,t,n){const r=t.name||t.component;if(r&&(e.has(r)?e.get(r).push(t):e.set(r,[t])),Array.isArray(n))for(let r=0;r<n.length;r++){const s=n[r];s.parent=t,Jm(e,s,s.__children||s.children)}}function Km(e,t){const n=e.get(t);if(n&&n.length>1)throw new Error(`Duplicate route with name "${t}". Try seting unique 'name' route properties.`);return n&&n[0]}function Wm(e){let t=e.path;return t=Array.isArray(t)?t[0]:t,void 0!==t?t:""}function Ym(e,t={}){if(!(e instanceof zm))throw new TypeError("An instance of Resolver is expected");const n=new Map;return(r,s)=>{let i=Km(n,r);if(!i&&(n.clear(),Jm(n,e.root,e.root.__children),i=Km(n,r),!i))throw new Error(`Route "${r}" not found`);let o=Qm.get(i.fullPath);if(!o){let e=Wm(i),t=i.parent;for(;t;){const n=Wm(t);n&&(e=n.replace(/\/$/,"")+"/"+e.replace(/^\//,"")),t=t.parent}const n=qm.parse(e),r=qm.tokensToFunction(n),s=Object.create(null);for(let e=0;e<n.length;e++)vm(n[e])||(s[n[e].name]=!0);o={toPath:r,keys:s},Qm.set(e,o),i.fullPath=e}let a=o.toPath(s,t)||"/";if(t.stringifyQueryParams&&s){const e={},n=Object.keys(s);for(let t=0;t<n.length;t++){const r=n[t];o.keys[r]||(e[r]=s[r])}const r=t.stringifyQueryParams(e);r&&(a+="?"===r.charAt(0)?r:`?${r}`)}return a}}let Zm=[];function Xm(e){Zm.forEach((e=>e.inactivate())),e.forEach((e=>e.activate())),Zm=e}function eg(e,t){return e.classList.add(t),new Promise((n=>{if((e=>{const t=getComputedStyle(e).getPropertyValue("animation-name");return t&&"none"!==t})(e)){const r=e.getBoundingClientRect(),s=`height: ${r.bottom-r.top}px; width: ${r.right-r.left}px`;e.setAttribute("style",`position: absolute; ${s}`),((e,t)=>{const n=()=>{e.removeEventListener("animationend",n),t()};e.addEventListener("animationend",n)})(e,(()=>{e.classList.remove(t),e.removeAttribute("style"),n()}))}else e.classList.remove(t),n()}))}function tg(e){return null!=e}function ng({pathname:e="",search:t="",hash:n="",chain:r=[],params:s={},redirectFrom:i,resolver:o},a){const l=r.map((e=>e.route));return{baseUrl:o&&o.baseUrl||"",pathname:e,search:t,hash:n,routes:l,route:a||l.length&&l[l.length-1]||null,params:s,redirectFrom:i,getUrl:(e={})=>ag(cg.pathToRegexp.compile(lg(l))(Object.assign({},s,e)),o)}}function rg(e,t){const n=Object.assign({},e.params);return{redirect:{pathname:t,from:e.pathname,params:n}}}function sg(e,t,n){if(wm(e))return e.apply(n,t)}function ig(e,t,n){return r=>r&&(r.cancel||r.redirect)?r:n?sg(n[e],t,n):void 0}function og(e){if(e&&e.length){const t=e[0].parentNode;for(let n=0;n<e.length;n++)t.removeChild(e[n])}}function ag(e,t){const n=t.__effectiveBaseUrl;return n?t.constructor.__createUrl(e.replace(/^\//,""),n).pathname:e}function lg(e){return e.map((e=>e.path)).reduce(((e,t)=>t.length?e.replace(/\/$/,"")+"/"+t.replace(/^\//,""):e),"")}class cg extends zm{constructor(e,t){const n=document.head.querySelector("base"),r=n&&n.getAttribute("href");super([],Object.assign({baseUrl:r&&zm.__createUrl(r,document.URL).pathname.replace(/[^\/]*$/,"")},t)),this.resolveRoute=e=>this.__resolveRoute(e);const s=cg.NavigationTrigger;cg.setTriggers.apply(cg,Object.keys(s).map((e=>s[e]))),this.baseUrl,this.ready,this.ready=Promise.resolve(e),this.location,this.location=ng({resolver:this}),this.__lastStartedRenderId=0,this.__navigationEventHandler=this.__onNavigationEvent.bind(this),this.setOutlet(e),this.subscribe(),this.__createdByRouter=new WeakMap,this.__addedByRouter=new WeakMap}__resolveRoute(e){const t=e.route;let n=Promise.resolve();wm(t.children)&&(n=n.then((()=>t.children(function(e){const t=Object.assign({},e);return delete t.next,t}(e)))).then((e=>{tg(e)||wm(t.children)||(e=t.children),function(e,t){if(!Array.isArray(e)&&!bm(e))throw new Error(cm(`Incorrect "children" value for the route ${t.path}: expected array or object, but got ${e}`));t.__children=[];const n=lm(e);for(let e=0;e<n.length;e++)fm(n[e]),t.__children.push(n[e])}(e,t)})));const r={redirect:t=>rg(e,t),component:e=>{const t=document.createElement(e);return this.__createdByRouter.set(t,!0),t}};return n.then((()=>{if(this.__isLatestRender(e))return sg(t.action,[e,r],t)})).then((e=>{return tg(e)&&(e instanceof HTMLElement||e.redirect||e===_m)?e:vm(t.redirect)?r.redirect(t.redirect):t.bundle?(n=t.bundle,vm(n)?gm(n):Promise.race(dm.filter((e=>e in n)).map((e=>gm(n[e],e))))).then((()=>{}),(()=>{throw new Error(cm(`Bundle not found: ${t.bundle}. Check if the file name is correct`))})):void 0;var n})).then((e=>tg(e)?e:vm(t.component)?r.component(t.component):void 0))}setOutlet(e){e&&this.__ensureOutlet(e),this.__outlet=e}getOutlet(){return this.__outlet}setRoutes(e,t=!1){return this.__previousContext=void 0,this.__urlForName=void 0,super.setRoutes(e),t||this.__onNavigationEvent(),this.ready}render(e,t){const n=++this.__lastStartedRenderId,r=Object.assign({search:"",hash:""},vm(e)?{pathname:e}:e,{__renderId:n});return this.ready=this.resolve(r).then((e=>this.__fullyResolveChain(e))).then((e=>{if(this.__isLatestRender(e)){const r=this.__previousContext;if(e===r)return this.__updateBrowserHistory(r,!0),this.location;if(this.location=ng(e),t&&this.__updateBrowserHistory(e,1===n),ym("location-changed",{router:this,location:this.location}),e.__skipAttach)return this.__copyUnchangedElements(e,r),this.__previousContext=e,this.location;this.__addAppearingContent(e,r);const s=this.__animateIfNeeded(e);return this.__runOnAfterEnterCallbacks(e),this.__runOnAfterLeaveCallbacks(e,r),s.then((()=>{if(this.__isLatestRender(e))return this.__removeDisappearingContent(),this.__previousContext=e,this.location}))}})).catch((e=>{if(n===this.__lastStartedRenderId)throw t&&this.__updateBrowserHistory(r),og(this.__outlet&&this.__outlet.children),this.location=ng(Object.assign(r,{resolver:this})),ym("error",Object.assign({router:this,error:e},r)),e})),this.ready}__fullyResolveChain(e,t=e){return this.__findComponentContextAfterAllRedirects(t).then((n=>{const r=n!==t?n:e,s=ag(lg(n.chain),n.resolver)===n.pathname,i=(e,t=e.route,n)=>e.next(void 0,t,n).then((n=>null===n||n===_m?s?e:null!==t.parent?i(e,t.parent,n):n:n));return i(n).then((e=>{if(null===e||e===_m)throw Am(r);return e&&e!==_m&&e!==n?this.__fullyResolveChain(r,e):this.__amendWithOnBeforeCallbacks(n)}))}))}__findComponentContextAfterAllRedirects(e){const t=e.result;return t instanceof HTMLElement?(function(e,t){t.location=ng(e);const n=e.chain.map((e=>e.route)).indexOf(e.route);e.chain[n].element=t}(e,t),Promise.resolve(e)):t.redirect?this.__redirect(t.redirect,e.__redirectCount,e.__renderId).then((e=>this.__findComponentContextAfterAllRedirects(e))):t instanceof Error?Promise.reject(t):Promise.reject(new Error(cm(`Invalid route resolution result for path "${e.pathname}". Expected redirect object or HTML element, but got: "${function(e){if("object"!=typeof e)return String(e);const t=Object.prototype.toString.call(e).match(/ (.*)\]$/)[1];return"Object"===t||"Array"===t?`${t} ${JSON.stringify(e)}`:t}(t)}". Double check the action return value for the route.`)))}__amendWithOnBeforeCallbacks(e){return this.__runOnBeforeCallbacks(e).then((t=>t===this.__previousContext||t===e?t:this.__fullyResolveChain(t)))}__runOnBeforeCallbacks(e){const t=this.__previousContext||{},n=t.chain||[],r=e.chain;let s=Promise.resolve();const i=()=>({cancel:!0}),o=t=>rg(e,t);if(e.__divergedChainIndex=0,e.__skipAttach=!1,n.length){for(let t=0;t<Math.min(n.length,r.length)&&n[t].route===r[t].route&&(n[t].path===r[t].path||n[t].element===r[t].element)&&this.__isReusableElement(n[t].element,r[t].element);t=++e.__divergedChainIndex);if(e.__skipAttach=r.length===n.length&&e.__divergedChainIndex==r.length&&this.__isReusableElement(e.result,t.result),e.__skipAttach){for(let t=r.length-1;t>=0;t--)s=this.__runOnBeforeLeaveCallbacks(s,e,{prevent:i},n[t]);for(let t=0;t<r.length;t++)s=this.__runOnBeforeEnterCallbacks(s,e,{prevent:i,redirect:o},r[t]),n[t].element.location=ng(e,n[t].route)}else for(let t=n.length-1;t>=e.__divergedChainIndex;t--)s=this.__runOnBeforeLeaveCallbacks(s,e,{prevent:i},n[t])}if(!e.__skipAttach)for(let t=0;t<r.length;t++)t<e.__divergedChainIndex?t<n.length&&n[t].element&&(n[t].element.location=ng(e,n[t].route)):(s=this.__runOnBeforeEnterCallbacks(s,e,{prevent:i,redirect:o},r[t]),r[t].element&&(r[t].element.location=ng(e,r[t].route)));return s.then((t=>{if(t){if(t.cancel)return this.__previousContext.__renderId=e.__renderId,this.__previousContext;if(t.redirect)return this.__redirect(t.redirect,e.__redirectCount,e.__renderId)}return e}))}__runOnBeforeLeaveCallbacks(e,t,n,r){const s=ng(t);return e.then((e=>{if(this.__isLatestRender(t))return ig("onBeforeLeave",[s,n,this],r.element)(e)})).then((e=>{if(!(e||{}).redirect)return e}))}__runOnBeforeEnterCallbacks(e,t,n,r){const s=ng(t,r.route);return e.then((e=>{if(this.__isLatestRender(t))return ig("onBeforeEnter",[s,n,this],r.element)(e)}))}__isReusableElement(e,t){return!(!e||!t)&&(this.__createdByRouter.get(e)&&this.__createdByRouter.get(t)?e.localName===t.localName:e===t)}__isLatestRender(e){return e.__renderId===this.__lastStartedRenderId}__redirect(e,t,n){if(t>256)throw new Error(cm(`Too many redirects when rendering ${e.from}`));return this.resolve({pathname:this.urlForPath(e.pathname,e.params),redirectFrom:e.from,__redirectCount:(t||0)+1,__renderId:n})}__ensureOutlet(e=this.__outlet){if(!(e instanceof Node))throw new TypeError(cm(`Expected router outlet to be a valid DOM Node (but got ${e})`))}__updateBrowserHistory({pathname:e,search:t="",hash:n=""},r){if(window.location.pathname!==e||window.location.search!==t||window.location.hash!==n){const s=r?"replaceState":"pushState";window.history[s](null,document.title,e+t+n),window.dispatchEvent(new PopStateEvent("popstate",{state:"vaadin-router-ignore"}))}}__copyUnchangedElements(e,t){let n=this.__outlet;for(let r=0;r<e.__divergedChainIndex;r++){const s=t&&t.chain[r].element;if(s){if(s.parentNode!==n)break;e.chain[r].element=s,n=s}}return n}__addAppearingContent(e,t){this.__ensureOutlet(),this.__removeAppearingContent();const n=this.__copyUnchangedElements(e,t);this.__appearingContent=[],this.__disappearingContent=Array.from(n.children).filter((t=>this.__addedByRouter.get(t)&&t!==e.result));let r=n;for(let t=e.__divergedChainIndex;t<e.chain.length;t++){const s=e.chain[t].element;s&&(r.appendChild(s),this.__addedByRouter.set(s,!0),r===n&&this.__appearingContent.push(s),r=s)}}__removeDisappearingContent(){this.__disappearingContent&&og(this.__disappearingContent),this.__disappearingContent=null,this.__appearingContent=null}__removeAppearingContent(){this.__disappearingContent&&this.__appearingContent&&(og(this.__appearingContent),this.__disappearingContent=null,this.__appearingContent=null)}__runOnAfterLeaveCallbacks(e,t){if(t)for(let n=t.chain.length-1;n>=e.__divergedChainIndex&&this.__isLatestRender(e);n--){const r=t.chain[n].element;if(r)try{const n=ng(e);sg(r.onAfterLeave,[n,{},t.resolver],r)}finally{this.__disappearingContent.indexOf(r)>-1&&og(r.children)}}}__runOnAfterEnterCallbacks(e){for(let t=e.__divergedChainIndex;t<e.chain.length&&this.__isLatestRender(e);t++){const n=e.chain[t].element||{},r=ng(e,e.chain[t].route);sg(n.onAfterEnter,[r,{},e.resolver],n)}}__animateIfNeeded(e){const t=(this.__disappearingContent||[])[0],n=(this.__appearingContent||[])[0],r=[],s=e.chain;let i;for(let e=s.length;e>0;e--)if(s[e-1].route.animate){i=s[e-1].route.animate;break}if(t&&n&&i){const e=bm(i)&&i.leave||"leaving",s=bm(i)&&i.enter||"entering";r.push(eg(t,e)),r.push(eg(n,s))}return Promise.all(r).then((()=>e))}subscribe(){window.addEventListener("vaadin-router-go",this.__navigationEventHandler)}unsubscribe(){window.removeEventListener("vaadin-router-go",this.__navigationEventHandler)}__onNavigationEvent(e){const{pathname:t,search:n,hash:r}=e?e.detail:window.location;vm(this.__normalizePathname(t))&&(e&&e.preventDefault&&e.preventDefault(),this.render({pathname:t,search:n,hash:r},!0))}static setTriggers(...e){Xm(e)}urlForName(e,t){return this.__urlForName||(this.__urlForName=Ym(this)),ag(this.__urlForName(e,t),this)}urlForPath(e,t){return ag(cg.pathToRegexp.compile(e)(t),this)}static go(e){const{pathname:t,search:n,hash:r}=vm(e)?this.__createUrl(e,"http://a"):e;return ym("go",{pathname:t,search:n,hash:r})}}const ug=/\/\*[\*!]\s+vaadin-dev-mode:start([\s\S]*)vaadin-dev-mode:end\s+\*\*\//i,hg=window.Vaadin&&window.Vaadin.Flow&&window.Vaadin.Flow.clients;function dg(e,t){if("function"!=typeof e)return;const n=ug.exec(e.toString());if(n)try{e=new Function(n[1])}catch(e){console.log("vaadin-development-mode-detector: uncommentAndRun() failed",e)}return e(t)}window.Vaadin=window.Vaadin||{};void 0===window.Vaadin.developmentMode&&(window.Vaadin.developmentMode=function(){try{return!!localStorage.getItem("vaadin.developmentmode.force")||["localhost","127.0.0.1"].indexOf(window.location.hostname)>=0&&(hg?!(hg&&Object.keys(hg).map((e=>hg[e])).filter((e=>e.productionMode)).length>0):!dg((function(){return!0})))}catch(e){return!1}}()),window.Vaadin=window.Vaadin||{},window.Vaadin.registrations=window.Vaadin.registrations||[],window.Vaadin.registrations.push({is:"@vaadin/router",version:"1.7.4"}),function(e,t){if(window.Vaadin.developmentMode)dg(e,t)}((function(){})),cg.NavigationTrigger={POPSTATE:Cm,CLICK:km};let pg=class extends he{constructor(){super(),this.calculatedCost=new im(this,{task:async([e])=>{const t=await(await md.signer).getAddress();return await md.paymentsProcessor.calculateInvoice(hd.NEW_PROJECT,{client:t,token:e})},args:()=>[md.KANA_TOKEN]}),Gf(),lp.getMessage=async()=>"Please, enter a value"}static get styles(){return[l`
                :host {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 2rem;
                    padding: 1rem;
                    flex: 1 1 0%;
                }

                h1 {
                    font-size: 3rem;
                    display: block;
                    width: 100%;
                }

                h2 {
                    font-size: 2rem;
                    margin: 0.5rem 0 0.5rem;
                }

                h3 {
                    font-size: 1.5rem;
                    margin: 0;
                }

                hr {
                    border: none;
                    height: 2px;
                    background-color: var(--background-light-color);
                    margin: 0.5rem 0 1rem;
                }

                kana-input, input, kana-select {
                    flex: 1;
                    font-size: 1rem;
                    position: relative;
                }

                input, select {
                    font-family: sans;
                }

                input {
                    padding: 10px;
                    border: none;
                    border-radius: 5px;
                    background-color: var(--primary-color);
                    color: var(--foreground-color);
                    box-sizing: border-box;
                }
                
                input:focus {
                    outline: none;
                    box-shadow: 0 0 0 2px var(--highlighted-light-color);
                }

                .small-input, .small-input * {
                    flex: 0;
                }

                .small-input input {
                    width: 8rem;
                }

                .form-row {
                    display: flex;
                    gap: 1rem;
                    margin: 10px 0;
                    flex-flow: row wrap;
                }

                select {
                    padding: 10px;
                    padding-right: 2rem;
                    border: none;
                    border-radius: 5px;
                    background-color: var(--primary-color);
                    color: var(--foreground-color);
                    font-size: 1rem;
                    appearance: none;
                    cursor: pointer;
                    flex: 1;
                }
                
                select:focus {
                    outline: none;
                    box-shadow: 0 0 0 2px var(--highlighted-light-color);
                }
                
                span {
                    margin-left: 10px;
                }
                       
                kana-button-submit {
                    min-width: fit-content;
                    flex: 1;
                    font-size: 1.2rem;
                    min-height: 3rem;
                }

                kana-windowlet {
                    max-width: 32rem;
                    flex: 0 1 auto;
                }
            `,l`
                .form-row lion-validation-feedback {
                    position: absolute;
                    background-color: var(--highlighted-light-color);
                    color: var(--background-color);
                    padding: 10px;
                    border-radius: 10px;
                    display: inline-block;
                    max-width: 12rem;
                    font-size: 0.8rem;
                    line-height: 1.2;
                    bottom: 2rem;
                    margin-left: -3rem;
                    width: max-content;
                    z-index: 1
                }

                .form-row lion-validation-feedback:not([type="error"]) {
                    display: none;
                }
                
                .form-row lion-validation-feedback::before {
                    content: '';
                    position: absolute;
                    bottom: -18px;
                    left: 10%;
                    margin-left: -10px;
                    border: 10px solid transparent;
                    border-top: 15px solid var(--highlighted-light-color);
                }
                
            `]}async submitHandler(e){let t=e.target;if(t.hasFeedbackFor.includes("error"))return void t.formElements.find((e=>e.hasFeedbackFor.includes("error"))).focus();const n=e.target.modelValue,r=await md.paymentsProcessor.calculateInvoice(hd.NEW_PROJECT,{client:await(await await md.signer).getAddress(),token:md.KANA_TOKEN});0!=await md.paymentsProcessor.requestAllowance(r)&&await md.projectRegistry.newProject({projectName:n.name,abbreviation:n.abbreviation,description:n.description}).then((()=>cg.go("/projects/"))).catch(console.error)}render(){const e=this.calculatedCost.render({pending:()=>Q`<span><loading-icon size="1em"><loading-icon></span>`,complete:e=>Q`<span>(${e/10n**18n} $KANA)</span>`,error:e=>Q`<p>(${e} ????)</p>`});return Q`
            <h1>New Project</h1>
            <kana-windowlet>
                <h2>New project</h2>
                <h3>Begin your journey</h3>
                <hr />
                <label>Project info</label>
                <kana-form @submit="${this.submitHandler}">
                    <form @submit=${e=>e.preventDefault()}>
                        <div class="form-row">
                            <kana-input
                                label-sr-only="Name"
                                placeholder="Name"
                                name="name"
                                .validators="${[new Nf({min:4,max:16}),new lp]}"
                                .preprocessor=${pf(16)}
                            ></kana-input>
                            <kana-input
                                label-sr-only="Abbreviation"
                                placeholder="Abbreviation"
                                name="abbreviation"
                                class="small-input"
                                .validators="${[new Nf({min:2,max:8}),new lp]}"
                                .preprocessor=${pf(8)}
                            ></kana-input>
                        </div>
                        <div class="form-row">
                            <kana-input
                                label-sr-only="Description"
                                placeholder="Description (maximum 64 characters)"
                                name="description"
                                .validators="${[new Nf({min:0,max:64})]}"
                                .preprocessor=${pf(64)}
                            ></kana-input>
                        </div>
                        <div class="form-row">
                            <kana-button-submit>
                                Deploy new project ${e}
                            </kana-button-submit>
                        </div>
                    </form>
                </kana-form>
            </kana-windowlet>
        `}};pg=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe("new-project-page")],pg);var fg=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let mg=class extends yd{async fetchData(){this.isLoading=!0;const e=[],t=new zo(this.address,["function balanceOf(address owner) view returns (uint256 balance)","function name() view returns (string)","function symbol() view returns (string)","function contractsRepositoryLength() view returns (uint256)","function getContracts(uint256 from, uint256 to) view returns (address[])"],md.wallet),n=["function name() view returns (string)"];let r=await t.contractsRepositoryLength();if(0!=r){let s=await t.getContracts(0,r);for(let t of s){const r=new zo(t,n,md.wallet),s=await r.name();e.push(new cn({name:s,button:{text:"Edit",link:`${this.address}/${t}`},address:t,description:""}))}}this.isLoading=!1,this.items=e}render(){return Q`
            <h1>${this.name}</h1>
            <div class="cards">
                ${nm(this.isLoading,(()=>Q`<loading-icon></loading-icon>`),(()=>tm(this.items,(e=>e.name),(e=>Q`${e}`))))}
            </div>
            <a href="${this.address}/new-contract">
                <kana-button>Create new contract</kana-button>
            </a>
        `}};function gg(e){for(let t of e._eventHandlers)e.addEventListener(t.event,t.handler,t.options)}function yg(e,t){return(n,r,s)=>{null==n._eventHandlers&&Object.defineProperty(n,"_eventHandlers",{enumerable:!1,value:[]}),n._eventHandlers.push({handler:s.value,event:e,options:t})}}fg([ge({type:String})],mg.prototype,"name",void 0),fg([ge({type:String})],mg.prototype,"address",void 0),mg=fg([pe("contracts-page")],mg);var bg=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};class wg extends he{constructor(){super(),gg(this)}static get styles(){return df}get modelValue(){return this.kanaForm?.modelValue}get kanaForm(){return this.shadowRoot?.querySelector("kana-form")||void 0}modelUpdated(){null==this.kanaForm||this.kanaForm.hasFeedbackFor.find((e=>"error"==e))||this.dispatchEvent(new CustomEvent("payload-modified",{bubbles:!0,composed:!0}))}setParent(e){}load(e){this.loadedRawData=e;const t=gi.defaultAbiCoder().decode(Array.from(this.initializerABI.values()),this.loadedRawData),n=this.formatHook(Array.from(this.initializerABI.keys()).map(((e,n)=>({[e]:t[n]}))).reduce(((e,t)=>({...e,...t}))));return Object.entries(n).forEach((([e,t])=>{const n=this.shadowRoot?.querySelector(`[name=${e}]`);null!=n&&(n.modelValue=t)})),n}asUpstream(e){return e==this.loadedRawData}formatHook(e){return e}}wg.formAssociated=!0,bg([ge({type:Boolean})],wg.prototype,"enabled",void 0),bg([yg("model-value-changed",{capture:!0})],wg.prototype,"modelUpdated",null),bg([ye()],wg.prototype,"loadedRawData",void 0),BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),BigInt("1000000000000000000");const vg=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),Ag=(BigInt("0x8000000000000000000000000000000000000000000000000000000000000000"),BigInt(-1),BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),function(e,t,n){const r=n.get,s=n.set;if(null==r||null==s)throw new TypeError(`Property ${t} does not have a getter or setter.`);n.get=function(){const e=r.call(this);return void 0!==e?e:this.hasAttribute(t)?this.getAttribute(t):void 0},n.set=function(e){this[t]!==e&&(null!=e?this.setAttribute(t,String(e)):this.removeAttribute(t)),s.call(this,e)}});function _g(e){return function(t,n,r){const s=r.set,i=r.get;if(null==s||null==i)throw new TypeError(`Property ${n} does not have a getter or setter.`);return r.set=function(t){s.call(this,t);const r=e.call(this);null!=t?r.setAttribute(n,String(t)):r.removeAttribute(n)},r}}function Eg(e,t){return(n,r,s)=>{n.hasOwnProperty("_eventHandlers")||Object.defineProperty(n,"_eventHandlers",{enumerable:!1,value:[...n._eventHandlers||[]]}),n._eventHandlers.push({handler:s.value,event:e,options:t})}}var kg,xg,Cg,Ng,Pg=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o},Rg=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},Og=function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n};function Bg(){return this.getInnerElement()}class Sg extends HTMLElement{get name(){return Rg(this,kg,"f")}set name(e){Og(this,kg,e,"f")}get disabled(){return Rg(this,xg,"f")}set disabled(e){Og(this,xg,e,"f")}get readOnly(){return Rg(this,Cg,"f")}set readOnly(e){Og(this,Cg,e,"f")}get invalid(){return Rg(this,Ng,"f")}set invalid(e){Og(this,Ng,e,"f")}static get observedAttributes(){return["name","disabled","readOnly","invalid"]}constructor(){super(),kg.set(this,void 0),xg.set(this,void 0),Cg.set(this,void 0),Ng.set(this,void 0),this.elementInternals=this.attachInternals(),this.attachShadow({mode:"open"}),function(e){for(const t of e._eventHandlers)e.addEventListener(t.event,t.handler,t.options)}(this)}connectedCallback(){this.shadowRoot.innerHTML="",this.shadowRoot.append(this.getInnerElement()),this.dispatchEvent(new CustomEvent("input-connected",{detail:this,bubbles:!0,composed:!0}))}disconnectedCallback(){this.dispatchEvent(new CustomEvent("input-disconnected",{detail:this,bubbles:!0,composed:!0}))}handleInputDisconnected(e){e.stopPropagation()}handleInputConnected(e){e.stopPropagation()}}kg=new WeakMap,xg=new WeakMap,Cg=new WeakMap,Ng=new WeakMap,Sg.formAssociated=!0,Pg([Ag],Sg.prototype,"name",null),Pg([Ag,_g(Bg)],Sg.prototype,"disabled",null),Pg([Ag,_g(Bg)],Sg.prototype,"readOnly",null),Pg([Ag,_g(Bg)],Sg.prototype,"invalid",null),Pg([function(e,t,n){const r=n.value;return n.value=function(){const e=this.constructor.observedAttributes;console.log("hello there");for(const t of e)if(this.hasAttribute(t)){const e=this.getAttribute(t);this[t]=e}this.connectedCallback=r,r.apply(this)},n}],Sg.prototype,"connectedCallback",null),Pg([Eg("input-disconnected",{capture:!0})],Sg.prototype,"handleInputDisconnected",null),Pg([Eg("input-connected",{capture:!0})],Sg.prototype,"handleInputConnected",null);var Tg;const Ig=e=>{switch(e){case"datalist":case"fieldset":case"select":case"textarea":return e;default:return"input"}},Fg=["datalist","select","fieldset"];class Lg extends Sg{constructor(){super(...arguments),Tg.set(this,"text")}getInnerElement(){return this.inputElement}static get observedAttributes(){return[...super.observedAttributes,"type"]}get type(){return function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}(this,Tg,"f")}set type(e){!function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?s.call(e,n):s?s.value=n:t.set(e,n)}(this,Tg,e,"f")}set value(e){switch(this.type){case"select":case"datalist":if("object"==typeof e&&!Array.isArray(e)&&null!=e)throw new TypeError("Cannot assign object to selectlike field");if(Dg(this.inputElement).forEach((e=>e.selected=!1)),null!=e){const t=Array.isArray(e)?e:[e];for(const e of t){const t=this.inputElement.querySelector(`[name="${e}"]`);if(null==t)throw new RangeError("Option does not exist");t.selected=!0}}break;case"fieldset":if("object"!=typeof e||Array.isArray(e)||null==e)throw new TypeError("Attempting to set fieldset with non-object")}}get value(){switch(this.type){case"select":case"datalist":{const e=Dg(this.inputElement).map((e=>e.value));return 1==e.length?e[0]:0==e.length?null:e}case"fieldset":{const e={};return Array.from(this.inputElement?.children||[]).forEach((t=>{"value"in t&&"name"in t&&(e[t.name]=t.value)})),e}default:return this.inputElement.value}}render(){return this.inputElement.setAttribute("name",this.name||""),this.inputElement[null!=this.value?"setAttribute":"removeAttribute"]("value",this.value.toString()),this.inputElement[this.disabled?"setAttribute":"removeAttribute"]("disabled",""),this.inputElement[this.readOnly?"setAttribute":"removeAttribute"]("readonly",""),Fg.includes(this.type)&&(this.append(document.createElement("slot")),Array.from(this.children).forEach((e=>{this.inputElement?.append(e)}))),this.inputElement}reset(){this.inputElement=document.createElement(Ig(this.type)),this.value="",this.invalid=!1,this.disabled=this.disabled,this.readOnly=this.readOnly}attributeChangedCallback(e,t,n){if(t!=n&&"type"===e){const e=Ig(n);this.inputElement=document.createElement(e),"input"===e&&this.inputElement.setAttribute("type",n)}}}function Dg(e){return Array.from(e.querySelectorAll("> option:selected"))}Tg=new WeakMap,function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);i>3&&o&&Object.defineProperty(t,n,o)}([Ag],Lg.prototype,"type",null),window.customElements.define("pulpito-input",Lg);var Mg;const Ug="erc20-form";let $g=Mg=class extends wg{constructor(){super()}static get moduleSignature(){return"0xa7ea6982eb398487d571bb8d7880d038a52a2e20501e5d89251b0d77e2179769"}static get initializerABI(){return new Map([["_name","string"],["_symbol","string"],["_decimals","uint8"],["_supply","uint256"],["_mintTo","address"]])}get moduleSignature(){return Mg.moduleSignature}get initializerABI(){return Mg.initializerABI}load(e){const t=super.load(e);return this.getRootNode().host.newContractBaseWindowlet.value.formBase.value.querySelector("#root-name-input").modelValue=t._name,t}formatHook(e){return e._supply=Number(e._supply/10n**e._decimals),e._decimals=Number(e._decimals),e}async compileModuleParameters(e){const t=this.kanaForm;if(null==t)return null;if(t.validate(),t.hasFeedbackFor.includes("error"))return t.formElements.find((e=>e.hasFeedbackFor.includes("error"))).focus(),null;const n=t.modelValue;return{moduleSignature:Mg.moduleSignature,initParams:gi.defaultAbiCoder().encode(Array.from(Mg.initializerABI.values()),[e.name,n._symbol,n._decimals,BigInt(n._supply)*10n**BigInt(n._decimals),await(await md.signer).getAddress()])}}asUpstream(e){return e.slice(0,258)+hl.slice(2)+e.slice(322)==this.loadedRawData}render(){return Q`
            <h2>ERC20 module</h2>
            <hr>
            <h3>The fungible token standard</h3>
            <kana-form>
                <form>
                    <div class="form-row">
                        <span>
                            <label>Symbol</label>
                            <br/>
                            <kana-input
                                label-sr-only="Symbol"
                                placeholder="ie. USDC, BTC..."
                                name="_symbol"
                                .validators="${[new Nf({min:2,max:8}),new _f]}"
                                .preprocessor=${pf(8)}
                                class="small-input"
                            ></kana-input>
                        </span>
                    </div>
                    <div class="form-row">
                        <span>
                            <label>Supply</label>
                            <br/>
                            <kana-input-amount
                                label-sr-only="Supply"
                                placeholder="21000000"
                                name="_supply"
                                .validators="${[new Tp(1),new Ip(vg),new _f]}"
                                .preprocessor=${ff(vg)}
                                .modelValue=${21e6}
                            ></kana-input-amount>
                        </span>
                        <span>
                            <label>Token decimals</label>
                            <br/>
                            <kana-input-stepper
                                label-sr-only="Token decimals"
                                value="18"
                                name="_decimals"
                                .validators="${[new _f]}"
                                min="0"
                                max="32"
                            ></kana-input-stepper>
                        </span>
                    </form>
            </kana-form>

        `}};$g.formAssociated=!0,$g=Mg=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe(Ug)],$g);var jg;class Vg extends op{static get validatorName(){return"EqualOrMoreThan"}execute(e,t){try{return!(BigInt(e)>=BigInt(t.modelValue?._supply))}catch(e){return!0}}}const Hg="erc20_mint-burn";let Gg=jg=class extends wg{constructor(){super(),this.erc20Form=null}static get moduleSignature(){return"0x264bdde0a47811926d745d16b77330d8c0af6d379e622ae352a063a311402a23"}get moduleSignature(){return jg.moduleSignature}get initializerABI(){return new Map([["maxSupply","uint256"]])}setParent(e){this.erc20Form=e}formatHook(e){return null==this.erc20Form||(e.maxSupply=Number(e.maxSupply/10n**BigInt(this.erc20Form.modelValue?._decimals||18))),e}async compileModuleParameters(e){const t=this.kanaForm;if(null==t)return null;if(t.formElements.forEach((e=>e.validate({clearCurrentResult:!0}))),t.validate({clearCurrentResult:!0}),t.hasFeedbackFor.includes("error"))return t.formElements.find((e=>e.hasFeedbackFor.includes("error"))).focus(),null;const n=t.modelValue;return{moduleSignature:this.moduleSignature,initParams:gi.defaultAbiCoder().encode(Array.from(this.initializerABI.values()),[BigInt(n.maxSupply)*10n**BigInt(e[$g.moduleSignature]?._decimals)])}}render(){return Q`
            <hr>
            <h3>Basic mint and burn for ERC20</h3>
            <kana-form>
                <form>
                    <div class="form-row">
                        <span>
                            <label>Maximum supply</label>
                            <br/>
                            <kana-input-amount
                                label-sr-only="Maximum supply"
                                placeholder="21000000"
                                name="maxSupply"
                                .validators="${[new Tp(1),new Ip(vg),new _f,new Vg(this.erc20Form,{getMessage:()=>"Maximum supply cannot be lower than total supply"})]}"
                                .modelValue=${21e6}
                                .preprocessor=${ff(vg)}
                                ?readonly=${null!=this.loadedRawData}
                            ></kana-input-amount>
                        </span>
                    </div>
            </kana-form>

        `}};Gg.formAssociated=!0,Gg=jg=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe(Hg)],Gg);const zg=[{name:"ERC20",signature:$g.moduleSignature,customElement:Ug}],qg={[$g.moduleSignature]:[{name:"Mint/burn and variable supply",signature:Gg.moduleSignature,customElement:Hg}]},Qg=(e,t)=>{const n=e._$AN;if(void 0===n)return!1;for(const e of n)e._$AO?.(t,!1),Qg(e,t);return!0},Jg=e=>{let t,n;do{if(void 0===(t=e._$AM))break;n=t._$AN,n.delete(e),e=t}while(0===n?.size)},Kg=e=>{for(let t;t=e._$AM;e=t){let n=t._$AN;if(void 0===n)t._$AN=n=new Set;else if(n.has(e))break;n.add(e),Zg(t)}};function Wg(e){void 0!==this._$AN?(Jg(this),this._$AM=e,Kg(this)):this._$AM=e}function Yg(e,t=!1,n=0){const r=this._$AH,s=this._$AN;if(void 0!==s&&0!==s.size)if(t)if(Array.isArray(r))for(let e=n;e<r.length;e++)Qg(r[e],!1),Jg(r[e]);else null!=r&&(Qg(r,!1),Jg(r));else Qg(this,e)}const Zg=e=>{2==e.type&&(e._$AP??=Yg,e._$AQ??=Wg)};class Xg extends Qf{constructor(){super(...arguments),this._$AN=void 0}_$AT(e,t,n){super._$AT(e,t,n),Kg(this),this.isConnected=e._$AU}_$AO(e,t=!0){e!==this.isConnected&&(this.isConnected=e,e?this.reconnected?.():this.disconnected?.()),t&&(Qg(this,e),Jg(this))}setValue(e){if((e=>void 0===this._$Ct.strings)())this._$Ct._$AI(e,this);else{const t=[...this._$Ct._$AH];t[this._$Ci]=e,this._$Ct._$AI(t,this,0)}}disconnected(){}reconnected(){}}const ey=()=>new ty;class ty{}const ny=new WeakMap,ry=qf(class extends Xg{render(e){return K}update(e,[t]){const n=t!==this.Y;return n&&void 0!==this.Y&&this.rt(void 0),(n||this.lt!==this.ct)&&(this.Y=t,this.ht=e.options?.host,this.rt(this.ct=e.element)),K}rt(e){if("function"==typeof this.Y){const t=this.ht??globalThis;let n=ny.get(t);void 0===n&&(n=new WeakMap,ny.set(t,n)),void 0!==n.get(this.Y)&&this.Y.call(this.ht,void 0),n.set(this.Y,e),void 0!==e&&this.Y.call(this.ht,e)}else this.Y.value=e}get lt(){return"function"==typeof this.Y?ny.get(this.ht??globalThis)?.get(this.Y):this.Y?.value}disconnected(){this.lt===this.ct&&this.rt(void 0)}reconnected(){this.rt(this.ct)}});class sy{constructor(e){this.Y=e}disconnect(){this.Y=void 0}reconnect(e){this.Y=e}deref(){return this.Y}}class iy{constructor(){this.Z=void 0,this.q=void 0}get(){return this.Z}pause(){this.Z??=new Promise((e=>this.q=e))}resume(){this.q?.(),this.Z=this.q=void 0}}const oy=e=>!(e=>null===e||"object"!=typeof e&&"function"!=typeof e)(e)&&"function"==typeof e.then,ay=1073741823,ly=qf(class extends Xg{constructor(){super(...arguments),this._$Cwt=ay,this._$Cbt=[],this._$CK=new sy(this),this._$CX=new iy}render(...e){return e.find((e=>!oy(e)))??J}update(e,t){const n=this._$Cbt;let r=n.length;this._$Cbt=t;const s=this._$CK,i=this._$CX;this.isConnected||this.disconnected();for(let e=0;e<t.length&&!(e>this._$Cwt);e++){const o=t[e];if(!oy(o))return this._$Cwt=e,o;e<r&&o===n[e]||(this._$Cwt=ay,r=0,Promise.resolve(o).then((async e=>{for(;i.get();)await i.get();const t=s.deref();if(void 0!==t){const n=t._$Cbt.indexOf(o);n>-1&&n<t._$Cwt&&(t._$Cwt=n,t.setValue(e))}})))}return J}disconnected(){this._$CK.disconnect(),this._$CX.pause()}reconnected(){this._$CK.reconnect(this),this._$CX.resume()}});var cy=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let uy=class extends am{static get styles(){return[...super.styles,l`
                :host {
                    padding: 0;
                    overflow-x: hidden;
                    flex: 1;
                }
                
                loading-icon {
                    flex: 0 !important;
                }

                ul {
                    list-style: none;
                    padding: 0;
                    margin: 0;
                    overflow: scroll;
                    flex: 1 1 0;
                }
                
                li {
                    display: flex;
                    align-items: center;
                    padding: 0 1rem;
                    user-select: none;
                    box-sizing: border-box;
                    justify-content: space-between;
                    line-height: 3rem;
                }

                .base-module {
                    background-color: var(--primary-light-color);
                    color: var(--foreground-light-color);
                    position: sticky;
                    border-radius: inherit inherit 0 0;
                    height: 3.2rem;
                    width: 100%;
                }

                .redundant-container {
                    max-height: 100%;
                    overflow-y: auto;
                }

                input[type="radio"] {
                    display: none;
                }

                input[type="checkbox"] {
                    transform: scale(1.5);
                }
            `]}constructor(){super(),this.formCache={},this.onchainModules={},this.stateRecords={},this.contract=new Promise((e=>e(void 0)))}attributeChangedCallback(e,t,n){super.attributeChangedCallback(e,t,n),"contractaddress"==e&&t!=n&&(this.contract=new Promise(n?e=>e(new zo(n,["function getActiveModule(bytes32 signature) view returns (address)","function peek(bytes32 signature) view returns (bytes memory)"],md.wallet)):e=>e(void 0)))}connectedCallback(){super.connectedCallback(),this.moduleListChanged()}onClickRadioHandler(e){const t=e.currentTarget.querySelector("input");t.checked=!0,t.dispatchEvent(new Event("change-module"))}moduleListChanged(e){if(e&&e.target){const t=e.target;this.stateRecords[t.value]=t.checked||!1}this.getSelectedModules(),this.dispatchEvent(new CustomEvent("selected-modules-updated",{bubbles:!0,composed:!0})),this.requestUpdate()}getModuleForm(e){if(null==this.formCache[e.signature]){const t=document.createElement(e.customElement);this.formCache[e.signature]=t}return this.formCache[e.signature]}getSelectedModules(){const e=[zg.find((e=>e.signature==this.baseModule.signature)),...Array.from(this.shadowRoot?.querySelectorAll("input.module-enable[type='checkbox']:checked")||[]).map((e=>qg[this.baseModule.signature].find((t=>t.signature==e.getAttribute("value")))))],t=new Map;for(let n=0;n<e.length;n++){const r=e[n],s=this.getModuleForm(r);t.set(r.signature,s),s.setParent(t.values().next().value)}return t}async scanModule(e){const t=await this.contract;if(null==t)return delete this.onchainModules[e],[Yi,""];const n=await t.getActiveModule(e);n!=Yi?this.onchainModules[e]=[n,await t.peek(e)]:delete this.onchainModules[e];const r=this.formCache[e],s=this.onchainModules[e];return null!=r&&null!=s&&r.loadedRawData!=s[1]&&r.load(s[1]),void 0===this.stateRecords[e]&&n!=Yi&&(this.stateRecords[e]=!0,this.moduleListChanged()),s}moduleEntry(e,t=!1){const n=this.scanModule(e.signature),r=t=>Q`
                <input type="checkbox"
                    class="module-enable"
                    name="${e.signature}-enable"
                    value="${e.signature}"
                    ?checked=${this.stateRecords[e.signature]}
                    @change=${this.moduleListChanged}
                    ?hidden=${t}
                />
            `;return Q`
            <li 
                class=${t?"base-module":K}
                @click=${this.onClickRadioHandler}
            >
                <input type="radio"
                    name="_selectedModule"
                    value="${e.signature}"
                    .moduleInfo=${e}
                    ?checked=${t}
                />
                <label 
                    for="${t?K:e.signature}-enable"
                >
                    ${e.name}
                </label>
                ${t?"":ly(n.then((()=>r(!1))),Q`
                            <loading-icon size="1.2em"></loading-icon>
                            ${r(!0)}
                        `)}
            </li>
        `}async compile(e,t=!0){const n=[],r=this.getSelectedModules();Object.entries(this.onchainModules).forEach((e=>{null==r.get(e[0])&&n.push([id.UNINSTALL,{moduleSignature:e[0],initParams:"0x"}])}));const s=Array.from(r.entries());for(let r=0;r<s.length;r++){const[i,o]=s[r],a=this.onchainModules[i],l=await o.compileModuleParameters(e);if(null!=l)null!=a?o.asUpstream(l.initParams)||n.push([id.REINITIALIZE,l]):n.push([id.INSTALL,l]);else if(t)throw new Error("Errors in form")}return null!=await this.contract?n:n.map((e=>e[1]))}render(){const e=zg.find((e=>e.signature==this.baseModule.signature)),t=qg[this.baseModule.signature]||[],n=tm(t,(e=>this.moduleEntry(e)));return Q`
            <ul>
                ${this.moduleEntry(e,!0)}
                ${0!=t.length?n:Q`
                            <li style="margin-top: 15px; color: grey;">
                                Hmm... there seem to be no available plugins
                                for this contract type yet.
                            </li>
                        `}
            </ul>

        `}};cy([ye()],uy.prototype,"baseModule",void 0),cy([ye()],uy.prototype,"onchainModules",void 0),cy([ye()],uy.prototype,"stateRecords",void 0),cy([ge({type:String})],uy.prototype,"contractAddress",void 0),cy([ye()],uy.prototype,"contract",void 0),uy=cy([pe("modules-windowlet")],uy);var hy=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let dy=class extends he{constructor(){super(),this.basicModules=zg,this.allModules=[...zg,...Object.values(qg).flatMap((e=>e))],this.modulesList=ey(),this.formWindowlet=ey(),this.newContractBaseWindowlet=ey(),this.price=new Promise((e=>e(void 0))),gg(this),Gf()}static get styles(){return[we,l`
                :host {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    gap: 2rem;
                    padding: 1rem;
                    flex: 1 1 0%;
                }

                .expanded {
                    flex: 1 1 max-content;
                }

                kana-form {
                    width: 100%;
                    height: 100%;
                }
        
                kana-form > form {
                    display: flex;
                    flex: 0 1 max-content;
                    margin: 0 auto;
                    transition: flex 0.1s;
                    gap: 1rem;
                    height: 100%;
                }
                
                .contract-overview-group {
                    display: flex;
                    flex-flow: column wrap;
                    gap: 1rem;
                }
            `]}async submitHandler(e){if(!this.expandedMode)return;0==(Array.from(this.modulesList.value?.getSelectedModules().values())||[]).length&&console.log("How did you get here?");const t=void 0===this.contract?e=>()=>md.projectRegistry.newContract({name:this.getRoot().name,project:this.projectName,genesisModules:e,payment:ed.GQ}):e=>()=>md.projectRegistry.modifyContract({project:this.projectName,target:this.contract,moduleOperations:e,payment:ed.GQ});this.compile().then((e=>{if(null==e||0==e.length)throw new Error("Attempting to execute a no-op");this.getInvoice(e).then((e=>{if(e)return md.paymentsProcessor.requestAllowance(e);throw new Error("Invoice is undefined")})).then((e=>{if(e)return!0;throw new Error("Allowance request rejected")})).then(t(e)).then((()=>cg.go(`/projects/${this.projectAddress}`))).catch(console.error)})).catch(console.error)}captureSubmit(){this.shadowRoot.querySelector("kana-form").dispatchEvent(new Event("submit"))}expandForm(e){this.expandedMode=!0}baseTypeSelected(e){const t=e.detail.contractType;this.selectedBaseModule=t}selectedModulesUpdated(e){this.requestUpdate(),setTimeout((()=>this.recalculatePrice()),0)}recalculatePrice(e){this.price=this.compile(!1).then((e=>{if(null==e)throw new Error("Could not generate payload");return this.getInvoice(e)})).then((e=>{if(null==e)throw new Error("Could not calculate price");return Number(e/10n**18n)}))}async getInvoice(e){return await md.paymentsProcessor.calculateInvoice(this.contract?hd.EDIT_CONTRACT:hd.NEW_CONTRACT,{target:this.projectAddress,payload:e,token:md.KANA_TOKEN,client:await(await md.signer).getAddress()})}getRoot(){const e=this.newContractBaseWindowlet.value?.formBase.value?.modelValue;return this.modulesList.value?.getSelectedModules().forEach(((t,n)=>e[n]=t.modelValue)),e}async compile(e=!0){const t=this.getRoot();return this.modulesList.value?.compile(t,e)}render(){const e=this.modulesList.value?.getSelectedModules().values();return Q`
            ${nm(!this.expandedMode,(()=>Q`
                        <h1 id="page-title">
                            New contract for ${this.projectName}
                        </h1>
                    `))}
            <kana-form @submit=${this.submitHandler}>
                <form 
                    @submit=${e=>e.preventDefault()}
                    class="${this.expandedMode?"expanded":""}"
                >
                    <div class="contract-overview-group">
                        <kana-fieldset name="base-module-config">
                            <contract-base-windowlet 
                                ${ry(this.newContractBaseWindowlet)}
                                .moduleList=${this.basicModules}
                                contract="${this.contract}"
                                .selectedBaseModule=${this.selectedBaseModule}
                                .price=${this.price}
                                name="${null!=this.contractName?this.contractName:""}"
                            >
                            </contract-base-windowlet>
                        </kana-fieldset>
                        ${this.expandedMode?Q`
                                <modules-windowlet
                                    ${ry(this.modulesList)}
                                    .baseModule=${this.selectedBaseModule}
                                    contractAddress="${this.contract}"
                                >
                                </modules-windowlet>
                            `:""}
                    </div>
                    ${this.expandedMode?Q`
                                <kana-windowlet ${ry(this.formWindowlet)}>
                                    ${Array.from(e||[]).map((e=>Q`<div>${e}</div>`))}
                                </kana-windowlet>
                            `:null}
                </form>
            </kana-form>
        `}};hy([ge({type:String})],dy.prototype,"projectName",void 0),hy([ge({type:String})],dy.prototype,"projectAddress",void 0),hy([ge({type:String})],dy.prototype,"contract",void 0),hy([ge({type:String})],dy.prototype,"contractName",void 0),hy([ge({type:Boolean})],dy.prototype,"expandedMode",void 0),hy([ye()],dy.prototype,"price",void 0),hy([ye()],dy.prototype,"selectedBaseModule",void 0),hy([ye()],dy.prototype,"modulesList",void 0),hy([ye()],dy.prototype,"formWindowlet",void 0),hy([ye()],dy.prototype,"newContractBaseWindowlet",void 0),hy([yg("submit-form",{capture:!0})],dy.prototype,"captureSubmit",null),hy([yg("base-selected",{once:!0})],dy.prototype,"expandForm",null),hy([yg("base-selected",{capture:!0})],dy.prototype,"baseTypeSelected",null),hy([yg("selected-modules-updated",{capture:!0})],dy.prototype,"selectedModulesUpdated",null),hy([yg("payload-modified",{capture:!0})],dy.prototype,"recalculatePrice",null),dy=hy([pe("contract-page")],dy);let py=class extends am{constructor(){super(),this.formBase=ey(),this.price=new Promise((e=>e(void 0)))}connectedCallback(){super.connectedCallback()}static get styles(){return[...super.styles,...df,l`
                span {
                    margin-left: 10px;
                    line-height: 1em;
                }
                
                kana-icon {
                    font-size: 1.4em;
                }

                loading-icon {
                    margin-left: 10px;
                }
            `]}selectContractType(e){const t=e.target.value;this.selectedBaseModule=this.moduleList.find((e=>e.signature==t)),this.dispatchEvent(new CustomEvent("base-selected",{bubbles:!0,composed:!0,detail:{contractType:this.selectedBaseModule}}))}render(){const e=ly(this.price.then((e=>Q`
                    <span>
                        ${null!=e?`(${e} $KANA)`:Q`<kana-icon>pending</kana-icon>`}
                    </span>
                `)).catch((e=>(console.error(e),Q`<kana-icon>error</kana-icon>`))),Q`<loading-icon size="1.4em"></loading-icon>`),t=this.contract?Q`Update ${this.name}`:"Deploy new contract";return Q`
            <kana-form ${ry(this.formBase)}>
                <form>
                    <h2 id="contract-title">
                        ${null==this.name||""==this.name?"New contract":this.name}
                    </h2>
                    <hr />
                    <label>Project info</label>
                    <div class="form-row">
                        <kana-input
                            id="root-name-input"
                            label-sr-only="Contract name"
                            placeholder="Contract name"
                            name="name"
                            .validators="${[new Nf({min:4,max:16}),new _f]}"
                            .preprocessor=${pf(16)}
                            @input=${e=>this.name=e.target.value}
                        ></kana-input>
                        <kana-select
                            label-sr-only="Contract type"
                            name="type"
                            placeholder="Contract type"
                            class="small-input"
                            .validators=${[new _f]}
                            @change=${this.selectContractType}
                            .modelValue=${this.selectedBaseModule?.signature}
                            disabled=${this.contract||K}
                        >
                            <select name="type-select" slot="input">
                                <option hidden selected value>
                                    Select type
                                </option>
                                ${tm(this.moduleList,(e=>e.value),(e=>Q`
                                            <option
                                                name="${e.name}"
                                                value="${e.signature}"
                                            >
                                                ${e.name}
                                            </option>
                                        `))}
                            </select>
                        </kana-select>
                    </div>
                    <div class="form-row">
                        <kana-button-submit 
                            @click=${()=>this.dispatchEvent(new CustomEvent("submit-form",{bubbles:!0,composed:!0}))}
                            disabled=${null==this.selectedBaseModule||K}
                        >
                            ${t}${e}
                        </kana-button-submit>
                    </div>
                </form>
            </kana-form>
        `}};py.formAssociated=!0,hy([ge({type:String})],py.prototype,"name",void 0),hy([ge({type:String})],py.prototype,"contract",void 0),hy([ye()],py.prototype,"price",void 0),hy([ye()],py.prototype,"moduleList",void 0),hy([ye()],py.prototype,"selectedBaseModule",void 0),hy([ye()],py.prototype,"formBase",void 0),py=hy([pe("contract-base-windowlet")],py);var fy=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let my=class extends he{static get styles(){return[l`
                :host {
                    display: flex;
                    width: 100%;
                    height: 100%;
                    justify-content: center;
                    align-items: center;
                    font-family: Ablation;
                    font-weight: 900;
                }

                .floating {  
                    animation-name: floating;
                    animation-duration: 3s;
                    animation-iteration-count: infinite;
                    animation-timing-function: ease-in-out;
                    margin-left: 30px;
                    margin-top: 5px;
                }
                
                @keyframes floating {
                    from { transform: translate(0,  0px); }
                    65%  { transform: translate(0, 15px); }
                    to   { transform: translate(0, -0px); }    
                }

                h1 {
                    position: absolute;
                    font-size: 5.5rem;
                    bottom: 15%;
                }
            `]}render(){return Q`
            <img class="floating" src="media/img/home-banner.png">
            <h1>KANALOA NETWORK</h1>
        `}};fy([ge({type:String})],my.prototype,"name",void 0),my=fy([pe("home-page")],my);const gy=[{path:"/projects",component:"projects-page",name:"My projects",icon:"backup_table"},{path:"/new-project",component:"new-project-page",name:"New project",icon:"add_box"}],yy=[{path:"/",component:"home-page",name:"HOME"},{path:"/profile",component:"profile-page",name:"Profile"},{path:"/PROJECT_ID_OR_SIMILAR",component:"edit-project-page",name:"Edit Project"},...gy,{path:"/projects/:address",component:"contracts-page",action:async(e,t)=>{const n=new zo(e.params.address,["function name() view returns (string)"],md.wallet),r=await n.name(),s=t.component("contracts-page");return s.name=r,s.address=e.params.address,s}},{path:"/projects/:address/new-contract",component:"contract-page",action:async(e,t)=>{const n=new zo(e.params.address,["function name() view returns (string)"],md.wallet),r=await n.name(),s=t.component("contract-page");return s.projectName=`${r}`,s.projectAddress=e.params.address,s.expandedMode=!1,s}},{path:"/projects/:address/:contract",component:"contract-page",action:async(e,t)=>{const n=new zo(e.params.address,["function name() view returns (string)"],md.wallet),r=new zo(e.params.contract,["function name() view returns (string)","function getActiveModule(bytes32 signature) view returns (address)"],md.wallet);let s;for(const e of zg)if(await r.getActiveModule(e.signature)!=Yi){s=e;break}const i=await n.name(),o=t.component("contract-page");return o.selectedBaseModule=s,o.projectName=`${i}`,o.projectAddress=e.params.address,o.contract=e.params.contract,o.contractName=await r.name(),o.expandedMode=!0,o}}];var by=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let wy=class extends Ut{static get styles(){return[...super.styles]}};wy=by([pe("kana-nav-button")],wy);let vy=class extends he{constructor(){super(),this.opened=!1}static get styles(){return[l`
                :host {
                    width: var(--nav-width-collapsed);
                    transition: width 0.3s ease-in-out;
                    padding: 1rem;
                }
    
                :host([opened]) {
                    width: var(--nav-width-expanded);
                }
    
                nav {
                    display: flex;
                    flex-direction: column;
                    height: 100%;
                }
                    
                #logo-container {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    margin: 2rem 0 2.5rem 0;
                }

                #logo-container img {
                    max-width: 100%;
                    height: auto;
                }

                nav ul {
                    list-style: none;
                    padding: 0;
                    margin: 0;
                }
    
                nav li {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin-bottom: 1rem;
                }
    
                nav li a {
                    display: flex;
                    align-items: center;
                    text-decoration: none;
                    color: inherit;
                }
    
                kana-icon {
                    margin-right: 1rem;
                }
            `,l`
                :host {
                    --nav-width-collapsed: 90px;
                    --nav-width-expanded: 200px;
                }
            `,ve("-light")]}render(){return Q`
            <div id="logo-container">
                <a href="/">
                    <img src="/media/img/logo.png" alt="Kanaloa Network logo" />
                </a>
            </div>
            <nav>
                <ul>
                    ${tm(gy,(e=>e.path),(e=>Q`
                        <li>
                            <a href="${e.path}">
                                <kana-icon>${e.icon}</kana-icon>
                                ${e.name}
                            </a>
                        </li>
                    `))}
                </ul>
            </nav>
        `}};by([ge({reflect:!0,type:Boolean})],vy.prototype,"opened",void 0),vy=by([pe("kanaloa-navigation")],vy);var Ay=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let _y=class extends he{constructor(){super(),md.subscribe(this)}static get styles(){return l`
            :host {
                display: flex;
                align-items: center;
            }
            .wallet-img {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                object-fit: cover;
                margin-right: 8px;
                background-color: var(--foreground-color);
            }
            .wallet-address {
                display: inline-block;
                font-family: monospace;
            }
			.menu-link {
				text-decoration: none;
				color: inherit;
			}
            kana-icon {
                margin-left: 8px;
            }

            a {
                text-decoration: none;
                color: inherit;
            }
        `}disconnectedCallback(){super.disconnectedCallback(),md.unsubscribe(this)}render(){const e=Q`
                <kana-button 
                    @click=${()=>md.requestSigner()}>
                    Connect wallet
                </kana-button>
            `;return ly(md.signer.then((e=>e?.getAddress())).then((e=>e?Q`
                        <img class="wallet-img" 
                            src="${this.imageUrl||rn(e)}" 
                            alt="Wallet icon" />
                        <evm-address address="${e}" abridged></evm-address>
                        <kana-icon><a href="/projects">menu</a></kana-icon>
                    `:Promise.reject())).catch((()=>e)),e)}};Ay([ge({type:String})],_y.prototype,"imageUrl",void 0),_y=Ay([pe("kana-wallet-info")],_y);var Ey=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};let ky=class extends he{constructor(){super(),this.outlet=ey()}static get styles(){return[l`
                :host {
                    display: flex;
                    flex-direction: column;
                    flex-grow: 1;
                    padding: 1rem;
                    background-image: url("media/img/banner-bg.png");
                }

                kanaloa-outlet {
                    display: flex;
                    flex-direction: column;
                    flex-grow: 1;
                    margin-left: 2rem;
                }
                
                .top-bar {
                    display: flex;
                    justify-content: end;
                }
            `,ve("-dark")]}updated(){this.router?.setOutlet(this.outlet.value)}render(){return Q`
            <div class="top-bar">
                <kana-wallet-info>
                </kana-wallet-info>
            </div>
            <kanaloa-outlet 
                ${ry(this.outlet)}>
            </kanaloa-outlet>
        `}};Ey([ge()],ky.prototype,"router",void 0),ky=Ey([pe("kanaloa-display")],ky),Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;class xy extends he{render(){return Q`<slot></slot>`}connectedCallback(){super.connectedCallback(),"false"!==this.getAttribute("aria-hidden")?this.setAttribute("aria-hidden","true"):this.removeAttribute("aria-hidden")}}const Cy=l`:host{font-size:var(--md-icon-size, 24px);width:var(--md-icon-size, 24px);height:var(--md-icon-size, 24px);color:inherit;font-variation-settings:inherit;font-weight:400;font-family:var(--md-icon-font, Material Symbols Outlined);display:inline-flex;font-style:normal;place-items:center;place-content:center;line-height:1;overflow:hidden;letter-spacing:normal;text-transform:none;user-select:none;white-space:nowrap;word-wrap:normal;flex-shrink:0;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale}::slotted(svg){fill:currentColor}::slotted(*){height:100%;width:100%}/*# sourceMappingURL=icon-styles.css.map */
`;let Ny=class extends xy{};Ny.styles=[Cy],Ny=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe("md-icon")],Ny);var Py=s(692),Ry=s(408),Oy=s(278);let By=class extends he{constructor(){super(),this.router=new cg}static get styles(){return[be,l`
                :host {
                    display: flex;
                    height: 100%;
                }
            `]}firstUpdated(){this.router.setRoutes(yy)}render(){return Q`
            <kanaloa-navigation opened></kanaloa-navigation>
            <kanaloa-display 
                .router=${this.router}
            >
            </kanaloa-display>
        `}};By=function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}([pe("kanaloa-app")],By),(()=>{const e=document.createElement("style");e.innerText=`\n        html, body {\n            height: 100%;\n        }\n        ${Py.A}\n        ${Ry.A}\n        ${Oy.A}\n    `,document.head.appendChild(e)})(),document.querySelector("body")?.appendChild(new By)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBRTVCLFdBQUEzdEgsR0FDSThELFFBQ0F2TSxLQUFLMGtILE9BQVMsSUFBSXdCLEVBQ3RCLENBR0EsaUJBQVdsNkcsR0FDUCxNQUFPLENBQ0h3SyxHQUNBLENBQUc7Ozs7O2NBT1gsQ0FFQSxZQUFBckgsR0FDSW5QLEtBQUswa0gsT0FBTzdCLFVBQVV0RixHQUMxQixDQUVBLE1BQUExbkcsR0FDSSxPQUFPLENBQUk7OzswQkFHTzdWLEtBQUswa0g7OztTQUkzQixHQWhDUzBSLHNVQUFVLEVBRHRCLEdBQWMsZ0JBQ0ZBLElBb0NiLE1BQ0ksTUFBTWgvRSxFQUFNM3lDLFNBQVNJLGNBQWMsU0FDbkN1eUMsRUFBSWkvRSxVQUFZLHlFQUlWLGlCQUNBLGlCQUNBLGFBRU41eEgsU0FBU3lCLEtBQUtDLFlBQVlpeEMsRUFDN0IsRUFYRCxHQWFBM3lDLFNBQVM0akcsY0FBYyxTQUFTbGlHLFlBQVksSUFBSWl3SCIsInNvdXJjZXMiOlsid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyL3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL2Nzcy9tYXRlcmlhbC1pY29ucy5tb2R1bGUuY3NzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vY3NzL3Jlc2V0ZXIubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL21lZGlhL2ZvbnRzL2FibGF0aW9uLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2Nzcy10YWcuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L3JlYWN0aXZlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGl0LWh0bWwuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvbGl0LWVsZW1lbnQvbGl0LWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvY3VzdG9tLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvc3RhdGUuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9zcmMvY29tcG9uZW50cy9jb21tb24tc3R5bGVzLnRzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BvcGVuLXdjL2RlZHVwZS1taXhpbi9zcmMvZGVkdXBlTWl4aW4uanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vY29yZS9zcmMvRGlzYWJsZWRNaXhpbi5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9jb3JlL3NyYy9EaXNhYmxlZFdpdGhUYWJJbmRleE1peGluLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2NvcmUvbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9jc3MtdGFnLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2NvcmUvbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9yZWFjdGl2ZS1lbGVtZW50LmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2NvcmUvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2xpdC1odG1sLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2NvcmUvbm9kZV9tb2R1bGVzL2xpdC1lbGVtZW50L2xpdC1lbGVtZW50LmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2NvcmUvc3JjL2Jyb3dzZXJEZXRlY3Rpb24uanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vYnV0dG9uL3NyYy9MaW9uQnV0dG9uLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2J1dHRvbi9zcmMvTGlvbkJ1dHRvblJlc2V0LmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2J1dHRvbi9zcmMvTGlvbkJ1dHRvblN1Ym1pdC5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9jb21wb25lbnRzL2J1dHRvbi50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9jb21wb25lbnRzL2ljb24udHMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvbWluaWRlbnRpY29ucy9taW5pZGVudGljb25zLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vc3JjL2NvbXBvbmVudHMvbWluaWRlbnRpY29uLnRzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vc3JjL2NvbXBvbmVudHMvYWRkcmVzcy50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL2lmLWRlZmluZWQuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9zcmMvY29tcG9uZW50cy9jYXJkLnRzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vc3JjL2NvbXBvbmVudHMvbG9hZGVyLnRzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL192ZXJzaW9uLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3V0aWxzL3Byb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvZXJyb3JzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3V0aWxzL2RhdGEuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvbWF0aHMuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9hYnN0cmFjdC1jb2Rlci5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYXNzZXJ0LmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL191NjQuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL3V0aWxzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL3NoYTMuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL2tlY2Nhay5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hZGRyZXNzL2FkZHJlc3MuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL3R5cGVkLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2FiaS9jb2RlcnMvYWRkcmVzcy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL2Fub255bW91cy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL2FycmF5LmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2FiaS9jb2RlcnMvYm9vbGVhbi5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hYmkvY29kZXJzL2J5dGVzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2FiaS9jb2RlcnMvZml4ZWQtYnl0ZXMuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9udWxsLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2FiaS9jb2RlcnMvbnVtYmVyLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3V0aWxzL3V0ZjguanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2NvZGVycy90dXBsZS5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9oYXNoL2lkLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2FiaS9mcmFnbWVudHMuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWJpL2FiaS1jb2Rlci5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9hZGRyZXNzL2NoZWNrcy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9oYXNoL3R5cGVkLWRhdGEuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdHJhbnNhY3Rpb24vYWNjZXNzbGlzdC5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy9nZXR1cmwtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy9mZXRjaC5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS91dGlscy9iYXNlNjQtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jb25zdGFudHMvYWRkcmVzc2VzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2FiaS9pbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3Byb3ZpZGVyLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3V0aWxzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jb250cmFjdC93cmFwcGVycy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jb250cmFjdC9jb250cmFjdC5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AYWRyYWZmeS9lbnMtbm9ybWFsaXplL2Rpc3QvaW5kZXgubWpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL2hhc2gvbmFtZWhhc2guanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY29uc3RhbnRzL2hhc2hlcy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jcnlwdG8vc2lnbmF0dXJlLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL19zaGEyLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL3NoYTI1Ni5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9hYnN0cmFjdC91dGlscy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9hYnN0cmFjdC9tb2R1bGFyLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL2htYWMuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vYWJzdHJhY3QvY3VydmUuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vX3Nob3J0d191dGlscy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9zZWNwMjU2azEuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vY3J5cHRvL3NpZ25pbmcta2V5LmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3V0aWxzL3JscC1kZWNvZGUuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vdXRpbHMvcmxwLWVuY29kZS5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS90cmFuc2FjdGlvbi90cmFuc2FjdGlvbi5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS90cmFuc2FjdGlvbi9hZGRyZXNzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3V0aWxzL2Jhc2U1OC5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvZW5zLXJlc29sdmVyLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3Byb3ZpZGVycy9mb3JtYXQuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vYWRkcmVzcy9jb250cmFjdC1hZGRyZXNzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3Byb3ZpZGVycy9wbHVnaW5zLW5ldHdvcmsuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL25ldHdvcmsuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3N1YnNjcmliZXItcG9sbGluZy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvYWJzdHJhY3QtcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL2Fic3RyYWN0LXNpZ25lci5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvc3Vic2NyaWJlci1maWx0ZXJpZC5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItanNvbnJwYy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvY29tbXVuaXR5LmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3Byb3ZpZGVycy9wcm92aWRlci1hbmtyLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3Byb3ZpZGVycy9wcm92aWRlci1hbGNoZW15LmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3Byb3ZpZGVycy9wcm92aWRlci1jbG91ZGZsYXJlLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3Byb3ZpZGVycy9wcm92aWRlci1ldGhlcnNjYW4uanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3dzLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3Byb3ZpZGVyLXNvY2tldC5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItd2Vic29ja2V0LmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2V0aGVycy9saWIuZXNtL3Byb3ZpZGVycy9wcm92aWRlci1pbmZ1cmEuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL3Byb3ZpZGVyLXF1aWNrbm9kZS5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9wcm92aWRlcnMvcHJvdmlkZXItZmFsbGJhY2suanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vcHJvdmlkZXJzL2RlZmF1bHQtcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9zcmMvYXBpL2thbmFsb2EtcHJvamVjdC1yZWdpc3RyeS50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9hcGkvcGF5bWVudHMtcHJvY2Vzc29yLnRzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vc3JjL2FwaS9rYW5hbG9hLWV0aGVycy50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9wYWdlcy9hYnN0cmFjdC1jYXJkcy1wYWdlLnRzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2NvcmUvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZS1oZWxwZXJzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2NvcmUvc3JjL1Nsb3RNaXhpbi5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9mb3JtLWNvcmUvc3JjL3V0aWxzL2dldEFyaWFFbGVtZW50c0luUmlnaHREb21PcmRlci5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9mb3JtLWNvcmUvc3JjL3ZhbGlkYXRlL1VucGFyc2VhYmxlLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2Zvcm0tY29yZS9zcmMvcmVnaXN0cmF0aW9uL0Zvcm1SZWdpc3RlcmluZ01peGluLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2Zvcm0tY29yZS9zcmMvRm9ybUNvbnRyb2xNaXhpbi5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9jb3JlL3NyYy91dWlkLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2Zvcm0tY29yZS9zcmMvcmVnaXN0cmF0aW9uL0Zvcm1Db250cm9sc0NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vZm9ybS1jb3JlL3NyYy9yZWdpc3RyYXRpb24vRm9ybVJlZ2lzdHJhck1peGluLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BvcGVuLXdjL3Njb3BlZC1lbGVtZW50cy9zcmMvU2NvcGVkRWxlbWVudHNNaXhpbi5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9zaW5nbGV0b24tbWFuYWdlci9zcmMvU2luZ2xldG9uTWFuYWdlckNsYXNzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL3NpbmdsZXRvbi1tYW5hZ2VyL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AYnVuZGxlZC1lcy1tb2R1bGVzL21lc3NhZ2UtZm9ybWF0L01lc3NhZ2VGb3JtYXQuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL2xvY2FsaXplLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2xvY2FsaXplL3NyYy9Mb2NhbGl6ZU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL2lzTG9jYWxpemVFU01vZHVsZS5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9mb3JtLWNvcmUvc3JjL3V0aWxzL0FzeW5jUXVldWUuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vZm9ybS1jb3JlL3NyYy91dGlscy9TeW5jVXBkYXRhYmxlTWl4aW4uanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vZm9ybS1jb3JlL3NyYy92YWxpZGF0ZS9MaW9uVmFsaWRhdGlvbkZlZWRiYWNrLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2Zvcm0tY29yZS9zcmMvdmFsaWRhdGUvVmFsaWRhdG9yLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2Zvcm0tY29yZS9zcmMvdmFsaWRhdGUvUmVzdWx0VmFsaWRhdG9yLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2Zvcm0tY29yZS9zcmMvdmFsaWRhdGUvdmFsaWRhdG9ycy9SZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9mb3JtLWNvcmUvc3JjL3ZhbGlkYXRlL1ZhbGlkYXRlTWl4aW4uanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vZm9ybS1jb3JlL3NyYy91dGlscy9wYXNjYWxDYXNlLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2Zvcm0tY29yZS9zcmMvZm9ybS1ncm91cC9Gb3JtRWxlbWVudHNIYXZlTm9FcnJvci5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9mb3JtLWNvcmUvc3JjL2Zvcm0tZ3JvdXAvRm9ybUdyb3VwTWl4aW4uanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vZmllbGRzZXQvc3JjL0xpb25GaWVsZHNldC5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9mb3JtL3NyYy9MaW9uRm9ybS5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9mb3JtLWNvcmUvc3JjL0ZvY3VzTWl4aW4uanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vZm9ybS1jb3JlL3NyYy9Gb3JtYXRNaXhpbi5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9mb3JtLWNvcmUvc3JjL05hdGl2ZVRleHRGaWVsZE1peGluLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2Zvcm0tY29yZS9zcmMvSW50ZXJhY3Rpb25TdGF0ZU1peGluLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2Zvcm0tY29yZS9zcmMvTGlvbkZpZWxkLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2lucHV0L3NyYy9MaW9uSW5wdXQuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vZm9ybS1jb3JlL3NyYy9yZWdpc3RyYXRpb24vRm9ybVJlZ2lzdHJhclBvcnRhbE1peGluLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2xpc3Rib3gvc3JjL0xpb25PcHRpb25zLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2Zvcm0tY29yZS9zcmMvY2hvaWNlLWdyb3VwL0Nob2ljZUlucHV0TWl4aW4uanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbGlzdGJveC9zcmMvTGlvbk9wdGlvbi5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9zZWxlY3Qvc3JjL0xpb25TZWxlY3QuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vZm9ybS1jb3JlL3NyYy92YWxpZGF0ZS92YWxpZGF0b3JzL051bWJlclZhbGlkYXRvcnMuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vaW5wdXQtc3RlcHBlci9zcmMvTGlvbklucHV0U3RlcHBlci5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9jb3JlL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vY29yZS9ub2RlX21vZHVsZXMvbGl0LWh0bWwvYXN5bmMtZGlyZWN0aXZlLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2NvcmUvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvcHJpdmF0ZS1hc3luYy1oZWxwZXJzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2NvcmUvbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RpcmVjdGl2ZXMvdW50aWwuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL0xvY2FsaXplTWl4aW4uanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL3V0aWxzL2dldExvY2FsZS5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9sb2NhbGl6ZS9zcmMvbnVtYmVyL2dldERlY2ltYWxTZXBhcmF0b3IuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL251bWJlci91dGlscy9ub3JtYWxTcGFjZXMuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL251bWJlci9nZXRHcm91cFNlcGFyYXRvci5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9sb2NhbGl6ZS9zcmMvbnVtYmVyL3V0aWxzL25vcm1hbGl6ZS1mb3JtYXQtbnVtYmVyLXRvLXBhcnRzL2ZvcmNlQ3VycmVuY3lUb0VuZC5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9sb2NhbGl6ZS9zcmMvbnVtYmVyL3V0aWxzL25vcm1hbGl6ZS1mb3JtYXQtbnVtYmVyLXRvLXBhcnRzL2ZvcmNlRU5BVVN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL251bWJlci9mb3JtYXROdW1iZXJUb1BhcnRzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2xvY2FsaXplL3NyYy9udW1iZXIvdXRpbHMvZW1wdHlTdHJpbmdXaGVuTnVtYmVyTmFuLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2xvY2FsaXplL3NyYy9udW1iZXIvZ2V0U2VwYXJhdG9yc0Zyb21OdW1iZXIuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL251bWJlci91dGlscy9ub3JtYWxpemUtZm9ybWF0LW51bWJlci10by1wYXJ0cy9ub3JtYWxpemVJbnRsLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2xvY2FsaXplL3NyYy9udW1iZXIvdXRpbHMvbm9ybWFsaXplLWZvcm1hdC1udW1iZXItdG8tcGFydHMvZm9yY2VOb3JtYWxTcGFjZXMuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL251bWJlci91dGlscy9ub3JtYWxpemUtZm9ybWF0LW51bWJlci10by1wYXJ0cy9mb3JjZUFkZEdyb3VwU2VwYXJhdG9ycy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9sb2NhbGl6ZS9zcmMvbnVtYmVyL3V0aWxzL25vcm1hbGl6ZS1mb3JtYXQtbnVtYmVyLXRvLXBhcnRzL2ZvcmNlU3BhY2VJbnN0ZWFkT2ZaZXJvRm9yR3JvdXAuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL251bWJlci91dGlscy9ub3JtYWxpemUtZm9ybWF0LW51bWJlci10by1wYXJ0cy9mb3JjZVNwYWNlQmV0d2VlbkN1cnJlbmN5Q29kZUFuZE51bWJlci5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9sb2NhbGl6ZS9zcmMvbnVtYmVyL3V0aWxzL25vcm1hbGl6ZS1mb3JtYXQtbnVtYmVyLXRvLXBhcnRzL2ZvcmNlWWVuU3ltYm9sLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2xvY2FsaXplL3NyYy9udW1iZXIvdXRpbHMvbm9ybWFsaXplLWZvcm1hdC1udW1iZXItdG8tcGFydHMvZm9yY2VUcnlDdXJyZW5jeUNvZGUuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL251bWJlci9nZXRGcmFjdGlvbkRpZ2l0cy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9pbnB1dC1hbW91bnQvc3JjL2Zvcm1hdHRlcnMuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL251bWJlci9mb3JtYXROdW1iZXIuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vaW5wdXQtYW1vdW50L3NyYy9wYXJzZXJzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2xvY2FsaXplL3NyYy9udW1iZXIvcGFyc2VOdW1iZXIuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vaW5wdXQtYW1vdW50L3NyYy9MaW9uSW5wdXRBbW91bnQuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL251bWJlci9nZXRDdXJyZW5jeU5hbWUuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vbG9jYWxpemUvc3JjL251bWJlci91dGlscy9ub3JtYWxpemUtZ2V0LWN1cnJlbmN5LW5hbWUvZm9yY2VDdXJyZW5jeU5hbWVGb3JQSFBFbkdCLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2xvY2FsaXplL3NyYy9udW1iZXIvbm9ybWFsaXplQ3VycmVuY3lMYWJlbC5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9jb21wb25lbnRzL2Zvcm1zL2Zvcm1zLnRzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2Zvcm0tY29yZS9zcmMvdmFsaWRhdGUvdmFsaWRhdG9ycy9TdHJpbmdWYWxpZGF0b3JzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2xvY2FsaXplL3NyYy9kYXRlL25vcm1hbGl6ZURhdGVUaW1lLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2Zvcm0tY29yZS9zcmMvdmFsaWRhdGUvdmFsaWRhdG9ycy9EYXRlVmFsaWRhdG9ycy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi9mb3JtLWNvcmUvc3JjL3ZhbGlkYXRlL3Jlc3VsdFZhbGlkYXRvcnMvRGVmYXVsdFN1Y2Nlc3MuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vaW5wdXQtdGVsL3NyYy9QaG9uZVV0aWxNYW5hZ2VyLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL2lucHV0LXRlbC9zcmMvdmFsaWRhdG9ycy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9AbGlvbi92YWxpZGF0ZS1tZXNzYWdlcy9zcmMvbG9hZERlZmF1bHRGZWVkYmFja01lc3NhZ2VzLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vc3JjL3BhZ2VzL3Byb2ZpbGUtcGFnZS50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlLWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlcy9yZXBlYXQuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvZGlyZWN0aXZlcy93aGVuLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vc3JjL3BhZ2VzL3Byb2plY3RzLXBhZ2UudHMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpdC90YXNrL3Rhc2suanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9zcmMvY29tcG9uZW50cy93aW5kb3dsZXQudHMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQHZhYWRpbi9yb3V0ZXIvZGlzdC92YWFkaW4tcm91dGVyLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vc3JjL3BhZ2VzL25ldy1wcm9qZWN0LXBhZ2UudHMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9zcmMvcGFnZXMvY29udHJhY3RzLXBhZ2UudHMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9zcmMvdXRpbHMvZXZlbnQtaGFuZGxlci50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9jb21wb25lbnRzL21vZHVsZXMvY29tbW9ucy50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9jb25zdGFudHMvbnVtYmVycy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9jb21wb25lbnRzL2Zvcm1zL3B1bHBpdG8vdXRpbHMvYXR0cmlidXRlLWhlbHBlcnMudHMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9zcmMvY29tcG9uZW50cy9mb3Jtcy9wdWxwaXRvL3V0aWxzL2V2ZW50LWhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9zcmMvY29tcG9uZW50cy9mb3Jtcy9wdWxwaXRvL3B1bHBpdG8tYmFzZS50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9jb21wb25lbnRzL2Zvcm1zL3B1bHBpdG8vcHVscGl0by1pbnB1dC50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9jb21wb25lbnRzL21vZHVsZXMvZXJjMjAtZm9ybS50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9jb21wb25lbnRzL21vZHVsZXMvcGx1Z2lucy9lcmMyMC9lcmMyMC1taW50LWJ1cm4tZm9ybS50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9jb21wb25lbnRzL21vZHVsZXMvbW9kdWxlcy1saXN0LnRzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2FzeW5jLWRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL3JlZi5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL3ByaXZhdGUtYXN5bmMtaGVscGVycy5qcyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmVzL3VudGlsLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vc3JjL2NvbXBvbmVudHMvbW9kdWxlcy9tb2R1bGVzLXdpbmRvd2xldC50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9wYWdlcy9jb250cmFjdC1wYWdlLnRzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vc3JjL3BhZ2VzL2hvbWUtcGFnZS50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9yb3V0ZXMudHMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9zcmMvY29tcG9uZW50cy9rYW5hbG9hLW5hdmlnYXRpb24udHMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9zcmMvY29tcG9uZW50cy93YWxsZXQtaW5mby50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL3NyYy9jb21wb25lbnRzL2thbmFsb2EtZGlzcGxheS50cyIsIndlYnBhY2s6Ly9rYW5hbG9hLXByb2plY3QtbWFuYWdlci8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYubWpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC93ZWIvaWNvbi9pbnRlcm5hbC9pY29uLmpzIiwid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC93ZWIvaWNvbi9pbnRlcm5hbC9pY29uLXN0eWxlcy5jc3MuanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3dlYi9pY29uL2ljb24uanMiLCJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9zcmMvYXBwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcImthbmFsb2EtcHJvamVjdC1tYW5hZ2VyOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIm1hdGVyaWFsLWljb25zLnR0ZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnTWF0ZXJpYWwgSWNvbnMnO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pIGZvcm1hdCgndHJ1ZXR5cGUnKTtcbn1cblxuLmdSZDFvWUhJeERLTjF1djFsUlJtIHtcbiAgZm9udC1mYW1pbHk6ICdNYXRlcmlhbCBJY29ucyc7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1zaXplOiAyNHB4O1xuICBsaW5lLWhlaWdodDogMTtcbiAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgd29yZC13cmFwOiBub3JtYWw7XG4gIGRpcmVjdGlvbjogbHRyO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9jc3MvbWF0ZXJpYWwtaWNvbnMubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLDZCQUE2QjtFQUM3QixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLCtEQUFpRDtBQUNuRDs7QUFFQTtFQUNFLDZCQUE2QjtFQUM3QixtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixjQUFjO0VBQ2Qsc0JBQXNCO0VBQ3RCLG9CQUFvQjtFQUNwQixxQkFBcUI7RUFDckIsbUJBQW1CO0VBQ25CLGlCQUFpQjtFQUNqQixjQUFjO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdNYXRlcmlhbCBJY29ucyc7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgc3JjOiB1cmwoXFxcIm1hdGVyaWFsLWljb25zLnR0ZlxcXCIpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXG59XFxuXFxuLm1hdGVyaWFsLWljb25zIHtcXG4gIGZvbnQtZmFtaWx5OiAnTWF0ZXJpYWwgSWNvbnMnO1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtc2l6ZTogMjRweDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIHdvcmQtd3JhcDogbm9ybWFsO1xcbiAgZGlyZWN0aW9uOiBsdHI7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcIm1hdGVyaWFsLWljb25zXCI6IGBnUmQxb1lISXhES04xdXYxbFJSbWBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAqLFxuKjo6YmVmb3JlLFxuKjo6YWZ0ZXIge1xuICBib3gtc2l6aW5nOiBpbmhlcml0O1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDA7XG59XG5cbmh0bWwge1xuICBsaW5lLWhlaWdodDogMS4xNTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG59XG5cbm1haW4ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuaDEge1xuICBmb250LXNpemU6IDJlbTtcbiAgbWFyZ2luOiAwLjY3ZW0gMDtcbn1cblxucCArIHAge1xuICBtYXJnaW4tdG9wOiAxcmVtO1xufVxuXG5hIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG5cbmFiYnJbdGl0bGVdIHtcbiAgLXdlYmtpdC10ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7XG4gICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkO1xufVxuXG5jb2RlLFxua2JkLFxuc2FtcCxcbnByZSB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcbiAgZm9udC1zaXplOiAxZW07XG59XG5cbnN1YixcbnN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTtcbn1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07XG59XG5cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xuICBib3JkZXI6IDFweCBzb2xpZCBjdXJyZW50Q29sb3I7XG59XG5cbmJ1dHRvbiB7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbn1cblxuYnV0dG9uLFxuW3R5cGU9YnV0dG9uXSxcblt0eXBlPXJlc2V0XSxcblt0eXBlPXN1Ym1pdF0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgcGFkZGluZzogMXB4IDZweDtcbn1cblxuaW5wdXQge1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbn1cblxuaW5wdXQsXG50ZXh0YXJlYSB7XG4gIHBhZGRpbmc6IDFweDtcbn1cblxuZmllbGRzZXQge1xuICBib3JkZXI6IDFweCBzb2xpZCBjdXJyZW50Q29sb3I7XG4gIG1hcmdpbjogMCAycHg7XG59XG5cbmxlZ2VuZCB7XG4gIGNvbG9yOiBpbmhlcml0O1xuICBkaXNwbGF5OiB0YWJsZTtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xufVxuXG5wcm9ncmVzcyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xufVxuXG5zZWxlY3Qge1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbn1cblxudGV4dGFyZWEge1xuICBvdmVyZmxvdzogYXV0bztcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcbn1cblxuW3R5cGU9c2VhcmNoXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuICBvdXRsaW5lLW9mZnNldDogLTJweDtcbn1cblxuW3R5cGU9Y29sb3JdIHtcbiAgYmFja2dyb3VuZDogaW5oZXJpdDtcbn1cblxuOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcbiAgaGVpZ2h0OiBhdXRvO1xufVxuXG46Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xuICBjb2xvcjogaW5oZXJpdDtcbiAgb3BhY2l0eTogMC41O1xufVxuXG46Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24sXG46Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG4gIGZvbnQ6IGluaGVyaXQ7XG59XG5cbjo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlcjogMDtcbn1cblxuOi1tb3otZm9jdXNyaW5nIHtcbiAgb3V0bGluZTogMXB4IGRvdHRlZCBCdXR0b25UZXh0O1xufVxuXG46LW1vei11aS1pbnZhbGlkIHtcbiAgYm94LXNoYWRvdzogbm9uZTtcbn1cblxuaHIge1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgaGVpZ2h0OiAwO1xuICBjb2xvcjogaW5oZXJpdDtcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG59XG5cbmRsLFxub2wsXG51bCB7XG4gIG1hcmdpbjogMDtcbn1cblxub2wgb2wsXG5vbCB1bCxcbm9sIGRsLFxudWwgb2wsXG51bCB1bCxcbnVsIGRsLFxuZGwgb2wsXG5kbCB1bCxcbmRsIGRsIHtcbiAgbWFyZ2luOiAwO1xufVxuXG5iLFxuc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbn1cblxuYXVkaW8sXG52aWRlbyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgaGVpZ2h0OiAwO1xufVxuXG5pbWcge1xuICBib3JkZXI6IDA7XG59XG5cbnN2Zzpub3QoOnJvb3QpIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxudGFibGUge1xuICB0ZXh0LWluZGVudDogMDtcbiAgYm9yZGVyLWNvbG9yOiBpbmhlcml0O1xufVxuXG5kZXRhaWxzIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbmRpYWxvZyB7XG4gIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XG4gIGJvcmRlcjogc29saWQ7XG4gIGNvbG9yOiBpbmhlcml0O1xuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiBmaXQtY29udGVudDtcbiAgbGVmdDogMDtcbiAgbWFyZ2luOiBhdXRvO1xuICBwYWRkaW5nOiAxZW07XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcmlnaHQ6IDA7XG4gIHdpZHRoOiBmaXQtY29udGVudDtcbn1cblxuZGlhbG9nOm5vdChbb3Blbl0pIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuc3VtbWFyeSB7XG4gIGRpc3BsYXk6IGxpc3QtaXRlbTtcbn1cblxuY2FudmFzIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuXG50ZW1wbGF0ZSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbltoaWRkZW5dIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuOnJvb3Qge1xuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIFJvYm90bywgT3h5Z2VuLCBVYnVudHUsIENhbnRhcmVsbCwgXCJPcGVuIFNhbnNcIiwgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBzYW5zLXNlcmlmO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9jc3MvcmVzZXRlci5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7RUFHRSxtQkFBbUI7RUFDbkIsVUFBVTtFQUNWLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixzQkFBc0I7RUFDdEIsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsY0FBYztBQUNoQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSw2QkFBNkI7QUFDL0I7O0FBRUE7RUFDRSx5Q0FBeUM7VUFDakMsaUNBQWlDO0FBQzNDOztBQUVBOzs7O0VBSUUsaUNBQWlDO0VBQ2pDLGNBQWM7QUFDaEI7O0FBRUE7O0VBRUUsY0FBYztFQUNkLGNBQWM7RUFDZCxrQkFBa0I7RUFDbEIsd0JBQXdCO0FBQzFCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTs7Ozs7RUFLRSxvQkFBb0I7RUFDcEIsOEJBQThCO0FBQ2hDOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLG9CQUFvQjtBQUN0Qjs7QUFFQTs7OztFQUlFLDBCQUEwQjtFQUMxQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7O0VBRUUsWUFBWTtBQUNkOztBQUVBO0VBQ0UsOEJBQThCO0VBQzlCLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxjQUFjO0VBQ2QsZUFBZTtFQUNmLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQix3QkFBd0I7QUFDMUI7O0FBRUE7RUFDRSxvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsNkJBQTZCO0VBQzdCLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTs7RUFFRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsWUFBWTtBQUNkOztBQUVBOztFQUVFLDBCQUEwQjtFQUMxQixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxTQUFTO0FBQ1g7O0FBRUE7RUFDRSw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsU0FBUztFQUNULGNBQWM7RUFDZCxpQkFBaUI7QUFDbkI7O0FBRUE7OztFQUdFLFNBQVM7QUFDWDs7QUFFQTs7Ozs7Ozs7O0VBU0UsU0FBUztBQUNYOztBQUVBOztFQUVFLG1CQUFtQjtBQUNyQjs7QUFFQTs7RUFFRSxxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsU0FBUztBQUNYOztBQUVBO0VBQ0UsU0FBUztBQUNYOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsY0FBYztFQUNkLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsYUFBYTtFQUNiLGNBQWM7RUFDZCxjQUFjO0VBQ2QsbUJBQW1CO0VBQ25CLE9BQU87RUFDUCxZQUFZO0VBQ1osWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixRQUFRO0VBQ1Isa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0Usd0lBQXdJO0FBQzFJXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiosXFxuKjo6YmVmb3JlLFxcbio6OmFmdGVyIHtcXG4gIGJveC1zaXppbmc6IGluaGVyaXQ7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG5odG1sIHtcXG4gIGxpbmUtaGVpZ2h0OiAxLjE1O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbn1cXG5cXG5tYWluIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG5oMSB7XFxuICBmb250LXNpemU6IDJlbTtcXG4gIG1hcmdpbjogMC42N2VtIDA7XFxufVxcblxcbnAgKyBwIHtcXG4gIG1hcmdpbi10b3A6IDFyZW07XFxufVxcblxcbmEge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbmFiYnJbdGl0bGVdIHtcXG4gIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkO1xcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7XFxufVxcblxcbmNvZGUsXFxua2JkLFxcbnNhbXAsXFxucHJlIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcXG4gIGZvbnQtc2l6ZTogMWVtO1xcbn1cXG5cXG5zdWIsXFxuc3VwIHtcXG4gIGZvbnQtc2l6ZTogNzUlO1xcbiAgbGluZS1oZWlnaHQ6IDA7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcblxcbnN1YiB7XFxuICBib3R0b206IC0wLjI1ZW07XFxufVxcblxcbnN1cCB7XFxuICB0b3A6IC0wLjVlbTtcXG59XFxuXFxuYnV0dG9uLFxcbmlucHV0LFxcbm9wdGdyb3VwLFxcbnNlbGVjdCxcXG50ZXh0YXJlYSB7XFxuICBsaW5lLWhlaWdodDogaW5oZXJpdDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGN1cnJlbnRDb2xvcjtcXG59XFxuXFxuYnV0dG9uIHtcXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XFxufVxcblxcbmJ1dHRvbixcXG5bdHlwZT1idXR0b25dLFxcblt0eXBlPXJlc2V0XSxcXG5bdHlwZT1zdWJtaXRdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xcbiAgcGFkZGluZzogMXB4IDZweDtcXG59XFxuXFxuaW5wdXQge1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcbmlucHV0LFxcbnRleHRhcmVhIHtcXG4gIHBhZGRpbmc6IDFweDtcXG59XFxuXFxuZmllbGRzZXQge1xcbiAgYm9yZGVyOiAxcHggc29saWQgY3VycmVudENvbG9yO1xcbiAgbWFyZ2luOiAwIDJweDtcXG59XFxuXFxubGVnZW5kIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgZGlzcGxheTogdGFibGU7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xcbn1cXG5cXG5wcm9ncmVzcyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcblxcbnNlbGVjdCB7XFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXG59XFxuXFxudGV4dGFyZWEge1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbn1cXG5cXG5bdHlwZT1zZWFyY2hdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7XFxufVxcblxcblt0eXBlPWNvbG9yXSB7XFxuICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xcbn1cXG5cXG46Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXFxuOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcXG4gIGhlaWdodDogYXV0bztcXG59XFxuXFxuOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgb3BhY2l0eTogMC41O1xcbn1cXG5cXG46Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24sXFxuOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcXG4gIGZvbnQ6IGluaGVyaXQ7XFxufVxcblxcbjo6LW1vei1mb2N1cy1pbm5lciB7XFxuICBib3JkZXI6IDA7XFxufVxcblxcbjotbW96LWZvY3VzcmluZyB7XFxuICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7XFxufVxcblxcbjotbW96LXVpLWludmFsaWQge1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG59XFxuXFxuaHIge1xcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XFxuICBoZWlnaHQ6IDA7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xcbn1cXG5cXG5kbCxcXG5vbCxcXG51bCB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbm9sIG9sLFxcbm9sIHVsLFxcbm9sIGRsLFxcbnVsIG9sLFxcbnVsIHVsLFxcbnVsIGRsLFxcbmRsIG9sLFxcbmRsIHVsLFxcbmRsIGRsIHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXFxuYixcXG5zdHJvbmcge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcXG59XFxuXFxuYXVkaW8sXFxudmlkZW8ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIGhlaWdodDogMDtcXG59XFxuXFxuaW1nIHtcXG4gIGJvcmRlcjogMDtcXG59XFxuXFxuc3ZnOm5vdCg6cm9vdCkge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxudGFibGUge1xcbiAgdGV4dC1pbmRlbnQ6IDA7XFxuICBib3JkZXItY29sb3I6IGluaGVyaXQ7XFxufVxcblxcbmRldGFpbHMge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbmRpYWxvZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xcbiAgYm9yZGVyOiBzb2xpZDtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xcbiAgbGVmdDogMDtcXG4gIG1hcmdpbjogYXV0bztcXG4gIHBhZGRpbmc6IDFlbTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAwO1xcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xcbn1cXG5cXG5kaWFsb2c6bm90KFtvcGVuXSkge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuc3VtbWFyeSB7XFxuICBkaXNwbGF5OiBsaXN0LWl0ZW07XFxufVxcblxcbmNhbnZhcyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbnRlbXBsYXRlIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbltoaWRkZW5dIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbjpyb290IHtcXG4gIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFJvYm90bywgT3h5Z2VuLCBVYnVudHUsIENhbnRhcmVsbCwgXFxcIk9wZW4gU2Fuc1xcXCIsIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIHNhbnMtc2VyaWY7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge307XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIvbWVkaWEvZm9udHMvQWJsYXRpb25FeHRyYUJvbGQud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IG5ldyBVUkwoXCIvbWVkaWEvZm9udHMvQWJsYXRpb25CbGFjay53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYEBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAnQWJsYXRpb24nO1xuICAgIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pIGZvcm1hdCgnd29mZjInKTtcbiAgICBmb250LXdlaWdodDogODAwO1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgICBmb250LWZhbWlseTogJ0FibGF0aW9uJztcbiAgICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX199KSBmb3JtYXQoJ3dvZmYyJyk7XG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgZm9udC1kaXNwbGF5OiBzd2FwO1xufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vbWVkaWEvZm9udHMvYWJsYXRpb24ubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLHVCQUF1QjtJQUN2Qiw0REFBZ0U7SUFDaEUsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLHVCQUF1QjtJQUN2Qiw0REFBNEQ7SUFDNUQsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixrQkFBa0I7QUFDdEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGZvbnQtZmFjZSB7XFxuICAgIGZvbnQtZmFtaWx5OiAnQWJsYXRpb24nO1xcbiAgICBzcmM6IHVybCgnL21lZGlhL2ZvbnRzL0FibGF0aW9uRXh0cmFCb2xkLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpO1xcbiAgICBmb250LXdlaWdodDogODAwO1xcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XFxuICAgIGZvbnQtZGlzcGxheTogc3dhcDtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICAgIGZvbnQtZmFtaWx5OiAnQWJsYXRpb24nO1xcbiAgICBzcmM6IHVybCgnL21lZGlhL2ZvbnRzL0FibGF0aW9uQmxhY2sud29mZjInKSBmb3JtYXQoJ3dvZmYyJyk7XFxuICAgIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gICAgZm9udC1kaXNwbGF5OiBzd2FwO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHt9O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuYnVuZGxlLmpzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ3OTI6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0aWYoY2h1bmtJZHMuc29tZSgoaWQpID0+IChpbnN0YWxsZWRDaHVua3NbaWRdICE9PSAwKSkpIHtcblx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHJ1bnRpbWUpIHZhciByZXN1bHQgPSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR9XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0fVxuXG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5ra2FuYWxvYV9wcm9qZWN0X21hbmFnZXJcIl0gPSBzZWxmW1wid2VicGFja0NodW5ra2FuYWxvYV9wcm9qZWN0X21hbmFnZXJcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD1nbG9iYWxUaGlzLGU9dC5TaGFkb3dSb290JiYodm9pZCAwPT09dC5TaGFkeUNTU3x8dC5TaGFkeUNTUy5uYXRpdmVTaGFkb3cpJiZcImFkb3B0ZWRTdHlsZVNoZWV0c1wiaW4gRG9jdW1lbnQucHJvdG90eXBlJiZcInJlcGxhY2VcImluIENTU1N0eWxlU2hlZXQucHJvdG90eXBlLHM9U3ltYm9sKCksbz1uZXcgV2Vha01hcDtjbGFzcyBue2NvbnN0cnVjdG9yKHQsZSxvKXtpZih0aGlzLl8kY3NzUmVzdWx0JD0hMCxvIT09cyl0aHJvdyBFcnJvcihcIkNTU1Jlc3VsdCBpcyBub3QgY29uc3RydWN0YWJsZS4gVXNlIGB1bnNhZmVDU1NgIG9yIGBjc3NgIGluc3RlYWQuXCIpO3RoaXMuY3NzVGV4dD10LHRoaXMudD1lfWdldCBzdHlsZVNoZWV0KCl7bGV0IHQ9dGhpcy5vO2NvbnN0IHM9dGhpcy50O2lmKGUmJnZvaWQgMD09PXQpe2NvbnN0IGU9dm9pZCAwIT09cyYmMT09PXMubGVuZ3RoO2UmJih0PW8uZ2V0KHMpKSx2b2lkIDA9PT10JiYoKHRoaXMubz10PW5ldyBDU1NTdHlsZVNoZWV0KS5yZXBsYWNlU3luYyh0aGlzLmNzc1RleHQpLGUmJm8uc2V0KHMsdCkpfXJldHVybiB0fXRvU3RyaW5nKCl7cmV0dXJuIHRoaXMuY3NzVGV4dH19Y29uc3Qgcj10PT5uZXcgbihcInN0cmluZ1wiPT10eXBlb2YgdD90OnQrXCJcIix2b2lkIDAscyksaT0odCwuLi5lKT0+e2NvbnN0IG89MT09PXQubGVuZ3RoP3RbMF06ZS5yZWR1Y2UoKChlLHMsbyk9PmUrKHQ9PntpZighMD09PXQuXyRjc3NSZXN1bHQkKXJldHVybiB0LmNzc1RleHQ7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpcmV0dXJuIHQ7dGhyb3cgRXJyb3IoXCJWYWx1ZSBwYXNzZWQgdG8gJ2NzcycgZnVuY3Rpb24gbXVzdCBiZSBhICdjc3MnIGZ1bmN0aW9uIHJlc3VsdDogXCIrdCtcIi4gVXNlICd1bnNhZmVDU1MnIHRvIHBhc3Mgbm9uLWxpdGVyYWwgdmFsdWVzLCBidXQgdGFrZSBjYXJlIHRvIGVuc3VyZSBwYWdlIHNlY3VyaXR5LlwiKX0pKHMpK3RbbysxXSksdFswXSk7cmV0dXJuIG5ldyBuKG8sdCxzKX0sUz0ocyxvKT0+e2lmKGUpcy5hZG9wdGVkU3R5bGVTaGVldHM9by5tYXAoKHQ9PnQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0P3Q6dC5zdHlsZVNoZWV0KSk7ZWxzZSBmb3IoY29uc3QgZSBvZiBvKXtjb25zdCBvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxuPXQubGl0Tm9uY2U7dm9pZCAwIT09biYmby5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLG4pLG8udGV4dENvbnRlbnQ9ZS5jc3NUZXh0LHMuYXBwZW5kQ2hpbGQobyl9fSxjPWU/dD0+dDp0PT50IGluc3RhbmNlb2YgQ1NTU3R5bGVTaGVldD8odD0+e2xldCBlPVwiXCI7Zm9yKGNvbnN0IHMgb2YgdC5jc3NSdWxlcyllKz1zLmNzc1RleHQ7cmV0dXJuIHIoZSl9KSh0KTp0O2V4cG9ydHtuIGFzIENTU1Jlc3VsdCxTIGFzIGFkb3B0U3R5bGVzLGkgYXMgY3NzLGMgYXMgZ2V0Q29tcGF0aWJsZVN0eWxlLGUgYXMgc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzLHIgYXMgdW5zYWZlQ1NTfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNzcy10YWcuanMubWFwXG4iLCJpbXBvcnR7Z2V0Q29tcGF0aWJsZVN0eWxlIGFzIHQsYWRvcHRTdHlsZXMgYXMgc31mcm9tXCIuL2Nzcy10YWcuanNcIjtleHBvcnR7Q1NTUmVzdWx0LGFkb3B0U3R5bGVzLGNzcyxnZXRDb21wYXRpYmxlU3R5bGUsc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzLHVuc2FmZUNTU31mcm9tXCIuL2Nzcy10YWcuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NvbnN0e2lzOmksZGVmaW5lUHJvcGVydHk6ZSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6cixnZXRPd25Qcm9wZXJ0eU5hbWVzOmgsZ2V0T3duUHJvcGVydHlTeW1ib2xzOm8sZ2V0UHJvdG90eXBlT2Y6bn09T2JqZWN0LGE9Z2xvYmFsVGhpcyxjPWEudHJ1c3RlZFR5cGVzLGw9Yz9jLmVtcHR5U2NyaXB0OlwiXCIscD1hLnJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCxkPSh0LHMpPT50LHU9e3RvQXR0cmlidXRlKHQscyl7c3dpdGNoKHMpe2Nhc2UgQm9vbGVhbjp0PXQ/bDpudWxsO2JyZWFrO2Nhc2UgT2JqZWN0OmNhc2UgQXJyYXk6dD1udWxsPT10P3Q6SlNPTi5zdHJpbmdpZnkodCl9cmV0dXJuIHR9LGZyb21BdHRyaWJ1dGUodCxzKXtsZXQgaT10O3N3aXRjaChzKXtjYXNlIEJvb2xlYW46aT1udWxsIT09dDticmVhaztjYXNlIE51bWJlcjppPW51bGw9PT10P251bGw6TnVtYmVyKHQpO2JyZWFrO2Nhc2UgT2JqZWN0OmNhc2UgQXJyYXk6dHJ5e2k9SlNPTi5wYXJzZSh0KX1jYXRjaCh0KXtpPW51bGx9fXJldHVybiBpfX0sZj0odCxzKT0+IWkodCxzKSx5PXthdHRyaWJ1dGU6ITAsdHlwZTpTdHJpbmcsY29udmVydGVyOnUscmVmbGVjdDohMSxoYXNDaGFuZ2VkOmZ9O1N5bWJvbC5tZXRhZGF0YT8/PVN5bWJvbChcIm1ldGFkYXRhXCIpLGEubGl0UHJvcGVydHlNZXRhZGF0YT8/PW5ldyBXZWFrTWFwO2NsYXNzIGIgZXh0ZW5kcyBIVE1MRWxlbWVudHtzdGF0aWMgYWRkSW5pdGlhbGl6ZXIodCl7dGhpcy5fJEVpKCksKHRoaXMubD8/PVtdKS5wdXNoKHQpfXN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCl7cmV0dXJuIHRoaXMuZmluYWxpemUoKSx0aGlzLl8kRWgmJlsuLi50aGlzLl8kRWgua2V5cygpXX1zdGF0aWMgY3JlYXRlUHJvcGVydHkodCxzPXkpe2lmKHMuc3RhdGUmJihzLmF0dHJpYnV0ZT0hMSksdGhpcy5fJEVpKCksdGhpcy5lbGVtZW50UHJvcGVydGllcy5zZXQodCxzKSwhcy5ub0FjY2Vzc29yKXtjb25zdCBpPVN5bWJvbCgpLHI9dGhpcy5nZXRQcm9wZXJ0eURlc2NyaXB0b3IodCxpLHMpO3ZvaWQgMCE9PXImJmUodGhpcy5wcm90b3R5cGUsdCxyKX19c3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcih0LHMsaSl7Y29uc3R7Z2V0OmUsc2V0Omh9PXIodGhpcy5wcm90b3R5cGUsdCk/P3tnZXQoKXtyZXR1cm4gdGhpc1tzXX0sc2V0KHQpe3RoaXNbc109dH19O3JldHVybntnZXQoKXtyZXR1cm4gZT8uY2FsbCh0aGlzKX0sc2V0KHMpe2NvbnN0IHI9ZT8uY2FsbCh0aGlzKTtoLmNhbGwodGhpcyxzKSx0aGlzLnJlcXVlc3RVcGRhdGUodCxyLGkpfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH19c3RhdGljIGdldFByb3BlcnR5T3B0aW9ucyh0KXtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5nZXQodCk/P3l9c3RhdGljIF8kRWkoKXtpZih0aGlzLmhhc093blByb3BlcnR5KGQoXCJlbGVtZW50UHJvcGVydGllc1wiKSkpcmV0dXJuO2NvbnN0IHQ9bih0aGlzKTt0LmZpbmFsaXplKCksdm9pZCAwIT09dC5sJiYodGhpcy5sPVsuLi50LmxdKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzPW5ldyBNYXAodC5lbGVtZW50UHJvcGVydGllcyl9c3RhdGljIGZpbmFsaXplKCl7aWYodGhpcy5oYXNPd25Qcm9wZXJ0eShkKFwiZmluYWxpemVkXCIpKSlyZXR1cm47aWYodGhpcy5maW5hbGl6ZWQ9ITAsdGhpcy5fJEVpKCksdGhpcy5oYXNPd25Qcm9wZXJ0eShkKFwicHJvcGVydGllc1wiKSkpe2NvbnN0IHQ9dGhpcy5wcm9wZXJ0aWVzLHM9Wy4uLmgodCksLi4ubyh0KV07Zm9yKGNvbnN0IGkgb2Ygcyl0aGlzLmNyZWF0ZVByb3BlcnR5KGksdFtpXSl9Y29uc3QgdD10aGlzW1N5bWJvbC5tZXRhZGF0YV07aWYobnVsbCE9PXQpe2NvbnN0IHM9bGl0UHJvcGVydHlNZXRhZGF0YS5nZXQodCk7aWYodm9pZCAwIT09cylmb3IoY29uc3RbdCxpXW9mIHMpdGhpcy5lbGVtZW50UHJvcGVydGllcy5zZXQodCxpKX10aGlzLl8kRWg9bmV3IE1hcDtmb3IoY29uc3RbdCxzXW9mIHRoaXMuZWxlbWVudFByb3BlcnRpZXMpe2NvbnN0IGk9dGhpcy5fJEV1KHQscyk7dm9pZCAwIT09aSYmdGhpcy5fJEVoLnNldChpLHQpfXRoaXMuZWxlbWVudFN0eWxlcz10aGlzLmZpbmFsaXplU3R5bGVzKHRoaXMuc3R5bGVzKX1zdGF0aWMgZmluYWxpemVTdHlsZXMocyl7Y29uc3QgaT1bXTtpZihBcnJheS5pc0FycmF5KHMpKXtjb25zdCBlPW5ldyBTZXQocy5mbGF0KDEvMCkucmV2ZXJzZSgpKTtmb3IoY29uc3QgcyBvZiBlKWkudW5zaGlmdCh0KHMpKX1lbHNlIHZvaWQgMCE9PXMmJmkucHVzaCh0KHMpKTtyZXR1cm4gaX1zdGF0aWMgXyRFdSh0LHMpe2NvbnN0IGk9cy5hdHRyaWJ1dGU7cmV0dXJuITE9PT1pP3ZvaWQgMDpcInN0cmluZ1wiPT10eXBlb2YgaT9pOlwic3RyaW5nXCI9PXR5cGVvZiB0P3QudG9Mb3dlckNhc2UoKTp2b2lkIDB9Y29uc3RydWN0b3IoKXtzdXBlcigpLHRoaXMuXyRFcD12b2lkIDAsdGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITEsdGhpcy5oYXNVcGRhdGVkPSExLHRoaXMuXyRFbT1udWxsLHRoaXMuXyRFdigpfV8kRXYoKXt0aGlzLl8kRVM9bmV3IFByb21pc2UoKHQ9PnRoaXMuZW5hYmxlVXBkYXRpbmc9dCkpLHRoaXMuXyRBTD1uZXcgTWFwLHRoaXMuXyRFXygpLHRoaXMucmVxdWVzdFVwZGF0ZSgpLHRoaXMuY29uc3RydWN0b3IubD8uZm9yRWFjaCgodD0+dCh0aGlzKSkpfWFkZENvbnRyb2xsZXIodCl7KHRoaXMuXyRFTz8/PW5ldyBTZXQpLmFkZCh0KSx2b2lkIDAhPT10aGlzLnJlbmRlclJvb3QmJnRoaXMuaXNDb25uZWN0ZWQmJnQuaG9zdENvbm5lY3RlZD8uKCl9cmVtb3ZlQ29udHJvbGxlcih0KXt0aGlzLl8kRU8/LmRlbGV0ZSh0KX1fJEVfKCl7Y29uc3QgdD1uZXcgTWFwLHM9dGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50UHJvcGVydGllcztmb3IoY29uc3QgaSBvZiBzLmtleXMoKSl0aGlzLmhhc093blByb3BlcnR5KGkpJiYodC5zZXQoaSx0aGlzW2ldKSxkZWxldGUgdGhpc1tpXSk7dC5zaXplPjAmJih0aGlzLl8kRXA9dCl9Y3JlYXRlUmVuZGVyUm9vdCgpe2NvbnN0IHQ9dGhpcy5zaGFkb3dSb290Pz90aGlzLmF0dGFjaFNoYWRvdyh0aGlzLmNvbnN0cnVjdG9yLnNoYWRvd1Jvb3RPcHRpb25zKTtyZXR1cm4gcyh0LHRoaXMuY29uc3RydWN0b3IuZWxlbWVudFN0eWxlcyksdH1jb25uZWN0ZWRDYWxsYmFjaygpe3RoaXMucmVuZGVyUm9vdD8/PXRoaXMuY3JlYXRlUmVuZGVyUm9vdCgpLHRoaXMuZW5hYmxlVXBkYXRpbmcoITApLHRoaXMuXyRFTz8uZm9yRWFjaCgodD0+dC5ob3N0Q29ubmVjdGVkPy4oKSkpfWVuYWJsZVVwZGF0aW5nKHQpe31kaXNjb25uZWN0ZWRDYWxsYmFjaygpe3RoaXMuXyRFTz8uZm9yRWFjaCgodD0+dC5ob3N0RGlzY29ubmVjdGVkPy4oKSkpfWF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayh0LHMsaSl7dGhpcy5fJEFLKHQsaSl9XyRFQyh0LHMpe2NvbnN0IGk9dGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50UHJvcGVydGllcy5nZXQodCksZT10aGlzLmNvbnN0cnVjdG9yLl8kRXUodCxpKTtpZih2b2lkIDAhPT1lJiYhMD09PWkucmVmbGVjdCl7Y29uc3Qgcj0odm9pZCAwIT09aS5jb252ZXJ0ZXI/LnRvQXR0cmlidXRlP2kuY29udmVydGVyOnUpLnRvQXR0cmlidXRlKHMsaS50eXBlKTt0aGlzLl8kRW09dCxudWxsPT1yP3RoaXMucmVtb3ZlQXR0cmlidXRlKGUpOnRoaXMuc2V0QXR0cmlidXRlKGUsciksdGhpcy5fJEVtPW51bGx9fV8kQUsodCxzKXtjb25zdCBpPXRoaXMuY29uc3RydWN0b3IsZT1pLl8kRWguZ2V0KHQpO2lmKHZvaWQgMCE9PWUmJnRoaXMuXyRFbSE9PWUpe2NvbnN0IHQ9aS5nZXRQcm9wZXJ0eU9wdGlvbnMoZSkscj1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmNvbnZlcnRlcj97ZnJvbUF0dHJpYnV0ZTp0LmNvbnZlcnRlcn06dm9pZCAwIT09dC5jb252ZXJ0ZXI/LmZyb21BdHRyaWJ1dGU/dC5jb252ZXJ0ZXI6dTt0aGlzLl8kRW09ZSx0aGlzW2VdPXIuZnJvbUF0dHJpYnV0ZShzLHQudHlwZSksdGhpcy5fJEVtPW51bGx9fXJlcXVlc3RVcGRhdGUodCxzLGkpe2lmKHZvaWQgMCE9PXQpe2lmKGk/Pz10aGlzLmNvbnN0cnVjdG9yLmdldFByb3BlcnR5T3B0aW9ucyh0KSwhKGkuaGFzQ2hhbmdlZD8/ZikodGhpc1t0XSxzKSlyZXR1cm47dGhpcy5QKHQscyxpKX0hMT09PXRoaXMuaXNVcGRhdGVQZW5kaW5nJiYodGhpcy5fJEVTPXRoaXMuXyRFVCgpKX1QKHQscyxpKXt0aGlzLl8kQUwuaGFzKHQpfHx0aGlzLl8kQUwuc2V0KHQscyksITA9PT1pLnJlZmxlY3QmJnRoaXMuXyRFbSE9PXQmJih0aGlzLl8kRWo/Pz1uZXcgU2V0KS5hZGQodCl9YXN5bmMgXyRFVCgpe3RoaXMuaXNVcGRhdGVQZW5kaW5nPSEwO3RyeXthd2FpdCB0aGlzLl8kRVN9Y2F0Y2godCl7UHJvbWlzZS5yZWplY3QodCl9Y29uc3QgdD10aGlzLnNjaGVkdWxlVXBkYXRlKCk7cmV0dXJuIG51bGwhPXQmJmF3YWl0IHQsIXRoaXMuaXNVcGRhdGVQZW5kaW5nfXNjaGVkdWxlVXBkYXRlKCl7cmV0dXJuIHRoaXMucGVyZm9ybVVwZGF0ZSgpfXBlcmZvcm1VcGRhdGUoKXtpZighdGhpcy5pc1VwZGF0ZVBlbmRpbmcpcmV0dXJuO2lmKCF0aGlzLmhhc1VwZGF0ZWQpe2lmKHRoaXMucmVuZGVyUm9vdD8/PXRoaXMuY3JlYXRlUmVuZGVyUm9vdCgpLHRoaXMuXyRFcCl7Zm9yKGNvbnN0W3Qsc11vZiB0aGlzLl8kRXApdGhpc1t0XT1zO3RoaXMuXyRFcD12b2lkIDB9Y29uc3QgdD10aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRQcm9wZXJ0aWVzO2lmKHQuc2l6ZT4wKWZvcihjb25zdFtzLGldb2YgdCkhMCE9PWkud3JhcHBlZHx8dGhpcy5fJEFMLmhhcyhzKXx8dm9pZCAwPT09dGhpc1tzXXx8dGhpcy5QKHMsdGhpc1tzXSxpKX1sZXQgdD0hMTtjb25zdCBzPXRoaXMuXyRBTDt0cnl7dD10aGlzLnNob3VsZFVwZGF0ZShzKSx0Pyh0aGlzLndpbGxVcGRhdGUocyksdGhpcy5fJEVPPy5mb3JFYWNoKCh0PT50Lmhvc3RVcGRhdGU/LigpKSksdGhpcy51cGRhdGUocykpOnRoaXMuXyRFVSgpfWNhdGNoKHMpe3Rocm93IHQ9ITEsdGhpcy5fJEVVKCksc310JiZ0aGlzLl8kQUUocyl9d2lsbFVwZGF0ZSh0KXt9XyRBRSh0KXt0aGlzLl8kRU8/LmZvckVhY2goKHQ9PnQuaG9zdFVwZGF0ZWQ/LigpKSksdGhpcy5oYXNVcGRhdGVkfHwodGhpcy5oYXNVcGRhdGVkPSEwLHRoaXMuZmlyc3RVcGRhdGVkKHQpKSx0aGlzLnVwZGF0ZWQodCl9XyRFVSgpe3RoaXMuXyRBTD1uZXcgTWFwLHRoaXMuaXNVcGRhdGVQZW5kaW5nPSExfWdldCB1cGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLmdldFVwZGF0ZUNvbXBsZXRlKCl9Z2V0VXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5fJEVTfXNob3VsZFVwZGF0ZSh0KXtyZXR1cm4hMH11cGRhdGUodCl7dGhpcy5fJEVqJiY9dGhpcy5fJEVqLmZvckVhY2goKHQ9PnRoaXMuXyRFQyh0LHRoaXNbdF0pKSksdGhpcy5fJEVVKCl9dXBkYXRlZCh0KXt9Zmlyc3RVcGRhdGVkKHQpe319Yi5lbGVtZW50U3R5bGVzPVtdLGIuc2hhZG93Um9vdE9wdGlvbnM9e21vZGU6XCJvcGVuXCJ9LGJbZChcImVsZW1lbnRQcm9wZXJ0aWVzXCIpXT1uZXcgTWFwLGJbZChcImZpbmFsaXplZFwiKV09bmV3IE1hcCxwPy4oe1JlYWN0aXZlRWxlbWVudDpifSksKGEucmVhY3RpdmVFbGVtZW50VmVyc2lvbnM/Pz1bXSkucHVzaChcIjIuMC40XCIpO2V4cG9ydHtiIGFzIFJlYWN0aXZlRWxlbWVudCx1IGFzIGRlZmF1bHRDb252ZXJ0ZXIsZiBhcyBub3RFcXVhbH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdGl2ZS1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCB0PWdsb2JhbFRoaXMsaT10LnRydXN0ZWRUeXBlcyxzPWk/aS5jcmVhdGVQb2xpY3koXCJsaXQtaHRtbFwiLHtjcmVhdGVIVE1MOnQ9PnR9KTp2b2lkIDAsZT1cIiRsaXQkXCIsaD1gbGl0JCR7KE1hdGgucmFuZG9tKCkrXCJcIikuc2xpY2UoOSl9JGAsbz1cIj9cIitoLG49YDwke299PmAscj1kb2N1bWVudCxsPSgpPT5yLmNyZWF0ZUNvbW1lbnQoXCJcIiksYz10PT5udWxsPT09dHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQsYT1BcnJheS5pc0FycmF5LHU9dD0+YSh0KXx8XCJmdW5jdGlvblwiPT10eXBlb2YgdD8uW1N5bWJvbC5pdGVyYXRvcl0sZD1cIlsgXFx0XFxuXFxmXFxyXVwiLGY9LzwoPzooIS0tfFxcL1teYS16QS1aXSl8KFxcLz9bYS16QS1aXVtePlxcc10qKXwoXFwvPyQpKS9nLHY9Ly0tPi9nLF89Lz4vZyxtPVJlZ0V4cChgPnwke2R9KD86KFteXFxcXHNcIic+PS9dKykoJHtkfSo9JHtkfSooPzpbXiBcXHRcXG5cXGZcXHJcIidcXGA8Pj1dfChcInwnKXwpKXwkKWAsXCJnXCIpLHA9LycvZyxnPS9cIi9nLCQ9L14oPzpzY3JpcHR8c3R5bGV8dGV4dGFyZWF8dGl0bGUpJC9pLHk9dD0+KGksLi4ucyk9Pih7XyRsaXRUeXBlJDp0LHN0cmluZ3M6aSx2YWx1ZXM6c30pLHg9eSgxKSxiPXkoMiksdz1TeW1ib2wuZm9yKFwibGl0LW5vQ2hhbmdlXCIpLFQ9U3ltYm9sLmZvcihcImxpdC1ub3RoaW5nXCIpLEE9bmV3IFdlYWtNYXAsRT1yLmNyZWF0ZVRyZWVXYWxrZXIociwxMjkpO2Z1bmN0aW9uIEModCxpKXtpZighQXJyYXkuaXNBcnJheSh0KXx8IXQuaGFzT3duUHJvcGVydHkoXCJyYXdcIikpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHRlbXBsYXRlIHN0cmluZ3MgYXJyYXlcIik7cmV0dXJuIHZvaWQgMCE9PXM/cy5jcmVhdGVIVE1MKGkpOml9Y29uc3QgUD0odCxpKT0+e2NvbnN0IHM9dC5sZW5ndGgtMSxvPVtdO2xldCByLGw9Mj09PWk/XCI8c3ZnPlwiOlwiXCIsYz1mO2ZvcihsZXQgaT0wO2k8cztpKyspe2NvbnN0IHM9dFtpXTtsZXQgYSx1LGQ9LTEseT0wO2Zvcig7eTxzLmxlbmd0aCYmKGMubGFzdEluZGV4PXksdT1jLmV4ZWMocyksbnVsbCE9PXUpOyl5PWMubGFzdEluZGV4LGM9PT1mP1wiIS0tXCI9PT11WzFdP2M9djp2b2lkIDAhPT11WzFdP2M9Xzp2b2lkIDAhPT11WzJdPygkLnRlc3QodVsyXSkmJihyPVJlZ0V4cChcIjwvXCIrdVsyXSxcImdcIikpLGM9bSk6dm9pZCAwIT09dVszXSYmKGM9bSk6Yz09PW0/XCI+XCI9PT11WzBdPyhjPXI/P2YsZD0tMSk6dm9pZCAwPT09dVsxXT9kPS0yOihkPWMubGFzdEluZGV4LXVbMl0ubGVuZ3RoLGE9dVsxXSxjPXZvaWQgMD09PXVbM10/bTonXCInPT09dVszXT9nOnApOmM9PT1nfHxjPT09cD9jPW06Yz09PXZ8fGM9PT1fP2M9ZjooYz1tLHI9dm9pZCAwKTtjb25zdCB4PWM9PT1tJiZ0W2krMV0uc3RhcnRzV2l0aChcIi8+XCIpP1wiIFwiOlwiXCI7bCs9Yz09PWY/cytuOmQ+PTA/KG8ucHVzaChhKSxzLnNsaWNlKDAsZCkrZStzLnNsaWNlKGQpK2greCk6cytoKygtMj09PWQ/aTp4KX1yZXR1cm5bQyh0LGwrKHRbc118fFwiPD8+XCIpKygyPT09aT9cIjwvc3ZnPlwiOlwiXCIpKSxvXX07Y2xhc3MgVntjb25zdHJ1Y3Rvcih7c3RyaW5nczp0LF8kbGl0VHlwZSQ6c30sbil7bGV0IHI7dGhpcy5wYXJ0cz1bXTtsZXQgYz0wLGE9MDtjb25zdCB1PXQubGVuZ3RoLTEsZD10aGlzLnBhcnRzLFtmLHZdPVAodCxzKTtpZih0aGlzLmVsPVYuY3JlYXRlRWxlbWVudChmLG4pLEUuY3VycmVudE5vZGU9dGhpcy5lbC5jb250ZW50LDI9PT1zKXtjb25zdCB0PXRoaXMuZWwuY29udGVudC5maXJzdENoaWxkO3QucmVwbGFjZVdpdGgoLi4udC5jaGlsZE5vZGVzKX1mb3IoO251bGwhPT0ocj1FLm5leHROb2RlKCkpJiZkLmxlbmd0aDx1Oyl7aWYoMT09PXIubm9kZVR5cGUpe2lmKHIuaGFzQXR0cmlidXRlcygpKWZvcihjb25zdCB0IG9mIHIuZ2V0QXR0cmlidXRlTmFtZXMoKSlpZih0LmVuZHNXaXRoKGUpKXtjb25zdCBpPXZbYSsrXSxzPXIuZ2V0QXR0cmlidXRlKHQpLnNwbGl0KGgpLGU9LyhbLj9AXSk/KC4qKS8uZXhlYyhpKTtkLnB1c2goe3R5cGU6MSxpbmRleDpjLG5hbWU6ZVsyXSxzdHJpbmdzOnMsY3RvcjpcIi5cIj09PWVbMV0/azpcIj9cIj09PWVbMV0/SDpcIkBcIj09PWVbMV0/STpSfSksci5yZW1vdmVBdHRyaWJ1dGUodCl9ZWxzZSB0LnN0YXJ0c1dpdGgoaCkmJihkLnB1c2goe3R5cGU6NixpbmRleDpjfSksci5yZW1vdmVBdHRyaWJ1dGUodCkpO2lmKCQudGVzdChyLnRhZ05hbWUpKXtjb25zdCB0PXIudGV4dENvbnRlbnQuc3BsaXQoaCkscz10Lmxlbmd0aC0xO2lmKHM+MCl7ci50ZXh0Q29udGVudD1pP2kuZW1wdHlTY3JpcHQ6XCJcIjtmb3IobGV0IGk9MDtpPHM7aSsrKXIuYXBwZW5kKHRbaV0sbCgpKSxFLm5leHROb2RlKCksZC5wdXNoKHt0eXBlOjIsaW5kZXg6KytjfSk7ci5hcHBlbmQodFtzXSxsKCkpfX19ZWxzZSBpZig4PT09ci5ub2RlVHlwZSlpZihyLmRhdGE9PT1vKWQucHVzaCh7dHlwZToyLGluZGV4OmN9KTtlbHNle2xldCB0PS0xO2Zvcig7LTEhPT0odD1yLmRhdGEuaW5kZXhPZihoLHQrMSkpOylkLnB1c2goe3R5cGU6NyxpbmRleDpjfSksdCs9aC5sZW5ndGgtMX1jKyt9fXN0YXRpYyBjcmVhdGVFbGVtZW50KHQsaSl7Y29uc3Qgcz1yLmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtyZXR1cm4gcy5pbm5lckhUTUw9dCxzfX1mdW5jdGlvbiBOKHQsaSxzPXQsZSl7aWYoaT09PXcpcmV0dXJuIGk7bGV0IGg9dm9pZCAwIT09ZT9zLl8kQ28/LltlXTpzLl8kQ2w7Y29uc3Qgbz1jKGkpP3ZvaWQgMDppLl8kbGl0RGlyZWN0aXZlJDtyZXR1cm4gaD8uY29uc3RydWN0b3IhPT1vJiYoaD8uXyRBTz8uKCExKSx2b2lkIDA9PT1vP2g9dm9pZCAwOihoPW5ldyBvKHQpLGguXyRBVCh0LHMsZSkpLHZvaWQgMCE9PWU/KHMuXyRDbz8/PVtdKVtlXT1oOnMuXyRDbD1oKSx2b2lkIDAhPT1oJiYoaT1OKHQsaC5fJEFTKHQsaS52YWx1ZXMpLGgsZSkpLGl9Y2xhc3MgU3tjb25zdHJ1Y3Rvcih0LGkpe3RoaXMuXyRBVj1bXSx0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBRD10LHRoaXMuXyRBTT1pfWdldCBwYXJlbnROb2RlKCl7cmV0dXJuIHRoaXMuXyRBTS5wYXJlbnROb2RlfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfXUodCl7Y29uc3R7ZWw6e2NvbnRlbnQ6aX0scGFydHM6c309dGhpcy5fJEFELGU9KHQ/LmNyZWF0aW9uU2NvcGU/P3IpLmltcG9ydE5vZGUoaSwhMCk7RS5jdXJyZW50Tm9kZT1lO2xldCBoPUUubmV4dE5vZGUoKSxvPTAsbj0wLGw9c1swXTtmb3IoO3ZvaWQgMCE9PWw7KXtpZihvPT09bC5pbmRleCl7bGV0IGk7Mj09PWwudHlwZT9pPW5ldyBNKGgsaC5uZXh0U2libGluZyx0aGlzLHQpOjE9PT1sLnR5cGU/aT1uZXcgbC5jdG9yKGgsbC5uYW1lLGwuc3RyaW5ncyx0aGlzLHQpOjY9PT1sLnR5cGUmJihpPW5ldyBMKGgsdGhpcyx0KSksdGhpcy5fJEFWLnB1c2goaSksbD1zWysrbl19byE9PWw/LmluZGV4JiYoaD1FLm5leHROb2RlKCksbysrKX1yZXR1cm4gRS5jdXJyZW50Tm9kZT1yLGV9cCh0KXtsZXQgaT0wO2Zvcihjb25zdCBzIG9mIHRoaXMuXyRBVil2b2lkIDAhPT1zJiYodm9pZCAwIT09cy5zdHJpbmdzPyhzLl8kQUkodCxzLGkpLGkrPXMuc3RyaW5ncy5sZW5ndGgtMik6cy5fJEFJKHRbaV0pKSxpKyt9fWNsYXNzIE17Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNPy5fJEFVPz90aGlzLl8kQ3Z9Y29uc3RydWN0b3IodCxpLHMsZSl7dGhpcy50eXBlPTIsdGhpcy5fJEFIPVQsdGhpcy5fJEFOPXZvaWQgMCx0aGlzLl8kQUE9dCx0aGlzLl8kQUI9aSx0aGlzLl8kQU09cyx0aGlzLm9wdGlvbnM9ZSx0aGlzLl8kQ3Y9ZT8uaXNDb25uZWN0ZWQ/PyEwfWdldCBwYXJlbnROb2RlKCl7bGV0IHQ9dGhpcy5fJEFBLnBhcmVudE5vZGU7Y29uc3QgaT10aGlzLl8kQU07cmV0dXJuIHZvaWQgMCE9PWkmJjExPT09dD8ubm9kZVR5cGUmJih0PWkucGFyZW50Tm9kZSksdH1nZXQgc3RhcnROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQX1nZXQgZW5kTm9kZSgpe3JldHVybiB0aGlzLl8kQUJ9XyRBSSh0LGk9dGhpcyl7dD1OKHRoaXMsdCxpKSxjKHQpP3Q9PT1UfHxudWxsPT10fHxcIlwiPT09dD8odGhpcy5fJEFIIT09VCYmdGhpcy5fJEFSKCksdGhpcy5fJEFIPVQpOnQhPT10aGlzLl8kQUgmJnQhPT13JiZ0aGlzLl8odCk6dm9pZCAwIT09dC5fJGxpdFR5cGUkP3RoaXMuJCh0KTp2b2lkIDAhPT10Lm5vZGVUeXBlP3RoaXMuVCh0KTp1KHQpP3RoaXMuayh0KTp0aGlzLl8odCl9Uyh0KXtyZXR1cm4gdGhpcy5fJEFBLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsdGhpcy5fJEFCKX1UKHQpe3RoaXMuXyRBSCE9PXQmJih0aGlzLl8kQVIoKSx0aGlzLl8kQUg9dGhpcy5TKHQpKX1fKHQpe3RoaXMuXyRBSCE9PVQmJmModGhpcy5fJEFIKT90aGlzLl8kQUEubmV4dFNpYmxpbmcuZGF0YT10OnRoaXMuVChyLmNyZWF0ZVRleHROb2RlKHQpKSx0aGlzLl8kQUg9dH0kKHQpe2NvbnN0e3ZhbHVlczppLF8kbGl0VHlwZSQ6c309dCxlPVwibnVtYmVyXCI9PXR5cGVvZiBzP3RoaXMuXyRBQyh0KToodm9pZCAwPT09cy5lbCYmKHMuZWw9Vi5jcmVhdGVFbGVtZW50KEMocy5oLHMuaFswXSksdGhpcy5vcHRpb25zKSkscyk7aWYodGhpcy5fJEFIPy5fJEFEPT09ZSl0aGlzLl8kQUgucChpKTtlbHNle2NvbnN0IHQ9bmV3IFMoZSx0aGlzKSxzPXQudSh0aGlzLm9wdGlvbnMpO3QucChpKSx0aGlzLlQocyksdGhpcy5fJEFIPXR9fV8kQUModCl7bGV0IGk9QS5nZXQodC5zdHJpbmdzKTtyZXR1cm4gdm9pZCAwPT09aSYmQS5zZXQodC5zdHJpbmdzLGk9bmV3IFYodCkpLGl9ayh0KXthKHRoaXMuXyRBSCl8fCh0aGlzLl8kQUg9W10sdGhpcy5fJEFSKCkpO2NvbnN0IGk9dGhpcy5fJEFIO2xldCBzLGU9MDtmb3IoY29uc3QgaCBvZiB0KWU9PT1pLmxlbmd0aD9pLnB1c2gocz1uZXcgTSh0aGlzLlMobCgpKSx0aGlzLlMobCgpKSx0aGlzLHRoaXMub3B0aW9ucykpOnM9aVtlXSxzLl8kQUkoaCksZSsrO2U8aS5sZW5ndGgmJih0aGlzLl8kQVIocyYmcy5fJEFCLm5leHRTaWJsaW5nLGUpLGkubGVuZ3RoPWUpfV8kQVIodD10aGlzLl8kQUEubmV4dFNpYmxpbmcsaSl7Zm9yKHRoaXMuXyRBUD8uKCExLCEwLGkpO3QmJnQhPT10aGlzLl8kQUI7KXtjb25zdCBpPXQubmV4dFNpYmxpbmc7dC5yZW1vdmUoKSx0PWl9fXNldENvbm5lY3RlZCh0KXt2b2lkIDA9PT10aGlzLl8kQU0mJih0aGlzLl8kQ3Y9dCx0aGlzLl8kQVA/Lih0KSl9fWNsYXNzIFJ7Z2V0IHRhZ05hbWUoKXtyZXR1cm4gdGhpcy5lbGVtZW50LnRhZ05hbWV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9Y29uc3RydWN0b3IodCxpLHMsZSxoKXt0aGlzLnR5cGU9MSx0aGlzLl8kQUg9VCx0aGlzLl8kQU49dm9pZCAwLHRoaXMuZWxlbWVudD10LHRoaXMubmFtZT1pLHRoaXMuXyRBTT1lLHRoaXMub3B0aW9ucz1oLHMubGVuZ3RoPjJ8fFwiXCIhPT1zWzBdfHxcIlwiIT09c1sxXT8odGhpcy5fJEFIPUFycmF5KHMubGVuZ3RoLTEpLmZpbGwobmV3IFN0cmluZyksdGhpcy5zdHJpbmdzPXMpOnRoaXMuXyRBSD1UfV8kQUkodCxpPXRoaXMscyxlKXtjb25zdCBoPXRoaXMuc3RyaW5ncztsZXQgbz0hMTtpZih2b2lkIDA9PT1oKXQ9Tih0aGlzLHQsaSwwKSxvPSFjKHQpfHx0IT09dGhpcy5fJEFIJiZ0IT09dyxvJiYodGhpcy5fJEFIPXQpO2Vsc2V7Y29uc3QgZT10O2xldCBuLHI7Zm9yKHQ9aFswXSxuPTA7bjxoLmxlbmd0aC0xO24rKylyPU4odGhpcyxlW3Mrbl0saSxuKSxyPT09dyYmKHI9dGhpcy5fJEFIW25dKSxvfHw9IWMocil8fHIhPT10aGlzLl8kQUhbbl0scj09PVQ/dD1UOnQhPT1UJiYodCs9KHI/P1wiXCIpK2hbbisxXSksdGhpcy5fJEFIW25dPXJ9byYmIWUmJnRoaXMuaih0KX1qKHQpe3Q9PT1UP3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKTp0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSx0Pz9cIlwiKX19Y2xhc3MgayBleHRlbmRzIFJ7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMudHlwZT0zfWoodCl7dGhpcy5lbGVtZW50W3RoaXMubmFtZV09dD09PVQ/dm9pZCAwOnR9fWNsYXNzIEggZXh0ZW5kcyBSe2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnR5cGU9NH1qKHQpe3RoaXMuZWxlbWVudC50b2dnbGVBdHRyaWJ1dGUodGhpcy5uYW1lLCEhdCYmdCE9PVQpfX1jbGFzcyBJIGV4dGVuZHMgUntjb25zdHJ1Y3Rvcih0LGkscyxlLGgpe3N1cGVyKHQsaSxzLGUsaCksdGhpcy50eXBlPTV9XyRBSSh0LGk9dGhpcyl7aWYoKHQ9Tih0aGlzLHQsaSwwKT8/VCk9PT13KXJldHVybjtjb25zdCBzPXRoaXMuXyRBSCxlPXQ9PT1UJiZzIT09VHx8dC5jYXB0dXJlIT09cy5jYXB0dXJlfHx0Lm9uY2UhPT1zLm9uY2V8fHQucGFzc2l2ZSE9PXMucGFzc2l2ZSxoPXQhPT1UJiYocz09PVR8fGUpO2UmJnRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMubmFtZSx0aGlzLHMpLGgmJnRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMubmFtZSx0aGlzLHQpLHRoaXMuXyRBSD10fWhhbmRsZUV2ZW50KHQpe1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuXyRBSD90aGlzLl8kQUguY2FsbCh0aGlzLm9wdGlvbnM/Lmhvc3Q/P3RoaXMuZWxlbWVudCx0KTp0aGlzLl8kQUguaGFuZGxlRXZlbnQodCl9fWNsYXNzIEx7Y29uc3RydWN0b3IodCxpLHMpe3RoaXMuZWxlbWVudD10LHRoaXMudHlwZT02LHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFNPWksdGhpcy5vcHRpb25zPXN9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBSSh0KXtOKHRoaXMsdCl9fWNvbnN0IHo9e1A6ZSxBOmgsQzpvLE06MSxMOlAsUjpTLEQ6dSxWOk4sSTpNLEg6UixOOkgsVTpJLEI6ayxGOkx9LFo9dC5saXRIdG1sUG9seWZpbGxTdXBwb3J0O1o/LihWLE0pLCh0LmxpdEh0bWxWZXJzaW9ucz8/PVtdKS5wdXNoKFwiMy4xLjJcIik7Y29uc3Qgaj0odCxpLHMpPT57Y29uc3QgZT1zPy5yZW5kZXJCZWZvcmU/P2k7bGV0IGg9ZS5fJGxpdFBhcnQkO2lmKHZvaWQgMD09PWgpe2NvbnN0IHQ9cz8ucmVuZGVyQmVmb3JlPz9udWxsO2UuXyRsaXRQYXJ0JD1oPW5ldyBNKGkuaW5zZXJ0QmVmb3JlKGwoKSx0KSx0LHZvaWQgMCxzPz97fSl9cmV0dXJuIGguXyRBSSh0KSxofTtleHBvcnR7eiBhcyBfJExILHggYXMgaHRtbCx3IGFzIG5vQ2hhbmdlLFQgYXMgbm90aGluZyxqIGFzIHJlbmRlcixiIGFzIHN2Z307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtaHRtbC5qcy5tYXBcbiIsImltcG9ydHtSZWFjdGl2ZUVsZW1lbnQgYXMgdH1mcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnRcIjtleHBvcnQqZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI7aW1wb3J0e3JlbmRlciBhcyBlLG5vQ2hhbmdlIGFzIGl9ZnJvbVwibGl0LWh0bWxcIjtleHBvcnQqZnJvbVwibGl0LWh0bWxcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NsYXNzIHMgZXh0ZW5kcyB0e2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnJlbmRlck9wdGlvbnM9e2hvc3Q6dGhpc30sdGhpcy5fJERvPXZvaWQgMH1jcmVhdGVSZW5kZXJSb290KCl7Y29uc3QgdD1zdXBlci5jcmVhdGVSZW5kZXJSb290KCk7cmV0dXJuIHRoaXMucmVuZGVyT3B0aW9ucy5yZW5kZXJCZWZvcmU/Pz10LmZpcnN0Q2hpbGQsdH11cGRhdGUodCl7Y29uc3QgaT10aGlzLnJlbmRlcigpO3RoaXMuaGFzVXBkYXRlZHx8KHRoaXMucmVuZGVyT3B0aW9ucy5pc0Nvbm5lY3RlZD10aGlzLmlzQ29ubmVjdGVkKSxzdXBlci51cGRhdGUodCksdGhpcy5fJERvPWUoaSx0aGlzLnJlbmRlclJvb3QsdGhpcy5yZW5kZXJPcHRpb25zKX1jb25uZWN0ZWRDYWxsYmFjaygpe3N1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCksdGhpcy5fJERvPy5zZXRDb25uZWN0ZWQoITApfWRpc2Nvbm5lY3RlZENhbGxiYWNrKCl7c3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKSx0aGlzLl8kRG8/LnNldENvbm5lY3RlZCghMSl9cmVuZGVyKCl7cmV0dXJuIGl9fXMuXyRsaXRFbGVtZW50JD0hMCxzWyhcImZpbmFsaXplZFwiLFwiZmluYWxpemVkXCIpXT0hMCxnbG9iYWxUaGlzLmxpdEVsZW1lbnRIeWRyYXRlU3VwcG9ydD8uKHtMaXRFbGVtZW50OnN9KTtjb25zdCByPWdsb2JhbFRoaXMubGl0RWxlbWVudFBvbHlmaWxsU3VwcG9ydDtyPy4oe0xpdEVsZW1lbnQ6c30pO2NvbnN0IG89e18kQUs6KHQsZSxpKT0+e3QuXyRBSyhlLGkpfSxfJEFMOnQ9PnQuXyRBTH07KGdsb2JhbFRoaXMubGl0RWxlbWVudFZlcnNpb25zPz89W10pLnB1c2goXCI0LjAuNFwiKTtleHBvcnR7cyBhcyBMaXRFbGVtZW50LG8gYXMgXyRMRX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXQtZWxlbWVudC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD10PT4oZSxvKT0+e3ZvaWQgMCE9PW8/by5hZGRJbml0aWFsaXplcigoKCk9PntjdXN0b21FbGVtZW50cy5kZWZpbmUodCxlKX0pKTpjdXN0b21FbGVtZW50cy5kZWZpbmUodCxlKX07ZXhwb3J0e3QgYXMgY3VzdG9tRWxlbWVudH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jdXN0b20tZWxlbWVudC5qcy5tYXBcbiIsImltcG9ydHtkZWZhdWx0Q29udmVydGVyIGFzIHQsbm90RXF1YWwgYXMgZX1mcm9tXCIuLi9yZWFjdGl2ZS1lbGVtZW50LmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBvPXthdHRyaWJ1dGU6ITAsdHlwZTpTdHJpbmcsY29udmVydGVyOnQscmVmbGVjdDohMSxoYXNDaGFuZ2VkOmV9LHI9KHQ9byxlLHIpPT57Y29uc3R7a2luZDpuLG1ldGFkYXRhOml9PXI7bGV0IHM9Z2xvYmFsVGhpcy5saXRQcm9wZXJ0eU1ldGFkYXRhLmdldChpKTtpZih2b2lkIDA9PT1zJiZnbG9iYWxUaGlzLmxpdFByb3BlcnR5TWV0YWRhdGEuc2V0KGkscz1uZXcgTWFwKSxzLnNldChyLm5hbWUsdCksXCJhY2Nlc3NvclwiPT09bil7Y29uc3R7bmFtZTpvfT1yO3JldHVybntzZXQocil7Y29uc3Qgbj1lLmdldC5jYWxsKHRoaXMpO2Uuc2V0LmNhbGwodGhpcyxyKSx0aGlzLnJlcXVlc3RVcGRhdGUobyxuLHQpfSxpbml0KGUpe3JldHVybiB2b2lkIDAhPT1lJiZ0aGlzLlAobyx2b2lkIDAsdCksZX19fWlmKFwic2V0dGVyXCI9PT1uKXtjb25zdHtuYW1lOm99PXI7cmV0dXJuIGZ1bmN0aW9uKHIpe2NvbnN0IG49dGhpc1tvXTtlLmNhbGwodGhpcyxyKSx0aGlzLnJlcXVlc3RVcGRhdGUobyxuLHQpfX10aHJvdyBFcnJvcihcIlVuc3VwcG9ydGVkIGRlY29yYXRvciBsb2NhdGlvbjogXCIrbil9O2Z1bmN0aW9uIG4odCl7cmV0dXJuKGUsbyk9Plwib2JqZWN0XCI9PXR5cGVvZiBvP3IodCxlLG8pOigodCxlLG8pPT57Y29uc3Qgcj1lLmhhc093blByb3BlcnR5KG8pO3JldHVybiBlLmNvbnN0cnVjdG9yLmNyZWF0ZVByb3BlcnR5KG8scj97Li4udCx3cmFwcGVkOiEwfTp0KSxyP09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxvKTp2b2lkIDB9KSh0LGUsbyl9ZXhwb3J0e24gYXMgcHJvcGVydHksciBhcyBzdGFuZGFyZFByb3BlcnR5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BlcnR5LmpzLm1hcFxuIiwiaW1wb3J0e3Byb3BlcnR5IGFzIHR9ZnJvbVwiLi9wcm9wZXJ0eS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovZnVuY3Rpb24gcihyKXtyZXR1cm4gdCh7Li4ucixzdGF0ZTohMCxhdHRyaWJ1dGU6ITF9KX1leHBvcnR7ciBhcyBzdGF0ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0ZS5qcy5tYXBcbiIsImltcG9ydCB7IGNzcywgQ1NTUmVzdWx0LCB1bnNhZmVDU1MgfSBmcm9tICdsaXQnO1xuXG5leHBvcnQgY29uc3QgZW51bSBTaGFkZSB7XG4gICAgVkFOSUxMQSA9IFwiXCIsXG4gICAgTElHSFQgPSBcIi1saWdodFwiLFxuICAgIERBUksgPSBcIi1kYXJrXCJcbn1cblxuZXhwb3J0IGNvbnN0IGNvbG9yVmFyaWFibGVzID0gY3NzYFxuICAgIDpob3N0IHtcbiAgICAgICAgLyogUHJpbWFyeSBjb2xvcnMgKi9cbiAgICAgICAgLS1wcmltYXJ5LWNvbG9yOiAjNTE0OTgzO1xuICAgICAgICAtLXByaW1hcnktbGlnaHQtY29sb3I6ICM4Mjc0YjM7XG4gICAgICAgIC0tcHJpbWFyeS1kYXJrLWNvbG9yOiAjMmEyYjRmO1xuXG4gICAgICAgIC8qIEhpZ2hsaWdodGVkIGNvbG9ycyAqL1xuICAgICAgICAtLWhpZ2hsaWdodGVkLWNvbG9yOiAjRUEzNzU3O1xuICAgICAgICAtLWhpZ2hsaWdodGVkLWxpZ2h0LWNvbG9yOiAjZmY2YTg0O1xuICAgICAgICAtLWhpZ2hsaWdodGVkLWRhcmstY29sb3I6ICNiMzAwMzM7XG5cbiAgICAgICAgLyogQmFja2dyb3VuZCBjb2xvcnMgKi9cbiAgICAgICAgLS1iYWNrZ3JvdW5kLWNvbG9yOiAjMjYxRjQ3O1xuICAgICAgICAtLWJhY2tncm91bmQtbGlnaHQtY29sb3I6ICMwMDA7XG4gICAgICAgIC0tYmFja2dyb3VuZC1kYXJrLWNvbG9yOiAjMTcxMDJlO1xuICAgIFxuICAgICAgICAvKiBGb3JlZ3JvdW5kIGNvbG9ycyAqL1xuICAgICAgICAtLWZvcmVncm91bmQtY29sb3I6ICNmZmY7XG4gICAgICAgIC0tZm9yZWdyb3VuZC1saWdodC1jb2xvcjogI2ZmZjtcbiAgICAgICAgLS1mb3JlZ3JvdW5kLWRhcmstY29sb3I6ICNmZmY7XG4gICAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGhlYWRlclN0eWxlcyA9IGNzc2BcbiAgICBoMSB7XG4gICAgICAgIGZvbnQtc2l6ZTogM3JlbTtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIGgyIHtcbiAgICAgICAgZm9udC1zaXplOiAycmVtO1xuICAgICAgICBtYXJnaW46IDAuNXJlbSAwIDAuNXJlbTtcbiAgICB9XG5cbiAgICBoMyB7XG4gICAgICAgIGZvbnQtc2l6ZTogMS41cmVtO1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgfVxuXG4gICAgaHIge1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIGhlaWdodDogMnB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLWxpZ2h0LWNvbG9yKTtcbiAgICAgICAgbWFyZ2luOiAwLjVyZW0gMCAxcmVtO1xuICAgIH1cbmA7XG5cbi8qIE5PVEU6IGRlc3BpdGUgdGhlIHNwb29reSBcInVuc2FmZUNTU1wiIG5hbWUsIGl0J3MgYWN0dWFsbHkgc2FmZSBpbiB0aGlzIGNvbnRleHQgKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludGVyYWN0aXZlQ29tcG9uZW50KHNoYWRlOiBTaGFkZSA9IFNoYWRlLlZBTklMTEEpOiBDU1NSZXN1bHQge1xuICAgIHJldHVybiBjc3NgXG4gICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnkke3Vuc2FmZUNTUyhzaGFkZSl9LWNvbG9yKTtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1mb3JlZ3JvdW5kJHt1bnNhZmVDU1Moc2hhZGUpfS1jb2xvcik7XG4gICAgICAgIH1cbiAgICBgO1xufSBcblxuZXhwb3J0IGZ1bmN0aW9uIGludGVyYWN0aXZlQ29tcG9uZW50SGlnaGxpZ2h0KFxuICAgIHNoYWRlOiBTaGFkZSA9IFNoYWRlLlZBTklMTEFcbik6IENTU1Jlc3VsdCB7XG4gICAgcmV0dXJuIGNzc2BcbiAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taGlnaGxpZ2h0ZWQke3Vuc2FmZUNTUyhzaGFkZSl9LWNvbG9yKTtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1mb3JlZ3JvdW5kJHt1bnNhZmVDU1Moc2hhZGUpfS1jb2xvcik7XG4gICAgICAgIH1cbiAgICBgO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmFja2dyb3VuZChzaGFkZTogU2hhZGUgPSBTaGFkZS5WQU5JTExBKTogQ1NTUmVzdWx0IHsgXG4gICAgcmV0dXJuIGNzc2BcbiAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZCR7dW5zYWZlQ1NTKHNoYWRlKX0tY29sb3IpO1xuICAgICAgICAgICAgY29sb3I6IHZhcigtLWZvcmVncm91bmQke3Vuc2FmZUNTUyhzaGFkZSl9LWNvbG9yKTtcbiAgICAgICAgfVxuICAgIGA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JlZ3JvdW5kKHNoYWRlOiBTaGFkZSA9IFNoYWRlLlZBTklMTEEpOiBDU1NSZXN1bHQgeyBcbiAgICByZXR1cm4gY3NzYFxuICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1mb3JlZ3JvdW5kJHt1bnNhZmVDU1Moc2hhZGUpfS1jb2xvcik7XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tYmFja2dyb3VuZCR7dW5zYWZlQ1NTKHNoYWRlKX0tY29sb3IpO1xuICAgICAgICB9XG4gICAgYDtcbn1cbiIsImNvbnN0IGFwcGxpZWRDbGFzc01peGlucyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKiBWZWZpZnkgaWYgdGhlIE1peGluIHdhcyBwcmV2aW91c2x5IGFwcGx5ZWRcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBtaXhpbiAgICAgIE1peGluIGJlaW5nIGFwcGx5ZWRcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdXBlckNsYXNzICAgQ2xhc3MgcmVjZWl2aW5nIHRoZSBuZXcgbWl4aW5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiB3YXNNaXhpblByZXZpb3VzbHlBcHBsaWVkKG1peGluLCBzdXBlckNsYXNzKSB7XG4gIGxldCBrbGFzcyA9IHN1cGVyQ2xhc3M7XG4gIHdoaWxlIChrbGFzcykge1xuICAgIGlmIChhcHBsaWVkQ2xhc3NNaXhpbnMuZ2V0KGtsYXNzKSA9PT0gbWl4aW4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBrbGFzcyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihrbGFzcyk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKiogQXBwbHkgZWFjaCBtaXhpbiBpbiB0aGUgY2hhaW4gdG8gbWFrZSBzdXJlIHRoZXkgYXJlIG5vdCBhcHBsaWVkIG1vcmUgdGhhbiBvbmNlIHRvIHRoZSBmaW5hbCBjbGFzcy5cbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG1peGluICAgICAgTWl4aW4gdG8gYmUgYXBwbHllZFxuICogQHJldHVybnMge29iamVjdH0gICAgICAgICAgICBNaXhlZCBjbGFzcyB3aXRoIG1peGluIGFwcGxpZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZHVwZU1peGluKG1peGluKSB7XG4gIHJldHVybiBzdXBlckNsYXNzID0+IHtcbiAgICBpZiAod2FzTWl4aW5QcmV2aW91c2x5QXBwbGllZChtaXhpbiwgc3VwZXJDbGFzcykpIHtcbiAgICAgIHJldHVybiBzdXBlckNsYXNzO1xuICAgIH1cbiAgICBjb25zdCBtaXhlZENsYXNzID0gbWl4aW4oc3VwZXJDbGFzcyk7XG4gICAgYXBwbGllZENsYXNzTWl4aW5zLnNldChtaXhlZENsYXNzLCBtaXhpbik7XG4gICAgcmV0dXJuIG1peGVkQ2xhc3M7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBkZWR1cGVNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL2RlZHVwZS1taXhpbic7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMvRGlzYWJsZWRNaXhpblR5cGVzJykuRGlzYWJsZWRNaXhpbn0gRGlzYWJsZWRNaXhpblxuICovXG5cbi8qKlxuICogQHR5cGUge0Rpc2FibGVkTWl4aW59XG4gKiBAcGFyYW0ge2ltcG9ydCgnQG9wZW4td2MvZGVkdXBlLW1peGluJykuQ29uc3RydWN0b3I8aW1wb3J0KCcuLi9pbmRleCcpLkxpdEVsZW1lbnQ+fSBzdXBlcmNsYXNzXG4gKi9cbmNvbnN0IERpc2FibGVkTWl4aW5JbXBsZW1lbnRhdGlvbiA9IHN1cGVyY2xhc3MgPT5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuICAvLyBAdHMtaWdub3JlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzY4MjEjaXNzdWVjb21tZW50LTU4ODM3NTA1MVxuICBjbGFzcyBleHRlbmRzIHN1cGVyY2xhc3Mge1xuICAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpc2FibGVkOiB7XG4gICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICByZWZsZWN0OiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICAvKiogQHByb3RlY3RlZCAqL1xuICAgICAgdGhpcy5fcmVxdWVzdGVkVG9CZURpc2FibGVkID0gZmFsc2U7XG4gICAgICAvKiogQHByaXZhdGUgKi9cbiAgICAgIHRoaXMuX19pc1VzZXJTZXR0aW5nRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgLyoqIEBwcml2YXRlICovXG4gICAgICB0aGlzLl9fcmVzdG9yZURpc2FibGVkVG8gPSBmYWxzZTtcbiAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBtYWtlUmVxdWVzdFRvQmVEaXNhYmxlZCgpIHtcbiAgICAgIGlmICh0aGlzLl9yZXF1ZXN0ZWRUb0JlRGlzYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RlZFRvQmVEaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX19yZXN0b3JlRGlzYWJsZWRUbyA9IHRoaXMuZGlzYWJsZWQ7XG4gICAgICAgIHRoaXMuX19pbnRlcm5hbFNldERpc2FibGVkKHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHJhY3RSZXF1ZXN0VG9CZURpc2FibGVkKCkge1xuICAgICAgaWYgKHRoaXMuX3JlcXVlc3RlZFRvQmVEaXNhYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLl9yZXF1ZXN0ZWRUb0JlRGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fX2ludGVybmFsU2V0RGlzYWJsZWQodGhpcy5fX3Jlc3RvcmVEaXNhYmxlZFRvKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfX2ludGVybmFsU2V0RGlzYWJsZWQodmFsdWUpIHtcbiAgICAgIHRoaXMuX19pc1VzZXJTZXR0aW5nRGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGlzYWJsZWQgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19pc1VzZXJTZXR0aW5nRGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlLZXl9IG5hbWVcbiAgICAgKiBAcGFyYW0gez99IG9sZFZhbHVlXG4gICAgICovXG4gICAgcmVxdWVzdFVwZGF0ZShuYW1lLCBvbGRWYWx1ZSkge1xuICAgICAgc3VwZXIucmVxdWVzdFVwZGF0ZShuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICBpZiAobmFtZSA9PT0gJ2Rpc2FibGVkJykge1xuICAgICAgICBpZiAodGhpcy5fX2lzVXNlclNldHRpbmdEaXNhYmxlZCkge1xuICAgICAgICAgIHRoaXMuX19yZXN0b3JlRGlzYWJsZWRUbyA9IHRoaXMuZGlzYWJsZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgPT09IGZhbHNlICYmIHRoaXMuX3JlcXVlc3RlZFRvQmVEaXNhYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMuX19pbnRlcm5hbFNldERpc2FibGVkKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG5leHBvcnQgY29uc3QgRGlzYWJsZWRNaXhpbiA9IGRlZHVwZU1peGluKERpc2FibGVkTWl4aW5JbXBsZW1lbnRhdGlvbik7XG4iLCJpbXBvcnQgeyBkZWR1cGVNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL2RlZHVwZS1taXhpbic7XG5pbXBvcnQgeyBEaXNhYmxlZE1peGluIH0gZnJvbSAnLi9EaXNhYmxlZE1peGluLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy9EaXNhYmxlZFdpdGhUYWJJbmRleE1peGluVHlwZXMnKS5EaXNhYmxlZFdpdGhUYWJJbmRleE1peGlufSBEaXNhYmxlZFdpdGhUYWJJbmRleE1peGluXG4gKi9cblxuLyoqXG4gKiBAdHlwZSB7RGlzYWJsZWRXaXRoVGFiSW5kZXhNaXhpbn1cbiAqIEBwYXJhbSB7aW1wb3J0KCdAb3Blbi13Yy9kZWR1cGUtbWl4aW4nKS5Db25zdHJ1Y3RvcjxpbXBvcnQoJy4uL2luZGV4JykuTGl0RWxlbWVudD59IHN1cGVyY2xhc3NcbiAqL1xuY29uc3QgRGlzYWJsZWRXaXRoVGFiSW5kZXhNaXhpbkltcGxlbWVudGF0aW9uID0gc3VwZXJjbGFzcyA9PlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG4gIC8vIEB0cy1pZ25vcmUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zNjgyMSNpc3N1ZWNvbW1lbnQtNTg4Mzc1MDUxXG4gIGNsYXNzIGV4dGVuZHMgRGlzYWJsZWRNaXhpbihzdXBlcmNsYXNzKSB7XG4gICAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gd2UgdXNlIGEgcHJvcGVydHkgaGVyZSBhcyBpZiB3ZSB1c2UgdGhlIG5hdGl2ZSB0YWJJbmRleCB3ZSBjYW4gbm90IHNldCBhIGRlZmF1bHQgdmFsdWVcbiAgICAgICAgLy8gaW4gdGhlIGNvbnN0cnVjdG9yIGFzIGl0IHN5bmNocm9ub3VzbHkgc2V0cyB0aGUgYXR0cmlidXRlIHdoaWNoIGlzIG5vdCBhbGxvd2VkIGluIHRoZVxuICAgICAgICAvLyBjb25zdHJ1Y3RvciBwaGFzZVxuICAgICAgICB0YWJJbmRleDoge1xuICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICByZWZsZWN0OiB0cnVlLFxuICAgICAgICAgIGF0dHJpYnV0ZTogJ3RhYmluZGV4JyxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgLyoqIEBwcml2YXRlICovXG4gICAgICB0aGlzLl9faXNVc2VyU2V0dGluZ1RhYkluZGV4ID0gdHJ1ZTtcbiAgICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgICAgdGhpcy5fX3Jlc3RvcmVUYWJJbmRleFRvID0gMDtcbiAgICAgIHRoaXMuX19pbnRlcm5hbFNldFRhYkluZGV4KDApO1xuICAgIH1cblxuICAgIG1ha2VSZXF1ZXN0VG9CZURpc2FibGVkKCkge1xuICAgICAgc3VwZXIubWFrZVJlcXVlc3RUb0JlRGlzYWJsZWQoKTtcbiAgICAgIGlmICh0aGlzLl9yZXF1ZXN0ZWRUb0JlRGlzYWJsZWQgPT09IGZhbHNlICYmIHRoaXMudGFiSW5kZXggIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9fcmVzdG9yZVRhYkluZGV4VG8gPSB0aGlzLnRhYkluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHJhY3RSZXF1ZXN0VG9CZURpc2FibGVkKCkge1xuICAgICAgc3VwZXIucmV0cmFjdFJlcXVlc3RUb0JlRGlzYWJsZWQoKTtcbiAgICAgIGlmICh0aGlzLl9yZXF1ZXN0ZWRUb0JlRGlzYWJsZWQgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5fX2ludGVybmFsU2V0VGFiSW5kZXgodGhpcy5fX3Jlc3RvcmVUYWJJbmRleFRvKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9faW50ZXJuYWxTZXRUYWJJbmRleCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2lzVXNlclNldHRpbmdUYWJJbmRleCA9IGZhbHNlO1xuICAgICAgdGhpcy50YWJJbmRleCA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2lzVXNlclNldHRpbmdUYWJJbmRleCA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQcm9wZXJ0eUtleX0gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gb2xkVmFsdWVcbiAgICAgKi9cbiAgICByZXF1ZXN0VXBkYXRlKG5hbWUsIG9sZFZhbHVlKSB7XG4gICAgICBzdXBlci5yZXF1ZXN0VXBkYXRlKG5hbWUsIG9sZFZhbHVlKTtcblxuICAgICAgaWYgKG5hbWUgPT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICB0aGlzLl9faW50ZXJuYWxTZXRUYWJJbmRleCgtMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fX2ludGVybmFsU2V0VGFiSW5kZXgodGhpcy5fX3Jlc3RvcmVUYWJJbmRleFRvKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobmFtZSA9PT0gJ3RhYkluZGV4Jykge1xuICAgICAgICBpZiAodGhpcy5fX2lzVXNlclNldHRpbmdUYWJJbmRleCAmJiB0aGlzLnRhYkluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLl9fcmVzdG9yZVRhYkluZGV4VG8gPSB0aGlzLnRhYkluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudGFiSW5kZXggIT09IC0xICYmIHRoaXMuX3JlcXVlc3RlZFRvQmVEaXNhYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMuX19pbnRlcm5hbFNldFRhYkluZGV4KC0xKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAcGFyYW0ge2ltcG9ydCgnbGl0LWVsZW1lbnQnKS5Qcm9wZXJ0eVZhbHVlcyB9IGNoYW5nZWRQcm9wZXJ0aWVzICovXG4gICAgZmlyc3RVcGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKSB7XG4gICAgICBzdXBlci5maXJzdFVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgICAgLy8gZm9yIFNoYWR5RG9tIHRoZSB0aW1pbmcgaXMgYSBsaXR0bGUgZGlmZmVyZW50IGFuZCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZVxuICAgICAgLy8gdGhlIHRhYmluZGV4IGdldHMgY29ycmVjdGx5IHVwZGF0ZWQgaGVyZVxuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5fX2ludGVybmFsU2V0VGFiSW5kZXgoLTEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuZXhwb3J0IGNvbnN0IERpc2FibGVkV2l0aFRhYkluZGV4TWl4aW4gPSBkZWR1cGVNaXhpbihEaXNhYmxlZFdpdGhUYWJJbmRleE1peGluSW1wbGVtZW50YXRpb24pO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCB0PXdpbmRvdyxlPXQuU2hhZG93Um9vdCYmKHZvaWQgMD09PXQuU2hhZHlDU1N8fHQuU2hhZHlDU1MubmF0aXZlU2hhZG93KSYmXCJhZG9wdGVkU3R5bGVTaGVldHNcImluIERvY3VtZW50LnByb3RvdHlwZSYmXCJyZXBsYWNlXCJpbiBDU1NTdHlsZVNoZWV0LnByb3RvdHlwZSxzPVN5bWJvbCgpLG49bmV3IFdlYWtNYXA7Y2xhc3Mgb3tjb25zdHJ1Y3Rvcih0LGUsbil7aWYodGhpcy5fJGNzc1Jlc3VsdCQ9ITAsbiE9PXMpdGhyb3cgRXJyb3IoXCJDU1NSZXN1bHQgaXMgbm90IGNvbnN0cnVjdGFibGUuIFVzZSBgdW5zYWZlQ1NTYCBvciBgY3NzYCBpbnN0ZWFkLlwiKTt0aGlzLmNzc1RleHQ9dCx0aGlzLnQ9ZX1nZXQgc3R5bGVTaGVldCgpe2xldCB0PXRoaXMubztjb25zdCBzPXRoaXMudDtpZihlJiZ2b2lkIDA9PT10KXtjb25zdCBlPXZvaWQgMCE9PXMmJjE9PT1zLmxlbmd0aDtlJiYodD1uLmdldChzKSksdm9pZCAwPT09dCYmKCh0aGlzLm89dD1uZXcgQ1NTU3R5bGVTaGVldCkucmVwbGFjZVN5bmModGhpcy5jc3NUZXh0KSxlJiZuLnNldChzLHQpKX1yZXR1cm4gdH10b1N0cmluZygpe3JldHVybiB0aGlzLmNzc1RleHR9fWNvbnN0IHI9dD0+bmV3IG8oXCJzdHJpbmdcIj09dHlwZW9mIHQ/dDp0K1wiXCIsdm9pZCAwLHMpLGk9KHQsLi4uZSk9Pntjb25zdCBuPTE9PT10Lmxlbmd0aD90WzBdOmUucmVkdWNlKCgoZSxzLG4pPT5lKyh0PT57aWYoITA9PT10Ll8kY3NzUmVzdWx0JClyZXR1cm4gdC5jc3NUZXh0O2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXJldHVybiB0O3Rocm93IEVycm9yKFwiVmFsdWUgcGFzc2VkIHRvICdjc3MnIGZ1bmN0aW9uIG11c3QgYmUgYSAnY3NzJyBmdW5jdGlvbiByZXN1bHQ6IFwiK3QrXCIuIFVzZSAndW5zYWZlQ1NTJyB0byBwYXNzIG5vbi1saXRlcmFsIHZhbHVlcywgYnV0IHRha2UgY2FyZSB0byBlbnN1cmUgcGFnZSBzZWN1cml0eS5cIil9KShzKSt0W24rMV0pLHRbMF0pO3JldHVybiBuZXcgbyhuLHQscyl9LFM9KHMsbik9PntlP3MuYWRvcHRlZFN0eWxlU2hlZXRzPW4ubWFwKCh0PT50IGluc3RhbmNlb2YgQ1NTU3R5bGVTaGVldD90OnQuc3R5bGVTaGVldCkpOm4uZm9yRWFjaCgoZT0+e2NvbnN0IG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLG89dC5saXROb25jZTt2b2lkIDAhPT1vJiZuLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsbyksbi50ZXh0Q29udGVudD1lLmNzc1RleHQscy5hcHBlbmRDaGlsZChuKX0pKX0sYz1lP3Q9PnQ6dD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/KHQ9PntsZXQgZT1cIlwiO2Zvcihjb25zdCBzIG9mIHQuY3NzUnVsZXMpZSs9cy5jc3NUZXh0O3JldHVybiByKGUpfSkodCk6dDtleHBvcnR7byBhcyBDU1NSZXN1bHQsUyBhcyBhZG9wdFN0eWxlcyxpIGFzIGNzcyxjIGFzIGdldENvbXBhdGlibGVTdHlsZSxlIGFzIHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyxyIGFzIHVuc2FmZUNTU307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MtdGFnLmpzLm1hcFxuIiwiaW1wb3J0e2dldENvbXBhdGlibGVTdHlsZSBhcyB0LGFkb3B0U3R5bGVzIGFzIGl9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7ZXhwb3J0e0NTU1Jlc3VsdCxhZG9wdFN0eWxlcyxjc3MsZ2V0Q29tcGF0aWJsZVN0eWxlLHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyx1bnNhZmVDU1N9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgcztjb25zdCBlPXdpbmRvdyxyPWUudHJ1c3RlZFR5cGVzLGg9cj9yLmVtcHR5U2NyaXB0OlwiXCIsbz1lLnJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCxuPXt0b0F0dHJpYnV0ZSh0LGkpe3N3aXRjaChpKXtjYXNlIEJvb2xlYW46dD10P2g6bnVsbDticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnQ9bnVsbD09dD90OkpTT04uc3RyaW5naWZ5KHQpfXJldHVybiB0fSxmcm9tQXR0cmlidXRlKHQsaSl7bGV0IHM9dDtzd2l0Y2goaSl7Y2FzZSBCb29sZWFuOnM9bnVsbCE9PXQ7YnJlYWs7Y2FzZSBOdW1iZXI6cz1udWxsPT09dD9udWxsOk51bWJlcih0KTticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnRyeXtzPUpTT04ucGFyc2UodCl9Y2F0Y2godCl7cz1udWxsfX1yZXR1cm4gc319LGE9KHQsaSk9PmkhPT10JiYoaT09aXx8dD09dCksbD17YXR0cmlidXRlOiEwLHR5cGU6U3RyaW5nLGNvbnZlcnRlcjpuLHJlZmxlY3Q6ITEsaGFzQ2hhbmdlZDphfSxkPVwiZmluYWxpemVkXCI7Y2xhc3MgdSBleHRlbmRzIEhUTUxFbGVtZW50e2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl8kRWk9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMSx0aGlzLmhhc1VwZGF0ZWQ9ITEsdGhpcy5fJEVsPW51bGwsdGhpcy5fJEV1KCl9c3RhdGljIGFkZEluaXRpYWxpemVyKHQpe3ZhciBpO3RoaXMuZmluYWxpemUoKSwobnVsbCE9PShpPXRoaXMuaCkmJnZvaWQgMCE9PWk/aTp0aGlzLmg9W10pLnB1c2godCl9c3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKXt0aGlzLmZpbmFsaXplKCk7Y29uc3QgdD1bXTtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgoaSxzKT0+e2NvbnN0IGU9dGhpcy5fJEVwKHMsaSk7dm9pZCAwIT09ZSYmKHRoaXMuXyRFdi5zZXQoZSxzKSx0LnB1c2goZSkpfSkpLHR9c3RhdGljIGNyZWF0ZVByb3BlcnR5KHQsaT1sKXtpZihpLnN0YXRlJiYoaS5hdHRyaWJ1dGU9ITEpLHRoaXMuZmluYWxpemUoKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLnNldCh0LGkpLCFpLm5vQWNjZXNzb3ImJiF0aGlzLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSh0KSl7Y29uc3Qgcz1cInN5bWJvbFwiPT10eXBlb2YgdD9TeW1ib2woKTpcIl9fXCIrdCxlPXRoaXMuZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHQscyxpKTt2b2lkIDAhPT1lJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5wcm90b3R5cGUsdCxlKX19c3RhdGljIGdldFByb3BlcnR5RGVzY3JpcHRvcih0LGkscyl7cmV0dXJue2dldCgpe3JldHVybiB0aGlzW2ldfSxzZXQoZSl7Y29uc3Qgcj10aGlzW3RdO3RoaXNbaV09ZSx0aGlzLnJlcXVlc3RVcGRhdGUodCxyLHMpfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH19c3RhdGljIGdldFByb3BlcnR5T3B0aW9ucyh0KXtyZXR1cm4gdGhpcy5lbGVtZW50UHJvcGVydGllcy5nZXQodCl8fGx9c3RhdGljIGZpbmFsaXplKCl7aWYodGhpcy5oYXNPd25Qcm9wZXJ0eShkKSlyZXR1cm4hMTt0aGlzW2RdPSEwO2NvbnN0IHQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO2lmKHQuZmluYWxpemUoKSx2b2lkIDAhPT10LmgmJih0aGlzLmg9Wy4uLnQuaF0pLHRoaXMuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCh0LmVsZW1lbnRQcm9wZXJ0aWVzKSx0aGlzLl8kRXY9bmV3IE1hcCx0aGlzLmhhc093blByb3BlcnR5KFwicHJvcGVydGllc1wiKSl7Y29uc3QgdD10aGlzLnByb3BlcnRpZXMsaT1bLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCksLi4uT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KV07Zm9yKGNvbnN0IHMgb2YgaSl0aGlzLmNyZWF0ZVByb3BlcnR5KHMsdFtzXSl9cmV0dXJuIHRoaXMuZWxlbWVudFN0eWxlcz10aGlzLmZpbmFsaXplU3R5bGVzKHRoaXMuc3R5bGVzKSwhMH1zdGF0aWMgZmluYWxpemVTdHlsZXMoaSl7Y29uc3Qgcz1bXTtpZihBcnJheS5pc0FycmF5KGkpKXtjb25zdCBlPW5ldyBTZXQoaS5mbGF0KDEvMCkucmV2ZXJzZSgpKTtmb3IoY29uc3QgaSBvZiBlKXMudW5zaGlmdCh0KGkpKX1lbHNlIHZvaWQgMCE9PWkmJnMucHVzaCh0KGkpKTtyZXR1cm4gc31zdGF0aWMgXyRFcCh0LGkpe2NvbnN0IHM9aS5hdHRyaWJ1dGU7cmV0dXJuITE9PT1zP3ZvaWQgMDpcInN0cmluZ1wiPT10eXBlb2Ygcz9zOlwic3RyaW5nXCI9PXR5cGVvZiB0P3QudG9Mb3dlckNhc2UoKTp2b2lkIDB9XyRFdSgpe3ZhciB0O3RoaXMuXyRFXz1uZXcgUHJvbWlzZSgodD0+dGhpcy5lbmFibGVVcGRhdGluZz10KSksdGhpcy5fJEFMPW5ldyBNYXAsdGhpcy5fJEVnKCksdGhpcy5yZXF1ZXN0VXBkYXRlKCksbnVsbD09PSh0PXRoaXMuY29uc3RydWN0b3IuaCl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+dCh0aGlzKSkpfWFkZENvbnRyb2xsZXIodCl7dmFyIGksczsobnVsbCE9PShpPXRoaXMuXyRFUykmJnZvaWQgMCE9PWk/aTp0aGlzLl8kRVM9W10pLnB1c2godCksdm9pZCAwIT09dGhpcy5yZW5kZXJSb290JiZ0aGlzLmlzQ29ubmVjdGVkJiYobnVsbD09PShzPXQuaG9zdENvbm5lY3RlZCl8fHZvaWQgMD09PXN8fHMuY2FsbCh0KSl9cmVtb3ZlQ29udHJvbGxlcih0KXt2YXIgaTtudWxsPT09KGk9dGhpcy5fJEVTKXx8dm9pZCAwPT09aXx8aS5zcGxpY2UodGhpcy5fJEVTLmluZGV4T2YodCk+Pj4wLDEpfV8kRWcoKXt0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRQcm9wZXJ0aWVzLmZvckVhY2goKCh0LGkpPT57dGhpcy5oYXNPd25Qcm9wZXJ0eShpKSYmKHRoaXMuXyRFaS5zZXQoaSx0aGlzW2ldKSxkZWxldGUgdGhpc1tpXSl9KSl9Y3JlYXRlUmVuZGVyUm9vdCgpe3ZhciB0O2NvbnN0IHM9bnVsbCE9PSh0PXRoaXMuc2hhZG93Um9vdCkmJnZvaWQgMCE9PXQ/dDp0aGlzLmF0dGFjaFNoYWRvdyh0aGlzLmNvbnN0cnVjdG9yLnNoYWRvd1Jvb3RPcHRpb25zKTtyZXR1cm4gaShzLHRoaXMuY29uc3RydWN0b3IuZWxlbWVudFN0eWxlcyksc31jb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O3ZvaWQgMD09PXRoaXMucmVuZGVyUm9vdCYmKHRoaXMucmVuZGVyUm9vdD10aGlzLmNyZWF0ZVJlbmRlclJvb3QoKSksdGhpcy5lbmFibGVVcGRhdGluZyghMCksbnVsbD09PSh0PXRoaXMuXyRFUyl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0Q29ubmVjdGVkKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpfWVuYWJsZVVwZGF0aW5nKHQpe31kaXNjb25uZWN0ZWRDYWxsYmFjaygpe3ZhciB0O251bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdERpc2Nvbm5lY3RlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKX1hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodCxpLHMpe3RoaXMuXyRBSyh0LHMpfV8kRU8odCxpLHM9bCl7dmFyIGU7Y29uc3Qgcj10aGlzLmNvbnN0cnVjdG9yLl8kRXAodCxzKTtpZih2b2lkIDAhPT1yJiYhMD09PXMucmVmbGVjdCl7Y29uc3QgaD0odm9pZCAwIT09KG51bGw9PT0oZT1zLmNvbnZlcnRlcil8fHZvaWQgMD09PWU/dm9pZCAwOmUudG9BdHRyaWJ1dGUpP3MuY29udmVydGVyOm4pLnRvQXR0cmlidXRlKGkscy50eXBlKTt0aGlzLl8kRWw9dCxudWxsPT1oP3RoaXMucmVtb3ZlQXR0cmlidXRlKHIpOnRoaXMuc2V0QXR0cmlidXRlKHIsaCksdGhpcy5fJEVsPW51bGx9fV8kQUsodCxpKXt2YXIgcztjb25zdCBlPXRoaXMuY29uc3RydWN0b3Iscj1lLl8kRXYuZ2V0KHQpO2lmKHZvaWQgMCE9PXImJnRoaXMuXyRFbCE9PXIpe2NvbnN0IHQ9ZS5nZXRQcm9wZXJ0eU9wdGlvbnMociksaD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmNvbnZlcnRlcj97ZnJvbUF0dHJpYnV0ZTp0LmNvbnZlcnRlcn06dm9pZCAwIT09KG51bGw9PT0ocz10LmNvbnZlcnRlcil8fHZvaWQgMD09PXM/dm9pZCAwOnMuZnJvbUF0dHJpYnV0ZSk/dC5jb252ZXJ0ZXI6bjt0aGlzLl8kRWw9cix0aGlzW3JdPWguZnJvbUF0dHJpYnV0ZShpLHQudHlwZSksdGhpcy5fJEVsPW51bGx9fXJlcXVlc3RVcGRhdGUodCxpLHMpe2xldCBlPSEwO3ZvaWQgMCE9PXQmJigoKHM9c3x8dGhpcy5jb25zdHJ1Y3Rvci5nZXRQcm9wZXJ0eU9wdGlvbnModCkpLmhhc0NoYW5nZWR8fGEpKHRoaXNbdF0saSk/KHRoaXMuXyRBTC5oYXModCl8fHRoaXMuXyRBTC5zZXQodCxpKSwhMD09PXMucmVmbGVjdCYmdGhpcy5fJEVsIT09dCYmKHZvaWQgMD09PXRoaXMuXyRFQyYmKHRoaXMuXyRFQz1uZXcgTWFwKSx0aGlzLl8kRUMuc2V0KHQscykpKTplPSExKSwhdGhpcy5pc1VwZGF0ZVBlbmRpbmcmJmUmJih0aGlzLl8kRV89dGhpcy5fJEVqKCkpfWFzeW5jIF8kRWooKXt0aGlzLmlzVXBkYXRlUGVuZGluZz0hMDt0cnl7YXdhaXQgdGhpcy5fJEVffWNhdGNoKHQpe1Byb21pc2UucmVqZWN0KHQpfWNvbnN0IHQ9dGhpcy5zY2hlZHVsZVVwZGF0ZSgpO3JldHVybiBudWxsIT10JiZhd2FpdCB0LCF0aGlzLmlzVXBkYXRlUGVuZGluZ31zY2hlZHVsZVVwZGF0ZSgpe3JldHVybiB0aGlzLnBlcmZvcm1VcGRhdGUoKX1wZXJmb3JtVXBkYXRlKCl7dmFyIHQ7aWYoIXRoaXMuaXNVcGRhdGVQZW5kaW5nKXJldHVybjt0aGlzLmhhc1VwZGF0ZWQsdGhpcy5fJEVpJiYodGhpcy5fJEVpLmZvckVhY2goKCh0LGkpPT50aGlzW2ldPXQpKSx0aGlzLl8kRWk9dm9pZCAwKTtsZXQgaT0hMTtjb25zdCBzPXRoaXMuXyRBTDt0cnl7aT10aGlzLnNob3VsZFVwZGF0ZShzKSxpPyh0aGlzLndpbGxVcGRhdGUocyksbnVsbD09PSh0PXRoaXMuXyRFUyl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0VXBkYXRlKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpLHRoaXMudXBkYXRlKHMpKTp0aGlzLl8kRWsoKX1jYXRjaCh0KXt0aHJvdyBpPSExLHRoaXMuXyRFaygpLHR9aSYmdGhpcy5fJEFFKHMpfXdpbGxVcGRhdGUodCl7fV8kQUUodCl7dmFyIGk7bnVsbD09PShpPXRoaXMuXyRFUyl8fHZvaWQgMD09PWl8fGkuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0VXBkYXRlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKSx0aGlzLmhhc1VwZGF0ZWR8fCh0aGlzLmhhc1VwZGF0ZWQ9ITAsdGhpcy5maXJzdFVwZGF0ZWQodCkpLHRoaXMudXBkYXRlZCh0KX1fJEVrKCl7dGhpcy5fJEFMPW5ldyBNYXAsdGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITF9Z2V0IHVwZGF0ZUNvbXBsZXRlKCl7cmV0dXJuIHRoaXMuZ2V0VXBkYXRlQ29tcGxldGUoKX1nZXRVcGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLl8kRV99c2hvdWxkVXBkYXRlKHQpe3JldHVybiEwfXVwZGF0ZSh0KXt2b2lkIDAhPT10aGlzLl8kRUMmJih0aGlzLl8kRUMuZm9yRWFjaCgoKHQsaSk9PnRoaXMuXyRFTyhpLHRoaXNbaV0sdCkpKSx0aGlzLl8kRUM9dm9pZCAwKSx0aGlzLl8kRWsoKX11cGRhdGVkKHQpe31maXJzdFVwZGF0ZWQodCl7fX11W2RdPSEwLHUuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCx1LmVsZW1lbnRTdHlsZXM9W10sdS5zaGFkb3dSb290T3B0aW9ucz17bW9kZTpcIm9wZW5cIn0sbnVsbD09b3x8byh7UmVhY3RpdmVFbGVtZW50OnV9KSwobnVsbCE9PShzPWUucmVhY3RpdmVFbGVtZW50VmVyc2lvbnMpJiZ2b2lkIDAhPT1zP3M6ZS5yZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucz1bXSkucHVzaChcIjEuNi4zXCIpO2V4cG9ydHt1IGFzIFJlYWN0aXZlRWxlbWVudCxuIGFzIGRlZmF1bHRDb252ZXJ0ZXIsYSBhcyBub3RFcXVhbH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdGl2ZS1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG52YXIgdDtjb25zdCBpPXdpbmRvdyxzPWkudHJ1c3RlZFR5cGVzLGU9cz9zLmNyZWF0ZVBvbGljeShcImxpdC1odG1sXCIse2NyZWF0ZUhUTUw6dD0+dH0pOnZvaWQgMCxvPVwiJGxpdCRcIixuPWBsaXQkJHsoTWF0aC5yYW5kb20oKStcIlwiKS5zbGljZSg5KX0kYCxsPVwiP1wiK24saD1gPCR7bH0+YCxyPWRvY3VtZW50LHU9KCk9PnIuY3JlYXRlQ29tbWVudChcIlwiKSxkPXQ9Pm51bGw9PT10fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdCxjPUFycmF5LmlzQXJyYXksdj10PT5jKHQpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZihudWxsPT10P3ZvaWQgMDp0W1N5bWJvbC5pdGVyYXRvcl0pLGE9XCJbIFxcdFxcblxcZlxccl1cIixmPS88KD86KCEtLXxcXC9bXmEtekEtWl0pfChcXC8/W2EtekEtWl1bXj5cXHNdKil8KFxcLz8kKSkvZyxfPS8tLT4vZyxtPS8+L2cscD1SZWdFeHAoYD58JHthfSg/OihbXlxcXFxzXCInPj0vXSspKCR7YX0qPSR7YX0qKD86W14gXFx0XFxuXFxmXFxyXCInXFxgPD49XXwoXCJ8Jyl8KSl8JClgLFwiZ1wiKSxnPS8nL2csJD0vXCIvZyx5PS9eKD86c2NyaXB0fHN0eWxlfHRleHRhcmVhfHRpdGxlKSQvaSx3PXQ9PihpLC4uLnMpPT4oe18kbGl0VHlwZSQ6dCxzdHJpbmdzOmksdmFsdWVzOnN9KSx4PXcoMSksYj13KDIpLFQ9U3ltYm9sLmZvcihcImxpdC1ub0NoYW5nZVwiKSxBPVN5bWJvbC5mb3IoXCJsaXQtbm90aGluZ1wiKSxFPW5ldyBXZWFrTWFwLEM9ci5jcmVhdGVUcmVlV2Fsa2VyKHIsMTI5LG51bGwsITEpO2Z1bmN0aW9uIFAodCxpKXtpZighQXJyYXkuaXNBcnJheSh0KXx8IXQuaGFzT3duUHJvcGVydHkoXCJyYXdcIikpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHRlbXBsYXRlIHN0cmluZ3MgYXJyYXlcIik7cmV0dXJuIHZvaWQgMCE9PWU/ZS5jcmVhdGVIVE1MKGkpOml9Y29uc3QgVj0odCxpKT0+e2NvbnN0IHM9dC5sZW5ndGgtMSxlPVtdO2xldCBsLHI9Mj09PWk/XCI8c3ZnPlwiOlwiXCIsdT1mO2ZvcihsZXQgaT0wO2k8cztpKyspe2NvbnN0IHM9dFtpXTtsZXQgZCxjLHY9LTEsYT0wO2Zvcig7YTxzLmxlbmd0aCYmKHUubGFzdEluZGV4PWEsYz11LmV4ZWMocyksbnVsbCE9PWMpOylhPXUubGFzdEluZGV4LHU9PT1mP1wiIS0tXCI9PT1jWzFdP3U9Xzp2b2lkIDAhPT1jWzFdP3U9bTp2b2lkIDAhPT1jWzJdPyh5LnRlc3QoY1syXSkmJihsPVJlZ0V4cChcIjwvXCIrY1syXSxcImdcIikpLHU9cCk6dm9pZCAwIT09Y1szXSYmKHU9cCk6dT09PXA/XCI+XCI9PT1jWzBdPyh1PW51bGwhPWw/bDpmLHY9LTEpOnZvaWQgMD09PWNbMV0/dj0tMjoodj11Lmxhc3RJbmRleC1jWzJdLmxlbmd0aCxkPWNbMV0sdT12b2lkIDA9PT1jWzNdP3A6J1wiJz09PWNbM10/JDpnKTp1PT09JHx8dT09PWc/dT1wOnU9PT1ffHx1PT09bT91PWY6KHU9cCxsPXZvaWQgMCk7Y29uc3Qgdz11PT09cCYmdFtpKzFdLnN0YXJ0c1dpdGgoXCIvPlwiKT9cIiBcIjpcIlwiO3IrPXU9PT1mP3MraDp2Pj0wPyhlLnB1c2goZCkscy5zbGljZSgwLHYpK28rcy5zbGljZSh2KStuK3cpOnMrbisoLTI9PT12PyhlLnB1c2godm9pZCAwKSxpKTp3KX1yZXR1cm5bUCh0LHIrKHRbc118fFwiPD8+XCIpKygyPT09aT9cIjwvc3ZnPlwiOlwiXCIpKSxlXX07Y2xhc3MgTntjb25zdHJ1Y3Rvcih7c3RyaW5nczp0LF8kbGl0VHlwZSQ6aX0sZSl7bGV0IGg7dGhpcy5wYXJ0cz1bXTtsZXQgcj0wLGQ9MDtjb25zdCBjPXQubGVuZ3RoLTEsdj10aGlzLnBhcnRzLFthLGZdPVYodCxpKTtpZih0aGlzLmVsPU4uY3JlYXRlRWxlbWVudChhLGUpLEMuY3VycmVudE5vZGU9dGhpcy5lbC5jb250ZW50LDI9PT1pKXtjb25zdCB0PXRoaXMuZWwuY29udGVudCxpPXQuZmlyc3RDaGlsZDtpLnJlbW92ZSgpLHQuYXBwZW5kKC4uLmkuY2hpbGROb2Rlcyl9Zm9yKDtudWxsIT09KGg9Qy5uZXh0Tm9kZSgpKSYmdi5sZW5ndGg8Yzspe2lmKDE9PT1oLm5vZGVUeXBlKXtpZihoLmhhc0F0dHJpYnV0ZXMoKSl7Y29uc3QgdD1bXTtmb3IoY29uc3QgaSBvZiBoLmdldEF0dHJpYnV0ZU5hbWVzKCkpaWYoaS5lbmRzV2l0aChvKXx8aS5zdGFydHNXaXRoKG4pKXtjb25zdCBzPWZbZCsrXTtpZih0LnB1c2goaSksdm9pZCAwIT09cyl7Y29uc3QgdD1oLmdldEF0dHJpYnV0ZShzLnRvTG93ZXJDYXNlKCkrbykuc3BsaXQobiksaT0vKFsuP0BdKT8oLiopLy5leGVjKHMpO3YucHVzaCh7dHlwZToxLGluZGV4OnIsbmFtZTppWzJdLHN0cmluZ3M6dCxjdG9yOlwiLlwiPT09aVsxXT9IOlwiP1wiPT09aVsxXT9MOlwiQFwiPT09aVsxXT96Omt9KX1lbHNlIHYucHVzaCh7dHlwZTo2LGluZGV4OnJ9KX1mb3IoY29uc3QgaSBvZiB0KWgucmVtb3ZlQXR0cmlidXRlKGkpfWlmKHkudGVzdChoLnRhZ05hbWUpKXtjb25zdCB0PWgudGV4dENvbnRlbnQuc3BsaXQobiksaT10Lmxlbmd0aC0xO2lmKGk+MCl7aC50ZXh0Q29udGVudD1zP3MuZW1wdHlTY3JpcHQ6XCJcIjtmb3IobGV0IHM9MDtzPGk7cysrKWguYXBwZW5kKHRbc10sdSgpKSxDLm5leHROb2RlKCksdi5wdXNoKHt0eXBlOjIsaW5kZXg6KytyfSk7aC5hcHBlbmQodFtpXSx1KCkpfX19ZWxzZSBpZig4PT09aC5ub2RlVHlwZSlpZihoLmRhdGE9PT1sKXYucHVzaCh7dHlwZToyLGluZGV4OnJ9KTtlbHNle2xldCB0PS0xO2Zvcig7LTEhPT0odD1oLmRhdGEuaW5kZXhPZihuLHQrMSkpOyl2LnB1c2goe3R5cGU6NyxpbmRleDpyfSksdCs9bi5sZW5ndGgtMX1yKyt9fXN0YXRpYyBjcmVhdGVFbGVtZW50KHQsaSl7Y29uc3Qgcz1yLmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtyZXR1cm4gcy5pbm5lckhUTUw9dCxzfX1mdW5jdGlvbiBTKHQsaSxzPXQsZSl7dmFyIG8sbixsLGg7aWYoaT09PVQpcmV0dXJuIGk7bGV0IHI9dm9pZCAwIT09ZT9udWxsPT09KG89cy5fJENvKXx8dm9pZCAwPT09bz92b2lkIDA6b1tlXTpzLl8kQ2w7Y29uc3QgdT1kKGkpP3ZvaWQgMDppLl8kbGl0RGlyZWN0aXZlJDtyZXR1cm4obnVsbD09cj92b2lkIDA6ci5jb25zdHJ1Y3RvcikhPT11JiYobnVsbD09PShuPW51bGw9PXI/dm9pZCAwOnIuXyRBTyl8fHZvaWQgMD09PW58fG4uY2FsbChyLCExKSx2b2lkIDA9PT11P3I9dm9pZCAwOihyPW5ldyB1KHQpLHIuXyRBVCh0LHMsZSkpLHZvaWQgMCE9PWU/KG51bGwhPT0obD0oaD1zKS5fJENvKSYmdm9pZCAwIT09bD9sOmguXyRDbz1bXSlbZV09cjpzLl8kQ2w9ciksdm9pZCAwIT09ciYmKGk9Uyh0LHIuXyRBUyh0LGkudmFsdWVzKSxyLGUpKSxpfWNsYXNzIE17Y29uc3RydWN0b3IodCxpKXt0aGlzLl8kQVY9W10sdGhpcy5fJEFOPXZvaWQgMCx0aGlzLl8kQUQ9dCx0aGlzLl8kQU09aX1nZXQgcGFyZW50Tm9kZSgpe3JldHVybiB0aGlzLl8kQU0ucGFyZW50Tm9kZX1nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX11KHQpe3ZhciBpO2NvbnN0e2VsOntjb250ZW50OnN9LHBhcnRzOmV9PXRoaXMuXyRBRCxvPShudWxsIT09KGk9bnVsbD09dD92b2lkIDA6dC5jcmVhdGlvblNjb3BlKSYmdm9pZCAwIT09aT9pOnIpLmltcG9ydE5vZGUocywhMCk7Qy5jdXJyZW50Tm9kZT1vO2xldCBuPUMubmV4dE5vZGUoKSxsPTAsaD0wLHU9ZVswXTtmb3IoO3ZvaWQgMCE9PXU7KXtpZihsPT09dS5pbmRleCl7bGV0IGk7Mj09PXUudHlwZT9pPW5ldyBSKG4sbi5uZXh0U2libGluZyx0aGlzLHQpOjE9PT11LnR5cGU/aT1uZXcgdS5jdG9yKG4sdS5uYW1lLHUuc3RyaW5ncyx0aGlzLHQpOjY9PT11LnR5cGUmJihpPW5ldyBaKG4sdGhpcyx0KSksdGhpcy5fJEFWLnB1c2goaSksdT1lWysraF19bCE9PShudWxsPT11P3ZvaWQgMDp1LmluZGV4KSYmKG49Qy5uZXh0Tm9kZSgpLGwrKyl9cmV0dXJuIEMuY3VycmVudE5vZGU9cixvfXYodCl7bGV0IGk9MDtmb3IoY29uc3QgcyBvZiB0aGlzLl8kQVYpdm9pZCAwIT09cyYmKHZvaWQgMCE9PXMuc3RyaW5ncz8ocy5fJEFJKHQscyxpKSxpKz1zLnN0cmluZ3MubGVuZ3RoLTIpOnMuXyRBSSh0W2ldKSksaSsrfX1jbGFzcyBSe2NvbnN0cnVjdG9yKHQsaSxzLGUpe3ZhciBvO3RoaXMudHlwZT0yLHRoaXMuXyRBSD1BLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFBPXQsdGhpcy5fJEFCPWksdGhpcy5fJEFNPXMsdGhpcy5vcHRpb25zPWUsdGhpcy5fJENwPW51bGw9PT0obz1udWxsPT1lP3ZvaWQgMDplLmlzQ29ubmVjdGVkKXx8dm9pZCAwPT09b3x8b31nZXQgXyRBVSgpe3ZhciB0LGk7cmV0dXJuIG51bGwhPT0oaT1udWxsPT09KHQ9dGhpcy5fJEFNKXx8dm9pZCAwPT09dD92b2lkIDA6dC5fJEFVKSYmdm9pZCAwIT09aT9pOnRoaXMuXyRDcH1nZXQgcGFyZW50Tm9kZSgpe2xldCB0PXRoaXMuXyRBQS5wYXJlbnROb2RlO2NvbnN0IGk9dGhpcy5fJEFNO3JldHVybiB2b2lkIDAhPT1pJiYxMT09PShudWxsPT10P3ZvaWQgMDp0Lm5vZGVUeXBlKSYmKHQ9aS5wYXJlbnROb2RlKSx0fWdldCBzdGFydE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFBfWdldCBlbmROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQn1fJEFJKHQsaT10aGlzKXt0PVModGhpcyx0LGkpLGQodCk/dD09PUF8fG51bGw9PXR8fFwiXCI9PT10Pyh0aGlzLl8kQUghPT1BJiZ0aGlzLl8kQVIoKSx0aGlzLl8kQUg9QSk6dCE9PXRoaXMuXyRBSCYmdCE9PVQmJnRoaXMuXyh0KTp2b2lkIDAhPT10Ll8kbGl0VHlwZSQ/dGhpcy5nKHQpOnZvaWQgMCE9PXQubm9kZVR5cGU/dGhpcy4kKHQpOnYodCk/dGhpcy5UKHQpOnRoaXMuXyh0KX1rKHQpe3JldHVybiB0aGlzLl8kQUEucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCx0aGlzLl8kQUIpfSQodCl7dGhpcy5fJEFIIT09dCYmKHRoaXMuXyRBUigpLHRoaXMuXyRBSD10aGlzLmsodCkpfV8odCl7dGhpcy5fJEFIIT09QSYmZCh0aGlzLl8kQUgpP3RoaXMuXyRBQS5uZXh0U2libGluZy5kYXRhPXQ6dGhpcy4kKHIuY3JlYXRlVGV4dE5vZGUodCkpLHRoaXMuXyRBSD10fWcodCl7dmFyIGk7Y29uc3R7dmFsdWVzOnMsXyRsaXRUeXBlJDplfT10LG89XCJudW1iZXJcIj09dHlwZW9mIGU/dGhpcy5fJEFDKHQpOih2b2lkIDA9PT1lLmVsJiYoZS5lbD1OLmNyZWF0ZUVsZW1lbnQoUChlLmgsZS5oWzBdKSx0aGlzLm9wdGlvbnMpKSxlKTtpZigobnVsbD09PShpPXRoaXMuXyRBSCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuXyRBRCk9PT1vKXRoaXMuXyRBSC52KHMpO2Vsc2V7Y29uc3QgdD1uZXcgTShvLHRoaXMpLGk9dC51KHRoaXMub3B0aW9ucyk7dC52KHMpLHRoaXMuJChpKSx0aGlzLl8kQUg9dH19XyRBQyh0KXtsZXQgaT1FLmdldCh0LnN0cmluZ3MpO3JldHVybiB2b2lkIDA9PT1pJiZFLnNldCh0LnN0cmluZ3MsaT1uZXcgTih0KSksaX1UKHQpe2ModGhpcy5fJEFIKXx8KHRoaXMuXyRBSD1bXSx0aGlzLl8kQVIoKSk7Y29uc3QgaT10aGlzLl8kQUg7bGV0IHMsZT0wO2Zvcihjb25zdCBvIG9mIHQpZT09PWkubGVuZ3RoP2kucHVzaChzPW5ldyBSKHRoaXMuayh1KCkpLHRoaXMuayh1KCkpLHRoaXMsdGhpcy5vcHRpb25zKSk6cz1pW2VdLHMuXyRBSShvKSxlKys7ZTxpLmxlbmd0aCYmKHRoaXMuXyRBUihzJiZzLl8kQUIubmV4dFNpYmxpbmcsZSksaS5sZW5ndGg9ZSl9XyRBUih0PXRoaXMuXyRBQS5uZXh0U2libGluZyxpKXt2YXIgcztmb3IobnVsbD09PShzPXRoaXMuXyRBUCl8fHZvaWQgMD09PXN8fHMuY2FsbCh0aGlzLCExLCEwLGkpO3QmJnQhPT10aGlzLl8kQUI7KXtjb25zdCBpPXQubmV4dFNpYmxpbmc7dC5yZW1vdmUoKSx0PWl9fXNldENvbm5lY3RlZCh0KXt2YXIgaTt2b2lkIDA9PT10aGlzLl8kQU0mJih0aGlzLl8kQ3A9dCxudWxsPT09KGk9dGhpcy5fJEFQKXx8dm9pZCAwPT09aXx8aS5jYWxsKHRoaXMsdCkpfX1jbGFzcyBre2NvbnN0cnVjdG9yKHQsaSxzLGUsbyl7dGhpcy50eXBlPTEsdGhpcy5fJEFIPUEsdGhpcy5fJEFOPXZvaWQgMCx0aGlzLmVsZW1lbnQ9dCx0aGlzLm5hbWU9aSx0aGlzLl8kQU09ZSx0aGlzLm9wdGlvbnM9byxzLmxlbmd0aD4yfHxcIlwiIT09c1swXXx8XCJcIiE9PXNbMV0/KHRoaXMuXyRBSD1BcnJheShzLmxlbmd0aC0xKS5maWxsKG5ldyBTdHJpbmcpLHRoaXMuc3RyaW5ncz1zKTp0aGlzLl8kQUg9QX1nZXQgdGFnTmFtZSgpe3JldHVybiB0aGlzLmVsZW1lbnQudGFnTmFtZX1nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1fJEFJKHQsaT10aGlzLHMsZSl7Y29uc3Qgbz10aGlzLnN0cmluZ3M7bGV0IG49ITE7aWYodm9pZCAwPT09byl0PVModGhpcyx0LGksMCksbj0hZCh0KXx8dCE9PXRoaXMuXyRBSCYmdCE9PVQsbiYmKHRoaXMuXyRBSD10KTtlbHNle2NvbnN0IGU9dDtsZXQgbCxoO2Zvcih0PW9bMF0sbD0wO2w8by5sZW5ndGgtMTtsKyspaD1TKHRoaXMsZVtzK2xdLGksbCksaD09PVQmJihoPXRoaXMuXyRBSFtsXSksbnx8KG49IWQoaCl8fGghPT10aGlzLl8kQUhbbF0pLGg9PT1BP3Q9QTp0IT09QSYmKHQrPShudWxsIT1oP2g6XCJcIikrb1tsKzFdKSx0aGlzLl8kQUhbbF09aH1uJiYhZSYmdGhpcy5qKHQpfWoodCl7dD09PUE/dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpOnRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLG51bGwhPXQ/dDpcIlwiKX19Y2xhc3MgSCBleHRlbmRzIGt7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMudHlwZT0zfWoodCl7dGhpcy5lbGVtZW50W3RoaXMubmFtZV09dD09PUE/dm9pZCAwOnR9fWNvbnN0IEk9cz9zLmVtcHR5U2NyaXB0OlwiXCI7Y2xhc3MgTCBleHRlbmRzIGt7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMudHlwZT00fWoodCl7dCYmdCE9PUE/dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsSSk6dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpfX1jbGFzcyB6IGV4dGVuZHMga3tjb25zdHJ1Y3Rvcih0LGkscyxlLG8pe3N1cGVyKHQsaSxzLGUsbyksdGhpcy50eXBlPTV9XyRBSSh0LGk9dGhpcyl7dmFyIHM7aWYoKHQ9bnVsbCE9PShzPVModGhpcyx0LGksMCkpJiZ2b2lkIDAhPT1zP3M6QSk9PT1UKXJldHVybjtjb25zdCBlPXRoaXMuXyRBSCxvPXQ9PT1BJiZlIT09QXx8dC5jYXB0dXJlIT09ZS5jYXB0dXJlfHx0Lm9uY2UhPT1lLm9uY2V8fHQucGFzc2l2ZSE9PWUucGFzc2l2ZSxuPXQhPT1BJiYoZT09PUF8fG8pO28mJnRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMubmFtZSx0aGlzLGUpLG4mJnRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMubmFtZSx0aGlzLHQpLHRoaXMuXyRBSD10fWhhbmRsZUV2ZW50KHQpe3ZhciBpLHM7XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5fJEFIP3RoaXMuXyRBSC5jYWxsKG51bGwhPT0ocz1udWxsPT09KGk9dGhpcy5vcHRpb25zKXx8dm9pZCAwPT09aT92b2lkIDA6aS5ob3N0KSYmdm9pZCAwIT09cz9zOnRoaXMuZWxlbWVudCx0KTp0aGlzLl8kQUguaGFuZGxlRXZlbnQodCl9fWNsYXNzIFp7Y29uc3RydWN0b3IodCxpLHMpe3RoaXMuZWxlbWVudD10LHRoaXMudHlwZT02LHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFNPWksdGhpcy5vcHRpb25zPXN9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBSSh0KXtTKHRoaXMsdCl9fWNvbnN0IGo9e086byxQOm4sQTpsLEM6MSxNOlYsTDpNLFI6dixEOlMsSTpSLFY6ayxIOkwsTjp6LFU6SCxGOlp9LEI9aS5saXRIdG1sUG9seWZpbGxTdXBwb3J0O251bGw9PUJ8fEIoTixSKSwobnVsbCE9PSh0PWkubGl0SHRtbFZlcnNpb25zKSYmdm9pZCAwIT09dD90OmkubGl0SHRtbFZlcnNpb25zPVtdKS5wdXNoKFwiMi44LjBcIik7Y29uc3QgRD0odCxpLHMpPT57dmFyIGUsbztjb25zdCBuPW51bGwhPT0oZT1udWxsPT1zP3ZvaWQgMDpzLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PWU/ZTppO2xldCBsPW4uXyRsaXRQYXJ0JDtpZih2b2lkIDA9PT1sKXtjb25zdCB0PW51bGwhPT0obz1udWxsPT1zP3ZvaWQgMDpzLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PW8/bzpudWxsO24uXyRsaXRQYXJ0JD1sPW5ldyBSKGkuaW5zZXJ0QmVmb3JlKHUoKSx0KSx0LHZvaWQgMCxudWxsIT1zP3M6e30pfXJldHVybiBsLl8kQUkodCksbH07ZXhwb3J0e2ogYXMgXyRMSCx4IGFzIGh0bWwsVCBhcyBub0NoYW5nZSxBIGFzIG5vdGhpbmcsRCBhcyByZW5kZXIsYiBhcyBzdmd9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWh0bWwuanMubWFwXG4iLCJpbXBvcnR7UmVhY3RpdmVFbGVtZW50IGFzIHR9ZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2ltcG9ydHtyZW5kZXIgYXMgZSxub0NoYW5nZSBhcyBpfWZyb21cImxpdC1odG1sXCI7ZXhwb3J0KmZyb21cImxpdC1odG1sXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgbCxvO2NvbnN0IHI9dDtjbGFzcyBzIGV4dGVuZHMgdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5yZW5kZXJPcHRpb25zPXtob3N0OnRoaXN9LHRoaXMuXyREbz12b2lkIDB9Y3JlYXRlUmVuZGVyUm9vdCgpe3ZhciB0LGU7Y29uc3QgaT1zdXBlci5jcmVhdGVSZW5kZXJSb290KCk7cmV0dXJuIG51bGwhPT0odD0oZT10aGlzLnJlbmRlck9wdGlvbnMpLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PXR8fChlLnJlbmRlckJlZm9yZT1pLmZpcnN0Q2hpbGQpLGl9dXBkYXRlKHQpe2NvbnN0IGk9dGhpcy5yZW5kZXIoKTt0aGlzLmhhc1VwZGF0ZWR8fCh0aGlzLnJlbmRlck9wdGlvbnMuaXNDb25uZWN0ZWQ9dGhpcy5pc0Nvbm5lY3RlZCksc3VwZXIudXBkYXRlKHQpLHRoaXMuXyREbz1lKGksdGhpcy5yZW5kZXJSb290LHRoaXMucmVuZGVyT3B0aW9ucyl9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpLG51bGw9PT0odD10aGlzLl8kRG8pfHx2b2lkIDA9PT10fHx0LnNldENvbm5lY3RlZCghMCl9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpLG51bGw9PT0odD10aGlzLl8kRG8pfHx2b2lkIDA9PT10fHx0LnNldENvbm5lY3RlZCghMSl9cmVuZGVyKCl7cmV0dXJuIGl9fXMuZmluYWxpemVkPSEwLHMuXyRsaXRFbGVtZW50JD0hMCxudWxsPT09KGw9Z2xvYmFsVGhpcy5saXRFbGVtZW50SHlkcmF0ZVN1cHBvcnQpfHx2b2lkIDA9PT1sfHxsLmNhbGwoZ2xvYmFsVGhpcyx7TGl0RWxlbWVudDpzfSk7Y29uc3Qgbj1nbG9iYWxUaGlzLmxpdEVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQ7bnVsbD09bnx8bih7TGl0RWxlbWVudDpzfSk7Y29uc3QgaD17XyRBSzoodCxlLGkpPT57dC5fJEFLKGUsaSl9LF8kQUw6dD0+dC5fJEFMfTsobnVsbCE9PShvPWdsb2JhbFRoaXMubGl0RWxlbWVudFZlcnNpb25zKSYmdm9pZCAwIT09bz9vOmdsb2JhbFRoaXMubGl0RWxlbWVudFZlcnNpb25zPVtdKS5wdXNoKFwiMy4zLjNcIik7ZXhwb3J0e3MgYXMgTGl0RWxlbWVudCxyIGFzIFVwZGF0aW5nRWxlbWVudCxoIGFzIF8kTEV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWVsZW1lbnQuanMubWFwXG4iLCIvKipcbiAqIEZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDU2NTExMi9qYXZhc2NyaXB0LWhvdy10by1maW5kLW91dC1pZi10aGUtdXNlci1icm93c2VyLWlzLWNocm9tZVxuICogQHBhcmFtIHtzdHJpbmd9IFtmbGF2b3JdXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ2hyb21lKGZsYXZvciA9ICdnb29nbGUtY2hyb21lJykge1xuICBjb25zdCBpc0Nocm9taXVtID0gLyoqIEB0eXBlIHt3aW5kb3cgJiB7IGNocm9tZT86IGJvb2xlYW59fSAqLyAod2luZG93KS5jaHJvbWU7XG4gIGlmIChmbGF2b3IgPT09ICdjaHJvbWl1bScpIHtcbiAgICByZXR1cm4gaXNDaHJvbWl1bTtcbiAgfVxuICBjb25zdCB3aW5OYXYgPSB3aW5kb3cubmF2aWdhdG9yO1xuICBjb25zdCB2ZW5kb3JOYW1lID0gd2luTmF2LnZlbmRvcjtcbiAgY29uc3QgaXNPcGVyYSA9IHR5cGVvZiAoLyoqIEB0eXBlIHt3aW5kb3cgJiB7IG9wcj86IGJvb2xlYW59fSAqLyAod2luZG93KS5vcHIpICE9PSAndW5kZWZpbmVkJztcbiAgY29uc3QgaXNJRWVkZ2UgPSB3aW5OYXYudXNlckFnZW50LmluZGV4T2YoJ0VkZ2UnKSA+IC0xO1xuICBjb25zdCBpc0lPU0Nocm9tZSA9IHdpbk5hdi51c2VyQWdlbnQubWF0Y2goJ0NyaU9TJyk7XG5cbiAgaWYgKGZsYXZvciA9PT0gJ2lvcycpIHtcbiAgICByZXR1cm4gaXNJT1NDaHJvbWU7XG4gIH1cblxuICBpZiAoZmxhdm9yID09PSAnZ29vZ2xlLWNocm9tZScpIHtcbiAgICByZXR1cm4gKFxuICAgICAgaXNDaHJvbWl1bSAhPT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIGlzQ2hyb21pdW0gIT09ICd1bmRlZmluZWQnICYmXG4gICAgICB2ZW5kb3JOYW1lID09PSAnR29vZ2xlIEluYy4nICYmXG4gICAgICBpc09wZXJhID09PSBmYWxzZSAmJlxuICAgICAgaXNJRWVkZ2UgPT09IGZhbHNlXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjb25zdCBicm93c2VyRGV0ZWN0aW9uID0ge1xuICBpc0lFMTE6IC9UcmlkZW50Ly50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KSxcbiAgaXNDaHJvbWU6IGNoZWNrQ2hyb21lKCksXG4gIGlzSU9TQ2hyb21lOiBjaGVja0Nocm9tZSgnaW9zJyksXG4gIGlzQ2hyb21pdW06IGNoZWNrQ2hyb21lKCdjaHJvbWl1bScpLFxuICBpc01hYzogbmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZignTWFjJykgIT09IC0xLFxufTtcbiIsImltcG9ydCB7IGJyb3dzZXJEZXRlY3Rpb24sIGNzcywgRGlzYWJsZWRXaXRoVGFiSW5kZXhNaXhpbiwgaHRtbCwgTGl0RWxlbWVudCB9IGZyb20gJ0BsaW9uL2NvcmUnO1xuXG5jb25zdCBpc0tleWJvYXJkQ2xpY2tFdmVudCA9ICgvKiogQHR5cGUge0tleWJvYXJkRXZlbnR9ICovIGUpID0+IGUua2V5ID09PSAnICcgfHwgZS5rZXkgPT09ICdFbnRlcic7XG5jb25zdCBpc1NwYWNlS2V5Ym9hcmRDbGlja0V2ZW50ID0gKC8qKiBAdHlwZSB7S2V5Ym9hcmRFdmVudH0gKi8gZSkgPT4gZS5rZXkgPT09ICcgJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAbGlvbi9jb3JlJykuVGVtcGxhdGVSZXN1bHR9IFRlbXBsYXRlUmVzdWx0XG4gKi9cblxuLyoqXG4gKiBVc2UgTGlvbkJ1dHRvbiAob3IgTGlvbkJ1dHRvblJlc2V0fExpb25CdXR0b25TdWJtaXQpIHdoZW4gdGhlcmUgaXMgYSBuZWVkIHRvIGV4dGVuZCBIVE1MQnV0dG9uRWxlbWVudC5cbiAqIEl0IGFsbG93cyB0byBjcmVhdGUgY29tcGxleCBzaGFkb3cgRE9NIGZvciBidXR0b25zIG5lZWRpbmcgdGhpcy4gVGhpbmsgb2Y6XG4gKiAtIGEgbWF0ZXJpYWwgRGVzaWduIGJ1dHRvbiB0aGF0IG5lZWRzIGEgSlMgY29udHJvbGxlZCByaXBwbGVcbiAqIC0gYSBMaW9uU2VsZWN0UmljaCBpbnZva2VyIHRoYXQgbmVlZHMgYSBjb21wbGV4IHNoYWRvdyBET00gc3RydWN0dXJlXG4gKiAoZm9yIHN0eWxpbmcvbWFpbnRhaW5hYmlsaXR5IHB1cnBvc2VzKVxuICogLSBhIHNwZWNpYWxpemVkIGJ1dHRvbiAoZm9yIGluc3RhbmNlIGEgcHJpbWFyeSBidXR0b24gb3IgaWNvbiBidXR0b24gaW4gYSBEZXNpZ24gU3lzdGVtKSB0aGF0XG4gKiBuZWVkcyBhIHNpbXBsZSBhcGk6IGA8bXktYnV0dG9uPnRleHQ8L215LWJ1dHRvbj5gIGlzIGFsd2F5cyBiZXR0ZXIgdGhhblxuICogYDxidXR0b24gY2xhc3M9XCJteS1idXR0b25cIj48ZGl2IGNsYXNzPVwibXktYnV0dG9uX19jb250YWluZXJcIj50ZXh0PC9kaXY+PGJ1dHRvbj5gXG4gKlxuICogSW4gb3RoZXIgY2FzZXMsIHdoZW5ldmVyIHlvdSBjYW4sIHN0aWxsIHVzZSBuYXRpdmUgSFRNTEJ1dHRvbkVsZW1lbnQgKGA8YnV0dG9uPmApLlxuICpcbiAqIE5vdGUgdGhhdCBMaW9uQnV0dG9uIGlzIG1lYW50IGZvciBidXR0b25zIHdpdGggdHlwZT1cImJ1dHRvblwiLiBJdCdzIGNsZWFuZXIgYW5kIG1vcmVcbiAqIGxpZ2h0d2VpZ2h0IHRoYW4gTGlvbkJ1dHRvblJlc2V0IGFuZCBMaW9uQnV0dG9uU3VibWl0LCB3aGljaCBzaG91bGQgb25seSBiZSBjb25zaWRlcmVkIHdoZW4gbmF0aXZlXG4gKiBgPGZvcm0+YCBzdXBwb3J0IGlzIG5lZWRlZDpcbiAqIC0gV2hlbiB0eXBlPVwicmVzZXR8c3VibWl0XCIgc2hvdWxkIGJlIHN1cHBvcnRlZCwgdXNlIExpb25CdXR0b25SZXNldC5cbiAqIC0gV2hlbiBpbXBsaWNpdCBmb3JtIHN1Ym1pc3Npb24gc2hvdWxkIGJlIHN1cHBvcnRlZCBvbiB0b3AsIHVzZSBMaW9uQnV0dG9uU3VibWl0LlxuICovXG5leHBvcnQgY2xhc3MgTGlvbkJ1dHRvbiBleHRlbmRzIERpc2FibGVkV2l0aFRhYkluZGV4TWl4aW4oTGl0RWxlbWVudCkge1xuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGl2ZTogeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0sXG4gICAgICB0eXBlOiB7IHR5cGU6IFN0cmluZywgcmVmbGVjdDogdHJ1ZSB9LFxuICAgIH07XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgIDxkaXYgY2xhc3M9XCJidXR0b24tY29udGVudFwiIGlkPVwiJHt0aGlzLl9idXR0b25JZH1cIj48c2xvdD48L3Nsb3Q+PC9kaXY+IGA7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgY3NzYFxuICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjZWVlOyAvKiBtaW5pbWFsIHN0eWxpbmcgdG8gbWFrZSBpdCByZWNvZ25pemFibGUgYXMgYnRuICovXG4gICAgICAgICAgcGFkZGluZzogOHB4OyAvKiBwYWRkaW5nIHRvIGZpeCB3aXRoIG1pbi1oZWlnaHQgKi9cbiAgICAgICAgICBvdXRsaW5lOiBub25lOyAvKiBmb2N1cyBzdHlsZSBoYW5kbGVkIGJlbG93ICovXG4gICAgICAgICAgY3Vyc29yOiBkZWZhdWx0OyAvKiB3ZSBzaG91bGQgYWx3YXlzIHNlZSB0aGUgZGVmYXVsdCBhcnJvdywgbmV2ZXIgYSBjYXJldCAqL1xuICAgICAgICAgIC8qIFRPRE86IHJlbW92ZSwgbmF0aXZlIGJ1dHRvbiBhbHNvIGFsbG93cyBzZWxlY3Rpb24uIENvdWxkIGJlIHVzYWJpbGl0eSBjb25jZXJuLi4uICovXG4gICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIDpob3N0OjpiZWZvcmUge1xuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuXG4gICAgICAgICAgLyogY2VudGVyIHZlcnRpY2FsbHkgYW5kIGhvcml6b250YWxseSAqL1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICB0b3A6IDUwJTtcbiAgICAgICAgICBsZWZ0OiA1MCU7XG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG5cbiAgICAgICAgICAvKiBNaW5pbXVtIGNsaWNrIGFyZWEgdG8gbWVldCBbV0NBRyBTdWNjZXNzIENyaXRlcmlvbiAyLjUuNSBUYXJnZXQgU2l6ZSAoRW5oYW5jZWQpXShodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIyLyN0YXJnZXQtc2l6ZS1lbmhhbmNlZCkgKi9cbiAgICAgICAgICBtaW4taGVpZ2h0OiA0NHB4O1xuICAgICAgICAgIG1pbi13aWR0aDogNDRweDtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIH1cblxuICAgICAgICAuYnV0dG9uLWNvbnRlbnQge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIFNob3cgZm9jdXMgc3R5bGVzIG9uIGtleWJvYXJkIGZvY3VzLiAqL1xuICAgICAgICA6aG9zdCg6Zm9jdXM6bm90KFtkaXNhYmxlZF0pKSxcbiAgICAgICAgOmhvc3QoOmZvY3VzLXZpc2libGUpIHtcbiAgICAgICAgICAvKiBpZiB5b3UgZXh0ZW5kLCBwbGVhc2Ugb3ZlcndyaXRlICovXG4gICAgICAgICAgb3V0bGluZTogMnB4IHNvbGlkICNiZGU0ZmY7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBIaWRlIGZvY3VzIHN0eWxlcyBpZiB0aGV5J3JlIG5vdCBuZWVkZWQsIGZvciBleGFtcGxlLFxuICAgICAgICB3aGVuIGFuIGVsZW1lbnQgcmVjZWl2ZXMgZm9jdXMgdmlhIHRoZSBtb3VzZS4gKi9cbiAgICAgICAgOmhvc3QoOmZvY3VzOm5vdCg6Zm9jdXMtdmlzaWJsZSkpIHtcbiAgICAgICAgICBvdXRsaW5lOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgOmhvc3QoOmhvdmVyKSB7XG4gICAgICAgICAgLyogaWYgeW91IGV4dGVuZCwgcGxlYXNlIG92ZXJ3cml0ZSAqL1xuICAgICAgICAgIGJhY2tncm91bmQ6ICNmNGY2Zjc7XG4gICAgICAgIH1cblxuICAgICAgICA6aG9zdCg6YWN0aXZlKSwgLyoga2VlcCBuYXRpdmUgOmFjdGl2ZSB0byByZW5kZXIgcXVpY2tseSB3aGVyZSBwb3NzaWJsZSAqL1xuICAgICAgICA6aG9zdChbYWN0aXZlXSkgLyogdXNlIGN1c3RvbSBbYWN0aXZlXSB0byBmaXggSUUxMSAqLyB7XG4gICAgICAgICAgLyogaWYgeW91IGV4dGVuZCwgcGxlYXNlIG92ZXJ3cml0ZSAqL1xuICAgICAgICAgIGJhY2tncm91bmQ6IGdyYXk7XG4gICAgICAgIH1cblxuICAgICAgICA6aG9zdChbaGlkZGVuXSkge1xuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICA6aG9zdChbZGlzYWJsZWRdKSB7XG4gICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgICAgLyogaWYgeW91IGV4dGVuZCwgcGxlYXNlIG92ZXJ3cml0ZSAqL1xuICAgICAgICAgIGJhY2tncm91bmQ6IGxpZ2h0Z3JheTtcbiAgICAgICAgICBjb2xvcjogI2FkYWRhZDtcbiAgICAgICAgICBmaWxsOiAjYWRhZGFkO1xuICAgICAgICB9XG4gICAgICBgLFxuICAgIF07XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudHlwZSA9ICdidXR0b24nO1xuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG5cbiAgICB0aGlzLl9idXR0b25JZCA9IGBidXR0b24tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgMTApfWA7XG4gICAgaWYgKGJyb3dzZXJEZXRlY3Rpb24uaXNJRTExKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBsZXRlLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuaGFzQXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknKSkge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknLCB0aGlzLl9idXR0b25JZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl9fc2V0dXBFdmVudHMoKTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgaWYgKCF0aGlzLmhhc0F0dHJpYnV0ZSgncm9sZScpKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtpbXBvcnQoJ0BsaW9uL2NvcmUnKS5Qcm9wZXJ0eVZhbHVlcyB9IGNoYW5nZWRQcm9wZXJ0aWVzXG4gICAqL1xuICB1cGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKSB7XG4gICAgc3VwZXIudXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7XG5cbiAgICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKCdkaXNhYmxlZCcpKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsIGAke3RoaXMuZGlzYWJsZWR9YCk7IC8vIGNyZWF0ZSBtaXhpbiBpZiB3ZSBuZWVkIGl0IGluIG1vcmUgcGxhY2VzXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfX3NldHVwRXZlbnRzKCkge1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5fX21vdXNlZG93bkhhbmRsZXIpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX19rZXlkb3duSGFuZGxlcik7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuX19rZXl1cEhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfX21vdXNlZG93bkhhbmRsZXIoKSB7XG4gICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgIGNvbnN0IG1vdXNldXBIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZXVwSGFuZGxlcik7XG4gICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZXVwSGFuZGxlcik7XG4gICAgfTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2V1cEhhbmRsZXIpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNldXBIYW5kbGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfX2tleWRvd25IYW5kbGVyKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlIHx8ICFpc0tleWJvYXJkQ2xpY2tFdmVudChldmVudCkpIHtcbiAgICAgIGlmIChpc1NwYWNlS2V5Ym9hcmRDbGlja0V2ZW50KGV2ZW50KSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc1NwYWNlS2V5Ym9hcmRDbGlja0V2ZW50KGV2ZW50KSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBrZXl1cEV2ZW50XG4gICAgICovXG4gICAgY29uc3Qga2V5dXBIYW5kbGVyID0ga2V5dXBFdmVudCA9PiB7XG4gICAgICBpZiAoaXNLZXlib2FyZENsaWNrRXZlbnQoa2V5dXBFdmVudCkpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBrZXl1cEhhbmRsZXIsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBrZXl1cEhhbmRsZXIsIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9fa2V5dXBIYW5kbGVyKGV2ZW50KSB7XG4gICAgaWYgKGlzS2V5Ym9hcmRDbGlja0V2ZW50KGV2ZW50KSkge1xuICAgICAgLy8gRml4ZXMgSUUxMSBkb3VibGUgc3VibWl0L2NsaWNrLiBFbnRlciBrZXlwcmVzcyBzb21laG93IHRyaWdnZXJzIHRoZSBfX2tleVVwSGFuZGxlciBvbiB0aGUgbmF0aXZlIDxidXR0b24+XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldCAhPT0gdGhpcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBkaXNwYXRjaCBjbGlja1xuICAgICAgdGhpcy5jbGljaygpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgTGlvbkJ1dHRvbiB9IGZyb20gJy4vTGlvbkJ1dHRvbi5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnQGxpb24vY29yZScpLlRlbXBsYXRlUmVzdWx0fSBUZW1wbGF0ZVJlc3VsdFxuICovXG5cbi8qKlxuICogVGhpcyBhZGRzIGZ1bmN0aW9uYWxpdHkgZm9yIGZvcm0gYnV0dG9ucyAodHlwZSAnc3VibWl0JyBhbmQgJ3Jlc2V0JykuXG4gKiBJdCBhbGxvd3MgdG8gc3VibWl0IG9yIHJlc2V0IGEgPGZvcm0+IGJ5IHNwYXduaW5nIGEgY2xpY2sgb24gYSB0ZW1wb3JyYXJ5IG5hdGl2ZSBidXR0b24gaW5zaWRlXG4gKiB0aGUgZm9ybS5cbiAqIFVzZSBMaW9uQnV0dG9uU3VibWl0IHdoZW4gaW1wbGljaXQgZm9ybSBzdWJtaXNzaW9uIHNob3VsZCBiZSBzdXBwb3J0ZWQgYXMgd2VsbC5cbiAqXG4gKiBGdW5jdGlvbmFsaXR5IGluIHRoaXMgYnV0dG9uIGlzIG5vdCBwdXJlbHkgZm9yIHR5cGU9XCJyZXNldFwiLCBhbHNvIGZvciB0eXBlPVwic3VibWl0XCIuXG4gKiBGb3IgbWFpbmFpbmFiaWxpdHkgcHVycG9zZXMgdGhlIHN1Ym1pdCBmdW5jdGlvbmFsaXR5IGlzIHBhcnQgb2YgTGlvbkJ1dHRvblJlc2V0XG4gKiAoaXQgbmVlZHMgdGhlIHNhbWUgbG9naWMpLlxuICogTGlvbkJ1dHRvblJlc2V0IGNvdWxkIHRoZXJlZm9yZSBhY3R1YWxseSBiZSBjb25zaWRlcmVkIGFzICdMaW9uQnV0dG9uRm9ybScgKHdpdGhvdXQgdGhlXG4gKiBpbXBsaWNpdCBmb3JtIHN1Ym1pc3Npb24gbG9naWMpLCBidXQgTGlvbkJ1dHRvblJlc2V0IGlzIGFuIGVhc2llciB0byBncmFzcCBuYW1lIGZvclxuICogQXBwbGljYXRpb24gRGV2ZWxvcGVyczogZm9yIHJlc2V0IGJ1dHRvbnMsIGFsd2F5cyB1c2UgTGlvbkJ1dHRvblJlc2V0LCBmb3Igc3VibWl0XG4gKiBidXR0b25zIGFsd2F5cyB1c2UgTGlvbkJ1dHRvblN1Ym1pdC5cbiAqL1xuZXhwb3J0IGNsYXNzIExpb25CdXR0b25SZXNldCBleHRlbmRzIExpb25CdXR0b24ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudHlwZSA9ICdyZXNldCc7XG4gICAgdGhpcy5fX3NldHVwRGVsZWdhdGlvbkluQ29uc3RydWN0b3IoKTtcblxuICAgIC8qKiBAdHlwZSB7SFRNTEJ1dHRvbkVsZW1lbnR9ICovXG4gICAgdGhpcy5fX3N1Ym1pdEFuZFJlc2V0SGVscGVyQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5cbiAgICAvKiogQHR5cGUge0V2ZW50TGlzdGVuZXJ9ICovXG4gICAgdGhpcy5fX3ByZXZlbnRFdmVudExlYWthZ2UgPSB0aGlzLl9fcHJldmVudEV2ZW50TGVha2FnZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAvLyBPbGQgYnJvd3NlcnMgKElFMTEsIE9sZCBFZGdlLCBGaXJlZm94IEVTUiA2MCkgZG9uJ3QgaGF2ZSB0aGUgYC5mb3JtYFxuICAgIC8vIHByb3BlcnR5IGRlZmluZWQgaW1tZWRpYXRlbHkgb24gdGhlIG5hdGl2ZSBidXR0b24sIHNvIGRvIHRoaXMgYWZ0ZXIgZmlyc3QgcmVuZGVyIG9uIGNvbm5lY3RlZC5cbiAgICB0aGlzLnVwZGF0ZUNvbXBsZXRlLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5fc2V0dXBTdWJtaXRBbmRSZXNldEhlbHBlck9uQ29ubmVjdGVkKCk7XG4gICAgfSk7XG4gIH1cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuX3RlYXJkb3duU3VibWl0QW5kUmVzZXRIZWxwZXJPbkRpc2Nvbm5lY3RlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByZXZlbnRzIHRoYXQgc29tZW9uZSB3aG8gbGlzdGVucyBvdXRzaWRlIG9yIG9uIGZvcm0gY2F0Y2hlcyB0aGUgY2xpY2sgZXZlbnRcbiAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX19wcmV2ZW50RXZlbnRMZWFrYWdlKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IHRoaXMuX19zdWJtaXRBbmRSZXNldEhlbHBlckJ1dHRvbikge1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3NldHVwU3VibWl0QW5kUmVzZXRIZWxwZXJPbkNvbm5lY3RlZCgpIHtcbiAgICAvLyBHZXQgZm9ybVxuICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5fX3N1Ym1pdEFuZFJlc2V0SGVscGVyQnV0dG9uKTtcbiAgICAvKiogQHR5cGUge0hUTUxGb3JtRWxlbWVudHxudWxsfSAqL1xuICAgIHRoaXMuX2Zvcm0gPSB0aGlzLl9fc3VibWl0QW5kUmVzZXRIZWxwZXJCdXR0b24uZm9ybTtcbiAgICB0aGlzLnJlbW92ZUNoaWxkKHRoaXMuX19zdWJtaXRBbmRSZXNldEhlbHBlckJ1dHRvbik7XG5cbiAgICBpZiAodGhpcy5fZm9ybSkge1xuICAgICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX19wcmV2ZW50RXZlbnRMZWFrYWdlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3RlYXJkb3duU3VibWl0QW5kUmVzZXRIZWxwZXJPbkRpc2Nvbm5lY3RlZCgpIHtcbiAgICBpZiAodGhpcy5fZm9ybSkge1xuICAgICAgdGhpcy5fZm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX19wcmV2ZW50RXZlbnRMZWFrYWdlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVsZWdhdGUgY2xpY2ssIGJ5IGZsYXNoaW5nIGEgbmF0aXZlIGJ1dHRvbiBhcyBhIGRpcmVjdCBjaGlsZFxuICAgKiBvZiB0aGUgZm9ybSwgYW5kIGZpcmluZyBjbGljayBvbiB0aGlzIGJ1dHRvbi4gVGhpcyB3aWxsIGZpcmUgdGhlIGZvcm0gc3VibWl0XG4gICAqIHdpdGhvdXQgc2lkZSBlZmZlY3RzIGNhdXNlZCBieSB0aGUgY2xpY2sgYnViYmxpbmcgYmFjayB1cCB0byBsaW9uLWJ1dHRvbi5cbiAgICogQHBhcmFtIHtFdmVudH0gZXZcbiAgICogQHByb3RlY3RlZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIC8vIFRPRE86IHJlbmFtZSB0byBfY2xpY2tEZWxlZ2F0aW9uSGFuZGxlciBpbiB2MVxuICBhc3luYyBfX2NsaWNrRGVsZWdhdGlvbkhhbmRsZXIoZXYpIHtcbiAgICAvLyBXYWl0IGZvciB1cGRhdGVDb21wbGV0ZSBpZiBmb3JtIGlzIG5vdCB5ZXQgYXZhaWxhYmxlXG4gICAgaWYgKCF0aGlzLl9mb3JtKSB7XG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZUNvbXBsZXRlO1xuICAgIH1cblxuICAgIGlmICgodGhpcy50eXBlID09PSAnc3VibWl0JyB8fCB0aGlzLnR5cGUgPT09ICdyZXNldCcpICYmIGV2LnRhcmdldCA9PT0gdGhpcyAmJiB0aGlzLl9mb3JtKSB7XG4gICAgICAvKipcbiAgICAgICAqIEhlcmUsIHdlIG1ha2Ugc3VyZSBvdXIgYnV0dG9uIGlzIGNvbXBhdGlibGUgd2l0aCBhIG5hdGl2ZSBmb3JtLCBieSBmaXJpbmcgYSBjbGlja1xuICAgICAgICogZnJvbSBhIG5hdGl2ZSBidXR0b24gdGhhdCBvdXIgZm9ybSByZXNwb25kcyB0by4gVGhlIG5hdGl2ZSBidXR0b24gd2Ugc3Bhd24gd2lsbCBiZSBhIGRpcmVjdFxuICAgICAgICogY2hpbGQgb2YgdGhlIGZvcm0sIHBsdXMgdGhlIGNsaWNrIGV2ZW50IHRoYXQgd2lsbCBiZSBzZW50IHdpbGwgYmUgcHJldmVudGVkIGZyb21cbiAgICAgICAqIHByb3BhZ2F0aW5nIG91dHNpZGUgb2YgdGhlIGZvcm0uIFRoaXMgd2lsbCBrZWVwIHRoZSBhbW91bnQgb2YgJ25vaXNlJyAoY2xpY2sgZXZlbnRzXG4gICAgICAgKiBmcm9tICdnaG9zdCBlbGVtZW50cycgdGhhdCBjYW4gYmUgaW50ZXJjZXB0ZWQgYnkgbGlzdGVuZXJzIGluIHRoZSBidWJibGUgY2hhaW4pIHRvIGFuXG4gICAgICAgKiBhYnNvbHV0ZSBtaW5pbXVtLlxuICAgICAgICovXG4gICAgICB0aGlzLl9fc3VibWl0QW5kUmVzZXRIZWxwZXJCdXR0b24udHlwZSA9IHRoaXMudHlwZTtcblxuICAgICAgdGhpcy5fZm9ybS5hcHBlbmRDaGlsZCh0aGlzLl9fc3VibWl0QW5kUmVzZXRIZWxwZXJCdXR0b24pO1xuICAgICAgLy8gRm9ybSBzdWJtaXNzaW9uIG9yIHJlc2V0IHdpbGwgaGFwcGVuXG4gICAgICB0aGlzLl9fc3VibWl0QW5kUmVzZXRIZWxwZXJCdXR0b24uY2xpY2soKTtcbiAgICAgIHRoaXMuX2Zvcm0ucmVtb3ZlQ2hpbGQodGhpcy5fX3N1Ym1pdEFuZFJlc2V0SGVscGVyQnV0dG9uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9fc2V0dXBEZWxlZ2F0aW9uSW5Db25zdHJ1Y3RvcigpIHtcbiAgICAvLyBkbyBub3QgbW92ZSB0byBjb25uZWN0ZWRDYWxsYmFjaywgb3RoZXJ3aXNlIElFMTEgYnJlYWtzLlxuICAgIC8vIG1vcmUgaW5mbzogaHR0cHM6Ly9naXRodWIuY29tL2luZy1iYW5rL2xpb24vaXNzdWVzLzE3OSNpc3N1ZWNvbW1lbnQtNTExNzYzODM1XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX19jbGlja0RlbGVnYXRpb25IYW5kbGVyLCB0cnVlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTGlvbkJ1dHRvblJlc2V0IH0gZnJvbSAnLi9MaW9uQnV0dG9uUmVzZXQuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BsaW9uL2NvcmUnKS5UZW1wbGF0ZVJlc3VsdH0gVGVtcGxhdGVSZXN1bHRcbiAqIEB0eXBlZGVmIHt7bGlvbkJ1dHRvbnM6IFNldDxMaW9uQnV0dG9uU3VibWl0PiwgaGVscGVyOkhUTUxCdXR0b25FbGVtZW50LCBvYnNlcnZlcjpNdXRhdGlvbk9ic2VydmVyfX0gSGVscGVyUmVnaXN0cmF0aW9uXG4gKi9cblxuLyoqIEB0eXBlIHtXZWFrTWFwPEhUTUxGb3JtRWxlbWVudCwgSGVscGVyUmVnaXN0cmF0aW9uPn0gKi9cbmNvbnN0IGltcGxpY2l0SGVscGVyTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuZnVuY3Rpb24gY3JlYXRlSW1wbGljaXRTdWJtaXRIZWxwZXJCdXR0b24oKSB7XG4gIGNvbnN0IGJ1dHRvbkVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGJ1dHRvbkVsLnRhYkluZGV4ID0gLTE7XG4gIGJ1dHRvbkVsLnR5cGUgPSAnc3VibWl0JztcbiAgYnV0dG9uRWwuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgLy8gTWFrZSBpdCBzci1vbmx5XG4gIGJ1dHRvbkVsLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIGNsaXA6IHJlY3QoMCAwIDAgMCk7XG4gICAgY2xpcC1wYXRoOiBpbnNldCg1MCUpO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICB3aWR0aDogMXB4O1xuICAgIHBhZGRpbmc6IDA7IC8qIHJlc2V0IGRlZmF1bHQgYWdlbnQgc3R5bGVzICovXG4gICAgYm9yZGVyOiAwOyAvKiByZXNldCBkZWZhdWx0IGFnZW50IHN0eWxlcyAqL1xuICBgO1xuICByZXR1cm4gYnV0dG9uRWw7XG59XG5cbi8qKlxuICogQ29udGFpbnMgYWxsIHRoZSBmdW5jaW9uYWlsaXR5IG9mIExpb25CdXR0b24gYW5kIExpb25CdXR0b25SZXNldC4gT24gdG9wIG9mIHRoYXQgaXRcbiAqIHN1cHBvcnRzIGltcGxpY2l0IGZvcm0gc3VibWlzc2lvbi5cbiAqXG4gKiBVc2Ugd2hlbjpcbiAqIC0gdGhlIEFwcGxpY2F0aW9uIERldmVsb3BlciBzaG91bGQgYmUgYWJsZSB0byBzd2l0Y2ggdHlwZXMgYmV0d2VlbiAnc3VibWl0J3wncmVzZXQnfCdidXR0b24nXG4gKiAodGhpcyBpcyBzaW1pbGFyIHRvIGhvdyBuYXRpdmUgSFRNTEJ1dHRvbkVsZW1lbnQgd29ya3MpXG4gKiAtIGEgc3VibWl0IGJ1dHRvbiB3aXRoIG5hdGl2ZSBmb3JtIHN1cHBvcnQgaXMgbmVlZGVkXG4gKi9cbmV4cG9ydCBjbGFzcyBMaW9uQnV0dG9uU3VibWl0IGV4dGVuZHMgTGlvbkJ1dHRvblJlc2V0IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtIVE1MQnV0dG9uRWxlbWVudHxudWxsfVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBnZXQgX25hdGl2ZUJ1dHRvbk5vZGUoKSB7XG4gICAgcmV0dXJuIGltcGxpY2l0SGVscGVyTWFwLmdldCgvKiogQHR5cGUge0hUTUxGb3JtRWxlbWVudH0gKi8gKHRoaXMuX2Zvcm0pKT8uaGVscGVyIHx8IG51bGw7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudHlwZSA9ICdzdWJtaXQnO1xuXG4gICAgLyoqIEB0eXBlIHtIVE1MQnV0dG9uRWxlbWVudHxudWxsfSAqL1xuICAgIHRoaXMuX19pbXBsaWNpdFN1Ym1pdEhlbHBlckJ1dHRvbiA9IG51bGw7XG4gIH1cblxuICBfc2V0dXBTdWJtaXRBbmRSZXNldEhlbHBlck9uQ29ubmVjdGVkKCkge1xuICAgIHN1cGVyLl9zZXR1cFN1Ym1pdEFuZFJlc2V0SGVscGVyT25Db25uZWN0ZWQoKTtcblxuICAgIGlmICghdGhpcy5fZm9ybSB8fCB0aGlzLnR5cGUgIT09ICdzdWJtaXQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8qKiBAdHlwZSB7SFRNTEZvcm1FbGVtZW50fSAqL1xuICAgIGNvbnN0IGZvcm0gPSB0aGlzLl9mb3JtO1xuICAgIGNvbnN0IHJlZ2lzdHJhdGlvbkZvckN1ckZvcm0gPSBpbXBsaWNpdEhlbHBlck1hcC5nZXQodGhpcy5fZm9ybSk7XG5cbiAgICBpZiAoIXJlZ2lzdHJhdGlvbkZvckN1ckZvcm0pIHtcbiAgICAgIGNvbnN0IGJ1dHRvbkVsID0gY3JlYXRlSW1wbGljaXRTdWJtaXRIZWxwZXJCdXR0b24oKTtcbiAgICAgIGNvbnN0IHdyYXBwZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgd3JhcHBlckVsLmFwcGVuZENoaWxkKGJ1dHRvbkVsKTtcbiAgICAgIGltcGxpY2l0SGVscGVyTWFwLnNldCh0aGlzLl9mb3JtLCB7XG4gICAgICAgIGxpb25CdXR0b25zOiBuZXcgU2V0KCksXG4gICAgICAgIGhlbHBlcjogYnV0dG9uRWwsXG4gICAgICAgIG9ic2VydmVyOiBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XG4gICAgICAgICAgZm9ybS5hcHBlbmRDaGlsZCh3cmFwcGVyRWwpO1xuICAgICAgICB9KSxcbiAgICAgIH0pO1xuICAgICAgZm9ybS5hcHBlbmRDaGlsZCh3cmFwcGVyRWwpO1xuXG4gICAgICAvLyBQcmV2ZW50IHRoYXQgdGhlIGp1c3QgY3JlYXRlZCBidXR0b24gZ2V0cyBsb3N0IGR1cmluZyByZXJlbmRlclxuICAgICAgaW1wbGljaXRIZWxwZXJNYXAuZ2V0KGZvcm0pPy5vYnNlcnZlci5vYnNlcnZlKHdyYXBwZXJFbCwgeyBjaGlsZExpc3Q6IHRydWUgfSk7XG4gICAgfVxuICAgIGltcGxpY2l0SGVscGVyTWFwLmdldChmb3JtKT8ubGlvbkJ1dHRvbnMuYWRkKHRoaXMpO1xuICB9XG5cbiAgX3RlYXJkb3duU3VibWl0QW5kUmVzZXRIZWxwZXJPbkRpc2Nvbm5lY3RlZCgpIHtcbiAgICBzdXBlci5fdGVhcmRvd25TdWJtaXRBbmRSZXNldEhlbHBlck9uRGlzY29ubmVjdGVkKCk7XG5cbiAgICBpZiAodGhpcy5fZm9ybSkge1xuICAgICAgLy8gSWYgd2UgYXJlIHRoZSBsYXN0IGJ1dHRvbiB0byBsZWF2ZSB0aGUgZm9ybSwgY2xlYW4gdXAgdGhlXG4gICAgICBjb25zdCByZWdpc3RyYXRpb25Gb3JDdXJGb3JtID0gLyoqIEB0eXBlIHtIZWxwZXJSZWdpc3RyYXRpb259ICovIChcbiAgICAgICAgaW1wbGljaXRIZWxwZXJNYXAuZ2V0KC8qKiBAdHlwZSB7SFRNTEZvcm1FbGVtZW50fSAqLyAodGhpcy5fZm9ybSkpXG4gICAgICApO1xuICAgICAgaWYgKHJlZ2lzdHJhdGlvbkZvckN1ckZvcm0pIHtcbiAgICAgICAgcmVnaXN0cmF0aW9uRm9yQ3VyRm9ybS5saW9uQnV0dG9ucy5kZWxldGUodGhpcyk7XG4gICAgICAgIGlmICghcmVnaXN0cmF0aW9uRm9yQ3VyRm9ybS5saW9uQnV0dG9ucy5zaXplKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2Zvcm0uY29udGFpbnMocmVnaXN0cmF0aW9uRm9yQ3VyRm9ybS5oZWxwZXIpKSB7XG4gICAgICAgICAgICByZWdpc3RyYXRpb25Gb3JDdXJGb3JtLmhlbHBlci5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW1wbGljaXRIZWxwZXJNYXAuZ2V0KHRoaXMuX2Zvcm0pPy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgaW1wbGljaXRIZWxwZXJNYXAuZGVsZXRlKHRoaXMuX2Zvcm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBMaW9uQnV0dG9uLCBMaW9uQnV0dG9uU3VibWl0IH0gZnJvbSBcIkBsaW9uL2J1dHRvblwiO1xuaW1wb3J0IHsgQ1NTUmVzdWx0IGFzIExpb25DU1NSZXN1bHQgfSBmcm9tIFwiQGxpb24vY29yZVwiO1xuaW1wb3J0IHsgY3NzLCBDU1NSZXN1bHQgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50IH0gZnJvbSBcImxpdC9kZWNvcmF0b3JzLmpzXCI7XG5pbXBvcnQgeyBpbnRlcmFjdGl2ZUNvbXBvbmVudEhpZ2hsaWdodCB9IGZyb20gXCIuL2NvbW1vbi1zdHlsZXNcIlxuXG5jb25zdCBjb21tb25CdXR0b25Dc3M6IENTU1Jlc3VsdFtdID0gW1xuICAgIGNzc2BcbiAgICAgICAgOmhvc3QoOmhvdmVyKSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1oaWdobGlnaHRlZC1saWdodC1jb2xvcik7XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tYmFja2dyb3VuZC1saWdodC1jb2xvcik7XG4gICAgICAgIH1cblxuICAgICAgICA6aG9zdCg6YWN0aXZlKSwgOmhvc3QoW2FjdGl2ZV0pIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhpZ2hsaWdodGVkLWRhcmstY29sb3IpO1xuICAgICAgICAgICAgY29sb3I6IHZhcigtLWZvcmVncm91bmQtY29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgICB9XG4gICAgYCxcbiAgICBpbnRlcmFjdGl2ZUNvbXBvbmVudEhpZ2hsaWdodCgpXG5dO1xuXG5cbkBjdXN0b21FbGVtZW50KFwia2FuYS1idXR0b25cIilcbmV4cG9ydCBjbGFzcyBLYW5hQnV0dG9uIGV4dGVuZHMgTGlvbkJ1dHRvbiB7XG4gICAgc3RhdGljIGZvcm1Bc3NvY2lhdGVkID0gdHJ1ZTtcbiAgICBcbiAgICBzdGF0aWMgb3ZlcnJpZGUgZ2V0IHN0eWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIC4uLnN1cGVyLnN0eWxlcyxcbiAgICAgICAgICAgIC4uLmNvbW1vbkJ1dHRvbkNzc1xuICAgICAgICBdIGFzIExpb25DU1NSZXN1bHRbXTtcbiAgICB9XG59XG5cbkBjdXN0b21FbGVtZW50KFwia2FuYS1idXR0b24tc3VibWl0XCIpXG5leHBvcnQgY2xhc3MgS2FuYUJ1dHRvblN1Ym1pdCBleHRlbmRzIExpb25CdXR0b25TdWJtaXQge1xuICAgIHN0YXRpYyBmb3JtQXNzb2NpYXRlZCA9IHRydWU7XG4gICAgcHJpdmF0ZSBpbnRlcm5hbHM/OiBFbGVtZW50SW50ZXJuYWxzO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICB9XG5cbiAgICBzdGF0aWMgb3ZlcnJpZGUgZ2V0IHN0eWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIC4uLnN1cGVyLnN0eWxlcyxcbiAgICAgICAgICAgIC4uLmNvbW1vbkJ1dHRvbkNzc1xuICAgICAgICBdIGFzIGFueTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBodG1sLCBjc3MsIExpdEVsZW1lbnQsIG5vdGhpbmcgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuXG5AY3VzdG9tRWxlbWVudCgna2FuYS1pY29uJylcbmV4cG9ydCBjbGFzcyBLYW5hSWNvbiBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KVxuICAgIGRlY2xhcmUgc2l6ZTogc3RyaW5nO1xuXG4gICAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogJ01hdGVyaWFsIEljb25zJztcbiAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMTtcbiAgICAgICAgICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcbiAgICAgICAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgICAgICAgICAgd29yZC13cmFwOiBub3JtYWw7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogbHRyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGAgXG4gICAgICAgIF1cbiAgICB9XG4gICAgb3ZlcnJpZGUgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwiJHsodGhpcy5zaXplKSA/IGBmb250LXNpemU6ICR7dGhpcy5zaXplfWAgOiBub3RoaW5nfVwiPlxuICAgICAgICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgYDtcbiAgICB9XG59IiwiLy8gOSBkaWZmZXJlbnQgY29sb3JzIG9ubHkgZm9yIGVhc3kgZGlzdGluY3Rpb24gKGFsc28gYSBzd2VldCBzcG90IGZvciBjb2xsaXNpb25zKVxuY29uc3QgQ09MT1JTX05CID0gOVxuY29uc3QgREVGQVVMVF9TQVRVUkFUSU9OID0gOTVcbmNvbnN0IERFRkFVTFRfTElHSFRORVNTID0gNDVcblxuY29uc3QgTUFHSUNfTlVNQkVSID0gNVxuXG5cbi8qKlxuICogQHR5cGUgeyhzdHI6IHN0cmluZykgPT4gbnVtYmVyfVxuICovXG5mdW5jdGlvbiBzaW1wbGVIYXNoKHN0cikge1xuICAgIHJldHVybiBzdHIuc3BsaXQoJycpXG4gICAgICAgIC5yZWR1Y2UoKGhhc2gsIGNoYXIpID0+IChoYXNoIF4gY2hhci5jaGFyQ29kZUF0KDApKSAqIC1NQUdJQ19OVU1CRVIsIE1BR0lDX05VTUJFUilcbiAgICAgICAgPj4+IDIgLy8gMzIgYml0IHVuc2lnbmVkIGludGVnZXIgY29udmVyc2lvbiBkaXNyZWdhcmRpbmcgbGFzdCAyIGJpdHMgZm9yIGJldHRlciByYW5kb21uZXNzXG59XG5cbi8qKlxuICogQHR5cGUge2ltcG9ydCgnLicpLm1pbmlkZW50aWNvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pbmlkZW50aWNvbihzZWVkPVwiXCIsIHNhdHVyYXRpb249REVGQVVMVF9TQVRVUkFUSU9OLCBsaWdodG5lc3M9REVGQVVMVF9MSUdIVE5FU1MsIGhhc2hGbj1zaW1wbGVIYXNoKSB7XG4gICAgY29uc3QgaGFzaCA9IGhhc2hGbihzZWVkKVxuICAgIC8vIGNvbnNvbGUubG9nKFwiJWNcIiArIGhhc2gudG9TdHJpbmcoMikucGFkU3RhcnQoMzIsIFwiMFwiKSwgXCJmb250LWZhbWlseTptb25vc3BhY2VcIikgLy8gdW5jb21tZW50IHRvIGRlYnVnXG4gICAgY29uc3QgaHVlID0gKGhhc2ggJSBDT0xPUlNfTkIpICogKDM2MCAvIENPTE9SU19OQilcbiAgICByZXR1cm4gWy4uLkFycmF5KHNlZWQgPyAyNSA6IDApXS5yZWR1Y2UoKGFjYywgZSwgaSkgPT5cbiAgICAgICAgLy8gdGVzdGluZyB0aGUgMTUgbG93ZXN0IHdlaWdodCBiaXRzIG9mIHRoZSBoYXNoXG4gICAgICAgIGhhc2ggJiAoMSA8PCAoaSAlIDE1KSkgP1xuICAgICAgICAgICAgYWNjICsgYDxyZWN0IHg9XCIke2kgPiAxNCA/IDcgLSB+fihpIC8gNSkgOiB+fihpIC8gNSl9XCIgeT1cIiR7aSAlIDV9XCIgd2lkdGg9XCIxXCIgaGVpZ2h0PVwiMVwiLz5gXG4gICAgICAgIDogYWNjLFxuICAgICAgICAvLyB4bWxucyBhdHRyaWJ1dGUgYWRkZWQgaW4gY2FzZSBvZiBTVkcgZmlsZSBnZW5lcmF0aW9uIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9FbGVtZW50L3N2ZyNzZWN0MVxuICAgICAgICBgPHN2ZyB2aWV3Qm94PVwiLTEuNSAtMS41IDggOFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiaHNsKCR7aHVlfSAke3NhdHVyYXRpb259JSAke2xpZ2h0bmVzc30lKVwiPmBcbiAgICApXG4gICAgKyAnPC9zdmc+J1xufVxuXG4vKipcbiAqIEB0eXBlIHt2b2lkfVxuICovXG5leHBvcnQgY29uc3QgbWluaWRlbnRpY29uU3ZnID1cbiAgICAvLyBkZWNsYXJlZCBhcyBhIHB1cmUgZnVuY3Rpb24gdG8gYmUgdHJlZS1zaGFrZW4gYnkgdGhlIGJ1bmRsZXJcbiAgICAvKkBfX1BVUkVfXyovZ2xvYmFsVGhpcy5jdXN0b21FbGVtZW50cz8uZGVmaW5lKCdtaW5pZGVudGljb24tc3ZnJyxcbiAgICAgICAgY2xhc3MgTWluaWRlbnRpY29uU3ZnIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgICAgICAgICAgc3RhdGljIG9ic2VydmVkQXR0cmlidXRlcyA9IFsndXNlcm5hbWUnLCAnc2F0dXJhdGlvbicsICdsaWdodG5lc3MnXVxuICAgICAgICAgICAgLy8gcHJpdmF0ZSBmaWVsZHMgdG8gYWxsb3cgVGVyc2VyIG1hbmdsaW5nXG4gICAgICAgICAgICBzdGF0aWMgI21lbW9pemVkID0ge31cbiAgICAgICAgICAgICNpc0Nvbm5lY3RlZCA9IGZhbHNlXG4gICAgICAgICAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNzZXRDb250ZW50KClcbiAgICAgICAgICAgICAgICB0aGlzLiNpc0Nvbm5lY3RlZCA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaygpIGlzIGNhbGxlZCBmb3IgZXZlcnkgb2JzZXJ2ZWQgYXR0cmlidXRlIGJlZm9yZSBjb25uZWN0ZWRDYWxsYmFjaygpXG4gICAgICAgICAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soKSB7IGlmICh0aGlzLiNpc0Nvbm5lY3RlZCkgdGhpcy4jc2V0Q29udGVudCgpIH1cbiAgICAgICAgICAgICNzZXRDb250ZW50KCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBNaW5pZGVudGljb25Tdmcub2JzZXJ2ZWRBdHRyaWJ1dGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IHRoaXMuZ2V0QXR0cmlidXRlKGtleSkgfHwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGNvbnN0IG1lbW9LZXkgPSBhcmdzLmpvaW4oJywnKVxuICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJIVE1MID0gTWluaWRlbnRpY29uU3ZnLiNtZW1vaXplZFttZW1vS2V5XSA/Pz1cbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBtaW5pZGVudGljb24oLi4uYXJncylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIClcbiIsImltcG9ydCB7IG1pbmlkZW50aWNvbiBhcyBpZGVudGljb24gfSBmcm9tIFwibWluaWRlbnRpY29uc1wiO1xuaW1wb3J0IHsgTGl0RWxlbWVudCwgaHRtbCwgY3NzIH0gZnJvbSBcImxpdFwiO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHkgfSBmcm9tIFwibGl0L2RlY29yYXRvcnMuanNcIjtcblxuQGN1c3RvbUVsZW1lbnQoJ2lkZW50aWNvbi1pbWcnKVxuZXhwb3J0IGNsYXNzIE1pbmlkZW50aWNvbiBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KVxuICAgIGRlY2xhcmUgaGFzaDogc3RyaW5nO1xuICAgIFxuICAgIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogYXV0bztcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtnZW5TdmdEYXRhU3JjKHRoaXMuaGFzaCl9XCIvPlxuICAgICAgICBgXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuU3ZnRGF0YVNyYyhoYXNoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgZGF0YTppbWFnZS9zdmcreG1sO3V0ZjgsJHtlbmNvZGVVUklDb21wb25lbnQoaWRlbnRpY29uKGhhc2ggfHwgXCJcIikpfWA7XG59IiwiaW1wb3J0IHsgTGl0RWxlbWVudCwgaHRtbCwgY3NzIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuXG5AY3VzdG9tRWxlbWVudCgnZXZtLWFkZHJlc3MnKVxuZXhwb3J0IGNsYXNzIEV2bUFkZHJlc3MgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICBAcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcgfSlcbiAgICBkZWNsYXJlIGFkZHJlc3M6IHN0cmluZztcbiAgICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuIH0pXG4gICAgZGVjbGFyZSBhYnJpZGdlZDogYm9vbGVhbjtcbiAgICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuIH0pXG4gICAgZGVjbGFyZSBjbGlwYm9hcmQ6IGJvb2xlYW47XG4gICAgQHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiB9KVxuICAgIGRlY2xhcmUgdG9vbHRpcDogYm9vbGVhbjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gXCJcIjtcbiAgICAgICAgdGhpcy5hYnJpZGdlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNsaXBib2FyZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAud2FsbGV0LWFkZHJlc3Mge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrYW5hLWljb24ge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA4cHg7XG4gICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAudG9vbHRpcCB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICAgICAgICAgIGJvdHRvbTogMTAwJTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoNXB4KTtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTU1O1xuICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDVweDtcbiAgICAgICAgICAgICAgICB6LWluZGV4OiAxO1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgICAgLnRvb2x0aXAuc2hvdyB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXN5bmMgY29weVRvQ2xpcGJvYXJkKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGhpcy5hZGRyZXNzKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd1Rvb2x0aXAoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUZXh0IGNvcGllZCB0byBjbGlwYm9hcmQnKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY29weSB0ZXh0OiAnLCBlcnIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2hvd1Rvb2x0aXAoKSB7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRydWU7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMudG9vbHRpcCA9IGZhbHNlO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ3YWxsZXQtYWRkcmVzc1wiPlxuICAgICAgICAgICAgICAgICR7KHRoaXMuYWJyaWRnZWQpID8gXG4gICAgICAgICAgICAgICAgICAgIGAke3RoaXMuYWRkcmVzcy5zbGljZSgwLCA3KX0uLi4ke3RoaXMuYWRkcmVzcy5zbGljZSgtNSl9YFxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuYWRkcmVzc31cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICR7KHRoaXMuY2xpcGJvYXJkKSA/IFxuICAgICAgICAgICAgICAgIGh0bWxgXG4gICAgICAgICAgICAgICAgICAgIDxrYW5hLWljb24gXG4gICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9JHt0aGlzLmNvcHlUb0NsaXBib2FyZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJpbmhlcml0XCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudF9jb3B5XG4gICAgICAgICAgICAgICAgICAgIDwva2FuYS1pY29uPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9vbHRpcCAke3RoaXMudG9vbHRpcCA/ICdzaG93JyA6ICcnfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgQ29waWVkIVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICBgIFxuICAgICAgICAgICAgICAgIDogXCJcIn1cbiAgICAgICAgYFxuICAgIH1cbn1cbiIsImltcG9ydHtub3RoaW5nIGFzIHR9ZnJvbVwiLi4vbGl0LWh0bWwuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NvbnN0IG89bz0+bz8/dDtleHBvcnR7byBhcyBpZkRlZmluZWR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWYtZGVmaW5lZC5qcy5tYXBcbiIsImltcG9ydCB7IExpdEVsZW1lbnQsIGh0bWwsIGNzcywgSFRNTFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgZm9yZWdyb3VuZCB9IGZyb20gJy4vY29tbW9uLXN0eWxlcyc7XG5pbXBvcnQgXCIuL2ljb25cIjtcbmltcG9ydCBcIi4vbWluaWRlbnRpY29uXCI7XG5pbXBvcnQgXCIuL2FkZHJlc3NcIjtcbmltcG9ydCB7IGlmRGVmaW5lZCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL2lmLWRlZmluZWQuanMnO1xuXG5pbnRlcmZhY2UgQnV0dG9uUHJvcHMge1xuICAgIGxpbms/OiBzdHJpbmc7XG4gICAgdGV4dDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgUHJvamVjdENhcmRQcm9wcyB7XG4gICAgbmFtZT86IFN0cmluZztcbiAgICBkZXNjcmlwdGlvbj86IFN0cmluZztcbiAgICBpbWFnZXM/OiBTdHJpbmdbXTtcbiAgICBidXR0b24/OiBCdXR0b25Qcm9wcztcbiAgICBhZGRyZXNzPzogc3RyaW5nO1xufVxuXG5AY3VzdG9tRWxlbWVudCgna2FuYS1jYXJkJylcbmV4cG9ydCBjbGFzcyBLYW5hQ2FyZCBleHRlbmRzIExpdEVsZW1lbnQge1xuXG4gICAgQHByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pXG4gICAgZGVjbGFyZSBuYW1lPzogU3RyaW5nO1xuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KVxuICAgIGRlY2xhcmUgZGVzY3JpcHRpb24/OiBTdHJpbmc7XG4gICAgQHByb3BlcnR5KHsgdHlwZTogQXJyYXkgfSkgXG4gICAgZGVjbGFyZSBpbWFnZXM6IFN0cmluZ1tdO1xuICAgIEBwcm9wZXJ0eSgpIFxuICAgIGRlY2xhcmUgYnV0dG9uOiBCdXR0b25Qcm9wcztcbiAgICBAcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcgfSkgXG4gICAgZGVjbGFyZSBhZGRyZXNzPzogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM/OiBQcm9qZWN0Q2FyZFByb3BzKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBwcm9wcy5uYW1lIHx8IHRoaXMubmFtZTtcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBwcm9wcy5kZXNjcmlwdGlvbiB8fCB0aGlzLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgdGhpcy5pbWFnZXMgPSBwcm9wcy5pbWFnZXMgfHwgdGhpcy5pbWFnZXMgfHwgW107XG4gICAgICAgICAgICB0aGlzLmJ1dHRvbiA9IHByb3BzLmJ1dHRvbiB8fCB0aGlzLmJ1dHRvbjtcbiAgICAgICAgICAgIHRoaXMuYWRkcmVzcyA9IHByb3BzLmFkZHJlc3M7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1mb3JlZ3JvdW5kLWNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxcmVtO1xuICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDRweCA2cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjcwcHg7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMzcwcHg7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLnRpdGxlLXJvdyB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAuZGVzY3JpcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDRyZW07XG4gICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IHNjcm9sbDtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC5kZXNjcmlwdGlvbjo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMnJlbTtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHRvcCwgdmFyKC0tZm9yZWdyb3VuZC1jb2xvciksIHRyYW5zcGFyZW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAuaW1hZ2VzIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgICAgICAgICAgICAgICAgICBnYXA6IDFyZW07XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTI4cHg7XG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlkZW50aWNvbi1pbWcge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAga2FuYS1idXR0b24ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMXJlbTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgICAgIH1cblxuXHRcdFx0XHQucHJvamVjdC1saW5rIHtcblx0XHRcdFx0XHR0ZXh0LWRlY29yYXRpb246IG5vbmU7XG5cdFx0XHRcdFx0Y29sb3I6IGluaGVyaXQ7XG5cdFx0XHRcdH1cblxuICAgICAgICAgICAgICAgIGV2bS1hZGRyZXNzIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDE1cHg7XG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuOXJlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgLFxuICAgICAgICAgICAgZm9yZWdyb3VuZCgpLFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGl0bGUtcm93XCI+XG4gICAgICAgICAgICAgICAgPGgyPiR7dGhpcy5uYW1lfTwvaDI+XG5cdFx0ICAgICR7XCJcIiAvKiBUT0RPOlxuICAgICAgICAgIFx0XHQ8YSBocmVmPVwiUFJPSkVDVF9JRF9PUl9TSU1JTEFSXCIgY2xhc3M9XCJwcm9qZWN0LWxpbmtcIj5cbiAgICAgICAgICAgIFx0XHRcdDxrYW5hLWljb24+c2V0dGluZ3M8L2thbmEtaWNvbj5cblx0XHRcdDwvYT5cbiAgICAgICAgICBcdCovfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICAke3RoaXMuZGVzY3JpcHRpb259XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbWFnZXNcIj5cbiAgICAgICAgICAgICAgICA8aWRlbnRpY29uLWltZyBoYXNoPVwiJHtpZkRlZmluZWQodGhpcy5hZGRyZXNzKX1cIj5cbiAgICAgICAgICAgICAgICA8L2lkZW50aWNvbi1pbWc+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxhIGhyZWY9XCIke2lmRGVmaW5lZCh0aGlzLmJ1dHRvbi5saW5rKX1cIj5cbiAgICAgICAgICAgICAgICA8a2FuYS1idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICR7dGhpcy5idXR0b24udGV4dH1cbiAgICAgICAgICAgICAgICA8L2thbmEtYnV0dG9uPlxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgJHsodGhpcy5hZGRyZXNzKSA/IFxuICAgICAgICAgICAgICAgIGh0bWxgXG4gICAgICAgICAgICAgICAgICAgIDxldm0tYWRkcmVzcyBhZGRyZXNzPVwiJHtpZkRlZmluZWQodGhpcy5hZGRyZXNzKX1cIiBcbiAgICAgICAgICAgICAgICAgICAgICAgIGFicmlkZ2VkIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpcGJvYXJkXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPC9ldm0tYWRkcmVzcz5gIFxuICAgICAgICAgICAgICAgIDogXCJcIn1cbiAgICAgICAgYDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBMaXRFbGVtZW50LCBodG1sLCBjc3MsIENTU1Jlc3VsdCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCBcIi4vaWNvbi50c1wiO1xuXG5AY3VzdG9tRWxlbWVudChcImxvYWRpbmctaWNvblwiKVxuZXhwb3J0IGNsYXNzIExvYWRpbmdJY29uIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KVxuICBkZWNsYXJlIHNpemU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2l6ZSA9IFwiOHJlbVwiO1xuICB9XG5cbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIGNzc2BcbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgZmxleDogMTtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgIH1cblxuICAgICAgLmxvYWRlciB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgYW5pbWF0aW9uOiByb3RhdGlvbiAxLjVzIGxpbmVhciBpbmZpbml0ZTtcbiAgICAgIH1cblxuICAgICAgQGtleWZyYW1lcyByb3RhdGlvbiB7XG4gICAgICAgIDAlIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgICAgICAgfVxuICAgICAgICAxMDAlIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNTlkZWcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgYDtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxrYW5hLWljb24gY2xhc3M9XCJsb2FkZXJcIiBzdHlsZT1cImZvbnQtc2l6ZTogJHt0aGlzLnNpemV9XCI+XG4gICAgICAgIHN5bmNcbiAgICAgIDwva2FuYS1pY29uPlxuICAgIGA7XG4gIH1cbn0iLCIvKiBEbyBOT1QgbW9kaWZ5IHRoaXMgZmlsZTsgc2VlIC9zcmMudHMvX2FkbWluL3VwZGF0ZS12ZXJzaW9uLnRzICovXG4vKipcbiAqICBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIEV0aGVycy5cbiAqL1xuZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcIjYuMTEuMVwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3ZlcnNpb24uanMubWFwIiwiLyoqXG4gKiAgUHJvcGVydHkgaGVscGVyIGZ1bmN0aW9ucy5cbiAqXG4gKiAgQF9zdWJzZWN0aW9uIGFwaS91dGlsczpQcm9wZXJ0aWVzICBbYWJvdXQtcHJvcGVydGllc11cbiAqL1xuZnVuY3Rpb24gY2hlY2tUeXBlKHZhbHVlLCB0eXBlLCBuYW1lKSB7XG4gICAgY29uc3QgdHlwZXMgPSB0eXBlLnNwbGl0KFwifFwiKS5tYXAodCA9PiB0LnRyaW0oKSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJhbnlcIjpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBpbnZhbGlkIHZhbHVlIGZvciB0eXBlICR7dHlwZX1gKTtcbiAgICBlcnJvci5jb2RlID0gXCJJTlZBTElEX0FSR1VNRU5UXCI7XG4gICAgZXJyb3IuYXJndW1lbnQgPSBgdmFsdWUuJHtuYW1lfWA7XG4gICAgZXJyb3IudmFsdWUgPSB2YWx1ZTtcbiAgICB0aHJvdyBlcnJvcjtcbn1cbi8qKlxuICogIFJlc29sdmVzIHRvIGEgbmV3IG9iamVjdCB0aGF0IGlzIGEgY29weSBvZiAlJXZhbHVlJSUsIGJ1dCB3aXRoIGFsbFxuICogIHZhbHVlcyByZXNvbHZlZC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlc29sdmVQcm9wZXJ0aWVzKHZhbHVlKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoa2V5cy5tYXAoKGspID0+IFByb21pc2UucmVzb2x2ZSh2YWx1ZVtrXSkpKTtcbiAgICByZXR1cm4gcmVzdWx0cy5yZWR1Y2UoKGFjY3VtLCB2LCBpbmRleCkgPT4ge1xuICAgICAgICBhY2N1bVtrZXlzW2luZGV4XV0gPSB2O1xuICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgfSwge30pO1xufVxuLyoqXG4gKiAgQXNzaWducyB0aGUgJSV2YWx1ZXMlJSB0byAlJXRhcmdldCUlIGFzIHJlYWQtb25seSB2YWx1ZXMuXG4gKlxuICogIEl0ICUldHlwZXMlJSBpcyBzcGVjaWZpZWQsIHRoZSB2YWx1ZXMgYXJlIGNoZWNrZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgdmFsdWVzLCB0eXBlcykge1xuICAgIGZvciAobGV0IGtleSBpbiB2YWx1ZXMpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gdmFsdWVzW2tleV07XG4gICAgICAgIGNvbnN0IHR5cGUgPSAodHlwZXMgPyB0eXBlc1trZXldIDogbnVsbCk7XG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICBjaGVja1R5cGUodmFsdWUsIHR5cGUsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlLCB3cml0YWJsZTogZmFsc2UgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcGVydGllcy5qcy5tYXAiLCIvKipcbiAqICBBbGwgZXJyb3JzIGluIGV0aGVycyBpbmNsdWRlIHByb3BlcnRpZXMgdG8gZW5zdXJlIHRoZXkgYXJlIGJvdGhcbiAqICBodW1hbi1yZWFkYWJsZSAoaS5lLiBgYC5tZXNzYWdlYGApIGFuZCBtYWNoaW5lLXJlYWRhYmxlIChpLmUuIGBgLmNvZGVgYCkuXG4gKlxuICogIFRoZSBbW2lzRXJyb3JdXSBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBjaGVjayB0aGUgZXJyb3IgYGBjb2RlYGAgYW5kXG4gKiAgcHJvdmlkZSBhIHR5cGUgZ3VhcmQgZm9yIHRoZSBwcm9wZXJ0aWVzIHByZXNlbnQgb24gdGhhdCBlcnJvciBpbnRlcmZhY2UuXG4gKlxuICogIEBfc2VjdGlvbjogYXBpL3V0aWxzL2Vycm9yczpFcnJvcnMgIFthYm91dC1lcnJvcnNdXG4gKi9cbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi4vX3ZlcnNpb24uanNcIjtcbmltcG9ydCB7IGRlZmluZVByb3BlcnRpZXMgfSBmcm9tIFwiLi9wcm9wZXJ0aWVzLmpzXCI7XG5mdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXCJudWxsXCI7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gXCJbIFwiICsgKHZhbHVlLm1hcChzdHJpbmdpZnkpKS5qb2luKFwiLCBcIikgKyBcIiBdXCI7XG4gICAgfVxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgY29uc3QgSEVYID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XG4gICAgICAgIGxldCByZXN1bHQgPSBcIjB4XCI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBIRVhbdmFsdWVbaV0gPj4gNF07XG4gICAgICAgICAgICByZXN1bHQgKz0gSEVYW3ZhbHVlW2ldICYgMHhmXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mICh2YWx1ZS50b0pTT04pID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeSh2YWx1ZS50b0pTT04oKSk7XG4gICAgfVxuICAgIHN3aXRjaCAodHlwZW9mICh2YWx1ZSkpIHtcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgICAgICAgIHJldHVybiBCaWdJbnQodmFsdWUpLnRvU3RyaW5nKCk7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIHJldHVybiAodmFsdWUpLnRvU3RyaW5nKCk7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJvYmplY3RcIjoge1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgICAgICAgICAgIGtleXMuc29ydCgpO1xuICAgICAgICAgICAgcmV0dXJuIFwieyBcIiArIGtleXMubWFwKChrKSA9PiBgJHtzdHJpbmdpZnkoayl9OiAke3N0cmluZ2lmeSh2YWx1ZVtrXSl9YCkuam9pbihcIiwgXCIpICsgXCIgfVwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBgWyBDT1VMRCBOT1QgU0VSSUFMSVpFIF1gO1xufVxuLyoqXG4gKiAgUmV0dXJucyB0cnVlIGlmIHRoZSAlJWVycm9yJSUgbWF0Y2hlcyBhbiBlcnJvciB0aHJvd24gYnkgZXRoZXJzXG4gKiAgdGhhdCBtYXRjaGVzIHRoZSBlcnJvciAlJWNvZGUlJS5cbiAqXG4gKiAgSW4gVHlwZVNjcmlwdCBlbnZpcm9ubWVudHMsIHRoaXMgY2FuIGJlIHVzZWQgdG8gY2hlY2sgdGhhdCAlJWVycm9yJSVcbiAqICBtYXRjaGVzIGFuIEV0aGVyc0Vycm9yIHR5cGUsIHdoaWNoIG1lYW5zIHRoZSBleHBlY3RlZCBwcm9wZXJ0aWVzIHdpbGxcbiAqICBiZSBzZXQuXG4gKlxuICogIEBTZWUgW0Vycm9yQ29kZXNdKGFwaTpFcnJvckNvZGUpXG4gKiAgQGV4YW1wbGVcbiAqICAgIHRyeSB7XG4gKiAgICAgIC8vIGNvZGUuLi4uXG4gKiAgICB9IGNhdGNoIChlKSB7XG4gKiAgICAgIGlmIChpc0Vycm9yKGUsIFwiQ0FMTF9FWENFUFRJT05cIikpIHtcbiAqICAgICAgICAgIC8vIFRoZSBUeXBlIEd1YXJkIGhhcyB2YWxpZGF0ZWQgdGhpcyBvYmplY3RcbiAqICAgICAgICAgIGNvbnNvbGUubG9nKGUuZGF0YSk7XG4gKiAgICAgIH1cbiAqICAgIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRXJyb3IoZXJyb3IsIGNvZGUpIHtcbiAgICByZXR1cm4gKGVycm9yICYmIGVycm9yLmNvZGUgPT09IGNvZGUpO1xufVxuLyoqXG4gKiAgUmV0dXJucyB0cnVlIGlmICUlZXJyb3IlJSBpcyBhIFtbQ2FsbEV4Y2VwdGlvbkVycm9yXS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ2FsbEV4Y2VwdGlvbihlcnJvcikge1xuICAgIHJldHVybiBpc0Vycm9yKGVycm9yLCBcIkNBTExfRVhDRVBUSU9OXCIpO1xufVxuLyoqXG4gKiAgUmV0dXJucyBhIG5ldyBFcnJvciBjb25maWd1cmVkIHRvIHRoZSBmb3JtYXQgZXRoZXJzIGVtaXRzIGVycm9ycywgd2l0aFxuICogIHRoZSAlJW1lc3NhZ2UlJSwgW1thcGk6RXJyb3JDb2RlXV0gJSVjb2RlJSUgYW5kIGFkZGl0aW9uYWwgcHJvcGVydGllc1xuICogIGZvciB0aGUgY29ycmVzcG9uZGluZyBFdGhlcnNFcnJvci5cbiAqXG4gKiAgRWFjaCBlcnJvciBpbiBldGhlcnMgaW5jbHVkZXMgdGhlIHZlcnNpb24gb2YgZXRoZXJzLCBhXG4gKiAgbWFjaGluZS1yZWFkYWJsZSBbW0Vycm9yQ29kZV1dLCBhbmQgZGVwZW5kaW5nIG9uICUlY29kZSUlLCBhZGRpdGlvbmFsXG4gKiAgcmVxdWlyZWQgcHJvcGVydGllcy4gVGhlIGVycm9yIG1lc3NhZ2Ugd2lsbCBhbHNvIGluY2x1ZGUgdGhlICUlbWVzc2FnZSUlLFxuICogIGV0aGVycyB2ZXJzaW9uLCAlJWNvZGUlJSBhbmQgYWxsIGFkZGl0aW9uYWwgcHJvcGVydGllcywgc2VyaWFsaXplZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VFcnJvcihtZXNzYWdlLCBjb2RlLCBpbmZvKSB7XG4gICAgbGV0IHNob3J0TWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAge1xuICAgICAgICBjb25zdCBkZXRhaWxzID0gW107XG4gICAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgICAgICBpZiAoXCJtZXNzYWdlXCIgaW4gaW5mbyB8fCBcImNvZGVcIiBpbiBpbmZvIHx8IFwibmFtZVwiIGluIGluZm8pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHZhbHVlIHdpbGwgb3ZlcndyaXRlIHBvcHVsYXRlZCB2YWx1ZXM6ICR7c3RyaW5naWZ5KGluZm8pfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW5mbykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IFwic2hvcnRNZXNzYWdlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gKGluZm9ba2V5XSk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkZXRhaWxzLnB1c2goa2V5ICsgXCI9XCIgKyBzdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJNTU1cIiwgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgIGRldGFpbHMucHVzaChrZXkgKyBcIj1bY291bGQgbm90IHNlcmlhbGl6ZSBvYmplY3RdXCIpO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkZXRhaWxzLnB1c2goYGNvZGU9JHtjb2RlfWApO1xuICAgICAgICBkZXRhaWxzLnB1c2goYHZlcnNpb249JHt2ZXJzaW9ufWApO1xuICAgICAgICBpZiAoZGV0YWlscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gXCIgKFwiICsgZGV0YWlscy5qb2luKFwiLCBcIikgKyBcIilcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgZXJyb3I7XG4gICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgIGNhc2UgXCJJTlZBTElEX0FSR1VNRU5UXCI6XG4gICAgICAgICAgICBlcnJvciA9IG5ldyBUeXBlRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIk5VTUVSSUNfRkFVTFRcIjpcbiAgICAgICAgY2FzZSBcIkJVRkZFUl9PVkVSUlVOXCI6XG4gICAgICAgICAgICBlcnJvciA9IG5ldyBSYW5nZUVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgZGVmaW5lUHJvcGVydGllcyhlcnJvciwgeyBjb2RlIH0pO1xuICAgIGlmIChpbmZvKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZXJyb3IsIGluZm8pO1xuICAgIH1cbiAgICBpZiAoZXJyb3Iuc2hvcnRNZXNzYWdlID09IG51bGwpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyhlcnJvciwgeyBzaG9ydE1lc3NhZ2UgfSk7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcjtcbn1cbi8qKlxuICogIFRocm93cyBhbiBFdGhlcnNFcnJvciB3aXRoICUlbWVzc2FnZSUlLCAlJWNvZGUlJSBhbmQgYWRkaXRpb25hbCBlcnJvclxuICogICUlaW5mbyUlIHdoZW4gJSVjaGVjayUlIGlzIGZhbHNpc2guLlxuICpcbiAqICBAc2VlIFtbYXBpOm1ha2VFcnJvcl1dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnQoY2hlY2ssIG1lc3NhZ2UsIGNvZGUsIGluZm8pIHtcbiAgICBpZiAoIWNoZWNrKSB7XG4gICAgICAgIHRocm93IG1ha2VFcnJvcihtZXNzYWdlLCBjb2RlLCBpbmZvKTtcbiAgICB9XG59XG4vKipcbiAqICBBIHNpbXBsZSBoZWxwZXIgdG8gc2ltcGx5IGVuc3VyaW5nIHByb3ZpZGVkIGFyZ3VtZW50cyBtYXRjaCBleHBlY3RlZFxuICogIGNvbnN0cmFpbnRzLCB0aHJvd2luZyBpZiBub3QuXG4gKlxuICogIEluIFR5cGVTY3JpcHQgZW52aXJvbm1lbnRzLCB0aGUgJSVjaGVjayUlIGhhcyBiZWVuIGFzc2VydGVkIHRydWUsIHNvXG4gKiAgYW55IGZ1cnRoZXIgY29kZSBkb2VzIG5vdCBuZWVkIGFkZGl0aW9uYWwgY29tcGlsZS10aW1lIGNoZWNrcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEFyZ3VtZW50KGNoZWNrLCBtZXNzYWdlLCBuYW1lLCB2YWx1ZSkge1xuICAgIGFzc2VydChjaGVjaywgbWVzc2FnZSwgXCJJTlZBTElEX0FSR1VNRU5UXCIsIHsgYXJndW1lbnQ6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRBcmd1bWVudENvdW50KGNvdW50LCBleHBlY3RlZENvdW50LCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT0gbnVsbCkge1xuICAgICAgICBtZXNzYWdlID0gXCJcIjtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgICAgbWVzc2FnZSA9IFwiOiBcIiArIG1lc3NhZ2U7XG4gICAgfVxuICAgIGFzc2VydChjb3VudCA+PSBleHBlY3RlZENvdW50LCBcIm1pc3NpbmcgYXJndWVtbnRcIiArIG1lc3NhZ2UsIFwiTUlTU0lOR19BUkdVTUVOVFwiLCB7XG4gICAgICAgIGNvdW50OiBjb3VudCxcbiAgICAgICAgZXhwZWN0ZWRDb3VudDogZXhwZWN0ZWRDb3VudFxuICAgIH0pO1xuICAgIGFzc2VydChjb3VudCA8PSBleHBlY3RlZENvdW50LCBcInRvbyBtYW55IGFyZ3VtZW50c1wiICsgbWVzc2FnZSwgXCJVTkVYUEVDVEVEX0FSR1VNRU5UXCIsIHtcbiAgICAgICAgY291bnQ6IGNvdW50LFxuICAgICAgICBleHBlY3RlZENvdW50OiBleHBlY3RlZENvdW50XG4gICAgfSk7XG59XG5jb25zdCBfbm9ybWFsaXplRm9ybXMgPSBbXCJORkRcIiwgXCJORkNcIiwgXCJORktEXCIsIFwiTkZLQ1wiXS5yZWR1Y2UoKGFjY3VtLCBmb3JtKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gR2VuZXJhbCB0ZXN0IGZvciBub3JtYWxpemVcbiAgICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICAgIGlmIChcInRlc3RcIi5ub3JtYWxpemUoZm9ybSkgIT09IFwidGVzdFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgO1xuICAgICAgICAvKiBjOCBpZ25vcmUgc3RvcCAqL1xuICAgICAgICBpZiAoZm9ybSA9PT0gXCJORkRcIikge1xuICAgICAgICAgICAgY29uc3QgY2hlY2sgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZTkpLm5vcm1hbGl6ZShcIk5GRFwiKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDY1LCAweDAzMDEpO1xuICAgICAgICAgICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgICAgICAgICBpZiAoY2hlY2sgIT09IGV4cGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYnJva2VuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogYzggaWdub3JlIHN0b3AgKi9cbiAgICAgICAgfVxuICAgICAgICBhY2N1bS5wdXNoKGZvcm0pO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIHJldHVybiBhY2N1bTtcbn0sIFtdKTtcbi8qKlxuICogIFRocm93cyBpZiB0aGUgbm9ybWFsaXphdGlvbiAlJWZvcm0lJSBpcyBub3Qgc3VwcG9ydGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0Tm9ybWFsaXplKGZvcm0pIHtcbiAgICBhc3NlcnQoX25vcm1hbGl6ZUZvcm1zLmluZGV4T2YoZm9ybSkgPj0gMCwgXCJwbGF0Zm9ybSBtaXNzaW5nIFN0cmluZy5wcm90b3R5cGUubm9ybWFsaXplXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgb3BlcmF0aW9uOiBcIlN0cmluZy5wcm90b3R5cGUubm9ybWFsaXplXCIsIGluZm86IHsgZm9ybSB9XG4gICAgfSk7XG59XG4vKipcbiAqICBNYW55IGNsYXNzZXMgdXNlIGZpbGUtc2NvcGVkIHZhbHVlcyB0byBndWFyZCB0aGUgY29uc3RydWN0b3IsXG4gKiAgbWFraW5nIGl0IGVmZmVjdGl2ZWx5IHByaXZhdGUuIFRoaXMgZmFjaWxpdGF0ZXMgdGhhdCBwYXR0ZXJuXG4gKiAgYnkgZW5zdXJpbmcgdGhlICUlZ2l2ZW5HYXVyZCUlIG1hdGNoZXMgdGhlIGZpbGUtc2NvcGVkICUlZ3VhcmQlJSxcbiAqICB0aHJvd2luZyBpZiBub3QsIGluZGljYXRpbmcgdGhlICUlY2xhc3NOYW1lJSUgaWYgcHJvdmlkZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRQcml2YXRlKGdpdmVuR3VhcmQsIGd1YXJkLCBjbGFzc05hbWUpIHtcbiAgICBpZiAoY2xhc3NOYW1lID09IG51bGwpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gXCJcIjtcbiAgICB9XG4gICAgaWYgKGdpdmVuR3VhcmQgIT09IGd1YXJkKSB7XG4gICAgICAgIGxldCBtZXRob2QgPSBjbGFzc05hbWUsIG9wZXJhdGlvbiA9IFwibmV3XCI7XG4gICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIG1ldGhvZCArPSBcIi5cIjtcbiAgICAgICAgICAgIG9wZXJhdGlvbiArPSBcIiBcIiArIGNsYXNzTmFtZTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnQoZmFsc2UsIGBwcml2YXRlIGNvbnN0cnVjdG9yOyB1c2UgJHttZXRob2R9ZnJvbSogbWV0aG9kc2AsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvblxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIiwiLyoqXG4gKiAgU29tZSBkYXRhIGhlbHBlcnMuXG4gKlxuICpcbiAqICBAX3N1YnNlY3Rpb24gYXBpL3V0aWxzOkRhdGEgSGVscGVycyAgW2Fib3V0LWRhdGFdXG4gKi9cbmltcG9ydCB7IGFzc2VydCwgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi9lcnJvcnMuanNcIjtcbmZ1bmN0aW9uIF9nZXRCeXRlcyh2YWx1ZSwgbmFtZSwgY29weSkge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUubWF0Y2goL14weChbMC05YS1mXVswLTlhLWZdKSokL2kpKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KCh2YWx1ZS5sZW5ndGggLSAyKSAvIDIpO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdFtpXSA9IHBhcnNlSW50KHZhbHVlLnN1YnN0cmluZyhvZmZzZXQsIG9mZnNldCArIDIpLCAxNik7XG4gICAgICAgICAgICBvZmZzZXQgKz0gMjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgXCJpbnZhbGlkIEJ5dGVzTGlrZSB2YWx1ZVwiLCBuYW1lIHx8IFwidmFsdWVcIiwgdmFsdWUpO1xufVxuLyoqXG4gKiAgR2V0IGEgdHlwZWQgVWludDhBcnJheSBmb3IgJSV2YWx1ZSUlLiBJZiBhbHJlYWR5IGEgVWludDhBcnJheVxuICogIHRoZSBvcmlnaW5hbCAlJXZhbHVlJSUgaXMgcmV0dXJuZWQ7IGlmIGEgY29weSBpcyByZXF1aXJlZCB1c2VcbiAqICBbW2dldEJ5dGVzQ29weV1dLlxuICpcbiAqICBAc2VlOiBnZXRCeXRlc0NvcHlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJ5dGVzKHZhbHVlLCBuYW1lKSB7XG4gICAgcmV0dXJuIF9nZXRCeXRlcyh2YWx1ZSwgbmFtZSwgZmFsc2UpO1xufVxuLyoqXG4gKiAgR2V0IGEgdHlwZWQgVWludDhBcnJheSBmb3IgJSV2YWx1ZSUlLCBjcmVhdGluZyBhIGNvcHkgaWYgbmVjZXNzYXJ5XG4gKiAgdG8gcHJldmVudCBhbnkgbW9kaWZpY2F0aW9ucyBvZiB0aGUgcmV0dXJuZWQgdmFsdWUgZnJvbSBiZWluZ1xuICogIHJlZmxlY3RlZCBlbHNld2hlcmUuXG4gKlxuICogIEBzZWU6IGdldEJ5dGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCeXRlc0NvcHkodmFsdWUsIG5hbWUpIHtcbiAgICByZXR1cm4gX2dldEJ5dGVzKHZhbHVlLCBuYW1lLCB0cnVlKTtcbn1cbi8qKlxuICogIFJldHVybnMgdHJ1ZSBpZiAlJXZhbHVlJSUgaXMgYSB2YWxpZCBbW0hleFN0cmluZ11dLlxuICpcbiAqICBJZiAlJWxlbmd0aCUlIGlzIGBgdHJ1ZWBgIG9yIGEgLy9udW1iZXIvLywgaXQgYWxzbyBjaGVja3MgdGhhdFxuICogICUldmFsdWUlJSBpcyBhIHZhbGlkIFtbRGF0YUhleFN0cmluZ11dIG9mICUlbGVuZ3RoJSUgKGlmIGEgLy9udW1iZXIvLylcbiAqICBieXRlcyBvZiBkYXRhIChlLmcuIGBgMHgxMjM0YGAgaXMgMiBieXRlcykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0hleFN0cmluZyh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpICE9PSBcInN0cmluZ1wiIHx8ICF2YWx1ZS5tYXRjaCgvXjB4WzAtOUEtRmEtZl0qJC8pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAobGVuZ3RoKSA9PT0gXCJudW1iZXJcIiAmJiB2YWx1ZS5sZW5ndGggIT09IDIgKyAyICogbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGxlbmd0aCA9PT0gdHJ1ZSAmJiAodmFsdWUubGVuZ3RoICUgMikgIT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogIFJldHVybnMgdHJ1ZSBpZiAlJXZhbHVlJSUgaXMgYSB2YWxpZCByZXByZXNlbnRhdGlvbiBvZiBhcmJpdHJhcnlcbiAqICBkYXRhIChpLmUuIGEgdmFsaWQgW1tEYXRhSGV4U3RyaW5nXV0gb3IgYSBVaW50OEFycmF5KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQnl0ZXNMaWtlKHZhbHVlKSB7XG4gICAgcmV0dXJuIChpc0hleFN0cmluZyh2YWx1ZSwgdHJ1ZSkgfHwgKHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSkpO1xufVxuY29uc3QgSGV4Q2hhcmFjdGVycyA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xuLyoqXG4gKiAgUmV0dXJucyBhIFtbRGF0YUhleFN0cmluZ11dIHJlcHJlc2VudGF0aW9uIG9mICUlZGF0YSUlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaGV4bGlmeShkYXRhKSB7XG4gICAgY29uc3QgYnl0ZXMgPSBnZXRCeXRlcyhkYXRhKTtcbiAgICBsZXQgcmVzdWx0ID0gXCIweFwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdiA9IGJ5dGVzW2ldO1xuICAgICAgICByZXN1bHQgKz0gSGV4Q2hhcmFjdGVyc1sodiAmIDB4ZjApID4+IDRdICsgSGV4Q2hhcmFjdGVyc1t2ICYgMHgwZl07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqICBSZXR1cm5zIGEgW1tEYXRhSGV4U3RyaW5nXV0gYnkgY29uY2F0ZW5hdGluZyBhbGwgdmFsdWVzXG4gKiAgd2l0aGluICUlZGF0YSUlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0KGRhdGFzKSB7XG4gICAgcmV0dXJuIFwiMHhcIiArIGRhdGFzLm1hcCgoZCkgPT4gaGV4bGlmeShkKS5zdWJzdHJpbmcoMikpLmpvaW4oXCJcIik7XG59XG4vKipcbiAqICBSZXR1cm5zIHRoZSBsZW5ndGggb2YgJSVkYXRhJSUsIGluIGJ5dGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxlbmd0aChkYXRhKSB7XG4gICAgaWYgKGlzSGV4U3RyaW5nKGRhdGEsIHRydWUpKSB7XG4gICAgICAgIHJldHVybiAoZGF0YS5sZW5ndGggLSAyKSAvIDI7XG4gICAgfVxuICAgIHJldHVybiBnZXRCeXRlcyhkYXRhKS5sZW5ndGg7XG59XG4vKipcbiAqICBSZXR1cm5zIGEgW1tEYXRhSGV4U3RyaW5nXV0gYnkgc2xpY2luZyAlJWRhdGElJSBmcm9tIHRoZSAlJXN0YXJ0JSVcbiAqICBvZmZzZXQgdG8gdGhlICUlZW5kJSUgb2Zmc2V0LlxuICpcbiAqICBCeSBkZWZhdWx0ICUlc3RhcnQlJSBpcyAwIGFuZCAlJWVuZCUlIGlzIHRoZSBsZW5ndGggb2YgJSVkYXRhJSUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkYXRhU2xpY2UoZGF0YSwgc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IGJ5dGVzID0gZ2V0Qnl0ZXMoZGF0YSk7XG4gICAgaWYgKGVuZCAhPSBudWxsICYmIGVuZCA+IGJ5dGVzLmxlbmd0aCkge1xuICAgICAgICBhc3NlcnQoZmFsc2UsIFwiY2Fubm90IHNsaWNlIGJleW9uZCBkYXRhIGJvdW5kc1wiLCBcIkJVRkZFUl9PVkVSUlVOXCIsIHtcbiAgICAgICAgICAgIGJ1ZmZlcjogYnl0ZXMsIGxlbmd0aDogYnl0ZXMubGVuZ3RoLCBvZmZzZXQ6IGVuZFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGhleGxpZnkoYnl0ZXMuc2xpY2UoKHN0YXJ0ID09IG51bGwpID8gMCA6IHN0YXJ0LCAoZW5kID09IG51bGwpID8gYnl0ZXMubGVuZ3RoIDogZW5kKSk7XG59XG4vKipcbiAqICBSZXR1cm4gdGhlIFtbRGF0YUhleFN0cmluZ11dIHJlc3VsdCBieSBzdHJpcHBpbmcgYWxsICoqbGVhZGluZyoqXG4gKiogemVybyBieXRlcyBmcm9tICUlZGF0YSUlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBaZXJvc0xlZnQoZGF0YSkge1xuICAgIGxldCBieXRlcyA9IGhleGxpZnkoZGF0YSkuc3Vic3RyaW5nKDIpO1xuICAgIHdoaWxlIChieXRlcy5zdGFydHNXaXRoKFwiMDBcIikpIHtcbiAgICAgICAgYnl0ZXMgPSBieXRlcy5zdWJzdHJpbmcoMik7XG4gICAgfVxuICAgIHJldHVybiBcIjB4XCIgKyBieXRlcztcbn1cbmZ1bmN0aW9uIHplcm9QYWQoZGF0YSwgbGVuZ3RoLCBsZWZ0KSB7XG4gICAgY29uc3QgYnl0ZXMgPSBnZXRCeXRlcyhkYXRhKTtcbiAgICBhc3NlcnQobGVuZ3RoID49IGJ5dGVzLmxlbmd0aCwgXCJwYWRkaW5nIGV4Y2VlZHMgZGF0YSBsZW5ndGhcIiwgXCJCVUZGRVJfT1ZFUlJVTlwiLCB7XG4gICAgICAgIGJ1ZmZlcjogbmV3IFVpbnQ4QXJyYXkoYnl0ZXMpLFxuICAgICAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICAgICAgb2Zmc2V0OiBsZW5ndGggKyAxXG4gICAgfSk7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICByZXN1bHQuZmlsbCgwKTtcbiAgICBpZiAobGVmdCkge1xuICAgICAgICByZXN1bHQuc2V0KGJ5dGVzLCBsZW5ndGggLSBieXRlcy5sZW5ndGgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0LnNldChieXRlcywgMCk7XG4gICAgfVxuICAgIHJldHVybiBoZXhsaWZ5KHJlc3VsdCk7XG59XG4vKipcbiAqICBSZXR1cm4gdGhlIFtbRGF0YUhleFN0cmluZ11dIG9mICUlZGF0YSUlIHBhZGRlZCBvbiB0aGUgKipsZWZ0KipcbiAqICB0byAlJWxlbmd0aCUlIGJ5dGVzLlxuICpcbiAqICBJZiAlJWRhdGElJSBhbHJlYWR5IGV4Y2VlZHMgJSVsZW5ndGglJSwgYSBbW0J1ZmZlck92ZXJydW5FcnJvcl1dIGlzXG4gKiAgdGhyb3duLlxuICpcbiAqICBUaGlzIHBhZHMgZGF0YSB0aGUgc2FtZSBhcyAqKnZhbHVlcyoqIGFyZSBpbiBTb2xpZGl0eVxuICogIChlLmcuIGBgdWludDEyOGBgKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHplcm9QYWRWYWx1ZShkYXRhLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gemVyb1BhZChkYXRhLCBsZW5ndGgsIHRydWUpO1xufVxuLyoqXG4gKiAgUmV0dXJuIHRoZSBbW0RhdGFIZXhTdHJpbmddXSBvZiAlJWRhdGElJSBwYWRkZWQgb24gdGhlICoqcmlnaHQqKlxuICogIHRvICUlbGVuZ3RoJSUgYnl0ZXMuXG4gKlxuICogIElmICUlZGF0YSUlIGFscmVhZHkgZXhjZWVkcyAlJWxlbmd0aCUlLCBhIFtbQnVmZmVyT3ZlcnJ1bkVycm9yXV0gaXNcbiAqICB0aHJvd24uXG4gKlxuICogIFRoaXMgcGFkcyBkYXRhIHRoZSBzYW1lIGFzICoqYnl0ZXMqKiBhcmUgaW4gU29saWRpdHlcbiAqICAoZS5nLiBgYGJ5dGVzMTZgYCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB6ZXJvUGFkQnl0ZXMoZGF0YSwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHplcm9QYWQoZGF0YSwgbGVuZ3RoLCBmYWxzZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhLmpzLm1hcCIsIi8qKlxuICogIFNvbWUgbWF0aGVtYXRpYyBvcGVyYXRpb25zLlxuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS91dGlsczpNYXRoIEhlbHBlcnMgIFthYm91dC1tYXRoc11cbiAqL1xuaW1wb3J0IHsgaGV4bGlmeSwgaXNCeXRlc0xpa2UgfSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5pbXBvcnQgeyBhc3NlcnQsIGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5jb25zdCBCTl8wID0gQmlnSW50KDApO1xuY29uc3QgQk5fMSA9IEJpZ0ludCgxKTtcbi8vY29uc3QgQk5fTWF4MjU2ID0gKEJOXzEgPDwgQmlnSW50KDI1NikpIC0gQk5fMTtcbi8vIElFRUUgNzU0IHN1cHBvcnQgNTMtYml0cyBvZiBtYW50aXNzYVxuY29uc3QgbWF4VmFsdWUgPSAweDFmZmZmZmZmZmZmZmZmO1xuLyoqXG4gKiAgQ29udmVydCAlJXZhbHVlJSUgZnJvbSBhIHR3b3MtY29tcGxpbWVudCByZXByZXNlbnRhdGlvbiBvZiAlJXdpZHRoJSVcbiAqICBiaXRzIHRvIGl0cyB2YWx1ZS5cbiAqXG4gKiAgSWYgdGhlIGhpZ2hlc3QgYml0IGlzIGBgMWBgLCB0aGUgcmVzdWx0IHdpbGwgYmUgbmVnYXRpdmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVHdvcyhfdmFsdWUsIF93aWR0aCkge1xuICAgIGNvbnN0IHZhbHVlID0gZ2V0VWludChfdmFsdWUsIFwidmFsdWVcIik7XG4gICAgY29uc3Qgd2lkdGggPSBCaWdJbnQoZ2V0TnVtYmVyKF93aWR0aCwgXCJ3aWR0aFwiKSk7XG4gICAgYXNzZXJ0KCh2YWx1ZSA+PiB3aWR0aCkgPT09IEJOXzAsIFwib3ZlcmZsb3dcIiwgXCJOVU1FUklDX0ZBVUxUXCIsIHtcbiAgICAgICAgb3BlcmF0aW9uOiBcImZyb21Ud29zXCIsIGZhdWx0OiBcIm92ZXJmbG93XCIsIHZhbHVlOiBfdmFsdWVcbiAgICB9KTtcbiAgICAvLyBUb3AgYml0IHNldDsgdHJlYXQgYXMgYSBuZWdhdGl2ZSB2YWx1ZVxuICAgIGlmICh2YWx1ZSA+PiAod2lkdGggLSBCTl8xKSkge1xuICAgICAgICBjb25zdCBtYXNrID0gKEJOXzEgPDwgd2lkdGgpIC0gQk5fMTtcbiAgICAgICAgcmV0dXJuIC0oKCh+dmFsdWUpICYgbWFzaykgKyBCTl8xKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiAgQ29udmVydCAlJXZhbHVlJSUgdG8gYSB0d29zLWNvbXBsaW1lbnQgcmVwcmVzZW50YXRpb24gb2ZcbiAqICAlJXdpZHRoJSUgYml0cy5cbiAqXG4gKiAgVGhlIHJlc3VsdCB3aWxsIGFsd2F5cyBiZSBwb3NpdGl2ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvVHdvcyhfdmFsdWUsIF93aWR0aCkge1xuICAgIGxldCB2YWx1ZSA9IGdldEJpZ0ludChfdmFsdWUsIFwidmFsdWVcIik7XG4gICAgY29uc3Qgd2lkdGggPSBCaWdJbnQoZ2V0TnVtYmVyKF93aWR0aCwgXCJ3aWR0aFwiKSk7XG4gICAgY29uc3QgbGltaXQgPSAoQk5fMSA8PCAod2lkdGggLSBCTl8xKSk7XG4gICAgaWYgKHZhbHVlIDwgQk5fMCkge1xuICAgICAgICB2YWx1ZSA9IC12YWx1ZTtcbiAgICAgICAgYXNzZXJ0KHZhbHVlIDw9IGxpbWl0LCBcInRvbyBsb3dcIiwgXCJOVU1FUklDX0ZBVUxUXCIsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJ0b1R3b3NcIiwgZmF1bHQ6IFwib3ZlcmZsb3dcIiwgdmFsdWU6IF92YWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbWFzayA9IChCTl8xIDw8IHdpZHRoKSAtIEJOXzE7XG4gICAgICAgIHJldHVybiAoKH52YWx1ZSkgJiBtYXNrKSArIEJOXzE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhc3NlcnQodmFsdWUgPCBsaW1pdCwgXCJ0b28gaGlnaFwiLCBcIk5VTUVSSUNfRkFVTFRcIiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcInRvVHdvc1wiLCBmYXVsdDogXCJvdmVyZmxvd1wiLCB2YWx1ZTogX3ZhbHVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqICBNYXNrICUldmFsdWUlJSB3aXRoIGEgYml0bWFzayBvZiAlJWJpdHMlJSBvbmVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFzayhfdmFsdWUsIF9iaXRzKSB7XG4gICAgY29uc3QgdmFsdWUgPSBnZXRVaW50KF92YWx1ZSwgXCJ2YWx1ZVwiKTtcbiAgICBjb25zdCBiaXRzID0gQmlnSW50KGdldE51bWJlcihfYml0cywgXCJiaXRzXCIpKTtcbiAgICByZXR1cm4gdmFsdWUgJiAoKEJOXzEgPDwgYml0cykgLSBCTl8xKTtcbn1cbi8qKlxuICogIEdldHMgYSBCaWdJbnQgZnJvbSAlJXZhbHVlJSUuIElmIGl0IGlzIGFuIGludmFsaWQgdmFsdWUgZm9yXG4gKiAgYSBCaWdJbnQsIHRoZW4gYW4gQXJndW1lbnRFcnJvciB3aWxsIGJlIHRocm93biBmb3IgJSVuYW1lJSUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCaWdJbnQodmFsdWUsIG5hbWUpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiAodmFsdWUpKSB7XG4gICAgICAgIGNhc2UgXCJiaWdpbnRcIjogcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSwgXCJ1bmRlcmZsb3dcIiwgbmFtZSB8fCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHZhbHVlID49IC1tYXhWYWx1ZSAmJiB2YWx1ZSA8PSBtYXhWYWx1ZSwgXCJvdmVyZmxvd1wiLCBuYW1lIHx8IFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImVtcHR5IHN0cmluZ1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlWzBdID09PSBcIi1cIiAmJiB2YWx1ZVsxXSAhPT0gXCItXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC1CaWdJbnQodmFsdWUuc3Vic3RyaW5nKDEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBgaW52YWxpZCBCaWdOdW1iZXJpc2ggc3RyaW5nOiAke2UubWVzc2FnZX1gLCBuYW1lIHx8IFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgIH1cbiAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgXCJpbnZhbGlkIEJpZ051bWJlcmlzaCB2YWx1ZVwiLCBuYW1lIHx8IFwidmFsdWVcIiwgdmFsdWUpO1xufVxuLyoqXG4gKiAgUmV0dXJucyAlJXZhbHVlJSUgYXMgYSBiaWdpbnQsIHZhbGlkYXRpbmcgaXQgaXMgdmFsaWQgYXMgYSBiaWdpbnRcbiAqICB2YWx1ZSBhbmQgdGhhdCBpdCBpcyBwb3NpdGl2ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVpbnQodmFsdWUsIG5hbWUpIHtcbiAgICBjb25zdCByZXN1bHQgPSBnZXRCaWdJbnQodmFsdWUsIG5hbWUpO1xuICAgIGFzc2VydChyZXN1bHQgPj0gQk5fMCwgXCJ1bnNpZ25lZCB2YWx1ZSBjYW5ub3QgYmUgbmVnYXRpdmVcIiwgXCJOVU1FUklDX0ZBVUxUXCIsIHtcbiAgICAgICAgZmF1bHQ6IFwib3ZlcmZsb3dcIiwgb3BlcmF0aW9uOiBcImdldFVpbnRcIiwgdmFsdWVcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY29uc3QgTmliYmxlcyA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xuLypcbiAqIENvbnZlcnRzICUldmFsdWUlJSB0byBhIEJpZ0ludC4gSWYgJSV2YWx1ZSUlIGlzIGEgVWludDhBcnJheSwgaXRcbiAqIGlzIHRyZWF0ZWQgYXMgQmlnIEVuZGlhbiBkYXRhLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9CaWdJbnQodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBcIjB4MFwiO1xuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgdmFsdWUpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBOaWJibGVzW3YgPj4gNF07XG4gICAgICAgICAgICByZXN1bHQgKz0gTmliYmxlc1t2ICYgMHgwZl07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEJpZ0ludChyZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0QmlnSW50KHZhbHVlKTtcbn1cbi8qKlxuICogIEdldHMgYSAvL251bWJlci8vIGZyb20gJSV2YWx1ZSUlLiBJZiBpdCBpcyBhbiBpbnZhbGlkIHZhbHVlIGZvclxuICogIGEgLy9udW1iZXIvLywgdGhlbiBhbiBBcmd1bWVudEVycm9yIHdpbGwgYmUgdGhyb3duIGZvciAlJW5hbWUlJS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE51bWJlcih2YWx1ZSwgbmFtZSkge1xuICAgIHN3aXRjaCAodHlwZW9mICh2YWx1ZSkpIHtcbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQodmFsdWUgPj0gLW1heFZhbHVlICYmIHZhbHVlIDw9IG1heFZhbHVlLCBcIm92ZXJmbG93XCIsIG5hbWUgfHwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSksIFwidW5kZXJmbG93XCIsIG5hbWUgfHwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudCh2YWx1ZSA+PSAtbWF4VmFsdWUgJiYgdmFsdWUgPD0gbWF4VmFsdWUsIFwib3ZlcmZsb3dcIiwgbmFtZSB8fCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZW1wdHkgc3RyaW5nXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TnVtYmVyKEJpZ0ludCh2YWx1ZSksIG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgYGludmFsaWQgbnVtZXJpYyBzdHJpbmc6ICR7ZS5tZXNzYWdlfWAsIG5hbWUgfHwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcImludmFsaWQgbnVtZXJpYyB2YWx1ZVwiLCBuYW1lIHx8IFwidmFsdWVcIiwgdmFsdWUpO1xufVxuLyoqXG4gKiAgQ29udmVydHMgJSV2YWx1ZSUlIHRvIGEgbnVtYmVyLiBJZiAlJXZhbHVlJSUgaXMgYSBVaW50OEFycmF5LCBpdFxuICogIGlzIHRyZWF0ZWQgYXMgQmlnIEVuZGlhbiBkYXRhLiBUaHJvd3MgaWYgdGhlIHZhbHVlIGlzIG5vdCBzYWZlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gZ2V0TnVtYmVyKHRvQmlnSW50KHZhbHVlKSk7XG59XG4vKipcbiAqICBDb252ZXJ0cyAlJXZhbHVlJSUgdG8gYSBCaWcgRW5kaWFuIGhleHN0cmluZywgb3B0aW9uYWxseSBwYWRkZWQgdG9cbiAqICAlJXdpZHRoJSUgYnl0ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0JlSGV4KF92YWx1ZSwgX3dpZHRoKSB7XG4gICAgY29uc3QgdmFsdWUgPSBnZXRVaW50KF92YWx1ZSwgXCJ2YWx1ZVwiKTtcbiAgICBsZXQgcmVzdWx0ID0gdmFsdWUudG9TdHJpbmcoMTYpO1xuICAgIGlmIChfd2lkdGggPT0gbnVsbCkge1xuICAgICAgICAvLyBFbnN1cmUgdGhlIHZhbHVlIGlzIG9mIGV2ZW4gbGVuZ3RoXG4gICAgICAgIGlmIChyZXN1bHQubGVuZ3RoICUgMikge1xuICAgICAgICAgICAgcmVzdWx0ID0gXCIwXCIgKyByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gZ2V0TnVtYmVyKF93aWR0aCwgXCJ3aWR0aFwiKTtcbiAgICAgICAgYXNzZXJ0KHdpZHRoICogMiA+PSByZXN1bHQubGVuZ3RoLCBgdmFsdWUgZXhjZWVkcyB3aWR0aCAoJHt3aWR0aH0gYnl0ZXMpYCwgXCJOVU1FUklDX0ZBVUxUXCIsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJ0b0JlSGV4XCIsXG4gICAgICAgICAgICBmYXVsdDogXCJvdmVyZmxvd1wiLFxuICAgICAgICAgICAgdmFsdWU6IF92YWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gUGFkIHRoZSB2YWx1ZSB0byB0aGUgcmVxdWlyZWQgd2lkdGhcbiAgICAgICAgd2hpbGUgKHJlc3VsdC5sZW5ndGggPCAod2lkdGggKiAyKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gXCIwXCIgKyByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFwiMHhcIiArIHJlc3VsdDtcbn1cbi8qKlxuICogIENvbnZlcnRzICUldmFsdWUlJSB0byBhIEJpZyBFbmRpYW4gVWludDhBcnJheS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQmVBcnJheShfdmFsdWUpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGdldFVpbnQoX3ZhbHVlLCBcInZhbHVlXCIpO1xuICAgIGlmICh2YWx1ZSA9PT0gQk5fMCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW10pO1xuICAgIH1cbiAgICBsZXQgaGV4ID0gdmFsdWUudG9TdHJpbmcoMTYpO1xuICAgIGlmIChoZXgubGVuZ3RoICUgMikge1xuICAgICAgICBoZXggPSBcIjBcIiArIGhleDtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoaGV4Lmxlbmd0aCAvIDIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGkgKiAyO1xuICAgICAgICByZXN1bHRbaV0gPSBwYXJzZUludChoZXguc3Vic3RyaW5nKG9mZnNldCwgb2Zmc2V0ICsgMiksIDE2KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogIFJldHVybnMgYSBbW0hleFN0cmluZ11dIGZvciAlJXZhbHVlJSUgc2FmZSB0byB1c2UgYXMgYSAvL1F1YW50aXR5Ly8uXG4gKlxuICogIEEgLy9RdWFudGl0eS8vIGRvZXMgbm90IGhhdmUgYW5kIGxlYWRpbmcgMCB2YWx1ZXMgdW5sZXNzIHRoZSB2YWx1ZSBpc1xuICogIHRoZSBsaXRlcmFsIHZhbHVlIGAweDBgLiBUaGlzIGlzIG1vc3QgY29tbW9ubHkgdXNlZCBmb3IgSlNTT04tUlBDXG4gKiAgbnVtZXJpYyB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1F1YW50aXR5KHZhbHVlKSB7XG4gICAgbGV0IHJlc3VsdCA9IGhleGxpZnkoaXNCeXRlc0xpa2UodmFsdWUpID8gdmFsdWUgOiB0b0JlQXJyYXkodmFsdWUpKS5zdWJzdHJpbmcoMik7XG4gICAgd2hpbGUgKHJlc3VsdC5zdGFydHNXaXRoKFwiMFwiKSkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0ID09PSBcIlwiKSB7XG4gICAgICAgIHJlc3VsdCA9IFwiMFwiO1xuICAgIH1cbiAgICByZXR1cm4gXCIweFwiICsgcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0aHMuanMubWFwIiwiaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcywgY29uY2F0LCBnZXRCeXRlc0NvcHksIGdldE51bWJlciwgaGV4bGlmeSwgdG9CZUFycmF5LCB0b0JpZ0ludCwgdG9OdW1iZXIsIGFzc2VydCwgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaW5kZXguanNcIjtcbi8qKlxuICogQF9pZ25vcmU6XG4gKi9cbmV4cG9ydCBjb25zdCBXb3JkU2l6ZSA9IDMyO1xuY29uc3QgUGFkZGluZyA9IG5ldyBVaW50OEFycmF5KFdvcmRTaXplKTtcbi8vIFByb3BlcnRpZXMgdXNlZCB0byBpbW1lZGlhdGUgcGFzcyB0aHJvdWdoIHRvIHRoZSB1bmRlcmx5aW5nIG9iamVjdFxuLy8gLSBgdGhlbmAgaXMgdXNlZCB0byBkZXRlY3QgaWYgYW4gb2JqZWN0IGlzIGEgUHJvbWlzZSBmb3IgYXdhaXRcbmNvbnN0IHBhc3NQcm9wZXJ0aWVzID0gW1widGhlblwiXTtcbmNvbnN0IF9ndWFyZCA9IHt9O1xuZnVuY3Rpb24gdGhyb3dFcnJvcihuYW1lLCBlcnJvcikge1xuICAgIGNvbnN0IHdyYXBwZWQgPSBuZXcgRXJyb3IoYGRlZmVycmVkIGVycm9yIGR1cmluZyBBQkkgZGVjb2RpbmcgdHJpZ2dlcmVkIGFjY2Vzc2luZyAke25hbWV9YCk7XG4gICAgd3JhcHBlZC5lcnJvciA9IGVycm9yO1xuICAgIHRocm93IHdyYXBwZWQ7XG59XG4vKipcbiAqICBBIFtbUmVzdWx0XV0gaXMgYSBzdWItY2xhc3Mgb2YgQXJyYXksIHdoaWNoIGFsbG93cyBhY2Nlc3NpbmcgYW55XG4gKiAgb2YgaXRzIHZhbHVlcyBlaXRoZXIgcG9zaXRpb25hbGx5IGJ5IGl0cyBpbmRleCBvciwgaWYga2V5cyBhcmVcbiAqICBwcm92aWRlZCBieSBpdHMgbmFtZS5cbiAqXG4gKiAgQF9kb2Nsb2M6IGFwaS9hYmlcbiAqL1xuZXhwb3J0IGNsYXNzIFJlc3VsdCBleHRlbmRzIEFycmF5IHtcbiAgICAjbmFtZXM7XG4gICAgLyoqXG4gICAgICogIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgICAgICAvLyBUbyBwcm9wZXJseSBzdWItY2xhc3MgQXJyYXkgc28gdGhlIG90aGVyIGJ1aWx0LWluXG4gICAgICAgIC8vIGZ1bmN0aW9ucyB3b3JrLCB0aGUgY29uc3RydWN0b3IgaGFzIHRvIGJlaGF2ZSBmYWlybHlcbiAgICAgICAgLy8gd2VsbC4gU28sIGluIHRoZSBldmVudCB3ZSBhcmUgY3JlYXRlZCB2aWEgZnJvbUl0ZW1zKClcbiAgICAgICAgLy8gd2UgYnVpbGQgdGhlIHJlYWQtb25seSBSZXN1bHQgb2JqZWN0IHdlIHdhbnQsIGJ1dCBvblxuICAgICAgICAvLyBhbnkgb3RoZXIgaW5wdXQsIHdlIHVzZSB0aGUgZGVmYXVsdCBjb25zdHJ1Y3RvclxuICAgICAgICAvLyBjb25zdHJ1Y3RvcihndWFyZDogYW55LCBpdGVtczogQXJyYXk8YW55Piwga2V5cz86IEFycmF5PG51bGwgfCBzdHJpbmc+KTtcbiAgICAgICAgY29uc3QgZ3VhcmQgPSBhcmdzWzBdO1xuICAgICAgICBsZXQgaXRlbXMgPSBhcmdzWzFdO1xuICAgICAgICBsZXQgbmFtZXMgPSAoYXJnc1syXSB8fCBbXSkuc2xpY2UoKTtcbiAgICAgICAgbGV0IHdyYXAgPSB0cnVlO1xuICAgICAgICBpZiAoZ3VhcmQgIT09IF9ndWFyZCkge1xuICAgICAgICAgICAgaXRlbXMgPSBhcmdzO1xuICAgICAgICAgICAgbmFtZXMgPSBbXTtcbiAgICAgICAgICAgIHdyYXAgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYW4ndCBqdXN0IHBhc3MgaW4gLi4uaXRlbXMgc2luY2UgYW4gYXJyYXkgb2YgbGVuZ3RoIDFcbiAgICAgICAgLy8gaXMgYSBzcGVjaWFsIGNhc2UgaW4gdGhlIHN1cGVyLlxuICAgICAgICBzdXBlcihpdGVtcy5sZW5ndGgpO1xuICAgICAgICBpdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4geyB0aGlzW2luZGV4XSA9IGl0ZW07IH0pO1xuICAgICAgICAvLyBGaW5kIGFsbCB1bmlxdWUga2V5c1xuICAgICAgICBjb25zdCBuYW1lQ291bnRzID0gbmFtZXMucmVkdWNlKChhY2N1bSwgbmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAobmFtZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBhY2N1bS5zZXQobmFtZSwgKGFjY3VtLmdldChuYW1lKSB8fCAwKSArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgICAgICB9LCAobmV3IE1hcCgpKSk7XG4gICAgICAgIC8vIFJlbW92ZSBhbnkga2V5IHRoYXRzIG5vdCB1bmlxdWVcbiAgICAgICAgdGhpcy4jbmFtZXMgPSBPYmplY3QuZnJlZXplKGl0ZW1zLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBuYW1lc1tpbmRleF07XG4gICAgICAgICAgICBpZiAobmFtZSAhPSBudWxsICYmIG5hbWVDb3VudHMuZ2V0KG5hbWUpID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgICAgICBpZiAoIXdyYXApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBBIHdyYXBwZWQgUmVzdWx0IGlzIGltbXV0YWJsZVxuICAgICAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICAgICAgICAvLyBQcm94eSBpbmRpY2VzIGFuZCBuYW1lcyBzbyB3ZSBjYW4gdHJhcCBkZWZlcnJlZCBlcnJvcnNcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XG4gICAgICAgICAgICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAocHJvcCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW5kZXggYWNjZXNzb3JcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AubWF0Y2goL15bMC05XSskLykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gZ2V0TnVtYmVyKHByb3AsIFwiJWluZGV4XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwib3V0IG9mIHJlc3VsdCByYW5nZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0YXJnZXRbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IoYGluZGV4ICR7aW5kZXh9YCwgaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBQYXNzIGltcG9ydGFudCBjaGVja3MgKGxpa2UgYHRoZW5gIGZvciBQcm9taXNlKSB0aHJvdWdoXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXNzUHJvcGVydGllcy5pbmRleE9mKHByb3ApID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRhcmdldFtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBmdW5jdGlvbnMgd29yayB3aXRoIHByaXZhdGUgdmFyaWFibGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb3h5I25vX3ByaXZhdGVfcHJvcGVydHlfZm9yd2FyZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmFwcGx5KCh0aGlzID09PSByZWNlaXZlcikgPyB0YXJnZXQgOiB0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIShwcm9wIGluIHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBvc3NpYmxlIG5hbWUgYWNjZXNzb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuZ2V0VmFsdWUuYXBwbHkoKHRoaXMgPT09IHJlY2VpdmVyKSA/IHRhcmdldCA6IHRoaXMsIFtwcm9wXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIFJlc3VsdCBhcyBhIG5vcm1hbCBBcnJheS5cbiAgICAgKlxuICAgICAqICBUaGlzIHdpbGwgdGhyb3cgaWYgdGhlcmUgYXJlIGFueSBvdXRzdGFuZGluZyBkZWZlcnJlZFxuICAgICAqICBlcnJvcnMuXG4gICAgICovXG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIHRoaXMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKGBpbmRleCAke2luZGV4fWAsIGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0aGUgUmVzdWx0IGFzIGFuIE9iamVjdCB3aXRoIGVhY2ggbmFtZS12YWx1ZSBwYWlyLlxuICAgICAqXG4gICAgICogIFRoaXMgd2lsbCB0aHJvdyBpZiBhbnkgdmFsdWUgaXMgdW5uYW1lZCwgb3IgaWYgdGhlcmUgYXJlXG4gICAgICogIGFueSBvdXRzdGFuZGluZyBkZWZlcnJlZCBlcnJvcnMuXG4gICAgICovXG4gICAgdG9PYmplY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNuYW1lcy5yZWR1Y2UoKGFjY3VtLCBuYW1lLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0KG5hbWUgIT0gbnVsbCwgXCJ2YWx1ZSBhdCBpbmRleCAkeyBpbmRleCB9IHVubmFtZWRcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJ0b09iamVjdCgpXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gQWRkIHZhbHVlcyBmb3IgbmFtZXMgdGhhdCBkb24ndCBjb25mbGljdFxuICAgICAgICAgICAgaWYgKCEobmFtZSBpbiBhY2N1bSkpIHtcbiAgICAgICAgICAgICAgICBhY2N1bVtuYW1lXSA9IHRoaXMuZ2V0VmFsdWUobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEBfaWdub3JlXG4gICAgICovXG4gICAgc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgICAgICBpZiAoc3RhcnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgICAgIHN0YXJ0ICs9IHRoaXMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kID09IG51bGwpIHtcbiAgICAgICAgICAgIGVuZCA9IHRoaXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgICAgICBlbmQgKz0gdGhpcy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICAgICAgICAgIGVuZCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXSwgbmFtZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXNbaV0pO1xuICAgICAgICAgICAgbmFtZXMucHVzaCh0aGlzLiNuYW1lc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQoX2d1YXJkLCByZXN1bHQsIG5hbWVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEBfaWdub3JlXG4gICAgICovXG4gICAgZmlsdGVyKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdLCBuYW1lcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzW2ldO1xuICAgICAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93RXJyb3IoYGluZGV4ICR7aX1gLCBpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYWxsYmFjay5jYWxsKHRoaXNBcmcsIGl0ZW0sIGksIHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgbmFtZXMucHVzaCh0aGlzLiNuYW1lc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQoX2d1YXJkLCByZXN1bHQsIG5hbWVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEBfaWdub3JlXG4gICAgICovXG4gICAgbWFwKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzW2ldO1xuICAgICAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93RXJyb3IoYGluZGV4ICR7aX1gLCBpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgaXRlbSwgaSwgdGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoZSB2YWx1ZSBmb3IgJSVuYW1lJSUuXG4gICAgICpcbiAgICAgKiAgU2luY2UgaXQgaXMgcG9zc2libGUgdG8gaGF2ZSBhIGtleSB3aG9zZSBuYW1lIGNvbmZsaWN0cyB3aXRoXG4gICAgICogIGEgbWV0aG9kIG9uIGEgW1tSZXN1bHRdXSBvciBpdHMgc3VwZXJjbGFzcyBBcnJheSwgb3IgYW55XG4gICAgICogIEphdmFTY3JpcHQga2V5d29yZCwgdGhpcyBlbnN1cmVzIGFsbCBuYW1lZCB2YWx1ZXMgYXJlIHN0aWxsXG4gICAgICogIGFjY2Vzc2libGUgYnkgbmFtZS5cbiAgICAgKi9cbiAgICBnZXRWYWx1ZShuYW1lKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy4jbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihgcHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShuYW1lKX1gLCB2YWx1ZS5lcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyBbW1Jlc3VsdF1dIGZvciAlJWl0ZW1zJSUgd2l0aCBlYWNoIGVudHJ5XG4gICAgICogIGFsc28gYWNjZXNzaWJsZSBieSBpdHMgY29ycmVzcG9uZGluZyBuYW1lIGluICUla2V5cyUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tSXRlbXMoaXRlbXMsIGtleXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQoX2d1YXJkLCBpdGVtcywga2V5cyk7XG4gICAgfVxufVxuLyoqXG4gKiAgUmV0dXJucyBhbGwgZXJyb3JzIGZvdW5kIGluIGEgW1tSZXN1bHRdXS5cbiAqXG4gKiAgU2luY2UgY2VydGFpbiBlcnJvcnMgZW5jb3VudGVyZWQgd2hlbiBjcmVhdGluZyBhIFtbUmVzdWx0XV0gZG9cbiAqICBub3QgaW1wYWN0IHRoZSBhYmlsaXR5IHRvIGNvbnRpbnVlIHBhcnNpbmcgZGF0YSwgdGhleSBhcmVcbiAqICBkZWZlcnJlZCB1bnRpbCB0aGV5IGFyZSBhY3R1YWxseSBhY2Nlc3NlZC4gSGVuY2UgYSBmYXVsdHkgc3RyaW5nXG4gKiAgaW4gYW4gRXZlbnQgdGhhdCBpcyBuZXZlciB1c2VkIGRvZXMgbm90IGltcGFjdCB0aGUgcHJvZ3JhbSBmbG93LlxuICpcbiAqICBIb3dldmVyLCBzb21ldGltZXMgaXQgbWF5IGJlIHVzZWZ1bCB0byBhY2Nlc3MsIGlkZW50aWZ5IG9yXG4gKiAgdmFsaWRhdGUgY29ycmVjdG5lc3Mgb2YgYSBbW1Jlc3VsdF1dLlxuICpcbiAqICBAX2RvY2xvYyBhcGkvYWJpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1Jlc3VsdEVycm9ycyhyZXN1bHQpIHtcbiAgICAvLyBGaW5kIHRoZSBmaXJzdCBlcnJvciAoaWYgYW55KVxuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgIGNvbnN0IGNoZWNrRXJyb3JzID0gZnVuY3Rpb24gKHBhdGgsIG9iamVjdCkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkUGF0aCA9IHBhdGguc2xpY2UoKTtcbiAgICAgICAgICAgIGNoaWxkUGF0aC5wdXNoKGtleSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNoZWNrRXJyb3JzKGNoaWxkUGF0aCwgb2JqZWN0W2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goeyBwYXRoOiBjaGlsZFBhdGgsIGVycm9yOiBlcnJvciB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY2hlY2tFcnJvcnMoW10sIHJlc3VsdCk7XG4gICAgcmV0dXJuIGVycm9ycztcbn1cbmZ1bmN0aW9uIGdldFZhbHVlKHZhbHVlKSB7XG4gICAgbGV0IGJ5dGVzID0gdG9CZUFycmF5KHZhbHVlKTtcbiAgICBhc3NlcnQoYnl0ZXMubGVuZ3RoIDw9IFdvcmRTaXplLCBcInZhbHVlIG91dC1vZi1ib3VuZHNcIiwgXCJCVUZGRVJfT1ZFUlJVTlwiLCB7IGJ1ZmZlcjogYnl0ZXMsIGxlbmd0aDogV29yZFNpemUsIG9mZnNldDogYnl0ZXMubGVuZ3RoIH0pO1xuICAgIGlmIChieXRlcy5sZW5ndGggIT09IFdvcmRTaXplKSB7XG4gICAgICAgIGJ5dGVzID0gZ2V0Qnl0ZXNDb3B5KGNvbmNhdChbUGFkZGluZy5zbGljZShieXRlcy5sZW5ndGggJSBXb3JkU2l6ZSksIGJ5dGVzXSkpO1xuICAgIH1cbiAgICByZXR1cm4gYnl0ZXM7XG59XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5leHBvcnQgY2xhc3MgQ29kZXIge1xuICAgIC8vIFRoZSBjb2RlciBuYW1lOlxuICAgIC8vICAgLSBhZGRyZXNzLCB1aW50MjU2LCB0dXBsZSwgYXJyYXksIGV0Yy5cbiAgICBuYW1lO1xuICAgIC8vIFRoZSBmdWxseSBleHBhbmRlZCB0eXBlLCBpbmNsdWRpbmcgY29tcG9zaXRlIHR5cGVzOlxuICAgIC8vICAgLSBhZGRyZXNzLCB1aW50MjU2LCB0dXBsZShhZGRyZXNzLGJ5dGVzKSwgdWludDI1NlszXVs0XVtdLCAgZXRjLlxuICAgIHR5cGU7XG4gICAgLy8gVGhlIGxvY2FsTmFtZSBib3VuZCBpbiB0aGUgc2lnbmF0dXJlLCBpbiB0aGlzIGV4YW1wbGUgaXQgaXMgXCJiYXpcIjpcbiAgICAvLyAgIC0gdHVwbGUoYWRkcmVzcyBmb28sIHVpbnQgYmFyKSBiYXpcbiAgICBsb2NhbE5hbWU7XG4gICAgLy8gV2hldGhlciB0aGlzIHR5cGUgaXMgZHluYW1pYzpcbiAgICAvLyAgLSBEeW5hbWljOiBieXRlcywgc3RyaW5nLCBhZGRyZXNzW10sIHR1cGxlKGJvb2xlYW5bXSksIGV0Yy5cbiAgICAvLyAgLSBOb3QgRHluYW1pYzogYWRkcmVzcywgdWludDI1NiwgYm9vbGVhblszXSwgdHVwbGUoYWRkcmVzcywgdWludDgpXG4gICAgZHluYW1pYztcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCB0eXBlLCBsb2NhbE5hbWUsIGR5bmFtaWMpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IG5hbWUsIHR5cGUsIGxvY2FsTmFtZSwgZHluYW1pYyB9LCB7XG4gICAgICAgICAgICBuYW1lOiBcInN0cmluZ1wiLCB0eXBlOiBcInN0cmluZ1wiLCBsb2NhbE5hbWU6IFwic3RyaW5nXCIsIGR5bmFtaWM6IFwiYm9vbGVhblwiXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfdGhyb3dFcnJvcihtZXNzYWdlLCB2YWx1ZSkge1xuICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgbWVzc2FnZSwgdGhpcy5sb2NhbE5hbWUsIHZhbHVlKTtcbiAgICB9XG59XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5leHBvcnQgY2xhc3MgV3JpdGVyIHtcbiAgICAvLyBBbiBhcnJheSBvZiBXb3JkU2l6ZSBsZW5ndGhlZCBvYmplY3RzIHRvIGNvbmNhdGVuYXRpb25cbiAgICAjZGF0YTtcbiAgICAjZGF0YUxlbmd0aDtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy4jZGF0YSA9IFtdO1xuICAgICAgICB0aGlzLiNkYXRhTGVuZ3RoID0gMDtcbiAgICB9XG4gICAgZ2V0IGRhdGEoKSB7XG4gICAgICAgIHJldHVybiBjb25jYXQodGhpcy4jZGF0YSk7XG4gICAgfVxuICAgIGdldCBsZW5ndGgoKSB7IHJldHVybiB0aGlzLiNkYXRhTGVuZ3RoOyB9XG4gICAgI3dyaXRlRGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuI2RhdGEucHVzaChkYXRhKTtcbiAgICAgICAgdGhpcy4jZGF0YUxlbmd0aCArPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGRhdGEubGVuZ3RoO1xuICAgIH1cbiAgICBhcHBlbmRXcml0ZXIod3JpdGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiN3cml0ZURhdGEoZ2V0Qnl0ZXNDb3B5KHdyaXRlci5kYXRhKSk7XG4gICAgfVxuICAgIC8vIEFycmF5aXNoIGl0ZW07IHBhZCBvbiB0aGUgcmlnaHQgdG8gKm5lYXJlc3QqIFdvcmRTaXplXG4gICAgd3JpdGVCeXRlcyh2YWx1ZSkge1xuICAgICAgICBsZXQgYnl0ZXMgPSBnZXRCeXRlc0NvcHkodmFsdWUpO1xuICAgICAgICBjb25zdCBwYWRkaW5nT2Zmc2V0ID0gYnl0ZXMubGVuZ3RoICUgV29yZFNpemU7XG4gICAgICAgIGlmIChwYWRkaW5nT2Zmc2V0KSB7XG4gICAgICAgICAgICBieXRlcyA9IGdldEJ5dGVzQ29weShjb25jYXQoW2J5dGVzLCBQYWRkaW5nLnNsaWNlKHBhZGRpbmdPZmZzZXQpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLiN3cml0ZURhdGEoYnl0ZXMpO1xuICAgIH1cbiAgICAvLyBOdW1lcmljIGl0ZW07IHBhZCBvbiB0aGUgbGVmdCAqdG8qIFdvcmRTaXplXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy4jd3JpdGVEYXRhKGdldFZhbHVlKHZhbHVlKSk7XG4gICAgfVxuICAgIC8vIEluc2VydHMgYSBudW1lcmljIHBsYWNlLWhvbGRlciwgcmV0dXJuaW5nIGEgY2FsbGJhY2sgdGhhdCBjYW5cbiAgICAvLyBiZSB1c2VkIHRvIGFzanVzdCB0aGUgdmFsdWUgbGF0ZXJcbiAgICB3cml0ZVVwZGF0YWJsZVZhbHVlKCkge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLiNkYXRhLmxlbmd0aDtcbiAgICAgICAgdGhpcy4jZGF0YS5wdXNoKFBhZGRpbmcpO1xuICAgICAgICB0aGlzLiNkYXRhTGVuZ3RoICs9IFdvcmRTaXplO1xuICAgICAgICByZXR1cm4gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNkYXRhW29mZnNldF0gPSBnZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgfVxufVxuLyoqXG4gKiAgQF9pZ25vcmVcbiAqL1xuZXhwb3J0IGNsYXNzIFJlYWRlciB7XG4gICAgLy8gQWxsb3dzIGluY29tcGxldGUgdW5wYWRkZWQgZGF0YSB0byBiZSByZWFkOyBvdGhlcndpc2UgYW4gZXJyb3JcbiAgICAvLyBpcyByYWlzZWQgaWYgYXR0ZW1wdGluZyB0byBvdmVycnVuIHRoZSBidWZmZXIuIFRoaXMgaXMgcmVxdWlyZWRcbiAgICAvLyB0byBkZWFsIHdpdGggYW4gb2xkIFNvbGlkaXR5IGJ1ZywgaW4gd2hpY2ggZXZlbnQgZGF0YSBmb3JcbiAgICAvLyBleHRlcm5hbCAobm90IHB1YmxpYyB0aG9ndWgpIHdhcyB0aWdodGx5IHBhY2tlZC5cbiAgICBhbGxvd0xvb3NlO1xuICAgICNkYXRhO1xuICAgICNvZmZzZXQ7XG4gICAgI2J5dGVzUmVhZDtcbiAgICAjcGFyZW50O1xuICAgICNtYXhJbmZsYXRpb247XG4gICAgY29uc3RydWN0b3IoZGF0YSwgYWxsb3dMb29zZSwgbWF4SW5mbGF0aW9uKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBhbGxvd0xvb3NlOiAhIWFsbG93TG9vc2UgfSk7XG4gICAgICAgIHRoaXMuI2RhdGEgPSBnZXRCeXRlc0NvcHkoZGF0YSk7XG4gICAgICAgIHRoaXMuI2J5dGVzUmVhZCA9IDA7XG4gICAgICAgIHRoaXMuI3BhcmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuI21heEluZmxhdGlvbiA9IChtYXhJbmZsYXRpb24gIT0gbnVsbCkgPyBtYXhJbmZsYXRpb24gOiAxMDI0O1xuICAgICAgICB0aGlzLiNvZmZzZXQgPSAwO1xuICAgIH1cbiAgICBnZXQgZGF0YSgpIHsgcmV0dXJuIGhleGxpZnkodGhpcy4jZGF0YSk7IH1cbiAgICBnZXQgZGF0YUxlbmd0aCgpIHsgcmV0dXJuIHRoaXMuI2RhdGEubGVuZ3RoOyB9XG4gICAgZ2V0IGNvbnN1bWVkKCkgeyByZXR1cm4gdGhpcy4jb2Zmc2V0OyB9XG4gICAgZ2V0IGJ5dGVzKCkgeyByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodGhpcy4jZGF0YSk7IH1cbiAgICAjaW5jcmVtZW50Qnl0ZXNSZWFkKGNvdW50KSB7XG4gICAgICAgIGlmICh0aGlzLiNwYXJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiNwYXJlbnQuI2luY3JlbWVudEJ5dGVzUmVhZChjb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jYnl0ZXNSZWFkICs9IGNvdW50O1xuICAgICAgICAvLyBDaGVjayBmb3IgZXhjZXNzaXZlIGluZmxhdGlvbiAoc2VlOiAjNDUzNylcbiAgICAgICAgYXNzZXJ0KHRoaXMuI21heEluZmxhdGlvbiA8IDEgfHwgdGhpcy4jYnl0ZXNSZWFkIDw9IHRoaXMuI21heEluZmxhdGlvbiAqIHRoaXMuZGF0YUxlbmd0aCwgYGNvbXByZXNzZWQgQUJJIGRhdGEgZXhjZWVkcyBpbmZsYXRpb24gcmF0aW8gb2YgJHt0aGlzLiNtYXhJbmZsYXRpb259ICggc2VlOiBodHRwczovXFwvZ2l0aHViLmNvbS9ldGhlcnMtaW8vZXRoZXJzLmpzL2lzc3Vlcy80NTM3IClgLCBcIkJVRkZFUl9PVkVSUlVOXCIsIHtcbiAgICAgICAgICAgIGJ1ZmZlcjogZ2V0Qnl0ZXNDb3B5KHRoaXMuI2RhdGEpLCBvZmZzZXQ6IHRoaXMuI29mZnNldCxcbiAgICAgICAgICAgIGxlbmd0aDogY291bnQsIGluZm86IHtcbiAgICAgICAgICAgICAgICBieXRlc1JlYWQ6IHRoaXMuI2J5dGVzUmVhZCxcbiAgICAgICAgICAgICAgICBkYXRhTGVuZ3RoOiB0aGlzLmRhdGFMZW5ndGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgICNwZWVrQnl0ZXMob2Zmc2V0LCBsZW5ndGgsIGxvb3NlKSB7XG4gICAgICAgIGxldCBhbGlnbmVkTGVuZ3RoID0gTWF0aC5jZWlsKGxlbmd0aCAvIFdvcmRTaXplKSAqIFdvcmRTaXplO1xuICAgICAgICBpZiAodGhpcy4jb2Zmc2V0ICsgYWxpZ25lZExlbmd0aCA+IHRoaXMuI2RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hbGxvd0xvb3NlICYmIGxvb3NlICYmIHRoaXMuI29mZnNldCArIGxlbmd0aCA8PSB0aGlzLiNkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFsaWduZWRMZW5ndGggPSBsZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZmFsc2UsIFwiZGF0YSBvdXQtb2YtYm91bmRzXCIsIFwiQlVGRkVSX09WRVJSVU5cIiwge1xuICAgICAgICAgICAgICAgICAgICBidWZmZXI6IGdldEJ5dGVzQ29weSh0aGlzLiNkYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiB0aGlzLiNkYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLiNvZmZzZXQgKyBhbGlnbmVkTGVuZ3RoXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuI2RhdGEuc2xpY2UodGhpcy4jb2Zmc2V0LCB0aGlzLiNvZmZzZXQgKyBhbGlnbmVkTGVuZ3RoKTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIGEgc3ViLXJlYWRlciB3aXRoIHRoZSBzYW1lIHVuZGVybHlpbmcgZGF0YSwgYnV0IG9mZnNldFxuICAgIHN1YlJlYWRlcihvZmZzZXQpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IFJlYWRlcih0aGlzLiNkYXRhLnNsaWNlKHRoaXMuI29mZnNldCArIG9mZnNldCksIHRoaXMuYWxsb3dMb29zZSwgdGhpcy4jbWF4SW5mbGF0aW9uKTtcbiAgICAgICAgcmVhZGVyLiNwYXJlbnQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gcmVhZGVyO1xuICAgIH1cbiAgICAvLyBSZWFkIGJ5dGVzXG4gICAgcmVhZEJ5dGVzKGxlbmd0aCwgbG9vc2UpIHtcbiAgICAgICAgbGV0IGJ5dGVzID0gdGhpcy4jcGVla0J5dGVzKDAsIGxlbmd0aCwgISFsb29zZSk7XG4gICAgICAgIHRoaXMuI2luY3JlbWVudEJ5dGVzUmVhZChsZW5ndGgpO1xuICAgICAgICB0aGlzLiNvZmZzZXQgKz0gYnl0ZXMubGVuZ3RoO1xuICAgICAgICAvLyBAVE9ETzogTWFrZSBzdXJlIHRoZSBsZW5ndGguLmVuZCBieXRlcyBhcmUgYWxsIDA/XG4gICAgICAgIHJldHVybiBieXRlcy5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cbiAgICAvLyBSZWFkIGEgbnVtZXJpYyB2YWx1ZXNcbiAgICByZWFkVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0b0JpZ0ludCh0aGlzLnJlYWRCeXRlcyhXb3JkU2l6ZSkpO1xuICAgIH1cbiAgICByZWFkSW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0b051bWJlcih0aGlzLnJlYWRCeXRlcyhXb3JkU2l6ZSkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFic3RyYWN0LWNvZGVyLmpzLm1hcCIsImZ1bmN0aW9uIG51bWJlcihuKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihuKSB8fCBuIDwgMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXcm9uZyBwb3NpdGl2ZSBpbnRlZ2VyOiAke259YCk7XG59XG5mdW5jdGlvbiBib29sKGIpIHtcbiAgICBpZiAodHlwZW9mIGIgIT09ICdib29sZWFuJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBib29sZWFuLCBub3QgJHtifWApO1xufVxuZnVuY3Rpb24gYnl0ZXMoYiwgLi4ubGVuZ3Rocykge1xuICAgIGlmICghKGIgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBVaW50OEFycmF5Jyk7XG4gICAgaWYgKGxlbmd0aHMubGVuZ3RoID4gMCAmJiAhbGVuZ3Rocy5pbmNsdWRlcyhiLmxlbmd0aCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgVWludDhBcnJheSBvZiBsZW5ndGggJHtsZW5ndGhzfSwgbm90IG9mIGxlbmd0aD0ke2IubGVuZ3RofWApO1xufVxuZnVuY3Rpb24gaGFzaChoYXNoKSB7XG4gICAgaWYgKHR5cGVvZiBoYXNoICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBoYXNoLmNyZWF0ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIHNob3VsZCBiZSB3cmFwcGVkIGJ5IHV0aWxzLndyYXBDb25zdHJ1Y3RvcicpO1xuICAgIG51bWJlcihoYXNoLm91dHB1dExlbik7XG4gICAgbnVtYmVyKGhhc2guYmxvY2tMZW4pO1xufVxuZnVuY3Rpb24gZXhpc3RzKGluc3RhbmNlLCBjaGVja0ZpbmlzaGVkID0gdHJ1ZSkge1xuICAgIGlmIChpbnN0YW5jZS5kZXN0cm95ZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBpbnN0YW5jZSBoYXMgYmVlbiBkZXN0cm95ZWQnKTtcbiAgICBpZiAoY2hlY2tGaW5pc2hlZCAmJiBpbnN0YW5jZS5maW5pc2hlZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoI2RpZ2VzdCgpIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkJyk7XG59XG5mdW5jdGlvbiBvdXRwdXQob3V0LCBpbnN0YW5jZSkge1xuICAgIGJ5dGVzKG91dCk7XG4gICAgY29uc3QgbWluID0gaW5zdGFuY2Uub3V0cHV0TGVuO1xuICAgIGlmIChvdXQubGVuZ3RoIDwgbWluKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlnZXN0SW50bygpIGV4cGVjdHMgb3V0cHV0IGJ1ZmZlciBvZiBsZW5ndGggYXQgbGVhc3QgJHttaW59YCk7XG4gICAgfVxufVxuZXhwb3J0IHsgbnVtYmVyLCBib29sLCBieXRlcywgaGFzaCwgZXhpc3RzLCBvdXRwdXQgfTtcbmNvbnN0IGFzc2VydCA9IHsgbnVtYmVyLCBib29sLCBieXRlcywgaGFzaCwgZXhpc3RzLCBvdXRwdXQgfTtcbmV4cG9ydCBkZWZhdWx0IGFzc2VydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9hc3NlcnQuanMubWFwIiwiY29uc3QgVTMyX01BU0s2NCA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMiAqKiAzMiAtIDEpO1xuY29uc3QgXzMybiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMzIpO1xuLy8gV2UgYXJlIG5vdCB1c2luZyBCaWdVaW50NjRBcnJheSwgYmVjYXVzZSB0aGV5IGFyZSBleHRyZW1lbHkgc2xvdyBhcyBwZXIgMjAyMlxuZnVuY3Rpb24gZnJvbUJpZyhuLCBsZSA9IGZhbHNlKSB7XG4gICAgaWYgKGxlKVxuICAgICAgICByZXR1cm4geyBoOiBOdW1iZXIobiAmIFUzMl9NQVNLNjQpLCBsOiBOdW1iZXIoKG4gPj4gXzMybikgJiBVMzJfTUFTSzY0KSB9O1xuICAgIHJldHVybiB7IGg6IE51bWJlcigobiA+PiBfMzJuKSAmIFUzMl9NQVNLNjQpIHwgMCwgbDogTnVtYmVyKG4gJiBVMzJfTUFTSzY0KSB8IDAgfTtcbn1cbmZ1bmN0aW9uIHNwbGl0KGxzdCwgbGUgPSBmYWxzZSkge1xuICAgIGxldCBBaCA9IG5ldyBVaW50MzJBcnJheShsc3QubGVuZ3RoKTtcbiAgICBsZXQgQWwgPSBuZXcgVWludDMyQXJyYXkobHN0Lmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgeyBoLCBsIH0gPSBmcm9tQmlnKGxzdFtpXSwgbGUpO1xuICAgICAgICBbQWhbaV0sIEFsW2ldXSA9IFtoLCBsXTtcbiAgICB9XG4gICAgcmV0dXJuIFtBaCwgQWxdO1xufVxuY29uc3QgdG9CaWcgPSAoaCwgbCkgPT4gKEJpZ0ludChoID4+PiAwKSA8PCBfMzJuKSB8IEJpZ0ludChsID4+PiAwKTtcbi8vIGZvciBTaGlmdCBpbiBbMCwgMzIpXG5jb25zdCBzaHJTSCA9IChoLCBfbCwgcykgPT4gaCA+Pj4gcztcbmNvbnN0IHNoclNMID0gKGgsIGwsIHMpID0+IChoIDw8ICgzMiAtIHMpKSB8IChsID4+PiBzKTtcbi8vIFJpZ2h0IHJvdGF0ZSBmb3IgU2hpZnQgaW4gWzEsIDMyKVxuY29uc3Qgcm90clNIID0gKGgsIGwsIHMpID0+IChoID4+PiBzKSB8IChsIDw8ICgzMiAtIHMpKTtcbmNvbnN0IHJvdHJTTCA9IChoLCBsLCBzKSA9PiAoaCA8PCAoMzIgLSBzKSkgfCAobCA+Pj4gcyk7XG4vLyBSaWdodCByb3RhdGUgZm9yIFNoaWZ0IGluICgzMiwgNjQpLCBOT1RFOiAzMiBpcyBzcGVjaWFsIGNhc2UuXG5jb25zdCByb3RyQkggPSAoaCwgbCwgcykgPT4gKGggPDwgKDY0IC0gcykpIHwgKGwgPj4+IChzIC0gMzIpKTtcbmNvbnN0IHJvdHJCTCA9IChoLCBsLCBzKSA9PiAoaCA+Pj4gKHMgLSAzMikpIHwgKGwgPDwgKDY0IC0gcykpO1xuLy8gUmlnaHQgcm90YXRlIGZvciBzaGlmdD09PTMyIChqdXN0IHN3YXBzIGwmaClcbmNvbnN0IHJvdHIzMkggPSAoX2gsIGwpID0+IGw7XG5jb25zdCByb3RyMzJMID0gKGgsIF9sKSA9PiBoO1xuLy8gTGVmdCByb3RhdGUgZm9yIFNoaWZ0IGluIFsxLCAzMilcbmNvbnN0IHJvdGxTSCA9IChoLCBsLCBzKSA9PiAoaCA8PCBzKSB8IChsID4+PiAoMzIgLSBzKSk7XG5jb25zdCByb3RsU0wgPSAoaCwgbCwgcykgPT4gKGwgPDwgcykgfCAoaCA+Pj4gKDMyIC0gcykpO1xuLy8gTGVmdCByb3RhdGUgZm9yIFNoaWZ0IGluICgzMiwgNjQpLCBOT1RFOiAzMiBpcyBzcGVjaWFsIGNhc2UuXG5jb25zdCByb3RsQkggPSAoaCwgbCwgcykgPT4gKGwgPDwgKHMgLSAzMikpIHwgKGggPj4+ICg2NCAtIHMpKTtcbmNvbnN0IHJvdGxCTCA9IChoLCBsLCBzKSA9PiAoaCA8PCAocyAtIDMyKSkgfCAobCA+Pj4gKDY0IC0gcykpO1xuLy8gSlMgdXNlcyAzMi1iaXQgc2lnbmVkIGludGVnZXJzIGZvciBiaXR3aXNlIG9wZXJhdGlvbnMgd2hpY2ggbWVhbnMgd2UgY2Fubm90XG4vLyBzaW1wbGUgdGFrZSBjYXJyeSBvdXQgb2YgbG93IGJpdCBzdW0gYnkgc2hpZnQsIHdlIG5lZWQgdG8gdXNlIGRpdmlzaW9uLlxuZnVuY3Rpb24gYWRkKEFoLCBBbCwgQmgsIEJsKSB7XG4gICAgY29uc3QgbCA9IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApO1xuICAgIHJldHVybiB7IGg6IChBaCArIEJoICsgKChsIC8gMiAqKiAzMikgfCAwKSkgfCAwLCBsOiBsIHwgMCB9O1xufVxuLy8gQWRkaXRpb24gd2l0aCBtb3JlIHRoYW4gMiBlbGVtZW50c1xuY29uc3QgYWRkM0wgPSAoQWwsIEJsLCBDbCkgPT4gKEFsID4+PiAwKSArIChCbCA+Pj4gMCkgKyAoQ2wgPj4+IDApO1xuY29uc3QgYWRkM0ggPSAobG93LCBBaCwgQmgsIENoKSA9PiAoQWggKyBCaCArIENoICsgKChsb3cgLyAyICoqIDMyKSB8IDApKSB8IDA7XG5jb25zdCBhZGQ0TCA9IChBbCwgQmwsIENsLCBEbCkgPT4gKEFsID4+PiAwKSArIChCbCA+Pj4gMCkgKyAoQ2wgPj4+IDApICsgKERsID4+PiAwKTtcbmNvbnN0IGFkZDRIID0gKGxvdywgQWgsIEJoLCBDaCwgRGgpID0+IChBaCArIEJoICsgQ2ggKyBEaCArICgobG93IC8gMiAqKiAzMikgfCAwKSkgfCAwO1xuY29uc3QgYWRkNUwgPSAoQWwsIEJsLCBDbCwgRGwsIEVsKSA9PiAoQWwgPj4+IDApICsgKEJsID4+PiAwKSArIChDbCA+Pj4gMCkgKyAoRGwgPj4+IDApICsgKEVsID4+PiAwKTtcbmNvbnN0IGFkZDVIID0gKGxvdywgQWgsIEJoLCBDaCwgRGgsIEVoKSA9PiAoQWggKyBCaCArIENoICsgRGggKyBFaCArICgobG93IC8gMiAqKiAzMikgfCAwKSkgfCAwO1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgeyBmcm9tQmlnLCBzcGxpdCwgdG9CaWcsIHNoclNILCBzaHJTTCwgcm90clNILCByb3RyU0wsIHJvdHJCSCwgcm90ckJMLCByb3RyMzJILCByb3RyMzJMLCByb3RsU0gsIHJvdGxTTCwgcm90bEJILCByb3RsQkwsIGFkZCwgYWRkM0wsIGFkZDNILCBhZGQ0TCwgYWRkNEgsIGFkZDVILCBhZGQ1TCwgfTtcbi8vIHByZXR0aWVyLWlnbm9yZVxuY29uc3QgdTY0ID0ge1xuICAgIGZyb21CaWcsIHNwbGl0LCB0b0JpZyxcbiAgICBzaHJTSCwgc2hyU0wsXG4gICAgcm90clNILCByb3RyU0wsIHJvdHJCSCwgcm90ckJMLFxuICAgIHJvdHIzMkgsIHJvdHIzMkwsXG4gICAgcm90bFNILCByb3RsU0wsIHJvdGxCSCwgcm90bEJMLFxuICAgIGFkZCwgYWRkM0wsIGFkZDNILCBhZGQ0TCwgYWRkNEgsIGFkZDVILCBhZGQ1TCxcbn07XG5leHBvcnQgZGVmYXVsdCB1NjQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdTY0LmpzLm1hcCIsImV4cG9ydCBjb25zdCBjcnlwdG8gPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcgJiYgJ2NyeXB0bycgaW4gZ2xvYmFsVGhpcyA/IGdsb2JhbFRoaXMuY3J5cHRvIDogdW5kZWZpbmVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3J5cHRvLmpzLm1hcCIsIi8qISBub2JsZS1oYXNoZXMgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbi8vIFdlIHVzZSBXZWJDcnlwdG8gYWthIGdsb2JhbFRoaXMuY3J5cHRvLCB3aGljaCBleGlzdHMgaW4gYnJvd3NlcnMgYW5kIG5vZGUuanMgMTYrLlxuLy8gbm9kZS5qcyB2ZXJzaW9ucyBlYXJsaWVyIHRoYW4gdjE5IGRvbid0IGRlY2xhcmUgaXQgaW4gZ2xvYmFsIHNjb3BlLlxuLy8gRm9yIG5vZGUuanMsIHBhY2thZ2UuanNvbiNleHBvcnRzIGZpZWxkIG1hcHBpbmcgcmV3cml0ZXMgaW1wb3J0XG4vLyBmcm9tIGBjcnlwdG9gIHRvIGBjcnlwdG9Ob2RlYCwgd2hpY2ggaW1wb3J0cyBuYXRpdmUgbW9kdWxlLlxuLy8gTWFrZXMgdGhlIHV0aWxzIHVuLWltcG9ydGFibGUgaW4gYnJvd3NlcnMgd2l0aG91dCBhIGJ1bmRsZXIuXG4vLyBPbmNlIG5vZGUuanMgMTggaXMgZGVwcmVjYXRlZCwgd2UgY2FuIGp1c3QgZHJvcCB0aGUgaW1wb3J0LlxuaW1wb3J0IHsgY3J5cHRvIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9jcnlwdG8nO1xuY29uc3QgdThhID0gKGEpID0+IGEgaW5zdGFuY2VvZiBVaW50OEFycmF5O1xuLy8gQ2FzdCBhcnJheSB0byBkaWZmZXJlbnQgdHlwZVxuZXhwb3J0IGNvbnN0IHU4ID0gKGFycikgPT4gbmV3IFVpbnQ4QXJyYXkoYXJyLmJ1ZmZlciwgYXJyLmJ5dGVPZmZzZXQsIGFyci5ieXRlTGVuZ3RoKTtcbmV4cG9ydCBjb25zdCB1MzIgPSAoYXJyKSA9PiBuZXcgVWludDMyQXJyYXkoYXJyLmJ1ZmZlciwgYXJyLmJ5dGVPZmZzZXQsIE1hdGguZmxvb3IoYXJyLmJ5dGVMZW5ndGggLyA0KSk7XG4vLyBDYXN0IGFycmF5IHRvIHZpZXdcbmV4cG9ydCBjb25zdCBjcmVhdGVWaWV3ID0gKGFycikgPT4gbmV3IERhdGFWaWV3KGFyci5idWZmZXIsIGFyci5ieXRlT2Zmc2V0LCBhcnIuYnl0ZUxlbmd0aCk7XG4vLyBUaGUgcm90YXRlIHJpZ2h0IChjaXJjdWxhciByaWdodCBzaGlmdCkgb3BlcmF0aW9uIGZvciB1aW50MzJcbmV4cG9ydCBjb25zdCByb3RyID0gKHdvcmQsIHNoaWZ0KSA9PiAod29yZCA8PCAoMzIgLSBzaGlmdCkpIHwgKHdvcmQgPj4+IHNoaWZ0KTtcbi8vIGJpZy1lbmRpYW4gaGFyZHdhcmUgaXMgcmFyZS4gSnVzdCBpbiBjYXNlIHNvbWVvbmUgc3RpbGwgZGVjaWRlcyB0byBydW4gaGFzaGVzOlxuLy8gZWFybHktdGhyb3cgYW4gZXJyb3IgYmVjYXVzZSB3ZSBkb24ndCBzdXBwb3J0IEJFIHlldC5cbmV4cG9ydCBjb25zdCBpc0xFID0gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQzMkFycmF5KFsweDExMjIzMzQ0XSkuYnVmZmVyKVswXSA9PT0gMHg0NDtcbmlmICghaXNMRSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbiBsaXR0bGUtZW5kaWFuIGhhcmR3YXJlIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbmNvbnN0IGhleGVzID0gLyogQF9fUFVSRV9fICovIEFycmF5LmZyb20oeyBsZW5ndGg6IDI1NiB9LCAoXywgaSkgPT4gaS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSk7XG4vKipcbiAqIEBleGFtcGxlIGJ5dGVzVG9IZXgoVWludDhBcnJheS5mcm9tKFsweGNhLCAweGZlLCAweDAxLCAweDIzXSkpIC8vICdjYWZlMDEyMydcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVzVG9IZXgoYnl0ZXMpIHtcbiAgICBpZiAoIXU4YShieXRlcykpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVWludDhBcnJheSBleHBlY3RlZCcpO1xuICAgIC8vIHByZS1jYWNoaW5nIGltcHJvdmVzIHRoZSBzcGVlZCA2eFxuICAgIGxldCBoZXggPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGhleCArPSBoZXhlc1tieXRlc1tpXV07XG4gICAgfVxuICAgIHJldHVybiBoZXg7XG59XG4vKipcbiAqIEBleGFtcGxlIGhleFRvQnl0ZXMoJ2NhZmUwMTIzJykgLy8gVWludDhBcnJheS5mcm9tKFsweGNhLCAweGZlLCAweDAxLCAweDIzXSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhleFRvQnl0ZXMoaGV4KSB7XG4gICAgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hleCBzdHJpbmcgZXhwZWN0ZWQsIGdvdCAnICsgdHlwZW9mIGhleCk7XG4gICAgY29uc3QgbGVuID0gaGV4Lmxlbmd0aDtcbiAgICBpZiAobGVuICUgMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwYWRkZWQgaGV4IHN0cmluZyBleHBlY3RlZCwgZ290IHVucGFkZGVkIGhleCBvZiBsZW5ndGggJyArIGxlbik7XG4gICAgY29uc3QgYXJyYXkgPSBuZXcgVWludDhBcnJheShsZW4gLyAyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGogPSBpICogMjtcbiAgICAgICAgY29uc3QgaGV4Qnl0ZSA9IGhleC5zbGljZShqLCBqICsgMik7XG4gICAgICAgIGNvbnN0IGJ5dGUgPSBOdW1iZXIucGFyc2VJbnQoaGV4Qnl0ZSwgMTYpO1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGJ5dGUpIHx8IGJ5dGUgPCAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJ5dGUgc2VxdWVuY2UnKTtcbiAgICAgICAgYXJyYXlbaV0gPSBieXRlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG4vLyBUaGVyZSBpcyBubyBzZXRJbW1lZGlhdGUgaW4gYnJvd3NlciBhbmQgc2V0VGltZW91dCBpcyBzbG93LlxuLy8gY2FsbCBvZiBhc3luYyBmbiB3aWxsIHJldHVybiBQcm9taXNlLCB3aGljaCB3aWxsIGJlIGZ1bGxmaWxlZCBvbmx5IG9uXG4vLyBuZXh0IHNjaGVkdWxlciBxdWV1ZSBwcm9jZXNzaW5nIHN0ZXAgYW5kIHRoaXMgaXMgZXhhY3RseSB3aGF0IHdlIG5lZWQuXG5leHBvcnQgY29uc3QgbmV4dFRpY2sgPSBhc3luYyAoKSA9PiB7IH07XG4vLyBSZXR1cm5zIGNvbnRyb2wgdG8gdGhyZWFkIGVhY2ggJ3RpY2snIG1zIHRvIGF2b2lkIGJsb2NraW5nXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXN5bmNMb29wKGl0ZXJzLCB0aWNrLCBjYikge1xuICAgIGxldCB0cyA9IERhdGUubm93KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyczsgaSsrKSB7XG4gICAgICAgIGNiKGkpO1xuICAgICAgICAvLyBEYXRlLm5vdygpIGlzIG5vdCBtb25vdG9uaWMsIHNvIGluIGNhc2UgaWYgY2xvY2sgZ29lcyBiYWNrd2FyZHMgd2UgcmV0dXJuIHJldHVybiBjb250cm9sIHRvb1xuICAgICAgICBjb25zdCBkaWZmID0gRGF0ZS5ub3coKSAtIHRzO1xuICAgICAgICBpZiAoZGlmZiA+PSAwICYmIGRpZmYgPCB0aWNrKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgICAgIHRzICs9IGRpZmY7XG4gICAgfVxufVxuLyoqXG4gKiBAZXhhbXBsZSB1dGY4VG9CeXRlcygnYWJjJykgLy8gbmV3IFVpbnQ4QXJyYXkoWzk3LCA5OCwgOTldKVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXRmOFRvQnl0ZXMoc3RyKSB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHV0ZjhUb0J5dGVzIGV4cGVjdGVkIHN0cmluZywgZ290ICR7dHlwZW9mIHN0cn1gKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cikpOyAvLyBodHRwczovL2J1Z3ppbC5sYS8xNjgxODA5XG59XG4vKipcbiAqIE5vcm1hbGl6ZXMgKG5vbi1oZXgpIHN0cmluZyBvciBVaW50OEFycmF5IHRvIFVpbnQ4QXJyYXkuXG4gKiBXYXJuaW5nOiB3aGVuIFVpbnQ4QXJyYXkgaXMgcGFzc2VkLCBpdCB3b3VsZCBOT1QgZ2V0IGNvcGllZC5cbiAqIEtlZXAgaW4gbWluZCBmb3IgZnV0dXJlIG11dGFibGUgb3BlcmF0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQnl0ZXMoZGF0YSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpXG4gICAgICAgIGRhdGEgPSB1dGY4VG9CeXRlcyhkYXRhKTtcbiAgICBpZiAoIXU4YShkYXRhKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBleHBlY3RlZCBVaW50OEFycmF5LCBnb3QgJHt0eXBlb2YgZGF0YX1gKTtcbiAgICByZXR1cm4gZGF0YTtcbn1cbi8qKlxuICogQ29waWVzIHNldmVyYWwgVWludDhBcnJheXMgaW50byBvbmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRCeXRlcyguLi5hcnJheXMpIHtcbiAgICBjb25zdCByID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlzLnJlZHVjZSgoc3VtLCBhKSA9PiBzdW0gKyBhLmxlbmd0aCwgMCkpO1xuICAgIGxldCBwYWQgPSAwOyAvLyB3YWxrIHRocm91Z2ggZWFjaCBpdGVtLCBlbnN1cmUgdGhleSBoYXZlIHByb3BlciB0eXBlXG4gICAgYXJyYXlzLmZvckVhY2goKGEpID0+IHtcbiAgICAgICAgaWYgKCF1OGEoYSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VpbnQ4QXJyYXkgZXhwZWN0ZWQnKTtcbiAgICAgICAgci5zZXQoYSwgcGFkKTtcbiAgICAgICAgcGFkICs9IGEubGVuZ3RoO1xuICAgIH0pO1xuICAgIHJldHVybiByO1xufVxuLy8gRm9yIHJ1bnRpbWUgY2hlY2sgaWYgY2xhc3MgaW1wbGVtZW50cyBpbnRlcmZhY2VcbmV4cG9ydCBjbGFzcyBIYXNoIHtcbiAgICAvLyBTYWZlIHZlcnNpb24gdGhhdCBjbG9uZXMgaW50ZXJuYWwgc3RhdGVcbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb25lSW50bygpO1xuICAgIH1cbn1cbmNvbnN0IHRvU3RyID0ge30udG9TdHJpbmc7XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tPcHRzKGRlZmF1bHRzLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgIT09IHVuZGVmaW5lZCAmJiB0b1N0ci5jYWxsKG9wdHMpICE9PSAnW29iamVjdCBPYmplY3RdJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPcHRpb25zIHNob3VsZCBiZSBvYmplY3Qgb3IgdW5kZWZpbmVkJyk7XG4gICAgY29uc3QgbWVyZ2VkID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0cywgb3B0cyk7XG4gICAgcmV0dXJuIG1lcmdlZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwQ29uc3RydWN0b3IoaGFzaENvbnMpIHtcbiAgICBjb25zdCBoYXNoQyA9IChtc2cpID0+IGhhc2hDb25zKCkudXBkYXRlKHRvQnl0ZXMobXNnKSkuZGlnZXN0KCk7XG4gICAgY29uc3QgdG1wID0gaGFzaENvbnMoKTtcbiAgICBoYXNoQy5vdXRwdXRMZW4gPSB0bXAub3V0cHV0TGVuO1xuICAgIGhhc2hDLmJsb2NrTGVuID0gdG1wLmJsb2NrTGVuO1xuICAgIGhhc2hDLmNyZWF0ZSA9ICgpID0+IGhhc2hDb25zKCk7XG4gICAgcmV0dXJuIGhhc2hDO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBDb25zdHJ1Y3RvcldpdGhPcHRzKGhhc2hDb25zKSB7XG4gICAgY29uc3QgaGFzaEMgPSAobXNnLCBvcHRzKSA9PiBoYXNoQ29ucyhvcHRzKS51cGRhdGUodG9CeXRlcyhtc2cpKS5kaWdlc3QoKTtcbiAgICBjb25zdCB0bXAgPSBoYXNoQ29ucyh7fSk7XG4gICAgaGFzaEMub3V0cHV0TGVuID0gdG1wLm91dHB1dExlbjtcbiAgICBoYXNoQy5ibG9ja0xlbiA9IHRtcC5ibG9ja0xlbjtcbiAgICBoYXNoQy5jcmVhdGUgPSAob3B0cykgPT4gaGFzaENvbnMob3B0cyk7XG4gICAgcmV0dXJuIGhhc2hDO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBYT0ZDb25zdHJ1Y3RvcldpdGhPcHRzKGhhc2hDb25zKSB7XG4gICAgY29uc3QgaGFzaEMgPSAobXNnLCBvcHRzKSA9PiBoYXNoQ29ucyhvcHRzKS51cGRhdGUodG9CeXRlcyhtc2cpKS5kaWdlc3QoKTtcbiAgICBjb25zdCB0bXAgPSBoYXNoQ29ucyh7fSk7XG4gICAgaGFzaEMub3V0cHV0TGVuID0gdG1wLm91dHB1dExlbjtcbiAgICBoYXNoQy5ibG9ja0xlbiA9IHRtcC5ibG9ja0xlbjtcbiAgICBoYXNoQy5jcmVhdGUgPSAob3B0cykgPT4gaGFzaENvbnMob3B0cyk7XG4gICAgcmV0dXJuIGhhc2hDO1xufVxuLyoqXG4gKiBTZWN1cmUgUFJORy4gVXNlcyBgY3J5cHRvLmdldFJhbmRvbVZhbHVlc2AsIHdoaWNoIGRlZmVycyB0byBPUy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUJ5dGVzKGJ5dGVzTGVuZ3RoID0gMzIpIHtcbiAgICBpZiAoY3J5cHRvICYmIHR5cGVvZiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KGJ5dGVzTGVuZ3RoKSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcyBtdXN0IGJlIGRlZmluZWQnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsImltcG9ydCB7IGJ5dGVzLCBleGlzdHMsIG51bWJlciwgb3V0cHV0IH0gZnJvbSAnLi9fYXNzZXJ0LmpzJztcbmltcG9ydCB7IHJvdGxCSCwgcm90bEJMLCByb3RsU0gsIHJvdGxTTCwgc3BsaXQgfSBmcm9tICcuL191NjQuanMnO1xuaW1wb3J0IHsgSGFzaCwgdTMyLCB0b0J5dGVzLCB3cmFwQ29uc3RydWN0b3IsIHdyYXBYT0ZDb25zdHJ1Y3RvcldpdGhPcHRzLCB9IGZyb20gJy4vdXRpbHMuanMnO1xuLy8gU0hBMyAoa2VjY2FrKSBpcyBiYXNlZCBvbiBhIG5ldyBkZXNpZ246IGJhc2ljYWxseSwgdGhlIGludGVybmFsIHN0YXRlIGlzIGJpZ2dlciB0aGFuIG91dHB1dCBzaXplLlxuLy8gSXQncyBjYWxsZWQgYSBzcG9uZ2UgZnVuY3Rpb24uXG4vLyBWYXJpb3VzIHBlciByb3VuZCBjb25zdGFudHMgY2FsY3VsYXRpb25zXG5jb25zdCBbU0hBM19QSSwgU0hBM19ST1RMLCBfU0hBM19JT1RBXSA9IFtbXSwgW10sIFtdXTtcbmNvbnN0IF8wbiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMCk7XG5jb25zdCBfMW4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDEpO1xuY29uc3QgXzJuID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgyKTtcbmNvbnN0IF83biA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoNyk7XG5jb25zdCBfMjU2biA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMjU2KTtcbmNvbnN0IF8weDcxbiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMHg3MSk7XG5mb3IgKGxldCByb3VuZCA9IDAsIFIgPSBfMW4sIHggPSAxLCB5ID0gMDsgcm91bmQgPCAyNDsgcm91bmQrKykge1xuICAgIC8vIFBpXG4gICAgW3gsIHldID0gW3ksICgyICogeCArIDMgKiB5KSAlIDVdO1xuICAgIFNIQTNfUEkucHVzaCgyICogKDUgKiB5ICsgeCkpO1xuICAgIC8vIFJvdGF0aW9uYWxcbiAgICBTSEEzX1JPVEwucHVzaCgoKChyb3VuZCArIDEpICogKHJvdW5kICsgMikpIC8gMikgJSA2NCk7XG4gICAgLy8gSW90YVxuICAgIGxldCB0ID0gXzBuO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgNzsgaisrKSB7XG4gICAgICAgIFIgPSAoKFIgPDwgXzFuKSBeICgoUiA+PiBfN24pICogXzB4NzFuKSkgJSBfMjU2bjtcbiAgICAgICAgaWYgKFIgJiBfMm4pXG4gICAgICAgICAgICB0IF49IF8xbiA8PCAoKF8xbiA8PCAvKiBAX19QVVJFX18gKi8gQmlnSW50KGopKSAtIF8xbik7XG4gICAgfVxuICAgIF9TSEEzX0lPVEEucHVzaCh0KTtcbn1cbmNvbnN0IFtTSEEzX0lPVEFfSCwgU0hBM19JT1RBX0xdID0gLyogQF9fUFVSRV9fICovIHNwbGl0KF9TSEEzX0lPVEEsIHRydWUpO1xuLy8gTGVmdCByb3RhdGlvbiAod2l0aG91dCAwLCAzMiwgNjQpXG5jb25zdCByb3RsSCA9IChoLCBsLCBzKSA9PiAocyA+IDMyID8gcm90bEJIKGgsIGwsIHMpIDogcm90bFNIKGgsIGwsIHMpKTtcbmNvbnN0IHJvdGxMID0gKGgsIGwsIHMpID0+IChzID4gMzIgPyByb3RsQkwoaCwgbCwgcykgOiByb3RsU0woaCwgbCwgcykpO1xuLy8gU2FtZSBhcyBrZWNjYWtmMTYwMCwgYnV0IGFsbG93cyB0byBza2lwIHNvbWUgcm91bmRzXG5leHBvcnQgZnVuY3Rpb24ga2VjY2FrUChzLCByb3VuZHMgPSAyNCkge1xuICAgIGNvbnN0IEIgPSBuZXcgVWludDMyQXJyYXkoNSAqIDIpO1xuICAgIC8vIE5PVEU6IGFsbCBpbmRpY2VzIGFyZSB4MiBzaW5jZSB3ZSBzdG9yZSBzdGF0ZSBhcyB1MzIgaW5zdGVhZCBvZiB1NjQgKGJpZ2ludHMgdG8gc2xvdyBpbiBqcylcbiAgICBmb3IgKGxldCByb3VuZCA9IDI0IC0gcm91bmRzOyByb3VuZCA8IDI0OyByb3VuZCsrKSB7XG4gICAgICAgIC8vIFRoZXRhIM64XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgMTA7IHgrKylcbiAgICAgICAgICAgIEJbeF0gPSBzW3hdIF4gc1t4ICsgMTBdIF4gc1t4ICsgMjBdIF4gc1t4ICsgMzBdIF4gc1t4ICsgNDBdO1xuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDEwOyB4ICs9IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkeDEgPSAoeCArIDgpICUgMTA7XG4gICAgICAgICAgICBjb25zdCBpZHgwID0gKHggKyAyKSAlIDEwO1xuICAgICAgICAgICAgY29uc3QgQjAgPSBCW2lkeDBdO1xuICAgICAgICAgICAgY29uc3QgQjEgPSBCW2lkeDAgKyAxXTtcbiAgICAgICAgICAgIGNvbnN0IFRoID0gcm90bEgoQjAsIEIxLCAxKSBeIEJbaWR4MV07XG4gICAgICAgICAgICBjb25zdCBUbCA9IHJvdGxMKEIwLCBCMSwgMSkgXiBCW2lkeDEgKyAxXTtcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgNTA7IHkgKz0gMTApIHtcbiAgICAgICAgICAgICAgICBzW3ggKyB5XSBePSBUaDtcbiAgICAgICAgICAgICAgICBzW3ggKyB5ICsgMV0gXj0gVGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmhvICjPgSkgYW5kIFBpICjPgClcbiAgICAgICAgbGV0IGN1ckggPSBzWzJdO1xuICAgICAgICBsZXQgY3VyTCA9IHNbM107XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgMjQ7IHQrKykge1xuICAgICAgICAgICAgY29uc3Qgc2hpZnQgPSBTSEEzX1JPVExbdF07XG4gICAgICAgICAgICBjb25zdCBUaCA9IHJvdGxIKGN1ckgsIGN1ckwsIHNoaWZ0KTtcbiAgICAgICAgICAgIGNvbnN0IFRsID0gcm90bEwoY3VySCwgY3VyTCwgc2hpZnQpO1xuICAgICAgICAgICAgY29uc3QgUEkgPSBTSEEzX1BJW3RdO1xuICAgICAgICAgICAgY3VySCA9IHNbUEldO1xuICAgICAgICAgICAgY3VyTCA9IHNbUEkgKyAxXTtcbiAgICAgICAgICAgIHNbUEldID0gVGg7XG4gICAgICAgICAgICBzW1BJICsgMV0gPSBUbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGkgKM+HKVxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IDUwOyB5ICs9IDEwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDEwOyB4KyspXG4gICAgICAgICAgICAgICAgQlt4XSA9IHNbeSArIHhdO1xuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCAxMDsgeCsrKVxuICAgICAgICAgICAgICAgIHNbeSArIHhdIF49IH5CWyh4ICsgMikgJSAxMF0gJiBCWyh4ICsgNCkgJSAxMF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW90YSAozrkpXG4gICAgICAgIHNbMF0gXj0gU0hBM19JT1RBX0hbcm91bmRdO1xuICAgICAgICBzWzFdIF49IFNIQTNfSU9UQV9MW3JvdW5kXTtcbiAgICB9XG4gICAgQi5maWxsKDApO1xufVxuZXhwb3J0IGNsYXNzIEtlY2NhayBleHRlbmRzIEhhc2gge1xuICAgIC8vIE5PVEU6IHdlIGFjY2VwdCBhcmd1bWVudHMgaW4gYnl0ZXMgaW5zdGVhZCBvZiBiaXRzIGhlcmUuXG4gICAgY29uc3RydWN0b3IoYmxvY2tMZW4sIHN1ZmZpeCwgb3V0cHV0TGVuLCBlbmFibGVYT0YgPSBmYWxzZSwgcm91bmRzID0gMjQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0aGlzLnN1ZmZpeCA9IHN1ZmZpeDtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRoaXMuZW5hYmxlWE9GID0gZW5hYmxlWE9GO1xuICAgICAgICB0aGlzLnJvdW5kcyA9IHJvdW5kcztcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLnBvc091dCA9IDA7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgICAgLy8gQ2FuIGJlIHBhc3NlZCBmcm9tIHVzZXIgYXMgZGtMZW5cbiAgICAgICAgbnVtYmVyKG91dHB1dExlbik7XG4gICAgICAgIC8vIDE2MDAgPSA1eDUgbWF0cml4IG9mIDY0Yml0LiAgMTYwMCBiaXRzID09PSAyMDAgYnl0ZXNcbiAgICAgICAgaWYgKDAgPj0gdGhpcy5ibG9ja0xlbiB8fCB0aGlzLmJsb2NrTGVuID49IDIwMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2hhMyBzdXBwb3J0cyBvbmx5IGtlY2Nhay1mMTYwMCBmdW5jdGlvbicpO1xuICAgICAgICB0aGlzLnN0YXRlID0gbmV3IFVpbnQ4QXJyYXkoMjAwKTtcbiAgICAgICAgdGhpcy5zdGF0ZTMyID0gdTMyKHRoaXMuc3RhdGUpO1xuICAgIH1cbiAgICBrZWNjYWsoKSB7XG4gICAgICAgIGtlY2Nha1AodGhpcy5zdGF0ZTMyLCB0aGlzLnJvdW5kcyk7XG4gICAgICAgIHRoaXMucG9zT3V0ID0gMDtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgIH1cbiAgICB1cGRhdGUoZGF0YSkge1xuICAgICAgICBleGlzdHModGhpcyk7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tMZW4sIHN0YXRlIH0gPSB0aGlzO1xuICAgICAgICBkYXRhID0gdG9CeXRlcyhkYXRhKTtcbiAgICAgICAgY29uc3QgbGVuID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IGxlbjspIHtcbiAgICAgICAgICAgIGNvbnN0IHRha2UgPSBNYXRoLm1pbihibG9ja0xlbiAtIHRoaXMucG9zLCBsZW4gLSBwb3MpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWtlOyBpKyspXG4gICAgICAgICAgICAgICAgc3RhdGVbdGhpcy5wb3MrK10gXj0gZGF0YVtwb3MrK107XG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPT09IGJsb2NrTGVuKVxuICAgICAgICAgICAgICAgIHRoaXMua2VjY2FrKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZpbmlzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZmluaXNoZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICBjb25zdCB7IHN0YXRlLCBzdWZmaXgsIHBvcywgYmxvY2tMZW4gfSA9IHRoaXM7XG4gICAgICAgIC8vIERvIHRoZSBwYWRkaW5nXG4gICAgICAgIHN0YXRlW3Bvc10gXj0gc3VmZml4O1xuICAgICAgICBpZiAoKHN1ZmZpeCAmIDB4ODApICE9PSAwICYmIHBvcyA9PT0gYmxvY2tMZW4gLSAxKVxuICAgICAgICAgICAgdGhpcy5rZWNjYWsoKTtcbiAgICAgICAgc3RhdGVbYmxvY2tMZW4gLSAxXSBePSAweDgwO1xuICAgICAgICB0aGlzLmtlY2NhaygpO1xuICAgIH1cbiAgICB3cml0ZUludG8ob3V0KSB7XG4gICAgICAgIGV4aXN0cyh0aGlzLCBmYWxzZSk7XG4gICAgICAgIGJ5dGVzKG91dCk7XG4gICAgICAgIHRoaXMuZmluaXNoKCk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlck91dCA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tMZW4gfSA9IHRoaXM7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IDAsIGxlbiA9IG91dC5sZW5ndGg7IHBvcyA8IGxlbjspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBvc091dCA+PSBibG9ja0xlbilcbiAgICAgICAgICAgICAgICB0aGlzLmtlY2NhaygpO1xuICAgICAgICAgICAgY29uc3QgdGFrZSA9IE1hdGgubWluKGJsb2NrTGVuIC0gdGhpcy5wb3NPdXQsIGxlbiAtIHBvcyk7XG4gICAgICAgICAgICBvdXQuc2V0KGJ1ZmZlck91dC5zdWJhcnJheSh0aGlzLnBvc091dCwgdGhpcy5wb3NPdXQgKyB0YWtlKSwgcG9zKTtcbiAgICAgICAgICAgIHRoaXMucG9zT3V0ICs9IHRha2U7XG4gICAgICAgICAgICBwb3MgKz0gdGFrZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICB4b2ZJbnRvKG91dCkge1xuICAgICAgICAvLyBTaGEzL0tlY2NhayB1c2FnZSB3aXRoIFhPRiBpcyBwcm9iYWJseSBtaXN0YWtlLCBvbmx5IFNIQUtFIGluc3RhbmNlcyBjYW4gZG8gWE9GXG4gICAgICAgIGlmICghdGhpcy5lbmFibGVYT0YpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1hPRiBpcyBub3QgcG9zc2libGUgZm9yIHRoaXMgaW5zdGFuY2UnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVJbnRvKG91dCk7XG4gICAgfVxuICAgIHhvZihieXRlcykge1xuICAgICAgICBudW1iZXIoYnl0ZXMpO1xuICAgICAgICByZXR1cm4gdGhpcy54b2ZJbnRvKG5ldyBVaW50OEFycmF5KGJ5dGVzKSk7XG4gICAgfVxuICAgIGRpZ2VzdEludG8ob3V0KSB7XG4gICAgICAgIG91dHB1dChvdXQsIHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5maW5pc2hlZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZGlnZXN0KCkgd2FzIGFscmVhZHkgY2FsbGVkJyk7XG4gICAgICAgIHRoaXMud3JpdGVJbnRvKG91dCk7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBkaWdlc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpZ2VzdEludG8obmV3IFVpbnQ4QXJyYXkodGhpcy5vdXRwdXRMZW4pKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YXRlLmZpbGwoMCk7XG4gICAgfVxuICAgIF9jbG9uZUludG8odG8pIHtcbiAgICAgICAgY29uc3QgeyBibG9ja0xlbiwgc3VmZml4LCBvdXRwdXRMZW4sIHJvdW5kcywgZW5hYmxlWE9GIH0gPSB0aGlzO1xuICAgICAgICB0byB8fCAodG8gPSBuZXcgS2VjY2FrKGJsb2NrTGVuLCBzdWZmaXgsIG91dHB1dExlbiwgZW5hYmxlWE9GLCByb3VuZHMpKTtcbiAgICAgICAgdG8uc3RhdGUzMi5zZXQodGhpcy5zdGF0ZTMyKTtcbiAgICAgICAgdG8ucG9zID0gdGhpcy5wb3M7XG4gICAgICAgIHRvLnBvc091dCA9IHRoaXMucG9zT3V0O1xuICAgICAgICB0by5maW5pc2hlZCA9IHRoaXMuZmluaXNoZWQ7XG4gICAgICAgIHRvLnJvdW5kcyA9IHJvdW5kcztcbiAgICAgICAgLy8gU3VmZml4IGNhbiBjaGFuZ2UgaW4gY1NIQUtFXG4gICAgICAgIHRvLnN1ZmZpeCA9IHN1ZmZpeDtcbiAgICAgICAgdG8ub3V0cHV0TGVuID0gb3V0cHV0TGVuO1xuICAgICAgICB0by5lbmFibGVYT0YgPSBlbmFibGVYT0Y7XG4gICAgICAgIHRvLmRlc3Ryb3llZCA9IHRoaXMuZGVzdHJveWVkO1xuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxufVxuY29uc3QgZ2VuID0gKHN1ZmZpeCwgYmxvY2tMZW4sIG91dHB1dExlbikgPT4gd3JhcENvbnN0cnVjdG9yKCgpID0+IG5ldyBLZWNjYWsoYmxvY2tMZW4sIHN1ZmZpeCwgb3V0cHV0TGVuKSk7XG5leHBvcnQgY29uc3Qgc2hhM18yMjQgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDB4MDYsIDE0NCwgMjI0IC8gOCk7XG4vKipcbiAqIFNIQTMtMjU2IGhhc2ggZnVuY3Rpb25cbiAqIEBwYXJhbSBtZXNzYWdlIC0gdGhhdCB3b3VsZCBiZSBoYXNoZWRcbiAqL1xuZXhwb3J0IGNvbnN0IHNoYTNfMjU2ID0gLyogQF9fUFVSRV9fICovIGdlbigweDA2LCAxMzYsIDI1NiAvIDgpO1xuZXhwb3J0IGNvbnN0IHNoYTNfMzg0ID0gLyogQF9fUFVSRV9fICovIGdlbigweDA2LCAxMDQsIDM4NCAvIDgpO1xuZXhwb3J0IGNvbnN0IHNoYTNfNTEyID0gLyogQF9fUFVSRV9fICovIGdlbigweDA2LCA3MiwgNTEyIC8gOCk7XG5leHBvcnQgY29uc3Qga2VjY2FrXzIyNCA9IC8qIEBfX1BVUkVfXyAqLyBnZW4oMHgwMSwgMTQ0LCAyMjQgLyA4KTtcbi8qKlxuICoga2VjY2FrLTI1NiBoYXNoIGZ1bmN0aW9uLiBEaWZmZXJlbnQgZnJvbSBTSEEzLTI1Ni5cbiAqIEBwYXJhbSBtZXNzYWdlIC0gdGhhdCB3b3VsZCBiZSBoYXNoZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGtlY2Nha18yNTYgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDB4MDEsIDEzNiwgMjU2IC8gOCk7XG5leHBvcnQgY29uc3Qga2VjY2FrXzM4NCA9IC8qIEBfX1BVUkVfXyAqLyBnZW4oMHgwMSwgMTA0LCAzODQgLyA4KTtcbmV4cG9ydCBjb25zdCBrZWNjYWtfNTEyID0gLyogQF9fUFVSRV9fICovIGdlbigweDAxLCA3MiwgNTEyIC8gOCk7XG5jb25zdCBnZW5TaGFrZSA9IChzdWZmaXgsIGJsb2NrTGVuLCBvdXRwdXRMZW4pID0+IHdyYXBYT0ZDb25zdHJ1Y3RvcldpdGhPcHRzKChvcHRzID0ge30pID0+IG5ldyBLZWNjYWsoYmxvY2tMZW4sIHN1ZmZpeCwgb3B0cy5ka0xlbiA9PT0gdW5kZWZpbmVkID8gb3V0cHV0TGVuIDogb3B0cy5ka0xlbiwgdHJ1ZSkpO1xuZXhwb3J0IGNvbnN0IHNoYWtlMTI4ID0gLyogQF9fUFVSRV9fICovIGdlblNoYWtlKDB4MWYsIDE2OCwgMTI4IC8gOCk7XG5leHBvcnQgY29uc3Qgc2hha2UyNTYgPSAvKiBAX19QVVJFX18gKi8gZ2VuU2hha2UoMHgxZiwgMTM2LCAyNTYgLyA4KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYTMuanMubWFwIiwiLyoqXG4gKiAgQ3J5cHRvZ3JhcGhpYyBoYXNoaW5nIGZ1bmN0aW9uc1xuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9jcnlwdG86SGFzaCBGdW5jdGlvbnMgW2Fib3V0LWNyeXB0by1oYXNoaW5nXVxuICovXG5pbXBvcnQgeyBrZWNjYWtfMjU2IH0gZnJvbSBcIkBub2JsZS9oYXNoZXMvc2hhM1wiO1xuaW1wb3J0IHsgZ2V0Qnl0ZXMsIGhleGxpZnkgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmxldCBsb2NrZWQgPSBmYWxzZTtcbmNvbnN0IF9rZWNjYWsyNTYgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBrZWNjYWtfMjU2KGRhdGEpO1xufTtcbmxldCBfX2tlY2NhazI1NiA9IF9rZWNjYWsyNTY7XG4vKipcbiAqICBDb21wdXRlIHRoZSBjcnlwdG9ncmFwaGljIEtFQ0NBSzI1NiBoYXNoIG9mICUlZGF0YSUlLlxuICpcbiAqICBUaGUgJSVkYXRhJSUgKiptdXN0KiogYmUgYSBkYXRhIHJlcHJlc2VudGF0aW9uLCB0byBjb21wdXRlIHRoZVxuICogIGhhc2ggb2YgVVRGLTggZGF0YSB1c2UgdGhlIFtbaWRdXSBmdW5jdGlvbi5cbiAqXG4gKiAgQHJldHVybnMgRGF0YUhleHN0cmluZ1xuICogIEBleGFtcGxlOlxuICogICAga2VjY2FrMjU2KFwiMHhcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICBrZWNjYWsyNTYoXCIweDEzMzdcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICBrZWNjYWsyNTYobmV3IFVpbnQ4QXJyYXkoWyAweDEzLCAweDM3IF0pKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIC8vIFN0cmluZ3MgYXJlIGFzc3VtZWQgdG8gYmUgRGF0YUhleFN0cmluZywgb3RoZXJ3aXNlIGl0IHdpbGxcbiAqICAgIC8vIHRocm93LiBUbyBoYXNoIFVURi04IGRhdGEsIHNlZSB0aGUgbm90ZSBhYm92ZS5cbiAqICAgIGtlY2NhazI1NihcIkhlbGxvIFdvcmxkXCIpXG4gKiAgICAvL19lcnJvcjpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGtlY2NhazI1NihfZGF0YSkge1xuICAgIGNvbnN0IGRhdGEgPSBnZXRCeXRlcyhfZGF0YSwgXCJkYXRhXCIpO1xuICAgIHJldHVybiBoZXhsaWZ5KF9fa2VjY2FrMjU2KGRhdGEpKTtcbn1cbmtlY2NhazI1Ni5fID0gX2tlY2NhazI1NjtcbmtlY2NhazI1Ni5sb2NrID0gZnVuY3Rpb24gKCkgeyBsb2NrZWQgPSB0cnVlOyB9O1xua2VjY2FrMjU2LnJlZ2lzdGVyID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICBpZiAobG9ja2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJrZWNjYWsyNTYgaXMgbG9ja2VkXCIpO1xuICAgIH1cbiAgICBfX2tlY2NhazI1NiA9IGZ1bmM7XG59O1xuT2JqZWN0LmZyZWV6ZShrZWNjYWsyNTYpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VjY2FrLmpzLm1hcCIsImltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gXCIuLi9jcnlwdG8vaW5kZXguanNcIjtcbmltcG9ydCB7IGdldEJ5dGVzLCBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuY29uc3QgQk5fMCA9IEJpZ0ludCgwKTtcbmNvbnN0IEJOXzM2ID0gQmlnSW50KDM2KTtcbmZ1bmN0aW9uIGdldENoZWNrc3VtQWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgLy8gICAgaWYgKCFpc0hleFN0cmluZyhhZGRyZXNzLCAyMCkpIHtcbiAgICAvLyAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWRkcmVzc1wiLCBcImFkZHJlc3NcIiwgYWRkcmVzcyk7XG4gICAgLy8gICAgfVxuICAgIGFkZHJlc3MgPSBhZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgY2hhcnMgPSBhZGRyZXNzLnN1YnN0cmluZygyKS5zcGxpdChcIlwiKTtcbiAgICBjb25zdCBleHBhbmRlZCA9IG5ldyBVaW50OEFycmF5KDQwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQwOyBpKyspIHtcbiAgICAgICAgZXhwYW5kZWRbaV0gPSBjaGFyc1tpXS5jaGFyQ29kZUF0KDApO1xuICAgIH1cbiAgICBjb25zdCBoYXNoZWQgPSBnZXRCeXRlcyhrZWNjYWsyNTYoZXhwYW5kZWQpKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQwOyBpICs9IDIpIHtcbiAgICAgICAgaWYgKChoYXNoZWRbaSA+PiAxXSA+PiA0KSA+PSA4KSB7XG4gICAgICAgICAgICBjaGFyc1tpXSA9IGNoYXJzW2ldLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChoYXNoZWRbaSA+PiAxXSAmIDB4MGYpID49IDgpIHtcbiAgICAgICAgICAgIGNoYXJzW2kgKyAxXSA9IGNoYXJzW2kgKyAxXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBcIjB4XCIgKyBjaGFycy5qb2luKFwiXCIpO1xufVxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnRlcm5hdGlvbmFsX0JhbmtfQWNjb3VudF9OdW1iZXJcbi8vIENyZWF0ZSBsb29rdXAgdGFibGVcbmNvbnN0IGliYW5Mb29rdXAgPSB7fTtcbmZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgIGliYW5Mb29rdXBbU3RyaW5nKGkpXSA9IFN0cmluZyhpKTtcbn1cbmZvciAobGV0IGkgPSAwOyBpIDwgMjY7IGkrKykge1xuICAgIGliYW5Mb29rdXBbU3RyaW5nLmZyb21DaGFyQ29kZSg2NSArIGkpXSA9IFN0cmluZygxMCArIGkpO1xufVxuLy8gSG93IG1hbnkgZGVjaW1hbCBkaWdpdHMgY2FuIHdlIHByb2Nlc3M/IChmb3IgNjQtYml0IGZsb2F0LCB0aGlzIGlzIDE1KVxuLy8gaS5lLiBNYXRoLmZsb29yKE1hdGgubG9nMTAoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpKTtcbmNvbnN0IHNhZmVEaWdpdHMgPSAxNTtcbmZ1bmN0aW9uIGliYW5DaGVja3N1bShhZGRyZXNzKSB7XG4gICAgYWRkcmVzcyA9IGFkZHJlc3MudG9VcHBlckNhc2UoKTtcbiAgICBhZGRyZXNzID0gYWRkcmVzcy5zdWJzdHJpbmcoNCkgKyBhZGRyZXNzLnN1YnN0cmluZygwLCAyKSArIFwiMDBcIjtcbiAgICBsZXQgZXhwYW5kZWQgPSBhZGRyZXNzLnNwbGl0KFwiXCIpLm1hcCgoYykgPT4geyByZXR1cm4gaWJhbkxvb2t1cFtjXTsgfSkuam9pbihcIlwiKTtcbiAgICAvLyBKYXZhc2NyaXB0IGNhbiBoYW5kbGUgaW50ZWdlcnMgc2FmZWx5IHVwIHRvIDE1IChkZWNpbWFsKSBkaWdpdHNcbiAgICB3aGlsZSAoZXhwYW5kZWQubGVuZ3RoID49IHNhZmVEaWdpdHMpIHtcbiAgICAgICAgbGV0IGJsb2NrID0gZXhwYW5kZWQuc3Vic3RyaW5nKDAsIHNhZmVEaWdpdHMpO1xuICAgICAgICBleHBhbmRlZCA9IHBhcnNlSW50KGJsb2NrLCAxMCkgJSA5NyArIGV4cGFuZGVkLnN1YnN0cmluZyhibG9jay5sZW5ndGgpO1xuICAgIH1cbiAgICBsZXQgY2hlY2tzdW0gPSBTdHJpbmcoOTggLSAocGFyc2VJbnQoZXhwYW5kZWQsIDEwKSAlIDk3KSk7XG4gICAgd2hpbGUgKGNoZWNrc3VtLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgY2hlY2tzdW0gPSBcIjBcIiArIGNoZWNrc3VtO1xuICAgIH1cbiAgICByZXR1cm4gY2hlY2tzdW07XG59XG47XG5jb25zdCBCYXNlMzYgPSAoZnVuY3Rpb24gKCkge1xuICAgIDtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM2OyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gXCIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIltpXTtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBCaWdJbnQoaSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59KSgpO1xuZnVuY3Rpb24gZnJvbUJhc2UzNih2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICBsZXQgcmVzdWx0ID0gQk5fMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCAqIEJOXzM2ICsgQmFzZTM2W3ZhbHVlW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogIFJldHVybnMgYSBub3JtYWxpemVkIGFuZCBjaGVja3N1bWVkIGFkZHJlc3MgZm9yICUlYWRkcmVzcyUlLlxuICogIFRoaXMgYWNjZXB0cyBub24tY2hlY2tzdW0gYWRkcmVzc2VzLCBjaGVja3N1bSBhZGRyZXNzZXMgYW5kXG4gKiAgW1tnZXRJY2FwQWRkcmVzc11dIGZvcm1hdHMuXG4gKlxuICogIFRoZSBjaGVja3N1bSBpbiBFdGhlcmV1bSB1c2VzIHRoZSBjYXBpdGFsaXphdGlvbiAodXBwZXItY2FzZVxuICogIHZzIGxvd2VyLWNhc2UpIG9mIHRoZSBjaGFyYWN0ZXJzIHdpdGhpbiBhbiBhZGRyZXNzIHRvIGVuY29kZVxuICogIGl0cyBjaGVja3N1bSwgd2hpY2ggb2ZmZXJzLCBvbiBhdmVyYWdlLCBhIGNoZWNrc3VtIG9mIDE1LWJpdHMuXG4gKlxuICogIElmICUlYWRkcmVzcyUlIGNvbnRhaW5zIGJvdGggdXBwZXItY2FzZSBhbmQgbG93ZXItY2FzZSwgaXQgaXNcbiAqICBhc3N1bWVkIHRvIGFscmVhZHkgYmUgYSBjaGVja3N1bSBhZGRyZXNzIGFuZCBpdHMgY2hlY2tzdW0gaXNcbiAqICB2YWxpZGF0ZWQsIGFuZCBpZiB0aGUgYWRkcmVzcyBmYWlscyBpdHMgZXhwZWN0ZWQgY2hlY2tzdW0gYW5cbiAqICBlcnJvciBpcyB0aHJvd24uXG4gKlxuICogIElmIHlvdSB3aXNoIHRoZSBjaGVja3N1bSBvZiAlJWFkZHJlc3MlJSB0byBiZSBpZ25vcmUsIGl0IHNob3VsZFxuICogIGJlIGNvbnZlcnRlZCB0byBsb3dlci1jYXNlIChpLmUuIGBgLnRvTG93ZXJjYXNlKClgYCkgYmVmb3JlXG4gKiAgYmVpbmcgcGFzc2VkIGluLiBUaGlzIHNob3VsZCBiZSBhIHZlcnkgcmFyZSBzaXR1YXRpb24gdGhvdWdoLFxuICogIHRoYXQgeW91IHdpc2ggdG8gYnlwYXNzIHRoZSBzYWZlZ2F1cmRzIGluIHBsYWNlIHRvIHByb3RlY3RcbiAqICBhZ2FpbnN0IGFuIGFkZHJlc3MgdGhhdCBoYXMgYmVlbiBpbmNvcnJlY3RseSBjb3BpZWQgZnJvbSBhbm90aGVyXG4gKiAgc291cmNlLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIC8vIEFkZHMgdGhlIGNoZWNrc3VtICh2aWEgdXBwZXItY2FzaW5nIHNwZWNpZmljIGxldHRlcnMpXG4gKiAgICBnZXRBZGRyZXNzKFwiMHg4YmExZjEwOTU1MWJkNDMyODAzMDEyNjQ1YWMxMzZkZGQ2NGRiYTcyXCIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgLy8gQ29udmVydHMgSUNBUCBhZGRyZXNzIGFuZCBhZGRzIGNoZWNrc3VtXG4gKiAgICBnZXRBZGRyZXNzKFwiWEU2NUdCNkxETlhZT0ZUWDBOU1YzRlVXS09XSVhBTUpLMzZcIik7XG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgLy8gVGhyb3dzIGFuIGVycm9yIGlmIGFuIGFkZHJlc3MgY29udGFpbnMgbWl4ZWQgY2FzZSxcbiAqICAgIC8vIGJ1dCB0aGUgY2hlY2tzdW0gZmFpbHNcbiAqICAgIGdldEFkZHJlc3MoXCIweDhCYTFmMTA5NTUxYkQ0MzI4MDMwMTI2NDVBYzEzNmRkZDY0REJBNzJcIilcbiAqICAgIC8vX2Vycm9yOlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgYXNzZXJ0QXJndW1lbnQodHlwZW9mIChhZGRyZXNzKSA9PT0gXCJzdHJpbmdcIiwgXCJpbnZhbGlkIGFkZHJlc3NcIiwgXCJhZGRyZXNzXCIsIGFkZHJlc3MpO1xuICAgIGlmIChhZGRyZXNzLm1hdGNoKC9eKDB4KT9bMC05YS1mQS1GXXs0MH0kLykpIHtcbiAgICAgICAgLy8gTWlzc2luZyB0aGUgMHggcHJlZml4XG4gICAgICAgIGlmICghYWRkcmVzcy5zdGFydHNXaXRoKFwiMHhcIikpIHtcbiAgICAgICAgICAgIGFkZHJlc3MgPSBcIjB4XCIgKyBhZGRyZXNzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGdldENoZWNrc3VtQWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgLy8gSXQgaXMgYSBjaGVja3N1bW1lZCBhZGRyZXNzIHdpdGggYSBiYWQgY2hlY2tzdW1cbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoIWFkZHJlc3MubWF0Y2goLyhbQS1GXS4qW2EtZl0pfChbYS1mXS4qW0EtRl0pLykgfHwgcmVzdWx0ID09PSBhZGRyZXNzLCBcImJhZCBhZGRyZXNzIGNoZWNrc3VtXCIsIFwiYWRkcmVzc1wiLCBhZGRyZXNzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLy8gTWF5YmUgSUNBUD8gKHdlIG9ubHkgc3VwcG9ydCBkaXJlY3QgbW9kZSlcbiAgICBpZiAoYWRkcmVzcy5tYXRjaCgvXlhFWzAtOV17Mn1bMC05QS1aYS16XXszMCwzMX0kLykpIHtcbiAgICAgICAgLy8gSXQgaXMgYW4gSUNBUCBhZGRyZXNzIHdpdGggYSBiYWQgY2hlY2tzdW1cbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoYWRkcmVzcy5zdWJzdHJpbmcoMiwgNCkgPT09IGliYW5DaGVja3N1bShhZGRyZXNzKSwgXCJiYWQgaWNhcCBjaGVja3N1bVwiLCBcImFkZHJlc3NcIiwgYWRkcmVzcyk7XG4gICAgICAgIGxldCByZXN1bHQgPSBmcm9tQmFzZTM2KGFkZHJlc3Muc3Vic3RyaW5nKDQpKS50b1N0cmluZygxNik7XG4gICAgICAgIHdoaWxlIChyZXN1bHQubGVuZ3RoIDwgNDApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IFwiMFwiICsgcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRDaGVja3N1bUFkZHJlc3MoXCIweFwiICsgcmVzdWx0KTtcbiAgICB9XG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwiaW52YWxpZCBhZGRyZXNzXCIsIFwiYWRkcmVzc1wiLCBhZGRyZXNzKTtcbn1cbi8qKlxuICogIFRoZSBbSUNBUCBBZGRyZXNzIGZvcm1hdF0obGluay1pY2FwKSBmb3JtYXQgaXMgYW4gZWFybHkgY2hlY2tzdW1cbiAqICBmb3JtYXQgd2hpY2ggYXR0ZW1wdHMgdG8gYmUgY29tcGF0aWJsZSB3aXRoIHRoZSBiYW5raW5nXG4gKiAgaW5kdXN0cnkgW0lCQU4gZm9ybWF0XShsaW5rLXdpa2ktaWJhbikgZm9yIGJhbmsgYWNjb3VudHMuXG4gKlxuICogIEl0IGlzIG5vIGxvbmdlciBjb21tb24gb3IgYSByZWNvbW1lbmRlZCBmb3JtYXQuXG4gKlxuICogIEBleGFtcGxlOlxuICogICAgZ2V0SWNhcEFkZHJlc3MoXCIweDhiYTFmMTA5NTUxYmQ0MzI4MDMwMTI2NDVhYzEzNmRkZDY0ZGJhNzJcIik7XG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgZ2V0SWNhcEFkZHJlc3MoXCJYRTY1R0I2TEROWFlPRlRYME5TVjNGVVdLT1dJWEFNSkszNlwiKTtcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIElDQVAgY2hlY2tzdW0gaXMgd3JvbmdcbiAqICAgIGdldEljYXBBZGRyZXNzKFwiWEU2NUdCNkxETlhZT0ZUWDBOU1YzRlVXS09XSVhBTUpLMzdcIik7XG4gKiAgICAvL19lcnJvcjpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEljYXBBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICAvL2xldCBiYXNlMzYgPSBfYmFzZTE2VG8zNihnZXRBZGRyZXNzKGFkZHJlc3MpLnN1YnN0cmluZygyKSkudG9VcHBlckNhc2UoKTtcbiAgICBsZXQgYmFzZTM2ID0gQmlnSW50KGdldEFkZHJlc3MoYWRkcmVzcykpLnRvU3RyaW5nKDM2KS50b1VwcGVyQ2FzZSgpO1xuICAgIHdoaWxlIChiYXNlMzYubGVuZ3RoIDwgMzApIHtcbiAgICAgICAgYmFzZTM2ID0gXCIwXCIgKyBiYXNlMzY7XG4gICAgfVxuICAgIHJldHVybiBcIlhFXCIgKyBpYmFuQ2hlY2tzdW0oXCJYRTAwXCIgKyBiYXNlMzYpICsgYmFzZTM2O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkcmVzcy5qcy5tYXAiLCIvKipcbiAqICBBIFR5cGVkIG9iamVjdCBhbGxvd3MgYSB2YWx1ZSB0byBoYXZlIGl0cyB0eXBlIGV4cGxpY2l0bHlcbiAqICBzcGVjaWZpZWQuXG4gKlxuICogIEZvciBleGFtcGxlLCBpbiBTb2xpZGl0eSwgdGhlIHZhbHVlIGBgNDVgYCBjb3VsZCByZXByZXNlbnQgYVxuICogIGBgdWludDhgYCBvciBhIGBgdWludDI1NmBgLiBUaGUgdmFsdWUgYGAweDEyMzRgYCBjb3VsZCByZXByZXNlbnRcbiAqICBhIGBgYnl0ZXMyYGAgb3IgYGBieXRlc2BgLlxuICpcbiAqICBTaW5jZSBKYXZhU2NyaXB0IGhhcyBubyBtZWFuaW5nZnVsIHdheSB0byBleHBsaWNpdGx5IGluZm9ybSBhbnlcbiAqICBBUElzIHdoaWNoIHdoYXQgdGhlIHR5cGUgaXMsIHRoaXMgYWxsb3dzIHRyYW5zcGFyZW50IGludGVyb3BlcmF0aW9uXG4gKiAgd2l0aCBTb2xkaXR5LlxuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9hYmk6VHlwZWQgVmFsdWVzXG4gKi9cbmltcG9ydCB7IGFzc2VydFByaXZhdGUsIGRlZmluZVByb3BlcnRpZXMgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmNvbnN0IF9nYXVyZCA9IHt9O1xuZnVuY3Rpb24gbih2YWx1ZSwgd2lkdGgpIHtcbiAgICBsZXQgc2lnbmVkID0gZmFsc2U7XG4gICAgaWYgKHdpZHRoIDwgMCkge1xuICAgICAgICBzaWduZWQgPSB0cnVlO1xuICAgICAgICB3aWR0aCAqPSAtMTtcbiAgICB9XG4gICAgLy8gQFRPRE86IENoZWNrIHJhbmdlIGlzIHZhbGlkIGZvciB2YWx1ZVxuICAgIHJldHVybiBuZXcgVHlwZWQoX2dhdXJkLCBgJHtzaWduZWQgPyBcIlwiIDogXCJ1XCJ9aW50JHt3aWR0aH1gLCB2YWx1ZSwgeyBzaWduZWQsIHdpZHRoIH0pO1xufVxuZnVuY3Rpb24gYih2YWx1ZSwgc2l6ZSkge1xuICAgIC8vIEBUT0RPOiBDaGVjayByYW5nZSBpcyB2YWxpZCBmb3IgdmFsdWVcbiAgICByZXR1cm4gbmV3IFR5cGVkKF9nYXVyZCwgYGJ5dGVzJHsoc2l6ZSkgPyBzaXplIDogXCJcIn1gLCB2YWx1ZSwgeyBzaXplIH0pO1xufVxuY29uc3QgX3R5cGVkU3ltYm9sID0gU3ltYm9sLmZvcihcIl9ldGhlcnNfdHlwZWRcIik7XG4vKipcbiAqICBUaGUgKipUeXBlZCoqIGNsYXNzIHRvIHdyYXAgdmFsdWVzIHByb3ZpZGluZyBleHBsaWNpdCB0eXBlIGluZm9ybWF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgVHlwZWQge1xuICAgIC8qKlxuICAgICAqICBUaGUgdHlwZSwgYXMgYSBTb2xpZGl0eS1jb21wYXRpYmxlIHR5cGUuXG4gICAgICovXG4gICAgdHlwZTtcbiAgICAvKipcbiAgICAgKiAgVGhlIGFjdHVhbCB2YWx1ZS5cbiAgICAgKi9cbiAgICB2YWx1ZTtcbiAgICAjb3B0aW9ucztcbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgX3R5cGVkU3ltYm9sO1xuICAgIC8qKlxuICAgICAqICBAX2lnbm9yZTpcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihnYXVyZCwgdHlwZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0UHJpdmF0ZShfZ2F1cmQsIGdhdXJkLCBcIlR5cGVkXCIpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgX3R5cGVkU3ltYm9sLCB0eXBlLCB2YWx1ZSB9KTtcbiAgICAgICAgdGhpcy4jb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIC8vIENoZWNrIHRoZSB2YWx1ZSBpcyB2YWxpZFxuICAgICAgICB0aGlzLmZvcm1hdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgRm9ybWF0IHRoZSB0eXBlIGFzIGEgSHVtYW4tUmVhZGFibGUgdHlwZS5cbiAgICAgKi9cbiAgICBmb3JtYXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09IFwiYXJyYXlcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gXCJkeW5hbWljQXJyYXlcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gXCJ0dXBsZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gYHR1cGxlKCR7dGhpcy52YWx1ZS5tYXAoKHYpID0+IHYuZm9ybWF0KCkpLmpvaW4oXCIsXCIpfSlgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgZGVmYXVsdCB2YWx1ZSByZXR1cm5lZCBieSB0aGlzIHR5cGUuXG4gICAgICovXG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBtaW5pbXVtIHZhbHVlIGZvciBudW1lcmljIHR5cGVzLlxuICAgICAqL1xuICAgIG1pblZhbHVlKCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBtYXhpbXVtIHZhbHVlIGZvciBudW1lcmljIHR5cGVzLlxuICAgICAqL1xuICAgIG1heFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYGB0cnVlYGAgYW5kIHByb3ZpZGVzIGEgdHlwZSBndWFyZCBpcyB0aGlzIGlzIGEgW1tUeXBlZEJpZ0ludF1dLlxuICAgICAqL1xuICAgIGlzQmlnSW50KCkge1xuICAgICAgICByZXR1cm4gISEodGhpcy50eXBlLm1hdGNoKC9edT9pbnRbMC05XSskLykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBgYHRydWVgYCBhbmQgcHJvdmlkZXMgYSB0eXBlIGd1YXJkIGlzIHRoaXMgaXMgYSBbW1R5cGVkRGF0YV1dLlxuICAgICAqL1xuICAgIGlzRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5zdGFydHNXaXRoKFwiYnl0ZXNcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGBgdHJ1ZWBgIGFuZCBwcm92aWRlcyBhIHR5cGUgZ3VhcmQgaXMgdGhpcyBpcyBhIFtbVHlwZWRTdHJpbmddXS5cbiAgICAgKi9cbiAgICBpc1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnR5cGUgPT09IFwic3RyaW5nXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0aGUgdHVwbGUgbmFtZSwgaWYgdGhpcyBpcyBhIHR1cGxlLiBUaHJvd3Mgb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGdldCB0dXBsZU5hbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgIT09IFwidHVwbGVcIikge1xuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwibm90IGEgdHVwbGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuI29wdGlvbnM7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGlzIHR5cGUgYXMgYW4gYXJyYXlcbiAgICAvLyAtIGBudWxsYCBpbmRpY2F0ZXMgdGhlIGxlbmd0aCBpcyB1bmZvcmNlZCwgaXQgY291bGQgYmUgZHluYW1pY1xuICAgIC8vIC0gYC0xYCBpbmRpY2F0ZXMgdGhlIGxlbmd0aCBpcyBkeW5hbWljXG4gICAgLy8gLSBhbnkgb3RoZXIgdmFsdWUgaW5kaWNhdGVzIGl0IGlzIGEgc3RhdGljIGFycmF5IGFuZCBpcyBpdHMgbGVuZ3RoXG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgYXJyYXkgdHlwZSBvciBgYC0xYGAgaWYgaXQgaXMgZHluYW1pYy5cbiAgICAgKlxuICAgICAqICBUaHJvd3MgaWYgdGhlIHR5cGUgaXMgbm90IGFuIGFycmF5LlxuICAgICAqL1xuICAgIGdldCBhcnJheUxlbmd0aCgpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSAhPT0gXCJhcnJheVwiKSB7XG4gICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJub3QgYW4gYXJyYXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuI29wdGlvbnMgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy4jb3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy52YWx1ZSkubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIG5ldyAqKlR5cGVkKiogb2YgJSV0eXBlJSUgd2l0aCB0aGUgJSV2YWx1ZSUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tKHR5cGUsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHlwZWQoX2dhdXJkLCB0eXBlLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50OGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50OCh2KSB7IHJldHVybiBuKHYsIDgpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxNmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MTYodikgeyByZXR1cm4gbih2LCAxNik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDI0YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQyNCh2KSB7IHJldHVybiBuKHYsIDI0KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MzJgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDMyKHYpIHsgcmV0dXJuIG4odiwgMzIpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQ0MGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50NDAodikgeyByZXR1cm4gbih2LCA0MCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDQ4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQ0OCh2KSB7IHJldHVybiBuKHYsIDQ4KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50NTZgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDU2KHYpIHsgcmV0dXJuIG4odiwgNTYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQ2NGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50NjQodikgeyByZXR1cm4gbih2LCA2NCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDcyYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQ3Mih2KSB7IHJldHVybiBuKHYsIDcyKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50ODBgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDgwKHYpIHsgcmV0dXJuIG4odiwgODApOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQ4OGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50ODgodikgeyByZXR1cm4gbih2LCA4OCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDk2YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQ5Nih2KSB7IHJldHVybiBuKHYsIDk2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MTA0YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQxMDQodikgeyByZXR1cm4gbih2LCAxMDQpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxMTJgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDExMih2KSB7IHJldHVybiBuKHYsIDExMik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDEyMGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MTIwKHYpIHsgcmV0dXJuIG4odiwgMTIwKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MTI4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQxMjgodikgeyByZXR1cm4gbih2LCAxMjgpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxMzZgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDEzNih2KSB7IHJldHVybiBuKHYsIDEzNik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDE0NGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MTQ0KHYpIHsgcmV0dXJuIG4odiwgMTQ0KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MTUyYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQxNTIodikgeyByZXR1cm4gbih2LCAxNTIpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxNjBgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDE2MCh2KSB7IHJldHVybiBuKHYsIDE2MCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDE2OGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MTY4KHYpIHsgcmV0dXJuIG4odiwgMTY4KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MTc2YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQxNzYodikgeyByZXR1cm4gbih2LCAxNzYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQxODRgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDE4NCh2KSB7IHJldHVybiBuKHYsIDE4NCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDE5MmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MTkyKHYpIHsgcmV0dXJuIG4odiwgMTkyKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MjAwYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQyMDAodikgeyByZXR1cm4gbih2LCAyMDApOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQyMDhgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDIwOCh2KSB7IHJldHVybiBuKHYsIDIwOCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDIxNmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MjE2KHYpIHsgcmV0dXJuIG4odiwgMjE2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MjI0YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQyMjQodikgeyByZXR1cm4gbih2LCAyMjQpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQyMzJgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDIzMih2KSB7IHJldHVybiBuKHYsIDIzMik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDI0MGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50MjQwKHYpIHsgcmV0dXJuIG4odiwgMjQwKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50MjQ4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIHVpbnQyNDgodikgeyByZXR1cm4gbih2LCAyNDgpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHVpbnQyNTZgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdWludDI1Nih2KSB7IHJldHVybiBuKHYsIDI1Nik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdWludDI1NmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyB1aW50KHYpIHsgcmV0dXJuIG4odiwgMjU2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQ4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDgodikgeyByZXR1cm4gbih2LCAtOCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTZgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MTYodikgeyByZXR1cm4gbih2LCAtMTYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDI0YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDI0KHYpIHsgcmV0dXJuIG4odiwgLTI0KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQzMmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQzMih2KSB7IHJldHVybiBuKHYsIC0zMik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50NDBgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50NDAodikgeyByZXR1cm4gbih2LCAtNDApOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDQ4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDQ4KHYpIHsgcmV0dXJuIG4odiwgLTQ4KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQ1NmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQ1Nih2KSB7IHJldHVybiBuKHYsIC01Nik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50NjRgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50NjQodikgeyByZXR1cm4gbih2LCAtNjQpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDcyYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDcyKHYpIHsgcmV0dXJuIG4odiwgLTcyKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQ4MGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQ4MCh2KSB7IHJldHVybiBuKHYsIC04MCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50ODhgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50ODgodikgeyByZXR1cm4gbih2LCAtODgpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDk2YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDk2KHYpIHsgcmV0dXJuIG4odiwgLTk2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQxMDRgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MTA0KHYpIHsgcmV0dXJuIG4odiwgLTEwNCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTEyYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDExMih2KSB7IHJldHVybiBuKHYsIC0xMTIpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDEyMGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQxMjAodikgeyByZXR1cm4gbih2LCAtMTIwKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQxMjhgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MTI4KHYpIHsgcmV0dXJuIG4odiwgLTEyOCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTM2YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDEzNih2KSB7IHJldHVybiBuKHYsIC0xMzYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDE0NGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQxNDQodikgeyByZXR1cm4gbih2LCAtMTQ0KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQ1MmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQxNTIodikgeyByZXR1cm4gbih2LCAtMTUyKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQxNjBgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MTYwKHYpIHsgcmV0dXJuIG4odiwgLTE2MCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MTY4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDE2OCh2KSB7IHJldHVybiBuKHYsIC0xNjgpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDE3NmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQxNzYodikgeyByZXR1cm4gbih2LCAtMTc2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQxODRgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MTg0KHYpIHsgcmV0dXJuIG4odiwgLTE4NCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50OTJgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MTkyKHYpIHsgcmV0dXJuIG4odiwgLTE5Mik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MjAwYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDIwMCh2KSB7IHJldHVybiBuKHYsIC0yMDApOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDIwOGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQyMDgodikgeyByZXR1cm4gbih2LCAtMjA4KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQyMTZgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MjE2KHYpIHsgcmV0dXJuIG4odiwgLTIxNik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MjI0YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDIyNCh2KSB7IHJldHVybiBuKHYsIC0yMjQpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDIzMmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQyMzIodikgeyByZXR1cm4gbih2LCAtMjMyKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQyNDBgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50MjQwKHYpIHsgcmV0dXJuIG4odiwgLTI0MCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgaW50MjQ4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGludDI0OCh2KSB7IHJldHVybiBuKHYsIC0yNDgpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGludDI1NmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpbnQyNTYodikgeyByZXR1cm4gbih2LCAtMjU2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBpbnQyNTZgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaW50KHYpIHsgcmV0dXJuIG4odiwgLTI1Nik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMxYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMSh2KSB7IHJldHVybiBiKHYsIDEpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczIodikgeyByZXR1cm4gYih2LCAyKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczNgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMzKHYpIHsgcmV0dXJuIGIodiwgMyk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXM0YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzNCh2KSB7IHJldHVybiBiKHYsIDQpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzNWBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczUodikgeyByZXR1cm4gYih2LCA1KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczZgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXM2KHYpIHsgcmV0dXJuIGIodiwgNik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXM3YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzNyh2KSB7IHJldHVybiBiKHYsIDcpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzOGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczgodikgeyByZXR1cm4gYih2LCA4KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczlgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXM5KHYpIHsgcmV0dXJuIGIodiwgOSk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMxMGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczEwKHYpIHsgcmV0dXJuIGIodiwgMTApOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTFgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMxMSh2KSB7IHJldHVybiBiKHYsIDExKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczEyYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMTIodikgeyByZXR1cm4gYih2LCAxMik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMxM2BgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczEzKHYpIHsgcmV0dXJuIGIodiwgMTMpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTRgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMxNCh2KSB7IHJldHVybiBiKHYsIDE0KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczE1YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMTUodikgeyByZXR1cm4gYih2LCAxNSk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMxNmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczE2KHYpIHsgcmV0dXJuIGIodiwgMTYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMTdgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMxNyh2KSB7IHJldHVybiBiKHYsIDE3KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczE4YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMTgodikgeyByZXR1cm4gYih2LCAxOCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMxOWBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczE5KHYpIHsgcmV0dXJuIGIodiwgMTkpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjBgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMyMCh2KSB7IHJldHVybiBiKHYsIDIwKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczIxYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMjEodikgeyByZXR1cm4gYih2LCAyMSk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMyMmBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczIyKHYpIHsgcmV0dXJuIGIodiwgMjIpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjNgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMyMyh2KSB7IHJldHVybiBiKHYsIDIzKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczI0YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMjQodikgeyByZXR1cm4gYih2LCAyNCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMyNWBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczI1KHYpIHsgcmV0dXJuIGIodiwgMjUpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjZgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMyNih2KSB7IHJldHVybiBiKHYsIDI2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczI3YGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMjcodikgeyByZXR1cm4gYih2LCAyNyk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMyOGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczI4KHYpIHsgcmV0dXJuIGIodiwgMjgpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMjlgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMyOSh2KSB7IHJldHVybiBiKHYsIDI5KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlczMwYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGJ5dGVzMzAodikgeyByZXR1cm4gYih2LCAzMCk7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYnl0ZXMzMWBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlczMxKHYpIHsgcmV0dXJuIGIodiwgMzEpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJ5dGVzMzJgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYnl0ZXMzMih2KSB7IHJldHVybiBiKHYsIDMyKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBhZGRyZXNzYGAgdHlwZSBmb3IgJSV2JSUuXG4gICAgICovXG4gICAgc3RhdGljIGFkZHJlc3ModikgeyByZXR1cm4gbmV3IFR5cGVkKF9nYXVyZCwgXCJhZGRyZXNzXCIsIHYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYGJvb2xgYCB0eXBlIGZvciAlJXYlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYm9vbCh2KSB7IHJldHVybiBuZXcgVHlwZWQoX2dhdXJkLCBcImJvb2xcIiwgISF2KTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGBieXRlc2BgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBieXRlcyh2KSB7IHJldHVybiBuZXcgVHlwZWQoX2dhdXJkLCBcImJ5dGVzXCIsIHYpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBgYHN0cmluZ2BgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBzdHJpbmcodikgeyByZXR1cm4gbmV3IFR5cGVkKF9nYXVyZCwgXCJzdHJpbmdcIiwgdik7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgYXJyYXlgYCB0eXBlIGZvciAlJXYlJSwgYWxsb3dpbmcgJSVkeW5hbWljJSUgbGVuZ3RoLlxuICAgICAqL1xuICAgIHN0YXRpYyBhcnJheSh2LCBkeW5hbWljKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vdCBpbXBsZW1lbnRlZCB5ZXRcIik7XG4gICAgICAgIHJldHVybiBuZXcgVHlwZWQoX2dhdXJkLCBcImFycmF5XCIsIHYsIGR5bmFtaWMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IGBgdHVwbGVgYCB0eXBlIGZvciAlJXYlJSwgd2l0aCB0aGUgb3B0aW9uYWwgJSVuYW1lJSUuXG4gICAgICovXG4gICAgc3RhdGljIHR1cGxlKHYsIG5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm90IGltcGxlbWVudGVkIHlldFwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUeXBlZChfZ2F1cmQsIFwidHVwbGVcIiwgdiwgbmFtZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gYSBuZXcgYGB1aW50OGBgIHR5cGUgZm9yICUldiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBvdmVycmlkZXModikge1xuICAgICAgICByZXR1cm4gbmV3IFR5cGVkKF9nYXVyZCwgXCJvdmVycmlkZXNcIiwgT2JqZWN0LmFzc2lnbih7fSwgdikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0cnVlIG9ubHkgaWYgJSV2YWx1ZSUlIGlzIGEgW1tUeXBlZF1dIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHN0YXRpYyBpc1R5cGVkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWVcbiAgICAgICAgICAgICYmIHR5cGVvZiAodmFsdWUpID09PSBcIm9iamVjdFwiXG4gICAgICAgICAgICAmJiBcIl90eXBlZFN5bWJvbFwiIGluIHZhbHVlXG4gICAgICAgICAgICAmJiB2YWx1ZS5fdHlwZWRTeW1ib2wgPT09IF90eXBlZFN5bWJvbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBJZiB0aGUgdmFsdWUgaXMgYSBbW1R5cGVkXV0gaW5zdGFuY2UsIHZhbGlkYXRlcyB0aGUgdW5kZXJseWluZyB2YWx1ZVxuICAgICAqICBhbmQgcmV0dXJucyBpdCwgb3RoZXJ3aXNlIHJldHVybnMgdmFsdWUgZGlyZWN0bHkuXG4gICAgICpcbiAgICAgKiAgVGhpcyBpcyB1c2VmdWwgZm9yIGZ1bmN0aW9ucyB0aGF0IHdpdGggdG8gYWNjZXB0IGVpdGhlciBhIFtbVHlwZWRdXVxuICAgICAqICBvYmplY3Qgb3IgdmFsdWVzLlxuICAgICAqL1xuICAgIHN0YXRpYyBkZXJlZmVyZW5jZSh2YWx1ZSwgdHlwZSkge1xuICAgICAgICBpZiAoVHlwZWQuaXNUeXBlZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS50eXBlICE9PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIHR5cGU6IGV4cGVjZXRkICR7dHlwZX0sIGdvdCAke3ZhbHVlLnR5cGV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVkLmpzLm1hcCIsImltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiLi4vLi4vYWRkcmVzcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgdG9CZUhleCB9IGZyb20gXCIuLi8uLi91dGlscy9tYXRocy5qc1wiO1xuaW1wb3J0IHsgVHlwZWQgfSBmcm9tIFwiLi4vdHlwZWQuanNcIjtcbmltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXIuanNcIjtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBBZGRyZXNzQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lKSB7XG4gICAgICAgIHN1cGVyKFwiYWRkcmVzc1wiLCBcImFkZHJlc3NcIiwgbG9jYWxOYW1lLCBmYWxzZSk7XG4gICAgfVxuICAgIGRlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIF92YWx1ZSkge1xuICAgICAgICBsZXQgdmFsdWUgPSBUeXBlZC5kZXJlZmVyZW5jZShfdmFsdWUsIFwic3RyaW5nXCIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFsdWUgPSBnZXRBZGRyZXNzKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90aHJvd0Vycm9yKGVycm9yLm1lc3NhZ2UsIF92YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlci53cml0ZVZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gZ2V0QWRkcmVzcyh0b0JlSGV4KHJlYWRlci5yZWFkVmFsdWUoKSwgMjApKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzLmpzLm1hcCIsImltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXIuanNcIjtcbi8qKlxuICogIENsb25lcyB0aGUgZnVuY3Rpb25hbGl0eSBvZiBhbiBleGlzdGluZyBDb2RlciwgYnV0IHdpdGhvdXQgYSBsb2NhbE5hbWVcbiAqXG4gKiAgQF9pZ25vcmVcbiAqL1xuZXhwb3J0IGNsYXNzIEFub255bW91c0NvZGVyIGV4dGVuZHMgQ29kZXIge1xuICAgIGNvZGVyO1xuICAgIGNvbnN0cnVjdG9yKGNvZGVyKSB7XG4gICAgICAgIHN1cGVyKGNvZGVyLm5hbWUsIGNvZGVyLnR5cGUsIFwiX1wiLCBjb2Rlci5keW5hbWljKTtcbiAgICAgICAgdGhpcy5jb2RlciA9IGNvZGVyO1xuICAgIH1cbiAgICBkZWZhdWx0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGVyLmRlZmF1bHRWYWx1ZSgpO1xuICAgIH1cbiAgICBlbmNvZGUod3JpdGVyLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2Rlci5lbmNvZGUod3JpdGVyLCB2YWx1ZSk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29kZXIuZGVjb2RlKHJlYWRlcik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5vbnltb3VzLmpzLm1hcCIsImltcG9ydCB7IGRlZmluZVByb3BlcnRpZXMsIGlzRXJyb3IsIGFzc2VydCwgYXNzZXJ0QXJndW1lbnQsIGFzc2VydEFyZ3VtZW50Q291bnQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IFR5cGVkIH0gZnJvbSBcIi4uL3R5cGVkLmpzXCI7XG5pbXBvcnQgeyBDb2RlciwgUmVzdWx0LCBXb3JkU2l6ZSwgV3JpdGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXIuanNcIjtcbmltcG9ydCB7IEFub255bW91c0NvZGVyIH0gZnJvbSBcIi4vYW5vbnltb3VzLmpzXCI7XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFjayh3cml0ZXIsIGNvZGVycywgdmFsdWVzKSB7XG4gICAgbGV0IGFycmF5VmFsdWVzID0gW107XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgICAgICBhcnJheVZhbHVlcyA9IHZhbHVlcztcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWVzICYmIHR5cGVvZiAodmFsdWVzKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBsZXQgdW5pcXVlID0ge307XG4gICAgICAgIGFycmF5VmFsdWVzID0gY29kZXJzLm1hcCgoY29kZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBjb2Rlci5sb2NhbE5hbWU7XG4gICAgICAgICAgICBhc3NlcnQobmFtZSwgXCJjYW5ub3QgZW5jb2RlIG9iamVjdCBmb3Igc2lnbmF0dXJlIHdpdGggbWlzc2luZyBuYW1lc1wiLCBcIklOVkFMSURfQVJHVU1FTlRcIiwgeyBhcmd1bWVudDogXCJ2YWx1ZXNcIiwgaW5mbzogeyBjb2RlciB9LCB2YWx1ZTogdmFsdWVzIH0pO1xuICAgICAgICAgICAgYXNzZXJ0KCF1bmlxdWVbbmFtZV0sIFwiY2Fubm90IGVuY29kZSBvYmplY3QgZm9yIHNpZ25hdHVyZSB3aXRoIGR1cGxpY2F0ZSBuYW1lc1wiLCBcIklOVkFMSURfQVJHVU1FTlRcIiwgeyBhcmd1bWVudDogXCJ2YWx1ZXNcIiwgaW5mbzogeyBjb2RlciB9LCB2YWx1ZTogdmFsdWVzIH0pO1xuICAgICAgICAgICAgdW5pcXVlW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXNbbmFtZV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwiaW52YWxpZCB0dXBsZSB2YWx1ZVwiLCBcInR1cGxlXCIsIHZhbHVlcyk7XG4gICAgfVxuICAgIGFzc2VydEFyZ3VtZW50KGNvZGVycy5sZW5ndGggPT09IGFycmF5VmFsdWVzLmxlbmd0aCwgXCJ0eXBlcy92YWx1ZSBsZW5ndGggbWlzbWF0Y2hcIiwgXCJ0dXBsZVwiLCB2YWx1ZXMpO1xuICAgIGxldCBzdGF0aWNXcml0ZXIgPSBuZXcgV3JpdGVyKCk7XG4gICAgbGV0IGR5bmFtaWNXcml0ZXIgPSBuZXcgV3JpdGVyKCk7XG4gICAgbGV0IHVwZGF0ZUZ1bmNzID0gW107XG4gICAgY29kZXJzLmZvckVhY2goKGNvZGVyLCBpbmRleCkgPT4ge1xuICAgICAgICBsZXQgdmFsdWUgPSBhcnJheVZhbHVlc1tpbmRleF07XG4gICAgICAgIGlmIChjb2Rlci5keW5hbWljKSB7XG4gICAgICAgICAgICAvLyBHZXQgY3VycmVudCBkeW5hbWljIG9mZnNldCAoZm9yIHRoZSBmdXR1cmUgcG9pbnRlcilcbiAgICAgICAgICAgIGxldCBkeW5hbWljT2Zmc2V0ID0gZHluYW1pY1dyaXRlci5sZW5ndGg7XG4gICAgICAgICAgICAvLyBFbmNvZGUgdGhlIGR5bmFtaWMgdmFsdWUgaW50byB0aGUgZHluYW1pY1dyaXRlclxuICAgICAgICAgICAgY29kZXIuZW5jb2RlKGR5bmFtaWNXcml0ZXIsIHZhbHVlKTtcbiAgICAgICAgICAgIC8vIFByZXBhcmUgdG8gcG9wdWxhdGUgdGhlIGNvcnJlY3Qgb2Zmc2V0IG9uY2Ugd2UgYXJlIGRvbmVcbiAgICAgICAgICAgIGxldCB1cGRhdGVGdW5jID0gc3RhdGljV3JpdGVyLndyaXRlVXBkYXRhYmxlVmFsdWUoKTtcbiAgICAgICAgICAgIHVwZGF0ZUZ1bmNzLnB1c2goKGJhc2VPZmZzZXQpID0+IHtcbiAgICAgICAgICAgICAgICB1cGRhdGVGdW5jKGJhc2VPZmZzZXQgKyBkeW5hbWljT2Zmc2V0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29kZXIuZW5jb2RlKHN0YXRpY1dyaXRlciwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gQmFja2ZpbGwgYWxsIHRoZSBkeW5hbWljIG9mZnNldHMsIG5vdyB0aGF0IHdlIGtub3cgdGhlIHN0YXRpYyBsZW5ndGhcbiAgICB1cGRhdGVGdW5jcy5mb3JFYWNoKChmdW5jKSA9PiB7IGZ1bmMoc3RhdGljV3JpdGVyLmxlbmd0aCk7IH0pO1xuICAgIGxldCBsZW5ndGggPSB3cml0ZXIuYXBwZW5kV3JpdGVyKHN0YXRpY1dyaXRlcik7XG4gICAgbGVuZ3RoICs9IHdyaXRlci5hcHBlbmRXcml0ZXIoZHluYW1pY1dyaXRlcik7XG4gICAgcmV0dXJuIGxlbmd0aDtcbn1cbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bnBhY2socmVhZGVyLCBjb2RlcnMpIHtcbiAgICBsZXQgdmFsdWVzID0gW107XG4gICAgbGV0IGtleXMgPSBbXTtcbiAgICAvLyBBIHJlYWRlciBhbmNob3JlZCB0byB0aGlzIGJhc2VcbiAgICBsZXQgYmFzZVJlYWRlciA9IHJlYWRlci5zdWJSZWFkZXIoMCk7XG4gICAgY29kZXJzLmZvckVhY2goKGNvZGVyKSA9PiB7XG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XG4gICAgICAgIGlmIChjb2Rlci5keW5hbWljKSB7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gcmVhZGVyLnJlYWRJbmRleCgpO1xuICAgICAgICAgICAgbGV0IG9mZnNldFJlYWRlciA9IGJhc2VSZWFkZXIuc3ViUmVhZGVyKG9mZnNldCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gY29kZXIuZGVjb2RlKG9mZnNldFJlYWRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBDYW5ub3QgcmVjb3ZlciBmcm9tIHRoaXNcbiAgICAgICAgICAgICAgICBpZiAoaXNFcnJvcihlcnJvciwgXCJCVUZGRVJfT1ZFUlJVTlwiKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICB2YWx1ZS5iYXNlVHlwZSA9IGNvZGVyLm5hbWU7XG4gICAgICAgICAgICAgICAgdmFsdWUubmFtZSA9IGNvZGVyLmxvY2FsTmFtZTtcbiAgICAgICAgICAgICAgICB2YWx1ZS50eXBlID0gY29kZXIudHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjb2Rlci5kZWNvZGUocmVhZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIENhbm5vdCByZWNvdmVyIGZyb20gdGhpc1xuICAgICAgICAgICAgICAgIGlmIChpc0Vycm9yKGVycm9yLCBcIkJVRkZFUl9PVkVSUlVOXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGVycm9yO1xuICAgICAgICAgICAgICAgIHZhbHVlLmJhc2VUeXBlID0gY29kZXIubmFtZTtcbiAgICAgICAgICAgICAgICB2YWx1ZS5uYW1lID0gY29kZXIubG9jYWxOYW1lO1xuICAgICAgICAgICAgICAgIHZhbHVlLnR5cGUgPSBjb2Rlci50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmVzdGlnYXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAga2V5cy5wdXNoKGNvZGVyLmxvY2FsTmFtZSB8fCBudWxsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUmVzdWx0LmZyb21JdGVtcyh2YWx1ZXMsIGtleXMpO1xufVxuLyoqXG4gKiAgQF9pZ25vcmVcbiAqL1xuZXhwb3J0IGNsYXNzIEFycmF5Q29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29kZXI7XG4gICAgbGVuZ3RoO1xuICAgIGNvbnN0cnVjdG9yKGNvZGVyLCBsZW5ndGgsIGxvY2FsTmFtZSkge1xuICAgICAgICBjb25zdCB0eXBlID0gKGNvZGVyLnR5cGUgKyBcIltcIiArIChsZW5ndGggPj0gMCA/IGxlbmd0aCA6IFwiXCIpICsgXCJdXCIpO1xuICAgICAgICBjb25zdCBkeW5hbWljID0gKGxlbmd0aCA9PT0gLTEgfHwgY29kZXIuZHluYW1pYyk7XG4gICAgICAgIHN1cGVyKFwiYXJyYXlcIiwgdHlwZSwgbG9jYWxOYW1lLCBkeW5hbWljKTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IGNvZGVyLCBsZW5ndGggfSk7XG4gICAgfVxuICAgIGRlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgLy8gVmVyaWZpZXMgdGhlIGNoaWxkIGNvZGVyIGlzIHZhbGlkIChldmVuIGlmIHRoZSBhcnJheSBpcyBkeW5hbWljIG9yIDAtbGVuZ3RoKVxuICAgICAgICBjb25zdCBkZWZhdWx0Q2hpbGQgPSB0aGlzLmNvZGVyLmRlZmF1bHRWYWx1ZSgpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChkZWZhdWx0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIF92YWx1ZSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IFR5cGVkLmRlcmVmZXJlbmNlKF92YWx1ZSwgXCJhcnJheVwiKTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5fdGhyb3dFcnJvcihcImV4cGVjdGVkIGFycmF5IHZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY291bnQgPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgaWYgKGNvdW50ID09PSAtMSkge1xuICAgICAgICAgICAgY291bnQgPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICB3cml0ZXIud3JpdGVWYWx1ZSh2YWx1ZS5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydEFyZ3VtZW50Q291bnQodmFsdWUubGVuZ3RoLCBjb3VudCwgXCJjb2RlciBhcnJheVwiICsgKHRoaXMubG9jYWxOYW1lID8gKFwiIFwiICsgdGhpcy5sb2NhbE5hbWUpIDogXCJcIikpO1xuICAgICAgICBsZXQgY29kZXJzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvZGVycy5wdXNoKHRoaXMuY29kZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYWNrKHdyaXRlciwgY29kZXJzLCB2YWx1ZSk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgbGV0IGNvdW50ID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIGlmIChjb3VudCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvdW50ID0gcmVhZGVyLnJlYWRJbmRleCgpO1xuICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGVyZSBpcyAqcm91Z2hseSogZW5vdWdoIGRhdGEgdG8gZW5zdXJlXG4gICAgICAgICAgICAvLyBzdHJheSByYW5kb20gZGF0YSBpcyBub3QgYmVpbmcgcmVhZCBhcyBhIGxlbmd0aC4gRWFjaFxuICAgICAgICAgICAgLy8gc2xvdCByZXF1aXJlcyBhdCBsZWFzdCAzMiBieXRlcyBmb3IgdGhlaXIgdmFsdWUgKG9yIDMyXG4gICAgICAgICAgICAvLyBieXRlcyBhcyBhIGxpbmsgdG8gdGhlIGRhdGEpLiBUaGlzIGNvdWxkIHVzZSBhIG11Y2hcbiAgICAgICAgICAgIC8vIHRpZ2h0ZXIgYm91bmQsIGJ1dCB3ZSBhcmUgZXJyb3Jpbmcgb24gdGhlIHNpZGUgb2Ygc2FmZXR5LlxuICAgICAgICAgICAgYXNzZXJ0KGNvdW50ICogV29yZFNpemUgPD0gcmVhZGVyLmRhdGFMZW5ndGgsIFwiaW5zdWZmaWNpZW50IGRhdGEgbGVuZ3RoXCIsIFwiQlVGRkVSX09WRVJSVU5cIiwgeyBidWZmZXI6IHJlYWRlci5ieXRlcywgb2Zmc2V0OiBjb3VudCAqIFdvcmRTaXplLCBsZW5ndGg6IHJlYWRlci5kYXRhTGVuZ3RoIH0pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb2RlcnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb2RlcnMucHVzaChuZXcgQW5vbnltb3VzQ29kZXIodGhpcy5jb2RlcikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bnBhY2socmVhZGVyLCBjb2RlcnMpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycmF5LmpzLm1hcCIsImltcG9ydCB7IFR5cGVkIH0gZnJvbSBcIi4uL3R5cGVkLmpzXCI7XG5pbXBvcnQgeyBDb2RlciB9IGZyb20gXCIuL2Fic3RyYWN0LWNvZGVyLmpzXCI7XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5leHBvcnQgY2xhc3MgQm9vbGVhbkNvZGVyIGV4dGVuZHMgQ29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsTmFtZSkge1xuICAgICAgICBzdXBlcihcImJvb2xcIiwgXCJib29sXCIsIGxvY2FsTmFtZSwgZmFsc2UpO1xuICAgIH1cbiAgICBkZWZhdWx0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgX3ZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gVHlwZWQuZGVyZWZlcmVuY2UoX3ZhbHVlLCBcImJvb2xcIik7XG4gICAgICAgIHJldHVybiB3cml0ZXIud3JpdGVWYWx1ZSh2YWx1ZSA/IDEgOiAwKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gISFyZWFkZXIucmVhZFZhbHVlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vbGVhbi5qcy5tYXAiLCJpbXBvcnQgeyBnZXRCeXRlc0NvcHksIGhleGxpZnkgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXIuanNcIjtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBEeW5hbWljQnl0ZXNDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBsb2NhbE5hbWUpIHtcbiAgICAgICAgc3VwZXIodHlwZSwgdHlwZSwgbG9jYWxOYW1lLCB0cnVlKTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gXCIweFwiO1xuICAgIH1cbiAgICBlbmNvZGUod3JpdGVyLCB2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IGdldEJ5dGVzQ29weSh2YWx1ZSk7XG4gICAgICAgIGxldCBsZW5ndGggPSB3cml0ZXIud3JpdGVWYWx1ZSh2YWx1ZS5sZW5ndGgpO1xuICAgICAgICBsZW5ndGggKz0gd3JpdGVyLndyaXRlQnl0ZXModmFsdWUpO1xuICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiByZWFkZXIucmVhZEJ5dGVzKHJlYWRlci5yZWFkSW5kZXgoKSwgdHJ1ZSk7XG4gICAgfVxufVxuLyoqXG4gKiAgQF9pZ25vcmVcbiAqL1xuZXhwb3J0IGNsYXNzIEJ5dGVzQ29kZXIgZXh0ZW5kcyBEeW5hbWljQnl0ZXNDb2RlciB7XG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lKSB7XG4gICAgICAgIHN1cGVyKFwiYnl0ZXNcIiwgbG9jYWxOYW1lKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gaGV4bGlmeShzdXBlci5kZWNvZGUocmVhZGVyKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZXMuanMubWFwIiwiaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcywgZ2V0Qnl0ZXNDb3B5LCBoZXhsaWZ5IH0gZnJvbSBcIi4uLy4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBUeXBlZCB9IGZyb20gXCIuLi90eXBlZC5qc1wiO1xuaW1wb3J0IHsgQ29kZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2Rlci5qc1wiO1xuLyoqXG4gKiAgQF9pZ25vcmVcbiAqL1xuZXhwb3J0IGNsYXNzIEZpeGVkQnl0ZXNDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICBzaXplO1xuICAgIGNvbnN0cnVjdG9yKHNpemUsIGxvY2FsTmFtZSkge1xuICAgICAgICBsZXQgbmFtZSA9IFwiYnl0ZXNcIiArIFN0cmluZyhzaXplKTtcbiAgICAgICAgc3VwZXIobmFtZSwgbmFtZSwgbG9jYWxOYW1lLCBmYWxzZSk7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBzaXplIH0sIHsgc2l6ZTogXCJudW1iZXJcIiB9KTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gKFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIpLnN1YnN0cmluZygwLCAyICsgdGhpcy5zaXplICogMik7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIF92YWx1ZSkge1xuICAgICAgICBsZXQgZGF0YSA9IGdldEJ5dGVzQ29weShUeXBlZC5kZXJlZmVyZW5jZShfdmFsdWUsIHRoaXMudHlwZSkpO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggIT09IHRoaXMuc2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5fdGhyb3dFcnJvcihcImluY29ycmVjdCBkYXRhIGxlbmd0aFwiLCBfdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXIud3JpdGVCeXRlcyhkYXRhKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gaGV4bGlmeShyZWFkZXIucmVhZEJ5dGVzKHRoaXMuc2l6ZSkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpeGVkLWJ5dGVzLmpzLm1hcCIsImltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXIuanNcIjtcbmNvbnN0IEVtcHR5ID0gbmV3IFVpbnQ4QXJyYXkoW10pO1xuLyoqXG4gKiAgQF9pZ25vcmVcbiAqL1xuZXhwb3J0IGNsYXNzIE51bGxDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpIHtcbiAgICAgICAgc3VwZXIoXCJudWxsXCIsIFwiXCIsIGxvY2FsTmFtZSwgZmFsc2UpO1xuICAgIH1cbiAgICBkZWZhdWx0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbmNvZGUod3JpdGVyLCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fdGhyb3dFcnJvcihcIm5vdCBudWxsXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlQnl0ZXMoRW1wdHkpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJlYWRlci5yZWFkQnl0ZXMoMCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bGwuanMubWFwIiwiaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcywgZnJvbVR3b3MsIGdldEJpZ0ludCwgbWFzaywgdG9Ud29zIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBUeXBlZCB9IGZyb20gXCIuLi90eXBlZC5qc1wiO1xuaW1wb3J0IHsgQ29kZXIsIFdvcmRTaXplIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXIuanNcIjtcbmNvbnN0IEJOXzAgPSBCaWdJbnQoMCk7XG5jb25zdCBCTl8xID0gQmlnSW50KDEpO1xuY29uc3QgQk5fTUFYX1VJTlQyNTYgPSBCaWdJbnQoXCIweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIik7XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5leHBvcnQgY2xhc3MgTnVtYmVyQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgc2l6ZTtcbiAgICBzaWduZWQ7XG4gICAgY29uc3RydWN0b3Ioc2l6ZSwgc2lnbmVkLCBsb2NhbE5hbWUpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9ICgoc2lnbmVkID8gXCJpbnRcIiA6IFwidWludFwiKSArIChzaXplICogOCkpO1xuICAgICAgICBzdXBlcihuYW1lLCBuYW1lLCBsb2NhbE5hbWUsIGZhbHNlKTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IHNpemUsIHNpZ25lZCB9LCB7IHNpemU6IFwibnVtYmVyXCIsIHNpZ25lZDogXCJib29sZWFuXCIgfSk7XG4gICAgfVxuICAgIGRlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIF92YWx1ZSkge1xuICAgICAgICBsZXQgdmFsdWUgPSBnZXRCaWdJbnQoVHlwZWQuZGVyZWZlcmVuY2UoX3ZhbHVlLCB0aGlzLnR5cGUpKTtcbiAgICAgICAgLy8gQ2hlY2sgYm91bmRzIGFyZSBzYWZlIGZvciBlbmNvZGluZ1xuICAgICAgICBsZXQgbWF4VWludFZhbHVlID0gbWFzayhCTl9NQVhfVUlOVDI1NiwgV29yZFNpemUgKiA4KTtcbiAgICAgICAgaWYgKHRoaXMuc2lnbmVkKSB7XG4gICAgICAgICAgICBsZXQgYm91bmRzID0gbWFzayhtYXhVaW50VmFsdWUsICh0aGlzLnNpemUgKiA4KSAtIDEpO1xuICAgICAgICAgICAgaWYgKHZhbHVlID4gYm91bmRzIHx8IHZhbHVlIDwgLShib3VuZHMgKyBCTl8xKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJ2YWx1ZSBvdXQtb2YtYm91bmRzXCIsIF92YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9IHRvVHdvcyh2YWx1ZSwgOCAqIFdvcmRTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA8IEJOXzAgfHwgdmFsdWUgPiBtYXNrKG1heFVpbnRWYWx1ZSwgdGhpcy5zaXplICogOCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJ2YWx1ZSBvdXQtb2YtYm91bmRzXCIsIF92YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlci53cml0ZVZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICBsZXQgdmFsdWUgPSBtYXNrKHJlYWRlci5yZWFkVmFsdWUoKSwgdGhpcy5zaXplICogOCk7XG4gICAgICAgIGlmICh0aGlzLnNpZ25lZCkge1xuICAgICAgICAgICAgdmFsdWUgPSBmcm9tVHdvcyh2YWx1ZSwgdGhpcy5zaXplICogOCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bWJlci5qcy5tYXAiLCIvKipcbiAqICBVc2luZyBzdHJpbmdzIGluIEV0aGVyZXVtIChvciBhbnkgc2VjdXJpdHktYmFzZCBzeXN0ZW0pIHJlcXVpcmVzXG4gKiAgYWRkaXRpb25hbCBjYXJlLiBUaGVzZSB1dGlsaXRpZXMgYXR0ZW1wdCB0byBtaXRpZ2F0ZSBzb21lIG9mIHRoZVxuICogIHNhZmV0eSBpc3N1ZXMgYXMgd2VsbCBhcyBwcm92aWRlIHRoZSBhYmlsaXR5IHRvIHJlY292ZXIgYW5kIGFuYWx5c2VcbiAqICBzdHJpbmdzLlxuICpcbiAqICBAX3N1YnNlY3Rpb24gYXBpL3V0aWxzOlN0cmluZ3MgYW5kIFVURi04ICBbYWJvdXQtc3RyaW5nc11cbiAqL1xuaW1wb3J0IHsgZ2V0Qnl0ZXMgfSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5pbXBvcnQgeyBhc3NlcnRBcmd1bWVudCwgYXNzZXJ0Tm9ybWFsaXplIH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG5mdW5jdGlvbiBlcnJvckZ1bmMocmVhc29uLCBvZmZzZXQsIGJ5dGVzLCBvdXRwdXQsIGJhZENvZGVwb2ludCkge1xuICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBgaW52YWxpZCBjb2RlcG9pbnQgYXQgb2Zmc2V0ICR7b2Zmc2V0fTsgJHtyZWFzb259YCwgXCJieXRlc1wiLCBieXRlcyk7XG59XG5mdW5jdGlvbiBpZ25vcmVGdW5jKHJlYXNvbiwgb2Zmc2V0LCBieXRlcywgb3V0cHV0LCBiYWRDb2RlcG9pbnQpIHtcbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBpbnZhbGlkIHByZWZpeCAoaW5jbHVkaW5nIHN0cmF5IGNvbnRpbnVhdGlvbiksIHNraXAgYW55IGFkZGl0aW9uYWwgY29udGludWF0aW9uIGJ5dGVzXG4gICAgaWYgKHJlYXNvbiA9PT0gXCJCQURfUFJFRklYXCIgfHwgcmVhc29uID09PSBcIlVORVhQRUNURURfQ09OVElOVUVcIikge1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAobGV0IG8gPSBvZmZzZXQgKyAxOyBvIDwgYnl0ZXMubGVuZ3RoOyBvKyspIHtcbiAgICAgICAgICAgIGlmIChieXRlc1tvXSA+PiA2ICE9PSAweDAyKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIC8vIFRoaXMgYnl0ZSBydW5zIHVzIHBhc3QgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzbyBqdXN0IGp1bXAgdG8gdGhlIGVuZFxuICAgIC8vIChidXQgdGhlIGZpcnN0IGJ5dGUgd2FzIHJlYWQgYWxyZWFkeSByZWFkIGFuZCB0aGVyZWZvcmUgc2tpcHBlZClcbiAgICBpZiAocmVhc29uID09PSBcIk9WRVJSVU5cIikge1xuICAgICAgICByZXR1cm4gYnl0ZXMubGVuZ3RoIC0gb2Zmc2V0IC0gMTtcbiAgICB9XG4gICAgLy8gTm90aGluZyB0byBza2lwXG4gICAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiByZXBsYWNlRnVuYyhyZWFzb24sIG9mZnNldCwgYnl0ZXMsIG91dHB1dCwgYmFkQ29kZXBvaW50KSB7XG4gICAgLy8gT3ZlcmxvbmcgcmVwcmVzZW50YXRpb25zIGFyZSBvdGhlcndpc2UgXCJ2YWxpZFwiIGNvZGUgcG9pbnRzOyBqdXN0IG5vbi1kZWlzdGluZ3Rpc2hlZFxuICAgIGlmIChyZWFzb24gPT09IFwiT1ZFUkxPTkdcIikge1xuICAgICAgICBhc3NlcnRBcmd1bWVudCh0eXBlb2YgKGJhZENvZGVwb2ludCkgPT09IFwibnVtYmVyXCIsIFwiaW52YWxpZCBiYWQgY29kZSBwb2ludCBmb3IgcmVwbGFjZW1lbnRcIiwgXCJiYWRDb2RlcG9pbnRcIiwgYmFkQ29kZXBvaW50KTtcbiAgICAgICAgb3V0cHV0LnB1c2goYmFkQ29kZXBvaW50KTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIC8vIFB1dCB0aGUgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGludG8gdGhlIG91dHB1dFxuICAgIG91dHB1dC5wdXNoKDB4ZmZmZCk7XG4gICAgLy8gT3RoZXJ3aXNlLCBwcm9jZXNzIGFzIGlmIGlnbm9yaW5nIGVycm9yc1xuICAgIHJldHVybiBpZ25vcmVGdW5jKHJlYXNvbiwgb2Zmc2V0LCBieXRlcywgb3V0cHV0LCBiYWRDb2RlcG9pbnQpO1xufVxuLyoqXG4gKiAgQSBoYW5kZnVsIG9mIHBvcHVsYXIsIGJ1aWx0LWluIFVURi04IGVycm9yIGhhbmRsaW5nIHN0cmF0ZWdpZXMuXG4gKlxuICogICoqYGBcImVycm9yXCJgYCoqIC0gdGhyb3dzIG9uIEFOWSBpbGxlZ2FsIFVURi04IHNlcXVlbmNlIG9yXG4gKiAgbm9uLWNhbm9uaWNhbCAob3ZlcmxvbmcpIGNvZGVwb2ludHMgKHRoaXMgaXMgdGhlIGRlZmF1bHQpXG4gKlxuICogICoqYGBcImlnbm9yZVwiYGAqKiAtIHNpbGVudGx5IGRyb3BzIGFueSBpbGxlZ2FsIFVURi04IHNlcXVlbmNlXG4gKiAgYW5kIGFjY2VwdHMgbm9uLWNhbm9uaWNhbCAob3ZlcmxvbmcpIGNvZGVwb2ludHNcbiAqXG4gKiAgKipgYFwicmVwbGFjZVwiYGAqKiAtIHJlcGxhY2UgYW55IGlsbGVnYWwgVVRGLTggc2VxdWVuY2Ugd2l0aCB0aGVcbiAqICBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXIgKGkuZS4gYGBcIlxcXFx1ZmZmZFwiYGApIGFuZCBhY2NlcHRzXG4gKiAgbm9uLWNhbm9uaWNhbCAob3ZlcmxvbmcpIGNvZGVwb2ludHNcbiAqXG4gKiAgQHJldHVybnM6IFJlY29yZDxcImVycm9yXCIgfCBcImlnbm9yZVwiIHwgXCJyZXBsYWNlXCIsIFV0ZjhFcnJvckZ1bmM+XG4gKi9cbmV4cG9ydCBjb25zdCBVdGY4RXJyb3JGdW5jcyA9IE9iamVjdC5mcmVlemUoe1xuICAgIGVycm9yOiBlcnJvckZ1bmMsXG4gICAgaWdub3JlOiBpZ25vcmVGdW5jLFxuICAgIHJlcGxhY2U6IHJlcGxhY2VGdW5jXG59KTtcbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTMzNTY0OTMvZGVjb2RlLXV0Zi04LXdpdGgtamF2YXNjcmlwdCMxMzY5MTQ5OVxuZnVuY3Rpb24gZ2V0VXRmOENvZGVQb2ludHMoX2J5dGVzLCBvbkVycm9yKSB7XG4gICAgaWYgKG9uRXJyb3IgPT0gbnVsbCkge1xuICAgICAgICBvbkVycm9yID0gVXRmOEVycm9yRnVuY3MuZXJyb3I7XG4gICAgfVxuICAgIGNvbnN0IGJ5dGVzID0gZ2V0Qnl0ZXMoX2J5dGVzLCBcImJ5dGVzXCIpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBpID0gMDtcbiAgICAvLyBJbnZhbGlkIGJ5dGVzIGFyZSBpZ25vcmVkXG4gICAgd2hpbGUgKGkgPCBieXRlcy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYyA9IGJ5dGVzW2krK107XG4gICAgICAgIC8vIDB4eHggeHh4eFxuICAgICAgICBpZiAoYyA+PiA3ID09PSAwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChjKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIE11bHRpYnl0ZTsgaG93IG1hbnkgYnl0ZXMgbGVmdCBmb3IgdGhpcyBjaGFyYWN0ZXI/XG4gICAgICAgIGxldCBleHRyYUxlbmd0aCA9IG51bGw7XG4gICAgICAgIGxldCBvdmVybG9uZ01hc2sgPSBudWxsO1xuICAgICAgICAvLyAxMTB4IHh4eHggMTB4eCB4eHh4XG4gICAgICAgIGlmICgoYyAmIDB4ZTApID09PSAweGMwKSB7XG4gICAgICAgICAgICBleHRyYUxlbmd0aCA9IDE7XG4gICAgICAgICAgICBvdmVybG9uZ01hc2sgPSAweDdmO1xuICAgICAgICAgICAgLy8gMTExMCB4eHh4IDEweHggeHh4eCAxMHh4IHh4eHhcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoYyAmIDB4ZjApID09PSAweGUwKSB7XG4gICAgICAgICAgICBleHRyYUxlbmd0aCA9IDI7XG4gICAgICAgICAgICBvdmVybG9uZ01hc2sgPSAweDdmZjtcbiAgICAgICAgICAgIC8vIDExMTEgMHh4eCAxMHh4IHh4eHggMTB4eCB4eHh4IDEweHggeHh4eFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChjICYgMHhmOCkgPT09IDB4ZjApIHtcbiAgICAgICAgICAgIGV4dHJhTGVuZ3RoID0gMztcbiAgICAgICAgICAgIG92ZXJsb25nTWFzayA9IDB4ZmZmZjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICgoYyAmIDB4YzApID09PSAweDgwKSB7XG4gICAgICAgICAgICAgICAgaSArPSBvbkVycm9yKFwiVU5FWFBFQ1RFRF9DT05USU5VRVwiLCBpIC0gMSwgYnl0ZXMsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpICs9IG9uRXJyb3IoXCJCQURfUFJFRklYXCIsIGkgLSAxLCBieXRlcywgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIERvIHdlIGhhdmUgZW5vdWdoIGJ5dGVzIGluIG91ciBkYXRhP1xuICAgICAgICBpZiAoaSAtIDEgKyBleHRyYUxlbmd0aCA+PSBieXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGkgKz0gb25FcnJvcihcIk9WRVJSVU5cIiwgaSAtIDEsIGJ5dGVzLCByZXN1bHQpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBsZW5ndGggcHJlZml4IGZyb20gdGhlIGNoYXJcbiAgICAgICAgbGV0IHJlcyA9IGMgJiAoKDEgPDwgKDggLSBleHRyYUxlbmd0aCAtIDEpKSAtIDEpO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGV4dHJhTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGxldCBuZXh0Q2hhciA9IGJ5dGVzW2ldO1xuICAgICAgICAgICAgLy8gSW52YWxpZCBjb250aW51YXRpb24gYnl0ZVxuICAgICAgICAgICAgaWYgKChuZXh0Q2hhciAmIDB4YzApICE9IDB4ODApIHtcbiAgICAgICAgICAgICAgICBpICs9IG9uRXJyb3IoXCJNSVNTSU5HX0NPTlRJTlVFXCIsIGksIGJ5dGVzLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIHJlcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA7XG4gICAgICAgICAgICByZXMgPSAocmVzIDw8IDYpIHwgKG5leHRDaGFyICYgMHgzZik7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2VlIGFib3ZlIGxvb3AgZm9yIGludmFsaWQgY29udGludWF0aW9uIGJ5dGVcbiAgICAgICAgaWYgKHJlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWF4aW11bSBjb2RlIHBvaW50XG4gICAgICAgIGlmIChyZXMgPiAweDEwZmZmZikge1xuICAgICAgICAgICAgaSArPSBvbkVycm9yKFwiT1VUX09GX1JBTkdFXCIsIGkgLSAxIC0gZXh0cmFMZW5ndGgsIGJ5dGVzLCByZXN1bHQsIHJlcyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXNlcnZlZCBmb3IgVVRGLTE2IHN1cnJvZ2F0ZSBoYWx2ZXNcbiAgICAgICAgaWYgKHJlcyA+PSAweGQ4MDAgJiYgcmVzIDw9IDB4ZGZmZikge1xuICAgICAgICAgICAgaSArPSBvbkVycm9yKFwiVVRGMTZfU1VSUk9HQVRFXCIsIGkgLSAxIC0gZXh0cmFMZW5ndGgsIGJ5dGVzLCByZXN1bHQsIHJlcyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBmb3Igb3Zlcmxvbmcgc2VxdWVuY2VzIChtb3JlIGJ5dGVzIHRoYW4gbmVlZGVkKVxuICAgICAgICBpZiAocmVzIDw9IG92ZXJsb25nTWFzaykge1xuICAgICAgICAgICAgaSArPSBvbkVycm9yKFwiT1ZFUkxPTkdcIiwgaSAtIDEgLSBleHRyYUxlbmd0aCwgYnl0ZXMsIHJlc3VsdCwgcmVzKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKHJlcyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE4NzI5NDA1L2hvdy10by1jb252ZXJ0LXV0Zjgtc3RyaW5nLXRvLWJ5dGUtYXJyYXlcbi8qKlxuICogIFJldHVybnMgdGhlIFVURi04IGJ5dGUgcmVwcmVzZW50YXRpb24gb2YgJSVzdHIlJS5cbiAqXG4gKiAgSWYgJSVmb3JtJSUgaXMgc3BlY2lmaWVkLCB0aGUgc3RyaW5nIGlzIG5vcm1hbGl6ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1V0ZjhCeXRlcyhzdHIsIGZvcm0pIHtcbiAgICBhc3NlcnRBcmd1bWVudCh0eXBlb2YgKHN0cikgPT09IFwic3RyaW5nXCIsIFwiaW52YWxpZCBzdHJpbmcgdmFsdWVcIiwgXCJzdHJcIiwgc3RyKTtcbiAgICBpZiAoZm9ybSAhPSBudWxsKSB7XG4gICAgICAgIGFzc2VydE5vcm1hbGl6ZShmb3JtKTtcbiAgICAgICAgc3RyID0gc3RyLm5vcm1hbGl6ZShmb3JtKTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKChjID4+IDYpIHwgMHhjMCk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgoYyAmIDB4M2YpIHwgMHg4MCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGMgJiAweGZjMDApID09IDB4ZDgwMCkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgY29uc3QgYzIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGkgPCBzdHIubGVuZ3RoICYmICgoYzIgJiAweGZjMDApID09PSAweGRjMDApLCBcImludmFsaWQgc3Vycm9nYXRlIHBhaXJcIiwgXCJzdHJcIiwgc3RyKTtcbiAgICAgICAgICAgIC8vIFN1cnJvZ2F0ZSBQYWlyXG4gICAgICAgICAgICBjb25zdCBwYWlyID0gMHgxMDAwMCArICgoYyAmIDB4MDNmZikgPDwgMTApICsgKGMyICYgMHgwM2ZmKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKChwYWlyID4+IDE4KSB8IDB4ZjApO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKChwYWlyID4+IDEyKSAmIDB4M2YpIHwgMHg4MCk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgoKHBhaXIgPj4gNikgJiAweDNmKSB8IDB4ODApO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKHBhaXIgJiAweDNmKSB8IDB4ODApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKGMgPj4gMTIpIHwgMHhlMCk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgoKGMgPj4gNikgJiAweDNmKSB8IDB4ODApO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKGMgJiAweDNmKSB8IDB4ODApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShyZXN1bHQpO1xufVxuO1xuLy9leHBvcnQgXG5mdW5jdGlvbiBfdG9VdGY4U3RyaW5nKGNvZGVQb2ludHMpIHtcbiAgICByZXR1cm4gY29kZVBvaW50cy5tYXAoKGNvZGVQb2ludCkgPT4ge1xuICAgICAgICBpZiAoY29kZVBvaW50IDw9IDB4ZmZmZikge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICAgICAgfVxuICAgICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMDtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKCgoY29kZVBvaW50ID4+IDEwKSAmIDB4M2ZmKSArIDB4ZDgwMCksICgoY29kZVBvaW50ICYgMHgzZmYpICsgMHhkYzAwKSk7XG4gICAgfSkuam9pbihcIlwiKTtcbn1cbi8qKlxuICogIFJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRlZCBieSB0aGUgVVRGLTggZGF0YSAlJWJ5dGVzJSUuXG4gKlxuICogIFdoZW4gJSVvbkVycm9yJSUgZnVuY3Rpb24gaXMgc3BlY2lmaWVkLCBpdCBpcyBjYWxsZWQgb24gVVRGLThcbiAqICBlcnJvcnMgYWxsb3dpbmcgcmVjb3ZlcnkgdXNpbmcgdGhlIFtbVXRmOEVycm9yRnVuY11dIEFQSS5cbiAqICAoZGVmYXVsdDogW2Vycm9yXShVdGY4RXJyb3JGdW5jcykpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1V0ZjhTdHJpbmcoYnl0ZXMsIG9uRXJyb3IpIHtcbiAgICByZXR1cm4gX3RvVXRmOFN0cmluZyhnZXRVdGY4Q29kZVBvaW50cyhieXRlcywgb25FcnJvcikpO1xufVxuLyoqXG4gKiAgUmV0dXJucyB0aGUgVVRGLTggY29kZS1wb2ludHMgZm9yICUlc3RyJSUuXG4gKlxuICogIElmICUlZm9ybSUlIGlzIHNwZWNpZmllZCwgdGhlIHN0cmluZyBpcyBub3JtYWxpemVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9VdGY4Q29kZVBvaW50cyhzdHIsIGZvcm0pIHtcbiAgICByZXR1cm4gZ2V0VXRmOENvZGVQb2ludHModG9VdGY4Qnl0ZXMoc3RyLCBmb3JtKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGY4LmpzLm1hcCIsImltcG9ydCB7IHRvVXRmOEJ5dGVzLCB0b1V0ZjhTdHJpbmcgfSBmcm9tIFwiLi4vLi4vdXRpbHMvdXRmOC5qc1wiO1xuaW1wb3J0IHsgVHlwZWQgfSBmcm9tIFwiLi4vdHlwZWQuanNcIjtcbmltcG9ydCB7IER5bmFtaWNCeXRlc0NvZGVyIH0gZnJvbSBcIi4vYnl0ZXMuanNcIjtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJpbmdDb2RlciBleHRlbmRzIER5bmFtaWNCeXRlc0NvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpIHtcbiAgICAgICAgc3VwZXIoXCJzdHJpbmdcIiwgbG9jYWxOYW1lKTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgX3ZhbHVlKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5lbmNvZGUod3JpdGVyLCB0b1V0ZjhCeXRlcyhUeXBlZC5kZXJlZmVyZW5jZShfdmFsdWUsIFwic3RyaW5nXCIpKSk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHRvVXRmOFN0cmluZyhzdXBlci5kZWNvZGUocmVhZGVyKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5nLmpzLm1hcCIsImltcG9ydCB7IGRlZmluZVByb3BlcnRpZXMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcHJvcGVydGllcy5qc1wiO1xuaW1wb3J0IHsgVHlwZWQgfSBmcm9tIFwiLi4vdHlwZWQuanNcIjtcbmltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXIuanNcIjtcbmltcG9ydCB7IHBhY2ssIHVucGFjayB9IGZyb20gXCIuL2FycmF5LmpzXCI7XG4vKipcbiAqICBAX2lnbm9yZVxuICovXG5leHBvcnQgY2xhc3MgVHVwbGVDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICBjb2RlcnM7XG4gICAgY29uc3RydWN0b3IoY29kZXJzLCBsb2NhbE5hbWUpIHtcbiAgICAgICAgbGV0IGR5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgdHlwZXMgPSBbXTtcbiAgICAgICAgY29kZXJzLmZvckVhY2goKGNvZGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoY29kZXIuZHluYW1pYykge1xuICAgICAgICAgICAgICAgIGR5bmFtaWMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHlwZXMucHVzaChjb2Rlci50eXBlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHR5cGUgPSAoXCJ0dXBsZShcIiArIHR5cGVzLmpvaW4oXCIsXCIpICsgXCIpXCIpO1xuICAgICAgICBzdXBlcihcInR1cGxlXCIsIHR5cGUsIGxvY2FsTmFtZSwgZHluYW1pYyk7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBjb2RlcnM6IE9iamVjdC5mcmVlemUoY29kZXJzLnNsaWNlKCkpIH0pO1xuICAgIH1cbiAgICBkZWZhdWx0VmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgICAgICB0aGlzLmNvZGVycy5mb3JFYWNoKChjb2RlcikgPT4ge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goY29kZXIuZGVmYXVsdFZhbHVlKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gV2Ugb25seSBvdXRwdXQgbmFtZWQgcHJvcGVydGllcyBmb3IgdW5pcXVlbHkgbmFtZWQgY29kZXJzXG4gICAgICAgIGNvbnN0IHVuaXF1ZU5hbWVzID0gdGhpcy5jb2RlcnMucmVkdWNlKChhY2N1bSwgY29kZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBjb2Rlci5sb2NhbE5hbWU7XG4gICAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgICAgIGlmICghYWNjdW1bbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjdW1bbmFtZV0gPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhY2N1bVtuYW1lXSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIC8vIEFkZCBuYW1lZCB2YWx1ZXNcbiAgICAgICAgdGhpcy5jb2RlcnMuZm9yRWFjaCgoY29kZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgbmFtZSA9IGNvZGVyLmxvY2FsTmFtZTtcbiAgICAgICAgICAgIGlmICghbmFtZSB8fCB1bmlxdWVOYW1lc1tuYW1lXSAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuYW1lID09PSBcImxlbmd0aFwiKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IFwiX2xlbmd0aFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWVzW25hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKHZhbHVlcyk7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIF92YWx1ZSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IFR5cGVkLmRlcmVmZXJlbmNlKF92YWx1ZSwgXCJ0dXBsZVwiKTtcbiAgICAgICAgcmV0dXJuIHBhY2sod3JpdGVyLCB0aGlzLmNvZGVycywgdmFsdWUpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiB1bnBhY2socmVhZGVyLCB0aGlzLmNvZGVycyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHVwbGUuanMubWFwIiwiaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSBcIi4uL2NyeXB0by9pbmRleC5qc1wiO1xuaW1wb3J0IHsgdG9VdGY4Qnl0ZXMgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbi8qKlxuICogIEEgc2ltcGxlIGhhc2hpbmcgZnVuY3Rpb24gd2hpY2ggb3BlcmF0ZXMgb24gVVRGLTggc3RyaW5ncyB0b1xuICogIGNvbXB1dGUgYW4gMzItYnl0ZSBpZGVudGlmaWVyLlxuICpcbiAqICBUaGlzIHNpbXBseSBjb21wdXRlcyB0aGUgW1VURi04IGJ5dGVzXSh0b1V0ZjhCeXRlcykgYW5kIGNvbXB1dGVzXG4gKiAgdGhlIFtba2VjY2FrMjU2XV0uXG4gKlxuICogIEBleGFtcGxlOlxuICogICAgaWQoXCJoZWxsbyB3b3JsZFwiKVxuICogICAgLy9fcmVzdWx0OlxuICovXG5leHBvcnQgZnVuY3Rpb24gaWQodmFsdWUpIHtcbiAgICByZXR1cm4ga2VjY2FrMjU2KHRvVXRmOEJ5dGVzKHZhbHVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZC5qcy5tYXAiLCIvKipcbiAqICBBIGZyYWdtZW50IGlzIGEgc2luZ2xlIGl0ZW0gZnJvbSBhbiBBQkksIHdoaWNoIG1heSByZXByZXNlbnQgYW55IG9mOlxuICpcbiAqICAtIFtGdW5jdGlvbnNdKEZ1bmN0aW9uRnJhZ21lbnQpXG4gKiAgLSBbRXZlbnRzXShFdmVudEZyYWdtZW50KVxuICogIC0gW0NvbnN0cnVjdG9yc10oQ29uc3RydWN0b3JGcmFnbWVudClcbiAqICAtIEN1c3RvbSBbRXJyb3JzXShFcnJvckZyYWdtZW50KVxuICogIC0gW0ZhbGxiYWNrIG9yIFJlY2VpdmVdKEZhbGxiYWNrRnJhZ21lbnQpIGZ1bmN0aW9uc1xuICpcbiAqICBAX3N1YnNlY3Rpb24gYXBpL2FiaS9hYmktY29kZXI6RnJhZ21lbnRzICBbYWJvdXQtZnJhZ21lbnRzXVxuICovXG5pbXBvcnQgeyBkZWZpbmVQcm9wZXJ0aWVzLCBnZXRCaWdJbnQsIGdldE51bWJlciwgYXNzZXJ0LCBhc3NlcnRQcml2YXRlLCBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaWQgfSBmcm9tIFwiLi4vaGFzaC9pbmRleC5qc1wiO1xuO1xuLy8gWyBcImFcIiwgXCJiXCIgXSA9PiB7IFwiYVwiOiAxLCBcImJcIjogMSB9XG5mdW5jdGlvbiBzZXRpZnkoaXRlbXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgU2V0KCk7XG4gICAgaXRlbXMuZm9yRWFjaCgoaykgPT4gcmVzdWx0LmFkZChrKSk7XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUocmVzdWx0KTtcbn1cbmNvbnN0IF9rd1Zpc2liRGVwbG95ID0gXCJleHRlcm5hbCBwdWJsaWMgcGF5YWJsZSBvdmVycmlkZVwiO1xuY29uc3QgS3dWaXNpYkRlcGxveSA9IHNldGlmeShfa3dWaXNpYkRlcGxveS5zcGxpdChcIiBcIikpO1xuLy8gVmlzaWJpbGl0eSBLZXl3b3Jkc1xuY29uc3QgX2t3VmlzaWIgPSBcImNvbnN0YW50IGV4dGVybmFsIGludGVybmFsIHBheWFibGUgcHJpdmF0ZSBwdWJsaWMgcHVyZSB2aWV3IG92ZXJyaWRlXCI7XG5jb25zdCBLd1Zpc2liID0gc2V0aWZ5KF9rd1Zpc2liLnNwbGl0KFwiIFwiKSk7XG5jb25zdCBfa3dUeXBlcyA9IFwiY29uc3RydWN0b3IgZXJyb3IgZXZlbnQgZmFsbGJhY2sgZnVuY3Rpb24gcmVjZWl2ZSBzdHJ1Y3RcIjtcbmNvbnN0IEt3VHlwZXMgPSBzZXRpZnkoX2t3VHlwZXMuc3BsaXQoXCIgXCIpKTtcbmNvbnN0IF9rd01vZGlmaWVycyA9IFwiY2FsbGRhdGEgbWVtb3J5IHN0b3JhZ2UgcGF5YWJsZSBpbmRleGVkXCI7XG5jb25zdCBLd01vZGlmaWVycyA9IHNldGlmeShfa3dNb2RpZmllcnMuc3BsaXQoXCIgXCIpKTtcbmNvbnN0IF9rd090aGVyID0gXCJ0dXBsZSByZXR1cm5zXCI7XG4vLyBBbGwgS2V5d29yZHNcbmNvbnN0IF9rZXl3b3JkcyA9IFtfa3dUeXBlcywgX2t3TW9kaWZpZXJzLCBfa3dPdGhlciwgX2t3VmlzaWJdLmpvaW4oXCIgXCIpO1xuY29uc3QgS2V5d29yZHMgPSBzZXRpZnkoX2tleXdvcmRzLnNwbGl0KFwiIFwiKSk7XG4vLyBTaW5nbGUgY2hhcmFjdGVyIHRva2Vuc1xuY29uc3QgU2ltcGxlVG9rZW5zID0ge1xuICAgIFwiKFwiOiBcIk9QRU5fUEFSRU5cIiwgXCIpXCI6IFwiQ0xPU0VfUEFSRU5cIixcbiAgICBcIltcIjogXCJPUEVOX0JSQUNLRVRcIiwgXCJdXCI6IFwiQ0xPU0VfQlJBQ0tFVFwiLFxuICAgIFwiLFwiOiBcIkNPTU1BXCIsIFwiQFwiOiBcIkFUXCJcbn07XG4vLyBQYXJzZXIgcmVnZXhlcyB0byBjb25zdW1lIHRoZSBuZXh0IHRva2VuXG5jb25zdCByZWdleFdoaXRlc3BhY2VQcmVmaXggPSBuZXcgUmVnRXhwKFwiXihcXFxccyopXCIpO1xuY29uc3QgcmVnZXhOdW1iZXJQcmVmaXggPSBuZXcgUmVnRXhwKFwiXihbMC05XSspXCIpO1xuY29uc3QgcmVnZXhJZFByZWZpeCA9IG5ldyBSZWdFeHAoXCJeKFthLXpBLVokX11bYS16QS1aMC05JF9dKilcIik7XG4vLyBQYXJzZXIgcmVnZXhzIHRvIGNoZWNrIHZhbGlkaXR5XG5jb25zdCByZWdleElkID0gbmV3IFJlZ0V4cChcIl4oW2EtekEtWiRfXVthLXpBLVowLTkkX10qKSRcIik7XG5jb25zdCByZWdleFR5cGUgPSBuZXcgUmVnRXhwKFwiXihhZGRyZXNzfGJvb2x8Ynl0ZXMoWzAtOV0qKXxzdHJpbmd8dT9pbnQoWzAtOV0qKSkkXCIpO1xuY2xhc3MgVG9rZW5TdHJpbmcge1xuICAgICNvZmZzZXQ7XG4gICAgI3Rva2VucztcbiAgICBnZXQgb2Zmc2V0KCkgeyByZXR1cm4gdGhpcy4jb2Zmc2V0OyB9XG4gICAgZ2V0IGxlbmd0aCgpIHsgcmV0dXJuIHRoaXMuI3Rva2Vucy5sZW5ndGggLSB0aGlzLiNvZmZzZXQ7IH1cbiAgICBjb25zdHJ1Y3Rvcih0b2tlbnMpIHtcbiAgICAgICAgdGhpcy4jb2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy4jdG9rZW5zID0gdG9rZW5zLnNsaWNlKCk7XG4gICAgfVxuICAgIGNsb25lKCkgeyByZXR1cm4gbmV3IFRva2VuU3RyaW5nKHRoaXMuI3Rva2Vucyk7IH1cbiAgICByZXNldCgpIHsgdGhpcy4jb2Zmc2V0ID0gMDsgfVxuICAgICNzdWJUb2tlblN0cmluZyhmcm9tID0gMCwgdG8gPSAwKSB7XG4gICAgICAgIHJldHVybiBuZXcgVG9rZW5TdHJpbmcodGhpcy4jdG9rZW5zLnNsaWNlKGZyb20sIHRvKS5tYXAoKHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKE9iamVjdC5hc3NpZ24oe30sIHQsIHtcbiAgICAgICAgICAgICAgICBtYXRjaDogKHQubWF0Y2ggLSBmcm9tKSxcbiAgICAgICAgICAgICAgICBsaW5rQmFjazogKHQubGlua0JhY2sgLSBmcm9tKSxcbiAgICAgICAgICAgICAgICBsaW5rTmV4dDogKHQubGlua05leHQgLSBmcm9tKSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvLyBQb3BzIGFuZCByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgbmV4dCB0b2tlbiwgaWYgaXQgaXMgYSBrZXl3b3JkIGluIGFsbG93ZWQ7IHRocm93cyBpZiBvdXQgb2YgdG9rZW5zXG4gICAgcG9wS2V5d29yZChhbGxvd2VkKSB7XG4gICAgICAgIGNvbnN0IHRvcCA9IHRoaXMucGVlaygpO1xuICAgICAgICBpZiAodG9wLnR5cGUgIT09IFwiS0VZV09SRFwiIHx8ICFhbGxvd2VkLmhhcyh0b3AudGV4dCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQga2V5d29yZCAke3RvcC50ZXh0fWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnBvcCgpLnRleHQ7XG4gICAgfVxuICAgIC8vIFBvcHMgYW5kIHJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBuZXh0IHRva2VuIGlmIGl0IGlzIGB0eXBlYDsgdGhyb3dzIGlmIG91dCBvZiB0b2tlbnNcbiAgICBwb3BUeXBlKHR5cGUpIHtcbiAgICAgICAgaWYgKHRoaXMucGVlaygpLnR5cGUgIT09IHR5cGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvcCA9IHRoaXMucGVlaygpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBleHBlY3RlZCAke3R5cGV9OyBnb3QgJHt0b3AudHlwZX0gJHtKU09OLnN0cmluZ2lmeSh0b3AudGV4dCl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucG9wKCkudGV4dDtcbiAgICB9XG4gICAgLy8gUG9wcyBhbmQgcmV0dXJucyBhIFwiKFwiIFRPS0VOUyBcIilcIlxuICAgIHBvcFBhcmVuKCkge1xuICAgICAgICBjb25zdCB0b3AgPSB0aGlzLnBlZWsoKTtcbiAgICAgICAgaWYgKHRvcC50eXBlICE9PSBcIk9QRU5fUEFSRU5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYmFkIHN0YXJ0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuI3N1YlRva2VuU3RyaW5nKHRoaXMuI29mZnNldCArIDEsIHRvcC5tYXRjaCArIDEpO1xuICAgICAgICB0aGlzLiNvZmZzZXQgPSB0b3AubWF0Y2ggKyAxO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyBQb3BzIGFuZCByZXR1cm5zIHRoZSBpdGVtcyB3aXRoaW4gXCIoXCIgSVRFTTEgXCIsXCIgSVRFTTIgXCIsXCIgLi4uIFwiKVwiXG4gICAgcG9wUGFyYW1zKCkge1xuICAgICAgICBjb25zdCB0b3AgPSB0aGlzLnBlZWsoKTtcbiAgICAgICAgaWYgKHRvcC50eXBlICE9PSBcIk9QRU5fUEFSRU5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYmFkIHN0YXJ0XCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICB3aGlsZSAodGhpcy4jb2Zmc2V0IDwgdG9wLm1hdGNoIC0gMSkge1xuICAgICAgICAgICAgY29uc3QgbGluayA9IHRoaXMucGVlaygpLmxpbmtOZXh0O1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy4jc3ViVG9rZW5TdHJpbmcodGhpcy4jb2Zmc2V0ICsgMSwgbGluaykpO1xuICAgICAgICAgICAgdGhpcy4jb2Zmc2V0ID0gbGluaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNvZmZzZXQgPSB0b3AubWF0Y2ggKyAxO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSB0b3AgVG9rZW4sIHRocm93aW5nIGlmIG91dCBvZiB0b2tlbnNcbiAgICBwZWVrKCkge1xuICAgICAgICBpZiAodGhpcy4jb2Zmc2V0ID49IHRoaXMuI3Rva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm91dC1vZi1ib3VuZHNcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuI3Rva2Vuc1t0aGlzLiNvZmZzZXRdO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSBuZXh0IHZhbHVlLCBpZiBpdCBpcyBhIGtleXdvcmQgaW4gYGFsbG93ZWRgXG4gICAgcGVla0tleXdvcmQoYWxsb3dlZCkge1xuICAgICAgICBjb25zdCB0b3AgPSB0aGlzLnBlZWtUeXBlKFwiS0VZV09SRFwiKTtcbiAgICAgICAgcmV0dXJuICh0b3AgIT0gbnVsbCAmJiBhbGxvd2VkLmhhcyh0b3ApKSA/IHRvcCA6IG51bGw7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBuZXh0IHRva2VuIGlmIGl0IGlzIGB0eXBlYFxuICAgIHBlZWtUeXBlKHR5cGUpIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b3AgPSB0aGlzLnBlZWsoKTtcbiAgICAgICAgcmV0dXJuICh0b3AudHlwZSA9PT0gdHlwZSkgPyB0b3AudGV4dCA6IG51bGw7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIG5leHQgdG9rZW47IHRocm93cyBpZiBvdXQgb2YgdG9rZW5zXG4gICAgcG9wKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnBlZWsoKTtcbiAgICAgICAgdGhpcy4jb2Zmc2V0Kys7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBjb25zdCB0b2tlbnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuI29mZnNldDsgaSA8IHRoaXMuI3Rva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLiN0b2tlbnNbaV07XG4gICAgICAgICAgICB0b2tlbnMucHVzaChgJHt0b2tlbi50eXBlfToke3Rva2VuLnRleHR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGA8VG9rZW5TdHJpbmcgJHt0b2tlbnMuam9pbihcIiBcIil9PmA7XG4gICAgfVxufVxuZnVuY3Rpb24gbGV4KHRleHQpIHtcbiAgICBjb25zdCB0b2tlbnMgPSBbXTtcbiAgICBjb25zdCB0aHJvd0Vycm9yID0gKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSAob2Zmc2V0IDwgdGV4dC5sZW5ndGgpID8gSlNPTi5zdHJpbmdpZnkodGV4dFtvZmZzZXRdKSA6IFwiJEVPSVwiO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgdG9rZW4gJHt0b2tlbn0gYXQgJHtvZmZzZXR9OiAke21lc3NhZ2V9YCk7XG4gICAgfTtcbiAgICBsZXQgYnJhY2tldHMgPSBbXTtcbiAgICBsZXQgY29tbWFzID0gW107XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgd2hpbGUgKG9mZnNldCA8IHRleHQubGVuZ3RoKSB7XG4gICAgICAgIC8vIFN0cmlwIG9mZiBhbnkgbGVhZGluZyB3aGl0ZXNwYWNlXG4gICAgICAgIGxldCBjdXIgPSB0ZXh0LnN1YnN0cmluZyhvZmZzZXQpO1xuICAgICAgICBsZXQgbWF0Y2ggPSBjdXIubWF0Y2gocmVnZXhXaGl0ZXNwYWNlUHJlZml4KTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBvZmZzZXQgKz0gbWF0Y2hbMV0ubGVuZ3RoO1xuICAgICAgICAgICAgY3VyID0gdGV4dC5zdWJzdHJpbmcob2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b2tlbiA9IHsgZGVwdGg6IGJyYWNrZXRzLmxlbmd0aCwgbGlua0JhY2s6IC0xLCBsaW5rTmV4dDogLTEsIG1hdGNoOiAtMSwgdHlwZTogXCJcIiwgdGV4dDogXCJcIiwgb2Zmc2V0LCB2YWx1ZTogLTEgfTtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBsZXQgdHlwZSA9IChTaW1wbGVUb2tlbnNbY3VyWzBdXSB8fCBcIlwiKTtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIHRva2VuLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgdG9rZW4udGV4dCA9IGN1clswXTtcbiAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwiT1BFTl9QQVJFTlwiKSB7XG4gICAgICAgICAgICAgICAgYnJhY2tldHMucHVzaCh0b2tlbnMubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgY29tbWFzLnB1c2godG9rZW5zLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PSBcIkNMT1NFX1BBUkVOXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoYnJhY2tldHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IoXCJubyBtYXRjaGluZyBvcGVuIGJyYWNrZXRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRva2VuLm1hdGNoID0gYnJhY2tldHMucG9wKCk7XG4gICAgICAgICAgICAgICAgKHRva2Vuc1t0b2tlbi5tYXRjaF0pLm1hdGNoID0gdG9rZW5zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgdG9rZW4uZGVwdGgtLTtcbiAgICAgICAgICAgICAgICB0b2tlbi5saW5rQmFjayA9IGNvbW1hcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAodG9rZW5zW3Rva2VuLmxpbmtCYWNrXSkubGlua05leHQgPSB0b2tlbnMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09IFwiQ09NTUFcIikge1xuICAgICAgICAgICAgICAgIHRva2VuLmxpbmtCYWNrID0gY29tbWFzLnBvcCgpO1xuICAgICAgICAgICAgICAgICh0b2tlbnNbdG9rZW4ubGlua0JhY2tdKS5saW5rTmV4dCA9IHRva2Vucy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIGNvbW1hcy5wdXNoKHRva2Vucy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09IFwiT1BFTl9CUkFDS0VUXCIpIHtcbiAgICAgICAgICAgICAgICB0b2tlbi50eXBlID0gXCJCUkFDS0VUXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlID09PSBcIkNMT1NFX0JSQUNLRVRcIikge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgQ0xPU0VfQlJBQ0tFVFxuICAgICAgICAgICAgICAgIGxldCBzdWZmaXggPSB0b2tlbnMucG9wKCkudGV4dDtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCA+IDAgJiYgdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXS50eXBlID09PSBcIk5VTUJFUlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdG9rZW5zLnBvcCgpLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHN1ZmZpeCA9IHZhbHVlICsgc3VmZml4O1xuICAgICAgICAgICAgICAgICAgICAodG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXSkudmFsdWUgPSBnZXROdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCA9PT0gMCB8fCB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdLnR5cGUgIT09IFwiQlJBQ0tFVFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1pc3Npbmcgb3BlbmluZyBicmFja2V0XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAodG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXSkudGV4dCArPSBzdWZmaXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBtYXRjaCA9IGN1ci5tYXRjaChyZWdleElkUHJlZml4KTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICB0b2tlbi50ZXh0ID0gbWF0Y2hbMV07XG4gICAgICAgICAgICBvZmZzZXQgKz0gdG9rZW4udGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoS2V5d29yZHMuaGFzKHRva2VuLnRleHQpKSB7XG4gICAgICAgICAgICAgICAgdG9rZW4udHlwZSA9IFwiS0VZV09SRFwiO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRva2VuLnRleHQubWF0Y2gocmVnZXhUeXBlKSkge1xuICAgICAgICAgICAgICAgIHRva2VuLnR5cGUgPSBcIlRZUEVcIjtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRva2VuLnR5cGUgPSBcIklEXCI7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBtYXRjaCA9IGN1ci5tYXRjaChyZWdleE51bWJlclByZWZpeCk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgdG9rZW4udGV4dCA9IG1hdGNoWzFdO1xuICAgICAgICAgICAgdG9rZW4udHlwZSA9IFwiTlVNQkVSXCI7XG4gICAgICAgICAgICBvZmZzZXQgKz0gdG9rZW4udGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuZXhwZWN0ZWQgdG9rZW4gJHtKU09OLnN0cmluZ2lmeShjdXJbMF0pfSBhdCBwb3NpdGlvbiAke29mZnNldH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBUb2tlblN0cmluZyh0b2tlbnMubWFwKCh0KSA9PiBPYmplY3QuZnJlZXplKHQpKSk7XG59XG4vLyBDaGVjayBvbmx5IG9uZSBvZiBgYWxsb3dlZGAgaXMgaW4gYHNldGBcbmZ1bmN0aW9uIGFsbG93U2luZ2xlKHNldCwgYWxsb3dlZCkge1xuICAgIGxldCBpbmNsdWRlZCA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGFsbG93ZWQua2V5cygpKSB7XG4gICAgICAgIGlmIChzZXQuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIGluY2x1ZGVkLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5jbHVkZWQubGVuZ3RoID4gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvbmZsaWN0aW5nIHR5cGVzOiAke2luY2x1ZGVkLmpvaW4oXCIsIFwiKX1gKTtcbiAgICB9XG59XG4vLyBGdW5jdGlvbnMgdG8gcHJvY2VzcyBhIFNvbGlkaXR5IFNpZ25hdHVyZSBUb2tlblN0cmluZyBmcm9tIGxlZnQtdG8tcmlnaHQgZm9yLi4uXG4vLyAuLi50aGUgbmFtZSB3aXRoIGFuIG9wdGlvbmFsIHR5cGUsIHJldHVybmluZyB0aGUgbmFtZVxuZnVuY3Rpb24gY29uc3VtZU5hbWUodHlwZSwgdG9rZW5zKSB7XG4gICAgaWYgKHRva2Vucy5wZWVrS2V5d29yZChLd1R5cGVzKSkge1xuICAgICAgICBjb25zdCBrZXl3b3JkID0gdG9rZW5zLnBvcCgpLnRleHQ7XG4gICAgICAgIGlmIChrZXl3b3JkICE9PSB0eXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGV4cGVjdGVkICR7dHlwZX0sIGdvdCAke2tleXdvcmR9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRva2Vucy5wb3BUeXBlKFwiSURcIik7XG59XG4vLyAuLi5hbGwga2V5d29yZHMgbWF0Y2hpbmcgYWxsb3dlZCwgcmV0dXJuaW5nIHRoZSBrZXl3b3Jkc1xuZnVuY3Rpb24gY29uc3VtZUtleXdvcmRzKHRva2VucywgYWxsb3dlZCkge1xuICAgIGNvbnN0IGtleXdvcmRzID0gbmV3IFNldCgpO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGNvbnN0IGtleXdvcmQgPSB0b2tlbnMucGVla1R5cGUoXCJLRVlXT1JEXCIpO1xuICAgICAgICBpZiAoa2V5d29yZCA9PSBudWxsIHx8IChhbGxvd2VkICYmICFhbGxvd2VkLmhhcyhrZXl3b3JkKSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRva2Vucy5wb3AoKTtcbiAgICAgICAgaWYgKGtleXdvcmRzLmhhcyhrZXl3b3JkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkdXBsaWNhdGUga2V5d29yZHM6ICR7SlNPTi5zdHJpbmdpZnkoa2V5d29yZCl9YCk7XG4gICAgICAgIH1cbiAgICAgICAga2V5d29yZHMuYWRkKGtleXdvcmQpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShrZXl3b3Jkcyk7XG59XG4vLyAuLi5hbGwgdmlzaWJpbGl0eSBrZXl3b3JkcywgcmV0dXJuaW5nIHRoZSBjb2FsZXNjZWQgbXV0YWJpbGl0eVxuZnVuY3Rpb24gY29uc3VtZU11dGFiaWxpdHkodG9rZW5zKSB7XG4gICAgbGV0IG1vZGlmaWVycyA9IGNvbnN1bWVLZXl3b3Jkcyh0b2tlbnMsIEt3VmlzaWIpO1xuICAgIC8vIERldGVjdCBjb25mbGljdGluZyBtb2RpZmllcnNcbiAgICBhbGxvd1NpbmdsZShtb2RpZmllcnMsIHNldGlmeShcImNvbnN0YW50IHBheWFibGUgbm9ucGF5YWJsZVwiLnNwbGl0KFwiIFwiKSkpO1xuICAgIGFsbG93U2luZ2xlKG1vZGlmaWVycywgc2V0aWZ5KFwicHVyZSB2aWV3IHBheWFibGUgbm9ucGF5YWJsZVwiLnNwbGl0KFwiIFwiKSkpO1xuICAgIC8vIFByb2Nlc3MgbXV0YWJpbGl0eSBzdGF0ZXNcbiAgICBpZiAobW9kaWZpZXJzLmhhcyhcInZpZXdcIikpIHtcbiAgICAgICAgcmV0dXJuIFwidmlld1wiO1xuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLmhhcyhcInB1cmVcIikpIHtcbiAgICAgICAgcmV0dXJuIFwicHVyZVwiO1xuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLmhhcyhcInBheWFibGVcIikpIHtcbiAgICAgICAgcmV0dXJuIFwicGF5YWJsZVwiO1xuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLmhhcyhcIm5vbnBheWFibGVcIikpIHtcbiAgICAgICAgcmV0dXJuIFwibm9ucGF5YWJsZVwiO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGxlZ2FjeSBgY29uc3RhbnRgIGxhc3RcbiAgICBpZiAobW9kaWZpZXJzLmhhcyhcImNvbnN0YW50XCIpKSB7XG4gICAgICAgIHJldHVybiBcInZpZXdcIjtcbiAgICB9XG4gICAgcmV0dXJuIFwibm9ucGF5YWJsZVwiO1xufVxuLy8gLi4uYSBwYXJhbWV0ZXIgbGlzdCwgcmV0dXJuaW5nIHRoZSBQYXJhbVR5cGUgbGlzdFxuZnVuY3Rpb24gY29uc3VtZVBhcmFtcyh0b2tlbnMsIGFsbG93SW5kZXhlZCkge1xuICAgIHJldHVybiB0b2tlbnMucG9wUGFyYW1zKCkubWFwKCh0KSA9PiBQYXJhbVR5cGUuZnJvbSh0LCBhbGxvd0luZGV4ZWQpKTtcbn1cbi8vIC4uLmEgZ2FzIGxpbWl0LCByZXR1cm5pbmcgYSBCaWdOdW1iZXIgb3IgbnVsbCBpZiBub25lXG5mdW5jdGlvbiBjb25zdW1lR2FzKHRva2Vucykge1xuICAgIGlmICh0b2tlbnMucGVla1R5cGUoXCJBVFwiKSkge1xuICAgICAgICB0b2tlbnMucG9wKCk7XG4gICAgICAgIGlmICh0b2tlbnMucGVla1R5cGUoXCJOVU1CRVJcIikpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRCaWdJbnQodG9rZW5zLnBvcCgpLnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZ2FzXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbnN1bWVFb2kodG9rZW5zKSB7XG4gICAgaWYgKHRva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIHRva2VucyBhdCBvZmZzZXQgJHt0b2tlbnMub2Zmc2V0fTogJHt0b2tlbnMudG9TdHJpbmcoKX1gKTtcbiAgICB9XG59XG5jb25zdCByZWdleEFycmF5VHlwZSA9IG5ldyBSZWdFeHAoL14oLiopXFxbKFswLTldKilcXF0kLyk7XG5mdW5jdGlvbiB2ZXJpZnlCYXNpY1R5cGUodHlwZSkge1xuICAgIGNvbnN0IG1hdGNoID0gdHlwZS5tYXRjaChyZWdleFR5cGUpO1xuICAgIGFzc2VydEFyZ3VtZW50KG1hdGNoLCBcImludmFsaWQgdHlwZVwiLCBcInR5cGVcIiwgdHlwZSk7XG4gICAgaWYgKHR5cGUgPT09IFwidWludFwiKSB7XG4gICAgICAgIHJldHVybiBcInVpbnQyNTZcIjtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IFwiaW50XCIpIHtcbiAgICAgICAgcmV0dXJuIFwiaW50MjU2XCI7XG4gICAgfVxuICAgIGlmIChtYXRjaFsyXSkge1xuICAgICAgICAvLyBieXRlc1hYXG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHBhcnNlSW50KG1hdGNoWzJdKTtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQobGVuZ3RoICE9PSAwICYmIGxlbmd0aCA8PSAzMiwgXCJpbnZhbGlkIGJ5dGVzIGxlbmd0aFwiLCBcInR5cGVcIiwgdHlwZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1hdGNoWzNdKSB7XG4gICAgICAgIC8vIGludFhYIG9yIHVpbnRYWFxuICAgICAgICBjb25zdCBzaXplID0gcGFyc2VJbnQobWF0Y2hbM10pO1xuICAgICAgICBhc3NlcnRBcmd1bWVudChzaXplICE9PSAwICYmIHNpemUgPD0gMjU2ICYmIChzaXplICUgOCkgPT09IDAsIFwiaW52YWxpZCBudW1lcmljIHdpZHRoXCIsIFwidHlwZVwiLCB0eXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGU7XG59XG4vLyBNYWtlIHRoZSBGcmFnbWVudCBjb25zdHJ1Y3RvcnMgZWZmZWN0aXZlbHkgcHJpdmF0ZVxuY29uc3QgX2d1YXJkID0ge307XG5jb25zdCBpbnRlcm5hbCA9IFN5bWJvbC5mb3IoXCJfZXRoZXJzX2ludGVybmFsXCIpO1xuY29uc3QgUGFyYW1UeXBlSW50ZXJuYWwgPSBcIl9QYXJhbVR5cGVJbnRlcm5hbFwiO1xuY29uc3QgRXJyb3JGcmFnbWVudEludGVybmFsID0gXCJfRXJyb3JJbnRlcm5hbFwiO1xuY29uc3QgRXZlbnRGcmFnbWVudEludGVybmFsID0gXCJfRXZlbnRJbnRlcm5hbFwiO1xuY29uc3QgQ29uc3RydWN0b3JGcmFnbWVudEludGVybmFsID0gXCJfQ29uc3RydWN0b3JJbnRlcm5hbFwiO1xuY29uc3QgRmFsbGJhY2tGcmFnbWVudEludGVybmFsID0gXCJfRmFsbGJhY2tJbnRlcm5hbFwiO1xuY29uc3QgRnVuY3Rpb25GcmFnbWVudEludGVybmFsID0gXCJfRnVuY3Rpb25JbnRlcm5hbFwiO1xuY29uc3QgU3RydWN0RnJhZ21lbnRJbnRlcm5hbCA9IFwiX1N0cnVjdEludGVybmFsXCI7XG4vKipcbiAqICBFYWNoIGlucHV0IGFuZCBvdXRwdXQgb2YgYSBbW0ZyYWdtZW50XV0gaXMgYW4gQXJyYXkgb2YgKipQYXJhbVR5cGUqKi5cbiAqL1xuZXhwb3J0IGNsYXNzIFBhcmFtVHlwZSB7XG4gICAgLyoqXG4gICAgICogIFRoZSBsb2NhbCBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIgKG9yIGBgXCJcImBgIGlmIHVuYm91bmQpXG4gICAgICovXG4gICAgbmFtZTtcbiAgICAvKipcbiAgICAgKiAgVGhlIGZ1bGx5IHF1YWxpZmllZCB0eXBlIChlLmcuIGBgXCJhZGRyZXNzXCJgYCwgYGBcInR1cGxlKGFkZHJlc3MpXCJgYCxcbiAgICAgKiAgYGBcInVpbnQyNTZbM11bXVwiYGApXG4gICAgICovXG4gICAgdHlwZTtcbiAgICAvKipcbiAgICAgKiAgVGhlIGJhc2UgdHlwZSAoZS5nLiBgYFwiYWRkcmVzc1wiYGAsIGBgXCJ0dXBsZVwiYGAsIGBgXCJhcnJheVwiYGApXG4gICAgICovXG4gICAgYmFzZVR5cGU7XG4gICAgLyoqXG4gICAgICogIFRydWUgaWYgdGhlIHBhcmFtZXRlcnMgaXMgaW5kZXhlZC5cbiAgICAgKlxuICAgICAqICBGb3Igbm9uLWluZGV4YWJsZSB0eXBlcyB0aGlzIGlzIGBgbnVsbGBgLlxuICAgICAqL1xuICAgIGluZGV4ZWQ7XG4gICAgLyoqXG4gICAgICogIFRoZSBjb21wb25lbnRzIGZvciB0aGUgdHVwbGUuXG4gICAgICpcbiAgICAgKiAgRm9yIG5vbi10dXBsZSB0eXBlcyB0aGlzIGlzIGBgbnVsbGBgLlxuICAgICAqL1xuICAgIGNvbXBvbmVudHM7XG4gICAgLyoqXG4gICAgICogIFRoZSBhcnJheSBsZW5ndGgsIG9yIGBgLTFgYCBmb3IgZHluYW1pYy1sZW5ndGhlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiAgRm9yIG5vbi1hcnJheSB0eXBlcyB0aGlzIGlzIGBgbnVsbGBgLlxuICAgICAqL1xuICAgIGFycmF5TGVuZ3RoO1xuICAgIC8qKlxuICAgICAqICBUaGUgdHlwZSBvZiBlYWNoIGNoaWxkIGluIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqICBGb3Igbm9uLWFycmF5IHR5cGVzIHRoaXMgaXMgYGBudWxsYGAuXG4gICAgICovXG4gICAgYXJyYXlDaGlsZHJlbjtcbiAgICAvKipcbiAgICAgKiAgQHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihndWFyZCwgbmFtZSwgdHlwZSwgYmFzZVR5cGUsIGluZGV4ZWQsIGNvbXBvbmVudHMsIGFycmF5TGVuZ3RoLCBhcnJheUNoaWxkcmVuKSB7XG4gICAgICAgIGFzc2VydFByaXZhdGUoZ3VhcmQsIF9ndWFyZCwgXCJQYXJhbVR5cGVcIik7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBpbnRlcm5hbCwgeyB2YWx1ZTogUGFyYW1UeXBlSW50ZXJuYWwgfSk7XG4gICAgICAgIGlmIChjb21wb25lbnRzKSB7XG4gICAgICAgICAgICBjb21wb25lbnRzID0gT2JqZWN0LmZyZWV6ZShjb21wb25lbnRzLnNsaWNlKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYXNlVHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgICAgICBpZiAoYXJyYXlMZW5ndGggPT0gbnVsbCB8fCBhcnJheUNoaWxkcmVuID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJyYXlMZW5ndGggIT0gbnVsbCB8fCBhcnJheUNoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFzZVR5cGUgPT09IFwidHVwbGVcIikge1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb21wb25lbnRzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgICAgIG5hbWUsIHR5cGUsIGJhc2VUeXBlLCBpbmRleGVkLCBjb21wb25lbnRzLCBhcnJheUxlbmd0aCwgYXJyYXlDaGlsZHJlblxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHR5cGUuXG4gICAgICpcbiAgICAgKiAgRm9yIGV4YW1wbGUsXG4gICAgICpcbiAgICAgKiAgYGBzaWdoYXNoXCIgPT4gXCIodWludDI1NixhZGRyZXNzKVwiYGBcbiAgICAgKlxuICAgICAqICBgYFwibWluaW1hbFwiID0+IFwidHVwbGUodWludDI1NixhZGRyZXNzKSBpbmRleGVkXCJgYFxuICAgICAqXG4gICAgICogIGBgXCJmdWxsXCIgPT4gXCJ0dXBsZSh1aW50MjU2IGZvbywgYWRkcmVzcyBiYXIpIGluZGV4ZWQgYmF6XCJgYFxuICAgICAqL1xuICAgIGZvcm1hdChmb3JtYXQpIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBcInNpZ2hhc2hcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImpzb25cIikge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMubmFtZSB8fCBcIlwiO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNBcnJheSgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZSh0aGlzLmFycmF5Q2hpbGRyZW4uZm9ybWF0KFwianNvblwiKSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgIHJlc3VsdC50eXBlICs9IGBbJHsodGhpcy5hcnJheUxlbmd0aCA8IDAgPyBcIlwiIDogU3RyaW5nKHRoaXMuYXJyYXlMZW5ndGgpKX1dYDtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAoKHRoaXMuYmFzZVR5cGUgPT09IFwidHVwbGVcIikgPyBcInR1cGxlXCIgOiB0aGlzLnR5cGUpLFxuICAgICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodHlwZW9mICh0aGlzLmluZGV4ZWQpID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5pbmRleGVkID0gdGhpcy5pbmRleGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNUdXBsZSgpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudHMubWFwKChjKSA9PiBKU09OLnBhcnNlKGMuZm9ybWF0KGZvcm1hdCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgICAgICAvLyBBcnJheVxuICAgICAgICBpZiAodGhpcy5pc0FycmF5KCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0aGlzLmFycmF5Q2hpbGRyZW4uZm9ybWF0KGZvcm1hdCk7XG4gICAgICAgICAgICByZXN1bHQgKz0gYFskeyh0aGlzLmFycmF5TGVuZ3RoIDwgMCA/IFwiXCIgOiBTdHJpbmcodGhpcy5hcnJheUxlbmd0aCkpfV1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNUdXBsZSgpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiKFwiICsgdGhpcy5jb21wb25lbnRzLm1hcCgoY29tcCkgPT4gY29tcC5mb3JtYXQoZm9ybWF0KSkuam9pbigoZm9ybWF0ID09PSBcImZ1bGxcIikgPyBcIiwgXCIgOiBcIixcIikgKyBcIilcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB0aGlzLnR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCAhPT0gXCJzaWdoYXNoXCIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmluZGV4ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCIgaW5kZXhlZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJmdWxsXCIgJiYgdGhpcy5uYW1lKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiIFwiICsgdGhpcy5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRydWUgaWYgJSV0aGlzJSUgaXMgYW4gQXJyYXkgdHlwZS5cbiAgICAgKlxuICAgICAqICBUaGlzIHByb3ZpZGVzIGEgdHlwZSBnYXVyZCBlbnN1cmluZyB0aGF0IFtbYXJyYXlDaGlsZHJlbl1dXG4gICAgICogIGFuZCBbW2FycmF5TGVuZ3RoXV0gYXJlIG5vbi1udWxsLlxuICAgICAqL1xuICAgIGlzQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5iYXNlVHlwZSA9PT0gXCJhcnJheVwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiAlJXRoaXMlJSBpcyBhIFR1cGxlIHR5cGUuXG4gICAgICpcbiAgICAgKiAgVGhpcyBwcm92aWRlcyBhIHR5cGUgZ2F1cmQgZW5zdXJpbmcgdGhhdCBbW2NvbXBvbmVudHNdXVxuICAgICAqICBpcyBub24tbnVsbC5cbiAgICAgKi9cbiAgICBpc1R1cGxlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuYmFzZVR5cGUgPT09IFwidHVwbGVcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRydWUgaWYgJSV0aGlzJSUgaXMgYW4gSW5kZXhhYmxlIHR5cGUuXG4gICAgICpcbiAgICAgKiAgVGhpcyBwcm92aWRlcyBhIHR5cGUgZ2F1cmQgZW5zdXJpbmcgdGhhdCBbW2luZGV4ZWRdXVxuICAgICAqICBpcyBub24tbnVsbC5cbiAgICAgKi9cbiAgICBpc0luZGV4YWJsZSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmluZGV4ZWQgIT0gbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBXYWxrcyB0aGUgKipQYXJhbVR5cGUqKiB3aXRoICUldmFsdWUlJSwgY2FsbGluZyAlJXByb2Nlc3MlJVxuICAgICAqICBvbiBlYWNoIHR5cGUsIGRlc3RydWN0aW5nIHRoZSAlJXZhbHVlJSUgcmVjdXJzaXZlbHkuXG4gICAgICovXG4gICAgd2Fsayh2YWx1ZSwgcHJvY2Vzcykge1xuICAgICAgICBpZiAodGhpcy5pc0FycmF5KCkpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGFycmF5IHZhbHVlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYXJyYXlMZW5ndGggIT09IC0xICYmIHZhbHVlLmxlbmd0aCAhPT0gdGhpcy5hcnJheUxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFycmF5IGlzIHdyb25nIGxlbmd0aFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAoKHYpID0+IChfdGhpcy5hcnJheUNoaWxkcmVuLndhbGsodiwgcHJvY2VzcykpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc1R1cGxlKCkpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHR1cGxlIHZhbHVlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCAhPT0gdGhpcy5jb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFycmF5IGlzIHdyb25nIGxlbmd0aFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAoKHYsIGkpID0+IChfdGhpcy5jb21wb25lbnRzW2ldLndhbGsodiwgcHJvY2VzcykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvY2Vzcyh0aGlzLnR5cGUsIHZhbHVlKTtcbiAgICB9XG4gICAgI3dhbGtBc3luYyhwcm9taXNlcywgdmFsdWUsIHByb2Nlc3MsIHNldFZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQXJyYXkoKSkge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYXJyYXkgdmFsdWVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5hcnJheUxlbmd0aCAhPT0gLTEgJiYgdmFsdWUubGVuZ3RoICE9PSB0aGlzLmFycmF5TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXJyYXkgaXMgd3JvbmcgbGVuZ3RoXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2hpbGRUeXBlID0gdGhpcy5hcnJheUNoaWxkcmVuO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUuc2xpY2UoKTtcbiAgICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjaGlsZFR5cGUuI3dhbGtBc3luYyhwcm9taXNlcywgdmFsdWUsIHByb2Nlc3MsICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNldFZhbHVlKHJlc3VsdCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNUdXBsZSgpKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzO1xuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgb2JqZWN0IGludG8gYW4gYXJyYXlcbiAgICAgICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZS5zbGljZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mICh2YWx1ZSkgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB0dXBsZSB2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29tcG9uZW50cy5tYXAoKHBhcmFtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFyYW0ubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IHVzZSBvYmplY3QgdmFsdWUgd2l0aCB1bm5hbWVkIGNvbXBvbmVudHNcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEocGFyYW0ubmFtZSBpbiB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbWlzc2luZyB2YWx1ZSBmb3IgY29tcG9uZW50ICR7cGFyYW0ubmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVbcGFyYW0ubmFtZV07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCAhPT0gdGhpcy5jb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFycmF5IGlzIHdyb25nIGxlbmd0aFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzW2luZGV4XS4jd2Fsa0FzeW5jKHByb21pc2VzLCB2YWx1ZSwgcHJvY2VzcywgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2V0VmFsdWUocmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBwcm9jZXNzKHRoaXMudHlwZSwgdmFsdWUpO1xuICAgICAgICBpZiAocmVzdWx0LnRoZW4pIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goKGFzeW5jIGZ1bmN0aW9uICgpIHsgc2V0VmFsdWUoYXdhaXQgcmVzdWx0KTsgfSkoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRWYWx1ZShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBXYWxrcyB0aGUgKipQYXJhbVR5cGUqKiB3aXRoICUldmFsdWUlJSwgYXN5bmNocm9ub3VzbHkgY2FsbGluZ1xuICAgICAqICAlJXByb2Nlc3MlJSBvbiBlYWNoIHR5cGUsIGRlc3RydWN0aW5nIHRoZSAlJXZhbHVlJSUgcmVjdXJzaXZlbHkuXG4gICAgICpcbiAgICAgKiAgVGhpcyBjYW4gYmUgdXNlZCB0byByZXNvbHZlIEVOUyBuYWVzIGJ5IHdhbGtpbmcgYW5kIHJlc29sdmluZyBlYWNoXG4gICAgICogIGBgXCJhZGRyZXNzXCJgYCB0eXBlLlxuICAgICAqL1xuICAgIGFzeW5jIHdhbGtBc3luYyh2YWx1ZSwgcHJvY2Vzcykge1xuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbdmFsdWVdO1xuICAgICAgICB0aGlzLiN3YWxrQXN5bmMocHJvbWlzZXMsIHZhbHVlLCBwcm9jZXNzLCAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHJlc3VsdFswXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRbMF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3ICoqUGFyYW1UeXBlKiogZm9yICUlb2JqJSUuXG4gICAgICpcbiAgICAgKiAgSWYgJSVhbGxvd0luZGV4ZWQlJSB0aGVuIHRoZSBgYGluZGV4ZWRgYCBrZXl3b3JkIGlzIHBlcm1pdHRlZCxcbiAgICAgKiAgb3RoZXJ3aXNlIHRoZSBgYGluZGV4ZWRgYCBrZXl3b3JkIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICovXG4gICAgc3RhdGljIGZyb20ob2JqLCBhbGxvd0luZGV4ZWQpIHtcbiAgICAgICAgaWYgKFBhcmFtVHlwZS5pc1BhcmFtVHlwZShvYmopKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKG9iaikgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFBhcmFtVHlwZS5mcm9tKGxleChvYmopLCBhbGxvd0luZGV4ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwiaW52YWxpZCBwYXJhbSB0eXBlXCIsIFwib2JqXCIsIG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgVG9rZW5TdHJpbmcpIHtcbiAgICAgICAgICAgIGxldCB0eXBlID0gXCJcIiwgYmFzZVR5cGUgPSBcIlwiO1xuICAgICAgICAgICAgbGV0IGNvbXBzID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChjb25zdW1lS2V5d29yZHMob2JqLCBzZXRpZnkoW1widHVwbGVcIl0pKS5oYXMoXCJ0dXBsZVwiKSB8fCBvYmoucGVla1R5cGUoXCJPUEVOX1BBUkVOXCIpKSB7XG4gICAgICAgICAgICAgICAgLy8gVHVwbGVcbiAgICAgICAgICAgICAgICBiYXNlVHlwZSA9IFwidHVwbGVcIjtcbiAgICAgICAgICAgICAgICBjb21wcyA9IG9iai5wb3BQYXJhbXMoKS5tYXAoKHQpID0+IFBhcmFtVHlwZS5mcm9tKHQpKTtcbiAgICAgICAgICAgICAgICB0eXBlID0gYHR1cGxlKCR7Y29tcHMubWFwKChjKSA9PiBjLmZvcm1hdCgpKS5qb2luKFwiLFwiKX0pYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE5vcm1hbFxuICAgICAgICAgICAgICAgIHR5cGUgPSB2ZXJpZnlCYXNpY1R5cGUob2JqLnBvcFR5cGUoXCJUWVBFXCIpKTtcbiAgICAgICAgICAgICAgICBiYXNlVHlwZSA9IHR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgQXJyYXlcbiAgICAgICAgICAgIGxldCBhcnJheUNoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBhcnJheUxlbmd0aCA9IG51bGw7XG4gICAgICAgICAgICB3aGlsZSAob2JqLmxlbmd0aCAmJiBvYmoucGVla1R5cGUoXCJCUkFDS0VUXCIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnJhY2tldCA9IG9iai5wb3AoKTsgLy9hcnJheXNbaV07XG4gICAgICAgICAgICAgICAgYXJyYXlDaGlsZHJlbiA9IG5ldyBQYXJhbVR5cGUoX2d1YXJkLCBcIlwiLCB0eXBlLCBiYXNlVHlwZSwgbnVsbCwgY29tcHMsIGFycmF5TGVuZ3RoLCBhcnJheUNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICBhcnJheUxlbmd0aCA9IGJyYWNrZXQudmFsdWU7XG4gICAgICAgICAgICAgICAgdHlwZSArPSBicmFja2V0LnRleHQ7XG4gICAgICAgICAgICAgICAgYmFzZVR5cGUgPSBcImFycmF5XCI7XG4gICAgICAgICAgICAgICAgY29tcHMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGluZGV4ZWQgPSBudWxsO1xuICAgICAgICAgICAgY29uc3Qga2V5d29yZHMgPSBjb25zdW1lS2V5d29yZHMob2JqLCBLd01vZGlmaWVycyk7XG4gICAgICAgICAgICBpZiAoa2V5d29yZHMuaGFzKFwiaW5kZXhlZFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICghYWxsb3dJbmRleGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5kZXhlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gKG9iai5wZWVrVHlwZShcIklEXCIpID8gb2JqLnBvcCgpLnRleHQgOiBcIlwiKTtcbiAgICAgICAgICAgIGlmIChvYmoubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibGVmdG92ZXIgdG9rZW5zXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQYXJhbVR5cGUoX2d1YXJkLCBuYW1lLCB0eXBlLCBiYXNlVHlwZSwgaW5kZXhlZCwgY29tcHMsIGFycmF5TGVuZ3RoLCBhcnJheUNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuYW1lID0gb2JqLm5hbWU7XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KCFuYW1lIHx8ICh0eXBlb2YgKG5hbWUpID09PSBcInN0cmluZ1wiICYmIG5hbWUubWF0Y2gocmVnZXhJZCkpLCBcImludmFsaWQgbmFtZVwiLCBcIm9iai5uYW1lXCIsIG5hbWUpO1xuICAgICAgICBsZXQgaW5kZXhlZCA9IG9iai5pbmRleGVkO1xuICAgICAgICBpZiAoaW5kZXhlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChhbGxvd0luZGV4ZWQsIFwicGFyYW1ldGVyIGNhbm5vdCBiZSBpbmRleGVkXCIsIFwib2JqLmluZGV4ZWRcIiwgb2JqLmluZGV4ZWQpO1xuICAgICAgICAgICAgaW5kZXhlZCA9ICEhaW5kZXhlZDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdHlwZSA9IG9iai50eXBlO1xuICAgICAgICBsZXQgYXJyYXlNYXRjaCA9IHR5cGUubWF0Y2gocmVnZXhBcnJheVR5cGUpO1xuICAgICAgICBpZiAoYXJyYXlNYXRjaCkge1xuICAgICAgICAgICAgY29uc3QgYXJyYXlMZW5ndGggPSBwYXJzZUludChhcnJheU1hdGNoWzJdIHx8IFwiLTFcIik7XG4gICAgICAgICAgICBjb25zdCBhcnJheUNoaWxkcmVuID0gUGFyYW1UeXBlLmZyb20oe1xuICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5TWF0Y2hbMV0sXG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogb2JqLmNvbXBvbmVudHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQYXJhbVR5cGUoX2d1YXJkLCBuYW1lIHx8IFwiXCIsIHR5cGUsIFwiYXJyYXlcIiwgaW5kZXhlZCwgbnVsbCwgYXJyYXlMZW5ndGgsIGFycmF5Q2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSBcInR1cGxlXCIgfHwgdHlwZS5zdGFydHNXaXRoKFwidHVwbGUoXCIgLyogZml4OiApICovKSB8fCB0eXBlLnN0YXJ0c1dpdGgoXCIoXCIgLyogZml4OiApICovKSkge1xuICAgICAgICAgICAgY29uc3QgY29tcHMgPSAob2JqLmNvbXBvbmVudHMgIT0gbnVsbCkgPyBvYmouY29tcG9uZW50cy5tYXAoKGMpID0+IFBhcmFtVHlwZS5mcm9tKGMpKSA6IG51bGw7XG4gICAgICAgICAgICBjb25zdCB0dXBsZSA9IG5ldyBQYXJhbVR5cGUoX2d1YXJkLCBuYW1lIHx8IFwiXCIsIHR5cGUsIFwidHVwbGVcIiwgaW5kZXhlZCwgY29tcHMsIG51bGwsIG51bGwpO1xuICAgICAgICAgICAgLy8gQFRPRE86IHVzZSBsZXhlciB0byB2YWxpZGF0ZSBhbmQgbm9ybWFsaXplIHR5cGVcbiAgICAgICAgICAgIHJldHVybiB0dXBsZTtcbiAgICAgICAgfVxuICAgICAgICB0eXBlID0gdmVyaWZ5QmFzaWNUeXBlKG9iai50eXBlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJhbVR5cGUoX2d1YXJkLCBuYW1lIHx8IFwiXCIsIHR5cGUsIHR5cGUsIGluZGV4ZWQsIG51bGwsIG51bGwsIG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0cnVlIGlmICUldmFsdWUlJSBpcyBhICoqUGFyYW1UeXBlKiouXG4gICAgICovXG4gICAgc3RhdGljIGlzUGFyYW1UeXBlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWVbaW50ZXJuYWxdID09PSBQYXJhbVR5cGVJbnRlcm5hbCk7XG4gICAgfVxufVxuLyoqXG4gKiAgQW4gYWJzdHJhY3QgY2xhc3MgdG8gcmVwcmVzZW50IEFuIGluZGl2aWR1YWwgZnJhZ21lbnQgZnJvbSBhIHBhcnNlIEFCSS5cbiAqL1xuZXhwb3J0IGNsYXNzIEZyYWdtZW50IHtcbiAgICAvKipcbiAgICAgKiAgVGhlIHR5cGUgb2YgdGhlIGZyYWdtZW50LlxuICAgICAqL1xuICAgIHR5cGU7XG4gICAgLyoqXG4gICAgICogIFRoZSBpbnB1dHMgZm9yIHRoZSBmcmFnbWVudC5cbiAgICAgKi9cbiAgICBpbnB1dHM7XG4gICAgLyoqXG4gICAgICogIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZ3VhcmQsIHR5cGUsIGlucHV0cykge1xuICAgICAgICBhc3NlcnRQcml2YXRlKGd1YXJkLCBfZ3VhcmQsIFwiRnJhZ21lbnRcIik7XG4gICAgICAgIGlucHV0cyA9IE9iamVjdC5mcmVlemUoaW5wdXRzLnNsaWNlKCkpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgdHlwZSwgaW5wdXRzIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKkZyYWdtZW50KiogZm9yICUlb2JqJSUsIHdpY2ggY2FuIGJlIGFueSBzdXBwb3J0ZWRcbiAgICAgKiAgQUJJIGZyZ2FtZW50IHR5cGUuXG4gICAgICovXG4gICAgc3RhdGljIGZyb20ob2JqKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKG9iaikgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vIFRyeSBwYXJzaW5nIEpTT04uLi5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgRnJhZ21lbnQuZnJvbShKU09OLnBhcnNlKG9iaikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgLy8gLi4ub3RoZXJ3aXNlLCB1c2UgdGhlIGh1bWFuLXJlYWRhYmxlIGxleGVyXG4gICAgICAgICAgICByZXR1cm4gRnJhZ21lbnQuZnJvbShsZXgob2JqKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIFRva2VuU3RyaW5nKSB7XG4gICAgICAgICAgICAvLyBIdW1hbi1yZWFkYWJsZSBBQkkgKGFscmVhZHkgbGV4ZWQpXG4gICAgICAgICAgICBjb25zdCB0eXBlID0gb2JqLnBlZWtLZXl3b3JkKEt3VHlwZXMpO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNvbnN0cnVjdG9yXCI6IHJldHVybiBDb25zdHJ1Y3RvckZyYWdtZW50LmZyb20ob2JqKTtcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjogcmV0dXJuIEVycm9yRnJhZ21lbnQuZnJvbShvYmopO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJldmVudFwiOiByZXR1cm4gRXZlbnRGcmFnbWVudC5mcm9tKG9iaik7XG4gICAgICAgICAgICAgICAgY2FzZSBcImZhbGxiYWNrXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcInJlY2VpdmVcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbGxiYWNrRnJhZ21lbnQuZnJvbShvYmopO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOiByZXR1cm4gRnVuY3Rpb25GcmFnbWVudC5mcm9tKG9iaik7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN0cnVjdFwiOiByZXR1cm4gU3RydWN0RnJhZ21lbnQuZnJvbShvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiAob2JqKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgLy8gSlNPTiBBQklcbiAgICAgICAgICAgIHN3aXRjaCAob2JqLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiY29uc3RydWN0b3JcIjogcmV0dXJuIENvbnN0cnVjdG9yRnJhZ21lbnQuZnJvbShvYmopO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJlcnJvclwiOiByZXR1cm4gRXJyb3JGcmFnbWVudC5mcm9tKG9iaik7XG4gICAgICAgICAgICAgICAgY2FzZSBcImV2ZW50XCI6IHJldHVybiBFdmVudEZyYWdtZW50LmZyb20ob2JqKTtcbiAgICAgICAgICAgICAgICBjYXNlIFwiZmFsbGJhY2tcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVjZWl2ZVwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsbGJhY2tGcmFnbWVudC5mcm9tKG9iaik7XG4gICAgICAgICAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6IHJldHVybiBGdW5jdGlvbkZyYWdtZW50LmZyb20ob2JqKTtcbiAgICAgICAgICAgICAgICBjYXNlIFwic3RydWN0XCI6IHJldHVybiBTdHJ1Y3RGcmFnbWVudC5mcm9tKG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3NlcnQoZmFsc2UsIGB1bnN1cHBvcnRlZCB0eXBlOiAke29iai50eXBlfWAsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwiRnJhZ21lbnQuZnJvbVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgXCJ1bnN1cHBvcnRlZCBmcmdhbWVudCBvYmplY3RcIiwgXCJvYmpcIiwgb2JqKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiAlJXZhbHVlJSUgaXMgYSBbW0NvbnN0cnVjdG9yRnJhZ21lbnRdXS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNDb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gQ29uc3RydWN0b3JGcmFnbWVudC5pc0ZyYWdtZW50KHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiAlJXZhbHVlJSUgaXMgYW4gW1tFcnJvckZyYWdtZW50XV0uXG4gICAgICovXG4gICAgc3RhdGljIGlzRXJyb3IodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIEVycm9yRnJhZ21lbnQuaXNGcmFnbWVudCh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRydWUgaWYgJSV2YWx1ZSUlIGlzIGFuIFtbRXZlbnRGcmFnbWVudF1dLlxuICAgICAqL1xuICAgIHN0YXRpYyBpc0V2ZW50KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBFdmVudEZyYWdtZW50LmlzRnJhZ21lbnQodmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0cnVlIGlmICUldmFsdWUlJSBpcyBhIFtbRnVuY3Rpb25GcmFnbWVudF1dLlxuICAgICAqL1xuICAgIHN0YXRpYyBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbkZyYWdtZW50LmlzRnJhZ21lbnQodmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0cnVlIGlmICUldmFsdWUlJSBpcyBhIFtbU3RydWN0RnJhZ21lbnRdXS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNTdHJ1Y3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFN0cnVjdEZyYWdtZW50LmlzRnJhZ21lbnQodmFsdWUpO1xuICAgIH1cbn1cbi8qKlxuICogIEFuIGFic3RyYWN0IGNsYXNzIHRvIHJlcHJlc2VudCBBbiBpbmRpdmlkdWFsIGZyYWdtZW50XG4gKiAgd2hpY2ggaGFzIGEgbmFtZSBmcm9tIGEgcGFyc2UgQUJJLlxuICovXG5leHBvcnQgY2xhc3MgTmFtZWRGcmFnbWVudCBleHRlbmRzIEZyYWdtZW50IHtcbiAgICAvKipcbiAgICAgKiAgVGhlIG5hbWUgb2YgdGhlIGZyYWdtZW50LlxuICAgICAqL1xuICAgIG5hbWU7XG4gICAgLyoqXG4gICAgICogIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZ3VhcmQsIHR5cGUsIG5hbWUsIGlucHV0cykge1xuICAgICAgICBzdXBlcihndWFyZCwgdHlwZSwgaW5wdXRzKTtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQodHlwZW9mIChuYW1lKSA9PT0gXCJzdHJpbmdcIiAmJiBuYW1lLm1hdGNoKHJlZ2V4SWQpLCBcImludmFsaWQgaWRlbnRpZmllclwiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgICAgIGlucHV0cyA9IE9iamVjdC5mcmVlemUoaW5wdXRzLnNsaWNlKCkpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgbmFtZSB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBqb2luUGFyYW1zKGZvcm1hdCwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIFwiKFwiICsgcGFyYW1zLm1hcCgocCkgPT4gcC5mb3JtYXQoZm9ybWF0KSkuam9pbigoZm9ybWF0ID09PSBcImZ1bGxcIikgPyBcIiwgXCIgOiBcIixcIikgKyBcIilcIjtcbn1cbi8qKlxuICogIEEgRnJhZ21lbnQgd2hpY2ggcmVwcmVzZW50cyBhIC8vQ3VzdG9tIEVycm9yLy8uXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvckZyYWdtZW50IGV4dGVuZHMgTmFtZWRGcmFnbWVudCB7XG4gICAgLyoqXG4gICAgICogIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZ3VhcmQsIG5hbWUsIGlucHV0cykge1xuICAgICAgICBzdXBlcihndWFyZCwgXCJlcnJvclwiLCBuYW1lLCBpbnB1dHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgaW50ZXJuYWwsIHsgdmFsdWU6IEVycm9yRnJhZ21lbnRJbnRlcm5hbCB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBDdXN0b20gRXJyb3Igc2VsZWN0b3IuXG4gICAgICovXG4gICAgZ2V0IHNlbGVjdG9yKCkge1xuICAgICAgICByZXR1cm4gaWQodGhpcy5mb3JtYXQoXCJzaWdoYXNoXCIpKS5zdWJzdHJpbmcoMCwgMTApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGZyYWdtZW50IGFzICUlZm9ybWF0JSUuXG4gICAgICovXG4gICAgZm9ybWF0KGZvcm1hdCkge1xuICAgICAgICBpZiAoZm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IFwic2lnaGFzaFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwianNvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgaW5wdXRzOiB0aGlzLmlucHV0cy5tYXAoKGlucHV0KSA9PiBKU09OLnBhcnNlKGlucHV0LmZvcm1hdChmb3JtYXQpKSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgaWYgKGZvcm1hdCAhPT0gXCJzaWdoYXNoXCIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFwiZXJyb3JcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnB1c2godGhpcy5uYW1lICsgam9pblBhcmFtcyhmb3JtYXQsIHRoaXMuaW5wdXRzKSk7XG4gICAgICAgIHJldHVybiByZXN1bHQuam9pbihcIiBcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGEgbmV3ICoqRXJyb3JGcmFnbWVudCoqIGZvciAlJW9iaiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tKG9iaikge1xuICAgICAgICBpZiAoRXJyb3JGcmFnbWVudC5pc0ZyYWdtZW50KG9iaikpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAob2JqKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIEVycm9yRnJhZ21lbnQuZnJvbShsZXgob2JqKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgVG9rZW5TdHJpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBjb25zdW1lTmFtZShcImVycm9yXCIsIG9iaik7XG4gICAgICAgICAgICBjb25zdCBpbnB1dHMgPSBjb25zdW1lUGFyYW1zKG9iaik7XG4gICAgICAgICAgICBjb25zdW1lRW9pKG9iaik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yRnJhZ21lbnQoX2d1YXJkLCBuYW1lLCBpbnB1dHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3JGcmFnbWVudChfZ3VhcmQsIG9iai5uYW1lLCBvYmouaW5wdXRzID8gb2JqLmlucHV0cy5tYXAoUGFyYW1UeXBlLmZyb20pIDogW10pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBgYHRydWVgYCBhbmQgcHJvdmlkZXMgYSB0eXBlIGd1YXJkIGlmICUldmFsdWUlJSBpcyBhblxuICAgICAqICAqKkVycm9yRnJhZ21lbnQqKi5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNGcmFnbWVudCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlW2ludGVybmFsXSA9PT0gRXJyb3JGcmFnbWVudEludGVybmFsKTtcbiAgICB9XG59XG4vKipcbiAqICBBIEZyYWdtZW50IHdoaWNoIHJlcHJlc2VudHMgYW4gRXZlbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudEZyYWdtZW50IGV4dGVuZHMgTmFtZWRGcmFnbWVudCB7XG4gICAgLyoqXG4gICAgICogIFdoZXRoZXIgdGhpcyBldmVudCBpcyBhbm9ueW1vdXMuXG4gICAgICovXG4gICAgYW5vbnltb3VzO1xuICAgIC8qKlxuICAgICAqICBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGd1YXJkLCBuYW1lLCBpbnB1dHMsIGFub255bW91cykge1xuICAgICAgICBzdXBlcihndWFyZCwgXCJldmVudFwiLCBuYW1lLCBpbnB1dHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgaW50ZXJuYWwsIHsgdmFsdWU6IEV2ZW50RnJhZ21lbnRJbnRlcm5hbCB9KTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IGFub255bW91cyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBFdmVudCB0b3BpYyBoYXNoLlxuICAgICAqL1xuICAgIGdldCB0b3BpY0hhc2goKSB7XG4gICAgICAgIHJldHVybiBpZCh0aGlzLmZvcm1hdChcInNpZ2hhc2hcIikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGV2ZW50IGFzICUlZm9ybWF0JSUuXG4gICAgICovXG4gICAgZm9ybWF0KGZvcm1hdCkge1xuICAgICAgICBpZiAoZm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IFwic2lnaGFzaFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwianNvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgICAgICAgICAgICAgICBhbm9ueW1vdXM6IHRoaXMuYW5vbnltb3VzLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICBpbnB1dHM6IHRoaXMuaW5wdXRzLm1hcCgoaSkgPT4gSlNPTi5wYXJzZShpLmZvcm1hdChmb3JtYXQpKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBpZiAoZm9ybWF0ICE9PSBcInNpZ2hhc2hcIikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goXCJldmVudFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQucHVzaCh0aGlzLm5hbWUgKyBqb2luUGFyYW1zKGZvcm1hdCwgdGhpcy5pbnB1dHMpKTtcbiAgICAgICAgaWYgKGZvcm1hdCAhPT0gXCJzaWdoYXNoXCIgJiYgdGhpcy5hbm9ueW1vdXMpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFwiYW5vbnltb3VzXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQuam9pbihcIiBcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gdGhlIHRvcGljIGhhc2ggZm9yIGFuIGV2ZW50IHdpdGggJSVuYW1lJSUgYW5kICUlcGFyYW1zJSUuXG4gICAgICovXG4gICAgc3RhdGljIGdldFRvcGljSGFzaChuYW1lLCBwYXJhbXMpIHtcbiAgICAgICAgcGFyYW1zID0gKHBhcmFtcyB8fCBbXSkubWFwKChwKSA9PiBQYXJhbVR5cGUuZnJvbShwKSk7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gbmV3IEV2ZW50RnJhZ21lbnQoX2d1YXJkLCBuYW1lLCBwYXJhbXMsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGZyYWdtZW50LnRvcGljSGFzaDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYSBuZXcgKipFdmVudEZyYWdtZW50KiogZm9yICUlb2JqJSUuXG4gICAgICovXG4gICAgc3RhdGljIGZyb20ob2JqKSB7XG4gICAgICAgIGlmIChFdmVudEZyYWdtZW50LmlzRnJhZ21lbnQob2JqKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChvYmopID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBFdmVudEZyYWdtZW50LmZyb20obGV4KG9iaikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwiaW52YWxpZCBldmVudCBmcmFnbWVudFwiLCBcIm9ialwiLCBvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIFRva2VuU3RyaW5nKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gY29uc3VtZU5hbWUoXCJldmVudFwiLCBvYmopO1xuICAgICAgICAgICAgY29uc3QgaW5wdXRzID0gY29uc3VtZVBhcmFtcyhvYmosIHRydWUpO1xuICAgICAgICAgICAgY29uc3QgYW5vbnltb3VzID0gISFjb25zdW1lS2V5d29yZHMob2JqLCBzZXRpZnkoW1wiYW5vbnltb3VzXCJdKSkuaGFzKFwiYW5vbnltb3VzXCIpO1xuICAgICAgICAgICAgY29uc3VtZUVvaShvYmopO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudEZyYWdtZW50KF9ndWFyZCwgbmFtZSwgaW5wdXRzLCBhbm9ueW1vdXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRXZlbnRGcmFnbWVudChfZ3VhcmQsIG9iai5uYW1lLCBvYmouaW5wdXRzID8gb2JqLmlucHV0cy5tYXAoKHApID0+IFBhcmFtVHlwZS5mcm9tKHAsIHRydWUpKSA6IFtdLCAhIW9iai5hbm9ueW1vdXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBgYHRydWVgYCBhbmQgcHJvdmlkZXMgYSB0eXBlIGd1YXJkIGlmICUldmFsdWUlJSBpcyBhblxuICAgICAqICAqKkV2ZW50RnJhZ21lbnQqKi5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNGcmFnbWVudCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlW2ludGVybmFsXSA9PT0gRXZlbnRGcmFnbWVudEludGVybmFsKTtcbiAgICB9XG59XG4vKipcbiAqICBBIEZyYWdtZW50IHdoaWNoIHJlcHJlc2VudHMgYSBjb25zdHJ1Y3Rvci5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbnN0cnVjdG9yRnJhZ21lbnQgZXh0ZW5kcyBGcmFnbWVudCB7XG4gICAgLyoqXG4gICAgICogIFdoZXRoZXIgdGhlIGNvbnN0cnVjdG9yIGNhbiByZWNlaXZlIGFuIGVuZG93bWVudC5cbiAgICAgKi9cbiAgICBwYXlhYmxlO1xuICAgIC8qKlxuICAgICAqICBUaGUgcmVjb21tZW5kZWQgZ2FzIGxpbWl0IGZvciBkZXBsb3ltZW50IG9yIGBgbnVsbGBgLlxuICAgICAqL1xuICAgIGdhcztcbiAgICAvKipcbiAgICAgKiAgQHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihndWFyZCwgdHlwZSwgaW5wdXRzLCBwYXlhYmxlLCBnYXMpIHtcbiAgICAgICAgc3VwZXIoZ3VhcmQsIHR5cGUsIGlucHV0cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBpbnRlcm5hbCwgeyB2YWx1ZTogQ29uc3RydWN0b3JGcmFnbWVudEludGVybmFsIH0pO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgcGF5YWJsZSwgZ2FzIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGNvbnN0cnVjdG9yIGFzICUlZm9ybWF0JSUuXG4gICAgICovXG4gICAgZm9ybWF0KGZvcm1hdCkge1xuICAgICAgICBhc3NlcnQoZm9ybWF0ICE9IG51bGwgJiYgZm9ybWF0ICE9PSBcInNpZ2hhc2hcIiwgXCJjYW5ub3QgZm9ybWF0IGEgY29uc3RydWN0b3IgZm9yIHNpZ2hhc2hcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IFwiZm9ybWF0KHNpZ2hhc2gpXCIgfSk7XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwianNvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiY29uc3RydWN0b3JcIixcbiAgICAgICAgICAgICAgICBzdGF0ZU11dGFiaWxpdHk6ICh0aGlzLnBheWFibGUgPyBcInBheWFibGVcIiA6IFwidW5kZWZpbmVkXCIpLFxuICAgICAgICAgICAgICAgIHBheWFibGU6IHRoaXMucGF5YWJsZSxcbiAgICAgICAgICAgICAgICBnYXM6ICgodGhpcy5nYXMgIT0gbnVsbCkgPyB0aGlzLmdhcyA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgaW5wdXRzOiB0aGlzLmlucHV0cy5tYXAoKGkpID0+IEpTT04ucGFyc2UoaS5mb3JtYXQoZm9ybWF0KSkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBbYGNvbnN0cnVjdG9yJHtqb2luUGFyYW1zKGZvcm1hdCwgdGhpcy5pbnB1dHMpfWBdO1xuICAgICAgICBpZiAodGhpcy5wYXlhYmxlKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChcInBheWFibGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZ2FzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGBAJHt0aGlzLmdhcy50b1N0cmluZygpfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQuam9pbihcIiBcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGEgbmV3ICoqQ29uc3RydWN0b3JGcmFnbWVudCoqIGZvciAlJW9iaiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tKG9iaikge1xuICAgICAgICBpZiAoQ29uc3RydWN0b3JGcmFnbWVudC5pc0ZyYWdtZW50KG9iaikpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAob2JqKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29uc3RydWN0b3JGcmFnbWVudC5mcm9tKGxleChvYmopKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcImludmFsaWQgY29uc3R1Y3RvciBmcmFnbWVudFwiLCBcIm9ialwiLCBvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIFRva2VuU3RyaW5nKSB7XG4gICAgICAgICAgICBjb25zdW1lS2V5d29yZHMob2JqLCBzZXRpZnkoW1wiY29uc3RydWN0b3JcIl0pKTtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0cyA9IGNvbnN1bWVQYXJhbXMob2JqKTtcbiAgICAgICAgICAgIGNvbnN0IHBheWFibGUgPSAhIWNvbnN1bWVLZXl3b3JkcyhvYmosIEt3VmlzaWJEZXBsb3kpLmhhcyhcInBheWFibGVcIik7XG4gICAgICAgICAgICBjb25zdCBnYXMgPSBjb25zdW1lR2FzKG9iaik7XG4gICAgICAgICAgICBjb25zdW1lRW9pKG9iaik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yRnJhZ21lbnQoX2d1YXJkLCBcImNvbnN0cnVjdG9yXCIsIGlucHV0cywgcGF5YWJsZSwgZ2FzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yRnJhZ21lbnQoX2d1YXJkLCBcImNvbnN0cnVjdG9yXCIsIG9iai5pbnB1dHMgPyBvYmouaW5wdXRzLm1hcChQYXJhbVR5cGUuZnJvbSkgOiBbXSwgISFvYmoucGF5YWJsZSwgKG9iai5nYXMgIT0gbnVsbCkgPyBvYmouZ2FzIDogbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGBgdHJ1ZWBgIGFuZCBwcm92aWRlcyBhIHR5cGUgZ3VhcmQgaWYgJSV2YWx1ZSUlIGlzIGFcbiAgICAgKiAgKipDb25zdHJ1Y3RvckZyYWdtZW50KiouXG4gICAgICovXG4gICAgc3RhdGljIGlzRnJhZ21lbnQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZVtpbnRlcm5hbF0gPT09IENvbnN0cnVjdG9yRnJhZ21lbnRJbnRlcm5hbCk7XG4gICAgfVxufVxuLyoqXG4gKiAgQSBGcmFnbWVudCB3aGljaCByZXByZXNlbnRzIGEgbWV0aG9kLlxuICovXG5leHBvcnQgY2xhc3MgRmFsbGJhY2tGcmFnbWVudCBleHRlbmRzIEZyYWdtZW50IHtcbiAgICAvKipcbiAgICAgKiAgSWYgdGhlIGZ1bmN0aW9uIGNhbiBiZSBzZW50IHZhbHVlIGR1cmluZyBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHBheWFibGU7XG4gICAgY29uc3RydWN0b3IoZ3VhcmQsIGlucHV0cywgcGF5YWJsZSkge1xuICAgICAgICBzdXBlcihndWFyZCwgXCJmYWxsYmFja1wiLCBpbnB1dHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgaW50ZXJuYWwsIHsgdmFsdWU6IEZhbGxiYWNrRnJhZ21lbnRJbnRlcm5hbCB9KTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IHBheWFibGUgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgZmFsbGJhY2sgYXMgJSVmb3JtYXQlJS5cbiAgICAgKi9cbiAgICBmb3JtYXQoZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSAoKHRoaXMuaW5wdXRzLmxlbmd0aCA9PT0gMCkgPyBcInJlY2VpdmVcIiA6IFwiZmFsbGJhY2tcIik7XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwianNvblwiKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZU11dGFiaWxpdHkgPSAodGhpcy5wYXlhYmxlID8gXCJwYXlhYmxlXCIgOiBcIm5vbnBheWFibGVcIik7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyB0eXBlLCBzdGF0ZU11dGFiaWxpdHkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke3R5cGV9KCkke3RoaXMucGF5YWJsZSA/IFwiIHBheWFibGVcIiA6IFwiXCJ9YDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYSBuZXcgKipGYWxsYmFja0ZyYWdtZW50KiogZm9yICUlb2JqJSUuXG4gICAgICovXG4gICAgc3RhdGljIGZyb20ob2JqKSB7XG4gICAgICAgIGlmIChGYWxsYmFja0ZyYWdtZW50LmlzRnJhZ21lbnQob2JqKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChvYmopID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBGYWxsYmFja0ZyYWdtZW50LmZyb20obGV4KG9iaikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwiaW52YWxpZCBmYWxsYmFjayBmcmFnbWVudFwiLCBcIm9ialwiLCBvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIFRva2VuU3RyaW5nKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck9iaiA9IG9iai50b1N0cmluZygpO1xuICAgICAgICAgICAgY29uc3QgdG9wSXNWYWxpZCA9IG9iai5wZWVrS2V5d29yZChzZXRpZnkoW1wiZmFsbGJhY2tcIiwgXCJyZWNlaXZlXCJdKSk7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudCh0b3BJc1ZhbGlkLCBcInR5cGUgbXVzdCBiZSBmYWxsYmFjayBvciByZWNlaXZlXCIsIFwib2JqXCIsIGVycm9yT2JqKTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBvYmoucG9wS2V5d29yZChzZXRpZnkoW1wiZmFsbGJhY2tcIiwgXCJyZWNlaXZlXCJdKSk7XG4gICAgICAgICAgICAvLyByZWNlaXZlKClcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcInJlY2VpdmVcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0cyA9IGNvbnN1bWVQYXJhbXMob2JqKTtcbiAgICAgICAgICAgICAgICBhc3NlcnRBcmd1bWVudChpbnB1dHMubGVuZ3RoID09PSAwLCBgcmVjZWl2ZSBjYW5ub3QgaGF2ZSBhcmd1bWVudHNgLCBcIm9iai5pbnB1dHNcIiwgaW5wdXRzKTtcbiAgICAgICAgICAgICAgICBjb25zdW1lS2V5d29yZHMob2JqLCBzZXRpZnkoW1wicGF5YWJsZVwiXSkpO1xuICAgICAgICAgICAgICAgIGNvbnN1bWVFb2kob2JqKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZhbGxiYWNrRnJhZ21lbnQoX2d1YXJkLCBbXSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmYWxsYmFjaygpIFtwYXlhYmxlXVxuICAgICAgICAgICAgLy8gZmFsbGJhY2soYnl0ZXMpIFtwYXlhYmxlXSByZXR1cm5zIChieXRlcylcbiAgICAgICAgICAgIGxldCBpbnB1dHMgPSBjb25zdW1lUGFyYW1zKG9iaik7XG4gICAgICAgICAgICBpZiAoaW5wdXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGlucHV0cy5sZW5ndGggPT09IDEgJiYgaW5wdXRzWzBdLnR5cGUgPT09IFwiYnl0ZXNcIiwgXCJpbnZhbGlkIGZhbGxiYWNrIGlucHV0c1wiLCBcIm9iai5pbnB1dHNcIiwgaW5wdXRzLm1hcCgoaSkgPT4gaS5mb3JtYXQoXCJtaW5pbWFsXCIpKS5qb2luKFwiLCBcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5wdXRzID0gW1BhcmFtVHlwZS5mcm9tKFwiYnl0ZXNcIildO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbXV0YWJpbGl0eSA9IGNvbnN1bWVNdXRhYmlsaXR5KG9iaik7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChtdXRhYmlsaXR5ID09PSBcIm5vbnBheWFibGVcIiB8fCBtdXRhYmlsaXR5ID09PSBcInBheWFibGVcIiwgXCJmYWxsYmFjayBjYW5ub3QgYmUgY29uc3RhbnRzXCIsIFwib2JqLnN0YXRlTXV0YWJpbGl0eVwiLCBtdXRhYmlsaXR5KTtcbiAgICAgICAgICAgIGlmIChjb25zdW1lS2V5d29yZHMob2JqLCBzZXRpZnkoW1wicmV0dXJuc1wiXSkpLmhhcyhcInJldHVybnNcIikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvdXRwdXRzID0gY29uc3VtZVBhcmFtcyhvYmopO1xuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KG91dHB1dHMubGVuZ3RoID09PSAxICYmIG91dHB1dHNbMF0udHlwZSA9PT0gXCJieXRlc1wiLCBcImludmFsaWQgZmFsbGJhY2sgb3V0cHV0c1wiLCBcIm9iai5vdXRwdXRzXCIsIG91dHB1dHMubWFwKChpKSA9PiBpLmZvcm1hdChcIm1pbmltYWxcIikpLmpvaW4oXCIsIFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdW1lRW9pKG9iaik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZhbGxiYWNrRnJhZ21lbnQoX2d1YXJkLCBpbnB1dHMsIG11dGFiaWxpdHkgPT09IFwicGF5YWJsZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwicmVjZWl2ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZhbGxiYWNrRnJhZ21lbnQoX2d1YXJkLCBbXSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai50eXBlID09PSBcImZhbGxiYWNrXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0cyA9IFtQYXJhbVR5cGUuZnJvbShcImJ5dGVzXCIpXTtcbiAgICAgICAgICAgIGNvbnN0IHBheWFibGUgPSAob2JqLnN0YXRlTXV0YWJpbGl0eSA9PT0gXCJwYXlhYmxlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGYWxsYmFja0ZyYWdtZW50KF9ndWFyZCwgaW5wdXRzLCBwYXlhYmxlKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgXCJpbnZhbGlkIGZhbGxiYWNrIGRlc2NyaXB0aW9uXCIsIFwib2JqXCIsIG9iaik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGBgdHJ1ZWBgIGFuZCBwcm92aWRlcyBhIHR5cGUgZ3VhcmQgaWYgJSV2YWx1ZSUlIGlzIGFcbiAgICAgKiAgKipGYWxsYmFja0ZyYWdtZW50KiouXG4gICAgICovXG4gICAgc3RhdGljIGlzRnJhZ21lbnQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZVtpbnRlcm5hbF0gPT09IEZhbGxiYWNrRnJhZ21lbnRJbnRlcm5hbCk7XG4gICAgfVxufVxuLyoqXG4gKiAgQSBGcmFnbWVudCB3aGljaCByZXByZXNlbnRzIGEgbWV0aG9kLlxuICovXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25GcmFnbWVudCBleHRlbmRzIE5hbWVkRnJhZ21lbnQge1xuICAgIC8qKlxuICAgICAqICBJZiB0aGUgZnVuY3Rpb24gaXMgY29uc3RhbnQgKGUuZy4gYGBwdXJlYGAgb3IgYGB2aWV3YGAgZnVuY3Rpb25zKS5cbiAgICAgKi9cbiAgICBjb25zdGFudDtcbiAgICAvKipcbiAgICAgKiAgVGhlIHJldHVybmVkIHR5cGVzIGZvciB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBvdXRwdXRzO1xuICAgIC8qKlxuICAgICAqICBUaGUgc3RhdGUgbXV0YWJpbGl0eSAoZS5nLiBgYHBheWFibGVgYCwgYGBub25wYXlhYmxlYGAsIGBgdmlld2BgXG4gICAgICogIG9yIGBgcHVyZWBgKVxuICAgICAqL1xuICAgIHN0YXRlTXV0YWJpbGl0eTtcbiAgICAvKipcbiAgICAgKiAgSWYgdGhlIGZ1bmN0aW9uIGNhbiBiZSBzZW50IHZhbHVlIGR1cmluZyBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHBheWFibGU7XG4gICAgLyoqXG4gICAgICogIFRoZSByZWNvbW1lbmRlZCBnYXMgbGltaXQgdG8gc2VuZCB3aGVuIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBnYXM7XG4gICAgLyoqXG4gICAgICogIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZ3VhcmQsIG5hbWUsIHN0YXRlTXV0YWJpbGl0eSwgaW5wdXRzLCBvdXRwdXRzLCBnYXMpIHtcbiAgICAgICAgc3VwZXIoZ3VhcmQsIFwiZnVuY3Rpb25cIiwgbmFtZSwgaW5wdXRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGludGVybmFsLCB7IHZhbHVlOiBGdW5jdGlvbkZyYWdtZW50SW50ZXJuYWwgfSk7XG4gICAgICAgIG91dHB1dHMgPSBPYmplY3QuZnJlZXplKG91dHB1dHMuc2xpY2UoKSk7XG4gICAgICAgIGNvbnN0IGNvbnN0YW50ID0gKHN0YXRlTXV0YWJpbGl0eSA9PT0gXCJ2aWV3XCIgfHwgc3RhdGVNdXRhYmlsaXR5ID09PSBcInB1cmVcIik7XG4gICAgICAgIGNvbnN0IHBheWFibGUgPSAoc3RhdGVNdXRhYmlsaXR5ID09PSBcInBheWFibGVcIik7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBjb25zdGFudCwgZ2FzLCBvdXRwdXRzLCBwYXlhYmxlLCBzdGF0ZU11dGFiaWxpdHkgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgRnVuY3Rpb24gc2VsZWN0b3IuXG4gICAgICovXG4gICAgZ2V0IHNlbGVjdG9yKCkge1xuICAgICAgICByZXR1cm4gaWQodGhpcy5mb3JtYXQoXCJzaWdoYXNoXCIpKS5zdWJzdHJpbmcoMCwgMTApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGZ1bmN0aW9uIGFzICUlZm9ybWF0JSUuXG4gICAgICovXG4gICAgZm9ybWF0KGZvcm1hdCkge1xuICAgICAgICBpZiAoZm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IFwic2lnaGFzaFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwianNvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgY29uc3RhbnQ6IHRoaXMuY29uc3RhbnQsXG4gICAgICAgICAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiAoKHRoaXMuc3RhdGVNdXRhYmlsaXR5ICE9PSBcIm5vbnBheWFibGVcIikgPyB0aGlzLnN0YXRlTXV0YWJpbGl0eSA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgcGF5YWJsZTogdGhpcy5wYXlhYmxlLFxuICAgICAgICAgICAgICAgIGdhczogKCh0aGlzLmdhcyAhPSBudWxsKSA/IHRoaXMuZ2FzIDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICBpbnB1dHM6IHRoaXMuaW5wdXRzLm1hcCgoaSkgPT4gSlNPTi5wYXJzZShpLmZvcm1hdChmb3JtYXQpKSksXG4gICAgICAgICAgICAgICAgb3V0cHV0czogdGhpcy5vdXRwdXRzLm1hcCgobykgPT4gSlNPTi5wYXJzZShvLmZvcm1hdChmb3JtYXQpKSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgaWYgKGZvcm1hdCAhPT0gXCJzaWdoYXNoXCIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFwiZnVuY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnB1c2godGhpcy5uYW1lICsgam9pblBhcmFtcyhmb3JtYXQsIHRoaXMuaW5wdXRzKSk7XG4gICAgICAgIGlmIChmb3JtYXQgIT09IFwic2lnaGFzaFwiKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZU11dGFiaWxpdHkgIT09IFwibm9ucGF5YWJsZVwiKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5zdGF0ZU11dGFiaWxpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMub3V0cHV0cyAmJiB0aGlzLm91dHB1dHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goXCJyZXR1cm5zXCIpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGpvaW5QYXJhbXMoZm9ybWF0LCB0aGlzLm91dHB1dHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmdhcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYEAke3RoaXMuZ2FzLnRvU3RyaW5nKCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKFwiIFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiB0aGUgc2VsZWN0b3IgZm9yIGEgZnVuY3Rpb24gd2l0aCAlJW5hbWUlJSBhbmQgJSVwYXJhbXMlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0U2VsZWN0b3IobmFtZSwgcGFyYW1zKSB7XG4gICAgICAgIHBhcmFtcyA9IChwYXJhbXMgfHwgW10pLm1hcCgocCkgPT4gUGFyYW1UeXBlLmZyb20ocCkpO1xuICAgICAgICBjb25zdCBmcmFnbWVudCA9IG5ldyBGdW5jdGlvbkZyYWdtZW50KF9ndWFyZCwgbmFtZSwgXCJ2aWV3XCIsIHBhcmFtcywgW10sIG51bGwpO1xuICAgICAgICByZXR1cm4gZnJhZ21lbnQuc2VsZWN0b3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGEgbmV3ICoqRnVuY3Rpb25GcmFnbWVudCoqIGZvciAlJW9iaiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tKG9iaikge1xuICAgICAgICBpZiAoRnVuY3Rpb25GcmFnbWVudC5pc0ZyYWdtZW50KG9iaikpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAob2JqKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb25GcmFnbWVudC5mcm9tKGxleChvYmopKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcImludmFsaWQgZnVuY3Rpb24gZnJhZ21lbnRcIiwgXCJvYmpcIiwgb2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBUb2tlblN0cmluZykge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGNvbnN1bWVOYW1lKFwiZnVuY3Rpb25cIiwgb2JqKTtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0cyA9IGNvbnN1bWVQYXJhbXMob2JqKTtcbiAgICAgICAgICAgIGNvbnN0IG11dGFiaWxpdHkgPSBjb25zdW1lTXV0YWJpbGl0eShvYmopO1xuICAgICAgICAgICAgbGV0IG91dHB1dHMgPSBbXTtcbiAgICAgICAgICAgIGlmIChjb25zdW1lS2V5d29yZHMob2JqLCBzZXRpZnkoW1wicmV0dXJuc1wiXSkpLmhhcyhcInJldHVybnNcIikpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRzID0gY29uc3VtZVBhcmFtcyhvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZ2FzID0gY29uc3VtZUdhcyhvYmopO1xuICAgICAgICAgICAgY29uc3VtZUVvaShvYmopO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbkZyYWdtZW50KF9ndWFyZCwgbmFtZSwgbXV0YWJpbGl0eSwgaW5wdXRzLCBvdXRwdXRzLCBnYXMpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzdGF0ZU11dGFiaWxpdHkgPSBvYmouc3RhdGVNdXRhYmlsaXR5O1xuICAgICAgICAvLyBVc2UgbGVnYWN5IFNvbGlkaXR5IEFCSSBsb2dpYyBpZiBzdGF0ZU11dGFiaWxpdHkgaXMgbWlzc2luZ1xuICAgICAgICBpZiAoc3RhdGVNdXRhYmlsaXR5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXRlTXV0YWJpbGl0eSA9IFwicGF5YWJsZVwiO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAob2JqLmNvbnN0YW50KSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZU11dGFiaWxpdHkgPSBcInZpZXdcIjtcbiAgICAgICAgICAgICAgICBpZiAoIW9iai5jb25zdGFudCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZU11dGFiaWxpdHkgPSBcInBheWFibGVcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAob2JqLnBheWFibGUpID09PSBcImJvb2xlYW5cIiAmJiAhb2JqLnBheWFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlTXV0YWJpbGl0eSA9IFwibm9ucGF5YWJsZVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIChvYmoucGF5YWJsZSkgPT09IFwiYm9vbGVhblwiICYmICFvYmoucGF5YWJsZSkge1xuICAgICAgICAgICAgICAgIHN0YXRlTXV0YWJpbGl0eSA9IFwibm9ucGF5YWJsZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEBUT0RPOiB2ZXJpZnlTdGF0ZSBmb3Igc3RhdGVNdXRhYmlsaXR5IChlLmcuIHRocm93IGlmXG4gICAgICAgIC8vICAgICAgICBwYXlhYmxlOiBmYWxzZSBidXQgc3RhdGVNdXRhYmlsaXR5IGlzIFwibm9ucGF5YWJsZVwiKVxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uRnJhZ21lbnQoX2d1YXJkLCBvYmoubmFtZSwgc3RhdGVNdXRhYmlsaXR5LCBvYmouaW5wdXRzID8gb2JqLmlucHV0cy5tYXAoUGFyYW1UeXBlLmZyb20pIDogW10sIG9iai5vdXRwdXRzID8gb2JqLm91dHB1dHMubWFwKFBhcmFtVHlwZS5mcm9tKSA6IFtdLCAob2JqLmdhcyAhPSBudWxsKSA/IG9iai5nYXMgOiBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYGB0cnVlYGAgYW5kIHByb3ZpZGVzIGEgdHlwZSBndWFyZCBpZiAlJXZhbHVlJSUgaXMgYVxuICAgICAqICAqKkZ1bmN0aW9uRnJhZ21lbnQqKi5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNGcmFnbWVudCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlW2ludGVybmFsXSA9PT0gRnVuY3Rpb25GcmFnbWVudEludGVybmFsKTtcbiAgICB9XG59XG4vKipcbiAqICBBIEZyYWdtZW50IHdoaWNoIHJlcHJlc2VudHMgYSBzdHJ1Y3R1cmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJ1Y3RGcmFnbWVudCBleHRlbmRzIE5hbWVkRnJhZ21lbnQge1xuICAgIC8qKlxuICAgICAqICBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGd1YXJkLCBuYW1lLCBpbnB1dHMpIHtcbiAgICAgICAgc3VwZXIoZ3VhcmQsIFwic3RydWN0XCIsIG5hbWUsIGlucHV0cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBpbnRlcm5hbCwgeyB2YWx1ZTogU3RydWN0RnJhZ21lbnRJbnRlcm5hbCB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzdHJ1Y3QgYXMgJSVmb3JtYXQlJS5cbiAgICAgKi9cbiAgICBmb3JtYXQoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkBUT0RPXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIG5ldyAqKlN0cnVjdEZyYWdtZW50KiogZm9yICUlb2JqJSUuXG4gICAgICovXG4gICAgc3RhdGljIGZyb20ob2JqKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKG9iaikgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cnVjdEZyYWdtZW50LmZyb20obGV4KG9iaikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwiaW52YWxpZCBzdHJ1Y3QgZnJhZ21lbnRcIiwgXCJvYmpcIiwgb2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBUb2tlblN0cmluZykge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGNvbnN1bWVOYW1lKFwic3RydWN0XCIsIG9iaik7XG4gICAgICAgICAgICBjb25zdCBpbnB1dHMgPSBjb25zdW1lUGFyYW1zKG9iaik7XG4gICAgICAgICAgICBjb25zdW1lRW9pKG9iaik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cnVjdEZyYWdtZW50KF9ndWFyZCwgbmFtZSwgaW5wdXRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFN0cnVjdEZyYWdtZW50KF9ndWFyZCwgb2JqLm5hbWUsIG9iai5pbnB1dHMgPyBvYmouaW5wdXRzLm1hcChQYXJhbVR5cGUuZnJvbSkgOiBbXSk7XG4gICAgfVxuICAgIC8vIEBUT0RPOiBmaXggdGhpcyByZXR1cm4gdHlwZVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGBgdHJ1ZWBgIGFuZCBwcm92aWRlcyBhIHR5cGUgZ3VhcmQgaWYgJSV2YWx1ZSUlIGlzIGFcbiAgICAgKiAgKipTdHJ1Y3RGcmFnbWVudCoqLlxuICAgICAqL1xuICAgIHN0YXRpYyBpc0ZyYWdtZW50KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWVbaW50ZXJuYWxdID09PSBTdHJ1Y3RGcmFnbWVudEludGVybmFsKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcmFnbWVudHMuanMubWFwIiwiLyoqXG4gKiAgV2hlbiBzZW5kaW5nIHZhbHVlcyB0byBvciByZWNlaXZpbmcgdmFsdWVzIGZyb20gYSBbW0NvbnRyYWN0XV0sIHRoZVxuICogIGRhdGEgaXMgZ2VuZXJhbGx5IGVuY29kZWQgdXNpbmcgdGhlIFtBQkkgc3RhbmRhcmRdKGxpbmstc29sYy1hYmkpLlxuICpcbiAqICBUaGUgQWJpQ29kZXIgcHJvdmlkZXMgYSB1dGlsaXR5IHRvIGVuY29kZSB2YWx1ZXMgdG8gQUJJIGRhdGEgYW5kXG4gKiAgZGVjb2RlIHZhbHVlcyBmcm9tIEFCSSBkYXRhLlxuICpcbiAqICBNb3N0IG9mIHRoZSB0aW1lLCBkZXZlbG9wZXJzIHNob3VsZCBmYXZvdXIgdGhlIFtbQ29udHJhY3RdXSBjbGFzcyxcbiAqICB3aGljaCBmdXJ0aGVyIGFic3RyYWN0cyBhIGxvdCBvZiB0aGUgZmluZXIgZGV0YWlscyBvZiBBQkkgZGF0YS5cbiAqXG4gKiAgQF9zZWN0aW9uIGFwaS9hYmkvYWJpLWNvZGVyOkFCSSBFbmNvZGluZ1xuICovXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS93aWtpL3dpa2kvRXRoZXJldW0tQ29udHJhY3QtQUJJXG5pbXBvcnQgeyBhc3NlcnRBcmd1bWVudENvdW50LCBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgUmVhZGVyLCBXcml0ZXIgfSBmcm9tIFwiLi9jb2RlcnMvYWJzdHJhY3QtY29kZXIuanNcIjtcbmltcG9ydCB7IEFkZHJlc3NDb2RlciB9IGZyb20gXCIuL2NvZGVycy9hZGRyZXNzLmpzXCI7XG5pbXBvcnQgeyBBcnJheUNvZGVyIH0gZnJvbSBcIi4vY29kZXJzL2FycmF5LmpzXCI7XG5pbXBvcnQgeyBCb29sZWFuQ29kZXIgfSBmcm9tIFwiLi9jb2RlcnMvYm9vbGVhbi5qc1wiO1xuaW1wb3J0IHsgQnl0ZXNDb2RlciB9IGZyb20gXCIuL2NvZGVycy9ieXRlcy5qc1wiO1xuaW1wb3J0IHsgRml4ZWRCeXRlc0NvZGVyIH0gZnJvbSBcIi4vY29kZXJzL2ZpeGVkLWJ5dGVzLmpzXCI7XG5pbXBvcnQgeyBOdWxsQ29kZXIgfSBmcm9tIFwiLi9jb2RlcnMvbnVsbC5qc1wiO1xuaW1wb3J0IHsgTnVtYmVyQ29kZXIgfSBmcm9tIFwiLi9jb2RlcnMvbnVtYmVyLmpzXCI7XG5pbXBvcnQgeyBTdHJpbmdDb2RlciB9IGZyb20gXCIuL2NvZGVycy9zdHJpbmcuanNcIjtcbmltcG9ydCB7IFR1cGxlQ29kZXIgfSBmcm9tIFwiLi9jb2RlcnMvdHVwbGUuanNcIjtcbmltcG9ydCB7IFBhcmFtVHlwZSB9IGZyb20gXCIuL2ZyYWdtZW50cy5qc1wiO1xuaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCIuLi9hZGRyZXNzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRCeXRlcywgaGV4bGlmeSwgbWFrZUVycm9yIH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG4vLyBodHRwczovL2RvY3Muc29saWRpdHlsYW5nLm9yZy9lbi92MC44LjE3L2NvbnRyb2wtc3RydWN0dXJlcy5odG1sXG5jb25zdCBQYW5pY1JlYXNvbnMgPSBuZXcgTWFwKCk7XG5QYW5pY1JlYXNvbnMuc2V0KDB4MDAsIFwiR0VORVJJQ19QQU5JQ1wiKTtcblBhbmljUmVhc29ucy5zZXQoMHgwMSwgXCJBU1NFUlRfRkFMU0VcIik7XG5QYW5pY1JlYXNvbnMuc2V0KDB4MTEsIFwiT1ZFUkZMT1dcIik7XG5QYW5pY1JlYXNvbnMuc2V0KDB4MTIsIFwiRElWSURFX0JZX1pFUk9cIik7XG5QYW5pY1JlYXNvbnMuc2V0KDB4MjEsIFwiRU5VTV9SQU5HRV9FUlJPUlwiKTtcblBhbmljUmVhc29ucy5zZXQoMHgyMiwgXCJCQURfU1RPUkFHRV9EQVRBXCIpO1xuUGFuaWNSZWFzb25zLnNldCgweDMxLCBcIlNUQUNLX1VOREVSRkxPV1wiKTtcblBhbmljUmVhc29ucy5zZXQoMHgzMiwgXCJBUlJBWV9SQU5HRV9FUlJPUlwiKTtcblBhbmljUmVhc29ucy5zZXQoMHg0MSwgXCJPVVRfT0ZfTUVNT1JZXCIpO1xuUGFuaWNSZWFzb25zLnNldCgweDUxLCBcIlVOSU5JVElBTElaRURfRlVOQ1RJT05fQ0FMTFwiKTtcbmNvbnN0IHBhcmFtVHlwZUJ5dGVzID0gbmV3IFJlZ0V4cCgvXmJ5dGVzKFswLTldKikkLyk7XG5jb25zdCBwYXJhbVR5cGVOdW1iZXIgPSBuZXcgUmVnRXhwKC9eKHU/aW50KShbMC05XSopJC8pO1xubGV0IGRlZmF1bHRDb2RlciA9IG51bGw7XG5sZXQgZGVmYXVsdE1heEluZmxhdGlvbiA9IDEwMjQ7XG5mdW5jdGlvbiBnZXRCdWlsdGluQ2FsbEV4Y2VwdGlvbihhY3Rpb24sIHR4LCBkYXRhLCBhYmlDb2Rlcikge1xuICAgIGxldCBtZXNzYWdlID0gXCJtaXNzaW5nIHJldmVydCBkYXRhXCI7XG4gICAgbGV0IHJlYXNvbiA9IG51bGw7XG4gICAgY29uc3QgaW52b2NhdGlvbiA9IG51bGw7XG4gICAgbGV0IHJldmVydCA9IG51bGw7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgICAgbWVzc2FnZSA9IFwiZXhlY3V0aW9uIHJldmVydGVkXCI7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gZ2V0Qnl0ZXMoZGF0YSk7XG4gICAgICAgIGRhdGEgPSBoZXhsaWZ5KGRhdGEpO1xuICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBtZXNzYWdlICs9IFwiIChubyBkYXRhIHByZXNlbnQ7IGxpa2VseSByZXF1aXJlKGZhbHNlKSBvY2N1cnJlZFwiO1xuICAgICAgICAgICAgcmVhc29uID0gXCJyZXF1aXJlKGZhbHNlKVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJ5dGVzLmxlbmd0aCAlIDMyICE9PSA0KSB7XG4gICAgICAgICAgICBtZXNzYWdlICs9IFwiIChjb3VsZCBub3QgZGVjb2RlIHJlYXNvbjsgaW52YWxpZCBkYXRhIGxlbmd0aClcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoZXhsaWZ5KGJ5dGVzLnNsaWNlKDAsIDQpKSA9PT0gXCIweDA4YzM3OWEwXCIpIHtcbiAgICAgICAgICAgIC8vIEVycm9yKHN0cmluZylcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVhc29uID0gYWJpQ29kZXIuZGVjb2RlKFtcInN0cmluZ1wiXSwgYnl0ZXMuc2xpY2UoNCkpWzBdO1xuICAgICAgICAgICAgICAgIHJldmVydCA9IHtcbiAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBcIkVycm9yKHN0cmluZylcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJFcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICBhcmdzOiBbcmVhc29uXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbWVzc2FnZSArPSBgOiAke0pTT04uc3RyaW5naWZ5KHJlYXNvbil9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gXCIgKGNvdWxkIG5vdCBkZWNvZGUgcmVhc29uOyBpbnZhbGlkIHN0cmluZyBkYXRhKVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhleGxpZnkoYnl0ZXMuc2xpY2UoMCwgNCkpID09PSBcIjB4NGU0ODdiNzFcIikge1xuICAgICAgICAgICAgLy8gUGFuaWModWludDI1NilcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZSA9IE51bWJlcihhYmlDb2Rlci5kZWNvZGUoW1widWludDI1NlwiXSwgYnl0ZXMuc2xpY2UoNCkpWzBdKTtcbiAgICAgICAgICAgICAgICByZXZlcnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogXCJQYW5pYyh1aW50MjU2KVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlBhbmljXCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtjb2RlXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVhc29uID0gYFBhbmljIGR1ZSB0byAke1BhbmljUmVhc29ucy5nZXQoY29kZSkgfHwgXCJVTktOT1dOXCJ9KCR7Y29kZX0pYDtcbiAgICAgICAgICAgICAgICBtZXNzYWdlICs9IGA6ICR7cmVhc29ufWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlICs9IFwiIChjb3VsZCBub3QgZGVjb2RlIHBhbmljIGNvZGUpXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlICs9IFwiICh1bmtub3duIGN1c3RvbSBlcnJvcilcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHtcbiAgICAgICAgdG86ICh0eC50byA/IGdldEFkZHJlc3ModHgudG8pIDogbnVsbCksXG4gICAgICAgIGRhdGE6ICh0eC5kYXRhIHx8IFwiMHhcIilcbiAgICB9O1xuICAgIGlmICh0eC5mcm9tKSB7XG4gICAgICAgIHRyYW5zYWN0aW9uLmZyb20gPSBnZXRBZGRyZXNzKHR4LmZyb20pO1xuICAgIH1cbiAgICByZXR1cm4gbWFrZUVycm9yKG1lc3NhZ2UsIFwiQ0FMTF9FWENFUFRJT05cIiwge1xuICAgICAgICBhY3Rpb24sIGRhdGEsIHJlYXNvbiwgdHJhbnNhY3Rpb24sIGludm9jYXRpb24sIHJldmVydFxuICAgIH0pO1xufVxuLyoqXG4gKiAgVGhlICoqQWJpQ29kZXIqKiBpcyBhIGxvdy1sZXZlbCBjbGFzcyByZXNwb25zaWJsZSBmb3IgZW5jb2RpbmcgSmF2YVNjcmlwdFxuICogIHZhbHVlcyBpbnRvIGJpbmFyeSBkYXRhIGFuZCBkZWNvZGluZyBiaW5hcnkgZGF0YSBpbnRvIEphdmFTY3JpcHQgdmFsdWVzLlxuICovXG5leHBvcnQgY2xhc3MgQWJpQ29kZXIge1xuICAgICNnZXRDb2RlcihwYXJhbSkge1xuICAgICAgICBpZiAocGFyYW0uaXNBcnJheSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFycmF5Q29kZXIodGhpcy4jZ2V0Q29kZXIocGFyYW0uYXJyYXlDaGlsZHJlbiksIHBhcmFtLmFycmF5TGVuZ3RoLCBwYXJhbS5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW0uaXNUdXBsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFR1cGxlQ29kZXIocGFyYW0uY29tcG9uZW50cy5tYXAoKGMpID0+IHRoaXMuI2dldENvZGVyKGMpKSwgcGFyYW0ubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChwYXJhbS5iYXNlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImFkZHJlc3NcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFkZHJlc3NDb2RlcihwYXJhbS5uYW1lKTtcbiAgICAgICAgICAgIGNhc2UgXCJib29sXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCb29sZWFuQ29kZXIocGFyYW0ubmFtZSk7XG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdHJpbmdDb2RlcihwYXJhbS5uYW1lKTtcbiAgICAgICAgICAgIGNhc2UgXCJieXRlc1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQnl0ZXNDb2RlcihwYXJhbS5uYW1lKTtcbiAgICAgICAgICAgIGNhc2UgXCJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE51bGxDb2RlcihwYXJhbS5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB1P2ludFswLTldKlxuICAgICAgICBsZXQgbWF0Y2ggPSBwYXJhbS50eXBlLm1hdGNoKHBhcmFtVHlwZU51bWJlcik7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgbGV0IHNpemUgPSBwYXJzZUludChtYXRjaFsyXSB8fCBcIjI1NlwiKTtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHNpemUgIT09IDAgJiYgc2l6ZSA8PSAyNTYgJiYgKHNpemUgJSA4KSA9PT0gMCwgXCJpbnZhbGlkIFwiICsgbWF0Y2hbMV0gKyBcIiBiaXQgbGVuZ3RoXCIsIFwicGFyYW1cIiwgcGFyYW0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOdW1iZXJDb2RlcihzaXplIC8gOCwgKG1hdGNoWzFdID09PSBcImludFwiKSwgcGFyYW0ubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYnl0ZXNbMC05XStcbiAgICAgICAgbWF0Y2ggPSBwYXJhbS50eXBlLm1hdGNoKHBhcmFtVHlwZUJ5dGVzKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBsZXQgc2l6ZSA9IHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHNpemUgIT09IDAgJiYgc2l6ZSA8PSAzMiwgXCJpbnZhbGlkIGJ5dGVzIGxlbmd0aFwiLCBcInBhcmFtXCIsIHBhcmFtKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRml4ZWRCeXRlc0NvZGVyKHNpemUsIHBhcmFtLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcImludmFsaWQgdHlwZVwiLCBcInR5cGVcIiwgcGFyYW0udHlwZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBHZXQgdGhlIGRlZmF1bHQgdmFsdWVzIGZvciB0aGUgZ2l2ZW4gJSV0eXBlcyUlLlxuICAgICAqXG4gICAgICogIEZvciBleGFtcGxlLCBhIGBgdWludGBgIGlzIGJ5IGRlZmF1bHQgYGAwYGAgYW5kIGBgYm9vbGBgXG4gICAgICogIGlzIGJ5IGRlZmF1bHQgYGBmYWxzZWBgLlxuICAgICAqL1xuICAgIGdldERlZmF1bHRWYWx1ZSh0eXBlcykge1xuICAgICAgICBjb25zdCBjb2RlcnMgPSB0eXBlcy5tYXAoKHR5cGUpID0+IHRoaXMuI2dldENvZGVyKFBhcmFtVHlwZS5mcm9tKHR5cGUpKSk7XG4gICAgICAgIGNvbnN0IGNvZGVyID0gbmV3IFR1cGxlQ29kZXIoY29kZXJzLCBcIl9cIik7XG4gICAgICAgIHJldHVybiBjb2Rlci5kZWZhdWx0VmFsdWUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEVuY29kZSB0aGUgJSV2YWx1ZXMlJSBhcyB0aGUgJSV0eXBlcyUlIGludG8gQUJJIGRhdGEuXG4gICAgICpcbiAgICAgKiAgQHJldHVybnMgRGF0YUhleHN0cmluZ1xuICAgICAqL1xuICAgIGVuY29kZSh0eXBlcywgdmFsdWVzKSB7XG4gICAgICAgIGFzc2VydEFyZ3VtZW50Q291bnQodmFsdWVzLmxlbmd0aCwgdHlwZXMubGVuZ3RoLCBcInR5cGVzL3ZhbHVlcyBsZW5ndGggbWlzbWF0Y2hcIik7XG4gICAgICAgIGNvbnN0IGNvZGVycyA9IHR5cGVzLm1hcCgodHlwZSkgPT4gdGhpcy4jZ2V0Q29kZXIoUGFyYW1UeXBlLmZyb20odHlwZSkpKTtcbiAgICAgICAgY29uc3QgY29kZXIgPSAobmV3IFR1cGxlQ29kZXIoY29kZXJzLCBcIl9cIikpO1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBuZXcgV3JpdGVyKCk7XG4gICAgICAgIGNvZGVyLmVuY29kZSh3cml0ZXIsIHZhbHVlcyk7XG4gICAgICAgIHJldHVybiB3cml0ZXIuZGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIERlY29kZSB0aGUgQUJJICUlZGF0YSUlIGFzIHRoZSAlJXR5cGVzJSUgaW50byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAgSWYgJSVsb29zZSUlIGRlY29kaW5nIGlzIGVuYWJsZWQsIHRoZW4gc3RyaWN0IHBhZGRpbmcgaXNcbiAgICAgKiAgbm90IGVuZm9yY2VkLiBTb21lIG9sZGVyIHZlcnNpb25zIG9mIFNvbGlkaXR5IGluY29ycmVjdGx5XG4gICAgICogIHBhZGRlZCBldmVudCBkYXRhIGVtaXR0ZWQgZnJvbSBgYGV4dGVybmFsYGAgZnVuY3Rpb25zLlxuICAgICAqL1xuICAgIGRlY29kZSh0eXBlcywgZGF0YSwgbG9vc2UpIHtcbiAgICAgICAgY29uc3QgY29kZXJzID0gdHlwZXMubWFwKCh0eXBlKSA9PiB0aGlzLiNnZXRDb2RlcihQYXJhbVR5cGUuZnJvbSh0eXBlKSkpO1xuICAgICAgICBjb25zdCBjb2RlciA9IG5ldyBUdXBsZUNvZGVyKGNvZGVycywgXCJfXCIpO1xuICAgICAgICByZXR1cm4gY29kZXIuZGVjb2RlKG5ldyBSZWFkZXIoZGF0YSwgbG9vc2UsIGRlZmF1bHRNYXhJbmZsYXRpb24pKTtcbiAgICB9XG4gICAgc3RhdGljIF9zZXREZWZhdWx0TWF4SW5mbGF0aW9uKHZhbHVlKSB7XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KHR5cGVvZiAodmFsdWUpID09PSBcIm51bWJlclwiICYmIE51bWJlci5pc0ludGVnZXIodmFsdWUpLCBcImludmFsaWQgZGVmYXVsdE1heEluZmxhdGlvbiBmYWN0b3JcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIGRlZmF1bHRNYXhJbmZsYXRpb24gPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIHNoYXJlZCBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgYSBkZWZhdWx0IFtbQWJpQ29kZXJdXS5cbiAgICAgKlxuICAgICAqICBPbiB0aGUgZmlyc3QgY2FsbCwgdGhlIGluc3RhbmNlIGlzIGNyZWF0ZWQgaW50ZXJuYWxseS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZGVmYXVsdEFiaUNvZGVyKCkge1xuICAgICAgICBpZiAoZGVmYXVsdENvZGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIGRlZmF1bHRDb2RlciA9IG5ldyBBYmlDb2RlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q29kZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGFuIGV0aGVycy1jb21wYXRpYmxlIFtbQ2FsbEV4Y2VwdGlvbkVycm9yXV0gRXJyb3IgZm9yIHRoZSBnaXZlblxuICAgICAqICByZXN1bHQgJSVkYXRhJSUgZm9yIHRoZSBbW0NhbGxFeGNlcHRpb25BY3Rpb25dXSAlJWFjdGlvbiUlIGFnYWluc3RcbiAgICAgKiAgdGhlIFRyYW5zYWN0aW9uICUldHglJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0QnVpbHRpbkNhbGxFeGNlcHRpb24oYWN0aW9uLCB0eCwgZGF0YSkge1xuICAgICAgICByZXR1cm4gZ2V0QnVpbHRpbkNhbGxFeGNlcHRpb24oYWN0aW9uLCB0eCwgZGF0YSwgQWJpQ29kZXIuZGVmYXVsdEFiaUNvZGVyKCkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFiaS1jb2Rlci5qcy5tYXAiLCJpbXBvcnQgeyBhc3NlcnQsIGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRBZGRyZXNzIH0gZnJvbSBcIi4vYWRkcmVzcy5qc1wiO1xuLyoqXG4gKiAgUmV0dXJucyB0cnVlIGlmICUldmFsdWUlJSBpcyBhbiBvYmplY3Qgd2hpY2ggaW1wbGVtZW50cyB0aGVcbiAqICBbW0FkZHJlc3NhYmxlXV0gaW50ZXJmYWNlLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIC8vIFdhbGxldHMgYW5kIEFic3RyYWN0U2lnbmVyIHN1Yi1jbGFzc2VzXG4gKiAgICBpc0FkZHJlc3NhYmxlKFdhbGxldC5jcmVhdGVSYW5kb20oKSlcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBDb250cmFjdHNcbiAqICAgIGNvbnRyYWN0ID0gbmV3IENvbnRyYWN0KFwiZGFpLnRva2Vucy5ldGhlcnMuZXRoXCIsIFsgXSwgcHJvdmlkZXIpXG4gKiAgICBpc0FkZHJlc3NhYmxlKGNvbnRyYWN0KVxuICogICAgLy9fcmVzdWx0OlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBZGRyZXNzYWJsZSh2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdHlwZW9mICh2YWx1ZS5nZXRBZGRyZXNzKSA9PT0gXCJmdW5jdGlvblwiKTtcbn1cbi8qKlxuICogIFJldHVybnMgdHJ1ZSBpZiAlJXZhbHVlJSUgaXMgYSB2YWxpZCBhZGRyZXNzLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIC8vIFZhbGlkIGFkZHJlc3NcbiAqICAgIGlzQWRkcmVzcyhcIjB4OGJhMWYxMDk1NTFiRDQzMjgwMzAxMjY0NUFjMTM2ZGRkNjREQkE3MlwiKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIC8vIFZhbGlkIElDQVAgYWRkcmVzc1xuICogICAgaXNBZGRyZXNzKFwiWEU2NUdCNkxETlhZT0ZUWDBOU1YzRlVXS09XSVhBTUpLMzZcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBJbnZhbGlkIGNoZWNrc3VtXG4gKiAgICBpc0FkZHJlc3MoXCIweDhCYTFmMTA5NTUxYkQ0MzI4MDMwMTI2NDVBYzEzNmRkZDY0REJhNzJcIilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBJbnZhbGlkIElDQVAgY2hlY2tzdW1cbiAqICAgIGlzQWRkcmVzcyhcIjB4OEJhMWYxMDk1NTFiRDQzMjgwMzAxMjY0NUFjMTM2ZGRkNjREQkE3MlwiKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIC8vIE5vdCBhbiBhZGRyZXNzIChhbiBFTlMgbmFtZSByZXF1aXJlcyBhIHByb3ZpZGVkIGFuZCBhblxuICogICAgLy8gYXN5bmNocm9ub3VzIEFQSSB0byBhY2Nlc3MpXG4gKiAgICBpc0FkZHJlc3MoXCJyaWNtb28uZXRoXCIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FkZHJlc3ModmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgICBnZXRBZGRyZXNzKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuYXN5bmMgZnVuY3Rpb24gY2hlY2tBZGRyZXNzKHRhcmdldCwgcHJvbWlzZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb21pc2U7XG4gICAgaWYgKHJlc3VsdCA9PSBudWxsIHx8IHJlc3VsdCA9PT0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIikge1xuICAgICAgICBhc3NlcnQodHlwZW9mICh0YXJnZXQpICE9PSBcInN0cmluZ1wiLCBcInVuY29uZmlndXJlZCBuYW1lXCIsIFwiVU5DT05GSUdVUkVEX05BTUVcIiwgeyB2YWx1ZTogdGFyZ2V0IH0pO1xuICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgXCJpbnZhbGlkIEFkZHJlc3NMaWtlIHZhbHVlOyBkaWQgbm90IHJlc29sdmUgdG8gYSB2YWx1ZSBhZGRyZXNzXCIsIFwidGFyZ2V0XCIsIHRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiBnZXRBZGRyZXNzKHJlc3VsdCk7XG59XG4vKipcbiAqICBSZXNvbHZlcyB0byBhbiBhZGRyZXNzIGZvciB0aGUgJSV0YXJnZXQlJSwgd2hpY2ggbWF5IGJlIGFueVxuICogIHN1cHBvcnRlZCBhZGRyZXNzIHR5cGUsIGFuIFtbQWRkcmVzc2FibGVdXSBvciBhIFByb21pc2Ugd2hpY2hcbiAqICByZXNvbHZlcyB0byBhbiBhZGRyZXNzLlxuICpcbiAqICBJZiBhbiBFTlMgbmFtZSBpcyBwcm92aWRlZCwgYnV0IHRoYXQgbmFtZSBoYXMgbm90IGJlZW4gY29ycmVjdGx5XG4gKiAgY29uZmlndXJlZCBhIFtbVW5jb25maWd1cmVkTmFtZUVycm9yXV0gaXMgdGhyb3duLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIGFkZHIgPSBcIjB4NkIxNzU0NzRFODkwOTRDNDREYTk4Yjk1NEVlZGVBQzQ5NTI3MWQwRlwiXG4gKlxuICogICAgLy8gQWRkcmVzc2VzIGFyZSByZXR1cm4gc3luY2hyb25vdXNseVxuICogICAgcmVzb2x2ZUFkZHJlc3MoYWRkciwgcHJvdmlkZXIpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgLy8gQWRkcmVzcyBwcm9taXNlcyBhcmUgcmVzb2x2ZWQgYXN5bmNocm9ub3VzbHlcbiAqICAgIHJlc29sdmVBZGRyZXNzKFByb21pc2UucmVzb2x2ZShhZGRyKSlcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBFTlMgbmFtZXMgYXJlIHJlc29sdmVkIGFzeW5jaHJvbm91c2x5XG4gKiAgICByZXNvbHZlQWRkcmVzcyhcImRhaS50b2tlbnMuZXRoZXJzLmV0aFwiLCBwcm92aWRlcilcbiAqICAgIC8vX3Jlc3VsdDpcbiAqXG4gKiAgICAvLyBBZGRyZXNzYWJsZSBvYmplY3RzIGFyZSByZXNvbHZlZCBhc3luY2hyb25vdXNseVxuICogICAgY29udHJhY3QgPSBuZXcgQ29udHJhY3QoYWRkciwgWyBdKVxuICogICAgcmVzb2x2ZUFkZHJlc3MoY29udHJhY3QsIHByb3ZpZGVyKVxuICogICAgLy9fcmVzdWx0OlxuICpcbiAqICAgIC8vIFVuY29uZmlndXJlZCBFTlMgbmFtZXMgcmVqZWN0XG4gKiAgICByZXNvbHZlQWRkcmVzcyhcIm5vdGhpbmctaGVyZS5yaWNtb28uZXRoXCIsIHByb3ZpZGVyKVxuICogICAgLy9fZXJyb3I6XG4gKlxuICogICAgLy8gRU5TIG5hbWVzIHJlcXVpcmUgYSBOYW1lUmVzb2x2ZXIgb2JqZWN0IHBhc3NlZCBpblxuICogICAgLy8gKG5vdGljZSB0aGUgcHJvdmlkZXIgd2FzIG9taXR0ZWQpXG4gKiAgICByZXNvbHZlQWRkcmVzcyhcIm5vdGhpbmctaGVyZS5yaWNtb28uZXRoXCIpXG4gKiAgICAvL19lcnJvcjpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVBZGRyZXNzKHRhcmdldCwgcmVzb2x2ZXIpIHtcbiAgICBpZiAodHlwZW9mICh0YXJnZXQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmICh0YXJnZXQubWF0Y2goL14weFswLTlhLWZdezQwfSQvaSkpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRBZGRyZXNzKHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0KHJlc29sdmVyICE9IG51bGwsIFwiRU5TIHJlc29sdXRpb24gcmVxdWlyZXMgYSBwcm92aWRlclwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJyZXNvbHZlTmFtZVwiIH0pO1xuICAgICAgICByZXR1cm4gY2hlY2tBZGRyZXNzKHRhcmdldCwgcmVzb2x2ZXIucmVzb2x2ZU5hbWUodGFyZ2V0KSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQWRkcmVzc2FibGUodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gY2hlY2tBZGRyZXNzKHRhcmdldCwgdGFyZ2V0LmdldEFkZHJlc3MoKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRhcmdldCAmJiB0eXBlb2YgKHRhcmdldC50aGVuKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBjaGVja0FkZHJlc3ModGFyZ2V0LCB0YXJnZXQpO1xuICAgIH1cbiAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgXCJ1bnN1cHBvcnRlZCBhZGRyZXNzYWJsZSB2YWx1ZVwiLCBcInRhcmdldFwiLCB0YXJnZXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlY2tzLmpzLm1hcCIsIi8vaW1wb3J0IHsgVHlwZWREYXRhRG9tYWluLCBUeXBlZERhdGFGaWVsZCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm92aWRlcmFic3RyYWN0LXNpZ25lclwiO1xuaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCIuLi9hZGRyZXNzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiLi4vY3J5cHRvL2luZGV4LmpzXCI7XG5pbXBvcnQgeyByZWNvdmVyQWRkcmVzcyB9IGZyb20gXCIuLi90cmFuc2FjdGlvbi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY29uY2F0LCBkZWZpbmVQcm9wZXJ0aWVzLCBnZXRCaWdJbnQsIGdldEJ5dGVzLCBoZXhsaWZ5LCBpc0hleFN0cmluZywgbWFzaywgdG9CZUhleCwgdG9RdWFudGl0eSwgdG9Ud29zLCB6ZXJvUGFkVmFsdWUsIGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpZCB9IGZyb20gXCIuL2lkLmpzXCI7XG5jb25zdCBwYWRkaW5nID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xucGFkZGluZy5maWxsKDApO1xuY29uc3QgQk5fXzEgPSBCaWdJbnQoLTEpO1xuY29uc3QgQk5fMCA9IEJpZ0ludCgwKTtcbmNvbnN0IEJOXzEgPSBCaWdJbnQoMSk7XG5jb25zdCBCTl9NQVhfVUlOVDI1NiA9IEJpZ0ludChcIjB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlwiKTtcbjtcbjtcbmZ1bmN0aW9uIGhleFBhZFJpZ2h0KHZhbHVlKSB7XG4gICAgY29uc3QgYnl0ZXMgPSBnZXRCeXRlcyh2YWx1ZSk7XG4gICAgY29uc3QgcGFkT2Zmc2V0ID0gYnl0ZXMubGVuZ3RoICUgMzI7XG4gICAgaWYgKHBhZE9mZnNldCkge1xuICAgICAgICByZXR1cm4gY29uY2F0KFtieXRlcywgcGFkZGluZy5zbGljZShwYWRPZmZzZXQpXSk7XG4gICAgfVxuICAgIHJldHVybiBoZXhsaWZ5KGJ5dGVzKTtcbn1cbmNvbnN0IGhleFRydWUgPSB0b0JlSGV4KEJOXzEsIDMyKTtcbmNvbnN0IGhleEZhbHNlID0gdG9CZUhleChCTl8wLCAzMik7XG5jb25zdCBkb21haW5GaWVsZFR5cGVzID0ge1xuICAgIG5hbWU6IFwic3RyaW5nXCIsXG4gICAgdmVyc2lvbjogXCJzdHJpbmdcIixcbiAgICBjaGFpbklkOiBcInVpbnQyNTZcIixcbiAgICB2ZXJpZnlpbmdDb250cmFjdDogXCJhZGRyZXNzXCIsXG4gICAgc2FsdDogXCJieXRlczMyXCJcbn07XG5jb25zdCBkb21haW5GaWVsZE5hbWVzID0gW1xuICAgIFwibmFtZVwiLCBcInZlcnNpb25cIiwgXCJjaGFpbklkXCIsIFwidmVyaWZ5aW5nQ29udHJhY3RcIiwgXCJzYWx0XCJcbl07XG5mdW5jdGlvbiBjaGVja1N0cmluZyhrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KHR5cGVvZiAodmFsdWUpID09PSBcInN0cmluZ1wiLCBgaW52YWxpZCBkb21haW4gdmFsdWUgZm9yICR7SlNPTi5zdHJpbmdpZnkoa2V5KX1gLCBgZG9tYWluLiR7a2V5fWAsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG59XG5jb25zdCBkb21haW5DaGVja3MgPSB7XG4gICAgbmFtZTogY2hlY2tTdHJpbmcoXCJuYW1lXCIpLFxuICAgIHZlcnNpb246IGNoZWNrU3RyaW5nKFwidmVyc2lvblwiKSxcbiAgICBjaGFpbklkOiBmdW5jdGlvbiAoX3ZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZ2V0QmlnSW50KF92YWx1ZSwgXCJkb21haW4uY2hhaW5JZFwiKTtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQodmFsdWUgPj0gMCwgXCJpbnZhbGlkIGNoYWluIElEXCIsIFwiZG9tYWluLmNoYWluSWRcIiwgX3ZhbHVlKTtcbiAgICAgICAgaWYgKE51bWJlci5pc1NhZmVJbnRlZ2VyKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvUXVhbnRpdHkodmFsdWUpO1xuICAgIH0sXG4gICAgdmVyaWZ5aW5nQ29udHJhY3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEFkZHJlc3ModmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIGBpbnZhbGlkIGRvbWFpbiB2YWx1ZSBcInZlcmlmeWluZ0NvbnRyYWN0XCJgLCBcImRvbWFpbi52ZXJpZnlpbmdDb250cmFjdFwiLCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzYWx0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBnZXRCeXRlcyh2YWx1ZSwgXCJkb21haW4uc2FsdFwiKTtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoYnl0ZXMubGVuZ3RoID09PSAzMiwgYGludmFsaWQgZG9tYWluIHZhbHVlIFwic2FsdFwiYCwgXCJkb21haW4uc2FsdFwiLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBoZXhsaWZ5KGJ5dGVzKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gZ2V0QmFzZUVuY29kZXIodHlwZSkge1xuICAgIC8vIGludFhYIGFuZCB1aW50WFhcbiAgICB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gdHlwZS5tYXRjaCgvXih1PylpbnQoXFxkKykkLyk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgY29uc3Qgc2lnbmVkID0gKG1hdGNoWzFdID09PSBcIlwiKTtcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gcGFyc2VJbnQobWF0Y2hbMl0pO1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQod2lkdGggJSA4ID09PSAwICYmIHdpZHRoICE9PSAwICYmIHdpZHRoIDw9IDI1NiAmJiBtYXRjaFsyXSA9PT0gU3RyaW5nKHdpZHRoKSwgXCJpbnZhbGlkIG51bWVyaWMgd2lkdGhcIiwgXCJ0eXBlXCIsIHR5cGUpO1xuICAgICAgICAgICAgY29uc3QgYm91bmRzVXBwZXIgPSBtYXNrKEJOX01BWF9VSU5UMjU2LCBzaWduZWQgPyAod2lkdGggLSAxKSA6IHdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IGJvdW5kc0xvd2VyID0gc2lnbmVkID8gKChib3VuZHNVcHBlciArIEJOXzEpICogQk5fXzEpIDogQk5fMDtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBnZXRCaWdJbnQoX3ZhbHVlLCBcInZhbHVlXCIpO1xuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHZhbHVlID49IGJvdW5kc0xvd2VyICYmIHZhbHVlIDw9IGJvdW5kc1VwcGVyLCBgdmFsdWUgb3V0LW9mLWJvdW5kcyBmb3IgJHt0eXBlfWAsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0b0JlSGV4KHNpZ25lZCA/IHRvVHdvcyh2YWx1ZSwgMjU2KSA6IHZhbHVlLCAzMik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGJ5dGVzWFhcbiAgICB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gdHlwZS5tYXRjaCgvXmJ5dGVzKFxcZCspJC8pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gcGFyc2VJbnQobWF0Y2hbMV0pO1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQod2lkdGggIT09IDAgJiYgd2lkdGggPD0gMzIgJiYgbWF0Y2hbMV0gPT09IFN0cmluZyh3aWR0aCksIFwiaW52YWxpZCBieXRlcyB3aWR0aFwiLCBcInR5cGVcIiwgdHlwZSk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBnZXRCeXRlcyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoYnl0ZXMubGVuZ3RoID09PSB3aWR0aCwgYGludmFsaWQgbGVuZ3RoIGZvciAke3R5cGV9YCwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhleFBhZFJpZ2h0KHZhbHVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJhZGRyZXNzXCI6IHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB6ZXJvUGFkVmFsdWUoZ2V0QWRkcmVzcyh2YWx1ZSksIDMyKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcImJvb2xcIjogcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuICgoIXZhbHVlKSA/IGhleEZhbHNlIDogaGV4VHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIGNhc2UgXCJieXRlc1wiOiByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4ga2VjY2FrMjU2KHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOiByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQodmFsdWUpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGVuY29kZVR5cGUobmFtZSwgZmllbGRzKSB7XG4gICAgcmV0dXJuIGAke25hbWV9KCR7ZmllbGRzLm1hcCgoeyBuYW1lLCB0eXBlIH0pID0+ICh0eXBlICsgXCIgXCIgKyBuYW1lKSkuam9pbihcIixcIil9KWA7XG59XG4vLyBmb29bXVszXSA9PiB7IGJhc2U6IFwiZm9vXCIsIGluZGV4OiBcIltdWzNdXCIsIGFycmF5OiB7XG4vLyAgICAgYmFzZTogXCJmb29cIiwgcHJlZml4OiBcImZvb1tdXCIsIGNvdW50OiAzIH0gfVxuZnVuY3Rpb24gc3BsaXRBcnJheSh0eXBlKSB7XG4gICAgY29uc3QgbWF0Y2ggPSB0eXBlLm1hdGNoKC9eKFteXFx4NWJdKikoKFxceDViXFxkKlxceDVkKSopKFxceDViKFxcZCopXFx4NWQpJC8pO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmFzZTogbWF0Y2hbMV0sXG4gICAgICAgICAgICBpbmRleDogKG1hdGNoWzJdICsgbWF0Y2hbNF0pLFxuICAgICAgICAgICAgYXJyYXk6IHtcbiAgICAgICAgICAgICAgICBiYXNlOiBtYXRjaFsxXSxcbiAgICAgICAgICAgICAgICBwcmVmaXg6IChtYXRjaFsxXSArIG1hdGNoWzJdKSxcbiAgICAgICAgICAgICAgICBjb3VudDogKG1hdGNoWzVdID8gcGFyc2VJbnQobWF0Y2hbNV0pIDogLTEpLFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4geyBiYXNlOiB0eXBlIH07XG59XG4vKipcbiAqICBBICoqVHlwZWREYXRhRW5jb2RlKiogcHJlcGFyZXMgYW5kIGVuY29kZXMgW1tsaW5rLWVpcC03MTJdXSBwYXlsb2Fkc1xuICogIGZvciBzaWduZWQgdHlwZWQgZGF0YS5cbiAqXG4gKiAgVGhpcyBpcyB1c2VmdWwgZm9yIHRob3NlIHRoYXQgd2lzaCB0byBjb21wdXRlIHZhcmlvdXMgY29tcG9uZW50cyBvZiBhXG4gKiAgdHlwZWQgZGF0YSBoYXNoLCBwcmltYXJ5IHR5cGVzLCBvciBzdWItY29tcG9uZW50cywgYnV0IGdlbmVyYWxseSB0aGVcbiAqICBoaWdoZXIgbGV2ZWwgW1tTaWduZXItc2lnblR5cGVkRGF0YV1dIGlzIG1vcmUgdXNlZnVsLlxuICovXG5leHBvcnQgY2xhc3MgVHlwZWREYXRhRW5jb2RlciB7XG4gICAgLyoqXG4gICAgICogIFRoZSBwcmltYXJ5IHR5cGUgZm9yIHRoZSBzdHJ1Y3R1cmVkIFtbdHlwZXNdXS5cbiAgICAgKlxuICAgICAqICBUaGlzIGlzIGRlcml2ZWQgYXV0b21hdGljYWxseSBmcm9tIHRoZSBbW3R5cGVzXV0sIHNpbmNlIG5vXG4gICAgICogIHJlY3Vyc2lvbiBpcyBwb3NzaWJsZSwgb25jZSB0aGUgREFHIGZvciB0aGUgdHlwZXMgaXMgY29uc3R1cmN0ZWRcbiAgICAgKiAgaW50ZXJuYWxseSwgdGhlIHByaW1hcnkgdHlwZSBtdXN0IGJlIHRoZSBvbmx5IHJlbWFpbmluZyB0eXBlIHdpdGhcbiAgICAgKiAgbm8gcGFyZW50IG5vZGVzLlxuICAgICAqL1xuICAgIHByaW1hcnlUeXBlO1xuICAgICN0eXBlcztcbiAgICAvKipcbiAgICAgKiAgVGhlIHR5cGVzLlxuICAgICAqL1xuICAgIGdldCB0eXBlcygpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy4jdHlwZXMpO1xuICAgIH1cbiAgICAjZnVsbFR5cGVzO1xuICAgICNlbmNvZGVyQ2FjaGU7XG4gICAgLyoqXG4gICAgICogIENyZWF0ZSBhIG5ldyAqKlR5cGVkRGF0YUVuY29kZXIqKiBmb3IgJSV0eXBlcyUlLlxuICAgICAqXG4gICAgICogIFRoaXMgcGVyZm9ybXMgYWxsIG5lY2Vzc2FyeSBjaGVja2luZyB0aGF0IHR5cGVzIGFyZSB2YWxpZCBhbmRcbiAgICAgKiAgZG8gbm90IHZpb2xhdGUgdGhlIFtbbGluay1laXAtNzEyXV0gc3RydWN0dXJhbCBjb25zdHJhaW50cyBhc1xuICAgICAqICB3ZWxsIGFzIGNvbXB1dGVzIHRoZSBbW3ByaW1hcnlUeXBlXV0uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoX3R5cGVzKSB7XG4gICAgICAgIHRoaXMuI2Z1bGxUeXBlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy4jZW5jb2RlckNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICAvLyBMaW5rIHN0cnVjdCB0eXBlcyB0byB0aGVpciBkaXJlY3QgY2hpbGQgc3RydWN0c1xuICAgICAgICBjb25zdCBsaW5rcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gTGluayBzdHJ1Y3RzIHRvIHN0cnVjdHMgd2hpY2ggY29udGFpbiB0aGVtIGFzIGEgY2hpbGRcbiAgICAgICAgY29uc3QgcGFyZW50cyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gTGluayBhbGwgc3VidHlwZXMgd2l0aGluIGEgZ2l2ZW4gc3RydWN0XG4gICAgICAgIGNvbnN0IHN1YnR5cGVzID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25zdCB0eXBlcyA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhfdHlwZXMpLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICAgICAgICAgIHR5cGVzW3R5cGVdID0gX3R5cGVzW3R5cGVdLm1hcCgoeyBuYW1lLCB0eXBlIH0pID0+IHtcbiAgICAgICAgICAgICAgICAvLyBOb3JtYWxpemUgdGhlIGJhc2UgdHlwZSAodW5sZXNzIG5hbWUgY29uZmxpY3QpXG4gICAgICAgICAgICAgICAgbGV0IHsgYmFzZSwgaW5kZXggfSA9IHNwbGl0QXJyYXkodHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKGJhc2UgPT09IFwiaW50XCIgJiYgIV90eXBlc1tcImludFwiXSkge1xuICAgICAgICAgICAgICAgICAgICBiYXNlID0gXCJpbnQyNTZcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJhc2UgPT09IFwidWludFwiICYmICFfdHlwZXNbXCJ1aW50XCJdKSB7XG4gICAgICAgICAgICAgICAgICAgIGJhc2UgPSBcInVpbnQyNTZcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbmFtZSwgdHlwZTogKGJhc2UgKyAoaW5kZXggfHwgXCJcIikpIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxpbmtzLnNldCh0eXBlLCBuZXcgU2V0KCkpO1xuICAgICAgICAgICAgcGFyZW50cy5zZXQodHlwZSwgW10pO1xuICAgICAgICAgICAgc3VidHlwZXMuc2V0KHR5cGUsIG5ldyBTZXQoKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0eXBlcyA9IEpTT04uc3RyaW5naWZ5KHR5cGVzKTtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHR5cGVzKSB7XG4gICAgICAgICAgICBjb25zdCB1bmlxdWVOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgdHlwZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBlYWNoIGZpZWxkIGhhcyBhIHVuaXF1ZSBuYW1lXG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoIXVuaXF1ZU5hbWVzLmhhcyhmaWVsZC5uYW1lKSwgYGR1cGxpY2F0ZSB2YXJpYWJsZSBuYW1lICR7SlNPTi5zdHJpbmdpZnkoZmllbGQubmFtZSl9IGluICR7SlNPTi5zdHJpbmdpZnkobmFtZSl9YCwgXCJ0eXBlc1wiLCBfdHlwZXMpO1xuICAgICAgICAgICAgICAgIHVuaXF1ZU5hbWVzLmFkZChmaWVsZC5uYW1lKTtcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGJhc2UgdHlwZSAoZHJvcCBhbnkgYXJyYXkgc3BlY2lmaWVycylcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlVHlwZSA9IHNwbGl0QXJyYXkoZmllbGQudHlwZSkuYmFzZTtcbiAgICAgICAgICAgICAgICBhc3NlcnRBcmd1bWVudChiYXNlVHlwZSAhPT0gbmFtZSwgYGNpcmN1bGFyIHR5cGUgcmVmZXJlbmNlIHRvICR7SlNPTi5zdHJpbmdpZnkoYmFzZVR5cGUpfWAsIFwidHlwZXNcIiwgX3R5cGVzKTtcbiAgICAgICAgICAgICAgICAvLyBJcyB0aGlzIGEgYmFzZSBlbmNvZGluZyB0eXBlP1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBnZXRCYXNlRW5jb2RlcihiYXNlVHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKGVuY29kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHBhcmVudHMuaGFzKGJhc2VUeXBlKSwgYHVua25vd24gdHlwZSAke0pTT04uc3RyaW5naWZ5KGJhc2VUeXBlKX1gLCBcInR5cGVzXCIsIF90eXBlcyk7XG4gICAgICAgICAgICAgICAgLy8gQWRkIGxpbmthZ2VcbiAgICAgICAgICAgICAgICBwYXJlbnRzLmdldChiYXNlVHlwZSkucHVzaChuYW1lKTtcbiAgICAgICAgICAgICAgICBsaW5rcy5nZXQobmFtZSkuYWRkKGJhc2VUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBEZWR1Y2UgdGhlIHByaW1hcnkgdHlwZVxuICAgICAgICBjb25zdCBwcmltYXJ5VHlwZXMgPSBBcnJheS5mcm9tKHBhcmVudHMua2V5cygpKS5maWx0ZXIoKG4pID0+IChwYXJlbnRzLmdldChuKS5sZW5ndGggPT09IDApKTtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQocHJpbWFyeVR5cGVzLmxlbmd0aCAhPT0gMCwgXCJtaXNzaW5nIHByaW1hcnkgdHlwZVwiLCBcInR5cGVzXCIsIF90eXBlcyk7XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KHByaW1hcnlUeXBlcy5sZW5ndGggPT09IDEsIGBhbWJpZ3VvdXMgcHJpbWFyeSB0eXBlcyBvciB1bnVzZWQgdHlwZXM6ICR7cHJpbWFyeVR5cGVzLm1hcCgodCkgPT4gKEpTT04uc3RyaW5naWZ5KHQpKSkuam9pbihcIiwgXCIpfWAsIFwidHlwZXNcIiwgX3R5cGVzKTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IHByaW1hcnlUeXBlOiBwcmltYXJ5VHlwZXNbMF0gfSk7XG4gICAgICAgIC8vIENoZWNrIGZvciBjaXJjdWxhciB0eXBlIHJlZmVyZW5jZXNcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tDaXJjdWxhcih0eXBlLCBmb3VuZCkge1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoIWZvdW5kLmhhcyh0eXBlKSwgYGNpcmN1bGFyIHR5cGUgcmVmZXJlbmNlIHRvICR7SlNPTi5zdHJpbmdpZnkodHlwZSl9YCwgXCJ0eXBlc1wiLCBfdHlwZXMpO1xuICAgICAgICAgICAgZm91bmQuYWRkKHR5cGUpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBsaW5rcy5nZXQodHlwZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXBhcmVudHMuaGFzKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY2hlY2sgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICBjaGVja0NpcmN1bGFyKGNoaWxkLCBmb3VuZCk7XG4gICAgICAgICAgICAgICAgLy8gTWFyayBhbGwgYW5jZXN0b3JzIGFzIGhhdmluZyB0aGlzIGRlY2VuZGFudFxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3VidHlwZSBvZiBmb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlcy5nZXQoc3VidHlwZSkuYWRkKGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3VuZC5kZWxldGUodHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tDaXJjdWxhcih0aGlzLnByaW1hcnlUeXBlLCBuZXcgU2V0KCkpO1xuICAgICAgICAvLyBDb21wdXRlIGVhY2ggZnVsbHkgZGVzY3JpYmUgdHlwZVxuICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCBzZXRdIG9mIHN1YnR5cGVzKSB7XG4gICAgICAgICAgICBjb25zdCBzdCA9IEFycmF5LmZyb20oc2V0KTtcbiAgICAgICAgICAgIHN0LnNvcnQoKTtcbiAgICAgICAgICAgIHRoaXMuI2Z1bGxUeXBlcy5zZXQobmFtZSwgZW5jb2RlVHlwZShuYW1lLCB0eXBlc1tuYW1lXSkgKyBzdC5tYXAoKHQpID0+IGVuY29kZVR5cGUodCwgdHlwZXNbdF0pKS5qb2luKFwiXCIpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJudGhlIGVuY29kZXIgZm9yIHRoZSBzcGVjaWZpYyAlJXR5cGUlJS5cbiAgICAgKi9cbiAgICBnZXRFbmNvZGVyKHR5cGUpIHtcbiAgICAgICAgbGV0IGVuY29kZXIgPSB0aGlzLiNlbmNvZGVyQ2FjaGUuZ2V0KHR5cGUpO1xuICAgICAgICBpZiAoIWVuY29kZXIpIHtcbiAgICAgICAgICAgIGVuY29kZXIgPSB0aGlzLiNnZXRFbmNvZGVyKHR5cGUpO1xuICAgICAgICAgICAgdGhpcy4jZW5jb2RlckNhY2hlLnNldCh0eXBlLCBlbmNvZGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW5jb2RlcjtcbiAgICB9XG4gICAgI2dldEVuY29kZXIodHlwZSkge1xuICAgICAgICAvLyBCYXNpYyBlbmNvZGVyIHR5cGUgKGFkZHJlc3MsIGJvb2wsIHVpbnQyNTYsIGV0YylcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlciA9IGdldEJhc2VFbmNvZGVyKHR5cGUpO1xuICAgICAgICAgICAgaWYgKGVuY29kZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBcnJheVxuICAgICAgICBjb25zdCBhcnJheSA9IHNwbGl0QXJyYXkodHlwZSkuYXJyYXk7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgICAgY29uc3Qgc3VidHlwZSA9IGFycmF5LnByZWZpeDtcbiAgICAgICAgICAgIGNvbnN0IHN1YkVuY29kZXIgPSB0aGlzLmdldEVuY29kZXIoc3VidHlwZSk7XG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoYXJyYXkuY291bnQgPT09IC0xIHx8IGFycmF5LmNvdW50ID09PSB2YWx1ZS5sZW5ndGgsIGBhcnJheSBsZW5ndGggbWlzbWF0Y2g7IGV4cGVjdGVkIGxlbmd0aCAke2FycmF5LmNvdW50fWAsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSB2YWx1ZS5tYXAoc3ViRW5jb2Rlcik7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI2Z1bGxUeXBlcy5oYXMoc3VidHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0Lm1hcChrZWNjYWsyNTYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ga2VjY2FrMjU2KGNvbmNhdChyZXN1bHQpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RydWN0XG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMudHlwZXNbdHlwZV07XG4gICAgICAgIGlmIChmaWVsZHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZWRUeXBlID0gaWQodGhpcy4jZnVsbFR5cGVzLmdldCh0eXBlKSk7XG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gZmllbGRzLm1hcCgoeyBuYW1lLCB0eXBlIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5nZXRFbmNvZGVyKHR5cGUpKHZhbHVlW25hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuI2Z1bGxUeXBlcy5oYXModHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrZWNjYWsyNTYocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhbHVlcy51bnNoaWZ0KGVuY29kZWRUeXBlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uY2F0KHZhbHVlcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBgdW5rbm93biB0eXBlOiAke3R5cGV9YCwgXCJ0eXBlXCIsIHR5cGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIHRoZSBmdWxsIHR5cGUgZm9yICUlbmFtZSUlLlxuICAgICAqL1xuICAgIGVuY29kZVR5cGUobmFtZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLiNmdWxsVHlwZXMuZ2V0KG5hbWUpO1xuICAgICAgICBhc3NlcnRBcmd1bWVudChyZXN1bHQsIGB1bmtub3duIHR5cGU6ICR7SlNPTi5zdHJpbmdpZnkobmFtZSl9YCwgXCJuYW1lXCIsIG5hbWUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIHRoZSBlbmNvZGVkICUldmFsdWUlJSBmb3IgdGhlICUldHlwZSUlLlxuICAgICAqL1xuICAgIGVuY29kZURhdGEodHlwZSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RW5jb2Rlcih0eXBlKSh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoZSBoYXNoIG9mICUldmFsdWUlJSBmb3IgdGhlIHR5cGUgb2YgJSVuYW1lJSUuXG4gICAgICovXG4gICAgaGFzaFN0cnVjdChuYW1lLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4ga2VjY2FrMjU2KHRoaXMuZW5jb2RlRGF0YShuYW1lLCB2YWx1ZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIHRoZSBmdWxsZWQgZW5jb2RlZCAlJXZhbHVlJSUgZm9yIHRoZSBbW3R5cGVzXV0uXG4gICAgICovXG4gICAgZW5jb2RlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuY29kZURhdGEodGhpcy5wcmltYXJ5VHlwZSwgdmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIHRoZSBoYXNoIG9mIHRoZSBmdWxseSBlbmNvZGVkICUldmFsdWUlJSBmb3IgdGhlIFtbdHlwZXNdXS5cbiAgICAgKi9cbiAgICBoYXNoKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc2hTdHJ1Y3QodGhpcy5wcmltYXJ5VHlwZSwgdmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgX3Zpc2l0KHR5cGUsIHZhbHVlLCBjYWxsYmFjaykge1xuICAgICAgICAvLyBCYXNpYyBlbmNvZGVyIHR5cGUgKGFkZHJlc3MsIGJvb2wsIHVpbnQyNTYsIGV0YylcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlciA9IGdldEJhc2VFbmNvZGVyKHR5cGUpO1xuICAgICAgICAgICAgaWYgKGVuY29kZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sodHlwZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEFycmF5XG4gICAgICAgIGNvbnN0IGFycmF5ID0gc3BsaXRBcnJheSh0eXBlKS5hcnJheTtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChhcnJheS5jb3VudCA9PT0gLTEgfHwgYXJyYXkuY291bnQgPT09IHZhbHVlLmxlbmd0aCwgYGFycmF5IGxlbmd0aCBtaXNtYXRjaDsgZXhwZWN0ZWQgbGVuZ3RoICR7YXJyYXkuY291bnR9YCwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubWFwKCh2KSA9PiB0aGlzLl92aXNpdChhcnJheS5wcmVmaXgsIHYsIGNhbGxiYWNrKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RydWN0XG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMudHlwZXNbdHlwZV07XG4gICAgICAgIGlmIChmaWVsZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZHMucmVkdWNlKChhY2N1bSwgeyBuYW1lLCB0eXBlIH0pID0+IHtcbiAgICAgICAgICAgICAgICBhY2N1bVtuYW1lXSA9IHRoaXMuX3Zpc2l0KHR5cGUsIHZhbHVlW25hbWVdLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgICAgICAgICAgfSwge30pO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBgdW5rbm93biB0eXBlOiAke3R5cGV9YCwgXCJ0eXBlXCIsIHR5cGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ2FsbCAlJWNhbGJhY2slJSBmb3IgZWFjaCB2YWx1ZSBpbiAlJXZhbHVlJSUsIHBhc3NpbmcgdGhlIHR5cGUgYW5kXG4gICAgICogIGNvbXBvbmVudCB3aXRoaW4gJSV2YWx1ZSUlLlxuICAgICAqXG4gICAgICogIFRoaXMgaXMgdXNlZnVsIGZvciByZXBsYWNpbmcgYWRkcmVzc2VzIG9yIG90aGVyIHRyYW5zZm9ybWF0aW9uIHRoYXRcbiAgICAgKiAgbWF5IGJlIGRlc2lyZWQgb24gZWFjaCBjb21wb25lbnQsIGJhc2VkIG9uIGl0cyB0eXBlLlxuICAgICAqL1xuICAgIHZpc2l0KHZhbHVlLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlzaXQodGhpcy5wcmltYXJ5VHlwZSwgdmFsdWUsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIENyZWF0ZSBhIG5ldyAqKlR5cGVkRGF0YUVuY29kZXIqKiBmb3IgJSV0eXBlcyUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tKHR5cGVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHlwZWREYXRhRW5jb2Rlcih0eXBlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gdGhlIHByaW1hcnkgdHlwZSBmb3IgJSV0eXBlcyUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRQcmltYXJ5VHlwZSh0eXBlcykge1xuICAgICAgICByZXR1cm4gVHlwZWREYXRhRW5jb2Rlci5mcm9tKHR5cGVzKS5wcmltYXJ5VHlwZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiB0aGUgaGFzaGVkIHN0cnVjdCBmb3IgJSV2YWx1ZSUlIHVzaW5nICUldHlwZXMlJSBhbmQgJSVuYW1lJSUuXG4gICAgICovXG4gICAgc3RhdGljIGhhc2hTdHJ1Y3QobmFtZSwgdHlwZXMsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBUeXBlZERhdGFFbmNvZGVyLmZyb20odHlwZXMpLmhhc2hTdHJ1Y3QobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIHRoZSBkb21haW4gaGFzaCBmb3IgJSVkb21haW4lJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaGFzaERvbWFpbihkb21haW4pIHtcbiAgICAgICAgY29uc3QgZG9tYWluRmllbGRzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBkb21haW4pIHtcbiAgICAgICAgICAgIGlmIChkb21haW5bbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGRvbWFpbkZpZWxkVHlwZXNbbmFtZV07XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudCh0eXBlLCBgaW52YWxpZCB0eXBlZC1kYXRhIGRvbWFpbiBrZXk6ICR7SlNPTi5zdHJpbmdpZnkobmFtZSl9YCwgXCJkb21haW5cIiwgZG9tYWluKTtcbiAgICAgICAgICAgIGRvbWFpbkZpZWxkcy5wdXNoKHsgbmFtZSwgdHlwZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBkb21haW5GaWVsZHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRvbWFpbkZpZWxkTmFtZXMuaW5kZXhPZihhLm5hbWUpIC0gZG9tYWluRmllbGROYW1lcy5pbmRleE9mKGIubmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gVHlwZWREYXRhRW5jb2Rlci5oYXNoU3RydWN0KFwiRUlQNzEyRG9tYWluXCIsIHsgRUlQNzEyRG9tYWluOiBkb21haW5GaWVsZHMgfSwgZG9tYWluKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiB0aGUgZnVsbHkgZW5jb2RlZCBbW2xpbmstZWlwLTcxMl1dICUldmFsdWUlJSBmb3IgJSV0eXBlcyUlIHdpdGggJSVkb21haW4lJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZW5jb2RlKGRvbWFpbiwgdHlwZXMsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjb25jYXQoW1xuICAgICAgICAgICAgXCIweDE5MDFcIixcbiAgICAgICAgICAgIFR5cGVkRGF0YUVuY29kZXIuaGFzaERvbWFpbihkb21haW4pLFxuICAgICAgICAgICAgVHlwZWREYXRhRW5jb2Rlci5mcm9tKHR5cGVzKS5oYXNoKHZhbHVlKVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiB0aGUgaGFzaCBvZiB0aGUgZnVsbHkgZW5jb2RlZCBbW2xpbmstZWlwLTcxMl1dICUldmFsdWUlJSBmb3IgJSV0eXBlcyUlIHdpdGggJSVkb21haW4lJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaGFzaChkb21haW4sIHR5cGVzLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4ga2VjY2FrMjU2KFR5cGVkRGF0YUVuY29kZXIuZW5jb2RlKGRvbWFpbiwgdHlwZXMsIHZhbHVlKSk7XG4gICAgfVxuICAgIC8vIFJlcGxhY2VzIGFsbCBhZGRyZXNzIHR5cGVzIHdpdGggRU5TIG5hbWVzIHdpdGggdGhlaXIgbG9va2VkIHVwIGFkZHJlc3NcbiAgICAvKipcbiAgICAgKiBSZXNvbHZlcyB0byB0aGUgdmFsdWUgZnJvbSByZXNvbHZpbmcgYWxsIGFkZHJlc3NlcyBpbiAlJXZhbHVlJSUgZm9yXG4gICAgICogJSV0eXBlcyUlIGFuZCB0aGUgJSVkb21haW4lJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgcmVzb2x2ZU5hbWVzKGRvbWFpbiwgdHlwZXMsIHZhbHVlLCByZXNvbHZlTmFtZSkge1xuICAgICAgICAvLyBNYWtlIGEgY29weSB0byBpc29sYXRlIGl0IGZyb20gdGhlIG9iamVjdCBwYXNzZWQgaW5cbiAgICAgICAgZG9tYWluID0gT2JqZWN0LmFzc2lnbih7fSwgZG9tYWluKTtcbiAgICAgICAgLy8gQWxsb3cgcGFzc2luZyBudWxsIHRvIGlnbm9yZSB2YWx1ZVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkb21haW4pIHtcbiAgICAgICAgICAgIGlmIChkb21haW5ba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGRvbWFpbltrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIExvb2sgdXAgYWxsIEVOUyBuYW1lc1xuICAgICAgICBjb25zdCBlbnNDYWNoZSA9IHt9O1xuICAgICAgICAvLyBEbyB3ZSBuZWVkIHRvIGxvb2sgdXAgdGhlIGRvbWFpbidzIHZlcmlmeWluZ0NvbnRyYWN0P1xuICAgICAgICBpZiAoZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0ICYmICFpc0hleFN0cmluZyhkb21haW4udmVyaWZ5aW5nQ29udHJhY3QsIDIwKSkge1xuICAgICAgICAgICAgZW5zQ2FjaGVbZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XSA9IFwiMHhcIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBhcmUgZ29pbmcgdG8gdXNlIHRoZSBlbmNvZGVyIHRvIHZpc2l0IGFsbCB0aGUgYmFzZSB2YWx1ZXNcbiAgICAgICAgY29uc3QgZW5jb2RlciA9IFR5cGVkRGF0YUVuY29kZXIuZnJvbSh0eXBlcyk7XG4gICAgICAgIC8vIEdldCBhIGxpc3Qgb2YgYWxsIHRoZSBhZGRyZXNzZXNcbiAgICAgICAgZW5jb2Rlci52aXNpdCh2YWx1ZSwgKHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJhZGRyZXNzXCIgJiYgIWlzSGV4U3RyaW5nKHZhbHVlLCAyMCkpIHtcbiAgICAgICAgICAgICAgICBlbnNDYWNoZVt2YWx1ZV0gPSBcIjB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBMb29rdXAgZWFjaCBuYW1lXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBlbnNDYWNoZSkge1xuICAgICAgICAgICAgZW5zQ2FjaGVbbmFtZV0gPSBhd2FpdCByZXNvbHZlTmFtZShuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXBsYWNlIHRoZSBkb21haW4gdmVyaWZ5aW5nQ29udHJhY3QgaWYgbmVlZGVkXG4gICAgICAgIGlmIChkb21haW4udmVyaWZ5aW5nQ29udHJhY3QgJiYgZW5zQ2FjaGVbZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XSkge1xuICAgICAgICAgICAgZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0ID0gZW5zQ2FjaGVbZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXBsYWNlIGFsbCBFTlMgbmFtZXMgd2l0aCB0aGVpciBhZGRyZXNzXG4gICAgICAgIHZhbHVlID0gZW5jb2Rlci52aXNpdCh2YWx1ZSwgKHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJhZGRyZXNzXCIgJiYgZW5zQ2FjaGVbdmFsdWVdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuc0NhY2hlW3ZhbHVlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7IGRvbWFpbiwgdmFsdWUgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIEpTT04tZW5jb2RlZCBwYXlsb2FkIGV4cGVjdGVkIGJ5IG5vZGVzIHdoaWNoIGltcGxlbWVudFxuICAgICAqICB0aGUgSlNPTi1SUEMgW1tsaW5rLWVpcC03MTJdXSBtZXRob2QuXG4gICAgICovXG4gICAgc3RhdGljIGdldFBheWxvYWQoZG9tYWluLCB0eXBlcywgdmFsdWUpIHtcbiAgICAgICAgLy8gVmFsaWRhdGUgdGhlIGRvbWFpbiBmaWVsZHNcbiAgICAgICAgVHlwZWREYXRhRW5jb2Rlci5oYXNoRG9tYWluKGRvbWFpbik7XG4gICAgICAgIC8vIERlcml2ZSB0aGUgRUlQNzEyRG9tYWluIFN0cnVjdCByZWZlcmVuY2UgdHlwZVxuICAgICAgICBjb25zdCBkb21haW5WYWx1ZXMgPSB7fTtcbiAgICAgICAgY29uc3QgZG9tYWluVHlwZXMgPSBbXTtcbiAgICAgICAgZG9tYWluRmllbGROYW1lcy5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGRvbWFpbltuYW1lXTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9tYWluVmFsdWVzW25hbWVdID0gZG9tYWluQ2hlY2tzW25hbWVdKHZhbHVlKTtcbiAgICAgICAgICAgIGRvbWFpblR5cGVzLnB1c2goeyBuYW1lLCB0eXBlOiBkb21haW5GaWVsZFR5cGVzW25hbWVdIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZW5jb2RlciA9IFR5cGVkRGF0YUVuY29kZXIuZnJvbSh0eXBlcyk7XG4gICAgICAgIC8vIEdldCB0aGUgbm9ybWFsaXplZCB0eXBlc1xuICAgICAgICB0eXBlcyA9IGVuY29kZXIudHlwZXM7XG4gICAgICAgIGNvbnN0IHR5cGVzV2l0aERvbWFpbiA9IE9iamVjdC5hc3NpZ24oe30sIHR5cGVzKTtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQodHlwZXNXaXRoRG9tYWluLkVJUDcxMkRvbWFpbiA9PSBudWxsLCBcInR5cGVzIG11c3Qgbm90IGNvbnRhaW4gRUlQNzEyRG9tYWluIHR5cGVcIiwgXCJ0eXBlcy5FSVA3MTJEb21haW5cIiwgdHlwZXMpO1xuICAgICAgICB0eXBlc1dpdGhEb21haW4uRUlQNzEyRG9tYWluID0gZG9tYWluVHlwZXM7XG4gICAgICAgIC8vIFZhbGlkYXRlIHRoZSBkYXRhIHN0cnVjdHVyZXMgYW5kIHR5cGVzXG4gICAgICAgIGVuY29kZXIuZW5jb2RlKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGVzOiB0eXBlc1dpdGhEb21haW4sXG4gICAgICAgICAgICBkb21haW46IGRvbWFpblZhbHVlcyxcbiAgICAgICAgICAgIHByaW1hcnlUeXBlOiBlbmNvZGVyLnByaW1hcnlUeXBlLFxuICAgICAgICAgICAgbWVzc2FnZTogZW5jb2Rlci52aXNpdCh2YWx1ZSwgKHR5cGUsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gYnl0ZXNcbiAgICAgICAgICAgICAgICBpZiAodHlwZS5tYXRjaCgvXmJ5dGVzKFxcZCopLykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhleGxpZnkoZ2V0Qnl0ZXModmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gdWludCBvciBpbnRcbiAgICAgICAgICAgICAgICBpZiAodHlwZS5tYXRjaCgvXnU/aW50LykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEJpZ0ludCh2YWx1ZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhZGRyZXNzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJvb2xcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhIXZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRBcmd1bWVudCh0eXBlb2YgKHZhbHVlKSA9PT0gXCJzdHJpbmdcIiwgXCJpbnZhbGlkIHN0cmluZ1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgdHlwZVwiLCBcInR5cGVcIiwgdHlwZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgIH1cbn1cbi8qKlxuICogIENvbXB1dGUgdGhlIGFkZHJlc3MgdXNlZCB0byBzaWduIHRoZSB0eXBlZCBkYXRhIGZvciB0aGUgJSVzaWduYXR1cmUlJS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZlcmlmeVR5cGVkRGF0YShkb21haW4sIHR5cGVzLCB2YWx1ZSwgc2lnbmF0dXJlKSB7XG4gICAgcmV0dXJuIHJlY292ZXJBZGRyZXNzKFR5cGVkRGF0YUVuY29kZXIuaGFzaChkb21haW4sIHR5cGVzLCB2YWx1ZSksIHNpZ25hdHVyZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlZC1kYXRhLmpzLm1hcCIsImltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiLi4vYWRkcmVzcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgYXNzZXJ0QXJndW1lbnQsIGlzSGV4U3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5mdW5jdGlvbiBhY2Nlc3NTZXRpZnkoYWRkciwgc3RvcmFnZUtleXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRyZXNzOiBnZXRBZGRyZXNzKGFkZHIpLFxuICAgICAgICBzdG9yYWdlS2V5czogc3RvcmFnZUtleXMubWFwKChzdG9yYWdlS2V5LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoaXNIZXhTdHJpbmcoc3RvcmFnZUtleSwgMzIpLCBcImludmFsaWQgc2xvdFwiLCBgc3RvcmFnZUtleXNbJHtpbmRleH1dYCwgc3RvcmFnZUtleSk7XG4gICAgICAgICAgICByZXR1cm4gc3RvcmFnZUtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KVxuICAgIH07XG59XG4vKipcbiAqICBSZXR1cm5zIGEgW1tBY2Nlc3NMaXN0XV0gZnJvbSBhbnkgZXRoZXJzLXN1cHBvcnRlZCBhY2Nlc3MtbGlzdCBzdHJ1Y3R1cmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhY2Nlc3NMaXN0aWZ5KHZhbHVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5tYXAoKHNldCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNldCkpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRBcmd1bWVudChzZXQubGVuZ3RoID09PSAyLCBcImludmFsaWQgc2xvdCBzZXRcIiwgYHZhbHVlWyR7aW5kZXh9XWAsIHNldCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY2Vzc1NldGlmeShzZXRbMF0sIHNldFsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChzZXQgIT0gbnVsbCAmJiB0eXBlb2YgKHNldCkgPT09IFwib2JqZWN0XCIsIFwiaW52YWxpZCBhZGRyZXNzLXNsb3Qgc2V0XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIGFjY2Vzc1NldGlmeShzZXQuYWRkcmVzcywgc2V0LnN0b3JhZ2VLZXlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzc2VydEFyZ3VtZW50KHZhbHVlICE9IG51bGwgJiYgdHlwZW9mICh2YWx1ZSkgPT09IFwib2JqZWN0XCIsIFwiaW52YWxpZCBhY2Nlc3MgbGlzdFwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICBjb25zdCByZXN1bHQgPSBPYmplY3Qua2V5cyh2YWx1ZSkubWFwKChhZGRyKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0b3JhZ2VLZXlzID0gdmFsdWVbYWRkcl0ucmVkdWNlKChhY2N1bSwgc3RvcmFnZUtleSkgPT4ge1xuICAgICAgICAgICAgYWNjdW1bc3RvcmFnZUtleV0gPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIHJldHVybiBhY2Nlc3NTZXRpZnkoYWRkciwgT2JqZWN0LmtleXMoc3RvcmFnZUtleXMpLnNvcnQoKSk7XG4gICAgfSk7XG4gICAgcmVzdWx0LnNvcnQoKGEsIGIpID0+IChhLmFkZHJlc3MubG9jYWxlQ29tcGFyZShiLmFkZHJlc3MpKSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY2Vzc2xpc3QuanMubWFwIiwiaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSBcIi4vZXJyb3JzLmpzXCI7XG4vLyBAVE9ETzogdGltZW91dCBpcyBjb21wbGV0ZWx5IGlnbm9yZWQ7IHN0YXJ0IGEgUHJvbWlzZS5hbnkgd2l0aCBhIHJlamVjdD9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHZXRVcmwob3B0aW9ucykge1xuICAgIGFzeW5jIGZ1bmN0aW9uIGdldFVybChyZXEsIF9zaWduYWwpIHtcbiAgICAgICAgY29uc3QgcHJvdG9jb2wgPSByZXEudXJsLnNwbGl0KFwiOlwiKVswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBhc3NlcnQocHJvdG9jb2wgPT09IFwiaHR0cFwiIHx8IHByb3RvY29sID09PSBcImh0dHBzXCIsIGB1bnN1cHBvcnRlZCBwcm90b2NvbCAke3Byb3RvY29sfWAsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgIGluZm86IHsgcHJvdG9jb2wgfSxcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJyZXF1ZXN0XCJcbiAgICAgICAgfSk7XG4gICAgICAgIGFzc2VydChwcm90b2NvbCA9PT0gXCJodHRwc1wiIHx8ICFyZXEuY3JlZGVudGlhbHMgfHwgcmVxLmFsbG93SW5zZWN1cmVBdXRoZW50aWNhdGlvbiwgXCJpbnNlY3VyZSBhdXRob3JpemVkIGNvbm5lY3Rpb25zIHVuc3VwcG9ydGVkXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJyZXF1ZXN0XCJcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBzaWduYWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChfc2lnbmFsKSB7XG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICAgICAgc2lnbmFsID0gY29udHJvbGxlci5zaWduYWw7XG4gICAgICAgICAgICBfc2lnbmFsLmFkZExpc3RlbmVyKCgpID0+IHsgY29udHJvbGxlci5hYm9ydCgpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbml0ID0ge1xuICAgICAgICAgICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgICAgICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnMoQXJyYXkuZnJvbShyZXEpKSxcbiAgICAgICAgICAgIGJvZHk6IHJlcS5ib2R5IHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNpZ25hbFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgZmV0Y2gocmVxLnVybCwgaW5pdCk7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgICAgcmVzcC5oZWFkZXJzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGhlYWRlcnNba2V5LnRvTG93ZXJDYXNlKCldID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwQm9keSA9IGF3YWl0IHJlc3AuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgY29uc3QgYm9keSA9IChyZXNwQm9keSA9PSBudWxsKSA/IG51bGwgOiBuZXcgVWludDhBcnJheShyZXNwQm9keSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXNDb2RlOiByZXNwLnN0YXR1cyxcbiAgICAgICAgICAgIHN0YXR1c01lc3NhZ2U6IHJlc3Auc3RhdHVzVGV4dCxcbiAgICAgICAgICAgIGhlYWRlcnMsIGJvZHlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGdldFVybDtcbn1cbi8vIEBUT0RPOiByZW1vdmUgaW4gdjc7IHByb3ZpZGVkIGZvciBiYWNrd2FyZHMgY29tcGF0XG5jb25zdCBkZWZhdWx0R2V0VXJsID0gY3JlYXRlR2V0VXJsKHt9KTtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVcmwocmVxLCBfc2lnbmFsKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRHZXRVcmwocmVxLCBfc2lnbmFsKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldHVybC1icm93c2VyLmpzLm1hcCIsIi8qKlxuICogIEZldGNoaW5nIGNvbnRlbnQgZnJvbSB0aGUgd2ViIGlzIGVudmlyb25tZW50LXNwZWNpZmljLCBzbyBFdGhlcnNcbiAqICBwcm92aWRlcyBhbiBhYnN0cmFjdGlvbiB0aGF0IGVhY2ggZW52aXJvbm1lbnQgY2FuIGltcGxlbWVudCB0byBwcm92aWRlXG4gKiAgdGhpcyBzZXJ2aWNlLlxuICpcbiAqICBPbiBbTm9kZS5qc10obGluay1ub2RlKSwgdGhlIGBgaHR0cGBgIGFuZCBgYGh0dHBzYGAgbGlicyBhcmUgdXNlZCB0b1xuICogIGNyZWF0ZSBhIHJlcXVlc3Qgb2JqZWN0LCByZWdpc3RlciBldmVudCBsaXN0ZW5lcnMgYW5kIHByb2Nlc3MgZGF0YVxuICogIGFuZCBwb3B1bGF0ZSB0aGUgW1tGZXRjaFJlc3BvbnNlXV0uXG4gKlxuICogIEluIGEgYnJvd3NlciwgdGhlIFtET00gZmV0Y2hdKGxpbmstanMtZmV0Y2gpIGlzIHVzZWQsIGFuZCB0aGUgcmVzdWx0aW5nXG4gKiAgYGBQcm9taXNlYGAgaXMgd2FpdGVkIG9uIHRvIHJldHJpZXZlIHRoZSBwYXlsb2FkLlxuICpcbiAqICBUaGUgW1tGZXRjaFJlcXVlc3RdXSBpcyByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgbWFueSBjb21tb24gc2l0dWF0aW9ucyxcbiAqICBzdWNoIGFzIHJlZGlyZWN0cywgc2VydmVyIHRocm90dGxpbmcsIGF1dGhlbnRpY2F0aW9uLCBldGMuXG4gKlxuICogIEl0IGFsc28gaGFuZGxlcyBjb21tb24gZ2F0ZXdheXMsIHN1Y2ggYXMgSVBGUyBhbmQgZGF0YSBVUklzLlxuICpcbiAqICBAX3NlY3Rpb24gYXBpL3V0aWxzL2ZldGNoaW5nOkZldGNoaW5nIFdlYiBDb250ZW50ICBbYWJvdXQtZmV0Y2hdXG4gKi9cbmltcG9ydCB7IGRlY29kZUJhc2U2NCwgZW5jb2RlQmFzZTY0IH0gZnJvbSBcIi4vYmFzZTY0LmpzXCI7XG5pbXBvcnQgeyBoZXhsaWZ5IH0gZnJvbSBcIi4vZGF0YS5qc1wiO1xuaW1wb3J0IHsgYXNzZXJ0LCBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuL2Vycm9ycy5qc1wiO1xuaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcyB9IGZyb20gXCIuL3Byb3BlcnRpZXMuanNcIjtcbmltcG9ydCB7IHRvVXRmOEJ5dGVzLCB0b1V0ZjhTdHJpbmcgfSBmcm9tIFwiLi91dGY4LmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVHZXRVcmwgfSBmcm9tIFwiLi9nZXR1cmwuanNcIjtcbmNvbnN0IE1BWF9BVFRFTVBUUyA9IDEyO1xuY29uc3QgU0xPVF9JTlRFUlZBTCA9IDI1MDtcbi8vIFRoZSBnbG9iYWwgRmV0Y2hHZXRVcmxGdW5jIGltcGxlbWVudGF0aW9uLlxubGV0IGRlZmF1bHRHZXRVcmxGdW5jID0gY3JlYXRlR2V0VXJsKCk7XG5jb25zdCByZURhdGEgPSBuZXcgUmVnRXhwKFwiXmRhdGE6KFteOzpdKik/KDtiYXNlNjQpPywoLiopJFwiLCBcImlcIik7XG5jb25zdCByZUlwZnMgPSBuZXcgUmVnRXhwKFwiXmlwZnM6L1xcLyhpcGZzLyk/KC4qKSRcIiwgXCJpXCIpO1xuLy8gSWYgbG9ja2VkLCBuZXcgR2F0ZXdheXMgY2Fubm90IGJlIGFkZGVkXG5sZXQgbG9ja2VkID0gZmFsc2U7XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0Jhc2ljc19vZl9IVFRQL0RhdGFfVVJMc1xuYXN5bmMgZnVuY3Rpb24gZGF0YUdhdGV3YXlGdW5jKHVybCwgc2lnbmFsKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB1cmwubWF0Y2gocmVEYXRhKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBkYXRhXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRmV0Y2hSZXNwb25zZSgyMDAsIFwiT0tcIiwge1xuICAgICAgICAgICAgXCJjb250ZW50LXR5cGVcIjogKG1hdGNoWzFdIHx8IFwidGV4dC9wbGFpblwiKSxcbiAgICAgICAgfSwgKG1hdGNoWzJdID8gZGVjb2RlQmFzZTY0KG1hdGNoWzNdKSA6IHVucGVyY2VudChtYXRjaFszXSkpKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmV0Y2hSZXNwb25zZSg1OTksIFwiQkFEIFJFUVVFU1QgKGludmFsaWQgZGF0YTogVVJJKVwiLCB7fSwgbnVsbCwgbmV3IEZldGNoUmVxdWVzdCh1cmwpKTtcbiAgICB9XG59XG4vKipcbiAqICBSZXR1cm5zIGEgW1tGZXRjaEdhdGV3YXlGdW5jXV0gZm9yIGZldGNoaW5nIGNvbnRlbnQgZnJvbSBhIHN0YW5kYXJkXG4gKiAgSVBGUyBnYXRld2F5IGhvc3RlZCBhdCAlJWJhc2VVcmwlJS5cbiAqL1xuZnVuY3Rpb24gZ2V0SXBmc0dhdGV3YXlGdW5jKGJhc2VVcmwpIHtcbiAgICBhc3luYyBmdW5jdGlvbiBnYXRld2F5SXBmcyh1cmwsIHNpZ25hbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSB1cmwubWF0Y2gocmVJcGZzKTtcbiAgICAgICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGxpbmtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZldGNoUmVxdWVzdChgJHtiYXNlVXJsfSR7bWF0Y2hbMl19YCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZldGNoUmVzcG9uc2UoNTk5LCBcIkJBRCBSRVFVRVNUIChpbnZhbGlkIElQRlMgVVJJKVwiLCB7fSwgbnVsbCwgbmV3IEZldGNoUmVxdWVzdCh1cmwpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ2F0ZXdheUlwZnM7XG59XG5jb25zdCBHYXRld2F5cyA9IHtcbiAgICBcImRhdGFcIjogZGF0YUdhdGV3YXlGdW5jLFxuICAgIFwiaXBmc1wiOiBnZXRJcGZzR2F0ZXdheUZ1bmMoXCJodHRwczovXFwvZ2F0ZXdheS5pcGZzLmlvL2lwZnMvXCIpXG59O1xuY29uc3QgZmV0Y2hTaWduYWxzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogIEBfaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBGZXRjaENhbmNlbFNpZ25hbCB7XG4gICAgI2xpc3RlbmVycztcbiAgICAjY2FuY2VsbGVkO1xuICAgIGNvbnN0cnVjdG9yKHJlcXVlc3QpIHtcbiAgICAgICAgdGhpcy4jbGlzdGVuZXJzID0gW107XG4gICAgICAgIHRoaXMuI2NhbmNlbGxlZCA9IGZhbHNlO1xuICAgICAgICBmZXRjaFNpZ25hbHMuc2V0KHJlcXVlc3QsICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLiNjYW5jZWxsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLiNjYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiB0aGlzLiNsaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgbGlzdGVuZXIoKTsgfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLiNsaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFkZExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIGFzc2VydCghdGhpcy4jY2FuY2VsbGVkLCBcInNpbmdhbCBhbHJlYWR5IGNhbmNlbGxlZFwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IFwiZmV0Y2hDYW5jZWxTaWduYWwuYWRkQ2FuY2VsTGlzdGVuZXJcIlxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cbiAgICBnZXQgY2FuY2VsbGVkKCkgeyByZXR1cm4gdGhpcy4jY2FuY2VsbGVkOyB9XG4gICAgY2hlY2tTaWduYWwoKSB7XG4gICAgICAgIGFzc2VydCghdGhpcy5jYW5jZWxsZWQsIFwiY2FuY2VsbGVkXCIsIFwiQ0FOQ0VMTEVEXCIsIHt9KTtcbiAgICB9XG59XG4vLyBDaGVjayB0aGUgc2lnbmFsLCB0aHJvd2luZyBpZiBpdCBpcyBjYW5jZWxsZWRcbmZ1bmN0aW9uIGNoZWNrU2lnbmFsKHNpZ25hbCkge1xuICAgIGlmIChzaWduYWwgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nIHNpZ25hbDsgc2hvdWxkIG5vdCBoYXBwZW5cIik7XG4gICAgfVxuICAgIHNpZ25hbC5jaGVja1NpZ25hbCgpO1xuICAgIHJldHVybiBzaWduYWw7XG59XG4vKipcbiAqICBSZXByZXNlbnRzIGEgcmVxdWVzdCBmb3IgYSByZXNvdXJjZSB1c2luZyBhIFVSSS5cbiAqXG4gKiAgQnkgZGVmYXVsdCwgdGhlIHN1cHBvcnRlZCBzY2hlbWVzIGFyZSBgYEhUVFBgYCwgYGBIVFRQU2BgLCBgYGRhdGE6YGAsXG4gKiAgYW5kIGBgSVBGUzpgYC5cbiAqXG4gKiAgQWRkaXRpb25hbCBzY2hlbWVzIGNhbiBiZSBhZGRlZCBnbG9iYWxseSB1c2luZyBbW3JlZ2lzdGVyR2F0ZXdheV1dLlxuICpcbiAqICBAZXhhbXBsZTpcbiAqICAgIHJlcSA9IG5ldyBGZXRjaFJlcXVlc3QoXCJodHRwczovL3d3dy5yaWNtb28uY29tXCIpXG4gKiAgICByZXNwID0gYXdhaXQgcmVxLnNlbmQoKVxuICogICAgcmVzcC5ib2R5Lmxlbmd0aFxuICogICAgLy9fcmVzdWx0OlxuICovXG5leHBvcnQgY2xhc3MgRmV0Y2hSZXF1ZXN0IHtcbiAgICAjYWxsb3dJbnNlY3VyZTtcbiAgICAjZ3ppcDtcbiAgICAjaGVhZGVycztcbiAgICAjbWV0aG9kO1xuICAgICN0aW1lb3V0O1xuICAgICN1cmw7XG4gICAgI2JvZHk7XG4gICAgI2JvZHlUeXBlO1xuICAgICNjcmVkcztcbiAgICAvLyBIb29rc1xuICAgICNwcmVmbGlnaHQ7XG4gICAgI3Byb2Nlc3M7XG4gICAgI3JldHJ5O1xuICAgICNzaWduYWw7XG4gICAgI3Rocm90dGxlO1xuICAgICNnZXRVcmxGdW5jO1xuICAgIC8qKlxuICAgICAqICBUaGUgZmV0Y2ggVVJMIHRvIHJlcXVlc3QuXG4gICAgICovXG4gICAgZ2V0IHVybCgpIHsgcmV0dXJuIHRoaXMuI3VybDsgfVxuICAgIHNldCB1cmwodXJsKSB7XG4gICAgICAgIHRoaXMuI3VybCA9IFN0cmluZyh1cmwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIGZldGNoIGJvZHksIGlmIGFueSwgdG8gc2VuZCBhcyB0aGUgcmVxdWVzdCBib2R5LiAvLyhkZWZhdWx0OiBudWxsKS8vXG4gICAgICpcbiAgICAgKiAgV2hlbiBzZXR0aW5nIGEgYm9keSwgdGhlIGludHJpbnNpYyBgYENvbnRlbnQtVHlwZWBgIGlzIGF1dG9tYXRpY2FsbHlcbiAgICAgKiAgc2V0IGFuZCB3aWxsIGJlIHVzZWQgaWYgKipub3Qgb3ZlcnJpZGRlbioqIGJ5IHNldHRpbmcgYSBjdXN0b21cbiAgICAgKiAgaGVhZGVyLlxuICAgICAqXG4gICAgICogIElmICUlYm9keSUlIGlzIG51bGwsIHRoZSBib2R5IGlzIGNsZWFyZWQgKGFsb25nIHdpdGggdGhlXG4gICAgICogIGludHJpbnNpYyBgYENvbnRlbnQtVHlwZWBgKS5cbiAgICAgKlxuICAgICAqICBJZiAlJWJvZHklJSBpcyBhIHN0cmluZywgdGhlIGludHJpbnNpYyBgYENvbnRlbnQtVHlwZWBgIGlzIHNldCB0b1xuICAgICAqICBgYHRleHQvcGxhaW5gYC5cbiAgICAgKlxuICAgICAqICBJZiAlJWJvZHklJSBpcyBhIFVpbnQ4QXJyYXksIHRoZSBpbnRyaW5zaWMgYGBDb250ZW50LVR5cGVgYCBpcyBzZXQgdG9cbiAgICAgKiAgYGBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1gYC5cbiAgICAgKlxuICAgICAqICBJZiAlJWJvZHklJSBpcyBhbnkgb3RoZXIgb2JqZWN0LCB0aGUgaW50cmluc2ljIGBgQ29udGVudC1UeXBlYGAgaXNcbiAgICAgKiAgc2V0IHRvIGBgYXBwbGljYXRpb24vanNvbmBgLlxuICAgICAqL1xuICAgIGdldCBib2R5KCkge1xuICAgICAgICBpZiAodGhpcy4jYm9keSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodGhpcy4jYm9keSk7XG4gICAgfVxuICAgIHNldCBib2R5KGJvZHkpIHtcbiAgICAgICAgaWYgKGJvZHkgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy4jYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuI2JvZHlUeXBlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiAoYm9keSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRoaXMuI2JvZHkgPSB0b1V0ZjhCeXRlcyhib2R5KTtcbiAgICAgICAgICAgIHRoaXMuI2JvZHlUeXBlID0gXCJ0ZXh0L3BsYWluXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYm9keSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgIHRoaXMuI2JvZHkgPSBib2R5O1xuICAgICAgICAgICAgdGhpcy4jYm9keVR5cGUgPSBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiAoYm9keSkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHRoaXMuI2JvZHkgPSB0b1V0ZjhCeXRlcyhKU09OLnN0cmluZ2lmeShib2R5KSk7XG4gICAgICAgICAgICB0aGlzLiNib2R5VHlwZSA9IFwiYXBwbGljYXRpb24vanNvblwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBib2R5XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRydWUgaWYgdGhlIHJlcXVlc3QgaGFzIGEgYm9keS5cbiAgICAgKi9cbiAgICBoYXNCb2R5KCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuI2JvZHkgIT0gbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgSFRUUCBtZXRob2QgdG8gdXNlIHdoZW4gcmVxdWVzdGluZyB0aGUgVVJJLiBJZiBubyBtZXRob2RcbiAgICAgKiAgaGFzIGJlZW4gZXhwbGljaXRseSBzZXQsIHRoZW4gYGBHRVRgYCBpcyB1c2VkIGlmIHRoZSBib2R5IGlzXG4gICAgICogIG51bGwgYW5kIGBgUE9TVGBgIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBnZXQgbWV0aG9kKCkge1xuICAgICAgICBpZiAodGhpcy4jbWV0aG9kKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4jbWV0aG9kO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc0JvZHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiUE9TVFwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIkdFVFwiO1xuICAgIH1cbiAgICBzZXQgbWV0aG9kKG1ldGhvZCkge1xuICAgICAgICBpZiAobWV0aG9kID09IG51bGwpIHtcbiAgICAgICAgICAgIG1ldGhvZCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jbWV0aG9kID0gU3RyaW5nKG1ldGhvZCkudG9VcHBlckNhc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBoZWFkZXJzIHRoYXQgd2lsbCBiZSB1c2VkIHdoZW4gcmVxdWVzdGluZyB0aGUgVVJJLiBBbGxcbiAgICAgKiAga2V5cyBhcmUgbG93ZXItY2FzZS5cbiAgICAgKlxuICAgICAqICBUaGlzIG9iamVjdCBpcyBhIGNvcHksIHNvIGFueSBjaGFuZ2VzIHdpbGwgKipOT1QqKiBiZSByZWZsZWN0ZWRcbiAgICAgKiAgaW4gdGhlIGBgRmV0Y2hSZXF1ZXN0YGAuXG4gICAgICpcbiAgICAgKiAgVG8gc2V0IGEgaGVhZGVyIGVudHJ5LCB1c2UgdGhlIGBgc2V0SGVhZGVyYGAgbWV0aG9kLlxuICAgICAqL1xuICAgIGdldCBoZWFkZXJzKCkge1xuICAgICAgICBjb25zdCBoZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy4jaGVhZGVycyk7XG4gICAgICAgIGlmICh0aGlzLiNjcmVkcykge1xuICAgICAgICAgICAgaGVhZGVyc1tcImF1dGhvcml6YXRpb25cIl0gPSBgQmFzaWMgJHtlbmNvZGVCYXNlNjQodG9VdGY4Qnl0ZXModGhpcy4jY3JlZHMpKX1gO1xuICAgICAgICB9XG4gICAgICAgIDtcbiAgICAgICAgaWYgKHRoaXMuYWxsb3dHemlwKSB7XG4gICAgICAgICAgICBoZWFkZXJzW1wiYWNjZXB0LWVuY29kaW5nXCJdID0gXCJnemlwXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0gPT0gbnVsbCAmJiB0aGlzLiNib2R5VHlwZSkge1xuICAgICAgICAgICAgaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSA9IHRoaXMuI2JvZHlUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmJvZHkpIHtcbiAgICAgICAgICAgIGhlYWRlcnNbXCJjb250ZW50LWxlbmd0aFwiXSA9IFN0cmluZyh0aGlzLmJvZHkubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGVhZGVycztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEdldCB0aGUgaGVhZGVyIGZvciAlJWtleSUlLCBpZ25vcmluZyBjYXNlLlxuICAgICAqL1xuICAgIGdldEhlYWRlcihrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBTZXQgdGhlIGhlYWRlciBmb3IgJSVrZXklJSB0byAlJXZhbHVlJSUuIEFsbCB2YWx1ZXMgYXJlIGNvZXJjZWRcbiAgICAgKiAgdG8gYSBzdHJpbmcuXG4gICAgICovXG4gICAgc2V0SGVhZGVyKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy4jaGVhZGVyc1tTdHJpbmcoa2V5KS50b0xvd2VyQ2FzZSgpXSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDbGVhciBhbGwgaGVhZGVycywgcmVzZXR0aW5nIGFsbCBpbnRyaW5zaWMgaGVhZGVycy5cbiAgICAgKi9cbiAgICBjbGVhckhlYWRlcnMoKSB7XG4gICAgICAgIHRoaXMuI2hlYWRlcnMgPSB7fTtcbiAgICB9XG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB0aGlzLmhlYWRlcnM7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhoZWFkZXJzKTtcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5leHQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBrZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2luZGV4KytdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFtrZXksIGhlYWRlcnNba2V5XV0sIGRvbmU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSB2YWx1ZSB0aGF0IHdpbGwgYmUgc2VudCBmb3IgdGhlIGBgQXV0aG9yaXphdGlvbmBgIGhlYWRlci5cbiAgICAgKlxuICAgICAqICBUbyBzZXQgdGhlIGNyZWRlbnRpYWxzLCB1c2UgdGhlIGBgc2V0Q3JlZGVudGlhbHNgYCBtZXRob2QuXG4gICAgICovXG4gICAgZ2V0IGNyZWRlbnRpYWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY3JlZHMgfHwgbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFNldHMgYW4gYGBBdXRob3JpemF0aW9uYGAgZm9yICUldXNlcm5hbWUlJSB3aXRoICUlcGFzc3dvcmQlJS5cbiAgICAgKi9cbiAgICBzZXRDcmVkZW50aWFscyh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoIXVzZXJuYW1lLm1hdGNoKC86LyksIFwiaW52YWxpZCBiYXNpYyBhdXRoZW50aWNhdGlvbiB1c2VybmFtZVwiLCBcInVzZXJuYW1lXCIsIFwiW1JFREFDVEVEXVwiKTtcbiAgICAgICAgdGhpcy4jY3JlZHMgPSBgJHt1c2VybmFtZX06JHtwYXNzd29yZH1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgRW5hYmxlIGFuZCByZXF1ZXN0IGd6aXAtZW5jb2RlZCByZXNwb25zZXMuIFRoZSByZXNwb25zZSB3aWxsXG4gICAgICogIGF1dG9tYXRpY2FsbHkgYmUgZGVjb21wcmVzc2VkLiAvLyhkZWZhdWx0OiB0cnVlKS8vXG4gICAgICovXG4gICAgZ2V0IGFsbG93R3ppcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2d6aXA7XG4gICAgfVxuICAgIHNldCBhbGxvd0d6aXAodmFsdWUpIHtcbiAgICAgICAgdGhpcy4jZ3ppcCA9ICEhdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBBbGxvdyBgYEF1dGhlbnRpY2F0aW9uYGAgY3JlZGVudGlhbHMgdG8gYmUgc2VudCBvdmVyIGluc2VjdXJlXG4gICAgICogIGNoYW5uZWxzLiAvLyhkZWZhdWx0OiBmYWxzZSkvL1xuICAgICAqL1xuICAgIGdldCBhbGxvd0luc2VjdXJlQXV0aGVudGljYXRpb24oKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuI2FsbG93SW5zZWN1cmU7XG4gICAgfVxuICAgIHNldCBhbGxvd0luc2VjdXJlQXV0aGVudGljYXRpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy4jYWxsb3dJbnNlY3VyZSA9ICEhdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgdGltZW91dCAoaW4gbWlsbGlzZWNvbmRzKSB0byB3YWl0IGZvciBhIGNvbXBsZXRlIHJlc3BvbnNlLlxuICAgICAqICAvLyhkZWZhdWx0OiA1IG1pbnV0ZXMpLy9cbiAgICAgKi9cbiAgICBnZXQgdGltZW91dCgpIHsgcmV0dXJuIHRoaXMuI3RpbWVvdXQ7IH1cbiAgICBzZXQgdGltZW91dCh0aW1lb3V0KSB7XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KHRpbWVvdXQgPj0gMCwgXCJ0aW1lb3V0IG11c3QgYmUgbm9uLXplcm9cIiwgXCJ0aW1lb3V0XCIsIHRpbWVvdXQpO1xuICAgICAgICB0aGlzLiN0aW1lb3V0ID0gdGltZW91dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHByaW9yIHRvIGVhY2ggcmVxdWVzdCwgZm9yIGV4YW1wbGVcbiAgICAgKiAgZHVyaW5nIGEgcmVkaXJlY3Rpb24gb3IgcmV0cnkgaW4gY2FzZSBvZiBzZXJ2ZXIgdGhyb3R0bGluZy5cbiAgICAgKlxuICAgICAqICBUaGlzIG9mZmVycyBhbiBvcHBvcnR1bml0eSB0byBwb3B1bGF0ZSBoZWFkZXJzIG9yIHVwZGF0ZVxuICAgICAqICBjb250ZW50IGJlZm9yZSBzZW5kaW5nIGEgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBnZXQgcHJlZmxpZ2h0RnVuYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3ByZWZsaWdodCB8fCBudWxsO1xuICAgIH1cbiAgICBzZXQgcHJlZmxpZ2h0RnVuYyhwcmVmbGlnaHQpIHtcbiAgICAgICAgdGhpcy4jcHJlZmxpZ2h0ID0gcHJlZmxpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYWZ0ZXIgZWFjaCByZXNwb25zZSwgb2ZmZXJpbmcgYW5cbiAgICAgKiAgb3Bwb3J0dW5pdHkgdG8gcHJvdmlkZSBjbGllbnQtbGV2ZWwgdGhyb3R0bGluZyBvciB1cGRhdGluZ1xuICAgICAqICByZXNwb25zZSBkYXRhLlxuICAgICAqXG4gICAgICogIEFueSBlcnJvciB0aHJvd24gaW4gdGhpcyBjYXVzZXMgdGhlIGBgc2VuZCgpYGAgdG8gdGhyb3cuXG4gICAgICpcbiAgICAgKiAgVG8gc2NoZWR1bGUgYSByZXRyeSBhdHRlbXB0IChhc3N1bWluZyB0aGUgbWF4aW11bSByZXRyeSBsaW1pdFxuICAgICAqICBoYXMgbm90IGJlZW4gcmVhY2hlZCksIHVzZSBbW3Jlc3BvbnNlLnRocm93VGhyb3R0bGVFcnJvcl1dLlxuICAgICAqL1xuICAgIGdldCBwcm9jZXNzRnVuYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3Byb2Nlc3MgfHwgbnVsbDtcbiAgICB9XG4gICAgc2V0IHByb2Nlc3NGdW5jKHByb2Nlc3MpIHtcbiAgICAgICAgdGhpcy4jcHJvY2VzcyA9IHByb2Nlc3M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBlYWNoIHJldHJ5IGF0dGVtcHQuXG4gICAgICovXG4gICAgZ2V0IHJldHJ5RnVuYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3JldHJ5IHx8IG51bGw7XG4gICAgfVxuICAgIHNldCByZXRyeUZ1bmMocmV0cnkpIHtcbiAgICAgICAgdGhpcy4jcmV0cnkgPSByZXRyeTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHRvIGZldGNoIGNvbnRlbnQgZnJvbSBIVFRQIGFuZFxuICAgICAqICBIVFRQUyBVUkxzIGFuZCBpcyBwbGF0Zm9ybSBzcGVjaWZpYyAoZS5nLiBub2RlanMgdnNcbiAgICAgKiAgYnJvd3NlcnMpLlxuICAgICAqXG4gICAgICogIFRoaXMgaXMgYnkgZGVmYXVsdCB0aGUgY3VycmVudGx5IHJlZ2lzdGVyZWQgZ2xvYmFsIGdldFVybFxuICAgICAqICBmdW5jdGlvbiwgd2hpY2ggY2FuIGJlIGNoYW5nZWQgdXNpbmcgW1tyZWdpc3RlckdldFVybF1dLlxuICAgICAqICBJZiB0aGlzIGhhcyBiZWVuIHNldCwgc2V0dGluZyBpcyB0byBgYG51bGxgYCB3aWxsIGNhdXNlXG4gICAgICogIHRoaXMgRmV0Y2hSZXF1ZXN0IChhbmQgYW55IGZ1dHVyZSBjbG9uZXMpIHRvIHJldmVydCBiYWNrIHRvXG4gICAgICogIHVzaW5nIHRoZSBjdXJyZW50bHkgcmVnaXN0ZXJlZCBnbG9iYWwgZ2V0VXJsIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogIFNldHRpbmcgdGhpcyBpcyBnZW5lcmFsbHkgbm90IG5lY2Vzc2FyeSwgYnV0IG1heSBiZSB1c2VmdWxcbiAgICAgKiAgZm9yIGRldmVsb3BlcnMgdGhhdCB3aXNoIHRvIGludGVyY2VwdCByZXF1ZXN0cyBvciB0b1xuICAgICAqICBjb25maWd1cmVnZSBhIHByb3h5IG9yIG90aGVyIGFnZW50LlxuICAgICAqL1xuICAgIGdldCBnZXRVcmxGdW5jKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZ2V0VXJsRnVuYyB8fCBkZWZhdWx0R2V0VXJsRnVuYztcbiAgICB9XG4gICAgc2V0IGdldFVybEZ1bmModmFsdWUpIHtcbiAgICAgICAgdGhpcy4jZ2V0VXJsRnVuYyA9IHZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlIGEgbmV3IEZldGNoUmVxdWVzdCBpbnN0YW5jZSB3aXRoIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogIE9uY2UgY3JlYXRlZCwgZWFjaCBwcm9wZXJ0eSBtYXkgYmUgc2V0IGJlZm9yZSBpc3N1aW5nIGFcbiAgICAgKiAgYGAuc2VuZCgpYGAgdG8gbWFrZSB0aGUgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih1cmwpIHtcbiAgICAgICAgdGhpcy4jdXJsID0gU3RyaW5nKHVybCk7XG4gICAgICAgIHRoaXMuI2FsbG93SW5zZWN1cmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy4jZ3ppcCA9IHRydWU7XG4gICAgICAgIHRoaXMuI2hlYWRlcnMgPSB7fTtcbiAgICAgICAgdGhpcy4jbWV0aG9kID0gXCJcIjtcbiAgICAgICAgdGhpcy4jdGltZW91dCA9IDMwMDAwMDtcbiAgICAgICAgdGhpcy4jdGhyb3R0bGUgPSB7XG4gICAgICAgICAgICBzbG90SW50ZXJ2YWw6IFNMT1RfSU5URVJWQUwsXG4gICAgICAgICAgICBtYXhBdHRlbXB0czogTUFYX0FUVEVNUFRTXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuI2dldFVybEZ1bmMgPSBudWxsO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGA8RmV0Y2hSZXF1ZXN0IG1ldGhvZD0ke0pTT04uc3RyaW5naWZ5KHRoaXMubWV0aG9kKX0gdXJsPSR7SlNPTi5zdHJpbmdpZnkodGhpcy51cmwpfSBoZWFkZXJzPSR7SlNPTi5zdHJpbmdpZnkodGhpcy5oZWFkZXJzKX0gYm9keT0ke3RoaXMuI2JvZHkgPyBoZXhsaWZ5KHRoaXMuI2JvZHkpIDogXCJudWxsXCJ9PmA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBVcGRhdGUgdGhlIHRocm90dGxlIHBhcmFtZXRlcnMgdXNlZCB0byBkZXRlcm1pbmUgbWF4aW11bVxuICAgICAqICBhdHRlbXB0cyBhbmQgZXhwb25lbnRpYWwtYmFja29mZiBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIHNldFRocm90dGxlUGFyYW1zKHBhcmFtcykge1xuICAgICAgICBpZiAocGFyYW1zLnNsb3RJbnRlcnZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLiN0aHJvdHRsZS5zbG90SW50ZXJ2YWwgPSBwYXJhbXMuc2xvdEludGVydmFsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMubWF4QXR0ZW1wdHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy4jdGhyb3R0bGUubWF4QXR0ZW1wdHMgPSBwYXJhbXMubWF4QXR0ZW1wdHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgI3NlbmQoYXR0ZW1wdCwgZXhwaXJlcywgZGVsYXksIF9yZXF1ZXN0LCBfcmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKGF0dGVtcHQgPj0gdGhpcy4jdGhyb3R0bGUubWF4QXR0ZW1wdHMpIHtcbiAgICAgICAgICAgIHJldHVybiBfcmVzcG9uc2UubWFrZVNlcnZlckVycm9yKFwiZXhjZWVkZWQgbWF4aW11bSByZXRyeSBsaW1pdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnQoZ2V0VGltZSgpIDw9IGV4cGlyZXMsIFwidGltZW91dFwiLCBcIlRJTUVPVVRcIiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcInJlcXVlc3Quc2VuZFwiLCByZWFzb246IFwidGltZW91dFwiLCByZXF1ZXN0OiBfcmVxdWVzdFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgICAgICAgYXdhaXQgd2FpdChkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlcSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgY29uc3Qgc2NoZW1lID0gKHJlcS51cmwuc3BsaXQoXCI6XCIpWzBdIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIC8vIFByb2Nlc3MgYW55IEdhdGV3YXlzXG4gICAgICAgIGlmIChzY2hlbWUgaW4gR2F0ZXdheXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IEdhdGV3YXlzW3NjaGVtZV0ocmVxLnVybCwgY2hlY2tTaWduYWwoX3JlcXVlc3QuI3NpZ25hbCkpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEZldGNoUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2UgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvY2Vzc0Z1bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tTaWduYWwoX3JlcXVlc3QuI3NpZ25hbCk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJvY2Vzc0Z1bmMocmVxLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgcHJvY2Vzc2luZzsgdGhyb3cgYSA1eHggc2VydmVyIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IudGhyb3R0bGUgPT0gbnVsbCB8fCB0eXBlb2YgKGVycm9yLnN0YWxsKSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLm1ha2VTZXJ2ZXJFcnJvcihcImVycm9yIGluIHBvc3QtcHJvY2Vzc2luZyBmdW5jdGlvblwiLCBlcnJvcikuYXNzZXJ0T2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSB0aHJvdHRsaW5nXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGhhdmUgYSBwcmVmbGlnaHQgZnVuY3Rpb247IHVwZGF0ZSB0aGUgcmVxdWVzdFxuICAgICAgICBpZiAodGhpcy5wcmVmbGlnaHRGdW5jKSB7XG4gICAgICAgICAgICByZXEgPSBhd2FpdCB0aGlzLnByZWZsaWdodEZ1bmMocmVxKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgdGhpcy5nZXRVcmxGdW5jKHJlcSwgY2hlY2tTaWduYWwoX3JlcXVlc3QuI3NpZ25hbCkpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBuZXcgRmV0Y2hSZXNwb25zZShyZXNwLnN0YXR1c0NvZGUsIHJlc3Auc3RhdHVzTWVzc2FnZSwgcmVzcC5oZWFkZXJzLCByZXNwLmJvZHksIF9yZXF1ZXN0KTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDMwMSB8fCByZXNwb25zZS5zdGF0dXNDb2RlID09PSAzMDIpIHtcbiAgICAgICAgICAgIC8vIFJlZGlyZWN0XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gcmVzcG9uc2UuaGVhZGVycy5sb2NhdGlvbiB8fCBcIlwiO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXEucmVkaXJlY3QobG9jYXRpb24pLiNzZW5kKGF0dGVtcHQgKyAxLCBleHBpcmVzLCAwLCBfcmVxdWVzdCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgIC8vIFRoaW5ncyB3b24ndCBnZXQgYW55IGJldHRlciBvbiBhbm90aGVyIGF0dGVtcHQ7IGFib3J0XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gNDI5KSB7XG4gICAgICAgICAgICAvLyBUaHJvdHRsZVxuICAgICAgICAgICAgaWYgKHRoaXMucmV0cnlGdW5jID09IG51bGwgfHwgKGF3YWl0IHRoaXMucmV0cnlGdW5jKHJlcSwgcmVzcG9uc2UsIGF0dGVtcHQpKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJldHJ5QWZ0ZXIgPSByZXNwb25zZS5oZWFkZXJzW1wicmV0cnktYWZ0ZXJcIl07XG4gICAgICAgICAgICAgICAgbGV0IGRlbGF5ID0gdGhpcy4jdGhyb3R0bGUuc2xvdEludGVydmFsICogTWF0aC50cnVuYyhNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMiwgYXR0ZW1wdCkpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHJldHJ5QWZ0ZXIpID09PSBcInN0cmluZ1wiICYmIHJldHJ5QWZ0ZXIubWF0Y2goL15bMS05XVswLTldKiQvKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxheSA9IHBhcnNlSW50KHJldHJ5QWZ0ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxLmNsb25lKCkuI3NlbmQoYXR0ZW1wdCArIDEsIGV4cGlyZXMsIGRlbGF5LCBfcmVxdWVzdCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb2Nlc3NGdW5jKSB7XG4gICAgICAgICAgICBjaGVja1NpZ25hbChfcmVxdWVzdC4jc2lnbmFsKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByb2Nlc3NGdW5jKHJlcSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIHByb2Nlc3Npbmc7IHRocm93IGEgNXh4IHNlcnZlciBlcnJvclxuICAgICAgICAgICAgICAgIGlmIChlcnJvci50aHJvdHRsZSA9PSBudWxsIHx8IHR5cGVvZiAoZXJyb3Iuc3RhbGwpICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLm1ha2VTZXJ2ZXJFcnJvcihcImVycm9yIGluIHBvc3QtcHJvY2Vzc2luZyBmdW5jdGlvblwiLCBlcnJvcikuYXNzZXJ0T2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVGhyb3R0bGVcbiAgICAgICAgICAgICAgICBsZXQgZGVsYXkgPSB0aGlzLiN0aHJvdHRsZS5zbG90SW50ZXJ2YWwgKiBNYXRoLnRydW5jKE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygyLCBhdHRlbXB0KSk7XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5zdGFsbCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gZXJyb3Iuc3RhbGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXEuY2xvbmUoKS4jc2VuZChhdHRlbXB0ICsgMSwgZXhwaXJlcywgZGVsYXksIF9yZXF1ZXN0LCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb2x2ZXMgdG8gdGhlIHJlc3BvbnNlIGJ5IHNlbmRpbmcgdGhlIHJlcXVlc3QuXG4gICAgICovXG4gICAgc2VuZCgpIHtcbiAgICAgICAgYXNzZXJ0KHRoaXMuI3NpZ25hbCA9PSBudWxsLCBcInJlcXVlc3QgYWxyZWFkeSBzZW50XCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcImZldGNoUmVxdWVzdC5zZW5kXCIgfSk7XG4gICAgICAgIHRoaXMuI3NpZ25hbCA9IG5ldyBGZXRjaENhbmNlbFNpZ25hbCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3NlbmQoMCwgZ2V0VGltZSgpICsgdGhpcy50aW1lb3V0LCAwLCB0aGlzLCBuZXcgRmV0Y2hSZXNwb25zZSgwLCBcIlwiLCB7fSwgbnVsbCwgdGhpcykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ2FuY2VscyB0aGUgaW5mbGlnaHQgcmVzcG9uc2UsIGNhdXNpbmcgYSBgYENBTkNFTExFRGBgXG4gICAgICogIGVycm9yIHRvIGJlIHJlamVjdGVkIGZyb20gdGhlIFtbc2VuZF1dLlxuICAgICAqL1xuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgYXNzZXJ0KHRoaXMuI3NpZ25hbCAhPSBudWxsLCBcInJlcXVlc3QgaGFzIG5vdCBiZWVuIHNlbnRcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IFwiZmV0Y2hSZXF1ZXN0LmNhbmNlbFwiIH0pO1xuICAgICAgICBjb25zdCBzaWduYWwgPSBmZXRjaFNpZ25hbHMuZ2V0KHRoaXMpO1xuICAgICAgICBpZiAoIXNpZ25hbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBzaWduYWw7IHNob3VsZCBub3QgaGFwcGVuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHNpZ25hbCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIG5ldyBbW0ZldGNoUmVxdWVzdF1dIHRoYXQgcmVwcmVzZW50cyB0aGUgcmVkaXJlY3Rpb25cbiAgICAgKiAgdG8gJSVsb2NhdGlvbiUlLlxuICAgICAqL1xuICAgIHJlZGlyZWN0KGxvY2F0aW9uKSB7XG4gICAgICAgIC8vIFJlZGlyZWN0aW9uOyBmb3Igbm93IHdlIG9ubHkgc3VwcG9ydCBhYnNvbHV0ZSBsb2NhdGlvbnNcbiAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMudXJsLnNwbGl0KFwiOlwiKVswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBsb2NhdGlvbi5zcGxpdChcIjpcIilbMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgLy8gRG9uJ3QgYWxsb3cgcmVkaXJlY3Rpbmc6XG4gICAgICAgIC8vIC0gbm9uLUdFVCByZXF1ZXN0c1xuICAgICAgICAvLyAtIGRvd25ncmFkaW5nIHRoZSBzZWN1cml0eSAoZS5nLiBodHRwcyA9PiBodHRwKVxuICAgICAgICAvLyAtIHRvIG5vbi1IVFRQIChvciBub24tSFRUUFMpIHByb3RvY29scyBbdGhpcyBjb3VsZCBiZSByZWxheGVkP11cbiAgICAgICAgYXNzZXJ0KHRoaXMubWV0aG9kID09PSBcIkdFVFwiICYmIChjdXJyZW50ICE9PSBcImh0dHBzXCIgfHwgdGFyZ2V0ICE9PSBcImh0dHBcIikgJiYgbG9jYXRpb24ubWF0Y2goL15odHRwcz86LyksIGB1bnN1cHBvcnRlZCByZWRpcmVjdGAsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogYHJlZGlyZWN0KCR7dGhpcy5tZXRob2R9ICR7SlNPTi5zdHJpbmdpZnkodGhpcy51cmwpfSA9PiAke0pTT04uc3RyaW5naWZ5KGxvY2F0aW9uKX0pYFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gQ3JlYXRlIGEgY29weSBvZiB0aGlzIHJlcXVlc3QsIHdpdGggYSBuZXcgVVJMXG4gICAgICAgIGNvbnN0IHJlcSA9IG5ldyBGZXRjaFJlcXVlc3QobG9jYXRpb24pO1xuICAgICAgICByZXEubWV0aG9kID0gXCJHRVRcIjtcbiAgICAgICAgcmVxLmFsbG93R3ppcCA9IHRoaXMuYWxsb3dHemlwO1xuICAgICAgICByZXEudGltZW91dCA9IHRoaXMudGltZW91dDtcbiAgICAgICAgcmVxLiNoZWFkZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy4jaGVhZGVycyk7XG4gICAgICAgIGlmICh0aGlzLiNib2R5KSB7XG4gICAgICAgICAgICByZXEuI2JvZHkgPSBuZXcgVWludDhBcnJheSh0aGlzLiNib2R5KTtcbiAgICAgICAgfVxuICAgICAgICByZXEuI2JvZHlUeXBlID0gdGhpcy4jYm9keVR5cGU7XG4gICAgICAgIC8vIERvIG5vdCBmb3J3YXJkIGNyZWRlbnRpYWxzIHVubGVzcyBvbiB0aGUgc2FtZSBkb21haW47IG9ubHkgYWJzb2x1dGVcbiAgICAgICAgLy9yZXEuYWxsb3dJbnNlY3VyZSA9IGZhbHNlO1xuICAgICAgICAvLyBwYXRocyBhcmUgY3VycmVudGx5IHN1cHBvcnRlZDsgbWF5IHdhbnQgYSB3YXkgdG8gc3BlY2lmeSB0byBmb3J3YXJkP1xuICAgICAgICAvL3NldFN0b3JlKHJlcS4jcHJvcHMsIFwiY3JlZHNcIiwgZ2V0U3RvcmUodGhpcy4jcHJvcywgXCJjcmVkc1wiKSk7XG4gICAgICAgIHJldHVybiByZXE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDcmVhdGUgYSBuZXcgY29weSBvZiB0aGlzIHJlcXVlc3QuXG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNsb25lID0gbmV3IEZldGNoUmVxdWVzdCh0aGlzLnVybCk7XG4gICAgICAgIC8vIFByZXNlcnZlIFwiZGVmYXVsdCBtZXRob2RcIiAoaS5lLiBudWxsKVxuICAgICAgICBjbG9uZS4jbWV0aG9kID0gdGhpcy4jbWV0aG9kO1xuICAgICAgICAvLyBQcmVzZXJ2ZSBcImRlZmF1bHQgYm9keVwiIHdpdGggdHlwZSwgY29weWluZyB0aGUgVWludDhBcnJheSBpcyBwcmVzZW50XG4gICAgICAgIGlmICh0aGlzLiNib2R5KSB7XG4gICAgICAgICAgICBjbG9uZS4jYm9keSA9IHRoaXMuI2JvZHk7XG4gICAgICAgIH1cbiAgICAgICAgY2xvbmUuI2JvZHlUeXBlID0gdGhpcy4jYm9keVR5cGU7XG4gICAgICAgIC8vIFByZXNlcnZlIFwiZGVmYXVsdCBoZWFkZXJzXCJcbiAgICAgICAgY2xvbmUuI2hlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLiNoZWFkZXJzKTtcbiAgICAgICAgLy8gQ3JlZGVudGlhbHMgaXMgcmVhZG9ubHksIHNvIHdlIGNvcHkgaW50ZXJuYWxseVxuICAgICAgICBjbG9uZS4jY3JlZHMgPSB0aGlzLiNjcmVkcztcbiAgICAgICAgaWYgKHRoaXMuYWxsb3dHemlwKSB7XG4gICAgICAgICAgICBjbG9uZS5hbGxvd0d6aXAgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNsb25lLnRpbWVvdXQgPSB0aGlzLnRpbWVvdXQ7XG4gICAgICAgIGlmICh0aGlzLmFsbG93SW5zZWN1cmVBdXRoZW50aWNhdGlvbikge1xuICAgICAgICAgICAgY2xvbmUuYWxsb3dJbnNlY3VyZUF1dGhlbnRpY2F0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjbG9uZS4jcHJlZmxpZ2h0ID0gdGhpcy4jcHJlZmxpZ2h0O1xuICAgICAgICBjbG9uZS4jcHJvY2VzcyA9IHRoaXMuI3Byb2Nlc3M7XG4gICAgICAgIGNsb25lLiNyZXRyeSA9IHRoaXMuI3JldHJ5O1xuICAgICAgICBjbG9uZS4jZ2V0VXJsRnVuYyA9IHRoaXMuI2dldFVybEZ1bmM7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIExvY2tzIGFsbCBzdGF0aWMgY29uZmlndXJhdGlvbiBmb3IgZ2F0ZXdheXMgYW5kIEZldGNoR2V0VXJsRnVuY1xuICAgICAqICByZWdpc3RyYXRpb24uXG4gICAgICovXG4gICAgc3RhdGljIGxvY2tDb25maWcoKSB7XG4gICAgICAgIGxvY2tlZCA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBHZXQgdGhlIGN1cnJlbnQgR2F0ZXdheSBmdW5jdGlvbiBmb3IgJSVzY2hlbWUlJS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0R2F0ZXdheShzY2hlbWUpIHtcbiAgICAgICAgcmV0dXJuIEdhdGV3YXlzW3NjaGVtZS50b0xvd2VyQ2FzZSgpXSB8fCBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVXNlIHRoZSAlJWZ1bmMlJSB3aGVuIGZldGNoaW5nIFVSSXMgdXNpbmcgJSVzY2hlbWUlJS5cbiAgICAgKlxuICAgICAqICBUaGlzIG1ldGhvZCBhZmZlY3RzIGFsbCByZXF1ZXN0cyBnbG9iYWxseS5cbiAgICAgKlxuICAgICAqICBJZiBbW2xvY2tDb25maWddXSBoYXMgYmVlbiBjYWxsZWQsIG5vIGNoYW5nZSBpcyBtYWRlIGFuZCB0aGlzXG4gICAgICogIHRocm93cy5cbiAgICAgKi9cbiAgICBzdGF0aWMgcmVnaXN0ZXJHYXRld2F5KHNjaGVtZSwgZnVuYykge1xuICAgICAgICBzY2hlbWUgPSBzY2hlbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHNjaGVtZSA9PT0gXCJodHRwXCIgfHwgc2NoZW1lID09PSBcImh0dHBzXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGludGVyY2VwdCAke3NjaGVtZX07IHVzZSByZWdpc3RlckdldFVybGApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NrZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImdhdGV3YXlzIGxvY2tlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBHYXRld2F5c1tzY2hlbWVdID0gZnVuYztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFVzZSAlJWdldFVybCUlIHdoZW4gZmV0Y2hpbmcgVVJJcyBvdmVyIEhUVFAgYW5kIEhUVFBTIHJlcXVlc3RzLlxuICAgICAqXG4gICAgICogIFRoaXMgbWV0aG9kIGFmZmVjdHMgYWxsIHJlcXVlc3RzIGdsb2JhbGx5LlxuICAgICAqXG4gICAgICogIElmIFtbbG9ja0NvbmZpZ11dIGhhcyBiZWVuIGNhbGxlZCwgbm8gY2hhbmdlIGlzIG1hZGUgYW5kIHRoaXNcbiAgICAgKiAgdGhyb3dzLlxuICAgICAqL1xuICAgIHN0YXRpYyByZWdpc3RlckdldFVybChnZXRVcmwpIHtcbiAgICAgICAgaWYgKGxvY2tlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZ2F0ZXdheXMgbG9ja2VkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHRHZXRVcmxGdW5jID0gZ2V0VXJsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIGdldFVybCBmdW5jdGlvbiB0aGF0IGZldGNoZXMgY29udGVudCBmcm9tIEhUVFAgYW5kXG4gICAgICogIEhUVFBTIFVSTHMuXG4gICAgICpcbiAgICAgKiAgVGhlIGF2YWlsYWJsZSAlJW9wdGlvbnMlJSBhcmUgZGVwZW5kZW50IG9uIHRoZSBwbGF0Zm9ybVxuICAgICAqICBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgZGVmYXVsdCBnZXRVcmwgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAgVGhpcyBpcyBub3QgZ2VuZXJhbGx5IHNvbWV0aGluZyB0aGF0IGlzIG5lZWRlZCwgYnV0IGlzIHVzZWZ1bFxuICAgICAqICB3aGVuIHRyeWluZyB0byBjdXN0b21pemUgc2ltcGxlIGJlaGF2aW91ciB3aGVuIGZldGNoaW5nIEhUVFBcbiAgICAgKiAgY29udGVudC5cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlR2V0VXJsRnVuYyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVHZXRVcmwob3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjYW4gXCJmZXRjaFwiIGRhdGEgVVJJcy5cbiAgICAgKlxuICAgICAqICBOb3RlIHRoYXQgdGhpcyBpcyBhdXRvbWF0aWNhbGx5IGRvbmUgaW50ZXJuYWxseSB0byBzdXBwb3J0XG4gICAgICogIGRhdGEgVVJJcywgc28gaXQgaXMgbm90IG5lY2Vzc2FyeSB0byByZWdpc3RlciBpdC5cbiAgICAgKlxuICAgICAqICBUaGlzIGlzIG5vdCBnZW5lcmFsbHkgc29tZXRoaW5nIHRoYXQgaXMgbmVlZGVkLCBidXQgbWF5XG4gICAgICogIGJlIHVzZWZ1bCBpbiBhIHdyYXBwZXIgdG8gcGVyZm9tIGN1c3RvbSBkYXRhIFVSSSBmdW5jdGlvbmFsaXR5LlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVEYXRhR2F0ZXdheSgpIHtcbiAgICAgICAgcmV0dXJuIGRhdGFHYXRld2F5RnVuYztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgZmV0Y2ggSVBGUyAodW52YWxpZGF0ZWQpIGZyb21cbiAgICAgKiAgYSBjdXN0b20gZ2F0ZXdheSBiYXNlVXJsLlxuICAgICAqXG4gICAgICogIFRoZSBkZWZhdWx0IElQRlMgZ2F0ZXdheSB1c2VkIGludGVybmFsbHkgaXNcbiAgICAgKiAgYGBcImh0dHBzOi9cXC9nYXRld2F5LmlwZnMuaW8vaXBmcy9cImBgLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVJcGZzR2F0ZXdheUZ1bmMoYmFzZVVybCkge1xuICAgICAgICByZXR1cm4gZ2V0SXBmc0dhdGV3YXlGdW5jKGJhc2VVcmwpO1xuICAgIH1cbn1cbjtcbi8qKlxuICogIFRoZSByZXNwb25zZSBmb3IgYSBGZXRjaFJlcXVlc3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBGZXRjaFJlc3BvbnNlIHtcbiAgICAjc3RhdHVzQ29kZTtcbiAgICAjc3RhdHVzTWVzc2FnZTtcbiAgICAjaGVhZGVycztcbiAgICAjYm9keTtcbiAgICAjcmVxdWVzdDtcbiAgICAjZXJyb3I7XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgPEZldGNoUmVzcG9uc2Ugc3RhdHVzPSR7dGhpcy5zdGF0dXNDb2RlfSBib2R5PSR7dGhpcy4jYm9keSA/IGhleGxpZnkodGhpcy4jYm9keSkgOiBcIm51bGxcIn0+YDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSByZXNwb25zZSBzdGF0dXMgY29kZS5cbiAgICAgKi9cbiAgICBnZXQgc3RhdHVzQ29kZSgpIHsgcmV0dXJuIHRoaXMuI3N0YXR1c0NvZGU7IH1cbiAgICAvKipcbiAgICAgKiAgVGhlIHJlc3BvbnNlIHN0YXR1cyBtZXNzYWdlLlxuICAgICAqL1xuICAgIGdldCBzdGF0dXNNZXNzYWdlKCkgeyByZXR1cm4gdGhpcy4jc3RhdHVzTWVzc2FnZTsgfVxuICAgIC8qKlxuICAgICAqICBUaGUgcmVzcG9uc2UgaGVhZGVycy4gQWxsIGtleXMgYXJlIGxvd2VyLWNhc2UuXG4gICAgICovXG4gICAgZ2V0IGhlYWRlcnMoKSB7IHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB0aGlzLiNoZWFkZXJzKTsgfVxuICAgIC8qKlxuICAgICAqICBUaGUgcmVzcG9uc2UgYm9keSwgb3IgYGBudWxsYGAgaWYgdGhlcmUgd2FzIG5vIGJvZHkuXG4gICAgICovXG4gICAgZ2V0IGJvZHkoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy4jYm9keSA9PSBudWxsKSA/IG51bGwgOiBuZXcgVWludDhBcnJheSh0aGlzLiNib2R5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSByZXNwb25zZSBib2R5IGFzIGEgVVRGLTggZW5jb2RlZCBzdHJpbmcsIG9yIHRoZSBlbXB0eVxuICAgICAqICBzdHJpbmcgKGkuZS4gYGBcIlwiYGApIGlmIHRoZXJlIHdhcyBubyBib2R5LlxuICAgICAqXG4gICAgICogIEFuIGVycm9yIGlzIHRocm93biBpZiB0aGUgYm9keSBpcyBpbnZhbGlkIFVURi04IGRhdGEuXG4gICAgICovXG4gICAgZ2V0IGJvZHlUZXh0KCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLiNib2R5ID09IG51bGwpID8gXCJcIiA6IHRvVXRmOFN0cmluZyh0aGlzLiNib2R5KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGFzc2VydChmYWxzZSwgXCJyZXNwb25zZSBib2R5IGlzIG5vdCB2YWxpZCBVVEYtOCBkYXRhXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwiYm9keVRleHRcIiwgaW5mbzogeyByZXNwb25zZTogdGhpcyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIHJlc3BvbnNlIGJvZHksIGRlY29kZWQgYXMgSlNPTi5cbiAgICAgKlxuICAgICAqICBBbiBlcnJvciBpcyB0aHJvd24gaWYgdGhlIGJvZHkgaXMgaW52YWxpZCBKU09OLWVuY29kZWQgZGF0YVxuICAgICAqICBvciBpZiB0aGVyZSB3YXMgbm8gYm9keS5cbiAgICAgKi9cbiAgICBnZXQgYm9keUpzb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLmJvZHlUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGFzc2VydChmYWxzZSwgXCJyZXNwb25zZSBib2R5IGlzIG5vdCB2YWxpZCBKU09OXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwiYm9keUpzb25cIiwgaW5mbzogeyByZXNwb25zZTogdGhpcyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMuaGVhZGVycztcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGhlYWRlcnMpO1xuICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IGtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaW5kZXgrK107XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW2tleSwgaGVhZGVyc1trZXldXSwgZG9uZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzdGF0dXNDb2RlLCBzdGF0dXNNZXNzYWdlLCBoZWFkZXJzLCBib2R5LCByZXF1ZXN0KSB7XG4gICAgICAgIHRoaXMuI3N0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgICAgICB0aGlzLiNzdGF0dXNNZXNzYWdlID0gc3RhdHVzTWVzc2FnZTtcbiAgICAgICAgdGhpcy4jaGVhZGVycyA9IE9iamVjdC5rZXlzKGhlYWRlcnMpLnJlZHVjZSgoYWNjdW0sIGspID0+IHtcbiAgICAgICAgICAgIGFjY3VtW2sudG9Mb3dlckNhc2UoKV0gPSBTdHJpbmcoaGVhZGVyc1trXSk7XG4gICAgICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgdGhpcy4jYm9keSA9ICgoYm9keSA9PSBudWxsKSA/IG51bGwgOiBuZXcgVWludDhBcnJheShib2R5KSk7XG4gICAgICAgIHRoaXMuI3JlcXVlc3QgPSAocmVxdWVzdCB8fCBudWxsKTtcbiAgICAgICAgdGhpcy4jZXJyb3IgPSB7IG1lc3NhZ2U6IFwiXCIgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIFJlc3BvbnNlIHdpdGggbWF0Y2hpbmcgaGVhZGVycyBhbmQgYm9keSwgYnV0IHdpdGhcbiAgICAgKiAgYW4gZXJyb3Igc3RhdHVzIGNvZGUgKGkuZS4gNTk5KSBhbmQgJSVtZXNzYWdlJSUgd2l0aCBhblxuICAgICAqICBvcHRpb25hbCAlJWVycm9yJSUuXG4gICAgICovXG4gICAgbWFrZVNlcnZlckVycm9yKG1lc3NhZ2UsIGVycm9yKSB7XG4gICAgICAgIGxldCBzdGF0dXNNZXNzYWdlO1xuICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgJHt0aGlzLnN0YXR1c0NvZGV9ICR7dGhpcy5zdGF0dXNNZXNzYWdlfWA7XG4gICAgICAgICAgICBzdGF0dXNNZXNzYWdlID0gYENMSUVOVCBFU0NBTEFURUQgU0VSVkVSIEVSUk9SICgke21lc3NhZ2V9KWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGF0dXNNZXNzYWdlID0gYENMSUVOVCBFU0NBTEFURUQgU0VSVkVSIEVSUk9SICgke3RoaXMuc3RhdHVzQ29kZX0gJHt0aGlzLnN0YXR1c01lc3NhZ2V9OyAke21lc3NhZ2V9KWA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBuZXcgRmV0Y2hSZXNwb25zZSg1OTksIHN0YXR1c01lc3NhZ2UsIHRoaXMuaGVhZGVycywgdGhpcy5ib2R5LCB0aGlzLiNyZXF1ZXN0IHx8IHVuZGVmaW5lZCk7XG4gICAgICAgIHJlc3BvbnNlLiNlcnJvciA9IHsgbWVzc2FnZSwgZXJyb3IgfTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgSWYgY2FsbGVkIHdpdGhpbiBhIFtyZXF1ZXN0LnByb2Nlc3NGdW5jXShGZXRjaFJlcXVlc3QtcHJvY2Vzc0Z1bmMpXG4gICAgICogIGNhbGwsIGNhdXNlcyB0aGUgcmVxdWVzdCB0byByZXRyeSBhcyBpZiB0aHJvdHRsZWQgZm9yICUlc3RhbGwlJVxuICAgICAqICBtaWxsaXNlY29uZHMuXG4gICAgICovXG4gICAgdGhyb3dUaHJvdHRsZUVycm9yKG1lc3NhZ2UsIHN0YWxsKSB7XG4gICAgICAgIGlmIChzdGFsbCA9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGFsbCA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoTnVtYmVyLmlzSW50ZWdlcihzdGFsbCkgJiYgc3RhbGwgPj0gMCwgXCJpbnZhbGlkIHN0YWxsIHRpbWVvdXRcIiwgXCJzdGFsbFwiLCBzdGFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSB8fCBcInRocm90dGxpbmcgcmVxdWVzdHNcIik7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXMoZXJyb3IsIHsgc3RhbGwsIHRocm90dGxlOiB0cnVlIH0pO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEdldCB0aGUgaGVhZGVyIHZhbHVlIGZvciAlJWtleSUlLCBpZ25vcmluZyBjYXNlLlxuICAgICAqL1xuICAgIGdldEhlYWRlcihrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRydWUgaWYgdGhlIHJlc3BvbnNlIGhhcyBhIGJvZHkuXG4gICAgICovXG4gICAgaGFzQm9keSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLiNib2R5ICE9IG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIHJlcXVlc3QgbWFkZSBmb3IgdGhpcyByZXNwb25zZS5cbiAgICAgKi9cbiAgICBnZXQgcmVxdWVzdCgpIHsgcmV0dXJuIHRoaXMuI3JlcXVlc3Q7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0cnVlIGlmIHRoaXMgcmVzcG9uc2Ugd2FzIGEgc3VjY2VzcyBzdGF0dXNDb2RlLlxuICAgICAqL1xuICAgIG9rKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuI2Vycm9yLm1lc3NhZ2UgPT09IFwiXCIgJiYgdGhpcy5zdGF0dXNDb2RlID49IDIwMCAmJiB0aGlzLnN0YXR1c0NvZGUgPCAzMDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhyb3dzIGEgYGBTRVJWRVJfRVJST1JgYCBpZiB0aGlzIHJlc3BvbnNlIGlzIG5vdCBvay5cbiAgICAgKi9cbiAgICBhc3NlcnRPaygpIHtcbiAgICAgICAgaWYgKHRoaXMub2soKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCB7IG1lc3NhZ2UsIGVycm9yIH0gPSB0aGlzLiNlcnJvcjtcbiAgICAgICAgaWYgKG1lc3NhZ2UgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgc2VydmVyIHJlc3BvbnNlICR7dGhpcy5zdGF0dXNDb2RlfSAke3RoaXMuc3RhdHVzTWVzc2FnZX1gO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXF1ZXN0VXJsID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMucmVxdWVzdCkge1xuICAgICAgICAgICAgcmVxdWVzdFVybCA9IHRoaXMucmVxdWVzdC51cmw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlQm9keSA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy4jYm9keSkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlQm9keSA9IHRvVXRmOFN0cmluZyh0aGlzLiNib2R5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgIGFzc2VydChmYWxzZSwgbWVzc2FnZSwgXCJTRVJWRVJfRVJST1JcIiwge1xuICAgICAgICAgICAgcmVxdWVzdDogKHRoaXMucmVxdWVzdCB8fCBcInVua25vd24gcmVxdWVzdFwiKSwgcmVzcG9uc2U6IHRoaXMsIGVycm9yLFxuICAgICAgICAgICAgaW5mbzoge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RVcmwsIHJlc3BvbnNlQm9keSxcbiAgICAgICAgICAgICAgICByZXNwb25zZVN0YXR1czogYCR7dGhpcy5zdGF0dXNDb2RlfSAke3RoaXMuc3RhdHVzTWVzc2FnZX1gXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFRpbWUoKSB7IHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpOyB9XG5mdW5jdGlvbiB1bnBlcmNlbnQodmFsdWUpIHtcbiAgICByZXR1cm4gdG9VdGY4Qnl0ZXModmFsdWUucmVwbGFjZSgvJShbMC05YS1mXVswLTlhLWZdKS9naSwgKGFsbCwgY29kZSkgPT4ge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChjb2RlLCAxNikpO1xuICAgIH0pKTtcbn1cbmZ1bmN0aW9uIHdhaXQoZGVsYXkpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZGVsYXkpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZldGNoLmpzLm1hcCIsIi8vIHV0aWxzL2Jhc2U2NC1icm93c2VyXG5pbXBvcnQgeyBnZXRCeXRlcyB9IGZyb20gXCIuL2RhdGEuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVCYXNlNjQodGV4dERhdGEpIHtcbiAgICB0ZXh0RGF0YSA9IGF0b2IodGV4dERhdGEpO1xuICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheSh0ZXh0RGF0YS5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGF0YVtpXSA9IHRleHREYXRhLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBnZXRCeXRlcyhkYXRhKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVCYXNlNjQoX2RhdGEpIHtcbiAgICBjb25zdCBkYXRhID0gZ2V0Qnl0ZXMoX2RhdGEpO1xuICAgIGxldCB0ZXh0RGF0YSA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRleHREYXRhICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVtpXSk7XG4gICAgfVxuICAgIHJldHVybiBidG9hKHRleHREYXRhKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2U2NC1icm93c2VyLmpzLm1hcCIsIi8qKlxuICogIEEgY29uc3RhbnQgZm9yIHRoZSB6ZXJvIGFkZHJlc3MuXG4gKlxuICogICgqKmkuZS4qKiBgYFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCJgYClcbiAqL1xuZXhwb3J0IGNvbnN0IFplcm9BZGRyZXNzID0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3Nlcy5qcy5tYXAiLCIvKipcbiAqICBUaGUgSW50ZXJmYWNlIGNsYXNzIGlzIGEgbG93LWxldmVsIGNsYXNzIHRoYXQgYWNjZXB0cyBhblxuICogIEFCSSBhbmQgcHJvdmlkZXMgYWxsIHRoZSBuZWNlc3NhcnkgZnVuY3Rpb25hbGl0eSB0byBlbmNvZGVcbiAqICBhbmQgZGVjb2RlIHBhcmFtYXRlcnMgdG8gYW5kIHJlc3VsdHMgZnJvbSBtZXRob2RzLCBldmVudHNcbiAqICBhbmQgZXJyb3JzLlxuICpcbiAqICBJdCBhbHNvIHByb3ZpZGVzIHNldmVyYWwgY29udmVuaWVuY2UgbWV0aG9kcyB0byBhdXRvbWF0aWNhbGx5XG4gKiAgc2VhcmNoIGFuZCBmaW5kIG1hdGNoaW5nIHRyYW5zYWN0aW9ucyBhbmQgZXZlbnRzIHRvIHBhcnNlIHRoZW0uXG4gKlxuICogIEBfc3Vic2VjdGlvbiBhcGkvYWJpOkludGVyZmFjZXMgIFtpbnRlcmZhY2VzXVxuICovXG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiLi4vY3J5cHRvL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpZCB9IGZyb20gXCIuLi9oYXNoL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBjb25jYXQsIGRhdGFTbGljZSwgZ2V0QmlnSW50LCBnZXRCeXRlcywgZ2V0Qnl0ZXNDb3B5LCBoZXhsaWZ5LCB6ZXJvUGFkQnl0ZXMsIHplcm9QYWRWYWx1ZSwgaXNIZXhTdHJpbmcsIGRlZmluZVByb3BlcnRpZXMsIGFzc2VydEFyZ3VtZW50LCB0b0JlSGV4LCBhc3NlcnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IEFiaUNvZGVyIH0gZnJvbSBcIi4vYWJpLWNvZGVyLmpzXCI7XG5pbXBvcnQgeyBjaGVja1Jlc3VsdEVycm9ycywgUmVzdWx0IH0gZnJvbSBcIi4vY29kZXJzL2Fic3RyYWN0LWNvZGVyLmpzXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3RvckZyYWdtZW50LCBFcnJvckZyYWdtZW50LCBFdmVudEZyYWdtZW50LCBGcmFnbWVudCwgRnVuY3Rpb25GcmFnbWVudCwgUGFyYW1UeXBlIH0gZnJvbSBcIi4vZnJhZ21lbnRzLmpzXCI7XG5pbXBvcnQgeyBUeXBlZCB9IGZyb20gXCIuL3R5cGVkLmpzXCI7XG5leHBvcnQgeyBjaGVja1Jlc3VsdEVycm9ycywgUmVzdWx0IH07XG4vKipcbiAqICBXaGVuIHVzaW5nIHRoZSBbW0ludGVyZmFjZS1wYXJzZUxvZ11dIHRvIGF1dG9tYXRpY2FsbHkgbWF0Y2ggYSBMb2cgdG8gaXRzIGV2ZW50XG4gKiAgZm9yIHBhcnNpbmcsIGEgKipMb2dEZXNjcmlwdGlvbioqIGlzIHJldHVybmVkLlxuICovXG5leHBvcnQgY2xhc3MgTG9nRGVzY3JpcHRpb24ge1xuICAgIC8qKlxuICAgICAqICBUaGUgbWF0Y2hpbmcgZnJhZ21lbnQgZm9yIHRoZSBgYHRvcGljMGBgLlxuICAgICAqL1xuICAgIGZyYWdtZW50O1xuICAgIC8qKlxuICAgICAqICBUaGUgbmFtZSBvZiB0aGUgRXZlbnQuXG4gICAgICovXG4gICAgbmFtZTtcbiAgICAvKipcbiAgICAgKiAgVGhlIGZ1bGwgRXZlbnQgc2lnbmF0dXJlLlxuICAgICAqL1xuICAgIHNpZ25hdHVyZTtcbiAgICAvKipcbiAgICAgKiAgVGhlIHRvcGljIGhhc2ggZm9yIHRoZSBFdmVudC5cbiAgICAgKi9cbiAgICB0b3BpYztcbiAgICAvKipcbiAgICAgKiAgVGhlIGFyZ3VtZW50cyBwYXNzZWQgaW50byB0aGUgRXZlbnQgd2l0aCBgYGVtaXRgYC5cbiAgICAgKi9cbiAgICBhcmdzO1xuICAgIC8qKlxuICAgICAqICBAX2lnbm9yZTpcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihmcmFnbWVudCwgdG9waWMsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGZyYWdtZW50Lm5hbWUsIHNpZ25hdHVyZSA9IGZyYWdtZW50LmZvcm1hdCgpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgICAgIGZyYWdtZW50LCBuYW1lLCBzaWduYXR1cmUsIHRvcGljLCBhcmdzXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuICogIFdoZW4gdXNpbmcgdGhlIFtbSW50ZXJmYWNlLXBhcnNlVHJhbnNhY3Rpb25dXSB0byBhdXRvbWF0aWNhbGx5IG1hdGNoXG4gKiAgYSB0cmFuc2FjdGlvbiBkYXRhIHRvIGl0cyBmdW5jdGlvbiBmb3IgcGFyc2luZyxcbiAqICBhICoqVHJhbnNhY3Rpb25EZXNjcmlwdGlvbioqIGlzIHJldHVybmVkLlxuICovXG5leHBvcnQgY2xhc3MgVHJhbnNhY3Rpb25EZXNjcmlwdGlvbiB7XG4gICAgLyoqXG4gICAgICogIFRoZSBtYXRjaGluZyBmcmFnbWVudCBmcm9tIHRoZSB0cmFuc2FjdGlvbiBgYGRhdGFgYC5cbiAgICAgKi9cbiAgICBmcmFnbWVudDtcbiAgICAvKipcbiAgICAgKiAgVGhlIG5hbWUgb2YgdGhlIEZ1bmN0aW9uIGZyb20gdGhlIHRyYW5zYWN0aW9uIGBgZGF0YWBgLlxuICAgICAqL1xuICAgIG5hbWU7XG4gICAgLyoqXG4gICAgICogIFRoZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBGdW5jdGlvbiBmcm9tIHRoZSB0cmFuc2FjdGlvbiBgYGRhdGFgYC5cbiAgICAgKi9cbiAgICBhcmdzO1xuICAgIC8qKlxuICAgICAqICBUaGUgZnVsbCBGdW5jdGlvbiBzaWduYXR1cmUgZnJvbSB0aGUgdHJhbnNhY3Rpb24gYGBkYXRhYGAuXG4gICAgICovXG4gICAgc2lnbmF0dXJlO1xuICAgIC8qKlxuICAgICAqICBUaGUgc2VsZWN0b3IgZm9yIHRoZSBGdW5jdGlvbiBmcm9tIHRoZSB0cmFuc2FjdGlvbiBgYGRhdGFgYC5cbiAgICAgKi9cbiAgICBzZWxlY3RvcjtcbiAgICAvKipcbiAgICAgKiAgVGhlIGBgdmFsdWVgYCAoaW4gd2VpKSBmcm9tIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgKi9cbiAgICB2YWx1ZTtcbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZnJhZ21lbnQsIHNlbGVjdG9yLCBhcmdzLCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBuYW1lID0gZnJhZ21lbnQubmFtZSwgc2lnbmF0dXJlID0gZnJhZ21lbnQuZm9ybWF0KCk7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgZnJhZ21lbnQsIG5hbWUsIGFyZ3MsIHNpZ25hdHVyZSwgc2VsZWN0b3IsIHZhbHVlXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuICogIFdoZW4gdXNpbmcgdGhlIFtbSW50ZXJmYWNlLXBhcnNlRXJyb3JdXSB0byBhdXRvbWF0aWNhbGx5IG1hdGNoIGFuXG4gKiAgZXJyb3IgZm9yIGEgY2FsbCByZXN1bHQgZm9yIHBhcnNpbmcsIGFuICoqRXJyb3JEZXNjcmlwdGlvbioqIGlzIHJldHVybmVkLlxuICovXG5leHBvcnQgY2xhc3MgRXJyb3JEZXNjcmlwdGlvbiB7XG4gICAgLyoqXG4gICAgICogIFRoZSBtYXRjaGluZyBmcmFnbWVudC5cbiAgICAgKi9cbiAgICBmcmFnbWVudDtcbiAgICAvKipcbiAgICAgKiAgVGhlIG5hbWUgb2YgdGhlIEVycm9yLlxuICAgICAqL1xuICAgIG5hbWU7XG4gICAgLyoqXG4gICAgICogIFRoZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBFcnJvciB3aXRoIGBgcmV2ZXJ0YGAuXG4gICAgICovXG4gICAgYXJncztcbiAgICAvKipcbiAgICAgKiAgVGhlIGZ1bGwgRXJyb3Igc2lnbmF0dXJlLlxuICAgICAqL1xuICAgIHNpZ25hdHVyZTtcbiAgICAvKipcbiAgICAgKiAgVGhlIHNlbGVjdG9yIGZvciB0aGUgRXJyb3IuXG4gICAgICovXG4gICAgc2VsZWN0b3I7XG4gICAgLyoqXG4gICAgICogIEBfaWdub3JlOlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGZyYWdtZW50LCBzZWxlY3RvciwgYXJncykge1xuICAgICAgICBjb25zdCBuYW1lID0gZnJhZ21lbnQubmFtZSwgc2lnbmF0dXJlID0gZnJhZ21lbnQuZm9ybWF0KCk7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgZnJhZ21lbnQsIG5hbWUsIGFyZ3MsIHNpZ25hdHVyZSwgc2VsZWN0b3JcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLyoqXG4gKiAgQW4gKipJbmRleGVkKiogaXMgdXNlZCBhcyBhIHZhbHVlIHdoZW4gYSB2YWx1ZSB0aGF0IGRvZXMgbm90XG4gKiAgZml0IHdpdGhpbiBhIHRvcGljIChpLmUuIG5vdCBhIGZpeGVkLWxlbmd0aCwgMzItYnl0ZSB0eXBlKS4gSXRcbiAqICBpcyB0aGUgYGBrZWNjYWsyNTZgYCBvZiB0aGUgdmFsdWUsIGFuZCB1c2VkIGZvciB0eXBlcyBzdWNoIGFzXG4gKiAgYXJyYXlzLCB0dXBsZXMsIGJ5dGVzIGFuZCBzdHJpbmdzLlxuICovXG5leHBvcnQgY2xhc3MgSW5kZXhlZCB7XG4gICAgLyoqXG4gICAgICogIFRoZSBgYGtlY2NhazI1NmBgIG9mIHRoZSB2YWx1ZSBsb2dnZWQuXG4gICAgICovXG4gICAgaGFzaDtcbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgX2lzSW5kZXhlZDtcbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBgYHRydWVgYCBpZiAlJXZhbHVlJSUgaXMgYW4gKipJbmRleGVkKiouXG4gICAgICpcbiAgICAgKiAgVGhpcyBwcm92aWRlcyBhIFR5cGUgR3VhcmQgZm9yIHByb3BlcnR5IGFjY2Vzcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNJbmRleGVkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5faXNJbmRleGVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEBfaWdub3JlOlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGhhc2gpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IGhhc2gsIF9pc0luZGV4ZWQ6IHRydWUgfSk7XG4gICAgfVxufVxuLy8gaHR0cHM6Ly9kb2NzLnNvbGlkaXR5bGFuZy5vcmcvZW4vdjAuOC4xMy9jb250cm9sLXN0cnVjdHVyZXMuaHRtbD9oaWdobGlnaHQ9cGFuaWMjcGFuaWMtdmlhLWFzc2VydC1hbmQtZXJyb3ItdmlhLXJlcXVpcmVcbmNvbnN0IFBhbmljUmVhc29ucyA9IHtcbiAgICBcIjBcIjogXCJnZW5lcmljIHBhbmljXCIsXG4gICAgXCIxXCI6IFwiYXNzZXJ0KGZhbHNlKVwiLFxuICAgIFwiMTdcIjogXCJhcml0aG1ldGljIG92ZXJmbG93XCIsXG4gICAgXCIxOFwiOiBcImRpdmlzaW9uIG9yIG1vZHVsbyBieSB6ZXJvXCIsXG4gICAgXCIzM1wiOiBcImVudW0gb3ZlcmZsb3dcIixcbiAgICBcIjM0XCI6IFwiaW52YWxpZCBlbmNvZGVkIHN0b3JhZ2UgYnl0ZSBhcnJheSBhY2Nlc3NlZFwiLFxuICAgIFwiNDlcIjogXCJvdXQtb2YtYm91bmRzIGFycmF5IGFjY2VzczsgcG9wcGluZyBvbiBhbiBlbXB0eSBhcnJheVwiLFxuICAgIFwiNTBcIjogXCJvdXQtb2YtYm91bmRzIGFjY2VzcyBvZiBhbiBhcnJheSBvciBieXRlc05cIixcbiAgICBcIjY1XCI6IFwib3V0IG9mIG1lbW9yeVwiLFxuICAgIFwiODFcIjogXCJ1bmluaXRpYWxpemVkIGZ1bmN0aW9uXCIsXG59O1xuY29uc3QgQnVpbHRpbkVycm9ycyA9IHtcbiAgICBcIjB4MDhjMzc5YTBcIjoge1xuICAgICAgICBzaWduYXR1cmU6IFwiRXJyb3Ioc3RyaW5nKVwiLFxuICAgICAgICBuYW1lOiBcIkVycm9yXCIsXG4gICAgICAgIGlucHV0czogW1wic3RyaW5nXCJdLFxuICAgICAgICByZWFzb246IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYHJldmVydGVkIHdpdGggcmVhc29uIHN0cmluZyAke0pTT04uc3RyaW5naWZ5KG1lc3NhZ2UpfWA7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiMHg0ZTQ4N2I3MVwiOiB7XG4gICAgICAgIHNpZ25hdHVyZTogXCJQYW5pYyh1aW50MjU2KVwiLFxuICAgICAgICBuYW1lOiBcIlBhbmljXCIsXG4gICAgICAgIGlucHV0czogW1widWludDI1NlwiXSxcbiAgICAgICAgcmVhc29uOiAoY29kZSkgPT4ge1xuICAgICAgICAgICAgbGV0IHJlYXNvbiA9IFwidW5rbm93biBwYW5pYyBjb2RlXCI7XG4gICAgICAgICAgICBpZiAoY29kZSA+PSAwICYmIGNvZGUgPD0gMHhmZiAmJiBQYW5pY1JlYXNvbnNbY29kZS50b1N0cmluZygpXSkge1xuICAgICAgICAgICAgICAgIHJlYXNvbiA9IFBhbmljUmVhc29uc1tjb2RlLnRvU3RyaW5nKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGByZXZlcnRlZCB3aXRoIHBhbmljIGNvZGUgMHgke2NvZGUudG9TdHJpbmcoMTYpfSAoJHtyZWFzb259KWA7XG4gICAgICAgIH1cbiAgICB9XG59O1xuLyoqXG4gKiAgQW4gSW50ZXJmYWNlIGFic3RyYWN0cyBtYW55IG9mIHRoZSBsb3ctbGV2ZWwgZGV0YWlscyBmb3JcbiAqICBlbmNvZGluZyBhbmQgZGVjb2RpbmcgdGhlIGRhdGEgb24gdGhlIGJsb2NrY2hhaW4uXG4gKlxuICogIEFuIEFCSSBwcm92aWRlcyBpbmZvcm1hdGlvbiBvbiBob3cgdG8gZW5jb2RlIGRhdGEgdG8gc2VuZCB0b1xuICogIGEgQ29udHJhY3QsIGhvdyB0byBkZWNvZGUgdGhlIHJlc3VsdHMgYW5kIGV2ZW50cyBhbmQgaG93IHRvXG4gKiAgaW50ZXJwcmV0IHJldmVydCBlcnJvcnMuXG4gKlxuICogIFRoZSBBQkkgY2FuIGJlIHNwZWNpZmllZCBieSBbYW55IHN1cHBvcnRlZCBmb3JtYXRdKEludGVyZmFjZUFiaSkuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnRlcmZhY2Uge1xuICAgIC8qKlxuICAgICAqICBBbGwgdGhlIENvbnRyYWN0IEFCSSBtZW1iZXJzIChpLmUuIG1ldGhvZHMsIGV2ZW50cywgZXJyb3JzLCBldGMpLlxuICAgICAqL1xuICAgIGZyYWdtZW50cztcbiAgICAvKipcbiAgICAgKiAgVGhlIENvbnRyYWN0IGNvbnN0cnVjdG9yLlxuICAgICAqL1xuICAgIGRlcGxveTtcbiAgICAvKipcbiAgICAgKiAgVGhlIEZhbGxiYWNrIG1ldGhvZCwgaWYgYW55LlxuICAgICAqL1xuICAgIGZhbGxiYWNrO1xuICAgIC8qKlxuICAgICAqICBJZiByZWNlaXZpbmcgZXRoZXIgaXMgc3VwcG9ydGVkLlxuICAgICAqL1xuICAgIHJlY2VpdmU7XG4gICAgI2Vycm9ycztcbiAgICAjZXZlbnRzO1xuICAgICNmdW5jdGlvbnM7XG4gICAgLy8gICAgI3N0cnVjdHM6IE1hcDxzdHJpbmcsIFN0cnVjdEZyYWdtZW50PjtcbiAgICAjYWJpQ29kZXI7XG4gICAgLyoqXG4gICAgICogIENyZWF0ZSBhIG5ldyBJbnRlcmZhY2UgZm9yIHRoZSAlJWZyYWdtZW50cyUlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGZyYWdtZW50cykge1xuICAgICAgICBsZXQgYWJpID0gW107XG4gICAgICAgIGlmICh0eXBlb2YgKGZyYWdtZW50cykgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGFiaSA9IEpTT04ucGFyc2UoZnJhZ21lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFiaSA9IGZyYWdtZW50cztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNmdW5jdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuI2Vycm9ycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy4jZXZlbnRzID0gbmV3IE1hcCgpO1xuICAgICAgICAvLyAgICAgICAgdGhpcy4jc3RydWN0cyA9IG5ldyBNYXAoKTtcbiAgICAgICAgY29uc3QgZnJhZ3MgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBhIG9mIGFiaSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmcmFncy5wdXNoKEZyYWdtZW50LmZyb20oYSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtXYXJuaW5nXSBJbnZhbGlkIEZyYWdtZW50ICR7SlNPTi5zdHJpbmdpZnkoYSl9OmAsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgZnJhZ21lbnRzOiBPYmplY3QuZnJlZXplKGZyYWdzKVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGZhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgbGV0IHJlY2VpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy4jYWJpQ29kZXIgPSB0aGlzLmdldEFiaUNvZGVyKCk7XG4gICAgICAgIC8vIEFkZCBhbGwgZnJhZ21lbnRzIGJ5IHRoZWlyIHNpZ25hdHVyZVxuICAgICAgICB0aGlzLmZyYWdtZW50cy5mb3JFYWNoKChmcmFnbWVudCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGxldCBidWNrZXQ7XG4gICAgICAgICAgICBzd2l0Y2ggKGZyYWdtZW50LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiY29uc3RydWN0b3JcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVwbG95KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImR1cGxpY2F0ZSBkZWZpbml0aW9uIC0gY29uc3RydWN0b3JcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy9jaGVja05hbWVzKGZyYWdtZW50LCBcImlucHV0XCIsIGZyYWdtZW50LmlucHV0cyk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBkZXBsb3k6IGZyYWdtZW50IH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSBcImZhbGxiYWNrXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcmFnbWVudC5pbnB1dHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KCFmYWxsYmFjayB8fCBmcmFnbWVudC5wYXlhYmxlICE9PSBmYWxsYmFjay5wYXlhYmxlLCBcImNvbmZsaWN0aW5nIGZhbGxiYWNrIGZyYWdtZW50c1wiLCBgZnJhZ21lbnRzWyR7aW5kZXh9XWAsIGZyYWdtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrID0gZnJhZ21lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlID0gZmFsbGJhY2sucGF5YWJsZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2tOYW1lcyhmcmFnbWVudCwgXCJpbnB1dFwiLCBmcmFnbWVudC5pbnB1dHMpO1xuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrTmFtZXMoZnJhZ21lbnQsIFwib3V0cHV0XCIsICg8RnVuY3Rpb25GcmFnbWVudD5mcmFnbWVudCkub3V0cHV0cyk7XG4gICAgICAgICAgICAgICAgICAgIGJ1Y2tldCA9IHRoaXMuI2Z1bmN0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImV2ZW50XCI6XG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2tOYW1lcyhmcmFnbWVudCwgXCJpbnB1dFwiLCBmcmFnbWVudC5pbnB1dHMpO1xuICAgICAgICAgICAgICAgICAgICBidWNrZXQgPSB0aGlzLiNldmVudHM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgICAgICAgICAgICAgICBidWNrZXQgPSB0aGlzLiNlcnJvcnM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFR3byBpZGVudGljYWwgZW50cmllczsgaWdub3JlIGl0XG4gICAgICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBmcmFnbWVudC5mb3JtYXQoKTtcbiAgICAgICAgICAgIGlmIChidWNrZXQuaGFzKHNpZ25hdHVyZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWNrZXQuc2V0KHNpZ25hdHVyZSwgZnJhZ21lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gSWYgd2UgZG8gbm90IGhhdmUgYSBjb25zdHJ1Y3RvciBhZGQgYSBkZWZhdWx0XG4gICAgICAgIGlmICghdGhpcy5kZXBsb3kpIHtcbiAgICAgICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgICAgIGRlcGxveTogQ29uc3RydWN0b3JGcmFnbWVudC5mcm9tKFwiY29uc3RydWN0b3IoKVwiKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IGZhbGxiYWNrLCByZWNlaXZlIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0aGUgZW50aXJlIEh1bWFuLVJlYWRhYmxlIEFCSSwgYXMgYW4gYXJyYXkgb2ZcbiAgICAgKiAgc2lnbmF0dXJlcywgb3B0aW9uYWxseSBhcyAlJW1pbmltYWwlJSBzdHJpbmdzLCB3aGljaFxuICAgICAqICByZW1vdmVzIHBhcmFtZXRlciBuYW1lcyBhbmQgdW5uZWNlZXNhcnkgc3BhY2VzLlxuICAgICAqL1xuICAgIGZvcm1hdChtaW5pbWFsKSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdCA9IChtaW5pbWFsID8gXCJtaW5pbWFsXCIgOiBcImZ1bGxcIik7XG4gICAgICAgIGNvbnN0IGFiaSA9IHRoaXMuZnJhZ21lbnRzLm1hcCgoZikgPT4gZi5mb3JtYXQoZm9ybWF0KSk7XG4gICAgICAgIHJldHVybiBhYmk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gdGhlIEpTT04tZW5jb2RlZCBBQkkuIFRoaXMgaXMgdGhlIGZvcm1hdCBTb2xpZGl5XG4gICAgICogIHJldHVybnMuXG4gICAgICovXG4gICAgZm9ybWF0SnNvbigpIHtcbiAgICAgICAgY29uc3QgYWJpID0gdGhpcy5mcmFnbWVudHMubWFwKChmKSA9PiBmLmZvcm1hdChcImpzb25cIikpO1xuICAgICAgICAvLyBXZSBuZWVkIHRvIHJlLWJ1bmRsZSB0aGUgSlNPTiBmcmFnbWVudHMgYSBiaXRcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFiaS5tYXAoKGopID0+IEpTT04ucGFyc2UoaikpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBBQkkgY29kZXIgdGhhdCB3aWxsIGJlIHVzZWQgdG8gZW5jb2RlIGFuZCBkZWNvZGUgYmluYXJ5XG4gICAgICogIGRhdGEuXG4gICAgICovXG4gICAgZ2V0QWJpQ29kZXIoKSB7XG4gICAgICAgIHJldHVybiBBYmlDb2Rlci5kZWZhdWx0QWJpQ29kZXIoKTtcbiAgICB9XG4gICAgLy8gRmluZCBhIGZ1bmN0aW9uIGRlZmluaXRpb24gYnkgYW55IG1lYW5zIG5lY2Vzc2FyeSAodW5sZXNzIGl0IGlzIGFtYmlndW91cylcbiAgICAjZ2V0RnVuY3Rpb24oa2V5LCB2YWx1ZXMsIGZvcmNlVW5pcXVlKSB7XG4gICAgICAgIC8vIFNlbGVjdG9yXG4gICAgICAgIGlmIChpc0hleFN0cmluZyhrZXkpKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBmcmFnbWVudCBvZiB0aGlzLiNmdW5jdGlvbnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IgPT09IGZyYWdtZW50LnNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBJdCBpcyBhIGJhcmUgbmFtZSwgbG9vayB1cCB0aGUgZnVuY3Rpb24gKHdpbGwgcmV0dXJuIG51bGwgaWYgYW1iaWd1b3VzKVxuICAgICAgICBpZiAoa2V5LmluZGV4T2YoXCIoXCIpID09PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmcgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW25hbWUsIGZyYWdtZW50XSBvZiB0aGlzLiNmdW5jdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZS5zcGxpdChcIihcIiAvKiBmaXg6KSAqLylbMF0gPT09IGtleSkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaGluZy5wdXNoKGZyYWdtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdFZhbHVlID0gKHZhbHVlcy5sZW5ndGggPiAwKSA/IHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV0gOiBudWxsO1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZUxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgbGV0IGFsbG93T3B0aW9ucyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKFR5cGVkLmlzVHlwZWQobGFzdFZhbHVlKSAmJiBsYXN0VmFsdWUudHlwZSA9PT0gXCJvdmVycmlkZXNcIikge1xuICAgICAgICAgICAgICAgICAgICBhbGxvd09wdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVMZW5ndGgtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBtYXRjaGVzIHRoYXQgZG9uJ3QgaGF2ZSBhIGNvbXBhdGlibGUgbGVuZ3RoLiBUaGUgYXJnc1xuICAgICAgICAgICAgICAgIC8vIG1heSBjb250YWluIGFuIG92ZXJyaWRlcywgc28gdGhlIG1hdGNoIG1heSBoYXZlIG4gb3IgbiAtIDEgcGFyYW1ldGVyc1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBtYXRjaGluZy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dHMgPSBtYXRjaGluZ1tpXS5pbnB1dHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRzICE9PSB2YWx1ZUxlbmd0aCAmJiAoIWFsbG93T3B0aW9ucyB8fCBpbnB1dHMgIT09IHZhbHVlTGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoaW5nLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYWxsIG1hdGNoZXMgdGhhdCBkb24ndCBtYXRjaCB0aGUgVHlwZWQgc2lnbmF0dXJlXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IG1hdGNoaW5nLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0cyA9IG1hdGNoaW5nW2ldLmlucHV0cztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2YWx1ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBhIHR5cGVkIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIVR5cGVkLmlzVHlwZWQodmFsdWVzW2pdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgYXJlIHBhc3QgdGhlIGlucHV0c1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPj0gaW5wdXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbal0udHlwZSA9PT0gXCJvdmVycmlkZXNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hpbmcuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSB2YWx1ZSB0eXBlIG1hdGNoZXMgdGhlIGlucHV0IHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbal0udHlwZSAhPT0gaW5wdXRzW2pdLmJhc2VUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hpbmcuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gV2UgZm91bmQgYSBzaW5nbGUgbWF0Y2hpbmcgc2lnbmF0dXJlIHdpdGggYW4gb3ZlcnJpZGVzLCBidXQgdGhlXG4gICAgICAgICAgICAvLyBsYXN0IHZhbHVlIGlzIHNvbWV0aGluZyB0aGF0IGNhbm5vdCBwb3NzaWJseSBiZSBhbiBvcHRpb25zXG4gICAgICAgICAgICBpZiAobWF0Y2hpbmcubGVuZ3RoID09PSAxICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoICE9PSBtYXRjaGluZ1swXS5pbnB1dHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdEFyZyA9IHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RBcmcgPT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KGxhc3RBcmcpIHx8IHR5cGVvZiAobGFzdEFyZykgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hpbmcuc3BsaWNlKDAsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaGluZy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaGluZy5sZW5ndGggPiAxICYmIGZvcmNlVW5pcXVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hTdHIgPSBtYXRjaGluZy5tYXAoKG0pID0+IEpTT04uc3RyaW5naWZ5KG0uZm9ybWF0KCkpKS5qb2luKFwiLCBcIik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIGBhbWJpZ3VvdXMgZnVuY3Rpb24gZGVzY3JpcHRpb24gKGkuZS4gbWF0Y2hlcyAke21hdGNoU3RyfSlgLCBcImtleVwiLCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoaW5nWzBdO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgc2lnbmF0dXJlIGFuZCBsb29rdXAgdGhlIGZ1bmN0aW9uXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuI2Z1bmN0aW9ucy5nZXQoRnVuY3Rpb25GcmFnbWVudC5mcm9tKGtleSkuZm9ybWF0KCkpO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgR2V0IHRoZSBmdW5jdGlvbiBuYW1lIGZvciAlJWtleSUlLCB3aGljaCBtYXkgYmUgYSBmdW5jdGlvbiBzZWxlY3RvcixcbiAgICAgKiAgZnVuY3Rpb24gbmFtZSBvciBmdW5jdGlvbiBzaWduYXR1cmUgdGhhdCBiZWxvbmdzIHRvIHRoZSBBQkkuXG4gICAgICovXG4gICAgZ2V0RnVuY3Rpb25OYW1lKGtleSkge1xuICAgICAgICBjb25zdCBmcmFnbWVudCA9IHRoaXMuI2dldEZ1bmN0aW9uKGtleSwgbnVsbCwgZmFsc2UpO1xuICAgICAgICBhc3NlcnRBcmd1bWVudChmcmFnbWVudCwgXCJubyBtYXRjaGluZyBmdW5jdGlvblwiLCBcImtleVwiLCBrZXkpO1xuICAgICAgICByZXR1cm4gZnJhZ21lbnQubmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiAlJWtleSUlIChhIGZ1bmN0aW9uIHNlbGVjdG9yLCBmdW5jdGlvbiBuYW1lIG9yXG4gICAgICogIGZ1bmN0aW9uIHNpZ25hdHVyZSkgaXMgcHJlc2VudCBpbiB0aGUgQUJJLlxuICAgICAqXG4gICAgICogIEluIHRoZSBjYXNlIG9mIGEgZnVuY3Rpb24gbmFtZSwgdGhlIG5hbWUgbWF5IGJlIGFtYmlndW91cywgc29cbiAgICAgKiAgYWNjZXNzaW5nIHRoZSBbW0Z1bmN0aW9uRnJhZ21lbnRdXSBtYXkgcmVxdWlyZSByZWZpbmVtZW50LlxuICAgICAqL1xuICAgIGhhc0Z1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gISF0aGlzLiNnZXRGdW5jdGlvbihrZXksIG51bGwsIGZhbHNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEdldCB0aGUgW1tGdW5jdGlvbkZyYWdtZW50XV0gZm9yICUla2V5JSUsIHdoaWNoIG1heSBiZSBhIGZ1bmN0aW9uXG4gICAgICogIHNlbGVjdG9yLCBmdW5jdGlvbiBuYW1lIG9yIGZ1bmN0aW9uIHNpZ25hdHVyZSB0aGF0IGJlbG9uZ3MgdG8gdGhlIEFCSS5cbiAgICAgKlxuICAgICAqICBJZiAlJXZhbHVlcyUlIGlzIHByb3ZpZGVkLCBpdCB3aWxsIHVzZSB0aGUgVHlwZWQgQVBJIHRvIGhhbmRsZVxuICAgICAqICBhbWJpZ3VvdXMgY2FzZXMgd2hlcmUgbXVsdGlwbGUgZnVuY3Rpb25zIG1hdGNoIGJ5IG5hbWUuXG4gICAgICpcbiAgICAgKiAgSWYgdGhlICUla2V5JSUgYW5kICUldmFsdWVzJSUgZG8gbm90IHJlZmluZSB0byBhIHNpbmdsZSBmdW5jdGlvbiBpblxuICAgICAqICB0aGUgQUJJLCB0aGlzIHdpbGwgdGhyb3cuXG4gICAgICovXG4gICAgZ2V0RnVuY3Rpb24oa2V5LCB2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2dldEZ1bmN0aW9uKGtleSwgdmFsdWVzIHx8IG51bGwsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgSXRlcmF0ZSBvdmVyIGFsbCBmdW5jdGlvbnMsIGNhbGxpbmcgJSVjYWxsYmFjayUlLCBzb3J0ZWQgYnkgdGhlaXIgbmFtZS5cbiAgICAgKi9cbiAgICBmb3JFYWNoRnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgbmFtZXMgPSBBcnJheS5mcm9tKHRoaXMuI2Z1bmN0aW9ucy5rZXlzKCkpO1xuICAgICAgICBuYW1lcy5zb3J0KChhLCBiKSA9PiBhLmxvY2FsZUNvbXBhcmUoYikpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gbmFtZXNbaV07XG4gICAgICAgICAgICBjYWxsYmFjaygodGhpcy4jZnVuY3Rpb25zLmdldChuYW1lKSksIGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEZpbmQgYW4gZXZlbnQgZGVmaW5pdGlvbiBieSBhbnkgbWVhbnMgbmVjZXNzYXJ5ICh1bmxlc3MgaXQgaXMgYW1iaWd1b3VzKVxuICAgICNnZXRFdmVudChrZXksIHZhbHVlcywgZm9yY2VVbmlxdWUpIHtcbiAgICAgICAgLy8gRXZlbnRUb3BpY1xuICAgICAgICBpZiAoaXNIZXhTdHJpbmcoa2V5KSkge1xuICAgICAgICAgICAgY29uc3QgZXZlbnRUb3BpYyA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBmcmFnbWVudCBvZiB0aGlzLiNldmVudHMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRUb3BpYyA9PT0gZnJhZ21lbnQudG9waWNIYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBJdCBpcyBhIGJhcmUgbmFtZSwgbG9vayB1cCB0aGUgZnVuY3Rpb24gKHdpbGwgcmV0dXJuIG51bGwgaWYgYW1iaWd1b3VzKVxuICAgICAgICBpZiAoa2V5LmluZGV4T2YoXCIoXCIpID09PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmcgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW25hbWUsIGZyYWdtZW50XSBvZiB0aGlzLiNldmVudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZS5zcGxpdChcIihcIiAvKiBmaXg6KSAqLylbMF0gPT09IGtleSkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaGluZy5wdXNoKGZyYWdtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBtYXRjaGVzIHRoYXQgZG9uJ3QgaGF2ZSBhIGNvbXBhdGlibGUgbGVuZ3RoLlxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBtYXRjaGluZy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hpbmdbaV0uaW5wdXRzLmxlbmd0aCA8IHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoaW5nLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYWxsIG1hdGNoZXMgdGhhdCBkb24ndCBtYXRjaCB0aGUgVHlwZWQgc2lnbmF0dXJlXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IG1hdGNoaW5nLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0cyA9IG1hdGNoaW5nW2ldLmlucHV0cztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2YWx1ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBhIHR5cGVkIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIVR5cGVkLmlzVHlwZWQodmFsdWVzW2pdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSB2YWx1ZSB0eXBlIG1hdGNoZXMgdGhlIGlucHV0IHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbal0udHlwZSAhPT0gaW5wdXRzW2pdLmJhc2VUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hpbmcuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoaW5nLmxlbmd0aCA+IDEgJiYgZm9yY2VVbmlxdWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaFN0ciA9IG1hdGNoaW5nLm1hcCgobSkgPT4gSlNPTi5zdHJpbmdpZnkobS5mb3JtYXQoKSkpLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgYGFtYmlndW91cyBldmVudCBkZXNjcmlwdGlvbiAoaS5lLiBtYXRjaGVzICR7bWF0Y2hTdHJ9KWAsIFwia2V5XCIsIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hpbmdbMF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm9ybWFsaXplIHRoZSBzaWduYXR1cmUgYW5kIGxvb2t1cCB0aGUgZnVuY3Rpb25cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy4jZXZlbnRzLmdldChFdmVudEZyYWdtZW50LmZyb20oa2V5KS5mb3JtYXQoKSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBHZXQgdGhlIGV2ZW50IG5hbWUgZm9yICUla2V5JSUsIHdoaWNoIG1heSBiZSBhIHRvcGljIGhhc2gsXG4gICAgICogIGV2ZW50IG5hbWUgb3IgZXZlbnQgc2lnbmF0dXJlIHRoYXQgYmVsb25ncyB0byB0aGUgQUJJLlxuICAgICAqL1xuICAgIGdldEV2ZW50TmFtZShrZXkpIHtcbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzLiNnZXRFdmVudChrZXksIG51bGwsIGZhbHNlKTtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZnJhZ21lbnQsIFwibm8gbWF0Y2hpbmcgZXZlbnRcIiwgXCJrZXlcIiwga2V5KTtcbiAgICAgICAgcmV0dXJuIGZyYWdtZW50Lm5hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRydWUgaWYgJSVrZXklJSAoYW4gZXZlbnQgdG9waWMgaGFzaCwgZXZlbnQgbmFtZSBvclxuICAgICAqICBldmVudCBzaWduYXR1cmUpIGlzIHByZXNlbnQgaW4gdGhlIEFCSS5cbiAgICAgKlxuICAgICAqICBJbiB0aGUgY2FzZSBvZiBhbiBldmVudCBuYW1lLCB0aGUgbmFtZSBtYXkgYmUgYW1iaWd1b3VzLCBzb1xuICAgICAqICBhY2Nlc3NpbmcgdGhlIFtbRXZlbnRGcmFnbWVudF1dIG1heSByZXF1aXJlIHJlZmluZW1lbnQuXG4gICAgICovXG4gICAgaGFzRXZlbnQoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuI2dldEV2ZW50KGtleSwgbnVsbCwgZmFsc2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgR2V0IHRoZSBbW0V2ZW50RnJhZ21lbnRdXSBmb3IgJSVrZXklJSwgd2hpY2ggbWF5IGJlIGEgdG9waWMgaGFzaCxcbiAgICAgKiAgZXZlbnQgbmFtZSBvciBldmVudCBzaWduYXR1cmUgdGhhdCBiZWxvbmdzIHRvIHRoZSBBQkkuXG4gICAgICpcbiAgICAgKiAgSWYgJSV2YWx1ZXMlJSBpcyBwcm92aWRlZCwgaXQgd2lsbCB1c2UgdGhlIFR5cGVkIEFQSSB0byBoYW5kbGVcbiAgICAgKiAgYW1iaWd1b3VzIGNhc2VzIHdoZXJlIG11bHRpcGxlIGV2ZW50cyBtYXRjaCBieSBuYW1lLlxuICAgICAqXG4gICAgICogIElmIHRoZSAlJWtleSUlIGFuZCAlJXZhbHVlcyUlIGRvIG5vdCByZWZpbmUgdG8gYSBzaW5nbGUgZXZlbnQgaW5cbiAgICAgKiAgdGhlIEFCSSwgdGhpcyB3aWxsIHRocm93LlxuICAgICAqL1xuICAgIGdldEV2ZW50KGtleSwgdmFsdWVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNnZXRFdmVudChrZXksIHZhbHVlcyB8fCBudWxsLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEl0ZXJhdGUgb3ZlciBhbGwgZXZlbnRzLCBjYWxsaW5nICUlY2FsbGJhY2slJSwgc29ydGVkIGJ5IHRoZWlyIG5hbWUuXG4gICAgICovXG4gICAgZm9yRWFjaEV2ZW50KGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzID0gQXJyYXkuZnJvbSh0aGlzLiNldmVudHMua2V5cygpKTtcbiAgICAgICAgbmFtZXMuc29ydCgoYSwgYikgPT4gYS5sb2NhbGVDb21wYXJlKGIpKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IG5hbWVzW2ldO1xuICAgICAgICAgICAgY2FsbGJhY2soKHRoaXMuI2V2ZW50cy5nZXQobmFtZSkpLCBpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiAgR2V0IHRoZSBbW0Vycm9yRnJhZ21lbnRdXSBmb3IgJSVrZXklJSwgd2hpY2ggbWF5IGJlIGFuIGVycm9yXG4gICAgICogIHNlbGVjdG9yLCBlcnJvciBuYW1lIG9yIGVycm9yIHNpZ25hdHVyZSB0aGF0IGJlbG9uZ3MgdG8gdGhlIEFCSS5cbiAgICAgKlxuICAgICAqICBJZiAlJXZhbHVlcyUlIGlzIHByb3ZpZGVkLCBpdCB3aWxsIHVzZSB0aGUgVHlwZWQgQVBJIHRvIGhhbmRsZVxuICAgICAqICBhbWJpZ3VvdXMgY2FzZXMgd2hlcmUgbXVsdGlwbGUgZXJyb3JzIG1hdGNoIGJ5IG5hbWUuXG4gICAgICpcbiAgICAgKiAgSWYgdGhlICUla2V5JSUgYW5kICUldmFsdWVzJSUgZG8gbm90IHJlZmluZSB0byBhIHNpbmdsZSBlcnJvciBpblxuICAgICAqICB0aGUgQUJJLCB0aGlzIHdpbGwgdGhyb3cuXG4gICAgICovXG4gICAgZ2V0RXJyb3Ioa2V5LCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKGlzSGV4U3RyaW5nKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAoQnVpbHRpbkVycm9yc1tzZWxlY3Rvcl0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRXJyb3JGcmFnbWVudC5mcm9tKEJ1aWx0aW5FcnJvcnNbc2VsZWN0b3JdLnNpZ25hdHVyZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZyYWdtZW50IG9mIHRoaXMuI2Vycm9ycy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RvciA9PT0gZnJhZ21lbnQuc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIEl0IGlzIGEgYmFyZSBuYW1lLCBsb29rIHVwIHRoZSBmdW5jdGlvbiAod2lsbCByZXR1cm4gbnVsbCBpZiBhbWJpZ3VvdXMpXG4gICAgICAgIGlmIChrZXkuaW5kZXhPZihcIihcIikgPT09IC0xKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGluZyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgZnJhZ21lbnRdIG9mIHRoaXMuI2Vycm9ycykge1xuICAgICAgICAgICAgICAgIGlmIChuYW1lLnNwbGl0KFwiKFwiIC8qIGZpeDopICovKVswXSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoaW5nLnB1c2goZnJhZ21lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaGluZy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSBcIkVycm9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEVycm9yRnJhZ21lbnQuZnJvbShcImVycm9yIEVycm9yKHN0cmluZylcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IFwiUGFuaWNcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRXJyb3JGcmFnbWVudC5mcm9tKFwiZXJyb3IgUGFuaWModWludDI1NilcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWF0Y2hpbmcubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoU3RyID0gbWF0Y2hpbmcubWFwKChtKSA9PiBKU09OLnN0cmluZ2lmeShtLmZvcm1hdCgpKSkuam9pbihcIiwgXCIpO1xuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBgYW1iaWd1b3VzIGVycm9yIGRlc2NyaXB0aW9uIChpLmUuICR7bWF0Y2hTdHJ9KWAsIFwibmFtZVwiLCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoaW5nWzBdO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgc2lnbmF0dXJlIGFuZCBsb29rdXAgdGhlIGZ1bmN0aW9uXG4gICAgICAgIGtleSA9IEVycm9yRnJhZ21lbnQuZnJvbShrZXkpLmZvcm1hdCgpO1xuICAgICAgICBpZiAoa2V5ID09PSBcIkVycm9yKHN0cmluZylcIikge1xuICAgICAgICAgICAgcmV0dXJuIEVycm9yRnJhZ21lbnQuZnJvbShcImVycm9yIEVycm9yKHN0cmluZylcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleSA9PT0gXCJQYW5pYyh1aW50MjU2KVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gRXJyb3JGcmFnbWVudC5mcm9tKFwiZXJyb3IgUGFuaWModWludDI1NilcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy4jZXJyb3JzLmdldChrZXkpO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgSXRlcmF0ZSBvdmVyIGFsbCBlcnJvcnMsIGNhbGxpbmcgJSVjYWxsYmFjayUlLCBzb3J0ZWQgYnkgdGhlaXIgbmFtZS5cbiAgICAgKi9cbiAgICBmb3JFYWNoRXJyb3IoY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgbmFtZXMgPSBBcnJheS5mcm9tKHRoaXMuI2Vycm9ycy5rZXlzKCkpO1xuICAgICAgICBuYW1lcy5zb3J0KChhLCBiKSA9PiBhLmxvY2FsZUNvbXBhcmUoYikpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gbmFtZXNbaV07XG4gICAgICAgICAgICBjYWxsYmFjaygodGhpcy4jZXJyb3JzLmdldChuYW1lKSksIGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEdldCB0aGUgNC1ieXRlIHNlbGVjdG9yIHVzZWQgYnkgU29saWRpdHkgdG8gaWRlbnRpZnkgYSBmdW5jdGlvblxuICAgIC8qXG5nZXRTZWxlY3RvcihmcmFnbWVudDogRXJyb3JGcmFnbWVudCB8IEZ1bmN0aW9uRnJhZ21lbnQpOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YoZnJhZ21lbnQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoZXM6IEFycmF5PEZyYWdtZW50PiA9IFsgXTtcblxuICAgICAgICB0cnkgeyBtYXRjaGVzLnB1c2godGhpcy5nZXRGdW5jdGlvbihmcmFnbWVudCkpOyB9IGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgIHRyeSB7IG1hdGNoZXMucHVzaCh0aGlzLmdldEVycm9yKDxzdHJpbmc+ZnJhZ21lbnQpKTsgfSBjYXRjaCAoXykgeyB9XG5cbiAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5rbm93biBmcmFnbWVudFwiLCBcImtleVwiLCBmcmFnbWVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiYW1iaWd1b3VzIGZyYWdtZW50IG1hdGNoZXMgZnVuY3Rpb24gYW5kIGVycm9yXCIsIFwia2V5XCIsIGZyYWdtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZyYWdtZW50ID0gbWF0Y2hlc1swXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YVNsaWNlKGlkKGZyYWdtZW50LmZvcm1hdCgpKSwgMCwgNCk7XG59XG4gICAgKi9cbiAgICAvLyBHZXQgdGhlIDMyLWJ5dGUgdG9waWMgaGFzaCB1c2VkIGJ5IFNvbGlkaXR5IHRvIGlkZW50aWZ5IGFuIGV2ZW50XG4gICAgLypcbiAgICBnZXRFdmVudFRvcGljKGZyYWdtZW50OiBFdmVudEZyYWdtZW50KTogc3RyaW5nIHtcbiAgICAgICAgLy9pZiAodHlwZW9mKGZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikgeyBmcmFnbWVudCA9IHRoaXMuZ2V0RXZlbnQoZXZlbnRGcmFnbWVudCk7IH1cbiAgICAgICAgcmV0dXJuIGlkKGZyYWdtZW50LmZvcm1hdCgpKTtcbiAgICB9XG4gICAgKi9cbiAgICBfZGVjb2RlUGFyYW1zKHBhcmFtcywgZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy4jYWJpQ29kZXIuZGVjb2RlKHBhcmFtcywgZGF0YSk7XG4gICAgfVxuICAgIF9lbmNvZGVQYXJhbXMocGFyYW1zLCB2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2FiaUNvZGVyLmVuY29kZShwYXJhbXMsIHZhbHVlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBFbmNvZGVzIGEgYGB0eC5kYXRhYGAgb2JqZWN0IGZvciBkZXBsb3lpbmcgdGhlIENvbnRyYWN0IHdpdGhcbiAgICAgKiAgdGhlICUldmFsdWVzJSUgYXMgdGhlIGNvbnN0cnVjdG9yIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBlbmNvZGVEZXBsb3kodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmNvZGVQYXJhbXModGhpcy5kZXBsb3kuaW5wdXRzLCB2YWx1ZXMgfHwgW10pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgRGVjb2RlcyB0aGUgcmVzdWx0ICUlZGF0YSUlIChlLmcuIGZyb20gYW4gYGBldGhfY2FsbGBgKSBmb3IgdGhlXG4gICAgICogIHNwZWNpZmllZCBlcnJvciAoc2VlIFtbZ2V0RXJyb3JdXSBmb3IgdmFsaWQgdmFsdWVzIGZvclxuICAgICAqICAlJWtleSUlKS5cbiAgICAgKlxuICAgICAqICBNb3N0IGRldmVsb3BlcnMgc2hvdWxkIHByZWZlciB0aGUgW1twYXJzZUNhbGxSZXN1bHRdXSBtZXRob2QgaW5zdGVhZCxcbiAgICAgKiAgd2hpY2ggd2lsbCBhdXRvbWF0aWNhbGx5IGRldGVjdCBhIGBgQ0FMTF9FWENFUFRJT05gYCBhbmQgdGhyb3cgdGhlXG4gICAgICogIGNvcnJlc3BvbmRpbmcgZXJyb3IuXG4gICAgICovXG4gICAgZGVjb2RlRXJyb3JSZXN1bHQoZnJhZ21lbnQsIGRhdGEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAoZnJhZ21lbnQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCBmID0gdGhpcy5nZXRFcnJvcihmcmFnbWVudCk7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChmLCBcInVua25vd24gZXJyb3JcIiwgXCJmcmFnbWVudFwiLCBmcmFnbWVudCk7XG4gICAgICAgICAgICBmcmFnbWVudCA9IGY7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZGF0YVNsaWNlKGRhdGEsIDAsIDQpID09PSBmcmFnbWVudC5zZWxlY3RvciwgYGRhdGEgc2lnbmF0dXJlIGRvZXMgbm90IG1hdGNoIGVycm9yICR7ZnJhZ21lbnQubmFtZX0uYCwgXCJkYXRhXCIsIGRhdGEpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVjb2RlUGFyYW1zKGZyYWdtZW50LmlucHV0cywgZGF0YVNsaWNlKGRhdGEsIDQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEVuY29kZXMgdGhlIHRyYW5zYWN0aW9uIHJldmVydCBkYXRhIGZvciBhIGNhbGwgcmVzdWx0IHRoYXRcbiAgICAgKiAgcmV2ZXJ0ZWQgZnJvbSB0aGUgdGhlIENvbnRyYWN0IHdpdGggdGhlIHNlcGNpZmllZCAlJWVycm9yJSVcbiAgICAgKiAgKHNlZSBbW2dldEVycm9yXV0gZm9yIHZhbGlkIHZhbHVlcyBmb3IgJSVmcmFnbWVudCUlKSB3aXRoIHRoZSAlJXZhbHVlcyUlLlxuICAgICAqXG4gICAgICogIFRoaXMgaXMgZ2VuZXJhbGx5IG5vdCB1c2VkIGJ5IG1vc3QgZGV2ZWxvcGVycywgdW5sZXNzIHRyeWluZyB0byBtb2NrXG4gICAgICogIGEgcmVzdWx0IGZyb20gYSBDb250cmFjdC5cbiAgICAgKi9cbiAgICBlbmNvZGVFcnJvclJlc3VsdChmcmFnbWVudCwgdmFsdWVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKGZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgZiA9IHRoaXMuZ2V0RXJyb3IoZnJhZ21lbnQpO1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZiwgXCJ1bmtub3duIGVycm9yXCIsIFwiZnJhZ21lbnRcIiwgZnJhZ21lbnQpO1xuICAgICAgICAgICAgZnJhZ21lbnQgPSBmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25jYXQoW1xuICAgICAgICAgICAgZnJhZ21lbnQuc2VsZWN0b3IsXG4gICAgICAgICAgICB0aGlzLl9lbmNvZGVQYXJhbXMoZnJhZ21lbnQuaW5wdXRzLCB2YWx1ZXMgfHwgW10pXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgRGVjb2RlcyB0aGUgJSVkYXRhJSUgZnJvbSBhIHRyYW5zYWN0aW9uIGBgdHguZGF0YWBgIGZvclxuICAgICAqICB0aGUgZnVuY3Rpb24gc3BlY2lmaWVkIChzZWUgW1tnZXRGdW5jdGlvbl1dIGZvciB2YWxpZCB2YWx1ZXNcbiAgICAgKiAgZm9yICUlZnJhZ21lbnQlJSkuXG4gICAgICpcbiAgICAgKiAgTW9zdCBkZXZlbG9wZXJzIHNob3VsZCBwcmVmZXIgdGhlIFtbcGFyc2VUcmFuc2FjdGlvbl1dIG1ldGhvZFxuICAgICAqICBpbnN0ZWFkLCB3aGljaCB3aWxsIGF1dG9tYXRpY2FsbHkgZGV0ZWN0IHRoZSBmcmFnbWVudC5cbiAgICAgKi9cbiAgICBkZWNvZGVGdW5jdGlvbkRhdGEoZnJhZ21lbnQsIGRhdGEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAoZnJhZ21lbnQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCBmID0gdGhpcy5nZXRGdW5jdGlvbihmcmFnbWVudCk7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChmLCBcInVua25vd24gZnVuY3Rpb25cIiwgXCJmcmFnbWVudFwiLCBmcmFnbWVudCk7XG4gICAgICAgICAgICBmcmFnbWVudCA9IGY7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZGF0YVNsaWNlKGRhdGEsIDAsIDQpID09PSBmcmFnbWVudC5zZWxlY3RvciwgYGRhdGEgc2lnbmF0dXJlIGRvZXMgbm90IG1hdGNoIGZ1bmN0aW9uICR7ZnJhZ21lbnQubmFtZX0uYCwgXCJkYXRhXCIsIGRhdGEpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVjb2RlUGFyYW1zKGZyYWdtZW50LmlucHV0cywgZGF0YVNsaWNlKGRhdGEsIDQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEVuY29kZXMgdGhlIGBgdHguZGF0YWBgIGZvciBhIHRyYW5zYWN0aW9uIHRoYXQgY2FsbHMgdGhlIGZ1bmN0aW9uXG4gICAgICogIHNwZWNpZmllZCAoc2VlIFtbZ2V0RnVuY3Rpb25dXSBmb3IgdmFsaWQgdmFsdWVzIGZvciAlJWZyYWdtZW50JSUpIHdpdGhcbiAgICAgKiAgdGhlICUldmFsdWVzJSUuXG4gICAgICovXG4gICAgZW5jb2RlRnVuY3Rpb25EYXRhKGZyYWdtZW50LCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAoZnJhZ21lbnQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCBmID0gdGhpcy5nZXRGdW5jdGlvbihmcmFnbWVudCk7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChmLCBcInVua25vd24gZnVuY3Rpb25cIiwgXCJmcmFnbWVudFwiLCBmcmFnbWVudCk7XG4gICAgICAgICAgICBmcmFnbWVudCA9IGY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbmNhdChbXG4gICAgICAgICAgICBmcmFnbWVudC5zZWxlY3RvcixcbiAgICAgICAgICAgIHRoaXMuX2VuY29kZVBhcmFtcyhmcmFnbWVudC5pbnB1dHMsIHZhbHVlcyB8fCBbXSlcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBEZWNvZGVzIHRoZSByZXN1bHQgJSVkYXRhJSUgKGUuZy4gZnJvbSBhbiBgYGV0aF9jYWxsYGApIGZvciB0aGVcbiAgICAgKiAgc3BlY2lmaWVkIGZ1bmN0aW9uIChzZWUgW1tnZXRGdW5jdGlvbl1dIGZvciB2YWxpZCB2YWx1ZXMgZm9yXG4gICAgICogICUla2V5JSUpLlxuICAgICAqXG4gICAgICogIE1vc3QgZGV2ZWxvcGVycyBzaG91bGQgcHJlZmVyIHRoZSBbW3BhcnNlQ2FsbFJlc3VsdF1dIG1ldGhvZCBpbnN0ZWFkLFxuICAgICAqICB3aGljaCB3aWxsIGF1dG9tYXRpY2FsbHkgZGV0ZWN0IGEgYGBDQUxMX0VYQ0VQVElPTmBgIGFuZCB0aHJvdyB0aGVcbiAgICAgKiAgY29ycmVzcG9uZGluZyBlcnJvci5cbiAgICAgKi9cbiAgICBkZWNvZGVGdW5jdGlvblJlc3VsdChmcmFnbWVudCwgZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIChmcmFnbWVudCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGYgPSB0aGlzLmdldEZ1bmN0aW9uKGZyYWdtZW50KTtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGYsIFwidW5rbm93biBmdW5jdGlvblwiLCBcImZyYWdtZW50XCIsIGZyYWdtZW50KTtcbiAgICAgICAgICAgIGZyYWdtZW50ID0gZjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWVzc2FnZSA9IFwiaW52YWxpZCBsZW5ndGggZm9yIHJlc3VsdCBkYXRhXCI7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gZ2V0Qnl0ZXNDb3B5KGRhdGEpO1xuICAgICAgICBpZiAoKGJ5dGVzLmxlbmd0aCAlIDMyKSA9PT0gMCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jYWJpQ29kZXIuZGVjb2RlKGZyYWdtZW50Lm91dHB1dHMsIGJ5dGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcImNvdWxkIG5vdCBkZWNvZGUgcmVzdWx0IGRhdGFcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBDYWxsIHJldHVybmVkIGRhdGEgd2l0aCBubyBlcnJvciwgYnV0IHRoZSBkYXRhIGlzIGp1bmtcbiAgICAgICAgYXNzZXJ0KGZhbHNlLCBtZXNzYWdlLCBcIkJBRF9EQVRBXCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBoZXhsaWZ5KGJ5dGVzKSxcbiAgICAgICAgICAgIGluZm86IHsgbWV0aG9kOiBmcmFnbWVudC5uYW1lLCBzaWduYXR1cmU6IGZyYWdtZW50LmZvcm1hdCgpIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG1ha2VFcnJvcihfZGF0YSwgdHgpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGdldEJ5dGVzKF9kYXRhLCBcImRhdGFcIik7XG4gICAgICAgIGNvbnN0IGVycm9yID0gQWJpQ29kZXIuZ2V0QnVpbHRpbkNhbGxFeGNlcHRpb24oXCJjYWxsXCIsIHR4LCBkYXRhKTtcbiAgICAgICAgLy8gTm90IGEgYnVpbHQtaW4gZXJyb3I7IHRyeSBmaW5kaW5nIGEgY3VzdG9tIGVycm9yXG4gICAgICAgIGNvbnN0IGN1c3RvbVByZWZpeCA9IFwiZXhlY3V0aW9uIHJldmVydGVkICh1bmtub3duIGN1c3RvbSBlcnJvcilcIjtcbiAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2Uuc3RhcnRzV2l0aChjdXN0b21QcmVmaXgpKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IGhleGxpZnkoZGF0YS5zbGljZSgwLCA0KSk7XG4gICAgICAgICAgICBjb25zdCBlZiA9IHRoaXMuZ2V0RXJyb3Ioc2VsZWN0b3IpO1xuICAgICAgICAgICAgaWYgKGVmKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJncyA9IHRoaXMuI2FiaUNvZGVyLmRlY29kZShlZi5pbnB1dHMsIGRhdGEuc2xpY2UoNCkpO1xuICAgICAgICAgICAgICAgICAgICBlcnJvci5yZXZlcnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBlZi5uYW1lLCBzaWduYXR1cmU6IGVmLmZvcm1hdCgpLCBhcmdzXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLnJlYXNvbiA9IGVycm9yLnJldmVydC5zaWduYXR1cmU7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UgPSBgZXhlY3V0aW9uIHJldmVydGVkOiAke2Vycm9yLnJlYXNvbn1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlID0gYGV4ZWN1dGlvbiByZXZlcnRlZCAoY291bHQgbm90IGRlY29kZSBjdXN0b20gZXJyb3IpYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIHRoZSBpbnZvY2F0aW9uLCBpZiBhdmFpbGFibGVcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5wYXJzZVRyYW5zYWN0aW9uKHR4KTtcbiAgICAgICAgaWYgKHBhcnNlZCkge1xuICAgICAgICAgICAgZXJyb3IuaW52b2NhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IHBhcnNlZC5uYW1lLFxuICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogcGFyc2VkLnNpZ25hdHVyZSxcbiAgICAgICAgICAgICAgICBhcmdzOiBwYXJzZWQuYXJnc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBFbmNvZGVzIHRoZSByZXN1bHQgZGF0YSAoZS5nLiBmcm9tIGFuIGBgZXRoX2NhbGxgYCkgZm9yIHRoZVxuICAgICAqICBzcGVjaWZpZWQgZnVuY3Rpb24gKHNlZSBbW2dldEZ1bmN0aW9uXV0gZm9yIHZhbGlkIHZhbHVlc1xuICAgICAqICBmb3IgJSVmcmFnbWVudCUlKSB3aXRoICUldmFsdWVzJSUuXG4gICAgICpcbiAgICAgKiAgVGhpcyBpcyBnZW5lcmFsbHkgbm90IHVzZWQgYnkgbW9zdCBkZXZlbG9wZXJzLCB1bmxlc3MgdHJ5aW5nIHRvIG1vY2tcbiAgICAgKiAgYSByZXN1bHQgZnJvbSBhIENvbnRyYWN0LlxuICAgICAqL1xuICAgIGVuY29kZUZ1bmN0aW9uUmVzdWx0KGZyYWdtZW50LCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAoZnJhZ21lbnQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCBmID0gdGhpcy5nZXRGdW5jdGlvbihmcmFnbWVudCk7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChmLCBcInVua25vd24gZnVuY3Rpb25cIiwgXCJmcmFnbWVudFwiLCBmcmFnbWVudCk7XG4gICAgICAgICAgICBmcmFnbWVudCA9IGY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhleGxpZnkodGhpcy4jYWJpQ29kZXIuZW5jb2RlKGZyYWdtZW50Lm91dHB1dHMsIHZhbHVlcyB8fCBbXSkpO1xuICAgIH1cbiAgICAvKlxuICAgICAgICBzcGVsdW5rKGlucHV0czogQXJyYXk8UGFyYW1UeXBlPiwgdmFsdWVzOiBSZWFkb25seUFycmF5PGFueT4sIHByb2Nlc3NmdW5jOiAodHlwZTogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiBQcm9taXNlPGFueT4pOiBQcm9taXNlPEFycmF5PGFueT4+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2VzOiBBcnJheTxQcm9taXNlPD4+ID0gWyBdO1xuICAgICAgICAgICAgY29uc3QgcHJvY2VzcyA9IGZ1bmN0aW9uKHR5cGU6IFBhcmFtVHlwZSwgdmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUuYmFzZVR5cGUgPT09IFwiYXJyYXlcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVzY2VuZCh0eXBlLmNoaWxkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlLiA9PT0gXCJhZGRyZXNzXCIpIHtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgY29uc3QgZGVzY2VuZCA9IGZ1bmN0aW9uIChpbnB1dHM6IEFycmF5PFBhcmFtVHlwZT4sIHZhbHVlczogUmVhZG9ubHlBcnJheTxhbnk+KSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0cy5sZW5ndGggIT09IHZhbHVlcy5sZW5ndGgpIHsgdGhyb3cgbmV3IEVycm9yKFwibGVuZ3RoIG1pc21hdGNoXCIpOyB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgY29uc3QgcmVzdWx0OiBBcnJheTxhbnk+ID0gWyBdO1xuICAgICAgICAgICAgdmFsdWVzLmZvckVhY2goKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcGljcy5wdXNoKG51bGwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW0uYmFzZVR5cGUgPT09IFwiYXJyYXlcIiB8fCBwYXJhbS5iYXNlVHlwZSA9PT0gXCJ0dXBsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJmaWx0ZXJpbmcgd2l0aCB0dXBsZXMgb3IgYXJyYXlzIG5vdCBzdXBwb3J0ZWRcIiwgKFwiY29udHJhY3QuXCIgKyBwYXJhbS5uYW1lKSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9waWNzLnB1c2godmFsdWUubWFwKCh2YWx1ZSkgPT4gZW5jb2RlVG9waWMocGFyYW0sIHZhbHVlKSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcGljcy5wdXNoKGVuY29kZVRvcGljKHBhcmFtLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgKi9cbiAgICAvLyBDcmVhdGUgdGhlIGZpbHRlciBmb3IgdGhlIGV2ZW50IHdpdGggc2VhcmNoIGNyaXRlcmlhIChlLmcuIGZvciBldGhfZmlsdGVyTG9nKVxuICAgIGVuY29kZUZpbHRlclRvcGljcyhmcmFnbWVudCwgdmFsdWVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKGZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgZiA9IHRoaXMuZ2V0RXZlbnQoZnJhZ21lbnQpO1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZiwgXCJ1bmtub3duIGV2ZW50XCIsIFwiZXZlbnRGcmFnbWVudFwiLCBmcmFnbWVudCk7XG4gICAgICAgICAgICBmcmFnbWVudCA9IGY7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0KHZhbHVlcy5sZW5ndGggPD0gZnJhZ21lbnQuaW5wdXRzLmxlbmd0aCwgYHRvbyBtYW55IGFyZ3VtZW50cyBmb3IgJHtmcmFnbWVudC5mb3JtYXQoKX1gLCBcIlVORVhQRUNURURfQVJHVU1FTlRcIiwgeyBjb3VudDogdmFsdWVzLmxlbmd0aCwgZXhwZWN0ZWRDb3VudDogZnJhZ21lbnQuaW5wdXRzLmxlbmd0aCB9KTtcbiAgICAgICAgY29uc3QgdG9waWNzID0gW107XG4gICAgICAgIGlmICghZnJhZ21lbnQuYW5vbnltb3VzKSB7XG4gICAgICAgICAgICB0b3BpY3MucHVzaChmcmFnbWVudC50b3BpY0hhc2gpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEBUT0RPOiBVc2UgdGhlIGNvZGVycyBmb3IgdGhpczsgdG8gcHJvcGVybHkgc3VwcG9ydCB0dXBsZXMsIGV0Yy5cbiAgICAgICAgY29uc3QgZW5jb2RlVG9waWMgPSAocGFyYW0sIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAocGFyYW0udHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpZCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwYXJhbS50eXBlID09PSBcImJ5dGVzXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2VjY2FrMjU2KGhleGxpZnkodmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJhbS50eXBlID09PSBcImJvb2xcIiAmJiB0eXBlb2YgKHZhbHVlKSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSA/IFwiMHgwMVwiIDogXCIweDAwXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGFyYW0udHlwZS5tYXRjaCgvXnU/aW50LykpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvQmVIZXgodmFsdWUpOyAvLyBAVE9ETzogU2hvdWxkIHRoaXMgdG9Ud29zPz9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcmFtLnR5cGUubWF0Y2goL15ieXRlcy8pKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB6ZXJvUGFkQnl0ZXModmFsdWUsIDMyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcmFtLnR5cGUgPT09IFwiYWRkcmVzc1wiKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgYWRkcmVzc2VzIGFyZSB2YWxpZFxuICAgICAgICAgICAgICAgIHRoaXMuI2FiaUNvZGVyLmVuY29kZShbXCJhZGRyZXNzXCJdLCBbdmFsdWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB6ZXJvUGFkVmFsdWUoaGV4bGlmeSh2YWx1ZSksIDMyKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFsdWVzLmZvckVhY2goKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyYW0gPSBmcmFnbWVudC5pbnB1dHNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKCFwYXJhbS5pbmRleGVkKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQodmFsdWUgPT0gbnVsbCwgXCJjYW5ub3QgZmlsdGVyIG5vbi1pbmRleGVkIHBhcmFtZXRlcnM7IG11c3QgYmUgbnVsbFwiLCAoXCJjb250cmFjdC5cIiArIHBhcmFtLm5hbWUpLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0b3BpY3MucHVzaChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcmFtLmJhc2VUeXBlID09PSBcImFycmF5XCIgfHwgcGFyYW0uYmFzZVR5cGUgPT09IFwidHVwbGVcIikge1xuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcImZpbHRlcmluZyB3aXRoIHR1cGxlcyBvciBhcnJheXMgbm90IHN1cHBvcnRlZFwiLCAoXCJjb250cmFjdC5cIiArIHBhcmFtLm5hbWUpLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRvcGljcy5wdXNoKHZhbHVlLm1hcCgodmFsdWUpID0+IGVuY29kZVRvcGljKHBhcmFtLCB2YWx1ZSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvcGljcy5wdXNoKGVuY29kZVRvcGljKHBhcmFtLCB2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVHJpbSBvZmYgdHJhaWxpbmcgbnVsbHNcbiAgICAgICAgd2hpbGUgKHRvcGljcy5sZW5ndGggJiYgdG9waWNzW3RvcGljcy5sZW5ndGggLSAxXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdG9waWNzLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3BpY3M7XG4gICAgfVxuICAgIGVuY29kZUV2ZW50TG9nKGZyYWdtZW50LCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAoZnJhZ21lbnQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCBmID0gdGhpcy5nZXRFdmVudChmcmFnbWVudCk7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChmLCBcInVua25vd24gZXZlbnRcIiwgXCJldmVudEZyYWdtZW50XCIsIGZyYWdtZW50KTtcbiAgICAgICAgICAgIGZyYWdtZW50ID0gZjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b3BpY3MgPSBbXTtcbiAgICAgICAgY29uc3QgZGF0YVR5cGVzID0gW107XG4gICAgICAgIGNvbnN0IGRhdGFWYWx1ZXMgPSBbXTtcbiAgICAgICAgaWYgKCFmcmFnbWVudC5hbm9ueW1vdXMpIHtcbiAgICAgICAgICAgIHRvcGljcy5wdXNoKGZyYWdtZW50LnRvcGljSGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0QXJndW1lbnQodmFsdWVzLmxlbmd0aCA9PT0gZnJhZ21lbnQuaW5wdXRzLmxlbmd0aCwgXCJldmVudCBhcmd1bWVudHMvdmFsdWVzIG1pc21hdGNoXCIsIFwidmFsdWVzXCIsIHZhbHVlcyk7XG4gICAgICAgIGZyYWdtZW50LmlucHV0cy5mb3JFYWNoKChwYXJhbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChwYXJhbS5pbmRleGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtLnR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9waWNzLnB1c2goaWQodmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGFyYW0udHlwZSA9PT0gXCJieXRlc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcGljcy5wdXNoKGtlY2NhazI1Nih2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwYXJhbS5iYXNlVHlwZSA9PT0gXCJ0dXBsZVwiIHx8IHBhcmFtLmJhc2VUeXBlID09PSBcImFycmF5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQFRPRE9cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9waWNzLnB1c2godGhpcy4jYWJpQ29kZXIuZW5jb2RlKFtwYXJhbS50eXBlXSwgW3ZhbHVlXSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGFUeXBlcy5wdXNoKHBhcmFtKTtcbiAgICAgICAgICAgICAgICBkYXRhVmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuI2FiaUNvZGVyLmVuY29kZShkYXRhVHlwZXMsIGRhdGFWYWx1ZXMpLFxuICAgICAgICAgICAgdG9waWNzOiB0b3BpY3NcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gRGVjb2RlIGEgZmlsdGVyIGZvciB0aGUgZXZlbnQgYW5kIHRoZSBzZWFyY2ggY3JpdGVyaWFcbiAgICBkZWNvZGVFdmVudExvZyhmcmFnbWVudCwgZGF0YSwgdG9waWNzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKGZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgZiA9IHRoaXMuZ2V0RXZlbnQoZnJhZ21lbnQpO1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZiwgXCJ1bmtub3duIGV2ZW50XCIsIFwiZXZlbnRGcmFnbWVudFwiLCBmcmFnbWVudCk7XG4gICAgICAgICAgICBmcmFnbWVudCA9IGY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvcGljcyAhPSBudWxsICYmICFmcmFnbWVudC5hbm9ueW1vdXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50VG9waWMgPSBmcmFnbWVudC50b3BpY0hhc2g7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChpc0hleFN0cmluZyh0b3BpY3NbMF0sIDMyKSAmJiB0b3BpY3NbMF0udG9Mb3dlckNhc2UoKSA9PT0gZXZlbnRUb3BpYywgXCJmcmFnbWVudC90b3BpYyBtaXNtYXRjaFwiLCBcInRvcGljc1swXVwiLCB0b3BpY3NbMF0pO1xuICAgICAgICAgICAgdG9waWNzID0gdG9waWNzLnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGV4ZWQgPSBbXTtcbiAgICAgICAgY29uc3Qgbm9uSW5kZXhlZCA9IFtdO1xuICAgICAgICBjb25zdCBkeW5hbWljID0gW107XG4gICAgICAgIGZyYWdtZW50LmlucHV0cy5mb3JFYWNoKChwYXJhbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChwYXJhbS5pbmRleGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtLnR5cGUgPT09IFwic3RyaW5nXCIgfHwgcGFyYW0udHlwZSA9PT0gXCJieXRlc1wiIHx8IHBhcmFtLmJhc2VUeXBlID09PSBcInR1cGxlXCIgfHwgcGFyYW0uYmFzZVR5cGUgPT09IFwiYXJyYXlcIikge1xuICAgICAgICAgICAgICAgICAgICBpbmRleGVkLnB1c2goUGFyYW1UeXBlLmZyb20oeyB0eXBlOiBcImJ5dGVzMzJcIiwgbmFtZTogcGFyYW0ubmFtZSB9KSk7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWMucHVzaCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ZWQucHVzaChwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWMucHVzaChmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9uSW5kZXhlZC5wdXNoKHBhcmFtKTtcbiAgICAgICAgICAgICAgICBkeW5hbWljLnB1c2goZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0SW5kZXhlZCA9ICh0b3BpY3MgIT0gbnVsbCkgPyB0aGlzLiNhYmlDb2Rlci5kZWNvZGUoaW5kZXhlZCwgY29uY2F0KHRvcGljcykpIDogbnVsbDtcbiAgICAgICAgY29uc3QgcmVzdWx0Tm9uSW5kZXhlZCA9IHRoaXMuI2FiaUNvZGVyLmRlY29kZShub25JbmRleGVkLCBkYXRhLCB0cnVlKTtcbiAgICAgICAgLy9jb25zdCByZXN1bHQ6IChBcnJheTxhbnk+ICYgeyBbIGtleTogc3RyaW5nIF06IGFueSB9KSA9IFsgXTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICAgICAgbGV0IG5vbkluZGV4ZWRJbmRleCA9IDAsIGluZGV4ZWRJbmRleCA9IDA7XG4gICAgICAgIGZyYWdtZW50LmlucHV0cy5mb3JFYWNoKChwYXJhbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAocGFyYW0uaW5kZXhlZCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRJbmRleGVkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXcgSW5kZXhlZChudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZHluYW1pY1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXcgSW5kZXhlZChyZXN1bHRJbmRleGVkW2luZGV4ZWRJbmRleCsrXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSByZXN1bHRJbmRleGVkW2luZGV4ZWRJbmRleCsrXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdE5vbkluZGV4ZWRbbm9uSW5kZXhlZEluZGV4KytdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICBrZXlzLnB1c2gocGFyYW0ubmFtZSB8fCBudWxsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBSZXN1bHQuZnJvbUl0ZW1zKHZhbHVlcywga2V5cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBQYXJzZXMgYSB0cmFuc2FjdGlvbiwgZmluZGluZyB0aGUgbWF0Y2hpbmcgZnVuY3Rpb24gYW5kIGV4dHJhY3RzXG4gICAgICogIHRoZSBwYXJhbWV0ZXIgdmFsdWVzIGFsb25nIHdpdGggb3RoZXIgdXNlZnVsIGZ1bmN0aW9uIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiAgSWYgdGhlIG1hdGNoaW5nIGZ1bmN0aW9uIGNhbm5vdCBiZSBmb3VuZCwgcmV0dXJuIG51bGwuXG4gICAgICovXG4gICAgcGFyc2VUcmFuc2FjdGlvbih0eCkge1xuICAgICAgICBjb25zdCBkYXRhID0gZ2V0Qnl0ZXModHguZGF0YSwgXCJ0eC5kYXRhXCIpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGdldEJpZ0ludCgodHgudmFsdWUgIT0gbnVsbCkgPyB0eC52YWx1ZSA6IDAsIFwidHgudmFsdWVcIik7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gdGhpcy5nZXRGdW5jdGlvbihoZXhsaWZ5KGRhdGEuc2xpY2UoMCwgNCkpKTtcbiAgICAgICAgaWYgKCFmcmFnbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXJncyA9IHRoaXMuI2FiaUNvZGVyLmRlY29kZShmcmFnbWVudC5pbnB1dHMsIGRhdGEuc2xpY2UoNCkpO1xuICAgICAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uRGVzY3JpcHRpb24oZnJhZ21lbnQsIGZyYWdtZW50LnNlbGVjdG9yLCBhcmdzLCB2YWx1ZSk7XG4gICAgfVxuICAgIHBhcnNlQ2FsbFJlc3VsdChkYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkBUT0RPXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUGFyc2VzIGEgcmVjZWlwdCBsb2csIGZpbmRpbmcgdGhlIG1hdGNoaW5nIGV2ZW50IGFuZCBleHRyYWN0c1xuICAgICAqICB0aGUgcGFyYW1ldGVyIHZhbHVlcyBhbG9uZyB3aXRoIG90aGVyIHVzZWZ1bCBldmVudCBkZXRhaWxzLlxuICAgICAqXG4gICAgICogIElmIHRoZSBtYXRjaGluZyBldmVudCBjYW5ub3QgYmUgZm91bmQsIHJldHVybnMgbnVsbC5cbiAgICAgKi9cbiAgICBwYXJzZUxvZyhsb2cpIHtcbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzLmdldEV2ZW50KGxvZy50b3BpY3NbMF0pO1xuICAgICAgICBpZiAoIWZyYWdtZW50IHx8IGZyYWdtZW50LmFub255bW91cykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQFRPRE86IElmIGFub255bW91cywgYW5kIHRoZSBvbmx5IG1ldGhvZCwgYW5kIHRoZSBpbnB1dCBjb3VudCBtYXRjaGVzLCBzaG91bGQgd2UgcGFyc2U/XG4gICAgICAgIC8vICAgICAgICBQcm9iYWJseSBub3QsIGJlY2F1c2UganVzdCBiZWNhdXNlIGl0IGlzIHRoZSBvbmx5IGV2ZW50IGluIHRoZSBBQkkgZG9lc1xuICAgICAgICAvLyAgICAgICAgbm90IG1lYW4gd2UgaGF2ZSB0aGUgZnVsbCBBQkk7IG1heWJlIGp1c3QgYSBmcmFnbWVudD9cbiAgICAgICAgcmV0dXJuIG5ldyBMb2dEZXNjcmlwdGlvbihmcmFnbWVudCwgZnJhZ21lbnQudG9waWNIYXNoLCB0aGlzLmRlY29kZUV2ZW50TG9nKGZyYWdtZW50LCBsb2cuZGF0YSwgbG9nLnRvcGljcykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUGFyc2VzIGEgcmV2ZXJ0IGRhdGEsIGZpbmRpbmcgdGhlIG1hdGNoaW5nIGVycm9yIGFuZCBleHRyYWN0c1xuICAgICAqICB0aGUgcGFyYW1ldGVyIHZhbHVlcyBhbG9uZyB3aXRoIG90aGVyIHVzZWZ1bCBlcnJvciBkZXRhaWxzLlxuICAgICAqXG4gICAgICogIElmIHRoZSBtYXRjaGluZyBlcnJvciBjYW5ub3QgYmUgZm91bmQsIHJldHVybnMgbnVsbC5cbiAgICAgKi9cbiAgICBwYXJzZUVycm9yKGRhdGEpIHtcbiAgICAgICAgY29uc3QgaGV4RGF0YSA9IGhleGxpZnkoZGF0YSk7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gdGhpcy5nZXRFcnJvcihkYXRhU2xpY2UoaGV4RGF0YSwgMCwgNCkpO1xuICAgICAgICBpZiAoIWZyYWdtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhcmdzID0gdGhpcy4jYWJpQ29kZXIuZGVjb2RlKGZyYWdtZW50LmlucHV0cywgZGF0YVNsaWNlKGhleERhdGEsIDQpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvckRlc2NyaXB0aW9uKGZyYWdtZW50LCBmcmFnbWVudC5zZWxlY3RvciwgYXJncyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3IFtbSW50ZXJmYWNlXV0gZnJvbSB0aGUgQUJJICUldmFsdWUlJS5cbiAgICAgKlxuICAgICAqICBUaGUgJSV2YWx1ZSUlIG1heSBiZSBwcm92aWRlZCBhcyBhbiBleGlzdGluZyBbW0ludGVyZmFjZV1dIG9iamVjdCxcbiAgICAgKiAgYSBKU09OLWVuY29kZWQgQUJJIG9yIGFueSBIdW1hbi1SZWFkYWJsZSBBQkkgZm9ybWF0LlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tKHZhbHVlKSB7XG4gICAgICAgIC8vIEFscmVhZHkgYW4gSW50ZXJmYWNlLCB3aGljaCBpcyBpbW11dGFibGVcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSW50ZXJmYWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSlNPTlxuICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50ZXJmYWNlKEpTT04ucGFyc2UodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNYXliZSBhbiBpbnRlcmZhY2UgZnJvbSBhbiBvbGRlciB2ZXJzaW9uLCBvciBmcm9tIGEgc3ltbGlua2VkIGNvcHlcbiAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUuZm9ybWF0KSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEludGVyZmFjZSh2YWx1ZS5mb3JtYXQoXCJqc29uXCIpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBcnJheSBvZiBmcmFnbWVudHNcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRlcmZhY2UodmFsdWUpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVyZmFjZS5qcy5tYXAiLCIvL2ltcG9ydCB7IHJlc29sdmVBZGRyZXNzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2FkZHJlc3NcIjtcbmltcG9ydCB7IGRlZmluZVByb3BlcnRpZXMsIGdldEJpZ0ludCwgZ2V0TnVtYmVyLCBoZXhsaWZ5LCByZXNvbHZlUHJvcGVydGllcywgYXNzZXJ0LCBhc3NlcnRBcmd1bWVudCwgaXNFcnJvciwgbWFrZUVycm9yIH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBhY2Nlc3NMaXN0aWZ5IH0gZnJvbSBcIi4uL3RyYW5zYWN0aW9uL2luZGV4LmpzXCI7XG5jb25zdCBCTl8wID0gQmlnSW50KDApO1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGdldFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHRvSnNvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbn1cbi8vIEBUT0RPPyA8VCBleHRlbmRzIEZlZURhdGEgPSB7IH0+IGltcGxlbWVudHMgUmVxdWlyZWQ8VD5cbi8qKlxuICogIEEgKipGZWVEYXRhKiogd3JhcHMgYWxsIHRoZSBmZWUtcmVsYXRlZCB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoXG4gKiAgdGhlIG5ldHdvcmsuXG4gKi9cbmV4cG9ydCBjbGFzcyBGZWVEYXRhIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIGdhcyBwcmljZSBmb3IgbGVnYWN5IG5ldHdvcmtzLlxuICAgICAqL1xuICAgIGdhc1ByaWNlO1xuICAgIC8qKlxuICAgICAqICBUaGUgbWF4aW11bSBmZWUgdG8gcGF5IHBlciBnYXMuXG4gICAgICpcbiAgICAgKiAgVGhlIGJhc2UgZmVlIHBlciBnYXMgaXMgZGVmaW5lZCBieSB0aGUgbmV0d29yayBhbmQgYmFzZWQgb25cbiAgICAgKiAgY29uZ2VzdGlvbiwgaW5jcmVhc2luZyB0aGUgY29zdCBkdXJpbmcgdGltZXMgb2YgaGVhdnkgbG9hZFxuICAgICAqICBhbmQgbG93ZXJpbmcgd2hlbiBsZXNzIGJ1c3kuXG4gICAgICpcbiAgICAgKiAgVGhlIGFjdHVhbCBmZWUgcGVyIGdhcyB3aWxsIGJlIHRoZSBiYXNlIGZlZSBmb3IgdGhlIGJsb2NrXG4gICAgICogIGFuZCB0aGUgcHJpb3JpdHkgZmVlLCB1cCB0byB0aGUgbWF4IGZlZSBwZXIgZ2FzLlxuICAgICAqXG4gICAgICogIFRoaXMgd2lsbCBiZSBgYG51bGxgYCBvbiBsZWdhY3kgbmV0d29ya3MgKGkuZS4gW3ByZS1FSVAtMTU1OV0obGluay1laXAtMTU1OSkpXG4gICAgICovXG4gICAgbWF4RmVlUGVyR2FzO1xuICAgIC8qKlxuICAgICAqICBUaGUgYWRkaXRpb25hbCBhbW91dCB0byBwYXkgcGVyIGdhcyB0byBlbmNvdXJhZ2UgYSB2YWxpZGF0b3JcbiAgICAgKiAgdG8gaW5jbHVkZSB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICpcbiAgICAgKiAgVGhlIHB1cnBvc2Ugb2YgdGhpcyBpcyB0byBjb21wZW5zYXRlIHRoZSB2YWxpZGF0b3IgZm9yIHRoZVxuICAgICAqICBhZGp1c3RlZCByaXNrIGZvciBpbmNsdWRpbmcgYSBnaXZlbiB0cmFuc2FjdGlvbi5cbiAgICAgKlxuICAgICAqICBUaGlzIHdpbGwgYmUgYGBudWxsYGAgb24gbGVnYWN5IG5ldHdvcmtzIChpLmUuIFtwcmUtRUlQLTE1NTldKGxpbmstZWlwLTE1NTkpKVxuICAgICAqL1xuICAgIG1heFByaW9yaXR5RmVlUGVyR2FzO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3IEZlZURhdGEgZm9yICUlZ2FzUHJpY2UlJSwgJSVtYXhGZWVQZXJHYXMlJSBhbmRcbiAgICAgKiAgJSVtYXhQcmlvcml0eUZlZVBlckdhcyUlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGdhc1ByaWNlLCBtYXhGZWVQZXJHYXMsIG1heFByaW9yaXR5RmVlUGVyR2FzKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgZ2FzUHJpY2U6IGdldFZhbHVlKGdhc1ByaWNlKSxcbiAgICAgICAgICAgIG1heEZlZVBlckdhczogZ2V0VmFsdWUobWF4RmVlUGVyR2FzKSxcbiAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBnZXRWYWx1ZShtYXhQcmlvcml0eUZlZVBlckdhcylcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGEgSlNPTi1mcmllbmRseSB2YWx1ZS5cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IHsgZ2FzUHJpY2UsIG1heEZlZVBlckdhcywgbWF4UHJpb3JpdHlGZWVQZXJHYXMgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfdHlwZTogXCJGZWVEYXRhXCIsXG4gICAgICAgICAgICBnYXNQcmljZTogdG9Kc29uKGdhc1ByaWNlKSxcbiAgICAgICAgICAgIG1heEZlZVBlckdhczogdG9Kc29uKG1heEZlZVBlckdhcyksXG4gICAgICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhczogdG9Kc29uKG1heFByaW9yaXR5RmVlUGVyR2FzKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG47XG4vKipcbiAqICBSZXR1cm5zIGEgY29weSBvZiAlJXJlcSUlIHdpdGggYWxsIHByb3BlcnRpZXMgY29lcmNlZCB0byB0aGVpciBzdHJpY3RcbiAqICB0eXBlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHlSZXF1ZXN0KHJlcSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIC8vIFRoZXNlIGNvdWxkIGJlIGFkZHJlc3NlcywgRU5TIG5hbWVzIG9yIEFkZHJlc3NhYmxlc1xuICAgIGlmIChyZXEudG8pIHtcbiAgICAgICAgcmVzdWx0LnRvID0gcmVxLnRvO1xuICAgIH1cbiAgICBpZiAocmVxLmZyb20pIHtcbiAgICAgICAgcmVzdWx0LmZyb20gPSByZXEuZnJvbTtcbiAgICB9XG4gICAgaWYgKHJlcS5kYXRhKSB7XG4gICAgICAgIHJlc3VsdC5kYXRhID0gaGV4bGlmeShyZXEuZGF0YSk7XG4gICAgfVxuICAgIGNvbnN0IGJpZ0ludEtleXMgPSBcImNoYWluSWQsZ2FzTGltaXQsZ2FzUHJpY2UsbWF4RmVlUGVyR2FzLG1heFByaW9yaXR5RmVlUGVyR2FzLHZhbHVlXCIuc3BsaXQoLywvKTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBiaWdJbnRLZXlzKSB7XG4gICAgICAgIGlmICghKGtleSBpbiByZXEpIHx8IHJlcVtrZXldID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtrZXldID0gZ2V0QmlnSW50KHJlcVtrZXldLCBgcmVxdWVzdC4ke2tleX1gKTtcbiAgICB9XG4gICAgY29uc3QgbnVtYmVyS2V5cyA9IFwidHlwZSxub25jZVwiLnNwbGl0KC8sLyk7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgbnVtYmVyS2V5cykge1xuICAgICAgICBpZiAoIShrZXkgaW4gcmVxKSB8fCByZXFba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRba2V5XSA9IGdldE51bWJlcihyZXFba2V5XSwgYHJlcXVlc3QuJHtrZXl9YCk7XG4gICAgfVxuICAgIGlmIChyZXEuYWNjZXNzTGlzdCkge1xuICAgICAgICByZXN1bHQuYWNjZXNzTGlzdCA9IGFjY2Vzc0xpc3RpZnkocmVxLmFjY2Vzc0xpc3QpO1xuICAgIH1cbiAgICBpZiAoXCJibG9ja1RhZ1wiIGluIHJlcSkge1xuICAgICAgICByZXN1bHQuYmxvY2tUYWcgPSByZXEuYmxvY2tUYWc7XG4gICAgfVxuICAgIGlmIChcImVuYWJsZUNjaXBSZWFkXCIgaW4gcmVxKSB7XG4gICAgICAgIHJlc3VsdC5lbmFibGVDY2lwUmVhZCA9ICEhcmVxLmVuYWJsZUNjaXBSZWFkO1xuICAgIH1cbiAgICBpZiAoXCJjdXN0b21EYXRhXCIgaW4gcmVxKSB7XG4gICAgICAgIHJlc3VsdC5jdXN0b21EYXRhID0gcmVxLmN1c3RvbURhdGE7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqICBBICoqQmxvY2sqKiByZXByZXNlbnRzIHRoZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBhIGZ1bGwgYmxvY2sgb25cbiAqICBFdGhlcmV1bS5cbiAqL1xuZXhwb3J0IGNsYXNzIEJsb2NrIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIHByb3ZpZGVyIGNvbm5lY3RlZCB0byB0aGUgYmxvY2sgdXNlZCB0byBmZXRjaCBhZGRpdGlvbmFsIGRldGFpbHNcbiAgICAgKiAgaWYgbmVjZXNzYXJ5LlxuICAgICAqL1xuICAgIHByb3ZpZGVyO1xuICAgIC8qKlxuICAgICAqICBUaGUgYmxvY2sgbnVtYmVyLCBzb21ldGltZXMgY2FsbGVkIHRoZSBibG9jayBoZWlnaHQuIFRoaXMgaXMgYVxuICAgICAqICBzZXF1ZW50aWFsIG51bWJlciB0aGF0IGlzIG9uZSBoaWdoZXIgdGhhbiB0aGUgcGFyZW50IGJsb2NrLlxuICAgICAqL1xuICAgIG51bWJlcjtcbiAgICAvKipcbiAgICAgKiAgVGhlIGJsb2NrIGhhc2guXG4gICAgICpcbiAgICAgKiAgVGhpcyBoYXNoIGluY2x1ZGVzIGFsbCBwcm9wZXJ0aWVzLCBzbyBjYW4gYmUgc2FmZWx5IHVzZWQgdG8gaWRlbnRpZnlcbiAgICAgKiAgYW4gZXhhY3Qgc2V0IG9mIGJsb2NrIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgaGFzaDtcbiAgICAvKipcbiAgICAgKiAgVGhlIHRpbWVzdGFtcCBmb3IgdGhpcyBibG9jaywgd2hpY2ggaXMgdGhlIG51bWJlciBvZiBzZWNvbmRzIHNpbmNlXG4gICAgICogIGVwb2NoIHRoYXQgdGhpcyBibG9jayB3YXMgaW5jbHVkZWQuXG4gICAgICovXG4gICAgdGltZXN0YW1wO1xuICAgIC8qKlxuICAgICAqICBUaGUgYmxvY2sgaGFzaCBvZiB0aGUgcGFyZW50IGJsb2NrLlxuICAgICAqL1xuICAgIHBhcmVudEhhc2g7XG4gICAgLyoqXG4gICAgICogIFRoZSBoYXNoIHRyZWUgcm9vdCBvZiB0aGUgcGFyZW50IGJlYWNvbiBibG9jayBmb3IgdGhlIGdpdmVuXG4gICAgICogIGV4ZWN1dGlvbiBibG9jay4gU2VlIFtbbGluay1laXAtNDc4OF1dLlxuICAgICAqL1xuICAgIHBhcmVudEJlYWNvbkJsb2NrUm9vdDtcbiAgICAvKipcbiAgICAgKiAgVGhlIG5vbmNlLlxuICAgICAqXG4gICAgICogIE9uIGxlZ2FjeSBuZXR3b3JrcywgdGhpcyBpcyB0aGUgcmFuZG9tIG51bWJlciBpbnNlcnRlZCB3aGljaFxuICAgICAqICBwZXJtaXR0ZWQgdGhlIGRpZmZpY3VsdHkgdGFyZ2V0IHRvIGJlIHJlYWNoZWQuXG4gICAgICovXG4gICAgbm9uY2U7XG4gICAgLyoqXG4gICAgICogIFRoZSBkaWZmaWN1bHR5IHRhcmdldC5cbiAgICAgKlxuICAgICAqICBPbiBsZWdhY3kgbmV0d29ya3MsIHRoaXMgaXMgdGhlIHByb29mLW9mLXdvcmsgdGFyZ2V0IHJlcXVpcmVkXG4gICAgICogIGZvciBhIGJsb2NrIHRvIG1lZXQgdGhlIHByb3RvY29sIHJ1bGVzIHRvIGJlIGluY2x1ZGVkLlxuICAgICAqXG4gICAgICogIE9uIG1vZGVybiBuZXR3b3JrcywgdGhpcyBpcyBhIHJhbmRvbSBudW1iZXIgYXJyaXZlZCBhdCB1c2luZ1xuICAgICAqICByYW5kYW8uICBAVE9ETzogRmluZCBsaW5rcz9cbiAgICAgKi9cbiAgICBkaWZmaWN1bHR5O1xuICAgIC8qKlxuICAgICAqICBUaGUgdG90YWwgZ2FzIGxpbWl0IGZvciB0aGlzIGJsb2NrLlxuICAgICAqL1xuICAgIGdhc0xpbWl0O1xuICAgIC8qKlxuICAgICAqICBUaGUgdG90YWwgZ2FzIHVzZWQgaW4gdGhpcyBibG9jay5cbiAgICAgKi9cbiAgICBnYXNVc2VkO1xuICAgIC8qKlxuICAgICAqICBUaGUgcm9vdCBoYXNoIGZvciB0aGUgZ2xvYmFsIHN0YXRlIGFmdGVyIGFwcGx5aW5nIGNoYW5nZXNcbiAgICAgKiAgaW4gdGhpcyBibG9jay5cbiAgICAgKi9cbiAgICBzdGF0ZVJvb3Q7XG4gICAgLyoqXG4gICAgICogIFRoZSBoYXNoIG9mIHRoZSB0cmFuc2FjdGlvbiByZWNlaXB0cyB0cmllLlxuICAgICAqL1xuICAgIHJlY2VpcHRzUm9vdDtcbiAgICAvKipcbiAgICAgKiAgVGhlIHRvdGFsIGFtb3VudCBvZiBibG9iIGdhcyBjb25zdW1lZCBieSB0aGUgdHJhbnNhY3Rpb25zXG4gICAgICogIHdpdGhpbiB0aGUgYmxvY2suIFNlZSBbW2xpbmstZWlwLTQ4NDRdXS5cbiAgICAgKi9cbiAgICBibG9iR2FzVXNlZDtcbiAgICAvKipcbiAgICAgKiAgVGhlIHJ1bm5pbmcgdG90YWwgb2YgYmxvYiBnYXMgY29uc3VtZWQgaW4gZXhjZXNzIG9mIHRoZVxuICAgICAqICB0YXJnZXQsIHByaW9yIHRvIHRoZSBibG9jay4gU2VlIFtbbGluay1laXAtNDg0NF1dLlxuICAgICAqL1xuICAgIGV4Y2Vzc0Jsb2JHYXM7XG4gICAgLyoqXG4gICAgICogIFRoZSBtaW5lciBjb2luYmFzZSBhZGRyZXNzLCB3aWhjaCByZWNlaXZlcyBhbnkgc3Vic2lkaWVzIGZvclxuICAgICAqICBpbmNsdWRpbmcgdGhpcyBibG9jay5cbiAgICAgKi9cbiAgICBtaW5lcjtcbiAgICAvKipcbiAgICAgKiAgQW55IGV4dHJhIGRhdGEgdGhlIHZhbGlkYXRvciB3aXNoZWQgdG8gaW5jbHVkZS5cbiAgICAgKi9cbiAgICBleHRyYURhdGE7XG4gICAgLyoqXG4gICAgICogIFRoZSBiYXNlIGZlZSBwZXIgZ2FzIHRoYXQgYWxsIHRyYW5zYWN0aW9ucyBpbiB0aGlzIGJsb2NrIHdlcmVcbiAgICAgKiAgY2hhcmdlZC5cbiAgICAgKlxuICAgICAqICBUaGlzIGFkanVzdHMgYWZ0ZXIgZWFjaCBibG9jaywgZGVwZW5kaW5nIG9uIGhvdyBjb25nZXN0ZWQgdGhlIG5ldHdvcmtcbiAgICAgKiAgaXMuXG4gICAgICovXG4gICAgYmFzZUZlZVBlckdhcztcbiAgICAjdHJhbnNhY3Rpb25zO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGUgYSBuZXcgKipCbG9jayoqIG9iamVjdC5cbiAgICAgKlxuICAgICAqICBUaGlzIHNob3VsZCBnZW5lcmFsbHkgbm90IGJlIG5lY2Vzc2FyeSBhcyB0aGUgdW5sZXNzIGltcGxlbWVudGluZyBhXG4gICAgICogIGxvdy1sZXZlbCBsaWJyYXJ5LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGJsb2NrLCBwcm92aWRlcikge1xuICAgICAgICB0aGlzLiN0cmFuc2FjdGlvbnMgPSBibG9jay50cmFuc2FjdGlvbnMubWFwKCh0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAodHgpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvblJlc3BvbnNlKHR4LCBwcm92aWRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHg7XG4gICAgICAgIH0pO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgICAgIHByb3ZpZGVyLFxuICAgICAgICAgICAgaGFzaDogZ2V0VmFsdWUoYmxvY2suaGFzaCksXG4gICAgICAgICAgICBudW1iZXI6IGJsb2NrLm51bWJlcixcbiAgICAgICAgICAgIHRpbWVzdGFtcDogYmxvY2sudGltZXN0YW1wLFxuICAgICAgICAgICAgcGFyZW50SGFzaDogYmxvY2sucGFyZW50SGFzaCxcbiAgICAgICAgICAgIHBhcmVudEJlYWNvbkJsb2NrUm9vdDogYmxvY2sucGFyZW50QmVhY29uQmxvY2tSb290LFxuICAgICAgICAgICAgbm9uY2U6IGJsb2NrLm5vbmNlLFxuICAgICAgICAgICAgZGlmZmljdWx0eTogYmxvY2suZGlmZmljdWx0eSxcbiAgICAgICAgICAgIGdhc0xpbWl0OiBibG9jay5nYXNMaW1pdCxcbiAgICAgICAgICAgIGdhc1VzZWQ6IGJsb2NrLmdhc1VzZWQsXG4gICAgICAgICAgICBibG9iR2FzVXNlZDogYmxvY2suYmxvYkdhc1VzZWQsXG4gICAgICAgICAgICBleGNlc3NCbG9iR2FzOiBibG9jay5leGNlc3NCbG9iR2FzLFxuICAgICAgICAgICAgbWluZXI6IGJsb2NrLm1pbmVyLFxuICAgICAgICAgICAgZXh0cmFEYXRhOiBibG9jay5leHRyYURhdGEsXG4gICAgICAgICAgICBiYXNlRmVlUGVyR2FzOiBnZXRWYWx1ZShibG9jay5iYXNlRmVlUGVyR2FzKSxcbiAgICAgICAgICAgIHN0YXRlUm9vdDogYmxvY2suc3RhdGVSb290LFxuICAgICAgICAgICAgcmVjZWlwdHNSb290OiBibG9jay5yZWNlaXB0c1Jvb3QsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0aGUgbGlzdCBvZiB0cmFuc2FjdGlvbiBoYXNoZXMsIGluIHRoZSBvcmRlclxuICAgICAqICB0aGV5IHdlcmUgZXhlY3V0ZWQgd2l0aGluIHRoZSBibG9jay5cbiAgICAgKi9cbiAgICBnZXQgdHJhbnNhY3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jdHJhbnNhY3Rpb25zLm1hcCgodHgpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKHR4KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0eC5oYXNoO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIGNvbXBsZXRlIHRyYW5zYWN0aW9ucywgaW4gdGhlIG9yZGVyIHRoZXlcbiAgICAgKiAgd2VyZSBleGVjdXRlZCB3aXRoaW4gdGhlIGJsb2NrLlxuICAgICAqXG4gICAgICogIFRoaXMgaXMgb25seSBhdmFpbGFibGUgZm9yIGJsb2NrcyB3aGljaCBwcmVmZXRjaGVkXG4gICAgICogIHRyYW5zYWN0aW9ucywgYnkgcGFzc2luZyBgYHRydWVgYCB0byAlJXByZWZldGNoVHhzJSVcbiAgICAgKiAgaW50byBbW1Byb3ZpZGVyLWdldEJsb2NrXV0uXG4gICAgICovXG4gICAgZ2V0IHByZWZldGNoZWRUcmFuc2FjdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHR4cyA9IHRoaXMuI3RyYW5zYWN0aW9ucy5zbGljZSgpO1xuICAgICAgICAvLyBEb2Vzbid0IG1hdHRlci4uLlxuICAgICAgICBpZiAodHhzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBwcmVmZXRjaGVkIHRoZSB0cmFuc2FjdGlvbnNcbiAgICAgICAgYXNzZXJ0KHR5cGVvZiAodHhzWzBdKSA9PT0gXCJvYmplY3RcIiwgXCJ0cmFuc2FjdGlvbnMgd2VyZSBub3QgcHJlZmV0Y2hlZCB3aXRoIGJsb2NrIHJlcXVlc3RcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcInRyYW5zYWN0aW9uUmVzcG9uc2VzKClcIlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHR4cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYSBKU09OLWZyaWVuZGx5IHZhbHVlLlxuICAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QgeyBiYXNlRmVlUGVyR2FzLCBkaWZmaWN1bHR5LCBleHRyYURhdGEsIGdhc0xpbWl0LCBnYXNVc2VkLCBoYXNoLCBtaW5lciwgbm9uY2UsIG51bWJlciwgcGFyZW50SGFzaCwgcGFyZW50QmVhY29uQmxvY2tSb290LCBzdGF0ZVJvb3QsIHJlY2VpcHRzUm9vdCwgdGltZXN0YW1wLCB0cmFuc2FjdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfdHlwZTogXCJCbG9ja1wiLFxuICAgICAgICAgICAgYmFzZUZlZVBlckdhczogdG9Kc29uKGJhc2VGZWVQZXJHYXMpLFxuICAgICAgICAgICAgZGlmZmljdWx0eTogdG9Kc29uKGRpZmZpY3VsdHkpLFxuICAgICAgICAgICAgZXh0cmFEYXRhLFxuICAgICAgICAgICAgZ2FzTGltaXQ6IHRvSnNvbihnYXNMaW1pdCksXG4gICAgICAgICAgICBnYXNVc2VkOiB0b0pzb24oZ2FzVXNlZCksXG4gICAgICAgICAgICBibG9iR2FzVXNlZDogdG9Kc29uKHRoaXMuYmxvYkdhc1VzZWQpLFxuICAgICAgICAgICAgZXhjZXNzQmxvYkdhczogdG9Kc29uKHRoaXMuZXhjZXNzQmxvYkdhcyksXG4gICAgICAgICAgICBoYXNoLCBtaW5lciwgbm9uY2UsIG51bWJlciwgcGFyZW50SGFzaCwgdGltZXN0YW1wLFxuICAgICAgICAgICAgcGFyZW50QmVhY29uQmxvY2tSb290LCBzdGF0ZVJvb3QsIHJlY2VpcHRzUm9vdCxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9ucyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGNvbnN0IHR4cyA9IHRoaXMudHJhbnNhY3Rpb25zO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHhzW2luZGV4KytdLCBkb25lOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBpbiB0aGlzIGJsb2NrLlxuICAgICAqL1xuICAgIGdldCBsZW5ndGgoKSB7IHJldHVybiB0aGlzLiN0cmFuc2FjdGlvbnMubGVuZ3RoOyB9XG4gICAgLyoqXG4gICAgICogIFRoZSBbW2xpbmstanMtZGF0ZV1dIHRoaXMgYmxvY2sgd2FzIGluY2x1ZGVkIGF0LlxuICAgICAqL1xuICAgIGdldCBkYXRlKCkge1xuICAgICAgICBpZiAodGhpcy50aW1lc3RhbXAgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudGltZXN0YW1wICogMTAwMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBHZXQgdGhlIHRyYW5zYWN0aW9uIGF0ICUlaW5kZXhlJSUgd2l0aGluIHRoaXMgYmxvY2suXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VHJhbnNhY3Rpb24oaW5kZXhPckhhc2gpIHtcbiAgICAgICAgLy8gRmluZCB0aGUgaW50ZXJuYWwgdmFsdWUgYnkgaXRzIGluZGV4IG9yIGhhc2hcbiAgICAgICAgbGV0IHR4ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodHlwZW9mIChpbmRleE9ySGFzaCkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHR4ID0gdGhpcy4jdHJhbnNhY3Rpb25zW2luZGV4T3JIYXNoXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSBpbmRleE9ySGFzaC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB2IG9mIHRoaXMuI3RyYW5zYWN0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHYpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ICE9PSBoYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0eCA9IHY7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHYuaGFzaCA9PT0gaGFzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHggPSB2O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4ID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vIHN1Y2ggdHhcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAodHgpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gKGF3YWl0IHRoaXMucHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb24odHgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0eDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiAgSWYgYSAqKkJsb2NrKiogd2FzIGZldGNoZWQgd2l0aCBhIHJlcXVlc3QgdG8gaW5jbHVkZSB0aGUgdHJhbnNhY3Rpb25zXG4gICAgICogIHRoaXMgd2lsbCBhbGxvdyBzeW5jaHJvbm91cyBhY2Nlc3MgdG8gdGhvc2UgdHJhbnNhY3Rpb25zLlxuICAgICAqXG4gICAgICogIElmIHRoZSB0cmFuc2FjdGlvbnMgd2VyZSBub3QgcHJlZmV0Y2hlZCwgdGhpcyB3aWxsIHRocm93LlxuICAgICAqL1xuICAgIGdldFByZWZldGNoZWRUcmFuc2FjdGlvbihpbmRleE9ySGFzaCkge1xuICAgICAgICBjb25zdCB0eHMgPSB0aGlzLnByZWZldGNoZWRUcmFuc2FjdGlvbnM7XG4gICAgICAgIGlmICh0eXBlb2YgKGluZGV4T3JIYXNoKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIHR4c1tpbmRleE9ySGFzaF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXhPckhhc2ggPSBpbmRleE9ySGFzaC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBmb3IgKGNvbnN0IHR4IG9mIHR4cykge1xuICAgICAgICAgICAgaWYgKHR4Lmhhc2ggPT09IGluZGV4T3JIYXNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcIm5vIG1hdGNoaW5nIHRyYW5zYWN0aW9uXCIsIFwiaW5kZXhPckhhc2hcIiwgaW5kZXhPckhhc2gpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0cnVlIGlmIHRoaXMgYmxvY2sgYmVlbiBtaW5lZC4gVGhpcyBwcm92aWRlcyBhIHR5cGUgZ3VhcmRcbiAgICAgKiAgZm9yIGFsbCBwcm9wZXJ0aWVzIG9uIGEgW1tNaW5lZEJsb2NrXV0uXG4gICAgICovXG4gICAgaXNNaW5lZCgpIHsgcmV0dXJuICEhdGhpcy5oYXNoOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGJsb2NrIGlzIGFuIFtbbGluay1laXAtMjkzMF1dIGJsb2NrLlxuICAgICAqL1xuICAgIGlzTG9uZG9uKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmJhc2VGZWVQZXJHYXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBAX2lnbm9yZTpcbiAgICAgKi9cbiAgICBvcnBoYW5lZEV2ZW50KCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNNaW5lZCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZU9ycGhhbmVkQmxvY2tGaWx0ZXIodGhpcyk7XG4gICAgfVxufVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gTG9nXG4vKipcbiAqICBBICoqTG9nKiogaW4gRXRoZXJldW0gcmVwcmVzZW50cyBhbiBldmVudCB0aGF0IGhhcyBiZWVuIGluY2x1ZGVkIGluIGFcbiAqICB0cmFuc2FjdGlvbiB1c2luZyB0aGUgYGBMT0cqYGAgb3Bjb2Rlcywgd2hpY2ggYXJlIG1vc3QgY29tbW9ubHkgdXNlZCBieVxuICogIFNvbGlkaXR5J3MgZW1pdCBmb3IgYW5ub3VuY2luZyBldmVudHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2cge1xuICAgIC8qKlxuICAgICAqICBUaGUgcHJvdmlkZXIgY29ubmVjdGVkIHRvIHRoZSBsb2cgdXNlZCB0byBmZXRjaCBhZGRpdGlvbmFsIGRldGFpbHNcbiAgICAgKiAgaWYgbmVjZXNzYXJ5LlxuICAgICAqL1xuICAgIHByb3ZpZGVyO1xuICAgIC8qKlxuICAgICAqICBUaGUgdHJhbnNhY3Rpb24gaGFzaCBvZiB0aGUgdHJhbnNhY3Rpb24gdGhpcyBsb2cgb2NjdXJyZWQgaW4uIFVzZSB0aGVcbiAgICAgKiAgW1tMb2ctZ2V0VHJhbnNhY3Rpb25dXSB0byBnZXQgdGhlIFtbVHJhbnNhY3Rpb25SZXNwb25zZV1dLlxuICAgICAqL1xuICAgIHRyYW5zYWN0aW9uSGFzaDtcbiAgICAvKipcbiAgICAgKiAgVGhlIGJsb2NrIGhhc2ggb2YgdGhlIGJsb2NrIHRoaXMgbG9nIG9jY3VycmVkIGluLiBVc2UgdGhlXG4gICAgICogIFtbTG9nLWdldEJsb2NrXV0gdG8gZ2V0IHRoZSBbW0Jsb2NrXV0uXG4gICAgICovXG4gICAgYmxvY2tIYXNoO1xuICAgIC8qKlxuICAgICAqICBUaGUgYmxvY2sgbnVtYmVyIG9mIHRoZSBibG9jayB0aGlzIGxvZyBvY2N1cnJlZCBpbi4gSXQgaXMgcHJlZmVycmVkXG4gICAgICogIHRvIHVzZSB0aGUgW1tCbG9jay1oYXNoXV0gd2hlbiBmZXRjaGluZyB0aGUgcmVsYXRlZCBbW0Jsb2NrXV0sXG4gICAgICogIHNpbmNlIGluIHRoZSBjYXNlIG9mIGFuIG9ycGhhbmVkIGJsb2NrLCB0aGUgYmxvY2sgYXQgdGhhdCBoZWlnaHQgbWF5XG4gICAgICogIGhhdmUgY2hhbmdlZC5cbiAgICAgKi9cbiAgICBibG9ja051bWJlcjtcbiAgICAvKipcbiAgICAgKiAgSWYgdGhlICoqTG9nKiogcmVwcmVzZW50cyBhIGJsb2NrIHRoYXQgd2FzIHJlbW92ZWQgZHVlIHRvIGFuIG9ycGhhbmVkXG4gICAgICogIGJsb2NrLCB0aGlzIHdpbGwgYmUgdHJ1ZS5cbiAgICAgKlxuICAgICAqICBUaGlzIGNhbiBvbmx5IGhhcHBlbiB3aXRoaW4gYW4gb3JwaGFuIGV2ZW50IGxpc3RlbmVyLlxuICAgICAqL1xuICAgIHJlbW92ZWQ7XG4gICAgLyoqXG4gICAgICogIFRoZSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCB0aGF0IGVtaXR0ZWQgdGhpcyBsb2cuXG4gICAgICovXG4gICAgYWRkcmVzcztcbiAgICAvKipcbiAgICAgKiAgVGhlIGRhdGEgaW5jbHVkZWQgaW4gdGhpcyBsb2cgd2hlbiBpdCB3YXMgZW1pdHRlZC5cbiAgICAgKi9cbiAgICBkYXRhO1xuICAgIC8qKlxuICAgICAqICBUaGUgaW5kZXhlZCB0b3BpY3MgaW5jbHVkZWQgaW4gdGhpcyBsb2cgd2hlbiBpdCB3YXMgZW1pdHRlZC5cbiAgICAgKlxuICAgICAqICBBbGwgdG9waWNzIGFyZSBpbmNsdWRlZCBpbiB0aGUgYmxvb20gZmlsdGVycywgc28gdGhleSBjYW4gYmVcbiAgICAgKiAgZWZmaWNpZW50bHkgZmlsdGVyZWQgdXNpbmcgdGhlIFtbUHJvdmlkZXItZ2V0TG9nc11dIG1ldGhvZC5cbiAgICAgKi9cbiAgICB0b3BpY3M7XG4gICAgLyoqXG4gICAgICogIFRoZSBpbmRleCB3aXRoaW4gdGhlIGJsb2NrIHRoaXMgbG9nIG9jY3VycmVkIGF0LiBUaGlzIGlzIGdlbmVyYWxseVxuICAgICAqICBub3QgdXNlZnVsIHRvIGRldmVsb3BlcnMsIGJ1dCBjYW4gYmUgdXNlZCB3aXRoIHRoZSB2YXJpb3VzIHJvb3RzXG4gICAgICogIHRvIHByb29mIGluY2x1c2lvbiB3aXRoaW4gYSBibG9jay5cbiAgICAgKi9cbiAgICBpbmRleDtcbiAgICAvKipcbiAgICAgKiAgVGhlIGluZGV4IHdpdGhpbiB0aGUgdHJhbnNhY3Rpb24gb2YgdGhpcyBsb2cuXG4gICAgICovXG4gICAgdHJhbnNhY3Rpb25JbmRleDtcbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgY29uc3RydWN0b3IobG9nLCBwcm92aWRlcikge1xuICAgICAgICB0aGlzLnByb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgICAgIGNvbnN0IHRvcGljcyA9IE9iamVjdC5mcmVlemUobG9nLnRvcGljcy5zbGljZSgpKTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2g6IGxvZy50cmFuc2FjdGlvbkhhc2gsXG4gICAgICAgICAgICBibG9ja0hhc2g6IGxvZy5ibG9ja0hhc2gsXG4gICAgICAgICAgICBibG9ja051bWJlcjogbG9nLmJsb2NrTnVtYmVyLFxuICAgICAgICAgICAgcmVtb3ZlZDogbG9nLnJlbW92ZWQsXG4gICAgICAgICAgICBhZGRyZXNzOiBsb2cuYWRkcmVzcyxcbiAgICAgICAgICAgIGRhdGE6IGxvZy5kYXRhLFxuICAgICAgICAgICAgdG9waWNzLFxuICAgICAgICAgICAgaW5kZXg6IGxvZy5pbmRleCxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uSW5kZXg6IGxvZy50cmFuc2FjdGlvbkluZGV4LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYSBKU09OLWNvbXBhdGlibGUgb2JqZWN0LlxuICAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QgeyBhZGRyZXNzLCBibG9ja0hhc2gsIGJsb2NrTnVtYmVyLCBkYXRhLCBpbmRleCwgcmVtb3ZlZCwgdG9waWNzLCB0cmFuc2FjdGlvbkhhc2gsIHRyYW5zYWN0aW9uSW5kZXggfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfdHlwZTogXCJsb2dcIixcbiAgICAgICAgICAgIGFkZHJlc3MsIGJsb2NrSGFzaCwgYmxvY2tOdW1iZXIsIGRhdGEsIGluZGV4LFxuICAgICAgICAgICAgcmVtb3ZlZCwgdG9waWNzLCB0cmFuc2FjdGlvbkhhc2gsIHRyYW5zYWN0aW9uSW5kZXhcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIGJsb2NrIHRoYXQgdGhpcyBsb2cgb2NjdXJyZWQgaW4uXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QmxvY2soKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gYXdhaXQgdGhpcy5wcm92aWRlci5nZXRCbG9jayh0aGlzLmJsb2NrSGFzaCk7XG4gICAgICAgIGFzc2VydCghIWJsb2NrLCBcImZhaWxlZCB0byBmaW5kIHRyYW5zYWN0aW9uXCIsIFwiVU5LTk9XTl9FUlJPUlwiLCB7fSk7XG4gICAgICAgIHJldHVybiBibG9jaztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIHRyYW5zYWN0aW9uIHRoYXQgdGhpcyBsb2cgb2NjdXJyZWQgaW4uXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VHJhbnNhY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHR4ID0gYXdhaXQgdGhpcy5wcm92aWRlci5nZXRUcmFuc2FjdGlvbih0aGlzLnRyYW5zYWN0aW9uSGFzaCk7XG4gICAgICAgIGFzc2VydCghIXR4LCBcImZhaWxlZCB0byBmaW5kIHRyYW5zYWN0aW9uXCIsIFwiVU5LTk9XTl9FUlJPUlwiLCB7fSk7XG4gICAgICAgIHJldHVybiB0eDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIHRyYW5zYWN0aW9uIHJlY2VpcHQgZm90IHRoZSB0cmFuc2FjdGlvbiB0aGF0IHRoaXNcbiAgICAgKiAgbG9nIG9jY3VycmVkIGluLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRyYW5zYWN0aW9uUmVjZWlwdCgpIHtcbiAgICAgICAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHRoaXMucHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KHRoaXMudHJhbnNhY3Rpb25IYXNoKTtcbiAgICAgICAgYXNzZXJ0KCEhcmVjZWlwdCwgXCJmYWlsZWQgdG8gZmluZCB0cmFuc2FjdGlvbiByZWNlaXB0XCIsIFwiVU5LTk9XTl9FUlJPUlwiLCB7fSk7XG4gICAgICAgIHJldHVybiByZWNlaXB0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgcmVtb3ZlZEV2ZW50KCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlUmVtb3ZlZExvZ0ZpbHRlcih0aGlzKTtcbiAgICB9XG59XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBUcmFuc2FjdGlvbiBSZWNlaXB0XG4vKlxuZXhwb3J0IGludGVyZmFjZSBMZWdhY3lUcmFuc2FjdGlvblJlY2VpcHQge1xuICAgIGJ5emFudGl1bTogZmFsc2U7XG4gICAgc3RhdHVzOiBudWxsO1xuICAgIHJvb3Q6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCeXphbnRpdW1UcmFuc2FjdGlvblJlY2VpcHQge1xuICAgIGJ5emFudGl1bTogdHJ1ZTtcbiAgICBzdGF0dXM6IG51bWJlcjtcbiAgICByb290OiBudWxsO1xufVxuKi9cbi8qKlxuICogIEEgKipUcmFuc2FjdGlvblJlY2VpcHQqKiBpbmNsdWRlcyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IGFcbiAqICB0cmFuc2FjdGlvbiB0aGF0IGlzIG9ubHkgYXZhaWxhYmxlIGFmdGVyIGl0IGhhcyBiZWVuIG1pbmVkLlxuICovXG5leHBvcnQgY2xhc3MgVHJhbnNhY3Rpb25SZWNlaXB0IHtcbiAgICAvKipcbiAgICAgKiAgVGhlIHByb3ZpZGVyIGNvbm5lY3RlZCB0byB0aGUgbG9nIHVzZWQgdG8gZmV0Y2ggYWRkaXRpb25hbCBkZXRhaWxzXG4gICAgICogIGlmIG5lY2Vzc2FyeS5cbiAgICAgKi9cbiAgICBwcm92aWRlcjtcbiAgICAvKipcbiAgICAgKiAgVGhlIGFkZHJlc3MgdGhlIHRyYW5zYWN0aW9uIHdhcyBzZW50IHRvLlxuICAgICAqL1xuICAgIHRvO1xuICAgIC8qKlxuICAgICAqICBUaGUgc2VuZGVyIG9mIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgKi9cbiAgICBmcm9tO1xuICAgIC8qKlxuICAgICAqICBUaGUgYWRkcmVzcyBvZiB0aGUgY29udHJhY3QgaWYgdGhlIHRyYW5zYWN0aW9uIHdhcyBkaXJlY3RseVxuICAgICAqICByZXNwb25zaWJsZSBmb3IgZGVwbG95aW5nIG9uZS5cbiAgICAgKlxuICAgICAqICBUaGlzIGlzIG5vbi1udWxsICoqb25seSoqIGlmIHRoZSBgYHRvYGAgaXMgZW1wdHkgYW5kIHRoZSBgYGRhdGFgYFxuICAgICAqICB3YXMgc3VjY2Vzc2Z1bGx5IGV4ZWN1dGVkIGFzIGluaXRjb2RlLlxuICAgICAqL1xuICAgIGNvbnRyYWN0QWRkcmVzcztcbiAgICAvKipcbiAgICAgKiAgVGhlIHRyYW5zYWN0aW9uIGhhc2guXG4gICAgICovXG4gICAgaGFzaDtcbiAgICAvKipcbiAgICAgKiAgVGhlIGluZGV4IG9mIHRoaXMgdHJhbnNhY3Rpb24gd2l0aGluIHRoZSBibG9jayB0cmFuc2FjdGlvbnMuXG4gICAgICovXG4gICAgaW5kZXg7XG4gICAgLyoqXG4gICAgICogIFRoZSBibG9jayBoYXNoIG9mIHRoZSBbW0Jsb2NrXV0gdGhpcyB0cmFuc2FjdGlvbiB3YXMgaW5jbHVkZWQgaW4uXG4gICAgICovXG4gICAgYmxvY2tIYXNoO1xuICAgIC8qKlxuICAgICAqICBUaGUgYmxvY2sgbnVtYmVyIG9mIHRoZSBbW0Jsb2NrXV0gdGhpcyB0cmFuc2FjdGlvbiB3YXMgaW5jbHVkZWQgaW4uXG4gICAgICovXG4gICAgYmxvY2tOdW1iZXI7XG4gICAgLyoqXG4gICAgICogIFRoZSBibG9vbSBmaWx0ZXIgYnl0ZXMgdGhhdCByZXByZXNlbnQgYWxsIGxvZ3MgdGhhdCBvY2N1cnJlZCB3aXRoaW5cbiAgICAgKiAgdGhpcyB0cmFuc2FjdGlvbi4gVGhpcyBpcyBnZW5lcmFsbHkgbm90IHVzZWZ1bCBmb3IgbW9zdCBkZXZlbG9wZXJzLFxuICAgICAqICBidXQgY2FuIGJlIHVzZWQgdG8gdmFsaWRhdGUgdGhlIGluY2x1ZGVkIGxvZ3MuXG4gICAgICovXG4gICAgbG9nc0Jsb29tO1xuICAgIC8qKlxuICAgICAqICBUaGUgYWN0dWFsIGFtb3VudCBvZiBnYXMgdXNlZCBieSB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogIFdoZW4gY3JlYXRpbmcgYSB0cmFuc2FjdGlvbiwgdGhlIGFtb3VudCBvZiBnYXMgdGhhdCB3aWxsIGJlIHVzZWQgY2FuXG4gICAgICogIG9ubHkgYmUgYXBwcm94aW1hdGVkLCBidXQgdGhlIHNlbmRlciBtdXN0IHBheSB0aGUgZ2FzIGZlZSBmb3IgdGhlXG4gICAgICogIGVudGlyZSBnYXMgbGltaXQuIEFmdGVyIHRoZSB0cmFuc2FjdGlvbiwgdGhlIGRpZmZlcmVuY2UgaXMgcmVmdW5kZWQuXG4gICAgICovXG4gICAgZ2FzVXNlZDtcbiAgICAvKipcbiAgICAgKiAgVGhlIGdhcyB1c2VkIGZvciBCTE9icy4gU2VlIFtbbGluay1laXAtNDg0NF1dLlxuICAgICAqL1xuICAgIGJsb2JHYXNVc2VkO1xuICAgIC8qKlxuICAgICAqICBUaGUgYW1vdW50IG9mIGdhcyB1c2VkIGJ5IGFsbCB0cmFuc2FjdGlvbnMgd2l0aGluIHRoZSBibG9jayBmb3IgdGhpc1xuICAgICAqICBhbmQgYWxsIHRyYW5zYWN0aW9ucyB3aXRoIGEgbG93ZXIgYGBpbmRleGBgLlxuICAgICAqXG4gICAgICogIFRoaXMgaXMgZ2VuZXJhbGx5IG5vdCB1c2VmdWwgZm9yIGRldmVsb3BlcnMgYnV0IGNhbiBiZSB1c2VkIHRvXG4gICAgICogIHZhbGlkYXRlIGNlcnRhaW4gYXNwZWN0cyBvZiBleGVjdXRpb24uXG4gICAgICovXG4gICAgY3VtdWxhdGl2ZUdhc1VzZWQ7XG4gICAgLyoqXG4gICAgICogIFRoZSBhY3R1YWwgZ2FzIHByaWNlIHVzZWQgZHVyaW5nIGV4ZWN1dGlvbi5cbiAgICAgKlxuICAgICAqICBEdWUgdG8gdGhlIGNvbXBsZXhpdHkgb2YgW1tsaW5rLWVpcC0xNTU5XV0gdGhpcyB2YWx1ZSBjYW4gb25seVxuICAgICAqICBiZSBjYWx1Y2xhdGVkIGFmdGVyIHRoZSB0cmFuc2FjdGlvbiBoYXMgYmVlbiBtaW5lZCwgc25jZSB0aGUgYmFzZVxuICAgICAqICBmZWUgaXMgcHJvdG9jb2wtZW5mb3JjZWQuXG4gICAgICovXG4gICAgZ2FzUHJpY2U7XG4gICAgLyoqXG4gICAgICogIFRoZSBwcmljZSBwYWlkIHBlciBCTE9CIGluIGdhcy4gU2VlIFtbbGluay1laXAtNDg0NF1dLlxuICAgICAqL1xuICAgIGJsb2JHYXNQcmljZTtcbiAgICAvKipcbiAgICAgKiAgVGhlIFtbbGluay1laXAtMjcxOF1dIHRyYW5zYWN0aW9uIHR5cGUuXG4gICAgICovXG4gICAgdHlwZTtcbiAgICAvL3JlYWRvbmx5IGJ5emFudGl1bSE6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogIFRoZSBzdGF0dXMgb2YgdGhpcyB0cmFuc2FjdGlvbiwgaW5kaWNhdGluZyBzdWNjZXNzIChpLmUuIGBgMWBgKSBvclxuICAgICAqICBhIHJldmVydCAoaS5lLiBgYDBgYCkuXG4gICAgICpcbiAgICAgKiAgVGhpcyBpcyBhdmFpbGFibGUgaW4gcG9zdC1ieXphbnRpdW0gYmxvY2tzLCBidXQgc29tZSBiYWNrZW5kcyBtYXlcbiAgICAgKiAgYmFja2ZpbGwgdGhpcyB2YWx1ZS5cbiAgICAgKi9cbiAgICBzdGF0dXM7XG4gICAgLyoqXG4gICAgICogIFRoZSByb290IGhhc2ggb2YgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICAgKlxuICAgICAqICBUaGlzIGlzIG5vIHByZXNlbnQgYW5kIHdhcyBvbmx5IGluY2x1ZGVkIGluIHByZS1ieXphbnRpdW0gYmxvY2tzLCBidXRcbiAgICAgKiAgY291bGQgYmUgdXNlZCB0byB2YWxpZGF0ZSBjZXJ0YWluIHBhcnRzIG9mIHRoZSByZWNlaXB0LlxuICAgICAqL1xuICAgIHJvb3Q7XG4gICAgI2xvZ3M7XG4gICAgLyoqXG4gICAgICogIEBfaWdub3JlOlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHR4LCBwcm92aWRlcikge1xuICAgICAgICB0aGlzLiNsb2dzID0gT2JqZWN0LmZyZWV6ZSh0eC5sb2dzLm1hcCgobG9nKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExvZyhsb2csIHByb3ZpZGVyKTtcbiAgICAgICAgfSkpO1xuICAgICAgICBsZXQgZ2FzUHJpY2UgPSBCTl8wO1xuICAgICAgICBpZiAodHguZWZmZWN0aXZlR2FzUHJpY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgZ2FzUHJpY2UgPSB0eC5lZmZlY3RpdmVHYXNQcmljZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eC5nYXNQcmljZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBnYXNQcmljZSA9IHR4Lmdhc1ByaWNlO1xuICAgICAgICB9XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgcHJvdmlkZXIsXG4gICAgICAgICAgICB0bzogdHgudG8sXG4gICAgICAgICAgICBmcm9tOiB0eC5mcm9tLFxuICAgICAgICAgICAgY29udHJhY3RBZGRyZXNzOiB0eC5jb250cmFjdEFkZHJlc3MsXG4gICAgICAgICAgICBoYXNoOiB0eC5oYXNoLFxuICAgICAgICAgICAgaW5kZXg6IHR4LmluZGV4LFxuICAgICAgICAgICAgYmxvY2tIYXNoOiB0eC5ibG9ja0hhc2gsXG4gICAgICAgICAgICBibG9ja051bWJlcjogdHguYmxvY2tOdW1iZXIsXG4gICAgICAgICAgICBsb2dzQmxvb206IHR4LmxvZ3NCbG9vbSxcbiAgICAgICAgICAgIGdhc1VzZWQ6IHR4Lmdhc1VzZWQsXG4gICAgICAgICAgICBjdW11bGF0aXZlR2FzVXNlZDogdHguY3VtdWxhdGl2ZUdhc1VzZWQsXG4gICAgICAgICAgICBibG9iR2FzVXNlZDogdHguYmxvYkdhc1VzZWQsXG4gICAgICAgICAgICBnYXNQcmljZSxcbiAgICAgICAgICAgIGJsb2JHYXNQcmljZTogdHguYmxvYkdhc1ByaWNlLFxuICAgICAgICAgICAgdHlwZTogdHgudHlwZSxcbiAgICAgICAgICAgIC8vYnl6YW50aXVtOiB0eC5ieXphbnRpdW0sXG4gICAgICAgICAgICBzdGF0dXM6IHR4LnN0YXR1cyxcbiAgICAgICAgICAgIHJvb3Q6IHR4LnJvb3RcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgbG9ncyBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICAgKi9cbiAgICBnZXQgbG9ncygpIHsgcmV0dXJuIHRoaXMuI2xvZ3M7IH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIEpTT04tY29tcGF0aWJsZSByZXByZXNlbnRhdGlvbi5cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IHsgdG8sIGZyb20sIGNvbnRyYWN0QWRkcmVzcywgaGFzaCwgaW5kZXgsIGJsb2NrSGFzaCwgYmxvY2tOdW1iZXIsIGxvZ3NCbG9vbSwgbG9ncywgLy9ieXphbnRpdW0sIFxuICAgICAgICBzdGF0dXMsIHJvb3QgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfdHlwZTogXCJUcmFuc2FjdGlvblJlY2VpcHRcIixcbiAgICAgICAgICAgIGJsb2NrSGFzaCwgYmxvY2tOdW1iZXIsXG4gICAgICAgICAgICAvL2J5emFudGl1bSwgXG4gICAgICAgICAgICBjb250cmFjdEFkZHJlc3MsXG4gICAgICAgICAgICBjdW11bGF0aXZlR2FzVXNlZDogdG9Kc29uKHRoaXMuY3VtdWxhdGl2ZUdhc1VzZWQpLFxuICAgICAgICAgICAgZnJvbSxcbiAgICAgICAgICAgIGdhc1ByaWNlOiB0b0pzb24odGhpcy5nYXNQcmljZSksXG4gICAgICAgICAgICBibG9iR2FzVXNlZDogdG9Kc29uKHRoaXMuYmxvYkdhc1VzZWQpLFxuICAgICAgICAgICAgYmxvYkdhc1ByaWNlOiB0b0pzb24odGhpcy5ibG9iR2FzUHJpY2UpLFxuICAgICAgICAgICAgZ2FzVXNlZDogdG9Kc29uKHRoaXMuZ2FzVXNlZCksXG4gICAgICAgICAgICBoYXNoLCBpbmRleCwgbG9ncywgbG9nc0Jsb29tLCByb290LCBzdGF0dXMsIHRvXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBAX2lnbm9yZTpcbiAgICAgKi9cbiAgICBnZXQgbGVuZ3RoKCkgeyByZXR1cm4gdGhpcy5sb2dzLmxlbmd0aDsgfVxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB0aGlzLmxvZ3NbaW5kZXgrK10sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSB0b3RhbCBmZWUgZm9yIHRoaXMgdHJhbnNhY3Rpb24sIGluIHdlaS5cbiAgICAgKi9cbiAgICBnZXQgZmVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nYXNVc2VkICogdGhpcy5nYXNQcmljZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmVzIHRvIHRoZSBibG9jayB0aGlzIHRyYW5zYWN0aW9uIG9jY3VycmVkIGluLlxuICAgICAqL1xuICAgIGFzeW5jIGdldEJsb2NrKCkge1xuICAgICAgICBjb25zdCBibG9jayA9IGF3YWl0IHRoaXMucHJvdmlkZXIuZ2V0QmxvY2sodGhpcy5ibG9ja0hhc2gpO1xuICAgICAgICBpZiAoYmxvY2sgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVE9ET1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmxvY2s7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXNvbHZlcyB0byB0aGUgdHJhbnNhY3Rpb24gdGhpcyB0cmFuc2FjdGlvbiBvY2N1cnJlZCBpbi5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUcmFuc2FjdGlvbigpIHtcbiAgICAgICAgY29uc3QgdHggPSBhd2FpdCB0aGlzLnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uKHRoaXMuaGFzaCk7XG4gICAgICAgIGlmICh0eCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUT0RPXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmVzIHRvIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGV4ZWN1dGlvbiBvZiB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogIFN1cHBvcnQgZm9yIHRoaXMgZmVhdHVyZSBpcyBsaW1pdGVkLCBhcyBpdCByZXF1aXJlcyBhbiBhcmNoaXZlIG5vZGVcbiAgICAgKiAgd2l0aCB0aGUgYGBkZWJ1Z19gYCBvciBgYHRyYWNlX2BgIEFQSSBlbmFibGVkLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFJlc3VsdCgpIHtcbiAgICAgICAgcmV0dXJuIChhd2FpdCB0aGlzLnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uUmVzdWx0KHRoaXMuaGFzaCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb2x2ZXMgdG8gdGhlIG51bWJlciBvZiBjb25maXJtYXRpb25zIHRoaXMgdHJhbnNhY3Rpb24gaGFzLlxuICAgICAqL1xuICAgIGFzeW5jIGNvbmZpcm1hdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy5wcm92aWRlci5nZXRCbG9ja051bWJlcigpKSAtIHRoaXMuYmxvY2tOdW1iZXIgKyAxO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgcmVtb3ZlZEV2ZW50KCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlUmVtb3ZlZFRyYW5zYWN0aW9uRmlsdGVyKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgcmVvcmRlcmVkRXZlbnQob3RoZXIpIHtcbiAgICAgICAgYXNzZXJ0KCFvdGhlciB8fCBvdGhlci5pc01pbmVkKCksIFwidW5taW5lZCAnb3RoZXInIHRyYW5zY3Rpb24gY2Fubm90IGJlIG9ycGhhbmVkXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcInJlb3JkZXJlZEV2ZW50KG90aGVyKVwiIH0pO1xuICAgICAgICByZXR1cm4gY3JlYXRlUmVvcmRlcmVkVHJhbnNhY3Rpb25GaWx0ZXIodGhpcywgb3RoZXIpO1xuICAgIH1cbn1cbi8qKlxuICogIEEgKipUcmFuc2FjdGlvblJlc3BvbnNlKiogaW5jbHVkZXMgYWxsIHByb3BlcnRpZXMgYWJvdXQgYSB0cmFuc2FjdGlvblxuICogIHRoYXQgd2FzIHNlbnQgdG8gdGhlIG5ldHdvcmssIHdoaWNoIG1heSBvciBtYXkgbm90IGJlIGluY2x1ZGVkIGluIGFcbiAqICBibG9jay5cbiAqXG4gKiAgVGhlIFtbVHJhbnNhY3Rpb25SZXNwb25zZS1pc01pbmVkXV0gY2FuIGJlIHVzZWQgdG8gY2hlY2sgaWYgdGhlXG4gKiAgdHJhbnNhY3Rpb24gaGFzIGJlZW4gbWluZWQgYXMgd2VsbCBhcyB0eXBlIGd1YXJkIHRoYXQgdGhlIG90aGVyd2lzZVxuICogIHBvc3NpYmx5IGBgbnVsbGBgIHByb3BlcnRpZXMgYXJlIGRlZmluZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvblJlc3BvbnNlIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIHByb3ZpZGVyIHRoaXMgaXMgY29ubmVjdGVkIHRvLCB3aGljaCB3aWxsIGluZmx1ZW5jZSBob3cgaXRzXG4gICAgICogIG1ldGhvZHMgd2lsbCByZXNvbHZlIGl0cyBhc3luYyBpbnNwZWN0aW9uIG1ldGhvZHMuXG4gICAgICovXG4gICAgcHJvdmlkZXI7XG4gICAgLyoqXG4gICAgICogIFRoZSBibG9jayBudW1iZXIgb2YgdGhlIGJsb2NrIHRoYXQgdGhpcyB0cmFuc2FjdGlvbiB3YXMgaW5jbHVkZWQgaW4uXG4gICAgICpcbiAgICAgKiAgVGhpcyBpcyBgYG51bGxgYCBmb3IgcGVuZGluZyB0cmFuc2FjdGlvbnMuXG4gICAgICovXG4gICAgYmxvY2tOdW1iZXI7XG4gICAgLyoqXG4gICAgICogIFRoZSBibG9ja0hhc2ggb2YgdGhlIGJsb2NrIHRoYXQgdGhpcyB0cmFuc2FjdGlvbiB3YXMgaW5jbHVkZWQgaW4uXG4gICAgICpcbiAgICAgKiAgVGhpcyBpcyBgYG51bGxgYCBmb3IgcGVuZGluZyB0cmFuc2FjdGlvbnMuXG4gICAgICovXG4gICAgYmxvY2tIYXNoO1xuICAgIC8qKlxuICAgICAqICBUaGUgaW5kZXggd2l0aGluIHRoZSBibG9jayB0aGF0IHRoaXMgdHJhbnNhY3Rpb24gcmVzaWRlcyBhdC5cbiAgICAgKi9cbiAgICBpbmRleDtcbiAgICAvKipcbiAgICAgKiAgVGhlIHRyYW5zYWN0aW9uIGhhc2guXG4gICAgICovXG4gICAgaGFzaDtcbiAgICAvKipcbiAgICAgKiAgVGhlIFtbbGluay1laXAtMjcxOF1dIHRyYW5zYWN0aW9uIGVudmVsb3BlIHR5cGUuIFRoaXMgaXNcbiAgICAgKiAgYGAwYGAgZm9yIGxlZ2FjeSB0cmFuc2FjdGlvbnMgdHlwZXMuXG4gICAgICovXG4gICAgdHlwZTtcbiAgICAvKipcbiAgICAgKiAgVGhlIHJlY2VpdmVyIG9mIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgICpcbiAgICAgKiAgSWYgYGBudWxsYGAsIHRoZW4gdGhlIHRyYW5zYWN0aW9uIGlzIGFuIGluaXRjb2RlIHRyYW5zYWN0aW9uLlxuICAgICAqICBUaGlzIG1lYW5zIHRoZSByZXN1bHQgb2YgZXhlY3V0aW5nIHRoZSBbW2RhdGFdXSB3aWxsIGJlIGRlcGxveWVkXG4gICAgICogIGFzIGEgbmV3IGNvbnRyYWN0IG9uIGNoYWluIChhc3N1bWluZyBpdCBkb2VzIG5vdCByZXZlcnQpIGFuZCB0aGVcbiAgICAgKiAgYWRkcmVzcyBtYXkgYmUgY29tcHV0ZWQgdXNpbmcgW1tnZXRDcmVhdGVBZGRyZXNzXV0uXG4gICAgICovXG4gICAgdG87XG4gICAgLyoqXG4gICAgICogIFRoZSBzZW5kZXIgb2YgdGhpcyB0cmFuc2FjdGlvbi4gSXQgaXMgaW1wbGljaXRseSBjb21wdXRlZFxuICAgICAqICBmcm9tIHRoZSB0cmFuc2FjdGlvbiBwcmUtaW1hZ2UgaGFzaCAoYXMgdGhlIGRpZ2VzdCkgYW5kIHRoZVxuICAgICAqICBbW3NpZ25hdHVyZV1dIHVzaW5nIGVjcmVjb3Zlci5cbiAgICAgKi9cbiAgICBmcm9tO1xuICAgIC8qKlxuICAgICAqICBUaGUgbm9uY2UsIHdoaWNoIGlzIHVzZWQgdG8gcHJldmVudCByZXBsYXkgYXR0YWNrcyBhbmQgb2ZmZXJcbiAgICAgKiAgYSBtZXRob2QgdG8gZW5zdXJlIHRyYW5zYWN0aW9ucyBmcm9tIGEgZ2l2ZW4gc2VuZGVyIGFyZSBleHBsaWNpdGx5XG4gICAgICogIG9yZGVyZWQuXG4gICAgICpcbiAgICAgKiAgV2hlbiBzZW5kaW5nIGEgdHJhbnNhY3Rpb24sIHRoaXMgbXVzdCBiZSBlcXVhbCB0byB0aGUgbnVtYmVyIG9mXG4gICAgICogIHRyYW5zYWN0aW9ucyBldmVyIHNlbnQgYnkgW1tmcm9tXV0uXG4gICAgICovXG4gICAgbm9uY2U7XG4gICAgLyoqXG4gICAgICogIFRoZSBtYXhpbXVtIHVuaXRzIG9mIGdhcyB0aGlzIHRyYW5zYWN0aW9uIGNhbiBjb25zdW1lLiBJZiBleGVjdXRpb25cbiAgICAgKiAgZXhjZWVkcyB0aGlzLCB0aGUgZW50cmllcyB0cmFuc2FjdGlvbiBpcyByZXZlcnRlZCBhbmQgdGhlIHNlbmRlclxuICAgICAqICBpcyBjaGFyZ2VkIGZvciB0aGUgZnVsbCBhbW91bnQsIGRlc3BpdGUgbm90IHN0YXRlIGNoYW5nZXMgYmVpbmcgbWFkZS5cbiAgICAgKi9cbiAgICBnYXNMaW1pdDtcbiAgICAvKipcbiAgICAgKiAgVGhlIGdhcyBwcmljZSBjYW4gaGF2ZSB2YXJpb3VzIHZhbHVlcywgZGVwZW5kaW5nIG9uIHRoZSBuZXR3b3JrLlxuICAgICAqXG4gICAgICogIEluIG1vZGVybiBuZXR3b3JrcywgZm9yIHRyYW5zYWN0aW9ucyB0aGF0IGFyZSBpbmNsdWRlZCB0aGlzIGlzXG4gICAgICogIHRoZSAvL2VmZmVjdGl2ZSBnYXMgcHJpY2UvLyAodGhlIGZlZSBwZXIgZ2FzIHRoYXQgd2FzIGFjdHVhbGx5XG4gICAgICogIGNoYXJnZWQpLCB3aGlsZSBmb3IgdHJhbnNhY3Rpb25zIHRoYXQgaGF2ZSBub3QgYmVlbiBpbmNsdWRlZCB5ZXRcbiAgICAgKiAgaXMgdGhlIFtbbWF4RmVlUGVyR2FzXV0uXG4gICAgICpcbiAgICAgKiAgRm9yIGxlZ2FjeSB0cmFuc2FjdGlvbnMsIG9yIHRyYW5zYWN0aW9ucyBvbiBsZWdhY3kgbmV0d29ya3MsIHRoaXNcbiAgICAgKiAgaXMgdGhlIGZlZSB0aGF0IHdpbGwgYmUgY2hhcmdlZCBwZXIgdW5pdCBvZiBnYXMgdGhlIHRyYW5zYWN0aW9uXG4gICAgICogIGNvbnN1bWVzLlxuICAgICAqL1xuICAgIGdhc1ByaWNlO1xuICAgIC8qKlxuICAgICAqICBUaGUgbWF4aW11bSBwcmlvcml0eSBmZWUgKHBlciB1bml0IG9mIGdhcykgdG8gYWxsb3cgYVxuICAgICAqICB2YWxpZGF0b3IgdG8gY2hhcmdlIHRoZSBzZW5kZXIuIFRoaXMgaXMgaW5jbHVzaXZlIG9mIHRoZVxuICAgICAqICBbW21heEZlZUZlZVBlckdhc11dLlxuICAgICAqL1xuICAgIG1heFByaW9yaXR5RmVlUGVyR2FzO1xuICAgIC8qKlxuICAgICAqICBUaGUgbWF4aW11bSBmZWUgKHBlciB1bml0IG9mIGdhcykgdG8gYWxsb3cgdGhpcyB0cmFuc2FjdGlvblxuICAgICAqICB0byBjaGFyZ2UgdGhlIHNlbmRlci5cbiAgICAgKi9cbiAgICBtYXhGZWVQZXJHYXM7XG4gICAgLyoqXG4gICAgICogIFRoZSBbW2xpbmstZWlwLTQ4NDRdXSBtYXggZmVlIHBlciBCTE9iIGdhcy5cbiAgICAgKi9cbiAgICBtYXhGZWVQZXJCbG9iR2FzO1xuICAgIC8qKlxuICAgICAqICBUaGUgZGF0YS5cbiAgICAgKi9cbiAgICBkYXRhO1xuICAgIC8qKlxuICAgICAqICBUaGUgdmFsdWUsIGluIHdlaS4gVXNlIFtbZm9ybWF0RXRoZXJdXSB0byBmb3JtYXQgdGhpcyB2YWx1ZVxuICAgICAqICBhcyBldGhlci5cbiAgICAgKi9cbiAgICB2YWx1ZTtcbiAgICAvKipcbiAgICAgKiAgVGhlIGNoYWluIElELlxuICAgICAqL1xuICAgIGNoYWluSWQ7XG4gICAgLyoqXG4gICAgICogIFRoZSBzaWduYXR1cmUuXG4gICAgICovXG4gICAgc2lnbmF0dXJlO1xuICAgIC8qKlxuICAgICAqICBUaGUgW1tsaW5rLWVpcC0yOTMwXV0gYWNjZXNzIGxpc3QgZm9yIHRyYW5zYWN0aW9uIHR5cGVzIHRoYXRcbiAgICAgKiAgc3VwcG9ydCBpdCwgb3RoZXJ3aXNlIGBgbnVsbGBgLlxuICAgICAqL1xuICAgIGFjY2Vzc0xpc3Q7XG4gICAgLyoqXG4gICAgICogIFRoZSBbW2xpbmstZWlwLTQ4NDRdXSBCTE9iIHZlcnNpb25lZCBoYXNoZXMuXG4gICAgICovXG4gICAgYmxvYlZlcnNpb25lZEhhc2hlcztcbiAgICAjc3RhcnRCbG9jaztcbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgY29uc3RydWN0b3IodHgsIHByb3ZpZGVyKSB7XG4gICAgICAgIHRoaXMucHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICAgICAgdGhpcy5ibG9ja051bWJlciA9ICh0eC5ibG9ja051bWJlciAhPSBudWxsKSA/IHR4LmJsb2NrTnVtYmVyIDogbnVsbDtcbiAgICAgICAgdGhpcy5ibG9ja0hhc2ggPSAodHguYmxvY2tIYXNoICE9IG51bGwpID8gdHguYmxvY2tIYXNoIDogbnVsbDtcbiAgICAgICAgdGhpcy5oYXNoID0gdHguaGFzaDtcbiAgICAgICAgdGhpcy5pbmRleCA9IHR4LmluZGV4O1xuICAgICAgICB0aGlzLnR5cGUgPSB0eC50eXBlO1xuICAgICAgICB0aGlzLmZyb20gPSB0eC5mcm9tO1xuICAgICAgICB0aGlzLnRvID0gdHgudG8gfHwgbnVsbDtcbiAgICAgICAgdGhpcy5nYXNMaW1pdCA9IHR4Lmdhc0xpbWl0O1xuICAgICAgICB0aGlzLm5vbmNlID0gdHgubm9uY2U7XG4gICAgICAgIHRoaXMuZGF0YSA9IHR4LmRhdGE7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0eC52YWx1ZTtcbiAgICAgICAgdGhpcy5nYXNQcmljZSA9IHR4Lmdhc1ByaWNlO1xuICAgICAgICB0aGlzLm1heFByaW9yaXR5RmVlUGVyR2FzID0gKHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzICE9IG51bGwpID8gdHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgOiBudWxsO1xuICAgICAgICB0aGlzLm1heEZlZVBlckdhcyA9ICh0eC5tYXhGZWVQZXJHYXMgIT0gbnVsbCkgPyB0eC5tYXhGZWVQZXJHYXMgOiBudWxsO1xuICAgICAgICB0aGlzLm1heEZlZVBlckJsb2JHYXMgPSAodHgubWF4RmVlUGVyQmxvYkdhcyAhPSBudWxsKSA/IHR4Lm1heEZlZVBlckJsb2JHYXMgOiBudWxsO1xuICAgICAgICB0aGlzLmNoYWluSWQgPSB0eC5jaGFpbklkO1xuICAgICAgICB0aGlzLnNpZ25hdHVyZSA9IHR4LnNpZ25hdHVyZTtcbiAgICAgICAgdGhpcy5hY2Nlc3NMaXN0ID0gKHR4LmFjY2Vzc0xpc3QgIT0gbnVsbCkgPyB0eC5hY2Nlc3NMaXN0IDogbnVsbDtcbiAgICAgICAgdGhpcy5ibG9iVmVyc2lvbmVkSGFzaGVzID0gKHR4LmJsb2JWZXJzaW9uZWRIYXNoZXMgIT0gbnVsbCkgPyB0eC5ibG9iVmVyc2lvbmVkSGFzaGVzIDogbnVsbDtcbiAgICAgICAgdGhpcy4jc3RhcnRCbG9jayA9IC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIEpTT04tY29tcGF0aWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QgeyBibG9ja051bWJlciwgYmxvY2tIYXNoLCBpbmRleCwgaGFzaCwgdHlwZSwgdG8sIGZyb20sIG5vbmNlLCBkYXRhLCBzaWduYXR1cmUsIGFjY2Vzc0xpc3QsIGJsb2JWZXJzaW9uZWRIYXNoZXMgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfdHlwZTogXCJUcmFuc2FjdGlvblJlc3BvbnNlXCIsXG4gICAgICAgICAgICBhY2Nlc3NMaXN0LCBibG9ja051bWJlciwgYmxvY2tIYXNoLFxuICAgICAgICAgICAgYmxvYlZlcnNpb25lZEhhc2hlcyxcbiAgICAgICAgICAgIGNoYWluSWQ6IHRvSnNvbih0aGlzLmNoYWluSWQpLFxuICAgICAgICAgICAgZGF0YSwgZnJvbSxcbiAgICAgICAgICAgIGdhc0xpbWl0OiB0b0pzb24odGhpcy5nYXNMaW1pdCksXG4gICAgICAgICAgICBnYXNQcmljZTogdG9Kc29uKHRoaXMuZ2FzUHJpY2UpLFxuICAgICAgICAgICAgaGFzaCxcbiAgICAgICAgICAgIG1heEZlZVBlckdhczogdG9Kc29uKHRoaXMubWF4RmVlUGVyR2FzKSxcbiAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiB0b0pzb24odGhpcy5tYXhQcmlvcml0eUZlZVBlckdhcyksXG4gICAgICAgICAgICBtYXhGZWVQZXJCbG9iR2FzOiB0b0pzb24odGhpcy5tYXhGZWVQZXJCbG9iR2FzKSxcbiAgICAgICAgICAgIG5vbmNlLCBzaWduYXR1cmUsIHRvLCBpbmRleCwgdHlwZSxcbiAgICAgICAgICAgIHZhbHVlOiB0b0pzb24odGhpcy52YWx1ZSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXNvbHZlcyB0byB0aGUgQmxvY2sgdGhhdCB0aGlzIHRyYW5zYWN0aW9uIHdhcyBpbmNsdWRlZCBpbi5cbiAgICAgKlxuICAgICAqICBUaGlzIHdpbGwgcmV0dXJuIG51bGwgaWYgdGhlIHRyYW5zYWN0aW9uIGhhcyBub3QgYmVlbiBpbmNsdWRlZCB5ZXQuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QmxvY2soKSB7XG4gICAgICAgIGxldCBibG9ja051bWJlciA9IHRoaXMuYmxvY2tOdW1iZXI7XG4gICAgICAgIGlmIChibG9ja051bWJlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCB0eCA9IGF3YWl0IHRoaXMuZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgICAgIGlmICh0eCkge1xuICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyID0gdHguYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJsb2NrTnVtYmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5wcm92aWRlci5nZXRCbG9jayhibG9ja051bWJlcik7XG4gICAgICAgIGlmIChibG9jayA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUT0RPXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBibG9jaztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmVzIHRvIHRoaXMgdHJhbnNhY3Rpb24gYmVpbmcgcmUtcmVxdWVzdGVkIGZyb20gdGhlXG4gICAgICogIHByb3ZpZGVyLiBUaGlzIGNhbiBiZSB1c2VkIGlmIHlvdSBoYXZlIGFuIHVubWluZWQgdHJhbnNhY3Rpb25cbiAgICAgKiAgYW5kIHdpc2ggdG8gZ2V0IGFuIHVwLXRvLWRhdGUgcG9wdWxhdGVkIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRyYW5zYWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlci5nZXRUcmFuc2FjdGlvbih0aGlzLmhhc2gpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb2x2ZSB0byB0aGUgbnVtYmVyIG9mIGNvbmZpcm1hdGlvbnMgdGhpcyB0cmFuc2FjdGlvbiBoYXMuXG4gICAgICovXG4gICAgYXN5bmMgY29uZmlybWF0aW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuYmxvY2tOdW1iZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgeyB0eCwgYmxvY2tOdW1iZXIgfSA9IGF3YWl0IHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgICAgICB0eDogdGhpcy5nZXRUcmFuc2FjdGlvbigpLFxuICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyOiB0aGlzLnByb3ZpZGVyLmdldEJsb2NrTnVtYmVyKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gTm90IG1pbmVkIHlldC4uLlxuICAgICAgICAgICAgaWYgKHR4ID09IG51bGwgfHwgdHguYmxvY2tOdW1iZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJsb2NrTnVtYmVyIC0gdHguYmxvY2tOdW1iZXIgKyAxO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyID0gYXdhaXQgdGhpcy5wcm92aWRlci5nZXRCbG9ja051bWJlcigpO1xuICAgICAgICByZXR1cm4gYmxvY2tOdW1iZXIgLSB0aGlzLmJsb2NrTnVtYmVyICsgMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmVzIG9uY2UgdGhpcyB0cmFuc2FjdGlvbiBoYXMgYmVlbiBtaW5lZCBhbmQgaGFzXG4gICAgICogICUlY29uZmlybXMlJSBibG9ja3MgaW5jbHVkaW5nIGl0IChkZWZhdWx0OiBgYDFgYCkgd2l0aCBhblxuICAgICAqICBvcHRpb25hbCAlJXRpbWVvdXQlJS5cbiAgICAgKlxuICAgICAqICBUaGlzIGNhbiByZXNvbHZlIHRvIGBgbnVsbGBgIG9ubHkgaWYgJSVjb25maXJtcyUlIGlzIGBgMGBgXG4gICAgICogIGFuZCB0aGUgdHJhbnNhY3Rpb24gaGFzIG5vdCBiZWVuIG1pbmVkLCBvdGhlcndpc2UgdGhpcyB3aWxsXG4gICAgICogIHdhaXQgdW50aWwgZW5vdWdoIGNvbmZpcm1hdGlvbnMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgYXN5bmMgd2FpdChfY29uZmlybXMsIF90aW1lb3V0KSB7XG4gICAgICAgIGNvbnN0IGNvbmZpcm1zID0gKF9jb25maXJtcyA9PSBudWxsKSA/IDEgOiBfY29uZmlybXM7XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSAoX3RpbWVvdXQgPT0gbnVsbCkgPyAwIDogX3RpbWVvdXQ7XG4gICAgICAgIGxldCBzdGFydEJsb2NrID0gdGhpcy4jc3RhcnRCbG9jaztcbiAgICAgICAgbGV0IG5leHRTY2FuID0gLTE7XG4gICAgICAgIGxldCBzdG9wU2Nhbm5pbmcgPSAoc3RhcnRCbG9jayA9PT0gLTEpID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICBjb25zdCBjaGVja1JlcGxhY2VtZW50ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uIGNvdW50IGZvciB0aGlzIHNlbmRlclxuICAgICAgICAgICAgaWYgKHN0b3BTY2FubmluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBibG9ja051bWJlciwgbm9uY2UgfSA9IGF3YWl0IHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgICAgICBibG9ja051bWJlcjogdGhpcy5wcm92aWRlci5nZXRCbG9ja051bWJlcigpLFxuICAgICAgICAgICAgICAgIG5vbmNlOiB0aGlzLnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uQ291bnQodGhpcy5mcm9tKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBObyB0cmFuc2FjdGlvbiBvciBvdXIgbm9uY2UgaGFzIG5vdCBiZWVuIG1pbmVkIHlldDsgYnV0IHdlXG4gICAgICAgICAgICAvLyBjYW4gc3RhcnQgc2Nhbm5pbmcgbGF0ZXIgd2hlbiB3ZSBkbyBzdGFydFxuICAgICAgICAgICAgaWYgKG5vbmNlIDwgdGhpcy5ub25jZSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0QmxvY2sgPSBibG9ja051bWJlcjtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSB3ZXJlIG1pbmVkOyBubyByZXBsYWNlbWVudFxuICAgICAgICAgICAgaWYgKHN0b3BTY2FubmluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWluZWQgPSBhd2FpdCB0aGlzLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgICBpZiAobWluZWQgJiYgbWluZWQuYmxvY2tOdW1iZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlIHdlcmUgcmVwbGFjZWQ7IHN0YXJ0IHNjYW5uaW5nIGZvciB0aGF0IHRyYW5zYWN0aW9uXG4gICAgICAgICAgICAvLyBTdGFydGluZyB0byBzY2FuOyBsb29rIGJhY2sgYSBmZXcgZXh0cmEgYmxvY2tzIGZvciBzYWZldHlcbiAgICAgICAgICAgIGlmIChuZXh0U2NhbiA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBuZXh0U2NhbiA9IHN0YXJ0QmxvY2sgLSAzO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0U2NhbiA8IHRoaXMuI3N0YXJ0QmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dFNjYW4gPSB0aGlzLiNzdGFydEJsb2NrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChuZXh0U2NhbiA8PSBibG9ja051bWJlcikge1xuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgbmV4dCBibG9jayB0byBzY2FuXG4gICAgICAgICAgICAgICAgaWYgKHN0b3BTY2FubmluZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYmxvY2sgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLmdldEJsb2NrKG5leHRTY2FuLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHNob3VsZCBub3QgaGFwcGVuOyBidXQgd2UnbGwgdHJ5IGFnYWluIHNob3J0bHlcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2sgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFdlIHdlcmUgbWluZWQ7IG5vIHJlcGxhY2VtZW50XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBoYXNoIG9mIGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNoID09PSB0aGlzLmhhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTZWFyY2ggZm9yIHRoZSB0cmFuc2FjdGlvbiB0aGF0IHJlcGxhY2VkIHVzXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9jay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0eCA9IGF3YWl0IGJsb2NrLmdldFRyYW5zYWN0aW9uKGkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHguZnJvbSA9PT0gdGhpcy5mcm9tICYmIHR4Lm5vbmNlID09PSB0aGlzLm5vbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHJlY2VpcHRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdG9wU2Nhbm5pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uUmVjZWlwdCh0eC5oYXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIG5vdCBoYXBwZW47IGJ1dCB3ZSdsbCB0cnkgYWdhaW4gc2hvcnRseVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlY2VpcHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHdpbGwgcmV0cnkgdGhpcyBvbiB0aGUgbmV4dCBibG9jayAodGhpcyBjYXNlIGNvdWxkIGJlIG9wdGltaXplZClcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoYmxvY2tOdW1iZXIgLSByZWNlaXB0LmJsb2NrTnVtYmVyICsgMSkgPCBjb25maXJtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZWFzb24gd2Ugd2VyZSByZXBsYWNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlYXNvbiA9IFwicmVwbGFjZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eC5kYXRhID09PSB0aGlzLmRhdGEgJiYgdHgudG8gPT09IHRoaXMudG8gJiYgdHgudmFsdWUgPT09IHRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb24gPSBcInJlcHJpY2VkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eC5kYXRhID09PSBcIjB4XCIgJiYgdHguZnJvbSA9PT0gdHgudG8gJiYgdHgudmFsdWUgPT09IEJOXzApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb24gPSBcImNhbmNlbGxlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBcInRyYW5zYWN0aW9uIHdhcyByZXBsYWNlZFwiLCBcIlRSQU5TQUNUSU9OX1JFUExBQ0VEXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxsZWQ6IChyZWFzb24gPT09IFwicmVwbGFjZWRcIiB8fCByZWFzb24gPT09IFwiY2FuY2VsbGVkXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogdHgucmVwbGFjZWFibGVUcmFuc2FjdGlvbihzdGFydEJsb2NrKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNoOiB0eC5oYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpcHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5leHRTY2FuKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNoZWNrUmVjZWlwdCA9IChyZWNlaXB0KSA9PiB7XG4gICAgICAgICAgICBpZiAocmVjZWlwdCA9PSBudWxsIHx8IHJlY2VpcHQuc3RhdHVzICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpcHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3NlcnQoZmFsc2UsIFwidHJhbnNhY3Rpb24gZXhlY3V0aW9uIHJldmVydGVkXCIsIFwiQ0FMTF9FWENFUFRJT05cIiwge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJzZW5kVHJhbnNhY3Rpb25cIixcbiAgICAgICAgICAgICAgICBkYXRhOiBudWxsLCByZWFzb246IG51bGwsIGludm9jYXRpb246IG51bGwsIHJldmVydDogbnVsbCxcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICB0bzogcmVjZWlwdC50byxcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogcmVjZWlwdC5mcm9tLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBcIlwiIC8vIEBUT0RPOiBpbiB2Nywgc3BsaXQgb3V0IHNlbmRUcmFuc2FjdGlvbiBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgfSwgcmVjZWlwdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uUmVjZWlwdCh0aGlzLmhhc2gpO1xuICAgICAgICBpZiAoY29uZmlybXMgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVja1JlY2VpcHQocmVjZWlwdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlY2VpcHQpIHtcbiAgICAgICAgICAgIGlmICgoYXdhaXQgcmVjZWlwdC5jb25maXJtYXRpb25zKCkpID49IGNvbmZpcm1zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrUmVjZWlwdChyZWNlaXB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBhIHJlcGxhY2VtZW50OyB0aHJvd3MgaWYgYSByZXBsYWNlbWVudCB3YXMgZm91bmRcbiAgICAgICAgICAgIGF3YWl0IGNoZWNrUmVwbGFjZW1lbnQoKTtcbiAgICAgICAgICAgIC8vIEFsbG93IG51bGwgb25seSB3aGVuIHRoZSBjb25maXJtcyBpcyAwXG4gICAgICAgICAgICBpZiAoY29uZmlybXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3YWl0ZXIgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvLyBMaXN0IG9mIHRoaW5ncyB0byBjYW5jZWwgd2hlbiB3ZSBoYXZlIGEgcmVzdWx0IChvbmUgd2F5IG9yIHRoZSBvdGhlcilcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbGxlcnMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbCA9ICgpID0+IHsgY2FuY2VsbGVycy5mb3JFYWNoKChjKSA9PiBjKCkpOyB9O1xuICAgICAgICAgICAgLy8gT24gY2FuY2VsLCBzdG9wIHNjYW5uaW5nIGZvciByZXBsYWNlbWVudHNcbiAgICAgICAgICAgIGNhbmNlbGxlcnMucHVzaCgoKSA9PiB7IHN0b3BTY2FubmluZyA9IHRydWU7IH0pO1xuICAgICAgICAgICAgLy8gU2V0IHVwIGFueSB0aW1lb3V0IHJlcXVlc3RlZFxuICAgICAgICAgICAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChtYWtlRXJyb3IoXCJ3YWl0IGZvciB0cmFuc2FjdGlvbiB0aW1lb3V0XCIsIFwiVElNRU9VVFwiKSk7XG4gICAgICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICAgICAgY2FuY2VsbGVycy5wdXNoKCgpID0+IHsgY2xlYXJUaW1lb3V0KHRpbWVyKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0eExpc3RlbmVyID0gYXN5bmMgKHJlY2VpcHQpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBEb25lOyByZXR1cm4gaXQhXG4gICAgICAgICAgICAgICAgaWYgKChhd2FpdCByZWNlaXB0LmNvbmZpcm1hdGlvbnMoKSkgPj0gY29uZmlybXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNoZWNrUmVjZWlwdChyZWNlaXB0KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhbmNlbGxlcnMucHVzaCgoKSA9PiB7IHRoaXMucHJvdmlkZXIub2ZmKHRoaXMuaGFzaCwgdHhMaXN0ZW5lcik7IH0pO1xuICAgICAgICAgICAgdGhpcy5wcm92aWRlci5vbih0aGlzLmhhc2gsIHR4TGlzdGVuZXIpO1xuICAgICAgICAgICAgLy8gV2Ugc3VwcG9ydCByZXBsYWNlbWVudCBkZXRlY3Rpb247IHN0YXJ0IGNoZWNraW5nXG4gICAgICAgICAgICBpZiAoc3RhcnRCbG9jayA+PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVwbGFjZUxpc3RlbmVyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGEgcmVwbGFjZW1lbnQ7IHRoaXMgdGhyb3dzIG9ubHkgaWYgb25lIGlzIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBjaGVja1JlcGxhY2VtZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSB3ZXJlIHJlcGxhY2VkICh3aXRoIGVub3VnaCBjb25maXJtcyk7IHJlLXRocm93IHRoZSBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRXJyb3IoZXJyb3IsIFwiVFJBTlNBQ1RJT05fUkVQTEFDRURcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBSZXNjaGV1ZGxlIGEgY2hlY2sgb24gdGhlIG5leHQgYmxvY2tcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdG9wU2Nhbm5pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvdmlkZXIub25jZShcImJsb2NrXCIsIHJlcGxhY2VMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNhbmNlbGxlcnMucHVzaCgoKSA9PiB7IHRoaXMucHJvdmlkZXIub2ZmKFwiYmxvY2tcIiwgcmVwbGFjZUxpc3RlbmVyKTsgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm92aWRlci5vbmNlKFwiYmxvY2tcIiwgcmVwbGFjZUxpc3RlbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB3YWl0ZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGBgdHJ1ZWBgIGlmIHRoaXMgdHJhbnNhY3Rpb24gaGFzIGJlZW4gaW5jbHVkZWQuXG4gICAgICpcbiAgICAgKiAgVGhpcyBpcyBlZmZlY3RpdmUgb25seSBhcyBvZiB0aGUgdGltZSB0aGUgVHJhbnNhY3Rpb25SZXNwb25zZVxuICAgICAqICB3YXMgaW5zdGFudGlhdGVkLiBUbyBnZXQgdXAtdG8tZGF0ZSBpbmZvcm1hdGlvbiwgdXNlXG4gICAgICogIFtbZ2V0VHJhbnNhY3Rpb25dXS5cbiAgICAgKlxuICAgICAqICBUaGlzIHByb3ZpZGVzIGEgVHlwZSBHdWFyZCB0aGF0IHRoaXMgdHJhbnNhY3Rpb24gd2lsbCBoYXZlXG4gICAgICogIG5vbi1udWxsIHByb3BlcnR5IHZhbHVlcyBmb3IgcHJvcGVydGllcyB0aGF0IGFyZSBudWxsIGZvclxuICAgICAqICB1bm1pbmVkIHRyYW5zYWN0aW9ucy5cbiAgICAgKi9cbiAgICBpc01pbmVkKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuYmxvY2tIYXNoICE9IG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0cnVlIGlmIHRoZSB0cmFuc2FjdGlvbiBpcyBhIGxlZ2FjeSAoaS5lLiBgYHR5cGUgPT0gMGBgKVxuICAgICAqICB0cmFuc2FjdGlvbi5cbiAgICAgKlxuICAgICAqICBUaGlzIHByb3ZpZGVzIGEgVHlwZSBHdWFyZCB0aGF0IHRoaXMgdHJhbnNhY3Rpb24gd2lsbCBoYXZlXG4gICAgICogIHRoZSBgYG51bGxgYC1uZXNzIGZvciBoYXJkZm9yay1zcGVjaWZpYyBwcm9wZXJ0aWVzIHNldCBjb3JyZWN0bHkuXG4gICAgICovXG4gICAgaXNMZWdhY3koKSB7XG4gICAgICAgIHJldHVybiAodGhpcy50eXBlID09PSAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiB0aGUgdHJhbnNhY3Rpb24gaXMgYSBCZXJsaW4gKGkuZS4gYGB0eXBlID09IDFgYClcbiAgICAgKiAgdHJhbnNhY3Rpb24uIFNlZSBbW2xpbmstZWlwLTIwNzBdXS5cbiAgICAgKlxuICAgICAqICBUaGlzIHByb3ZpZGVzIGEgVHlwZSBHdWFyZCB0aGF0IHRoaXMgdHJhbnNhY3Rpb24gd2lsbCBoYXZlXG4gICAgICogIHRoZSBgYG51bGxgYC1uZXNzIGZvciBoYXJkZm9yay1zcGVjaWZpYyBwcm9wZXJ0aWVzIHNldCBjb3JyZWN0bHkuXG4gICAgICovXG4gICAgaXNCZXJsaW4oKSB7XG4gICAgICAgIHJldHVybiAodGhpcy50eXBlID09PSAxKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiB0aGUgdHJhbnNhY3Rpb24gaXMgYSBMb25kb24gKGkuZS4gYGB0eXBlID09IDJgYClcbiAgICAgKiAgdHJhbnNhY3Rpb24uIFNlZSBbW2xpbmstZWlwLTE1NTldXS5cbiAgICAgKlxuICAgICAqICBUaGlzIHByb3ZpZGVzIGEgVHlwZSBHdWFyZCB0aGF0IHRoaXMgdHJhbnNhY3Rpb24gd2lsbCBoYXZlXG4gICAgICogIHRoZSBgYG51bGxgYC1uZXNzIGZvciBoYXJkZm9yay1zcGVjaWZpYyBwcm9wZXJ0aWVzIHNldCBjb3JyZWN0bHkuXG4gICAgICovXG4gICAgaXNMb25kb24oKSB7XG4gICAgICAgIHJldHVybiAodGhpcy50eXBlID09PSAyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiBodGUgdHJhbnNhY3Rpb24gaXMgYSBDYW5jdW4gKGkuZS4gYGB0eXBlID09IDNgYClcbiAgICAgKiAgdHJhbnNhY3Rpb24uIFNlZSBbW2xpbmstZWlwLTQ4NDRdXS5cbiAgICAgKi9cbiAgICBpc0NhbmN1bigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnR5cGUgPT09IDMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIGZpbHRlciB3aGljaCBjYW4gYmUgdXNlZCB0byBsaXN0ZW4gZm9yIG9ycGhhbiBldmVudHNcbiAgICAgKiAgdGhhdCBldmljdCB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAqL1xuICAgIHJlbW92ZWRFdmVudCgpIHtcbiAgICAgICAgYXNzZXJ0KHRoaXMuaXNNaW5lZCgpLCBcInVubWluZWQgdHJhbnNhY3Rpb24gY2Fub3QgYmUgb3JwaGFuZWRcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IFwicmVtb3ZlRXZlbnQoKVwiIH0pO1xuICAgICAgICByZXR1cm4gY3JlYXRlUmVtb3ZlZFRyYW5zYWN0aW9uRmlsdGVyKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIGZpbHRlciB3aGljaCBjYW4gYmUgdXNlZCB0byBsaXN0ZW4gZm9yIG9ycGhhbiBldmVudHNcbiAgICAgKiAgdGhhdCByZS1vcmRlciB0aGlzIGV2ZW50IGFnYWluc3QgJSVvdGhlciUlLlxuICAgICAqL1xuICAgIHJlb3JkZXJlZEV2ZW50KG90aGVyKSB7XG4gICAgICAgIGFzc2VydCh0aGlzLmlzTWluZWQoKSwgXCJ1bm1pbmVkIHRyYW5zYWN0aW9uIGNhbm90IGJlIG9ycGhhbmVkXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcInJlbW92ZUV2ZW50KClcIiB9KTtcbiAgICAgICAgYXNzZXJ0KCFvdGhlciB8fCBvdGhlci5pc01pbmVkKCksIFwidW5taW5lZCAnb3RoZXInIHRyYW5zYWN0aW9uIGNhbm90IGJlIG9ycGhhbmVkXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcInJlbW92ZUV2ZW50KClcIiB9KTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJlb3JkZXJlZFRyYW5zYWN0aW9uRmlsdGVyKHRoaXMsIG90aGVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYSBuZXcgVHJhbnNhY3Rpb25SZXNwb25zZSBpbnN0YW5jZSB3aGljaCBoYXMgdGhlIGFiaWxpdHkgdG9cbiAgICAgKiAgZGV0ZWN0IChhbmQgdGhyb3cgYW4gZXJyb3IpIGlmIHRoZSB0cmFuc2FjdGlvbiBpcyByZXBsYWNlZCwgd2hpY2hcbiAgICAgKiAgd2lsbCBiZWdpbiBzY2FubmluZyBhdCAlJXN0YXJ0QmxvY2slJS5cbiAgICAgKlxuICAgICAqICBUaGlzIHNob3VsZCBnZW5lcmFsbHkgbm90IGJlIHVzZWQgYnkgZGV2ZWxvcGVycyBhbmQgaXMgaW50ZW5kZWRcbiAgICAgKiAgcHJpbWFyaWx5IGZvciBpbnRlcm5hbCB1c2UuIFNldHRpbmcgYW4gaW5jb3JyZWN0ICUlc3RhcnRCbG9jayUlIGNhblxuICAgICAqICBoYXZlIGRldmFzdGF0aW5nIHBlcmZvcm1hbmNlIGNvbnNlcXVlbmNlcyBpZiB1c2VkIGluY29ycmVjdGx5LlxuICAgICAqL1xuICAgIHJlcGxhY2VhYmxlVHJhbnNhY3Rpb24oc3RhcnRCbG9jaykge1xuICAgICAgICBhc3NlcnRBcmd1bWVudChOdW1iZXIuaXNJbnRlZ2VyKHN0YXJ0QmxvY2spICYmIHN0YXJ0QmxvY2sgPj0gMCwgXCJpbnZhbGlkIHN0YXJ0QmxvY2tcIiwgXCJzdGFydEJsb2NrXCIsIHN0YXJ0QmxvY2spO1xuICAgICAgICBjb25zdCB0eCA9IG5ldyBUcmFuc2FjdGlvblJlc3BvbnNlKHRoaXMsIHRoaXMucHJvdmlkZXIpO1xuICAgICAgICB0eC4jc3RhcnRCbG9jayA9IHN0YXJ0QmxvY2s7XG4gICAgICAgIHJldHVybiB0eDtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVPcnBoYW5lZEJsb2NrRmlsdGVyKGJsb2NrKSB7XG4gICAgcmV0dXJuIHsgb3JwaGFuOiBcImRyb3AtYmxvY2tcIiwgaGFzaDogYmxvY2suaGFzaCwgbnVtYmVyOiBibG9jay5udW1iZXIgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlb3JkZXJlZFRyYW5zYWN0aW9uRmlsdGVyKHR4LCBvdGhlcikge1xuICAgIHJldHVybiB7IG9ycGhhbjogXCJyZW9yZGVyLXRyYW5zYWN0aW9uXCIsIHR4LCBvdGhlciB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUmVtb3ZlZFRyYW5zYWN0aW9uRmlsdGVyKHR4KSB7XG4gICAgcmV0dXJuIHsgb3JwaGFuOiBcImRyb3AtdHJhbnNhY3Rpb25cIiwgdHggfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlbW92ZWRMb2dGaWx0ZXIobG9nKSB7XG4gICAgcmV0dXJuIHsgb3JwaGFuOiBcImRyb3AtbG9nXCIsIGxvZzoge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb25IYXNoOiBsb2cudHJhbnNhY3Rpb25IYXNoLFxuICAgICAgICAgICAgYmxvY2tIYXNoOiBsb2cuYmxvY2tIYXNoLFxuICAgICAgICAgICAgYmxvY2tOdW1iZXI6IGxvZy5ibG9ja051bWJlcixcbiAgICAgICAgICAgIGFkZHJlc3M6IGxvZy5hZGRyZXNzLFxuICAgICAgICAgICAgZGF0YTogbG9nLmRhdGEsXG4gICAgICAgICAgICB0b3BpY3M6IE9iamVjdC5mcmVlemUobG9nLnRvcGljcy5zbGljZSgpKSxcbiAgICAgICAgICAgIGluZGV4OiBsb2cuaW5kZXhcbiAgICAgICAgfSB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXIuanMubWFwIiwiLyoqXG4gKiAgRXZlbnRzIGFsbG93IGZvciBhcHBsaWNhdGlvbnMgdG8gdXNlIHRoZSBvYnNlcnZlciBwYXR0ZXJuLCB3aGljaFxuICogIGFsbG93cyBzdWJzY3JpYmluZyBhbmQgcHVibGlzaGluZyBldmVudHMsIG91dHNpZGUgdGhlIG5vcm1hbFxuICogIGV4ZWN1dGlvbiBwYXRocy5cbiAqXG4gKiAgQF9zZWN0aW9uIGFwaS91dGlscy9ldmVudHM6RXZlbnRzICBbYWJvdXQtZXZlbnRzXVxuICovXG5pbXBvcnQgeyBkZWZpbmVQcm9wZXJ0aWVzIH0gZnJvbSBcIi4vcHJvcGVydGllcy5qc1wiO1xuLyoqXG4gKiAgV2hlbiBhbiBbW0V2ZW50RW1pdHRlcmFibGVdXSB0cmlnZ2VycyBhIFtbTGlzdGVuZXJdXSwgdGhlXG4gKiAgY2FsbGJhY2sgYWx3YXlzIGFoYXMgb25lIGFkZGl0aW9uYWwgYXJndW1lbnQgcGFzc2VkLCB3aGljaCBpc1xuICogIGFuICoqRXZlbnRQYXlsb2FkKiouXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudFBheWxvYWQge1xuICAgIC8qKlxuICAgICAqICBUaGUgZXZlbnQgZmlsdGVyLlxuICAgICAqL1xuICAgIGZpbHRlcjtcbiAgICAvKipcbiAgICAgKiAgVGhlICoqRXZlbnRFbWl0dGVyYWJsZSoqLlxuICAgICAqL1xuICAgIGVtaXR0ZXI7XG4gICAgI2xpc3RlbmVyO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGUgYSBuZXcgKipFdmVudFBheWxvYWQqKiBmb3IgJSVlbWl0dGVyJSUgd2l0aFxuICAgICAqICB0aGUgJSVsaXN0ZW5lciUlIGFuZCBmb3IgJSVmaWx0ZXIlJS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbWl0dGVyLCBsaXN0ZW5lciwgZmlsdGVyKSB7XG4gICAgICAgIHRoaXMuI2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBlbWl0dGVyLCBmaWx0ZXIgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBVbnJlZ2lzdGVyIHRoZSB0cmlnZ2VyZWQgbGlzdGVuZXIgZm9yIGZ1dHVyZSBldmVudHMuXG4gICAgICovXG4gICAgYXN5bmMgcmVtb3ZlTGlzdGVuZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLiNsaXN0ZW5lciA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5lbWl0dGVyLm9mZih0aGlzLmZpbHRlciwgdGhpcy4jbGlzdGVuZXIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50cy5qcy5tYXAiLCIvLyBpbXBvcnQgZnJvbSBwcm92aWRlci50cyBpbnN0ZWFkIG9mIGluZGV4LnRzIHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwXG4vLyBmcm9tIEV0aGVyc2NhblByb3ZpZGVyXG5pbXBvcnQgeyBMb2csIFRyYW5zYWN0aW9uUmVjZWlwdCwgVHJhbnNhY3Rpb25SZXNwb25zZSB9IGZyb20gXCIuLi9wcm92aWRlcnMvcHJvdmlkZXIuanNcIjtcbmltcG9ydCB7IGRlZmluZVByb3BlcnRpZXMsIEV2ZW50UGF5bG9hZCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuLyoqXG4gKiAgQW4gKipFdmVudExvZyoqIGNvbnRhaW5zIGFkZGl0aW9uYWwgcHJvcGVydGllcyBwYXJzZWQgZnJvbSB0aGUgW1tMb2ddXS5cbiAqL1xuZXhwb3J0IGNsYXNzIEV2ZW50TG9nIGV4dGVuZHMgTG9nIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIENvbnRyYWN0IEludGVyZmFjZS5cbiAgICAgKi9cbiAgICBpbnRlcmZhY2U7XG4gICAgLyoqXG4gICAgICogIFRoZSBtYXRjaGluZyBldmVudC5cbiAgICAgKi9cbiAgICBmcmFnbWVudDtcbiAgICAvKipcbiAgICAgKiAgVGhlIHBhcnNlZCBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBldmVudCBieSBgYGVtaXRgYC5cbiAgICAgKi9cbiAgICBhcmdzO1xuICAgIC8qKlxuICAgICAqIEBfaWdub3JlOlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvZywgaWZhY2UsIGZyYWdtZW50KSB7XG4gICAgICAgIHN1cGVyKGxvZywgbG9nLnByb3ZpZGVyKTtcbiAgICAgICAgY29uc3QgYXJncyA9IGlmYWNlLmRlY29kZUV2ZW50TG9nKGZyYWdtZW50LCBsb2cuZGF0YSwgbG9nLnRvcGljcyk7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBhcmdzLCBmcmFnbWVudCwgaW50ZXJmYWNlOiBpZmFjZSB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBuYW1lIG9mIHRoZSBldmVudC5cbiAgICAgKi9cbiAgICBnZXQgZXZlbnROYW1lKCkgeyByZXR1cm4gdGhpcy5mcmFnbWVudC5uYW1lOyB9XG4gICAgLyoqXG4gICAgICogIFRoZSBzaWduYXR1cmUgb2YgdGhlIGV2ZW50LlxuICAgICAqL1xuICAgIGdldCBldmVudFNpZ25hdHVyZSgpIHsgcmV0dXJuIHRoaXMuZnJhZ21lbnQuZm9ybWF0KCk7IH1cbn1cbi8qKlxuICogIEFuICoqRXZlbnRMb2cqKiBjb250YWlucyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgcGFyc2VkIGZyb20gdGhlIFtbTG9nXV0uXG4gKi9cbmV4cG9ydCBjbGFzcyBVbmRlY29kZWRFdmVudExvZyBleHRlbmRzIExvZyB7XG4gICAgLyoqXG4gICAgICogIFRoZSBlcnJvciBlbmNvdW50ZWQgd2hlbiB0cnlpbmcgdG8gZGVjb2RlIHRoZSBsb2cuXG4gICAgICovXG4gICAgZXJyb3I7XG4gICAgLyoqXG4gICAgICogQF9pZ25vcmU6XG4gICAgICovXG4gICAgY29uc3RydWN0b3IobG9nLCBlcnJvcikge1xuICAgICAgICBzdXBlcihsb2csIGxvZy5wcm92aWRlcik7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBlcnJvciB9KTtcbiAgICB9XG59XG4vKipcbiAqICBBICoqQ29udHJhY3RUcmFuc2FjdGlvblJlY2VpcHQqKiBpbmNsdWRlcyB0aGUgcGFyc2VkIGxvZ3MgZnJvbSBhXG4gKiAgW1tUcmFuc2FjdGlvblJlY2VpcHRdXS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRyYWN0VHJhbnNhY3Rpb25SZWNlaXB0IGV4dGVuZHMgVHJhbnNhY3Rpb25SZWNlaXB0IHtcbiAgICAjaWZhY2U7XG4gICAgLyoqXG4gICAgICogIEBfaWdub3JlOlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGlmYWNlLCBwcm92aWRlciwgdHgpIHtcbiAgICAgICAgc3VwZXIodHgsIHByb3ZpZGVyKTtcbiAgICAgICAgdGhpcy4jaWZhY2UgPSBpZmFjZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBwYXJzZWQgbG9ncyBmb3IgYW55IFtbTG9nXV0gd2hpY2ggaGFzIGEgbWF0Y2hpbmcgZXZlbnQgaW4gdGhlXG4gICAgICogIENvbnRyYWN0IEFCSS5cbiAgICAgKi9cbiAgICBnZXQgbG9ncygpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmxvZ3MubWFwKChsb2cpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gbG9nLnRvcGljcy5sZW5ndGggPyB0aGlzLiNpZmFjZS5nZXRFdmVudChsb2cudG9waWNzWzBdKSA6IG51bGw7XG4gICAgICAgICAgICBpZiAoZnJhZ21lbnQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEV2ZW50TG9nKGxvZywgdGhpcy4jaWZhY2UsIGZyYWdtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVW5kZWNvZGVkRXZlbnRMb2cobG9nLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGxvZztcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLyoqXG4gKiAgQSAqKkNvbnRyYWN0VHJhbnNhY3Rpb25SZXNwb25zZSoqIHdpbGwgcmV0dXJuIGFcbiAqICBbW0NvbnRyYWN0VHJhbnNhY3Rpb25SZWNlaXB0XV0gd2hlbiB3YWl0ZWQgb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250cmFjdFRyYW5zYWN0aW9uUmVzcG9uc2UgZXh0ZW5kcyBUcmFuc2FjdGlvblJlc3BvbnNlIHtcbiAgICAjaWZhY2U7XG4gICAgLyoqXG4gICAgICogIEBfaWdub3JlOlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGlmYWNlLCBwcm92aWRlciwgdHgpIHtcbiAgICAgICAgc3VwZXIodHgsIHByb3ZpZGVyKTtcbiAgICAgICAgdGhpcy4jaWZhY2UgPSBpZmFjZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmVzIG9uY2UgdGhpcyB0cmFuc2FjdGlvbiBoYXMgYmVlbiBtaW5lZCBhbmQgaGFzXG4gICAgICogICUlY29uZmlybXMlJSBibG9ja3MgaW5jbHVkaW5nIGl0IChkZWZhdWx0OiBgYDFgYCkgd2l0aCBhblxuICAgICAqICBvcHRpb25hbCAlJXRpbWVvdXQlJS5cbiAgICAgKlxuICAgICAqICBUaGlzIGNhbiByZXNvbHZlIHRvIGBgbnVsbGBgIG9ubHkgaWYgJSVjb25maXJtcyUlIGlzIGBgMGBgXG4gICAgICogIGFuZCB0aGUgdHJhbnNhY3Rpb24gaGFzIG5vdCBiZWVuIG1pbmVkLCBvdGhlcndpc2UgdGhpcyB3aWxsXG4gICAgICogIHdhaXQgdW50aWwgZW5vdWdoIGNvbmZpcm1hdGlvbnMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgYXN5bmMgd2FpdChjb25maXJtcywgdGltZW91dCkge1xuICAgICAgICBjb25zdCByZWNlaXB0ID0gYXdhaXQgc3VwZXIud2FpdChjb25maXJtcywgdGltZW91dCk7XG4gICAgICAgIGlmIChyZWNlaXB0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQ29udHJhY3RUcmFuc2FjdGlvblJlY2VpcHQodGhpcy4jaWZhY2UsIHRoaXMucHJvdmlkZXIsIHJlY2VpcHQpO1xuICAgIH1cbn1cbi8qKlxuICogIEEgKipDb250cmFjdFVua25vd25FdmVudFBheWxvYWQqKiBpcyBpbmNsdWRlZCBhcyB0aGUgbGFzdCBwYXJhbWV0ZXIgdG9cbiAqICBDb250cmFjdCBFdmVudHMgd2hlbiB0aGUgZXZlbnQgZG9lcyBub3QgbWF0Y2ggYW55IGV2ZW50cyBpbiB0aGUgQUJJLlxuICovXG5leHBvcnQgY2xhc3MgQ29udHJhY3RVbmtub3duRXZlbnRQYXlsb2FkIGV4dGVuZHMgRXZlbnRQYXlsb2FkIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIGxvZyB3aXRoIG5vIG1hdGNoaW5nIGV2ZW50cy5cbiAgICAgKi9cbiAgICBsb2c7XG4gICAgLyoqXG4gICAgICogIEBfZXZlbnQ6XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29udHJhY3QsIGxpc3RlbmVyLCBmaWx0ZXIsIGxvZykge1xuICAgICAgICBzdXBlcihjb250cmFjdCwgbGlzdGVuZXIsIGZpbHRlcik7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBsb2cgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXNvbHZlcyB0byB0aGUgYmxvY2sgdGhlIGV2ZW50IG9jY3VyZWQgaW4uXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QmxvY2soKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmxvZy5nZXRCbG9jaygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb2x2ZXMgdG8gdGhlIHRyYW5zYWN0aW9uIHRoZSBldmVudCBvY2N1cmVkIGluLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRyYW5zYWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5sb2cuZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmVzIHRvIHRoZSB0cmFuc2FjdGlvbiByZWNlaXB0IHRoZSBldmVudCBvY2N1cmVkIGluLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRyYW5zYWN0aW9uUmVjZWlwdCgpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMubG9nLmdldFRyYW5zYWN0aW9uUmVjZWlwdCgpO1xuICAgIH1cbn1cbi8qKlxuICogIEEgKipDb250cmFjdEV2ZW50UGF5bG9hZCoqIGlzIGluY2x1ZGVkIGFzIHRoZSBsYXN0IHBhcmFtZXRlciB0b1xuICogIENvbnRyYWN0IEV2ZW50cyB3aGVuIHRoZSBldmVudCBpcyBrbm93bi5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRyYWN0RXZlbnRQYXlsb2FkIGV4dGVuZHMgQ29udHJhY3RVbmtub3duRXZlbnRQYXlsb2FkIHtcbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29udHJhY3QsIGxpc3RlbmVyLCBmaWx0ZXIsIGZyYWdtZW50LCBfbG9nKSB7XG4gICAgICAgIHN1cGVyKGNvbnRyYWN0LCBsaXN0ZW5lciwgZmlsdGVyLCBuZXcgRXZlbnRMb2coX2xvZywgY29udHJhY3QuaW50ZXJmYWNlLCBmcmFnbWVudCkpO1xuICAgICAgICBjb25zdCBhcmdzID0gY29udHJhY3QuaW50ZXJmYWNlLmRlY29kZUV2ZW50TG9nKGZyYWdtZW50LCB0aGlzLmxvZy5kYXRhLCB0aGlzLmxvZy50b3BpY3MpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgYXJncywgZnJhZ21lbnQgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgZXZlbnQgbmFtZS5cbiAgICAgKi9cbiAgICBnZXQgZXZlbnROYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcmFnbWVudC5uYW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIGV2ZW50IHNpZ25hdHVyZS5cbiAgICAgKi9cbiAgICBnZXQgZXZlbnRTaWduYXR1cmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyYWdtZW50LmZvcm1hdCgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBwZXJzLmpzLm1hcCIsImltcG9ydCB7IEludGVyZmFjZSwgVHlwZWQgfSBmcm9tIFwiLi4vYWJpL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc0FkZHJlc3NhYmxlLCByZXNvbHZlQWRkcmVzcyB9IGZyb20gXCIuLi9hZGRyZXNzL2luZGV4LmpzXCI7XG4vLyBpbXBvcnQgZnJvbSBwcm92aWRlci50cyBpbnN0ZWFkIG9mIGluZGV4LnRzIHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwXG4vLyBmcm9tIEV0aGVyc2NhblByb3ZpZGVyXG5pbXBvcnQgeyBjb3B5UmVxdWVzdCwgTG9nIH0gZnJvbSBcIi4uL3Byb3ZpZGVycy9wcm92aWRlci5qc1wiO1xuaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcywgZ2V0QmlnSW50LCBpc0NhbGxFeGNlcHRpb24sIGlzSGV4U3RyaW5nLCByZXNvbHZlUHJvcGVydGllcywgaXNFcnJvciwgbWFrZUVycm9yLCBhc3NlcnQsIGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBDb250cmFjdEV2ZW50UGF5bG9hZCwgQ29udHJhY3RVbmtub3duRXZlbnRQYXlsb2FkLCBDb250cmFjdFRyYW5zYWN0aW9uUmVzcG9uc2UsIEV2ZW50TG9nLCBVbmRlY29kZWRFdmVudExvZyB9IGZyb20gXCIuL3dyYXBwZXJzLmpzXCI7XG5jb25zdCBCTl8wID0gQmlnSW50KDApO1xuZnVuY3Rpb24gY2FuQ2FsbCh2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdHlwZW9mICh2YWx1ZS5jYWxsKSA9PT0gXCJmdW5jdGlvblwiKTtcbn1cbmZ1bmN0aW9uIGNhbkVzdGltYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB0eXBlb2YgKHZhbHVlLmVzdGltYXRlR2FzKSA9PT0gXCJmdW5jdGlvblwiKTtcbn1cbmZ1bmN0aW9uIGNhblJlc29sdmUodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiAodmFsdWUucmVzb2x2ZU5hbWUpID09PSBcImZ1bmN0aW9uXCIpO1xufVxuZnVuY3Rpb24gY2FuU2VuZCh2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdHlwZW9mICh2YWx1ZS5zZW5kVHJhbnNhY3Rpb24pID09PSBcImZ1bmN0aW9uXCIpO1xufVxuZnVuY3Rpb24gZ2V0UmVzb2x2ZXIodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBpZiAoY2FuUmVzb2x2ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUucHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5wcm92aWRlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuY2xhc3MgUHJlcGFyZWRUb3BpY0ZpbHRlciB7XG4gICAgI2ZpbHRlcjtcbiAgICBmcmFnbWVudDtcbiAgICBjb25zdHJ1Y3Rvcihjb250cmFjdCwgZnJhZ21lbnQsIGFyZ3MpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IGZyYWdtZW50IH0pO1xuICAgICAgICBpZiAoZnJhZ21lbnQuaW5wdXRzLmxlbmd0aCA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbWFueSBhcmd1bWVudHNcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZGVzY2VuZCBpbnRvIGFyZ3MgYW5kIHJlc29sdmUgYW55IGFkZHJlc3Nlc1xuICAgICAgICBjb25zdCBydW5uZXIgPSBnZXRSdW5uZXIoY29udHJhY3QucnVubmVyLCBcInJlc29sdmVOYW1lXCIpO1xuICAgICAgICBjb25zdCByZXNvbHZlciA9IGNhblJlc29sdmUocnVubmVyKSA/IHJ1bm5lciA6IG51bGw7XG4gICAgICAgIHRoaXMuI2ZpbHRlciA9IChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZEFyZ3MgPSBhd2FpdCBQcm9taXNlLmFsbChmcmFnbWVudC5pbnB1dHMubWFwKChwYXJhbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcmcgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoYXJnID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbS53YWxrQXN5bmMoYXJnc1tpbmRleF0sICh0eXBlLCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJhZGRyZXNzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZS5tYXAoKHYpID0+IHJlc29sdmVBZGRyZXNzKHYsIHJlc29sdmVyKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVBZGRyZXNzKHZhbHVlLCByZXNvbHZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVGaWx0ZXJUb3BpY3MoZnJhZ21lbnQsIHJlc29sdmVkQXJncyk7XG4gICAgICAgIH0pKCk7XG4gICAgfVxuICAgIGdldFRvcGljRmlsdGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZmlsdGVyO1xuICAgIH1cbn1cbi8vIEEgPSBBcmd1bWVudHMgcGFzc2VkIGluIGFzIGEgdHVwbGVcbi8vIFIgPSBUaGUgcmVzdWx0IHR5cGUgb2YgdGhlIGNhbGwgKGkuZS4gaWYgb25seSBvbmUgcmV0dXJuIHR5cGUsXG4vLyAgICAgdGhlIHF1YWxpZmllZCB0eXBlLCBvdGhlcndpc2UgUmVzdWx0KVxuLy8gRCA9IFRoZSB0eXBlIHRoZSBkZWZhdWx0IGNhbGwgd2lsbCByZXR1cm4gKGkuZS4gUiBmb3Igdmlldy9wdXJlLFxuLy8gICAgIFRyYW5zYWN0aW9uUmVzcG9uc2Ugb3RoZXJ3aXNlKVxuLy9leHBvcnQgaW50ZXJmYWNlIENvbnRyYWN0TWV0aG9kPEEgZXh0ZW5kcyBBcnJheTxhbnk+ID0gQXJyYXk8YW55PiwgUiA9IGFueSwgRCBleHRlbmRzIFIgfCBDb250cmFjdFRyYW5zYWN0aW9uUmVzcG9uc2UgPSBDb250cmFjdFRyYW5zYWN0aW9uUmVzcG9uc2U+IHtcbmZ1bmN0aW9uIGdldFJ1bm5lcih2YWx1ZSwgZmVhdHVyZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodHlwZW9mICh2YWx1ZVtmZWF0dXJlXSkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZS5wcm92aWRlciAmJiB0eXBlb2YgKHZhbHVlLnByb3ZpZGVyW2ZlYXR1cmVdKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5wcm92aWRlcjtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBnZXRQcm92aWRlcih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUucHJvdmlkZXIgfHwgbnVsbDtcbn1cbi8qKlxuICogIEBfaWdub3JlOlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29weU92ZXJyaWRlcyhhcmcsIGFsbG93ZWQpIHtcbiAgICAvLyBNYWtlIHN1cmUgdGhlIG92ZXJyaWRlcyBwYXNzZWQgaW4gYXJlIGEgdmFsaWQgb3ZlcnJpZGVzIG9iamVjdFxuICAgIGNvbnN0IF9vdmVycmlkZXMgPSBUeXBlZC5kZXJlZmVyZW5jZShhcmcsIFwib3ZlcnJpZGVzXCIpO1xuICAgIGFzc2VydEFyZ3VtZW50KHR5cGVvZiAoX292ZXJyaWRlcykgPT09IFwib2JqZWN0XCIsIFwiaW52YWxpZCBvdmVycmlkZXMgcGFyYW1ldGVyXCIsIFwib3ZlcnJpZGVzXCIsIGFyZyk7XG4gICAgLy8gQ3JlYXRlIGEgc2hhbGxvdyBjb3B5ICh3ZSdsbCBkZWVwLWlmeSBhbnl0aGluZyBuZWVkZWQgZHVyaW5nIG5vcm1hbGl6aW5nKVxuICAgIGNvbnN0IG92ZXJyaWRlcyA9IGNvcHlSZXF1ZXN0KF9vdmVycmlkZXMpO1xuICAgIGFzc2VydEFyZ3VtZW50KG92ZXJyaWRlcy50byA9PSBudWxsIHx8IChhbGxvd2VkIHx8IFtdKS5pbmRleE9mKFwidG9cIikgPj0gMCwgXCJjYW5ub3Qgb3ZlcnJpZGUgdG9cIiwgXCJvdmVycmlkZXMudG9cIiwgb3ZlcnJpZGVzLnRvKTtcbiAgICBhc3NlcnRBcmd1bWVudChvdmVycmlkZXMuZGF0YSA9PSBudWxsIHx8IChhbGxvd2VkIHx8IFtdKS5pbmRleE9mKFwiZGF0YVwiKSA+PSAwLCBcImNhbm5vdCBvdmVycmlkZSBkYXRhXCIsIFwib3ZlcnJpZGVzLmRhdGFcIiwgb3ZlcnJpZGVzLmRhdGEpO1xuICAgIC8vIFJlc29sdmUgYW55IGZyb21cbiAgICBpZiAob3ZlcnJpZGVzLmZyb20pIHtcbiAgICAgICAgb3ZlcnJpZGVzLmZyb20gPSBvdmVycmlkZXMuZnJvbTtcbiAgICB9XG4gICAgcmV0dXJuIG92ZXJyaWRlcztcbn1cbi8qKlxuICogIEBfaWdub3JlOlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUFyZ3MoX3J1bm5lciwgaW5wdXRzLCBhcmdzKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgZGVzY2VuZCBpbnRvIGFyZ3MgYW5kIHJlc29sdmUgYW55IGFkZHJlc3Nlc1xuICAgIGNvbnN0IHJ1bm5lciA9IGdldFJ1bm5lcihfcnVubmVyLCBcInJlc29sdmVOYW1lXCIpO1xuICAgIGNvbnN0IHJlc29sdmVyID0gY2FuUmVzb2x2ZShydW5uZXIpID8gcnVubmVyIDogbnVsbDtcbiAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwoaW5wdXRzLm1hcCgocGFyYW0sIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiBwYXJhbS53YWxrQXN5bmMoYXJnc1tpbmRleF0sICh0eXBlLCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdmFsdWUgPSBUeXBlZC5kZXJlZmVyZW5jZSh2YWx1ZSwgdHlwZSk7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJhZGRyZXNzXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUFkZHJlc3ModmFsdWUsIHJlc29sdmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfSkpO1xufVxuZnVuY3Rpb24gYnVpbGRXcmFwcGVkRmFsbGJhY2soY29udHJhY3QpIHtcbiAgICBjb25zdCBwb3B1bGF0ZVRyYW5zYWN0aW9uID0gYXN5bmMgZnVuY3Rpb24gKG92ZXJyaWRlcykge1xuICAgICAgICAvLyBJZiBhbiBvdmVycmlkZXMgd2FzIHBhc3NlZCBpbiwgY29weSBpdCBhbmQgbm9ybWFsaXplIHRoZSB2YWx1ZXNcbiAgICAgICAgY29uc3QgdHggPSAoYXdhaXQgY29weU92ZXJyaWRlcyhvdmVycmlkZXMsIFtcImRhdGFcIl0pKTtcbiAgICAgICAgdHgudG8gPSBhd2FpdCBjb250cmFjdC5nZXRBZGRyZXNzKCk7XG4gICAgICAgIGlmICh0eC5mcm9tKSB7XG4gICAgICAgICAgICB0eC5mcm9tID0gYXdhaXQgcmVzb2x2ZUFkZHJlc3ModHguZnJvbSwgZ2V0UmVzb2x2ZXIoY29udHJhY3QucnVubmVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWZhY2UgPSBjb250cmFjdC5pbnRlcmZhY2U7XG4gICAgICAgIGNvbnN0IG5vVmFsdWUgPSAoZ2V0QmlnSW50KCh0eC52YWx1ZSB8fCBCTl8wKSwgXCJvdmVycmlkZXMudmFsdWVcIikgPT09IEJOXzApO1xuICAgICAgICBjb25zdCBub0RhdGEgPSAoKHR4LmRhdGEgfHwgXCIweFwiKSA9PT0gXCIweFwiKTtcbiAgICAgICAgaWYgKGlmYWNlLmZhbGxiYWNrICYmICFpZmFjZS5mYWxsYmFjay5wYXlhYmxlICYmIGlmYWNlLnJlY2VpdmUgJiYgIW5vRGF0YSAmJiAhbm9WYWx1ZSkge1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwiY2Fubm90IHNlbmQgZGF0YSB0byByZWNlaXZlIG9yIHNlbmQgdmFsdWUgdG8gbm9uLXBheWFibGUgZmFsbGJhY2tcIiwgXCJvdmVycmlkZXNcIiwgb3ZlcnJpZGVzKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnRBcmd1bWVudChpZmFjZS5mYWxsYmFjayB8fCBub0RhdGEsIFwiY2Fubm90IHNlbmQgZGF0YSB0byByZWNlaXZlLW9ubHkgY29udHJhY3RcIiwgXCJvdmVycmlkZXMuZGF0YVwiLCB0eC5kYXRhKTtcbiAgICAgICAgLy8gT25seSBhbGxvdyBwYXlhYmxlIGNvbnRyYWN0cyB0byBzZXQgbm9uLXplcm8gdmFsdWVcbiAgICAgICAgY29uc3QgcGF5YWJsZSA9IGlmYWNlLnJlY2VpdmUgfHwgKGlmYWNlLmZhbGxiYWNrICYmIGlmYWNlLmZhbGxiYWNrLnBheWFibGUpO1xuICAgICAgICBhc3NlcnRBcmd1bWVudChwYXlhYmxlIHx8IG5vVmFsdWUsIFwiY2Fubm90IHNlbmQgdmFsdWUgdG8gbm9uLXBheWFibGUgZmFsbGJhY2tcIiwgXCJvdmVycmlkZXMudmFsdWVcIiwgdHgudmFsdWUpO1xuICAgICAgICAvLyBPbmx5IGFsbG93IGZhbGxiYWNrIGNvbnRyYWN0cyB0byBzZXQgbm9uLWVtcHR5IGRhdGFcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoaWZhY2UuZmFsbGJhY2sgfHwgbm9EYXRhLCBcImNhbm5vdCBzZW5kIGRhdGEgdG8gcmVjZWl2ZS1vbmx5IGNvbnRyYWN0XCIsIFwib3ZlcnJpZGVzLmRhdGFcIiwgdHguZGF0YSk7XG4gICAgICAgIHJldHVybiB0eDtcbiAgICB9O1xuICAgIGNvbnN0IHN0YXRpY0NhbGwgPSBhc3luYyBmdW5jdGlvbiAob3ZlcnJpZGVzKSB7XG4gICAgICAgIGNvbnN0IHJ1bm5lciA9IGdldFJ1bm5lcihjb250cmFjdC5ydW5uZXIsIFwiY2FsbFwiKTtcbiAgICAgICAgYXNzZXJ0KGNhbkNhbGwocnVubmVyKSwgXCJjb250cmFjdCBydW5uZXIgZG9lcyBub3Qgc3VwcG9ydCBjYWxsaW5nXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcImNhbGxcIiB9KTtcbiAgICAgICAgY29uc3QgdHggPSBhd2FpdCBwb3B1bGF0ZVRyYW5zYWN0aW9uKG92ZXJyaWRlcyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgcnVubmVyLmNhbGwodHgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQ2FsbEV4Y2VwdGlvbihlcnJvcikgJiYgZXJyb3IuZGF0YSkge1xuICAgICAgICAgICAgICAgIHRocm93IGNvbnRyYWN0LmludGVyZmFjZS5tYWtlRXJyb3IoZXJyb3IuZGF0YSwgdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNlbmQgPSBhc3luYyBmdW5jdGlvbiAob3ZlcnJpZGVzKSB7XG4gICAgICAgIGNvbnN0IHJ1bm5lciA9IGNvbnRyYWN0LnJ1bm5lcjtcbiAgICAgICAgYXNzZXJ0KGNhblNlbmQocnVubmVyKSwgXCJjb250cmFjdCBydW5uZXIgZG9lcyBub3Qgc3VwcG9ydCBzZW5kaW5nIHRyYW5zYWN0aW9uc1wiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJzZW5kVHJhbnNhY3Rpb25cIiB9KTtcbiAgICAgICAgY29uc3QgdHggPSBhd2FpdCBydW5uZXIuc2VuZFRyYW5zYWN0aW9uKGF3YWl0IHBvcHVsYXRlVHJhbnNhY3Rpb24ob3ZlcnJpZGVzKSk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gZ2V0UHJvdmlkZXIoY29udHJhY3QucnVubmVyKTtcbiAgICAgICAgLy8gQFRPRE86IHRoZSBwcm92aWRlciBjYW4gYmUgbnVsbDsgbWFrZSBhIGN1c3RvbSBkdW1teSBwcm92aWRlciB0aGF0IHdpbGwgdGhyb3cgYVxuICAgICAgICAvLyBtZWFuaW5nZnVsIGVycm9yXG4gICAgICAgIHJldHVybiBuZXcgQ29udHJhY3RUcmFuc2FjdGlvblJlc3BvbnNlKGNvbnRyYWN0LmludGVyZmFjZSwgcHJvdmlkZXIsIHR4KTtcbiAgICB9O1xuICAgIGNvbnN0IGVzdGltYXRlR2FzID0gYXN5bmMgZnVuY3Rpb24gKG92ZXJyaWRlcykge1xuICAgICAgICBjb25zdCBydW5uZXIgPSBnZXRSdW5uZXIoY29udHJhY3QucnVubmVyLCBcImVzdGltYXRlR2FzXCIpO1xuICAgICAgICBhc3NlcnQoY2FuRXN0aW1hdGUocnVubmVyKSwgXCJjb250cmFjdCBydW5uZXIgZG9lcyBub3Qgc3VwcG9ydCBnYXMgZXN0aW1hdGlvblwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJlc3RpbWF0ZUdhc1wiIH0pO1xuICAgICAgICByZXR1cm4gYXdhaXQgcnVubmVyLmVzdGltYXRlR2FzKGF3YWl0IHBvcHVsYXRlVHJhbnNhY3Rpb24ob3ZlcnJpZGVzKSk7XG4gICAgfTtcbiAgICBjb25zdCBtZXRob2QgPSBhc3luYyAob3ZlcnJpZGVzKSA9PiB7XG4gICAgICAgIHJldHVybiBhd2FpdCBzZW5kKG92ZXJyaWRlcyk7XG4gICAgfTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKG1ldGhvZCwge1xuICAgICAgICBfY29udHJhY3Q6IGNvbnRyYWN0LFxuICAgICAgICBlc3RpbWF0ZUdhcyxcbiAgICAgICAgcG9wdWxhdGVUcmFuc2FjdGlvbixcbiAgICAgICAgc2VuZCwgc3RhdGljQ2FsbFxuICAgIH0pO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG5mdW5jdGlvbiBidWlsZFdyYXBwZWRNZXRob2QoY29udHJhY3QsIGtleSkge1xuICAgIGNvbnN0IGdldEZyYWdtZW50ID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBjb250cmFjdC5pbnRlcmZhY2UuZ2V0RnVuY3Rpb24oa2V5LCBhcmdzKTtcbiAgICAgICAgYXNzZXJ0KGZyYWdtZW50LCBcIm5vIG1hdGNoaW5nIGZyYWdtZW50XCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJmcmFnbWVudFwiLFxuICAgICAgICAgICAgaW5mbzogeyBrZXksIGFyZ3MgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgIH07XG4gICAgY29uc3QgcG9wdWxhdGVUcmFuc2FjdGlvbiA9IGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gZ2V0RnJhZ21lbnQoLi4uYXJncyk7XG4gICAgICAgIC8vIElmIGFuIG92ZXJyaWRlcyB3YXMgcGFzc2VkIGluLCBjb3B5IGl0IGFuZCBub3JtYWxpemUgdGhlIHZhbHVlc1xuICAgICAgICBsZXQgb3ZlcnJpZGVzID0ge307XG4gICAgICAgIGlmIChmcmFnbWVudC5pbnB1dHMubGVuZ3RoICsgMSA9PT0gYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIG92ZXJyaWRlcyA9IGF3YWl0IGNvcHlPdmVycmlkZXMoYXJncy5wb3AoKSk7XG4gICAgICAgICAgICBpZiAob3ZlcnJpZGVzLmZyb20pIHtcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuZnJvbSA9IGF3YWl0IHJlc29sdmVBZGRyZXNzKG92ZXJyaWRlcy5mcm9tLCBnZXRSZXNvbHZlcihjb250cmFjdC5ydW5uZXIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJhZ21lbnQuaW5wdXRzLmxlbmd0aCAhPT0gYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludGVybmFsIGVycm9yOiBmcmFnbWVudCBpbnB1dHMgZG9lc24ndCBtYXRjaCBhcmd1bWVudHM7IHNob3VsZCBub3QgaGFwcGVuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc29sdmVkQXJncyA9IGF3YWl0IHJlc29sdmVBcmdzKGNvbnRyYWN0LnJ1bm5lciwgZnJhZ21lbnQuaW5wdXRzLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIG92ZXJyaWRlcywgYXdhaXQgcmVzb2x2ZVByb3BlcnRpZXMoe1xuICAgICAgICAgICAgdG86IGNvbnRyYWN0LmdldEFkZHJlc3MoKSxcbiAgICAgICAgICAgIGRhdGE6IGNvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVGdW5jdGlvbkRhdGEoZnJhZ21lbnQsIHJlc29sdmVkQXJncylcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgY29uc3Qgc3RhdGljQ2FsbCA9IGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0YXRpY0NhbGxSZXN1bHQoLi4uYXJncyk7XG4gICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0WzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBjb25zdCBzZW5kID0gYXN5bmMgZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gY29udHJhY3QucnVubmVyO1xuICAgICAgICBhc3NlcnQoY2FuU2VuZChydW5uZXIpLCBcImNvbnRyYWN0IHJ1bm5lciBkb2VzIG5vdCBzdXBwb3J0IHNlbmRpbmcgdHJhbnNhY3Rpb25zXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcInNlbmRUcmFuc2FjdGlvblwiIH0pO1xuICAgICAgICBjb25zdCB0eCA9IGF3YWl0IHJ1bm5lci5zZW5kVHJhbnNhY3Rpb24oYXdhaXQgcG9wdWxhdGVUcmFuc2FjdGlvbiguLi5hcmdzKSk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gZ2V0UHJvdmlkZXIoY29udHJhY3QucnVubmVyKTtcbiAgICAgICAgLy8gQFRPRE86IHRoZSBwcm92aWRlciBjYW4gYmUgbnVsbDsgbWFrZSBhIGN1c3RvbSBkdW1teSBwcm92aWRlciB0aGF0IHdpbGwgdGhyb3cgYVxuICAgICAgICAvLyBtZWFuaW5nZnVsIGVycm9yXG4gICAgICAgIHJldHVybiBuZXcgQ29udHJhY3RUcmFuc2FjdGlvblJlc3BvbnNlKGNvbnRyYWN0LmludGVyZmFjZSwgcHJvdmlkZXIsIHR4KTtcbiAgICB9O1xuICAgIGNvbnN0IGVzdGltYXRlR2FzID0gYXN5bmMgZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gZ2V0UnVubmVyKGNvbnRyYWN0LnJ1bm5lciwgXCJlc3RpbWF0ZUdhc1wiKTtcbiAgICAgICAgYXNzZXJ0KGNhbkVzdGltYXRlKHJ1bm5lciksIFwiY29udHJhY3QgcnVubmVyIGRvZXMgbm90IHN1cHBvcnQgZ2FzIGVzdGltYXRpb25cIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IFwiZXN0aW1hdGVHYXNcIiB9KTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHJ1bm5lci5lc3RpbWF0ZUdhcyhhd2FpdCBwb3B1bGF0ZVRyYW5zYWN0aW9uKC4uLmFyZ3MpKTtcbiAgICB9O1xuICAgIGNvbnN0IHN0YXRpY0NhbGxSZXN1bHQgPSBhc3luYyBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBjb25zdCBydW5uZXIgPSBnZXRSdW5uZXIoY29udHJhY3QucnVubmVyLCBcImNhbGxcIik7XG4gICAgICAgIGFzc2VydChjYW5DYWxsKHJ1bm5lciksIFwiY29udHJhY3QgcnVubmVyIGRvZXMgbm90IHN1cHBvcnQgY2FsbGluZ1wiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJjYWxsXCIgfSk7XG4gICAgICAgIGNvbnN0IHR4ID0gYXdhaXQgcG9wdWxhdGVUcmFuc2FjdGlvbiguLi5hcmdzKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFwiMHhcIjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bm5lci5jYWxsKHR4KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0NhbGxFeGNlcHRpb24oZXJyb3IpICYmIGVycm9yLmRhdGEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBjb250cmFjdC5pbnRlcmZhY2UubWFrZUVycm9yKGVycm9yLmRhdGEsIHR4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gZ2V0RnJhZ21lbnQoLi4uYXJncyk7XG4gICAgICAgIHJldHVybiBjb250cmFjdC5pbnRlcmZhY2UuZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnJhZ21lbnQsIHJlc3VsdCk7XG4gICAgfTtcbiAgICBjb25zdCBtZXRob2QgPSBhc3luYyAoLi4uYXJncykgPT4ge1xuICAgICAgICBjb25zdCBmcmFnbWVudCA9IGdldEZyYWdtZW50KC4uLmFyZ3MpO1xuICAgICAgICBpZiAoZnJhZ21lbnQuY29uc3RhbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBzdGF0aWNDYWxsKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCBzZW5kKC4uLmFyZ3MpO1xuICAgIH07XG4gICAgZGVmaW5lUHJvcGVydGllcyhtZXRob2QsIHtcbiAgICAgICAgbmFtZTogY29udHJhY3QuaW50ZXJmYWNlLmdldEZ1bmN0aW9uTmFtZShrZXkpLFxuICAgICAgICBfY29udHJhY3Q6IGNvbnRyYWN0LCBfa2V5OiBrZXksXG4gICAgICAgIGdldEZyYWdtZW50LFxuICAgICAgICBlc3RpbWF0ZUdhcyxcbiAgICAgICAgcG9wdWxhdGVUcmFuc2FjdGlvbixcbiAgICAgICAgc2VuZCwgc3RhdGljQ2FsbCwgc3RhdGljQ2FsbFJlc3VsdCxcbiAgICB9KTtcbiAgICAvLyBPbmx5IHdvcmtzIG9uIG5vbi1hbWJpZ3VvdXMga2V5cyAocmVmaW5lZCBmcmFnbWVudCBpcyBhbHdheXMgbm9uLWFtYmlndW91cylcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWV0aG9kLCBcImZyYWdtZW50XCIsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmcmFnbWVudCA9IGNvbnRyYWN0LmludGVyZmFjZS5nZXRGdW5jdGlvbihrZXkpO1xuICAgICAgICAgICAgYXNzZXJ0KGZyYWdtZW50LCBcIm5vIG1hdGNoaW5nIGZyYWdtZW50XCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwiZnJhZ21lbnRcIixcbiAgICAgICAgICAgICAgICBpbmZvOiB7IGtleSB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG5mdW5jdGlvbiBidWlsZFdyYXBwZWRFdmVudChjb250cmFjdCwga2V5KSB7XG4gICAgY29uc3QgZ2V0RnJhZ21lbnQgPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBjb25zdCBmcmFnbWVudCA9IGNvbnRyYWN0LmludGVyZmFjZS5nZXRFdmVudChrZXksIGFyZ3MpO1xuICAgICAgICBhc3NlcnQoZnJhZ21lbnQsIFwibm8gbWF0Y2hpbmcgZnJhZ21lbnRcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcImZyYWdtZW50XCIsXG4gICAgICAgICAgICBpbmZvOiB7IGtleSwgYXJncyB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnJhZ21lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBtZXRob2QgPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gbmV3IFByZXBhcmVkVG9waWNGaWx0ZXIoY29udHJhY3QsIGdldEZyYWdtZW50KC4uLmFyZ3MpLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmluZVByb3BlcnRpZXMobWV0aG9kLCB7XG4gICAgICAgIG5hbWU6IGNvbnRyYWN0LmludGVyZmFjZS5nZXRFdmVudE5hbWUoa2V5KSxcbiAgICAgICAgX2NvbnRyYWN0OiBjb250cmFjdCwgX2tleToga2V5LFxuICAgICAgICBnZXRGcmFnbWVudFxuICAgIH0pO1xuICAgIC8vIE9ubHkgd29ya3Mgb24gbm9uLWFtYmlndW91cyBrZXlzIChyZWZpbmVkIGZyYWdtZW50IGlzIGFsd2F5cyBub24tYW1iaWd1b3VzKVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtZXRob2QsIFwiZnJhZ21lbnRcIiwge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gY29udHJhY3QuaW50ZXJmYWNlLmdldEV2ZW50KGtleSk7XG4gICAgICAgICAgICBhc3NlcnQoZnJhZ21lbnQsIFwibm8gbWF0Y2hpbmcgZnJhZ21lbnRcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJmcmFnbWVudFwiLFxuICAgICAgICAgICAgICAgIGluZm86IHsga2V5IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1ldGhvZDtcbn1cbi8vIFRoZSBjb21iaW5hdGlvbiBvZiBUeXBlU2NyeXBlLCBQcml2YXRlIEZpZWxkcyBhbmQgUHJveGllcyBtYWtlc1xuLy8gdGhlIHdvcmxkIGdvIGJvb207IHNvIHdlIGhpZGUgdmFyaWFibGVzIHdpdGggc29tZSB0cmlja2VyeSBrZWVwaW5nXG4vLyBhIHN5bWJvbCBhdHRhY2hlZCB0byBlYWNoIEJhc2VDb250cmFjdCB3aGljaCBpdHMgc3ViLWNsYXNzIChldmVuXG4vLyB2aWEgYSBQcm94eSkgY2FuIHJlYWNoIGFuZCB1c2UgdG8gbG9vayB1cCBpdHMgaW50ZXJuYWwgdmFsdWVzLlxuY29uc3QgaW50ZXJuYWwgPSBTeW1ib2wuZm9yKFwiX2V0aGVyc0ludGVybmFsX2NvbnRyYWN0XCIpO1xuY29uc3QgaW50ZXJuYWxWYWx1ZXMgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gc2V0SW50ZXJuYWwoY29udHJhY3QsIHZhbHVlcykge1xuICAgIGludGVybmFsVmFsdWVzLnNldChjb250cmFjdFtpbnRlcm5hbF0sIHZhbHVlcyk7XG59XG5mdW5jdGlvbiBnZXRJbnRlcm5hbChjb250cmFjdCkge1xuICAgIHJldHVybiBpbnRlcm5hbFZhbHVlcy5nZXQoY29udHJhY3RbaW50ZXJuYWxdKTtcbn1cbmZ1bmN0aW9uIGlzRGVmZXJyZWQodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiAodmFsdWUpID09PSBcIm9iamVjdFwiICYmIChcImdldFRvcGljRmlsdGVyXCIgaW4gdmFsdWUpICYmXG4gICAgICAgICh0eXBlb2YgKHZhbHVlLmdldFRvcGljRmlsdGVyKSA9PT0gXCJmdW5jdGlvblwiKSAmJiB2YWx1ZS5mcmFnbWVudCk7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRTdWJJbmZvKGNvbnRyYWN0LCBldmVudCkge1xuICAgIGxldCB0b3BpY3M7XG4gICAgbGV0IGZyYWdtZW50ID0gbnVsbDtcbiAgICAvLyBDb252ZXJ0IG5hbWVkIGV2ZW50cyB0byB0b3BpY0hhc2ggYW5kIGdldCB0aGUgZnJhZ21lbnQgZm9yXG4gICAgLy8gZXZlbnRzIHdoaWNoIG5lZWQgZGVjb25zdHJ1Y3RpbmcuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICAgIGNvbnN0IHRvcGljSGFzaGlmeSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICBpZiAoaXNIZXhTdHJpbmcobmFtZSwgMzIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmcmFnbWVudCA9IGNvbnRyYWN0LmludGVyZmFjZS5nZXRFdmVudChuYW1lKTtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGZyYWdtZW50LCBcInVua25vd24gZnJhZ21lbnRcIiwgXCJuYW1lXCIsIG5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIGZyYWdtZW50LnRvcGljSGFzaDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQXJyYXkgb2YgVG9waWNzIGFuZCBOYW1lczsgZS5nLiBgWyBcIjB4MTIzNC4uLjg5YWJcIiwgXCJUcmFuc2ZlcihhZGRyZXNzKVwiIF1gXG4gICAgICAgIHRvcGljcyA9IGV2ZW50Lm1hcCgoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5tYXAodG9waWNIYXNoaWZ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0b3BpY0hhc2hpZnkoZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChldmVudCA9PT0gXCIqXCIpIHtcbiAgICAgICAgdG9waWNzID0gW251bGxdO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgKGV2ZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAoaXNIZXhTdHJpbmcoZXZlbnQsIDMyKSkge1xuICAgICAgICAgICAgLy8gVG9waWMgSGFzaFxuICAgICAgICAgICAgdG9waWNzID0gW2V2ZW50XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5hbWUgb3IgU2lnbmF0dXJlOyBlLmcuIGBcIlRyYW5zZmVyXCIsIGBcIlRyYW5zZmVyKGFkZHJlc3MpXCJgXG4gICAgICAgICAgICBmcmFnbWVudCA9IGNvbnRyYWN0LmludGVyZmFjZS5nZXRFdmVudChldmVudCk7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChmcmFnbWVudCwgXCJ1bmtub3duIGZyYWdtZW50XCIsIFwiZXZlbnRcIiwgZXZlbnQpO1xuICAgICAgICAgICAgdG9waWNzID0gW2ZyYWdtZW50LnRvcGljSGFzaF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNEZWZlcnJlZChldmVudCkpIHtcbiAgICAgICAgLy8gRGVmZXJyZWQgVG9waWMgRmlsdGVyOyBlLmcuIGBjb250cmFjdC5maWx0ZXIuVHJhbnNmZXIoZnJvbSlgXG4gICAgICAgIHRvcGljcyA9IGF3YWl0IGV2ZW50LmdldFRvcGljRmlsdGVyKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKFwiZnJhZ21lbnRcIiBpbiBldmVudCkge1xuICAgICAgICAvLyBDb250cmFjdEV2ZW50OyBlLmcuIGBjb250cmFjdC5maWx0ZXIuVHJhbnNmZXJgXG4gICAgICAgIGZyYWdtZW50ID0gZXZlbnQuZnJhZ21lbnQ7XG4gICAgICAgIHRvcGljcyA9IFtmcmFnbWVudC50b3BpY0hhc2hdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5rbm93biBldmVudCBuYW1lXCIsIFwiZXZlbnRcIiwgZXZlbnQpO1xuICAgIH1cbiAgICAvLyBOb3JtYWxpemUgdG9waWNzIGFuZCBzb3J0IFRvcGljU2V0c1xuICAgIHRvcGljcyA9IHRvcGljcy5tYXAoKHQpID0+IHtcbiAgICAgICAgaWYgKHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gQXJyYXkuZnJvbShuZXcgU2V0KHQubWFwKCh0KSA9PiB0LnRvTG93ZXJDYXNlKCkpKS52YWx1ZXMoKSk7XG4gICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1zWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbXMuc29ydCgpO1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0LnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG4gICAgY29uc3QgdGFnID0gdG9waWNzLm1hcCgodCkgPT4ge1xuICAgICAgICBpZiAodCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJudWxsXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0LmpvaW4oXCJ8XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH0pLmpvaW4oXCImXCIpO1xuICAgIHJldHVybiB7IGZyYWdtZW50LCB0YWcsIHRvcGljcyB9O1xufVxuYXN5bmMgZnVuY3Rpb24gaGFzU3ViKGNvbnRyYWN0LCBldmVudCkge1xuICAgIGNvbnN0IHsgc3VicyB9ID0gZ2V0SW50ZXJuYWwoY29udHJhY3QpO1xuICAgIHJldHVybiBzdWJzLmdldCgoYXdhaXQgZ2V0U3ViSW5mbyhjb250cmFjdCwgZXZlbnQpKS50YWcpIHx8IG51bGw7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRTdWIoY29udHJhY3QsIG9wZXJhdGlvbiwgZXZlbnQpIHtcbiAgICAvLyBNYWtlIHN1cmUgb3VyIHJ1bm5lciBjYW4gYWN0dWFsbHkgc3Vic2NyaWJlIHRvIGV2ZW50c1xuICAgIGNvbnN0IHByb3ZpZGVyID0gZ2V0UHJvdmlkZXIoY29udHJhY3QucnVubmVyKTtcbiAgICBhc3NlcnQocHJvdmlkZXIsIFwiY29udHJhY3QgcnVubmVyIGRvZXMgbm90IHN1cHBvcnQgc3Vic2NyaWJpbmdcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb24gfSk7XG4gICAgY29uc3QgeyBmcmFnbWVudCwgdGFnLCB0b3BpY3MgfSA9IGF3YWl0IGdldFN1YkluZm8oY29udHJhY3QsIGV2ZW50KTtcbiAgICBjb25zdCB7IGFkZHIsIHN1YnMgfSA9IGdldEludGVybmFsKGNvbnRyYWN0KTtcbiAgICBsZXQgc3ViID0gc3Vicy5nZXQodGFnKTtcbiAgICBpZiAoIXN1Yikge1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gKGFkZHIgPyBhZGRyIDogY29udHJhY3QpO1xuICAgICAgICBjb25zdCBmaWx0ZXIgPSB7IGFkZHJlc3MsIHRvcGljcyB9O1xuICAgICAgICBjb25zdCBsaXN0ZW5lciA9IChsb2cpID0+IHtcbiAgICAgICAgICAgIGxldCBmb3VuZEZyYWdtZW50ID0gZnJhZ21lbnQ7XG4gICAgICAgICAgICBpZiAoZm91bmRGcmFnbWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmRGcmFnbWVudCA9IGNvbnRyYWN0LmludGVyZmFjZS5nZXRFdmVudChsb2cudG9waWNzWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIGZyYWdtZW50IGlzIG51bGwsIHdlIGRvIG5vdCBkZWNvbnN0cnVjdCB0aGUgYXJncyB0byBlbWl0XG4gICAgICAgICAgICBpZiAoZm91bmRGcmFnbWVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IF9mb3VuZEZyYWdtZW50ID0gZm91bmRGcmFnbWVudDtcbiAgICAgICAgICAgICAgICBjb25zdCBhcmdzID0gZnJhZ21lbnQgPyBjb250cmFjdC5pbnRlcmZhY2UuZGVjb2RlRXZlbnRMb2coZnJhZ21lbnQsIGxvZy5kYXRhLCBsb2cudG9waWNzKSA6IFtdO1xuICAgICAgICAgICAgICAgIGVtaXQoY29udHJhY3QsIGV2ZW50LCBhcmdzLCAobGlzdGVuZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb250cmFjdEV2ZW50UGF5bG9hZChjb250cmFjdCwgbGlzdGVuZXIsIGV2ZW50LCBfZm91bmRGcmFnbWVudCwgbG9nKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVtaXQoY29udHJhY3QsIGV2ZW50LCBbXSwgKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29udHJhY3RVbmtub3duRXZlbnRQYXlsb2FkKGNvbnRyYWN0LCBsaXN0ZW5lciwgZXZlbnQsIGxvZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGxldCBzdGFydGluZyA9IFtdO1xuICAgICAgICBjb25zdCBzdGFydCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChzdGFydGluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydGluZy5wdXNoKHByb3ZpZGVyLm9uKGZpbHRlciwgbGlzdGVuZXIpKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3RvcCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChzdGFydGluZy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzdGFydGVkID0gc3RhcnRpbmc7XG4gICAgICAgICAgICBzdGFydGluZyA9IFtdO1xuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoc3RhcnRlZCk7XG4gICAgICAgICAgICBwcm92aWRlci5vZmYoZmlsdGVyLCBsaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgICAgIHN1YiA9IHsgdGFnLCBsaXN0ZW5lcnM6IFtdLCBzdGFydCwgc3RvcCB9O1xuICAgICAgICBzdWJzLnNldCh0YWcsIHN1Yik7XG4gICAgfVxuICAgIHJldHVybiBzdWI7XG59XG4vLyBXZSB1c2UgdGhpcyB0byBlbnN1cmUgb25lIGVtaXQgcmVzb2x2ZXMgYmVmb3JlIGZpcmluZyB0aGUgbmV4dCB0b1xuLy8gZW5zdXJlIGNvcnJlY3Qgb3JkZXJpbmcgKG5vdGUgdGhpcyBjYW5ub3QgdGhyb3cgYW5kIGp1c3QgYWRkcyB0aGVcbi8vIG5vdGljZSB0byB0aGUgZXZlbnQgcXVldSB1c2luZyBzZXRUaW1lb3V0KS5cbmxldCBsYXN0RW1pdCA9IFByb21pc2UucmVzb2x2ZSgpO1xuYXN5bmMgZnVuY3Rpb24gX2VtaXQoY29udHJhY3QsIGV2ZW50LCBhcmdzLCBwYXlsb2FkRnVuYykge1xuICAgIGF3YWl0IGxhc3RFbWl0O1xuICAgIGNvbnN0IHN1YiA9IGF3YWl0IGhhc1N1Yihjb250cmFjdCwgZXZlbnQpO1xuICAgIGlmICghc3ViKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgY291bnQgPSBzdWIubGlzdGVuZXJzLmxlbmd0aDtcbiAgICBzdWIubGlzdGVuZXJzID0gc3ViLmxpc3RlbmVycy5maWx0ZXIoKHsgbGlzdGVuZXIsIG9uY2UgfSkgPT4ge1xuICAgICAgICBjb25zdCBwYXNzQXJncyA9IEFycmF5LmZyb20oYXJncyk7XG4gICAgICAgIGlmIChwYXlsb2FkRnVuYykge1xuICAgICAgICAgICAgcGFzc0FyZ3MucHVzaChwYXlsb2FkRnVuYyhvbmNlID8gbnVsbCA6IGxpc3RlbmVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwoY29udHJhY3QsIC4uLnBhc3NBcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICByZXR1cm4gIW9uY2U7XG4gICAgfSk7XG4gICAgaWYgKHN1Yi5saXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHN1Yi5zdG9wKCk7XG4gICAgICAgIGdldEludGVybmFsKGNvbnRyYWN0KS5zdWJzLmRlbGV0ZShzdWIudGFnKTtcbiAgICB9XG4gICAgcmV0dXJuIChjb3VudCA+IDApO1xufVxuYXN5bmMgZnVuY3Rpb24gZW1pdChjb250cmFjdCwgZXZlbnQsIGFyZ3MsIHBheWxvYWRGdW5jKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgbGFzdEVtaXQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgY29uc3QgcmVzdWx0UHJvbWlzZSA9IF9lbWl0KGNvbnRyYWN0LCBldmVudCwgYXJncywgcGF5bG9hZEZ1bmMpO1xuICAgIGxhc3RFbWl0ID0gcmVzdWx0UHJvbWlzZTtcbiAgICByZXR1cm4gYXdhaXQgcmVzdWx0UHJvbWlzZTtcbn1cbmNvbnN0IHBhc3NQcm9wZXJ0aWVzID0gW1widGhlblwiXTtcbmV4cG9ydCBjbGFzcyBCYXNlQ29udHJhY3Qge1xuICAgIC8qKlxuICAgICAqICBUaGUgdGFyZ2V0IHRvIGNvbm5lY3QgdG8uXG4gICAgICpcbiAgICAgKiAgVGhpcyBjYW4gYmUgYW4gYWRkcmVzcywgRU5TIG5hbWUgb3IgYW55IFtbQWRkcmVzc2FibGVdXSwgc3VjaCBhc1xuICAgICAqICBhbm90aGVyIGNvbnRyYWN0LiBUbyBnZXQgdGhlIHJlc292bGVkIGFkZHJlc3MsIHVzZSB0aGUgYGBnZXRBZGRyZXNzYGBcbiAgICAgKiAgbWV0aG9kLlxuICAgICAqL1xuICAgIHRhcmdldDtcbiAgICAvKipcbiAgICAgKiAgVGhlIGNvbnRyYWN0IEludGVyZmFjZS5cbiAgICAgKi9cbiAgICBpbnRlcmZhY2U7XG4gICAgLyoqXG4gICAgICogIFRoZSBjb25uZWN0ZWQgcnVubmVyLiBUaGlzIGlzIGdlbmVyYWxseSBhIFtbUHJvdmlkZXJdXSBvciBhXG4gICAgICogIFtbU2lnbmVyXV0sIHdoaWNoIGRpY3RhdGVzIHdoYXQgb3BlcmF0aW9ucyBhcmUgc3VwcG9ydGVkLlxuICAgICAqXG4gICAgICogIEZvciBleGFtcGxlLCBhICoqQ29udHJhY3QqKiBjb25uZWN0ZWQgdG8gYSBbW1Byb3ZpZGVyXV0gbWF5XG4gICAgICogIG9ubHkgZXhlY3V0ZSByZWFkLW9ubHkgb3BlcmF0aW9ucy5cbiAgICAgKi9cbiAgICBydW5uZXI7XG4gICAgLyoqXG4gICAgICogIEFsbCB0aGUgRXZlbnRzIGF2YWlsYWJsZSBvbiB0aGlzIGNvbnRyYWN0LlxuICAgICAqL1xuICAgIGZpbHRlcnM7XG4gICAgLyoqXG4gICAgICogIEBfaWdub3JlOlxuICAgICAqL1xuICAgIFtpbnRlcm5hbF07XG4gICAgLyoqXG4gICAgICogIFRoZSBmYWxsYmFjayBvciByZWNlaXZlIGZ1bmN0aW9uIGlmIGFueS5cbiAgICAgKi9cbiAgICBmYWxsYmFjaztcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyBjb250cmFjdCBjb25uZWN0ZWQgdG8gJSV0YXJnZXQlJSB3aXRoIHRoZSAlJWFiaSUlIGFuZFxuICAgICAqICBvcHRpb25hbGx5IGNvbm5lY3RlZCB0byBhICUlcnVubmVyJSUgdG8gcGVyZm9ybSBvcGVyYXRpb25zIG9uIGJlaGFsZlxuICAgICAqICBvZi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQsIGFiaSwgcnVubmVyLCBfZGVwbG95VHgpIHtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQodHlwZW9mICh0YXJnZXQpID09PSBcInN0cmluZ1wiIHx8IGlzQWRkcmVzc2FibGUodGFyZ2V0KSwgXCJpbnZhbGlkIHZhbHVlIGZvciBDb250cmFjdCB0YXJnZXRcIiwgXCJ0YXJnZXRcIiwgdGFyZ2V0KTtcbiAgICAgICAgaWYgKHJ1bm5lciA9PSBudWxsKSB7XG4gICAgICAgICAgICBydW5uZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlmYWNlID0gSW50ZXJmYWNlLmZyb20oYWJpKTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IHRhcmdldCwgcnVubmVyLCBpbnRlcmZhY2U6IGlmYWNlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgaW50ZXJuYWwsIHsgdmFsdWU6IHt9IH0pO1xuICAgICAgICBsZXQgYWRkclByb21pc2U7XG4gICAgICAgIGxldCBhZGRyID0gbnVsbDtcbiAgICAgICAgbGV0IGRlcGxveVR4ID0gbnVsbDtcbiAgICAgICAgaWYgKF9kZXBsb3lUeCkge1xuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBnZXRQcm92aWRlcihydW5uZXIpO1xuICAgICAgICAgICAgLy8gQFRPRE86IHRoZSBwcm92aWRlciBjYW4gYmUgbnVsbDsgbWFrZSBhIGN1c3RvbSBkdW1teSBwcm92aWRlciB0aGF0IHdpbGwgdGhyb3cgYVxuICAgICAgICAgICAgLy8gbWVhbmluZ2Z1bCBlcnJvclxuICAgICAgICAgICAgZGVwbG95VHggPSBuZXcgQ29udHJhY3RUcmFuc2FjdGlvblJlc3BvbnNlKHRoaXMuaW50ZXJmYWNlLCBwcm92aWRlciwgX2RlcGxveVR4KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3VicyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gUmVzb2x2ZSB0aGUgdGFyZ2V0IGFzIHRoZSBhZGRyZXNzXG4gICAgICAgIGlmICh0eXBlb2YgKHRhcmdldCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmIChpc0hleFN0cmluZyh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgYWRkciA9IHRhcmdldDtcbiAgICAgICAgICAgICAgICBhZGRyUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBnZXRSdW5uZXIocnVubmVyLCBcInJlc29sdmVOYW1lXCIpO1xuICAgICAgICAgICAgICAgIGlmICghY2FuUmVzb2x2ZShyZXNvbHZlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbWFrZUVycm9yKFwiY29udHJhY3QgcnVubmVyIGRvZXMgbm90IHN1cHBvcnQgbmFtZSByZXNvbHV0aW9uXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJyZXNvbHZlTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRyUHJvbWlzZSA9IHJlc29sdmVyLnJlc29sdmVOYW1lKHRhcmdldCkudGhlbigoYWRkcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWRkciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBtYWtlRXJyb3IoXCJhbiBFTlMgbmFtZSB1c2VkIGZvciBhIGNvbnRyYWN0IHRhcmdldCBtdXN0IGJlIGNvcnJlY3RseSBjb25maWd1cmVkXCIsIFwiVU5DT05GSUdVUkVEX05BTUVcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGdldEludGVybmFsKHRoaXMpLmFkZHIgPSBhZGRyO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWRkcjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFkZHJQcm9taXNlID0gdGFyZ2V0LmdldEFkZHJlc3MoKS50aGVuKChhZGRyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGFkZHIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUT0RPXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnZXRJbnRlcm5hbCh0aGlzKS5hZGRyID0gYWRkcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRkcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBvdXIgcHJpdmF0ZSB2YWx1ZXNcbiAgICAgICAgc2V0SW50ZXJuYWwodGhpcywgeyBhZGRyUHJvbWlzZSwgYWRkciwgZGVwbG95VHgsIHN1YnMgfSk7XG4gICAgICAgIC8vIEFkZCB0aGUgZXZlbnQgZmlsdGVyc1xuICAgICAgICBjb25zdCBmaWx0ZXJzID0gbmV3IFByb3h5KHt9LCB7XG4gICAgICAgICAgICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gUGFzcyBpbXBvcnRhbnQgY2hlY2tzIChsaWtlIGB0aGVuYCBmb3IgUHJvbWlzZSkgdGhyb3VnaFxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHByb3ApID09PSBcInN5bWJvbFwiIHx8IHBhc3NQcm9wZXJ0aWVzLmluZGV4T2YocHJvcCkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEV2ZW50KHByb3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0Vycm9yKGVycm9yLCBcIklOVkFMSURfQVJHVU1FTlRcIikgfHwgZXJyb3IuYXJndW1lbnQgIT09IFwia2V5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzOiAodGFyZ2V0LCBwcm9wKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gUGFzcyBpbXBvcnRhbnQgY2hlY2tzIChsaWtlIGB0aGVuYCBmb3IgUHJvbWlzZSkgdGhyb3VnaFxuICAgICAgICAgICAgICAgIGlmIChwYXNzUHJvcGVydGllcy5pbmRleE9mKHByb3ApID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3ApIHx8IHRoaXMuaW50ZXJmYWNlLmhhc0V2ZW50KFN0cmluZyhwcm9wKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgZmlsdGVycyB9KTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAgICAgICBmYWxsYmFjazogKChpZmFjZS5yZWNlaXZlIHx8IGlmYWNlLmZhbGxiYWNrKSA/IChidWlsZFdyYXBwZWRGYWxsYmFjayh0aGlzKSkgOiBudWxsKVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gUmV0dXJuIGEgUHJveHkgdGhhdCB3aWxsIHJlc3BvbmQgdG8gZnVuY3Rpb25zXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGhpcywge1xuICAgICAgICAgICAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHByb3ApID09PSBcInN5bWJvbFwiIHx8IHByb3AgaW4gdGFyZ2V0IHx8IHBhc3NQcm9wZXJ0aWVzLmluZGV4T2YocHJvcCkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFVuZGVmaW5lZCBwcm9wZXJ0aWVzIHNob3VsZCByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5nZXRGdW5jdGlvbihwcm9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNFcnJvcihlcnJvciwgXCJJTlZBTElEX0FSR1VNRU5UXCIpIHx8IGVycm9yLmFyZ3VtZW50ICE9PSBcImtleVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhczogKHRhcmdldCwgcHJvcCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHByb3ApID09PSBcInN5bWJvbFwiIHx8IHByb3AgaW4gdGFyZ2V0IHx8IHBhc3NQcm9wZXJ0aWVzLmluZGV4T2YocHJvcCkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5pbnRlcmZhY2UuaGFzRnVuY3Rpb24ocHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIGEgbmV3IENvbnRyYWN0IGluc3RhbmNlIHdpdGggdGhlIHNhbWUgdGFyZ2V0IGFuZCBBQkksIGJ1dFxuICAgICAqICBhIGRpZmZlcmVudCAlJXJ1bm5lciUlLlxuICAgICAqL1xuICAgIGNvbm5lY3QocnVubmVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgQmFzZUNvbnRyYWN0KHRoaXMudGFyZ2V0LCB0aGlzLmludGVyZmFjZSwgcnVubmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIG5ldyBDb250cmFjdCBpbnN0YW5jZSB3aXRoIHRoZSBzYW1lIEFCSSBhbmQgcnVubmVyLCBidXRcbiAgICAgKiAgYSBkaWZmZXJlbnQgJSV0YXJnZXQlJS5cbiAgICAgKi9cbiAgICBhdHRhY2godGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBuZXcgQmFzZUNvbnRyYWN0KHRhcmdldCwgdGhpcy5pbnRlcmZhY2UsIHRoaXMucnVubmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiB0aGUgcmVzb2x2ZWQgYWRkcmVzcyBvZiB0aGlzIENvbnRyYWN0LlxuICAgICAqL1xuICAgIGFzeW5jIGdldEFkZHJlc3MoKSB7IHJldHVybiBhd2FpdCBnZXRJbnRlcm5hbCh0aGlzKS5hZGRyUHJvbWlzZTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gdGhlIGRlcGxveWVkIGJ5dGVjb2RlIG9yIG51bGwgaWYgbm8gYnl0ZWNvZGUgaXMgZm91bmQuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0RGVwbG95ZWRDb2RlKCkge1xuICAgICAgICBjb25zdCBwcm92aWRlciA9IGdldFByb3ZpZGVyKHRoaXMucnVubmVyKTtcbiAgICAgICAgYXNzZXJ0KHByb3ZpZGVyLCBcInJ1bm5lciBkb2VzIG5vdCBzdXBwb3J0IC5wcm92aWRlclwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJnZXREZXBsb3llZENvZGVcIiB9KTtcbiAgICAgICAgY29uc3QgY29kZSA9IGF3YWl0IHByb3ZpZGVyLmdldENvZGUoYXdhaXQgdGhpcy5nZXRBZGRyZXNzKCkpO1xuICAgICAgICBpZiAoY29kZSA9PT0gXCIweFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29kZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmUgdG8gdGhpcyBDb250cmFjdCBvbmNlIHRoZSBieXRlY29kZSBoYXMgYmVlbiBkZXBsb3llZCwgb3JcbiAgICAgKiAgcmVzb2x2ZSBpbW1lZGlhdGVseSBpZiBhbHJlYWR5IGRlcGxveWVkLlxuICAgICAqL1xuICAgIGFzeW5jIHdhaXRGb3JEZXBsb3ltZW50KCkge1xuICAgICAgICAvLyBXZSBoYXZlIHRoZSBkZXBsb3llbWVudCB0cmFuc2FjdGlvbjsganVzdCB1c2UgdGhhdCAodGhyb3dzIGlmIGRlcGxveWVtZW50IGZhaWxzKVxuICAgICAgICBjb25zdCBkZXBsb3lUeCA9IHRoaXMuZGVwbG95bWVudFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIGlmIChkZXBsb3lUeCkge1xuICAgICAgICAgICAgYXdhaXQgZGVwbG95VHgud2FpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgZm9yIGNvZGVcbiAgICAgICAgY29uc3QgY29kZSA9IGF3YWl0IHRoaXMuZ2V0RGVwbG95ZWRDb2RlKCk7XG4gICAgICAgIGlmIChjb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBjYW4gc3Vic2NyaWJlIHRvIGEgcHJvdmlkZXIgZXZlbnRcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBnZXRQcm92aWRlcih0aGlzLnJ1bm5lcik7XG4gICAgICAgIGFzc2VydChwcm92aWRlciAhPSBudWxsLCBcImNvbnRyYWN0IHJ1bm5lciBkb2VzIG5vdCBzdXBwb3J0IC5wcm92aWRlclwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJ3YWl0Rm9yRGVwbG95bWVudFwiIH0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hlY2tDb2RlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBhd2FpdCB0aGlzLmdldERlcGxveWVkQ29kZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5vbmNlKFwiYmxvY2tcIiwgY2hlY2tDb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNoZWNrQ29kZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiB0aGUgdHJhbnNhY3Rpb24gdXNlZCB0byBkZXBsb3kgdGhpcyBjb250cmFjdC5cbiAgICAgKlxuICAgICAqICBUaGlzIGlzIG9ubHkgYXZhaWxhYmxlIGlmIHRoaXMgaW5zdGFuY2Ugd2FzIHJldHVybmVkIGZyb20gYVxuICAgICAqICBbW0NvbnRyYWN0RmFjdG9yeV1dLlxuICAgICAqL1xuICAgIGRlcGxveW1lbnRUcmFuc2FjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsKHRoaXMpLmRlcGxveVR4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIHRoZSBmdW5jdGlvbiBmb3IgYSBnaXZlbiBuYW1lLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgY29udHJhY3RcbiAgICAgKiAgbWV0aG9kIG5hbWUgY29uZmxpY3RzIHdpdGggYSBKYXZhU2NyaXB0IG5hbWUgc3VjaCBhcyBgYHByb3RvdHlwZWBgIG9yXG4gICAgICogIHdoZW4gdXNpbmcgYSBDb250cmFjdCBwcm9ncmFtYXRpY2FsbHkuXG4gICAgICovXG4gICAgZ2V0RnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgKGtleSkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGtleSA9IGtleS5mb3JtYXQoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmdW5jID0gYnVpbGRXcmFwcGVkTWV0aG9kKHRoaXMsIGtleSk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJuIHRoZSBldmVudCBmb3IgYSBnaXZlbiBuYW1lLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgY29udHJhY3RcbiAgICAgKiAgZXZlbnQgbmFtZSBjb25mbGljdHMgd2l0aCBhIEphdmFTY3JpcHQgbmFtZSBzdWNoIGFzIGBgcHJvdG90eXBlYGAgb3JcbiAgICAgKiAgd2hlbiB1c2luZyBhIENvbnRyYWN0IHByb2dyYW1hdGljYWxseS5cbiAgICAgKi9cbiAgICBnZXRFdmVudChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAoa2V5KSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAga2V5ID0ga2V5LmZvcm1hdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWlsZFdyYXBwZWRFdmVudCh0aGlzLCBrZXkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgYXN5bmMgcXVlcnlUcmFuc2FjdGlvbihoYXNoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkBUT0RPXCIpO1xuICAgIH1cbiAgICAvKlxuICAgIC8vIEBUT0RPOiB0aGlzIGlzIGEgbm9uLWJhY2t3YXJkcyBjb21wYXRpYmxlIGNoYW5nZSwgYnV0IHdpbGwgYmUgYWRkZWRcbiAgICAvLyAgICAgICAgaW4gdjcgYW5kIGluIGEgcG90ZW50aWFsIFNtYXJ0Q29udHJhY3QgY2xhc3MgaW4gYW4gdXBjb21pbmdcbiAgICAvLyAgICAgICAgdjYgcmVsZWFzZVxuICAgIGFzeW5jIGdldFRyYW5zYWN0aW9uUmVjZWlwdChoYXNoOiBzdHJpbmcpOiBQcm9taXNlPG51bGwgfCBDb250cmFjdFRyYW5zYWN0aW9uUmVjZWlwdD4ge1xuICAgICAgICBjb25zdCBwcm92aWRlciA9IGdldFByb3ZpZGVyKHRoaXMucnVubmVyKTtcbiAgICAgICAgYXNzZXJ0KHByb3ZpZGVyLCBcImNvbnRyYWN0IHJ1bm5lciBkb2VzIG5vdCBoYXZlIGEgcHJvdmlkZXJcIixcbiAgICAgICAgICAgIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcInF1ZXJ5VHJhbnNhY3Rpb25cIiB9KTtcblxuICAgICAgICBjb25zdCByZWNlaXB0ID0gYXdhaXQgcHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KGhhc2gpO1xuICAgICAgICBpZiAocmVjZWlwdCA9PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBDb250cmFjdFRyYW5zYWN0aW9uUmVjZWlwdCh0aGlzLmludGVyZmFjZSwgcHJvdmlkZXIsIHJlY2VpcHQpO1xuICAgIH1cbiAgICAqL1xuICAgIC8qKlxuICAgICAqICBQcm92aWRlIGhpc3RvcmljIGFjY2VzcyB0byBldmVudCBkYXRhIGZvciAlJWV2ZW50JSUgaW4gdGhlIHJhbmdlXG4gICAgICogICUlZnJvbUJsb2NrJSUgKGRlZmF1bHQ6IGBgMGBgKSB0byAlJXRvQmxvY2slJSAoZGVmYXVsdDogYGBcImxhdGVzdFwiYGApXG4gICAgICogIGluY2x1c2l2ZS5cbiAgICAgKi9cbiAgICBhc3luYyBxdWVyeUZpbHRlcihldmVudCwgZnJvbUJsb2NrLCB0b0Jsb2NrKSB7XG4gICAgICAgIGlmIChmcm9tQmxvY2sgPT0gbnVsbCkge1xuICAgICAgICAgICAgZnJvbUJsb2NrID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9CbG9jayA9PSBudWxsKSB7XG4gICAgICAgICAgICB0b0Jsb2NrID0gXCJsYXRlc3RcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGFkZHIsIGFkZHJQcm9taXNlIH0gPSBnZXRJbnRlcm5hbCh0aGlzKTtcbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IChhZGRyID8gYWRkciA6IChhd2FpdCBhZGRyUHJvbWlzZSkpO1xuICAgICAgICBjb25zdCB7IGZyYWdtZW50LCB0b3BpY3MgfSA9IGF3YWl0IGdldFN1YkluZm8odGhpcywgZXZlbnQpO1xuICAgICAgICBjb25zdCBmaWx0ZXIgPSB7IGFkZHJlc3MsIHRvcGljcywgZnJvbUJsb2NrLCB0b0Jsb2NrIH07XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gZ2V0UHJvdmlkZXIodGhpcy5ydW5uZXIpO1xuICAgICAgICBhc3NlcnQocHJvdmlkZXIsIFwiY29udHJhY3QgcnVubmVyIGRvZXMgbm90IGhhdmUgYSBwcm92aWRlclwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJxdWVyeUZpbHRlclwiIH0pO1xuICAgICAgICByZXR1cm4gKGF3YWl0IHByb3ZpZGVyLmdldExvZ3MoZmlsdGVyKSkubWFwKChsb2cpID0+IHtcbiAgICAgICAgICAgIGxldCBmb3VuZEZyYWdtZW50ID0gZnJhZ21lbnQ7XG4gICAgICAgICAgICBpZiAoZm91bmRGcmFnbWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmRGcmFnbWVudCA9IHRoaXMuaW50ZXJmYWNlLmdldEV2ZW50KGxvZy50b3BpY3NbMF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZvdW5kRnJhZ21lbnQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEV2ZW50TG9nKGxvZywgdGhpcy5pbnRlcmZhY2UsIGZvdW5kRnJhZ21lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVbmRlY29kZWRFdmVudExvZyhsb2csIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IExvZyhsb2csIHByb3ZpZGVyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBBZGQgYW4gZXZlbnQgJSVsaXN0ZW5lciUlIGZvciB0aGUgJSVldmVudCUlLlxuICAgICAqL1xuICAgIGFzeW5jIG9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICBjb25zdCBzdWIgPSBhd2FpdCBnZXRTdWIodGhpcywgXCJvblwiLCBldmVudCk7XG4gICAgICAgIHN1Yi5saXN0ZW5lcnMucHVzaCh7IGxpc3RlbmVyLCBvbmNlOiBmYWxzZSB9KTtcbiAgICAgICAgc3ViLnN0YXJ0KCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQWRkIGFuIGV2ZW50ICUlbGlzdGVuZXIlJSBmb3IgdGhlICUlZXZlbnQlJSwgYnV0IHJlbW92ZSB0aGUgbGlzdGVuZXJcbiAgICAgKiAgYWZ0ZXIgaXQgaXMgZmlyZWQgb25jZS5cbiAgICAgKi9cbiAgICBhc3luYyBvbmNlKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICBjb25zdCBzdWIgPSBhd2FpdCBnZXRTdWIodGhpcywgXCJvbmNlXCIsIGV2ZW50KTtcbiAgICAgICAgc3ViLmxpc3RlbmVycy5wdXNoKHsgbGlzdGVuZXIsIG9uY2U6IHRydWUgfSk7XG4gICAgICAgIHN1Yi5zdGFydCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEVtaXQgYW4gJSVldmVudCUlIGNhbGxpbmcgYWxsIGxpc3RlbmVycyB3aXRoICUlYXJncyUlLlxuICAgICAqXG4gICAgICogIFJlc29sdmVzIHRvIGBgdHJ1ZWBgIGlmIGFueSBsaXN0ZW5lcnMgd2VyZSBjYWxsZWQuXG4gICAgICovXG4gICAgYXN5bmMgZW1pdChldmVudCwgLi4uYXJncykge1xuICAgICAgICByZXR1cm4gYXdhaXQgZW1pdCh0aGlzLCBldmVudCwgYXJncywgbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXNvbHZlcyB0byB0aGUgbnVtYmVyIG9mIGxpc3RlbmVycyBvZiAlJWV2ZW50JSUgb3IgdGhlIHRvdGFsIG51bWJlclxuICAgICAqICBvZiBsaXN0ZW5lcnMgaWYgdW5zcGVjaWZpZWQuXG4gICAgICovXG4gICAgYXN5bmMgbGlzdGVuZXJDb3VudChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YiA9IGF3YWl0IGhhc1N1Yih0aGlzLCBldmVudCk7XG4gICAgICAgICAgICBpZiAoIXN1Yikge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1Yi5saXN0ZW5lcnMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgc3VicyB9ID0gZ2V0SW50ZXJuYWwodGhpcyk7XG4gICAgICAgIGxldCB0b3RhbCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgeyBsaXN0ZW5lcnMgfSBvZiBzdWJzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICB0b3RhbCArPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmVzIHRvIHRoZSBsaXN0ZW5lcnMgc3Vic2NyaWJlZCB0byAlJWV2ZW50JSUgb3IgYWxsIGxpc3RlbmVyc1xuICAgICAqICBpZiB1bnNwZWNpZmllZC5cbiAgICAgKi9cbiAgICBhc3luYyBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBzdWIgPSBhd2FpdCBoYXNTdWIodGhpcywgZXZlbnQpO1xuICAgICAgICAgICAgaWYgKCFzdWIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3ViLmxpc3RlbmVycy5tYXAoKHsgbGlzdGVuZXIgfSkgPT4gbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgc3VicyB9ID0gZ2V0SW50ZXJuYWwodGhpcyk7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCB7IGxpc3RlbmVycyB9IG9mIHN1YnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQobGlzdGVuZXJzLm1hcCgoeyBsaXN0ZW5lciB9KSA9PiBsaXN0ZW5lcikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZW1vdmUgdGhlICUlbGlzdGVuZXIlJSBmcm9tIHRoZSBsaXN0ZW5lcnMgZm9yICUlZXZlbnQlJSBvciByZW1vdmVcbiAgICAgKiAgYWxsIGxpc3RlbmVycyBpZiB1bnNwZWNpZmllZC5cbiAgICAgKi9cbiAgICBhc3luYyBvZmYoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IHN1YiA9IGF3YWl0IGhhc1N1Yih0aGlzLCBldmVudCk7XG4gICAgICAgIGlmICghc3ViKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gc3ViLmxpc3RlbmVycy5tYXAoKHsgbGlzdGVuZXIgfSkgPT4gbGlzdGVuZXIpLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICBzdWIubGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpc3RlbmVyID09IG51bGwgfHwgc3ViLmxpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHN1Yi5zdG9wKCk7XG4gICAgICAgICAgICBnZXRJbnRlcm5hbCh0aGlzKS5zdWJzLmRlbGV0ZShzdWIudGFnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlbW92ZSBhbGwgdGhlIGxpc3RlbmVycyBmb3IgJSVldmVudCUlIG9yIHJlbW92ZSBhbGwgbGlzdGVuZXJzIGlmXG4gICAgICogIHVuc3BlY2lmaWVkLlxuICAgICAqL1xuICAgIGFzeW5jIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YiA9IGF3YWl0IGhhc1N1Yih0aGlzLCBldmVudCk7XG4gICAgICAgICAgICBpZiAoIXN1Yikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3ViLnN0b3AoKTtcbiAgICAgICAgICAgIGdldEludGVybmFsKHRoaXMpLnN1YnMuZGVsZXRlKHN1Yi50YWcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgeyBzdWJzIH0gPSBnZXRJbnRlcm5hbCh0aGlzKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyB0YWcsIHN0b3AgfSBvZiBzdWJzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgc3RvcCgpO1xuICAgICAgICAgICAgICAgIHN1YnMuZGVsZXRlKHRhZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBBbGlhcyBmb3IgW29uXS5cbiAgICAgKi9cbiAgICBhc3luYyBhZGRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMub24oZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEFsaWFzIGZvciBbb2ZmXS5cbiAgICAgKi9cbiAgICBhc3luYyByZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMub2ZmKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDcmVhdGUgYSBuZXcgQ2xhc3MgZm9yIHRoZSAlJWFiaSUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBidWlsZENsYXNzKGFiaSkge1xuICAgICAgICBjbGFzcyBDdXN0b21Db250cmFjdCBleHRlbmRzIEJhc2VDb250cmFjdCB7XG4gICAgICAgICAgICBjb25zdHJ1Y3RvcihhZGRyZXNzLCBydW5uZXIgPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIoYWRkcmVzcywgYWJpLCBydW5uZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDdXN0b21Db250cmFjdDtcbiAgICB9XG4gICAgO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGUgYSBuZXcgQmFzZUNvbnRyYWN0IHdpdGggYSBzcGVjaWZpZWQgSW50ZXJmYWNlLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tKHRhcmdldCwgYWJpLCBydW5uZXIpIHtcbiAgICAgICAgaWYgKHJ1bm5lciA9PSBudWxsKSB7XG4gICAgICAgICAgICBydW5uZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRyYWN0ID0gbmV3IHRoaXModGFyZ2V0LCBhYmksIHJ1bm5lcik7XG4gICAgICAgIHJldHVybiBjb250cmFjdDtcbiAgICB9XG59XG5mdW5jdGlvbiBfQ29udHJhY3RCYXNlKCkge1xuICAgIHJldHVybiBCYXNlQ29udHJhY3Q7XG59XG4vKipcbiAqICBBIFtbQmFzZUNvbnRyYWN0XV0gd2l0aCBubyB0eXBlIGd1YXJkcyBvbiBpdHMgbWV0aG9kcyBvciBldmVudHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250cmFjdCBleHRlbmRzIF9Db250cmFjdEJhc2UoKSB7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250cmFjdC5qcy5tYXAiLCIvLyBjcmVhdGVkIDIwMjMtMDktMjVUMDE6MDE6NTUuMTQ4WlxuLy8gY29tcHJlc3NlZCBiYXNlNjQtZW5jb2RlZCBibG9iIGZvciBpbmNsdWRlLWVucyBkYXRhXG4vLyBzb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9hZHJhZmZ5L2Vucy1ub3JtYWxpemUuanMvYmxvYi9tYWluL3NyYy9tYWtlLmpzXG4vLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hZHJhZmZ5L2Vucy1ub3JtYWxpemUuanMjc2VjdXJpdHlcbi8vIFNIQS0yNTY6IDA1NjVlZDA0OWI5Y2YxNjE0YmI5ZTExYmE3ZDhhYzZhNmZiOTZjODkzMjUzZDg5MGY3ZTJiMjg4NGI5ZGVkMzJcbnZhciBDT01QUkVTU0VEJDEgPSAnQUVFVWR3bWdEUzhCeFFLS0FQNEJPZ0RqQVRBQW5nRFVBSU1Bb0FCb0FPQUFhZ0NPQUVRQWhBQk1BSElBT3dBOUFDc0FOZ0FtQUdJQUhnQXVBQ2dBSndBWEFDMEFHZ0FqQUI4QUx3QVVBQ2tBRWdBZUFBa0FHd0FSQUJrQUZnQTVBQ2dBTFFBckFEY0FGUUFwQUJBQUhnQWlBQkFBR2dBZUFCTUFHQVVoQmU4QkZ4UkVOOHNGMndDNUFLNUhBVzhBclFrRHpRQ3VoemMzTnpjQlA2OE5FZk1BQlFkSEJ1dzVCVjhGWUFBOU16a0k5cjRaQmc3UXlRQVdBOUNlT3dMTkNqY0NqcWtDaHVBL2xtK1JBc1hUQW9QNkFTZm5FUUR5dFFGSkFqV1ZDa2VYQU9zQTZnb2RBQi9jd2RBVUUwV2xCQ04vQVFVQ1FSakZEL01SQmpIeERRU0pidzBqQnpVQXN3QnhtZSt0bkljQVl3YWJBeXNHOFFBakFFTU1teGNEcWdQS1F5RFhDTU14QTdrVVF3RDNOWE9yQUttRklBQWZCQzBEM3g0QkpRREJHZFVGQWhFZ1ZEOEpud21RSmlOV1lVenJnMG9BR3dBVUFCMEFGbk5jQUNrQUZnQlA5aDNnUGZzRE9XREtuZVkyQ2hnbFgxVURZRDMwQUJzQUZBQWRBQlp6SUdSQW53REQ4d0FqQUVFTXpSYkRxZ01CMnNBRll3WHFBdENuQXNTNEF3cFVKS1J0RkhzYWRVejlBTU1WYndMcEFCTTFOSkVYMFprQ2dZTUJFeU1BeFJWdkF1a0FFelVCVUZBdG1Vd1NBeTREQlRFUjMzRWZ0UUhmU3dCNU14Si9BamtXS1FMekw4RS9jd0JCNlFIOUxRRFBEdE85QVNOcmlRQzVEUUFOQXdDSzIxRUZJOTF6SHdDb0w5a0JxUWNIQndjSEt6VURvd0J2QVFvaFB2VTNmQVFnSHdDeUFjOENLUU1BNXpNU2V6cjdVTGdGbURwL0x6VlFCZ0VHQWk4RllRVmd0OEFGY1R0bFFocENXRW1mZTV0bVo2SUFFeHNEelE4dCtYOHJCS3RUQWx0YkFuMGpzeThCbDZ1dFBXTURUUjhFaTJrUkFOa0RCck5ITnlzREJ6RUNRV1VBY3dGcEoza0FpeVVoQUowQlViOEFMM0VmQWJmTkF6ODFLVXNGV3dGM1lRWnRBbTBBK1ZFZkF6RUpEUUJSU1FDekFRQmxBSHNBTTcwR0QvdjNJWldIQndBUktRQXhBTHNqVHdIWkFlTVBFem1YZ0lId0FCSUFHUUE4QUVVQVFEdDNnZHZJRUdjUVpBa0dUUkZNZEVJVkV3SzBENjRMN1JFZEROa3EwOVBnQURTeEIvTURXd2Z6QTFzRFd3ZnpCL01EV3dmekExc0RXd05iQTFzY0V2QWkyOGdRWnc5UUJIVUZsZ1dUQk40SWl5WlJFWWtITUFqYVZCVjBKaHhQQTAwQkJDTXRTU1E3bXpNVEpVcE1GRTBMQ0FRMlNteXZmVUFEVHpHelZQMlFxZ1BUTWxjNWRBa0dIbmtTcUFBeUQzc2tOYjFPaG5wUGNhZ0tVMCsydFlkSmFrNXZBc1k2c0VBQUNpa0ptMi9EZDFZR1JSQWZKNmtRK3d3M0Fia0JQdzN4Uzl3RTlRWS9CTTBmZ1JrZEQ5R1ZvQWlwTGVFTThTYm5McVdBWGlQNUtvY0Y4VXY0UE9FTFVWRnNEMTBMYVFubk9tZUJVZ01sQVJFaWp3cmhEVDBJY1JEM0NzMXZEZWtSU1FjOUE5bEpuZ0NwQndVTEZSMDVGYmttRkdLd0N3MDVld2IvR3ZvTGt5YXpFeTE3QUFYWEdpVUdVUUV0R3dNQTB5N3JoYlJhTlZ3Z1QyTUdCd3NwSThzVXJGQWtEU2xBdTNoTUdoOEhHU1d0QXBWRGRFcUxVVG9lbHlINlBFRU5haTRYVVlBSCtUd0pHVk1MaFR5aVJxOUZFaEhXUHBFOVRDSk5UREFFT1lNc015ZVBDZE1QaVF5OWZIWUJYUWtsQ2JVTWRSTTFFUnMzeVFnOUJ4MHhseWduR1FnbFJwbGduZ1Q3b3dQM0U5VUREd1ZEQ1VVSEZ3TzVIREVUTWhVdEJSR0JLTnNDOXpiWkxyY0NrMWFFQVJzRnp3OHBIK01RVkVma0R1MElud0pwQTRjbDd3QXhGU1VBR3lLZkNFZG5BR09QM0ZNSkxzOEl5MnB3STNnRGF4VHJaUkYzQjVVT1d3ZXJIRGNWd3h6bGNNeGVENFlNS0tlekNWOEJlUW1kQVdNRTV3Z05OVitNcENCRloxZUxYQmlmSUdWQlExNEFBalVNYVJXalJNR0hmQUtQRDI4U0h3RTVBWGNIUFEwRkFuc1I4UkZ2RUprSTc0WUlOYmt6L0RvcEJGTWhoeUFWQ2lzRFUyelNDeXNtL1F6OGJRR25FbVlERURSQmQvSm5yMkM2S0JnQkJ4MHl5VUZrSWZVTGxrL1JES0FheFJoR1ZESVo2QWZEQS9jYTl5ZnVRVnNHQXdPbkJ4YzZVVFB5Qk1FTGJRaVBDVU1BVFE2bkd3ZmJHRzRLZFl6VUFUV1BBYnVkQTF1Vmh3Snprd1k3Qnc4QWF3K0xCWDNwQUNFQ3F3aW5BQWtBMHdOYkFEMENzUWVoQUIwQWlVVUJRUU1yTXdFbDZRS1RBNWNJTmM4Qm1UTUI5eTBFSDhjTUdRRDdPMjVPQXNPMUFvQnVacVlGNFZ3Q2tnSk5PUUZSS1FRSlVrdFZBN04xNVFEZkFFOEdGK05MQVJtdlRzOGU1MGNCNDNNdkFNc0Evd0FKT1FjSlJRSFJBZmR4QUxzQll3czFDYWEzdVFGUjdTMEFod0FaYndIYkFvMEE0UUE1QUlQMUFWY0FVUVZkL1FYWEFsTk5BUlUxSEM5YlpRRy9BeU1CTndFUkFIMEd6NUdwelFzakJIRUgxd0lRSHhYbEF1OHlCN2tGQXlMakU5RkN5UUs5NGxrQU1ob0tQQXFyQ3FwZ1gyUTNDalYyUFZRQUVoK3NQc3MvVWdWVk8xYzdYRHRYTzF3N1Z6dGNPMWM3WER0WE8xd0RtOFBtdytZS2NGOUpZZThNcWczWVJNdzZUUlBmWUZWZ05oUE1MYnNVeFJYU0pWb1pRUnJBSndrbDZGVU5Ed2d0MTJZMENEQTBlUmZBQUVNcGJJTkZZNG9lTkFwUEhPdFRsVlQ4TFI4QXRVdW1NN01Oc0JzWlJFUUZTM1h4WWk0V0Vnb21BbVNGQW1KR1gxR3pBVjgzSkFLaCt3Sm9uQUptRFFLZmlEZ2ZEd0ptUHdKbUtnUnlCSU1EZnhjRGZwWTVDamw3R3ptR09pY25BbXdoQWpJNk9BNENiY3NDYmJMempnTTNhMGt2QVdzQTRnRGxBRTRKQjV3TWtRRUNEOFlBRWJrQ2R6TUNkcVpEQW5sUFJ3SjR2aUZnMzBXeVJ2Y0NmRU1DZXN3Q2ZRMENmUFJJQkVpQlp5Z0FMeGxKWEVwZkdSdEswQUxSQlFMUTBFc3JBNGhUQTRmcVJNbVJOZ0x5cFYwSEF3T3lTOUpNTVNrSDAwMVFUYk1DaTBNQ2l0ekZId3NoUjJzSnV3S09Pd0tPWUVTYmhRS08zUUtPWUh4UnVGTTVBUTVTMkZTSkFwUC9BcE1RQU8wQUlGVWlWYk5WMUFvc0h5bVppakxsZUdwRlB6MENsNk1DNzdaWUphd0FYU2tDbHBNQ2xvQ2dBSzFac0ZvTmhWRUFQd0tXdVFLV1VseElYTlVDbWM4Q21XaGN6bDBMSFFLY256bkdPcUVDbkJvQ241OENucnlPQUNFVE5TNFRBcDMxQXA2V0FMbEJZVGhoOHdLZTF3S2djZ0d0QXA2akl3S2VVcWxqekdRcktTOENKN01DSm9JQ29QOENvRkRiQXFZekFxWFNBcWdEQUlFQ3AvWm9nR2kxQUFkTmFpQnExUUtzNXdLc3NnS3Rhd0t0QmdKWElRSlY0QUt4NWRzREgxSnNtd0t5d1JFQ3N1d2JiT1J0WjIxTVl3TWwwUUsyWUQ5RGJwUURLVWtDdUdJQ3VVc1pBcmt1ZTNBNmNPVUN2UjBETGJZRE1oVUN2b3h5QmdNemRRSytIbk1tYzFNQ3c4OEN3d2h6aG5SUE9VbDA1QU04cXdFRFBKNERQY01DeFlBQ3hrc0N4aFNOQXNodFZRTElTQUxKVXdMSk1nSmtvUUxkMW5oOVpYaXllU2xMMUFNWXAyY0dBbUg0R2ZlVktIc1BYcFpldnhVQ3oyOEN6M0F6VDFmVzl4ZWpBTXF4QXM5M0FTM3VBMDRXZms4SkF0d3JBdHVPQXRKVEExSmdBMU5qQVFVRFZaQ0FqVU1FenhyeFpFbDVBNExTZzVFQzJzc0MyZUtFRklSTnAwQURocWtBTXdOa0VvWjFYZjBBV1FMZmFRTGV2SGQ3QXVJejdSZ0I4elFyQWZTZkFmTFdpd0xyOXdMcGRIMERBdXI5QXVyb0FQMUxBYjBDN28wQzY2Q1dycGNIQXU1REE0WGttSDF3NUhHbEF2TUhBRzBEamhxWmx3TDNGd09SY2dPU2l3TDNuQUw1M1FMNGFwb2dtcSsvTzVzaUE1MkhBdjcrQVI4QVBaOGdBWiszQXdXUkE2WnVBNmJkQU5YSkF3WnVvWXlpQ1EwRERFMEJFd0VqQjNFR1piMXJDUUMvQkcvREZZOGV0eEVBRzNrOUFDY0ROeEpSQTQyREFXY3JKUUNNOHdBbEFPYW5DNk9WQ0xzR0k2ZkpCZ0N2QlJuREJ2RWxSVVlGRm9BRmNEOUdTRE5DS1VLOFgza1pYOFFBbHMwRk9nQ1FWQ0did1RzdVlEb1p1dGNPTnhqT0dKSEovZ1ZmQldBRlh3VmdCV3NGWUFWZkJXQUZYd1ZnQlY4RllBVmZCV0JPSFFqZmpXOEtDZ29LYkY3eE13VFJBN2tHTjhQREFNTUVyOE1BNzBneEZyb0ZUajV4UG5oQ1IwSytYMzAvWC9BQVdCa3pzd0NOQnN4enpBU203MGFDUlM0ckRETWVMejQ5Zm5YZmNzSDVHY29zY1FGejEzWTRId1ZuQlhMSnljbkFDTmRSWXdnSUNBcUVYb1dUeGdBN1A0a0FDeGJaQnUyMUt3MEFqTXNUQXdrVkFPVnRKVVVzSjFKQ3VVTEVTVUFyWHk5Z1BpOUFLd25KUlFZS1REOUxQb0EraVQ1NFBua0NrVUxFVVVwRFg5TldWM0pWRWpRQWMxdzNBM0lCRTNZblgrZzdRaU1KYjZNS2Fpc3pSQ1V1UXJOQ3hEUE1DY3dFWDlFV0p6WVJFQkVFQndJSEtuNmwzM0pDTlZJZnliUEp0QWx0eWRQVUNtaEJady90RUtzWkFKT1ZKVTFDTFJ1eGJVSE9RQW83UDBzK2VFSkhIQThTSlZSUGRHTTBOVnJwdkJvS2hmVWxNMEpISEdVUVVoRVdPMXhMU2o4TU8wdWNOQXFKSXpWQ1J4djlFRnNxS3lBNE9RZ05qMm53WmdwNVpORmdFMkExSzNZSFMyQWhRUW9qSm1DN0RncHpHRzFXWUZVWkNRWUhaTzlnSFdDZFlJVmd1MkJUWUpsd0ZoOEd2UmJjWGJHOFlndERIck1Cd3pQVnlRb25IUWdrQ3lZQmdRSjBBamM0blZxSUF3R1NDc0JQSWdEc0szU1dFdElWQmE1TjhnR2pBbytrVndWSVp3RC9BRVVTQ0R3ZVg0SVRyUlFzSjhLM1R3QlhGRHdFQUIwVHZ6VmNBdG9UUzIwUkl3RGdWZ1o5QkJJbVlnQTVBTDRDb2k4TEZuZXpPa0NuSVFGakFZNEtCQVBoOVJjR3NnWlNCc0VBSmN0ZHNXSVJ1MmtUa1FzdFJ3N0RBY01CS2dwUEJHSUdNREF3S0NZbktUUWFMZzRBS1JTVkFGd0NkbCtZVVowSmRpY0ZEM2xQQWR0MUY5WlpLQ0d4dUUzeUJ4a0ZWR2NBL3dCRkVnaUNCd0FPTEhRU2p4T3RRRGcxejdkZUZSTUFaOFFUQUd0S2IxQXBJaVBIQURrQXZnS2lMeTFERnRZQ21CaURBbEREV05CMGVvN2ZwYU1PL2FFVlJSdjBBVEVRWkJJT0R5TUVBYzhKUWhDYkRSZ3pGRDRUQUVNQXU5WUJDZ0NzQU9rQW01STNBQndBWXh2T05uUitNaFhKQXhnS1F5eEwyK2trSmhNYmhRS0RCTWtTc3ZGMEFEOUJOUTZ1UUM3V3FTUUh3eEVBRUVJdTFoa2hBSDJ6NGlRUHd5SlBITldwZHlZQlJTcG5KQUx6b0JBRVZQUHNIMjBNeEEwQ0NFUUtSZ0FGeUF0RkFsTU53d2pFRFVRSlJBckVMdGFwTWc3RERaZ0pJdytUR3VrRUl3dkRGa01BcUF0REVNTU1CaGlvZStRQU8zTU1SQUFDcmduRUJTUFk5UTBGRG5iU0JvTUFCOE1TWXhrU3hBRUpBUElKQUFCOEZXTU9GdE1jL0hjWHd4aERBQzdEQXZPb3d3QWV3d0pkS0RLSEFBSERBQUxyRlVRVnd3QWJ3eXZ6cFdNV3Y4d0EvQUJwQXkrK2JjWURVS1BEMEtoREN3S21KMU1BQW1NQTUrVVp3eEFhZ3dpcEJSTC9lQURmdzZmREdPTUNHc09qazNsNkJ3T3BvNHNBRXNNT0d4TUFBNXNBYmNNT0FBdkRwME1KR2tNRHdnaXBuTklQQXdmSXFVTUdBT0dEQUFQekFCWERBQWNEQUFuREFHbVRBQnJEQUE3RENoakRqbkVXQXdBQll3QU9jd0F1VXlZQUJzTUFGOE1JS1FBTlVnQzZ3eTRBQThNQURxTXE4d0N5WWdBY0l3QUI4d3FwQUFYT0N4MFY0d0FIb3dCQ3d3RUtBR25EQUF1REFCM0RBQWpEQ2FrQUJkSUFicWNaM1FDWkNDa0FCZElBQUFGREFBZmpBQjJqQ0NrQUJxSUFDWU1BR3pNQWJTTUE1c09JQUFoakFBaERBQlREQkFrcEFBYlNBT09UQUFsREM2a096UHRuQUFkREFHNmtRRkFBVHdBS3d3d0FBME1BQ2JVRFB3QUhJd0FaZ3dBQ0U2Y0RBQW9qQUFwREFBb0RwL01Hd3dBSkl3QURFd0FRUXdnQUZFTUFFWE1BRDVNQURmTUFEY01BR1JNT0ZpTUFGVU1BYnFNV3V3SERBTUlBRTBNTEFHa3pFZ0RoVXdBQ1F3QUVXZ0FYZ3dVakFBYllBQmpEQlNZQmd6QmFBRUZOQUxjUUJ4VU1lZ0F3TW5nQnJBMElaZ0owS3hRSEJSRVBkMU4wWnpLUkp3YUlIQVpxTlQ0RHFRcThCd25nQUI0REF3dDJBWDU2VDFvY0tRTlhBaDFHQVRRR0MzdE94WU5hZ2tnQU1RQTVDUUFEQVFFQVd4TGpBSU9ZTkFFekFIN3RGUms2VGdsU0FGOE5BQWxZQVErUzFBQ0FRd1FvclFCaUFONGRBSjF3UHllVEFOVnp1UURYM0FJZUVNcDlleU1nWGlVQUVka0JrSml6S2x0YlZWQWFSTXFSQUFFQWh5US9TREV6NkJtZlZ3QjZBVEVzT0NsS0lSY0RPRjBFLzgzMkFGTnQ1QUJ5QW5rQ1J4R0NPczk0TmpYZEF3SU5HQm9uREJ3UEFMVzJBd0lDQWdBQUFBQUFBQVlEQlFNREFSclVBd0F0QUFBQUFnRUdCZ1lHQmdZRkJRVUZCUVVFQlFZSENBa0VCUVVGQlFRQUFBSUNBQUFBSWdDTkFKQUFsVDBBNmdDN0FOd0FwRVFBd2dDeUFLMEFxQUR1QUtZQTJnQ2pBT2NCQ0FFREFNY0FnUUJpQU5JQTFBRURBTjRBOGdDUUFLa0JNUURxQU44QTNBc0JDUTh5TzlyYTJ0cTh4dUxUMXRSSk9CMEJVZ0ZjTlUwQldnRnBBV2dCV3dGTVVVbExiaE1CVXhzTkVBczZQaE1PQUNjVUt5MHZNajVBUUVORFEwUkZGRVlHSkZkWFYxZFpXVmhaTDFwYlhWeGNJMk5uWjJab1p5cHNibloxZUhoNGVIaDRlbnA2ZW5wNmVucDZlbnA4ZkgxOGUySUFSUElBU1FDYUFIZ0FNZ0JtK0FDT0FGY0FWd0EzQW5idkFJc0FCZmo0QUdRQWsvSUFud0JQQUdJQVpQLy9zQUNGQUlVQWFRQldBTEVBSkFDMkFJTUNRQUpEQVB3QTV3RCtBUDRBNkFEL0FPa0E2UURvQU9ZQUx3SjdBVkVCUUFFK0FWUUJQZ0UrQVQ0Qk9RRTRBVGdCT0FFY0FWZ1hBREVRQ0FFQVV4OFNIZ3NkSGhZQWpnQ1dBS1lBVVFCcUlBSXhBSFlBYndDWEF4VURKeklESVVsR1R6RUFrUUpQQU1jQ1Z3S2tBTUFDbGdLV0FwWUNsZ0tXQXBZQ2l3S1dBcFlDbGdLV0FwWUNsZ0tWQXBVQ21BS2dBcGNDbGdLV0FwUUNsQUtVQXBRQ2tnS1ZBblVCMUFLWEFwOENsZ0tXQXBVZUFJRVRCUUQrRFFPZkFtRUNPaDhCVkJnOUF1SVpFak1iQVU0L0cxV1pBWHVzUkFGcFlRRUZBMEZQQVFZQW1URWVJSmR5QURGb0FIRUFOZ0NSQTV6TWsvQzJqR0lOd2pNV3lnSVpDYVhkZkRJTEJDczVkQUU3WW5RQnVnRGxob2lIaG9pR2lZcUtob3VPaklhTmtJNklqNHFRaXBHR2tvYVRocFNTbFlhV2hwZUttSWFaaHBxR200YWNpNTJRbm9xZmh1SUM0WFRwQXQ5MEFJcDBMSFNvQUlzQWRIUUVRd1JBQkVJRVJRUkRCRWtFUmdSQkJFY0VTUVJJQkVRRVJnUkpBSjV1ZEFDckE0OTBBTHh1QVExMEFORlpkSFFBMTNRQ0ZIUUEvbUowQVA0QklRRCtBUHdBL0FEOUFQd0RoR1owM0FTTUsyM0hBUDRBL0FEOEFQMEEvQ1IwZEFDUlluUUEvZ0NSQVNFQS9nQ1JBdlFBL2dDUkE0Um1kTndFakN0dHh5UjBBUDlpZEFFaEFQNEEvZ0Q4QVB3QS9RRDhBUDhBL0FEOEFQMEEvQU9FWm5UY0JJd3JiY2NrZEhRQWtXSjBBU0VBL2dDUkFQNEFrUUwwQVA0QWtRT0VablRjQkl3cmJjY2tkQUpMQVQ1MEFsSUJRWFFDVThsMGRBSmZkSFFEcGdMMEE2WURwZ09uQTZjRHB3T25BNFJtZE53RWpDdHR4eVIwZEFDUlluUUJJUU9tQUpFRHBnQ1JBdlFEcGdDUkE0Um1kTndFakN0dHh5UjBCRGgwQUpFRU9RQ1JEcFU1ZFNnQ0FEUjAzZ1YyQ3dBcmRBRUZBTTVpQ25SMEFGMWlBQVljT2dwMGRBQ1JDblFBWEFFSXdXWjBDblJtZEhRQWtXWjBDblJtZEVYZ0FGRjAzZ3AwZEVZMHRsVDJ1M1NPQVFUd3Njd2hqWlpLcmhZY0JTZkZwOVhOYktpVkRPRDJiK2NwZTQvWjE3bVFuYnR6emhhZVF0RTJHR2owSUROVGpSVVN5VHh4dy9SUEhXLyt2UzdkMU5mUnQ5ejlRUFpnNFg3UUZmaENua3ZnTlBJSXRPc0MyZVY2aFBhbm5aTkhsWjl4cndaWElNT2x1M2pTb1FTcTc4V0Vqd0xqdzFFTFNsRjFhQnZmendrNVpYN0FVdlF6alBRS2JEdVErc200d05PcDRBNkFkVnVSUzB0MXkvRFpwZzRSNm03Rk5qTTlIZ3ZXN0JpODh6YU1qT282bE04d3RCQmRqOExQNHlsdjN6Q1hQaGViTUtKYzA2Nm85c0Y3MW9GVy84Slh1ODZISmJ3RElENWx6dzVHV0xSL0xoVDBRcW5wMkpReE5aTmZjYkxJelB5K1l5cHFSbS9sQm1HbWV4KzgyK1Bpc3hVdW1TZUprQUxJVDZySmV6eE1IK0NUSm1RdHQ1dXdUVmJMM3B0bWpEVVF6bFNJdldpOFRsN25nMU5wdVJuMU5nNG4xNFFjKzNJaWw3T3drdk5Xb2dMU1BrbjNwaWhJRnl0eUlHbU1oT2UzbjF0V3N1TXk5QmRLeXFGNFozdjJTZ2dnVEw5S1Z2TVhQbkNiUmUrb091RkZQM0hlakJHL3c5Z3ZtZk5Zdmc2SnVXaWEybGNTU04xdUlqQmt0em9JYXpPSFBKWjdrS0hQejhtUldWZFczbEE4V0dGOWRRRjZCbTY3M2Jvb3YzQlVXRFUySk5jYWhSMjNHdGZIS0xPei92aVorclluWkZhSXpuWE82N0NZRUoxZlh1VFJwWmhZWmtLZTU0eGVvYWdrTkdMcytOVFpIRTByWDQ1L1h2UTJSR0FEWDZ2Y0F2ZHhJVUJWMjd3eEdtMnpqWm80WDNJTGdBbHJPRmhldVo2d3RzdmFJajR5TFk3cXFhd2xsaWFJY3J6MkcrYzN2c2NBbkNrQ3VNek1tWnZNZnU5bEx3VHZmWCszY1ZTeVBkTjlad2dEWmhmalJnTkpjTGlKNjdiOXh4OEpIc3dwcmJpRTN2OVVwaG90QVBJZ25YVklONUttTWMwcGlYaGM2Y0NoUG5OK01SaEc5YWR0ZHR0UVRUd1NJcGw4STQvai8vZDNzejEzMjZxVEJUcFBSTS9IZ2gza3pxRVhzOFpBazRFclFoTk84aHpyUTBETGtXTUEvTis5MXRuMk1kT0puV0MyRkNaZWhrUXJ3endiS09qaHZac2JNOTVRb2VMOXNrWXlNZjRzclZQVkpTZ2c3cE9MVXRyL245ZVQ5OW9lOW5MdEZScGpBOW9rVjJLajhoOWs1SGFDMG9pdlJEOFZ5WGtKODF0Y2Q0ZkhOWFBDZmxvSVFhc3hzdU8xOC80NmRSMmpndWwvVUlldDJHMGtSdm55T05NS2hIczZKMjZGRW9xU3FkK3JmWWplRUd3SFdWRHBYMWZoMWpCQmNLR01xUmVwanU5WTAwbURWSEMrWGRpai9qNDRyS2Z2ZmpHaW5OczFqTy8wRjNqQjgzWENESU5OL0hCODRheGxQKzNFL2tsa3RSbyt2bDNVL2FpeU1KYklvZEUxWFNzRG42VUF6SW9NdFVPYlkyK2svNGdZL2wrQWtaSjVTajJ2UXJreUxtM0ZveGpoRFgrMzFVWEJGZjlYckFIMzFmRnFvQm1ERVp2aHZ2cG5aODdOK29aRXU3VTlPL25uaytRV2ozeDh1eW9SYkVuZitPNVVNcjlpMG5IUDM4SUY1QXZ6ckJXOFlXQlVSMG1JQXpJdm5kUXE5TjN2L0p0bzNhUGpQWFVQbDhBU2RQUHlBcDdqRU5mOGJrN1ZNTTlvbDlYR21sQm1lRE11R3F0K1d6dUw2Q1hBeFhqSWhDUE01dkFDY2hnTUovOFhCR0xPL0QxaXNWdkdod3dISHIxRExhSTVtbjJKci9iMXBVRDkwdWNpRGFTOGNYTkR6Q1d2Tm1UL1BoUWU1ZThuVG5ubmt0OERzL1NJamliY3VtL2ZxRGhLb3B4QVk4QWtTclBuK0lHREVLT08rVTNYT1A2ZGpGczJINU45K29yaE9haGlRazVLbkVVV2ErQ3prVnpocDhiTUhSYmc4MXFoampYdUlLYkhqU0xTSUJLV3FvY2tHdEtpblkrejQvUmRCVUY2cGNjM0ptbmx4VmNOZ3JJNFNFektVWlN3Y0QyUUN5eHpLdmUrZ0FtZzZadVNSa3BQRmE2bWZUaHU3TEpOdTNINUs0MnVDcE52UEFzb2Vkb2xLVi9MSGUvZUorQmJhRzVNRzBOYVNHVlBSVW1ORk1GRlNTcFhFY1h3YlZoN1VFVE9aWnRvVk5SR09JYmJraWczTWNFdFI2OGNHMFJaQW9KZXZXWW83RGcvbFoxQ1F6YmxXZVV2VkhtcjhmWTROcWQ5SkppSC96RVgyNG1KdmlINjBmQXlGcjBBM2M0YkMxajN5WlU2MFZnSnhYbjhKZ0pYTFVJc2lCbm1LbU1Zeis3eUJRRkJ2cWIyZVludVc1OWpvWkJmNTYvd1h2V0lSNFI4d1RtVjgwaTFtWnkrUzQrQlVFUytoemprMHVYcEMvLy96L0lscUhaMW1vbnpsWHA4YUNmaEdLTXRpNzNGSTFLYkwxcTZJS080ZnVCdVo1OWdhZ2puNXhVNzltdU1wSFhnNlMrZStnRE0vVTlCS0xIYmw5bDZvOGN6UUtsNFJVa0pKaXFmdFFHMmkzQk1nL1RRbFVZRmtKRFlCT092QXVnWXV6WVNEblpiRERkL2FTZDl4ME9lNkYrYkpjSGZsOStncDZMNS9UZ0ErQmRGRm92YmZDclE0MHM1dk1Qdzg4NjZwTlg4enlGR2VGV2R4SXBQVnA5UmcxVVBPVkZiRlpydmFGcS9ZQXpIUWdxTVdwYWhNWWZxSHBtd1hmSEwxL2twWW1HdUhGd1Q1NW1RdTBkeWxmTnVxMk9xMGhUTUNQd3FmeG51QklQTFhmY2k0WTFBTnkrMUNVaXBReGxkL2l6VmgxNld5RzJRMENRUTlOcXRBbngxSENId0RqN3NZeE9TQjB3b3BaU25PenhRT2NFeG14clZURjJCa090aFZwR2Z1aGFHRUNmQ0pwSktwam5paFkreE9UMlFKeE42MSs5SzZRU3F0djJTaHI4MkkzamdKcnFCZzB3RUxGWlBqdkhwdnpUdGFKbkxLNlZiOTdZbjkzM2tvTy9zYU43ZnNqd05LenA0bDJsSlZ4Mm9yakNHekMvNFpMNHpDdmVyNmFRWXRDNXNkb3ljaHVGRTZ1Zk9pb2crVldpNVVEa2Jtdm10YWgvM2FBckVCSWkzOXM1SUxVbmxGTGdpbGNHdXo5Q1FzaEVZN2Z3Mm91b0lMQVlQVlQvZ3lBSXEzVEZBSXdWc2wra3RrUnovcUdmbkNER3JtNWdzbC9sOVFkdkNXR3NqUHozZFU3WHVxS2ZkVXJyLzZYSWdqcDRyZXk2QUpCbUNtVUpNaklUSFZkRmI1bTFwK2RMTUNMOHQ1NXpENDJjbWZ0bUxFSkMwRGEwNFlpUkNWVUJMTGE4RDA3MS9ONVVCTkJYRGgwTEZzbWhWLzVCNUV4T0I0ajNXVkcvUzNsZks1bytWNkVMSHZ5NlJSOW40YWMrVnNLNFZFNHlwaFB2VitrRzlGZWdUQkg0WlJYTDJIeXRVSENkdUphekIvS3lramZldFl4T1hUTHdzMjY3YUdPZCtJK0poS1AvLytWblhtUzkwT0QvanZMY1Z1MGFzeXFjdVlOMW1TYjZYVGxDa3F2MXZpZ1pQSVl3TkYvenBXY1QxR1IvNmFFSVJqa2gweWhnNExYSmZhR29iWUpUWTRKSTU4S2lBS2dtbWdBS1dkbDVuWUNlTHFhdlJKR1FOdVl1WnRaRkd4K0lrSTR3NE5TMnh3YmV0Tk11bk9qQnUvaG1LQ0kvdzd0ZmlpeVVkLy80cmJUZVd0NGl6Qlk4WXZHSU42dnlLWW1QLzhYOHdIS0NlTitXUmNLTTcwK3RYS05HeWV2VTlIMkRnNUJzbGpuVGY4WWJzSjFUbU1zNzRDZTJYbEhpc2xlZ3VoeWVnNDRyUU9IWnV3LzZIVGtobm51cksyZDYycTZ5UzcyMTBTc0FJYVIralhNUUErc3Zrckxwc1VZK0YzMFV3ODl1T2RHQVI2dm80RklNRTBFZlZWZUhUdTZlS2ljZmhTcU9lWEpoYmZ0Y2QwOHNXRW5OVUwxQzlmbnByVGdkODNJTXV0OG9uVlVGMGh2cXpaZkhkdVBqYmp3RVhJY29ZbXkrUDZ0Y0paSG1lT3Y2VnJ2RWRrSERKZWNqSHVIZVdBTmU3OVZHNjYycVRqQS9IQ3Z1bVZ2M3FMK0xyT2NwcUdwczJaR3dRZEZKN1BVNGl1eVJsQnJ3Zk8reG5QeXI0N3MyY1hWYld6QXl6bkRpQkdqQ00za3N4ampxTTYyR0U5QzhmNVUzOGtCM1ZqdGFiS3AvblJkdk1FU1BHREc5MGJXUkxBdDFRazVEeUx1YXpSUjFZemRDMWMraFpYdkFXVjh4QTcyUzRBOEI2N3ZqVmhiYmEzTU1vcDI5M0ZlRVhwZTd6SXRNV3JKRy9MT0g5QnlPWG1Zbk5KZmptZnVYOUticnBnTE9iYTRuWitmbDhHYmR2L2lodis2d0ZHS0hDWXJWd21oRkMwSjNWMmJuMnRJQjF3Q2MxQ1NUM2QzWDJPeXhoZ3VYY3M0c202NzlVbmd6b2Z1U2VCZXdNRkpib0lRSGJVaC9tMkpoVzJoRzlESXZHMnQ3eVpJektCVHo5d0J0bk5DKzJwQ1JZaFNJdVExajh4c3o1VnZxbnlVSXRodnVveXl1N2ZOSXJnL0tRVVZtR1FhcWtxWmsvVng1YjMzL2dzRXM4eVg3U0MxSitOVjRpY3o2YnZJRTdDNUc2TWNCYUk4clZnNTZxNVFCSld4bi84N1Exc1BLNCtzUWE4ZkxVNWdYbzRwYWFxNGNPY1E0d1IwVkJIUEdqS2grVWxQQ2JBMW5MWHlFVVg0NXFaOEo3L0xuNEZQSkUyVGR6RDBaOE1MU05RaXlrTU1tU3lPQ2lGZnk4NFJxNjBlbVlCMnZEMDlLall3c29JcGVEY0JEVEVsQmJYeE5ENzJ5aGQ5cEMvMUNNaWQvNUhVTXZBTDI3T3RjSUpEek5LcFJQTnFQT3B5dDJhUEd6OVFXSXM5aFE5TGlYNXM4bTloalRVdS9mN015SWF0ampkK3RTZlEzdWZaeFBwbUpoVGFCdFp0S0xVY2ZPQ1VxQUR1TytRb0g4Qjl2NlUrUDBIVjFHTFFtdG9ORlRiM3M3NGl2WmdqRVMwcWZLKzhSZEdnQmJjQ01TeThlQnZoOTgrZXQxS0lGcVNlMUtRUHlYVUxCTVRzSVlueXNJd2laQkpZZEkyMHZzZVYrd3VKa2NxR2VtZWhLamFBYjlMNTd4Wm0zZzJ6WDBiWjJ4ay9mVStiQ283VGxuYlc3SnVGMVlkVVJvLzJHdzdWY2xERzFXN0xPdGFzMkxYNHVwaWZaLzIzcnpwc25ZL0FMZlJncmNXUDVoWW1WOVZ4Vk9RQTFmWnZwOUYyVU5VKzdkN3hSeVZtNXdpTHAzLzBkbFY3dmR3MVBNaVpyYkRBWXpJVnFFalJZMllVMDNzSmhQbmx3SVBjWlVHNWx0TDZTOFhDeFUxZVlTNWNqcjM0dmVCbVhBdnk3eU40WmpBcklHMGRmRC81VXBCTmxYMVpQb3hKT3d5cVJpM3dRV3RPemQ0b05LaDBMa29UbThjd3FnSWZLaHFxR09od283MUkrelhuTWVtVHYyQjJBVXpBQld5Rnp0R2dHVUxqRER6V1l3SlVWQlRqS0NuNUsyUUdNSzFDUVQ3U3p6aU9qbytCaEFtcUJqenVjM3hZeW0yZWVkR2VPSVJKVnlUd0R3MzdpQ01lNGc1VmJuc2I1WkJkeE9Bbk1UN0hVNERIcHhXR3VRN0dlaVkzMENwYnZ6c3M1NSs1S20xWXNiRDVlYTNOSTlRTllJWG9sNWFwZ1N1OWRaOGY4eFM1ZHRIcGlkbzVCY2xEdUxXWTRsaGlrMHRiSmEwN3lKaEgwQk95RXV0L0dSYllUUzZSZmlUWVdHTUNrTnBmU0hpN0h2ZGlUZ2xFVkhLWlhhVmhlekg0a2tYaUl2S29wWUFsUHVzZnRwRTRhNUlad3Z3MXgvZUx2b0RJaC96cG85RmlRSW5zVGIyU0FrS0hWNDJYWUJqcEpEZzQzNzRYaVZiM3dzNHFNMHM5ZVNRNUh6c01VNE9aSkt1b3BGakJNK2RBWkVsOFJVTXg1dVUyTjQ4NktyMTQxdFZzR1FmR2pPUllNQ0pBTXN4RUxlTlQ0Um1XalJjcGRUR0J3Y3g2WE45ZHJXcVBtSnpjckdySDQrRFJjNytuMXcza1Bad3UwQmtOcjZoUXJxZ283SlRCOUE1a2RKL0g3UDRjV0JNd3NtdWl4QXpKQjN5clFwbkdJcTkwbHhBWEx6RENkbjFMUGlic1J0N3JITmpnUUJrbFJnUFo4dlRialhkZ1hyVFdRc0s1TWRyWFhRVlBwMFJpbnEzZnJ6WktKMHFENlFoYzQwVnpBcmFVWGxvYjFndmtoSzN2cG1IZ0k2RlJsUVpOeDZlUnFrcDB6eTRBUWxYODEzZkFQdEwzak1SYWl0R0ZGam8wem1FcmxvQytoK1lZZFZRNms0Ri9lcHhBb0YwQm1xRW9LTlR0Nmo0dlFaTlEyQm9xRjlWajUzVE9Jb05tRGl1OVhwMTVSa0lnUUlHY29McGZvSWJlbnpwR1VBdHFGSnA1VytMTG54MzhqSGVFQ1RKL25hdktZMU5XZk4wc1kxVDgvcEI4a0lIM0RVM0RYK3U2VzNZd3B5cEJNWU9oYlN4R2pxODRSWjg0ZldKb3c4cHlIcW40Uy85SjE1RWNDTXNYcXJmd3lkOW1oaXUzK3JFbzlwUHBvSmtkWnFIanJhNE52ekZ3dVRoTkt5Nmhhby9TbEx3M1pBRFVjVXAzdzNTUlZmVzJyaGw4MHpPZ1RZbktFMEhzMnFwMUo2SDN4cVBxSWt2VURSTUZEWXlSYnNGSTNNOU1FeW92UGs4cmx3Ny8wYTgxY0RWTG1Cc1IyemUycEJ1S2IyM2ZiZVpDMHVYb0l2RHBwZlR3SUR4azFPcTJkR2VzR2Mrb0pYV0pMR2tPaGEzQ1grRFVuemdBcDlIR0g5UnNQWk42M0huNFJNQTVlU1ZoUEhPKzlSY1JiL0lPZ3RXMzFWMVE1SVBHdG94UGpDK01FSmJWbElNWUFEZDlhSFlXVUlRS29wdVBPSG1vcVNrdWJuQUtuemdLSHFnSU9mVzVSZEFnb3RONkJOK08yWllIa3VlbUxudlE4VTlUSFZyUzFSdExtS2JjQzdQZWVEc1l6bnZxemVnNlZDTndtcjBZeXgxd25ManlUODRCWnozRUp5Q3B0RDN5ZXVlQXlEV0lzMEwycXMvVlEzSFV5cWZyamEwVjFMZER6cUFpa2VXdVY0c2M3UkxJQjY5akVJQmpDa3laZWRvVUhxQ3JPdlNoVnp5ZDczT2RySlcwaFBPdVF2MnFPb0hEYzl4VmI2WXU2dXEzWHFwMlphSDQ2QTdsemV2YnhRRW1mcnp2QVlTSnVaNFdEazFIejNRWDFMVmRpVUswRXZsQUdBWWxHM01kMzByN2RjUE42M3lxQkNJajI1cHJwdlpQMG5JNCtFZ1dvRkc5NVY1OTZDdXJYcEtSQkdSalFsSEN2eTVJYi9pVzhuWkpXd3JFVDNtZ2Q2bUVoZlA0S0N1YUxqb3BXczdoK01kWEZkSXY4ZEhRSmdnMXhpMWVZcUIwdURZanh3Vm1yaTBTdjVYS3V0L29ucWFwQytGUWlDMkMxbHZZSjlNVmNvNnlEWXNTM0FBTlVmTXR2dGJZSTJoZndaYXRpU3Nub1VlTVpkMzRHVmprTU1LQStYbmpKcFhnUlcyU0hUWnBsVm93UG1Kc3ZYeTZ3M2NmTzFBSzJkdnRaRUtUa0MvVFk5TEZpS0hDRzBEbnJNUWRHbTJsemxCSE05aUVZeW5IMlVjVk1oVUVqc2Mwb0RCVGdvMlpTUTFnemtBSGVXZUJYWUZqWUx1dWY4eXpUQ3k3L1JGUjgxV0RqWE1icTJCT0g1ZFVSbnhvNm9pdm14TDNjS3pLSW5sWmtEMzFudnBIQjlLazdHZmNmRTF0KzFWNjRiOUx0Z2VKR2xwUkZ4UUNBcVdKNURvWTc3c2tpOGdzT0VPcjJ1eXdaYW9PL05HYTBYMHkxcE5RSEJpM2IyU1VHTnBjWnhEVDdyTGJCZjFGU25ROGd1eEdXM1crMzZCVzBnQmplNERPejZCYTZTVmsweGlLZ3QrcTJKT0Z5cjRTWWZudStJYzFRWllJdXdIQnJnenI2VXZPY1NDelBUT283RDZJQzRJU2VTN3prbDRoKzJWb2VIcG5HL3VXUjMreXNOZ1BjT0lYUWJ2MG40bXIzQndRY2RLSnhnUFNleXVQL3oxSmpnNGU5blV2b1hlZ3FRVklFMzBFSHg1R0h2K0ZBVlVOVG93WURKZ3lGaGY1SXZsWW1FcVJpZjYrV04xTWtFSm1EY1FJVHg5RlgyM2E0bXh5MUFRUnNPSE8vK2VJbVg5bDhFTUpJM29QV3pWWHhTT2VIVTFkVVdZcjJ1QUE3QU1iK3ZBRVpTYlUzcW9iOWliQ3lYZXlwRU1wWjY4NjNvNlFQcWxxR0haa3VXQUJTVFZOZDRjT2g5aHYzcUVwU3gyWnkvREpNUDZjSXRFbWlCSjVQRnFRbkRFSXQzTnJBM0NPbE9TZ3o0M0Q3Z3BORk5KNU1CaDRvRnpoRFBpZ2xDMnlwc05VNElTeXdZMmVya3liMU5DM1FoL0lmV2owZURnWkk0L2xuOFdQZkJzVDNtZVRqcTFVcXQxRTdabC9xZnRxa3g2YU05S3VlTUNla1NuTXJjSGoxQ3FUV1d6RXpQc1pHY0RlM1VlNFdzK1hGWVZ4TmJPRkY4ZXprdlFHUjZaT3RPTFUybFFFbk1CU3R4NDd2RTZQYjdBWU1CUmoyT09mWlhmaXNqSm5wVGZTTmpvNnNaNnFTdk54Wk5tRGVTN0drM3lZeUNrMUh0S04yVW5oTUlqT1hVekFxRHY5MGx4OU8vcS9BVDFaTW5pdDVYUWU5d21ReG5FL1dTSDBDcVo5LzJIeStTZm1wZWc4UndzSEk1WjhrQzhIMjkzbS9MSFZWTS9CQTdIYVRKWWc1RW5rN00veFdwcTAxOTJBQ2ZCYWkyTEEvcXJDakNyNkRoMUJJTXpNWElOQm1YOTZNSjVIbjJueGxuL1JYUEZod0h4VW1TVjBFVjJWMGptODYvZHh4dVlTVTFXN3NWa0ViTjlFemtHMFFGd1BoeUhLeWIzdCtGajVXb1VVVEVyY2F6RS9ONkVXNkx2cDBkLy9TRFBqN0VWOVVkSk4rQW1uZjNXd2szQTBTbEo5WjAweXZYWjduM3o3MEc0N0hmc293OFdxMUpYY2Z3bkErWXhhNW1Gc2dWNDY0S0tQNFQzMXdxSWd6RlBkM2VDZTNqNW9yeTVmQkYyaGdDRnlWRnJMekk5ZWV0Tlh2TTdvUXF5RmdEbzRDVHAvaERWOU5NWDlKREhRL255SFRMdlpMTkxGNmZ0bjJPeGpHbTgrUHFPd2h4blBIV2lwa0UvOHdidHlyaTgwU3I3cE1Oa1FHTWZvNFpZSzlPY0NDNEVTVkZGYkxNSXZseFNvUnFXaWUwd3hxbkxmY0xTWE1TcE1NUUVKWURWT2JZc1hJUU52NFRHTndqcTFrdlQxVU9raWNUckczSWFCWjNYZFNjUzN1OHNnZVpQVnBPTGtiaUY5NDBGamJDZU5SSU5OdkRiZDAxRVBCclRDUHBtMTJtNDN6ZTFiQkI1OUlhNk92aG51ci9OdngzSXh3U1dvbCszSDJxZkNKUjhkZjZhUWY0djZXaU9OeGtLK0lxVDRwS1FyWksvTHBsZ0RJL1BKWmJPZXA4ZHRiVjdvQ3I2Q2dmcFdhOE5jek9rUHg4MWlTSGJzTmhWU0pCT3RyTElNckwzMUxLOVRxSHFBYkFIZTBSTG1tVjgwNmtSTERMTkVoVUVKZm05dTBzeHBrTDkzWmdkNnJ3K3RxQmZUTWk1OXhxWEhMWFNId1NiU0JsMEVLMCtsb0VDT1B0cmwrL25zYUZlMTk3ZGk0eVVnb2U0aktvQUpEWGM2REdEanJRT29GRFdaSjlIWHd0OHhEclFQKzdhUndXS1dJMUdGOHM4TzRLenhXQkJjd25sM3ZubDFPZXozb2g2RWExdmpSNy96N0REVHJGdHFVMlcvS0FFekF1WEROWjdNWTczTUYyMTZkemRTYldtVXA0bGNtN2tlSmZXYU1IZ3V0OXg1QzltajY2WjBsSit5aHNqVnZ5aVdyZmsxbHpQT1RkaEcxNVk3Z1FsWHRhY3ZJN3F2L1hOU3NjRHdxa2d3SFQvZ1VzRDV5QjdMZFJSdkp4UUdZSU5uOWhUcG9kS0ZWU1RQcnRHdnlRdytIbFJGWElrb2RFckFHdTlJeTFZcGZTUGMzamtGaDVDWDNsUHh2N2FxakUvSkFmVElwRWpHYi9IN01PMGUydnNWaVNXMXFhL0xtaTQvbjRERUkzZzdsWXJjYW5zcERmRXBLa2RWMU9qU0xPeTBCQ1VxVm9FQ2FCNTV2czA2clhsNGpxbUxzUHNGTS83dllKMHZyQmhEQ20vMDBBL0g4MWwxdWVrSi82TG1sM0hiOStOS2lMcUFUSm1EcHl6ZllaRkh1bUVqQzY2MkwwQndreGk3RTlVNGNRQTBYTVZEdU1ZQUllTE1QZ1FhTVZPZDhmbXQ1U2ZsRklmdUJvc3plQXc3b3c1Z1hQRTJZL3lCYy83akV4QVJVZi9CeElIUUJGNVNuM2k2MXc0ejV4SmRDeU8xRjFYMyszYXgrSlN2TWVaN1M2UVNLcDFGcC9zall6NlorVmdDWnppYkdlRW91anJ5Zk11bEg3UmFpNWtBZnQ5ZWJjVzUwRHlKcjJ1bzJ6OTdtVFdJdTQ1WXNTbk5TTXJyTlV1RzFYc1lCdEQ5VERZelFmZktCODd2V2JrTTRFYlBBRmdvQlY0R1FTK3Z0RkRVcU9GQW9pMW5UdG1JT3ZnMzhONGhUMlNuOHI4Y2xtQkNYc3BCbE1CWVRucnFGSkdCVDN3Wk96QXlKRHJlOWRISDcreDdxYWFLRE9CNFVRQUxENWVjUzBERTRvYnViUUVpdUpaMEVwQlZwTHVZY2NlOEFhNFBZZC9WNERMREFKQllLUVBDV1RjckVhWjVIWWJKaTExR2Q2aGpHb20xaWkxOFZIWW5HMjhOS3BrejJVS1ZQeGxoWVNwOHVacjM2N2lPbW95N3pzeGVoVzl3emN5MnpHMGE4MFBCTUNSUU1iMzJobmFIZU9SOGZuTkR6WmhhTlloa09kRHNCVVozbG9ETWExWVAwdVMwY2pVUDNiLzZEQmxxbVpPZU5BQkRzTGw1Qkk1UUp1cHM4dXhBdVdKZGtVQi9wTzZaYXg2dHNnN2ZONW1qakRnTUduZ08rRFBjS3FpSElEYkZJR3VkeHRQVEl5RGk5U0ZNS0JEY2ZkR1FSdjQxcTFBcW14Z2tWZkpNblA4dy9CYzdOOS9UUjZDN21HT2JGcUZrSUVvbThzS2kyeFlxSkxUQ0hLN2N4emFadnFPRG8yMmMzd2lzQkNQNEhlQWdjUmJOUEFzQmtOUmhTbUQ0OGRIdXBkQlJ3NG1JdnRTNW9lRjZ6ZVQxS01DeWhNbm1ocGtGQUdXbkdzY29Oa3d2UThaTTVsRS92Z1RIRllMOTlPdU54ZEZCeFRFRGQ1djJxTFI4eTlXa1hzV2dHNmtaTm5kRkcrcE8vVUFrT0NpcHFJaEwzaHE3Y1JTZHJDcTdZaFVzVG9jRWNuYUZhNm5Wa2huU2VSWVVBMVlPMHo1aXRGOVNseTNWbHhZRHcyMzlUSkpINmYzRVVmWU81bGI3YmNGY3o4QnA3T284UW1uc1VIT3ovZmFnVlVCdEtFdzFpVDg4aithS2t2OGNzY0tOa014allyODM0NEQxa0ZvWjcvdGQxVzZMQ05ZTjU5NDMwMXRVR1JtRmpBemVSZzV2eW9NMUY2K2JKWi9RNTRqTi9rOFNGZDNEeFBUWWFBVXNpdnNCZmdUbjdNeDhIMlNwUHQ0R09kWVJuRUpPSDZqSE0ycDZTZ0IwZ3pJUnE2Zkh4R01tU21xYVBDbWxmd3hpdWxvYVZJaXRMR044d2llMkNEV2hrekxvQ0pjT0RoN0tJT0FxYkhFdlhkVXhhUzRUVFRzMDdDbHpqLzZHbVZzOWtpWkRlck14RW5oVUI2UVFQbGNmcWtHOTg4MlJxSG9MaUhHQm9IZlF1WElzQUc4R1RBdGFvMktWd1JudnZhbThqbzFlMzEyR1FBS1dFYTRzVVZFQU1HNEc2Y2tjT05Ed1JjZzFlMkQzK29oWGdZNFVBV0Y4d0hLUU1yU256Q2dmRnBzeGgrYUhYTUd0UFFyb1Fhc1JZNFU2VWRHMHJ6MVZqYmthME1la09HUlpRRXZxUUZseHNlRm9yOHpXRmdIZWszdjI5K1dxTjZnYUs1Z1pPVE9NWnpwUUlDMTIwMUxrTUNYaWxkM3ZXWFNjNVVYOXhjRllmYlJQekdGYTFGRGNQZlBCL2pVRXEvRmVHdDQxOUNJM1ltQmxWb0hzYTRLZGN3UVA1WlN3SEhoRko3L1BoL1JhcC80dm1HOTFlRHdQUDBsRGZDRFJDTHN6VHFmek03MXhwbWlLaTJId1M0V2xxdkdOd3R2d0Y1RHFwbjZLVHE4YXgwMFVNUGt4RGNackVFRXNJdkhpVVhYRXBoZGI0R0I0RnltbFB3Qno0R3BlcnFxNXBXN1RRNi95TlJoVzhWVDVOaHVQMHVkbHhvNGdJTHE1WnhBWms4WkdoM2c0Q3F4SmxQS1k3QVF4dXBmVWNWcFdUNVZJdHAxKzMwVXFveVA0d1dzUm8zb2xSUmdrV1paMlpONlZDM09aRmVYQjhOYm5VclNkaWtOcHREMVFpR3VLa3I4RW1TUi9BSzlSdytGRjNzNXV3dVBidkhHaVBlRk9WaWx0TUs3QVVhT3NxOSt4OWNuZGszaUpFRTVMS1pSbFdKYktPWndlUk96bVBOVlBrakUzSy9UeUE1N1JzNjhUa1ozTVI4YWtLcG03Y0ZqbmpQZC9EZGtXamdZb0tIU3I1V3U1c3NvQllVNGFjUnM1ZzJESHhVbWRxOFZYT1hSYnVuRDhRTjBMaGdrc3NnYWhjZG9Zc052dVhHVUsvS1hELzdvRmIrVkdkaHFJbjAydmV1TTViTHVkSk9jMkt5MEdNYUc0Vy94V0J4SUpjTDd5bGlKT1hPcHgwQWtCcVVnemxEY3ptTFQ0aUlMWER4eHRSUjFvWmEySldGZ2lBYjQzb2JySm5HL1RaQzJLU0syd3FPelJaVFhhdlpaRk1iMWYzYlh2VmFOYUs4Mjh3OVRPNjEwZ2s4Sk5mM2dNZkVUelhYc2JjdlJHQ0c5SldRWjYrY0RQcWM0NDY2WW8yUmNLSCtQSUxlS09xdG5sYkluUjNNbUJlR0czRkgxMHl6a3lidXFFQzJIU1F3cEEwQW43ZDkrNzNCa0RVVG0zMGJabW9QL1JHYmdGTitHckNPZkFEZ3FyMFdiSTFhMW9rcEZtczhpSFl3OWhtMHpVdmxFTWl2QlJ4TW9kcmJKSis5L3AzalVkUVE5QkN0UWR4bk9HclQ1ZHpSVW13MDU5My9tYlJTZEJnMG5SdlJaTTUvRTE2bTdaSG1ERXRXaHd2ZmRaQ1o4SjhNMTJXMHlSTXN6WGFtV2ZRVHdJWjRheVlrdHJuc2NRdVdyOGlkcDNQalQyZUYvam10ZGhJZmNwTW5iK0lmWlkyRmViVzZVWS9BSzNqUDR1M1R1NHpFNHFsblFnTEZiTTE5RUJJc05mN0toamRicVEvRDZ5aURiK05sRWkyU0tEK2l2WFZVSzhpYjBvQm8zNjZnWGtSOFp4R2pwSklEY0VnWlBhOVRjWWUwVEliaVBsL3JQVVFEdTNYQko5WC9HTnEzRkFVc0tzbGw1N0R6YUdNcmpjVCtnY3RwKzlNTFlYQ3Erc3FQODFlVlEwcjlsdCtnY1FmWmJBQ1JiRWp2bE1za3p0Wkc4Z2JDOFFuOXR0MjZRN3k3bkRyYlpxL0xFejdrUjZKYzZwZzNOOXJWWDhZNU1KckdsTUw5cDlsVTRqYlRrS3FDdmVlWlVKakhCMDNtMktSS1IyVHl0b0ZrVFhPTGc3a2VVMXMxbHJQTVFKcG9PS0x1QUFDK3kxSGxKdWNVNnlzQjVoc1hodlNQUExxNUo3SnRucUhLWjR2WWpDNFZ5ODE1M1FZKzY3ODB4RHVHQVJzR2JPczFXcXpIMFFTNzY1cm5TS0ViYktsa084b0kvVkR3VWQwaXMxM3RLcHFJTHUxbURKRk55L2lKQVdjdkRnanh2dXNJVCtQR3ozU1QvSjlyOU10ZmQwanBhR2VpTFlJcVhjN0RpSFNTOFRjakZWa3NpNjZQRWt4VzF6NnVqYkxMVUdOTlluek9XcEg4QlpHSzRiQ0s3aVIrTWJJdjhuY0RBejF1NFN0TjN2VFR6ZXdyOUlRams5d3hGeG4rNk4xZGRLczB2ZmZKaVMwOE4zYTRHMVNWcmxaOTdRL00rOEc5ZmU1QVA2ZDkvUXE0V1JuT1JWaG9mUElLRWRDcjNsbHNwVWZFMG9LSUlZb0J5QlJQaCtiWDFITFMzSldHSlJoSXZFMWFXNE5UZDhlUGk0WitrWGIrWjhzbllmU05jcWlqaEFnVnN4NFJDTTU0Y1hVaVlramVCbW1DNGFqT0hyQ2hvRUxzY0pKQzcrOWpqTWp3NUJhZ1pLbGdSTWlTTll6N2g3dnZaSW9RcWJ0UW1zcGMwY1VrMUcvNzNpWHRTcFJPbDV3dExnUWkwbVcyRXg4aTNXVUxoY2dneDZFMUxNVkhVc2RjOUdISTFQSDNVMktvMFB5R2RuOUtkVk9MbTdGUEJ1aTBpOWEwSHBBNjBNc2V3VkU0ejhDQXQ1ZDQwMUd2NnpYbElUNVliaXQxVklBMEZDczd3dHZZcmVydTFmVXlXM29MQVovK2FUblpyT2NZUk5WQThzcG9SdGxSb1dmbHNSQ2xGY2d6a3FpSE9yZjAvU1Z3K0VwVmFGbEowZzRLeHExTU1PbWlRZHBNTnB0ZThsTU1RcW02Y0lGWGxuR2JmSmxseXNLRGkrMEpKTW90a3FnSXhPU1FnVTlkbi9sV2tlVmY4blVtM2l3WDJObDNXRHc5aTZBVUszdkJBYlpacmNKcERRL042NEFWd2pUMDdKZWYzMEdTU210TnUyV2xXN1lveVcyRmxXZlpGUVV3azg2N0VkTFlLazlWRzZKZ0VuQmlCeGtZN0xNbzRZTFFKSmxBbzlsL29UdkprU0FSREYvWHR5QXpNOE8ydDNlVC9pWGE2d0ROM1dld05tUUhkUGZzeENoVS9LdExHMk1uOGk0WnFLZFNsSWFCWmFkeEptUnpWUy9vNHlBNjVSVFNWaXE2MG9hMzk1THF3MHB6WTRTaXB3RTBTWFhzS1YrR1pyYUdTa3IvUlcwOHdQUnZxdlNVa1lCTUE5bFB4NG0yNGF6K0lIbUNiWEErMGZheFRSRTl3dUdlTzA2RElYYTZRbEtKM3B1SXlpdUFWZlByNzM2dnpvMnBCaXJTK1Z4ZWwzVE1tM0pLaHo5bzJab1J2YUZWcElreWtiMEhjbTRvSEZCTWNOU05qNy80R0p0NDNvZ29uWTJWZzRuc0RRSVd4QWNvcnBYQUN6Z0JxUVBqWXNFL1ZVcFhwd05NYW5FcnU0TndNQ0ZQa1h2TW9xdm9lTE4zcXl1L04xZVdFSHR0TUQ2NXYxOWwvMGtIMm1SMzVpdi9GSSt5am9ISjlnUE16NjdhZjNNcS9Cb1dYcXUzcnBoaVdNWFZrbW5QU0VrcEdwVUkyaDFNVGhpZGVHRkVPSzZZWkhQd1l6TUJ2cE5DNytaSHhQYjdlcGZlZkd5SUI0SnpPOURUTkVZbkRMVlZIZFF5dk9FVmVmcms2VXY1a1RRWVZZV1dkcXJkY0lsN3lsand3SVdkZlEveSsyUUIzZVIvcXhZT2J1WXlCNGdUYm8yaW40UHphclUxc085bkVUa21qOS9Bb3hEQStKTTNHTXFRdEpSNGp0ZHVIdG5vQ0x4ZDFnUVVzY0hSQi9Nb1JZSUVzUDJwRFo5S3ZIZ3RsazFpVGJXV2JIaG9od0ZFWVg3eTUxZlVWMm51VW1ub1VjcW5XSVFBQWdsOUxUVlgrQmMwUUdORWhDaHhIUjRZamZFNTFQVWRHZnNTRkU2Y2s3QkwzL2hUZjlqTHE0RzFJYWZJTnhPTEtlQXRPN3F1dWxZdkg1WU9CYyt6WDdDck1nV25XNDcvamZSc1duSmpZWW9FN3hNZldWMkhOMml5SXFMSSc7XG5jb25zdCBGRU5DRUQgPSBuZXcgTWFwKFtbODIxNyxcImFwb3N0cm9waGVcIl0sWzgyNjAsXCJmcmFjdGlvbiBzbGFzaFwiXSxbMTI1MzksXCJtaWRkbGUgZG90XCJdXSk7XG5jb25zdCBOU01fTUFYID0gNDtcblxuZnVuY3Rpb24gZGVjb2RlX2FyaXRobWV0aWMoYnl0ZXMpIHtcclxuXHRsZXQgcG9zID0gMDtcclxuXHRmdW5jdGlvbiB1MTYoKSB7IHJldHVybiAoYnl0ZXNbcG9zKytdIDw8IDgpIHwgYnl0ZXNbcG9zKytdOyB9XHJcblx0XHJcblx0Ly8gZGVjb2RlIHRoZSBmcmVxdWVuY3kgdGFibGVcclxuXHRsZXQgc3ltYm9sX2NvdW50ID0gdTE2KCk7XHJcblx0bGV0IHRvdGFsID0gMTtcclxuXHRsZXQgYWNjID0gWzAsIDFdOyAvLyBmaXJzdCBzeW1ib2wgaGFzIGZyZXF1ZW5jeSAxXHJcblx0Zm9yIChsZXQgaSA9IDE7IGkgPCBzeW1ib2xfY291bnQ7IGkrKykge1xyXG5cdFx0YWNjLnB1c2godG90YWwgKz0gdTE2KCkpO1xyXG5cdH1cclxuXHJcblx0Ly8gc2tpcCB0aGUgc2l6ZWQtcGF5bG9hZCB0aGF0IHRoZSBsYXN0IDMgc3ltYm9scyBpbmRleCBpbnRvXHJcblx0bGV0IHNraXAgPSB1MTYoKTtcclxuXHRsZXQgcG9zX3BheWxvYWQgPSBwb3M7XHJcblx0cG9zICs9IHNraXA7XHJcblxyXG5cdGxldCByZWFkX3dpZHRoID0gMDtcclxuXHRsZXQgcmVhZF9idWZmZXIgPSAwOyBcclxuXHRmdW5jdGlvbiByZWFkX2JpdCgpIHtcclxuXHRcdGlmIChyZWFkX3dpZHRoID09IDApIHtcclxuXHRcdFx0Ly8gdGhpcyB3aWxsIHJlYWQgYmV5b25kIGVuZCBvZiBidWZmZXJcclxuXHRcdFx0Ly8gYnV0ICh1bmRlZmluZWR8MCkgPT4gemVybyBwYWRcclxuXHRcdFx0cmVhZF9idWZmZXIgPSAocmVhZF9idWZmZXIgPDwgOCkgfCBieXRlc1twb3MrK107XHJcblx0XHRcdHJlYWRfd2lkdGggPSA4O1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIChyZWFkX2J1ZmZlciA+PiAtLXJlYWRfd2lkdGgpICYgMTtcclxuXHR9XHJcblxyXG5cdGNvbnN0IE4gPSAzMTtcclxuXHRjb25zdCBGVUxMID0gMioqTjtcclxuXHRjb25zdCBIQUxGID0gRlVMTCA+Pj4gMTtcclxuXHRjb25zdCBRUlRSID0gSEFMRiA+PiAxO1xyXG5cdGNvbnN0IE1BU0sgPSBGVUxMIC0gMTtcclxuXHJcblx0Ly8gZmlsbCByZWdpc3RlclxyXG5cdGxldCByZWdpc3RlciA9IDA7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBOOyBpKyspIHJlZ2lzdGVyID0gKHJlZ2lzdGVyIDw8IDEpIHwgcmVhZF9iaXQoKTtcclxuXHJcblx0bGV0IHN5bWJvbHMgPSBbXTtcclxuXHRsZXQgbG93ID0gMDtcclxuXHRsZXQgcmFuZ2UgPSBGVUxMOyAvLyB0cmVhdCBsaWtlIGEgZmxvYXRcclxuXHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0bGV0IHZhbHVlID0gTWF0aC5mbG9vcigoKChyZWdpc3RlciAtIGxvdyArIDEpICogdG90YWwpIC0gMSkgLyByYW5nZSk7XHJcblx0XHRsZXQgc3RhcnQgPSAwO1xyXG5cdFx0bGV0IGVuZCA9IHN5bWJvbF9jb3VudDtcclxuXHRcdHdoaWxlIChlbmQgLSBzdGFydCA+IDEpIHsgLy8gYmluYXJ5IHNlYXJjaFxyXG5cdFx0XHRsZXQgbWlkID0gKHN0YXJ0ICsgZW5kKSA+Pj4gMTtcclxuXHRcdFx0aWYgKHZhbHVlIDwgYWNjW21pZF0pIHtcclxuXHRcdFx0XHRlbmQgPSBtaWQ7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c3RhcnQgPSBtaWQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmIChzdGFydCA9PSAwKSBicmVhazsgLy8gZmlyc3Qgc3ltYm9sIGlzIGVuZCBtYXJrXHJcblx0XHRzeW1ib2xzLnB1c2goc3RhcnQpO1xyXG5cdFx0bGV0IGEgPSBsb3cgKyBNYXRoLmZsb29yKHJhbmdlICogYWNjW3N0YXJ0XSAgIC8gdG90YWwpO1xyXG5cdFx0bGV0IGIgPSBsb3cgKyBNYXRoLmZsb29yKHJhbmdlICogYWNjW3N0YXJ0KzFdIC8gdG90YWwpIC0gMTtcclxuXHRcdHdoaWxlICgoKGEgXiBiKSAmIEhBTEYpID09IDApIHtcclxuXHRcdFx0cmVnaXN0ZXIgPSAocmVnaXN0ZXIgPDwgMSkgJiBNQVNLIHwgcmVhZF9iaXQoKTtcclxuXHRcdFx0YSA9IChhIDw8IDEpICYgTUFTSztcclxuXHRcdFx0YiA9IChiIDw8IDEpICYgTUFTSyB8IDE7XHJcblx0XHR9XHJcblx0XHR3aGlsZSAoYSAmIH5iICYgUVJUUikge1xyXG5cdFx0XHRyZWdpc3RlciA9IChyZWdpc3RlciAmIEhBTEYpIHwgKChyZWdpc3RlciA8PCAxKSAmIChNQVNLID4+PiAxKSkgfCByZWFkX2JpdCgpO1xyXG5cdFx0XHRhID0gKGEgPDwgMSkgXiBIQUxGO1xyXG5cdFx0XHRiID0gKChiIF4gSEFMRikgPDwgMSkgfCBIQUxGIHwgMTtcclxuXHRcdH1cclxuXHRcdGxvdyA9IGE7XHJcblx0XHRyYW5nZSA9IDEgKyBiIC0gYTtcclxuXHR9XHJcblx0bGV0IG9mZnNldCA9IHN5bWJvbF9jb3VudCAtIDQ7XHJcblx0cmV0dXJuIHN5bWJvbHMubWFwKHggPT4geyAvLyBpbmRleCBpbnRvIHBheWxvYWRcclxuXHRcdHN3aXRjaCAoeCAtIG9mZnNldCkge1xyXG5cdFx0XHRjYXNlIDM6IHJldHVybiBvZmZzZXQgKyAweDEwMTAwICsgKChieXRlc1twb3NfcGF5bG9hZCsrXSA8PCAxNikgfCAoYnl0ZXNbcG9zX3BheWxvYWQrK10gPDwgOCkgfCBieXRlc1twb3NfcGF5bG9hZCsrXSk7XHJcblx0XHRcdGNhc2UgMjogcmV0dXJuIG9mZnNldCArIDB4MTAwICsgKChieXRlc1twb3NfcGF5bG9hZCsrXSA8PCA4KSB8IGJ5dGVzW3Bvc19wYXlsb2FkKytdKTtcclxuXHRcdFx0Y2FzZSAxOiByZXR1cm4gb2Zmc2V0ICsgYnl0ZXNbcG9zX3BheWxvYWQrK107XHJcblx0XHRcdGRlZmF1bHQ6IHJldHVybiB4IC0gMTtcclxuXHRcdH1cclxuXHR9KTtcclxufVx0XHJcblxyXG4vLyByZXR1cm5zIGFuIGl0ZXJhdG9yIHdoaWNoIHJldHVybnMgdGhlIG5leHQgc3ltYm9sXHJcbmZ1bmN0aW9uIHJlYWRfcGF5bG9hZCh2KSB7XHJcblx0bGV0IHBvcyA9IDA7XHJcblx0cmV0dXJuICgpID0+IHZbcG9zKytdO1xyXG59XHJcbmZ1bmN0aW9uIHJlYWRfY29tcHJlc3NlZF9wYXlsb2FkKHMpIHtcclxuXHRyZXR1cm4gcmVhZF9wYXlsb2FkKGRlY29kZV9hcml0aG1ldGljKHVuc2FmZV9hdG9iKHMpKSk7XHJcbn1cclxuXHJcbi8vIHVuc2FmZSBpbiB0aGUgc2Vuc2U6XHJcbi8vIGV4cGVjdGVkIHdlbGwtZm9ybWVkIEJhc2U2NCB3L28gcGFkZGluZyBcclxuLy8gMjAyMjA5MjI6IGFkZGVkIGZvciBodHRwczovL2dpdGh1Yi5jb20vYWRyYWZmeS9lbnMtbm9ybWFsaXplLmpzL2lzc3Vlcy80XHJcbmZ1bmN0aW9uIHVuc2FmZV9hdG9iKHMpIHtcclxuXHRsZXQgbG9va3VwID0gW107XHJcblx0Wy4uLidBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ10uZm9yRWFjaCgoYywgaSkgPT4gbG9va3VwW2MuY2hhckNvZGVBdCgwKV0gPSBpKTtcclxuXHRsZXQgbiA9IHMubGVuZ3RoO1xyXG5cdGxldCByZXQgPSBuZXcgVWludDhBcnJheSgoNiAqIG4pID4+IDMpO1xyXG5cdGZvciAobGV0IGkgPSAwLCBwb3MgPSAwLCB3aWR0aCA9IDAsIGNhcnJ5ID0gMDsgaSA8IG47IGkrKykge1xyXG5cdFx0Y2FycnkgPSAoY2FycnkgPDwgNikgfCBsb29rdXBbcy5jaGFyQ29kZUF0KGkpXTtcclxuXHRcdHdpZHRoICs9IDY7XHJcblx0XHRpZiAod2lkdGggPj0gOCkge1xyXG5cdFx0XHRyZXRbcG9zKytdID0gKGNhcnJ5ID4+ICh3aWR0aCAtPSA4KSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZXQ7XHJcbn1cclxuXHJcbi8vIGVnLiBbMCwxLDIsMy4uLl0gPT4gWzAsLTEsMSwtMiwuLi5dXHJcbmZ1bmN0aW9uIHNpZ25lZChpKSB7IFxyXG5cdHJldHVybiAoaSAmIDEpID8gKH5pID4+IDEpIDogKGkgPj4gMSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRfZGVsdGFzKG4sIG5leHQpIHtcclxuXHRsZXQgdiA9IEFycmF5KG4pO1xyXG5cdGZvciAobGV0IGkgPSAwLCB4ID0gMDsgaSA8IG47IGkrKykgdltpXSA9IHggKz0gc2lnbmVkKG5leHQoKSk7XHJcblx0cmV0dXJuIHY7XHJcbn1cclxuXHJcbi8vIFsxMjNdWzVdID0+IFswIDNdIFsxIDFdIFswIDBdXHJcbmZ1bmN0aW9uIHJlYWRfc29ydGVkKG5leHQsIHByZXYgPSAwKSB7XHJcblx0bGV0IHJldCA9IFtdO1xyXG5cdHdoaWxlICh0cnVlKSB7XHJcblx0XHRsZXQgeCA9IG5leHQoKTtcclxuXHRcdGxldCBuID0gbmV4dCgpO1xyXG5cdFx0aWYgKCFuKSBicmVhaztcclxuXHRcdHByZXYgKz0geDtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcblx0XHRcdHJldC5wdXNoKHByZXYgKyBpKTtcclxuXHRcdH1cclxuXHRcdHByZXYgKz0gbiArIDE7XHJcblx0fVxyXG5cdHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRfc29ydGVkX2FycmF5cyhuZXh0KSB7XHJcblx0cmV0dXJuIHJlYWRfYXJyYXlfd2hpbGUoKCkgPT4geyBcclxuXHRcdGxldCB2ID0gcmVhZF9zb3J0ZWQobmV4dCk7XHJcblx0XHRpZiAodi5sZW5ndGgpIHJldHVybiB2O1xyXG5cdH0pO1xyXG59XHJcblxyXG4vLyByZXR1cm5zIG1hcCBvZiB4ID0+IHlzXHJcbmZ1bmN0aW9uIHJlYWRfbWFwcGVkKG5leHQpIHtcclxuXHRsZXQgcmV0ID0gW107XHJcblx0d2hpbGUgKHRydWUpIHtcclxuXHRcdGxldCB3ID0gbmV4dCgpO1xyXG5cdFx0aWYgKHcgPT0gMCkgYnJlYWs7XHJcblx0XHRyZXQucHVzaChyZWFkX2xpbmVhcl90YWJsZSh3LCBuZXh0KSk7XHJcblx0fVxyXG5cdHdoaWxlICh0cnVlKSB7XHJcblx0XHRsZXQgdyA9IG5leHQoKSAtIDE7XHJcblx0XHRpZiAodyA8IDApIGJyZWFrO1xyXG5cdFx0cmV0LnB1c2gocmVhZF9yZXBsYWNlbWVudF90YWJsZSh3LCBuZXh0KSk7XHJcblx0fVxyXG5cdHJldHVybiByZXQuZmxhdCgpO1xyXG59XHJcblxyXG4vLyByZWFkIHVudGlsIG5leHQgaXMgZmFsc3lcclxuLy8gcmV0dXJuIGFycmF5IG9mIHJlYWQgdmFsdWVzXHJcbmZ1bmN0aW9uIHJlYWRfYXJyYXlfd2hpbGUobmV4dCkge1xyXG5cdGxldCB2ID0gW107XHJcblx0d2hpbGUgKHRydWUpIHtcclxuXHRcdGxldCB4ID0gbmV4dCh2Lmxlbmd0aCk7XHJcblx0XHRpZiAoIXgpIGJyZWFrO1xyXG5cdFx0di5wdXNoKHgpO1xyXG5cdH1cclxuXHRyZXR1cm4gdjtcclxufVxyXG5cclxuLy8gcmVhZCB3IGNvbHVtbnMgb2YgbGVuZ3RoIG5cclxuLy8gcmV0dXJuIGFzIG4gcm93cyBvZiBsZW5ndGggd1xyXG5mdW5jdGlvbiByZWFkX3RyYW5zcG9zZWQobiwgdywgbmV4dCkge1xyXG5cdGxldCBtID0gQXJyYXkobikuZmlsbCgpLm1hcCgoKSA9PiBbXSk7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCB3OyBpKyspIHtcclxuXHRcdHJlYWRfZGVsdGFzKG4sIG5leHQpLmZvckVhY2goKHgsIGopID0+IG1bal0ucHVzaCh4KSk7XHJcblx0fVxyXG5cdHJldHVybiBtO1xyXG59XHJcbiBcclxuLy8gcmV0dXJucyBbW3gsIHlzXSwgW3grZHgsIHlzK2R5XSwgW3grMipkeCwgeXMrMipkeV0sIC4uLl1cclxuLy8gd2hlcmUgZHgvZHkgPSBzdGVwcywgbiA9IHJ1biBzaXplLCB3ID0gbGVuZ3RoIG9mIHlcclxuZnVuY3Rpb24gcmVhZF9saW5lYXJfdGFibGUodywgbmV4dCkge1xyXG5cdGxldCBkeCA9IDEgKyBuZXh0KCk7XHJcblx0bGV0IGR5ID0gbmV4dCgpO1xyXG5cdGxldCB2TiA9IHJlYWRfYXJyYXlfd2hpbGUobmV4dCk7XHJcblx0bGV0IG0gPSByZWFkX3RyYW5zcG9zZWQodk4ubGVuZ3RoLCAxK3csIG5leHQpO1xyXG5cdHJldHVybiBtLmZsYXRNYXAoKHYsIGkpID0+IHtcclxuXHRcdGxldCBbeCwgLi4ueXNdID0gdjtcclxuXHRcdHJldHVybiBBcnJheSh2TltpXSkuZmlsbCgpLm1hcCgoXywgaikgPT4ge1xyXG5cdFx0XHRsZXQgal9keSA9IGogKiBkeTtcclxuXHRcdFx0cmV0dXJuIFt4ICsgaiAqIGR4LCB5cy5tYXAoeSA9PiB5ICsgal9keSldO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn1cclxuXHJcbi8vIHJldHVybiBbW3gsIHlzLi4uXSwgLi4uXVxyXG4vLyB3aGVyZSB3ID0gbGVuZ3RoIG9mIHlcclxuZnVuY3Rpb24gcmVhZF9yZXBsYWNlbWVudF90YWJsZSh3LCBuZXh0KSB7IFxyXG5cdGxldCBuID0gMSArIG5leHQoKTtcclxuXHRsZXQgbSA9IHJlYWRfdHJhbnNwb3NlZChuLCAxK3csIG5leHQpO1xyXG5cdHJldHVybiBtLm1hcCh2ID0+IFt2WzBdLCB2LnNsaWNlKDEpXSk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiByZWFkX3RyaWUobmV4dCkge1xyXG5cdGxldCByZXQgPSBbXTtcclxuXHRsZXQgc29ydGVkID0gcmVhZF9zb3J0ZWQobmV4dCk7IFxyXG5cdGV4cGFuZChkZWNvZGUoW10pLCBbXSk7XHJcblx0cmV0dXJuIHJldDsgLy8gbm90IHNvcnRlZFxyXG5cdGZ1bmN0aW9uIGRlY29kZShRKSB7IC8vIGNoYXJhY3RlcnMgdGhhdCBsZWFkIGludG8gdGhpcyBub2RlXHJcblx0XHRsZXQgUyA9IG5leHQoKTsgLy8gc3RhdGU6IHZhbGlkLCBzYXZlLCBjaGVja1xyXG5cdFx0bGV0IEIgPSByZWFkX2FycmF5X3doaWxlKCgpID0+IHsgLy8gYnVja2V0cyBsZWFkaW5nIHRvIG5ldyBub2Rlc1xyXG5cdFx0XHRsZXQgY3BzID0gcmVhZF9zb3J0ZWQobmV4dCkubWFwKGkgPT4gc29ydGVkW2ldKTtcclxuXHRcdFx0aWYgKGNwcy5sZW5ndGgpIHJldHVybiBkZWNvZGUoY3BzKTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHtTLCBCLCBRfTtcclxuXHR9XHJcblx0ZnVuY3Rpb24gZXhwYW5kKHtTLCBCfSwgY3BzLCBzYXZlZCkge1xyXG5cdFx0aWYgKFMgJiA0ICYmIHNhdmVkID09PSBjcHNbY3BzLmxlbmd0aC0xXSkgcmV0dXJuO1xyXG5cdFx0aWYgKFMgJiAyKSBzYXZlZCA9IGNwc1tjcHMubGVuZ3RoLTFdO1xyXG5cdFx0aWYgKFMgJiAxKSByZXQucHVzaChjcHMpOyBcclxuXHRcdGZvciAobGV0IGJyIG9mIEIpIHtcclxuXHRcdFx0Zm9yIChsZXQgY3Agb2YgYnIuUSkge1xyXG5cdFx0XHRcdGV4cGFuZChiciwgWy4uLmNwcywgY3BdLCBzYXZlZCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn1cblxuZnVuY3Rpb24gaGV4X2NwKGNwKSB7XHJcblx0cmV0dXJuIGNwLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHF1b3RlX2NwKGNwKSB7XHJcblx0cmV0dXJuIGB7JHtoZXhfY3AoY3ApfX1gOyAvLyByYWZmeSBjb252ZW50aW9uOiBsaWtlIFwiXFx1e1h9XCIgdy9vIHRoZSBcIlxcdVwiXHJcbn1cclxuXHJcbi8qXHJcbmV4cG9ydCBmdW5jdGlvbiBleHBsb2RlX2NwKHMpIHtcclxuXHRyZXR1cm4gWy4uLnNdLm1hcChjID0+IGMuY29kZVBvaW50QXQoMCkpO1xyXG59XHJcbiovXHJcbmZ1bmN0aW9uIGV4cGxvZGVfY3AocykgeyAvLyB0aGlzIGlzIGFib3V0IDJ4IGZhc3RlclxyXG5cdGxldCBjcHMgPSBbXTtcclxuXHRmb3IgKGxldCBwb3MgPSAwLCBsZW4gPSBzLmxlbmd0aDsgcG9zIDwgbGVuOyApIHtcclxuXHRcdGxldCBjcCA9IHMuY29kZVBvaW50QXQocG9zKTtcclxuXHRcdHBvcyArPSBjcCA8IDB4MTAwMDAgPyAxIDogMjtcclxuXHRcdGNwcy5wdXNoKGNwKTtcclxuXHR9XHJcblx0cmV0dXJuIGNwcztcclxufVxyXG5cclxuZnVuY3Rpb24gc3RyX2Zyb21fY3BzKGNwcykge1xyXG5cdGNvbnN0IGNodW5rID0gNDA5NjtcclxuXHRsZXQgbGVuID0gY3BzLmxlbmd0aDtcclxuXHRpZiAobGVuIDwgY2h1bmspIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jcHMpO1xyXG5cdGxldCBidWYgPSBbXTtcclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKSB7XHJcblx0XHRidWYucHVzaChTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jcHMuc2xpY2UoaSwgaSArPSBjaHVuaykpKTtcclxuXHR9XHJcblx0cmV0dXJuIGJ1Zi5qb2luKCcnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29tcGFyZV9hcnJheXMoYSwgYikge1xyXG5cdGxldCBuID0gYS5sZW5ndGg7XHJcblx0bGV0IGMgPSBuIC0gYi5sZW5ndGg7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGMgPT0gMCAmJiBpIDwgbjsgaSsrKSBjID0gYVtpXSAtIGJbaV07XHJcblx0cmV0dXJuIGM7XHJcbn1cblxuLy8gY3JlYXRlZCAyMDIzLTA5LTI1VDAxOjAxOjU1LjE0OFpcbi8vIGNvbXByZXNzZWQgYmFzZTY0LWVuY29kZWQgYmxvYiBmb3IgaW5jbHVkZS1uZiBkYXRhXG4vLyBzb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9hZHJhZmZ5L2Vucy1ub3JtYWxpemUuanMvYmxvYi9tYWluL3NyYy9tYWtlLmpzXG4vLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hZHJhZmZ5L2Vucy1ub3JtYWxpemUuanMjc2VjdXJpdHlcbi8vIFNIQS0yNTY6IGE5NzRiNmY4NTQxZmMyOWQ5MTliYzg1MTE4YWYwYTQ0MDE1ODUxZmFiNTM0M2Y4Njc5Y2IzMWJlMmJkYjIwOWVcbnZhciBDT01QUkVTU0VEID0gJ0FFVURUQUhCQ0ZRQVRRRFJBREFBY2dBZ0FEUUFGQUFzQUJRQUh3QU9BQ1FBRFFBUkFBb0FGd0FIQUJJQUNBQVBBQVVBQ3dBRkFBd0FCQUFRQUFNQUJ3QUVBQW9BQlFBSUFBSUFDZ0FCQUFRQUZBQUxBQUlBQ3dBQkFBSUFBUUFIQUFNQUF3QUVBQXNBREFBTUFBd0FDZ0FOQUEwQUF3QUtBQWtBQkFBZEFBWUFad0RTQWRzREpnQzBDa01COHhoWkFxZm9DMTkwVUdjVGhnQnVyd2Y3UFQwOVBiMDlBamdKdW04T2pEbGx4SFlVS1hBUHh6cTZ0QUJBeGdLOHlzVXZXQWdNUFQwOVBUMDlQU3M2TFQySGNnV1hXd0ZMb1NNRUVFbDVSRlZNS3ZPMFhROEV4RGRKTW5JZ3NqMjZQVFF5eThGZkVROEFZOElQQUdjRWJ3UndCSEVFY2dSekJIUUVkUVIyQkhjRWVBUjZCSHNFZkFSK0JJQUVnZm5kQlFvQllnVUxBV0lGREFGaUJOY0UyQVRaQlJBRkVRVXZCZEFMRkFzVkRQY05CdzEzRFljT01BNHhEak1CNEJsbEhJMEIyZ3JiQU1EcEhMa1E3UUhWQVBSTlFRRm5HUlVFZzB5RUIydWFKRjhBSnBJQnBvYjVBRVJTTUFLTm9BWHFhUUxVQk1DekVpQUNud1JaRWtrVnNTN3RBTkFzQkcwUnVBUUxFUEFCdjlISUNUVUJYaWdQWndSQkFwTURPd0FhbWh0YUFCcUVBWThLdkt4M0xRNEFyQUI4VWh3RUJBVlNhZ0Q4QUVGWkFEa0JJYWRWajJVTVVneDVJbDRBTlFDOUF4SUIxQmxiRVBNQXMzMENHeGxYQWh3WktRSUVDQmM2RWJzQ294bmd6djdVelJRQThNMEJhd0w2WndrTjd3QUJBRDMzT1FSY3NnTEpDak1DanFVQ2h0dy9rbStOQXNYUEFvUDJCVDg0UHdVUkFLMFJBdnB0YjZjQXBRUy9PTU1leTVISlM4NFVkeHB4VFBrQ29nVkZJVGFUT3dFUkFLNXBBdmtOQk9WeUE3cTNCS2xPSlNBTEFnVUlCUmNFZEFTcEJYcXpBQlhGU1daT2F3TENPcXcvL0FvbENaZHZ2M2RTQmtFUUd5ZWxFUGNNTXdHMUFUc043VXZZQlBFR093VEpIMzBaR1EvTmxad0lwUzNkRE8wbTR5NmhnRm9qOVNxREJlMUw5RHpkQzAxUmFBOVpDMlVKNHpwamdVNERJUUVOSW9zSzNRMDVDRzBROHdySmF3M2xFVVVIT1FQVlNab0FwUWNCQ3hFZE5SVzFKaEJpckFzSk9YY0creHIyQzQ4bXJ4TXBldndGMHhvaEJrMEJLUnIvQU04dTU0V3dXakZjSEU5ZkJnTUxKU1BIRktoUUlBMGxRTGQ0U0JvYkJ4VWxxUUtSUTNCS2gxRTJIcE1oOWp3OURXWXVFMUY4Qi9VOEJSbFBDNEU4bmthclJRNFIwajZOUFVnaVNVd3NCRFYvTEM4bml3blBENFVNdVh4eUFWa0pJUW14REhFVE1SRVhOOFVJT1FjWkxaY2tKeFVJSVVhVllKb0U5NThEOHhQUkF3c0ZQd2xCQnhNRHRSd3RFeTRWS1FVTmdTVFhBdk0yMVM2ekFvOVdnQUVYQmNzUEpSL2ZFRkJINEE3cENKc0NaUU9ESmVzQUxSVWhBQmNpbXdoRFl3QmZqOWhUQlM3TENNZHFiQ04wQTJjVTUyRVJjd2VSRGxjSHB4d3pGYjhjNFhESVhndUdDQ2lqcndsYkFYVUptUUZmQk9NSUNUVmJqS0FnUVdkVGkxZ1lteUJoUVQ5ZC9BSXhER1VWbjBTOWgzZ0NpdzlyRWhzQk5RRnpCemtOQVFKM0VlMFJheENWQ091R0JEVzFNL2c2SlFSUElZTWdFUW9uQTA5c3pnc25KdmtNK0drQm94SmlBd3cwUFhmdVo2dGd0aVFYL1FjWk1zVkJZQ0h4QzVKUHpReWNHc0VZUWxRdUdlUUh2d1B6R3ZNbjZrRlhCZjhEb3dNVE9rMHo3Z1M5QzJrSWl3ay9BRWtPb3hjSDF4aHFDbkdNMEFFeGl3RzNtUU5Ya1lNQ2I0OEdOd2NMQUdjTGh3VjU1UUFkQXFjSW93QUZBTThEVndBNUFxMEhuUUFaQUlWQkFUMERKeThCSWVVQ2p3T1RDREhMQVpVdkFmTXBCQnZEREJVQTl6ZHVTZ0xEc1FLQWFtYWlCZDFZQW80Q1NUVUJUU1VFQlU1SFVRT3ZjZUVBMndCTEJoUGZSd0VWcTByTEd1TkRBZDl2S3dESEFQc0FCVFVIQlVFQnpRSHpiUUMzQVY4TE1RbWlzN1VCVGVrcEFJTUFGV3NCMXdLSkFOMEFOUUIvOFFGVEFFMEZXZmtGMHdKUFNRRVJNUmdyVjJFQnV3TWZBVE1CRFFCNUJzdU5wY2tISHdSdEI5TUNFQnNWNFFMdkxnZTFBUU1pM3hQTlFzVUN2ZDVWb1dBQ1pJRUNZa0piVGE5Yk55QUNvZmNDYUpnQ1pna0NuNFE0R3dzQ1pqc0NaaVlFYmdSL0EzOFRBMzZTT1FZNWR4YzVnam9qSXdKc0hRSXlOamdLQW0zSEFtMnU3NG96WjBVckFXY0EzZ0RoQUVvRkI1Z01qUUQrQzhJQURiVUNkeThDZHFJL0FubExRd0o0dWgxYzIwV3VSdGNDZkQ4Q2VzZ0NmUWtDZlBBRldRVWdTQUJJZldNa0FvRnRBb0FBQW9BRkFuK3VTVmhLV3hVWFNzd0MwUUVDME14TEp3T0lUd09INWtURmtUSUM4cUZkQXdNRHJrdk9UQzBsQTg5TlRFMnZBb3MvQW9yWXdSc0hIVU5uQmJjQ2pqY0NqbHhBbDRFQ2p0a0NqbHg0VWJSVE5RcFMxRlNGQXBQN0FwTU1BT2tBSEZVZVZhOVYwQVlzR3ltVmhqTGhlR1pGT3prQ2w1OEM3N0pZSWFnQVdTVUNsbzhDbG55Y0FLbFpyRm9KZ1UwQU93S1d0UUtXVGx4RVhORUNtY3NDbVdSY3lsMEhHUUtjbXpuQ09wMENuQllDbjVzQ25yaUtBQjBQTVNvUEFwM3hBcDZTQUxVOVlUUmg3d0tlMHdLZ2JnR3BBcDZmSHdLZVRxVmp5R1FuSlNzQ0o2OENKbjRDb1BzQ29Fd0NvdDBDb2NRQ3BpOENwYzRDcC84QWZRS244bWg4YUxFQUEwbHFIR3JSQXF6akFxeXVBcTFuQXEwQ0FsY2RBbFhjQXJIaDF3TWZUbXlYQXJLOURRS3k2QmRzNEcxamJVaGZBeVhOQXJaY096OXVrQU1wUlFLNFhnSzVSeFVDdVNwM2NEWnc0UUs5R1FLNzJuQ1dBeklSQXI2SWNnSURNM0VDdmhwekluTlBBc1BMQXNNRWM0SjBTelZGZE9BRFBLY0RQSm9EUGI4Q3hYd0N4a2NDeGhDSkFzaHBVUUxJUkFMSlR3TEpMZ0prblFMZDBuaDVZWGl1ZVNWTDBBTVlvMmNDQW1IMEdmT1ZKSHNMWHBKZXV4RUN6MnNDejJ3dlMxUFM4eE9mQU1hdEFzOXpBU25xQTA0U2Zrc0ZBdHduQXR1S0F0SlBBMUpjQTFOZkFRRURWWXlBaVQ4QXl4YnRZRVdDSElMVGdzNkRqUUxheHdMWjNvUVFoRW1uUEFPR3BRQXZBMlFPaG5GWitRQlZBdDlsQXQ2NGMzY0M0aS90RkFIek1DY0I5SnNCOHRLSEF1dnpBdWx3ZVFMcStRTHE1QUQ1UndHNUF1NkpBdXVjbHFxWEF3THVQd09GNEpoNWNPQnhvUUx6QXdCcEE0NFdtWk1DOXhNRGtXNERrb2NDOTVnQytka0MrR2FhSEpxcnV6ZWJIZ09kZ3dMKytnRWJBRG1mSEorekF3V05BNlpxQTZiWkFOSEZBd1pxb1lpaUJRa0RERWtDd0FBL0F3RGhRUmRUQVJIekEyc0hsMmNGQUpNdEs3ZXZ2ZHNCaVprVWZ4RUVPUUg3S1FVaERwMEpud0NTL1NsWHhRTDNBWjBBdHdXNUFHOExiVUV1RkNhTkxnRkRBWUQ4QWJVbUFIVUREZ1J0QUN3Q0ZneWhBQUFLQWowQ2FnUGRBMzRFa1FFZ1JRVWhmQW9BQlFCRUFCTUFOaElDZHdFQUJkVURhKzhLeFFJQTl3cWZKNyt4dCtVQmtTRkJRZ0hwRkg4Uk5NQ0pBQVFBR3dCYUFrVUNoSXNBQmpwVE9wU05iUUM0T284NjBBQ05PTUU2M0FDbEFPZ0F5d0U2Z1RvN09mdzUrVHQyaVRwYk81NkpPbTg1R0FGV0FUTUJiQVV2TlYwMW5qV3ROV1kxZFRXMk5jVTFnaldSTmRJMTRUV2VOYTAxN2pYOU5iSTF3VFlDTmhFMXhqWFZOaFkySnpYZU5lMDJMalk5Tmk0MUxTRTJPalk5Tmp3MnlUY0lCSkE4VnpZNE50MDNJRGNQTnNvZ040azNNQW9Fc0R4bk5pUTNHVGRzT28wM0lVTFVRd2RDNEVNTEhBOFBDWnNvYlNoUlZRWUE2WDhBNmJBQkZDblhBdWtCb3dDOUJiY0Fid056Qkw4TURBTU1BUWdEQUFrS0N3c0xDUW9HQkFWVkJJL0R2d0R6OWIyOWthVUNiMFF0c1JUTkx0NGVHQmNTSEFNWkZoWVpFaFlFQVJBRUJVRWNRUnhCSEVFY1FSeEJIRUVhUVJ4QkhFRkNTVHhCUEVsSVNVaEJOa00yUVRZYk5rbElTVm1CVklnQkZMV1pBdTBCaFFDakJjRUFieWtCdndHSkFhUWNFWjBlUENrbE1BQWhNdkFJTUFMNTRnQzdCbThFZXNjanpRTXBBUlFwS2dEVUFCYXZBajYyNnhRQUpQMEEzZXR6dWY0Tk5SQTdlZnkyWjlOUXJDbkMwT1N5QU56NUJCSWJKNUlGRFI2bWlJYXZZUzZ0cHJqam11S2VieG01Qzc0UTIyNVgxcGthWVlQYjZmMURLNGszeE1FQmI5UzJXTWpFaWJUTldoc1JKSUErdndOVkVpWFRFNWlYcy93ZXpWNjZvRkxmcDlOWkdZVytHazE5SjIrYkNUNlllMnc2TERZZGd6S01VYWJrNTk1ZUxCQ1hBTno5SFVwV2JBVHE5dnFYVng5WERnK1BjOVhwNCtic1MwMDVTVk0vQkpCTTQ2ODdXVXVmK1VqOWRFaThhRE5hUHh0cGJEeGNHMVRIVEltVU1acTRVQ2FhTllwc1ZxcmFOeUtMSlhEWXNGWi81amw3YkxSdE84OHQ3UDN4WmFBeGhiNU9kUE1YcXNTa3AxV0NpZUc4alhtMVU5OStibHZMbFh6UENTK005M1ZuSkNpSyswOUxmYVNhQkFWQm9teURnSnVhOGRmVXpSN2dhMzRJdlIyTnZqK0E5aGVKNmxzbDFLRzROa0kxMDMyQ25mZjFtMXdvZjJCOW9ISks0Ymk2SmtFZFNxZU5laXVvNlFvWlppbmNvYzczL1RIOVNYRjhzQ0U3WHl1WXlXOFdTZ2JHRkNqUFYwaWhMS2hkUHMwOFR4ODJmWUFrTExjNEkyd2RsNGFwWTdHVTVsSFJGelJXSmVwN1d3M3diZUEzcW1kNTkvODZQNHh1TmFxRHB5Z1h0Nk04NWdsU0JIT0NHZ0pEbnQrcE45Yks3SEFwTWd1WDYrMDZSWk5qelZtY1pKK3djVXJKOS8vYnBSTnhOdUtwTmw5dUZkcytTOXRkeDdMYU01WmtJclBqNm5JVTltbmJGdFZiczlzL3VMZ2w4TVZjekF3ZXQraU9FenpCbFlXN1JDTWdFNmd5TkxlcTYrMXRJeDRkcGdabmQwRGtzSlM1ZitKTkRwd3djUE5YYWFWc3BxMWZiUWFqT3JKZ0swb2ZLdEoxTmU5MEw2Vk80TU9sNVM4ODZwN3U2eG83T0xqRzhUR0wrSFUxSlhHSmdwcGc0bk5iTko1bmx6U3B1UFl5MjFKVUVjVUE5NFBvRmlaZmpadWUrUW55UTgwZWtPdVpWa3h4NGcrY3ZoSmZIZ05sNGh5MS9hNitSS2NLbGFyL0oyOXkvL0V6dGxiVlBIVlVlUTF6WDg2ZVFWQWpSL00zZEE5dzRXOExmYVhwNEVnTTg1d09XYXNsaTgzN1B6Vk1PbnNMelIrazNvNzUvbFJQQUpTRTF4QUtRekVpNXYxMGtlK1ZCdlJ0MWN3UVJNZCtVNW1MQ1RHVmQ2WGladGdCRzVjRGkwdzIyR0tjVk52SGl1NUxRYlpFRFZ0ejBvbm43azUraGV1S1hWc1p0U3ppbGtMUkFVbWpNWEVNQjNKOVlDNTBYQnhQaXo1M1NDK0VoblBsOVdzS0N2OTJTTS9PRkZJTUpaWWZsMFdXOHRJTzNVeFljd2RNQWo3RlNtZ3JzWjJhQVpPMDNCT2hQMWJOTlpJdHlYWVFGVHBDM1NHMVZ1UERxSDlHa2lDRG1FK0p3eHlJVlNPNXNpREVyQU9wRVhGZ2p5NlBRdE9WRGorczZlMXI4aGVXVnZtWm5UY2l1ZjRFaU5aekNBZDdTT01oWEVSSU9sc0hJTUczOTlpOWFMVHkzbTJoUkxaakpWRE5MUzUzaUdJSzExZFBxUXQwekJEeWc2cWM3WXFrRG0yTTVWZTZkQ1dDYUNiVFhYMnJUb2FJZ3o2K3poNGxZVWkvKzZucWNGTUFrUUpLSFlMSzB3WWs1TjlzelY2eGloRGJEREZyNDVsTjFLNGFDWEJxL0ZpdFBTdWQ5Z0x0NVpWbitacUdYN2N3bTJ6NUVHTWdmRnBJRnloR0d1RFBtc282VEl0VE13bnkrN3VQbkxDZjRXNmdvRlFGVjBvUVNzYzlWZk1tVkxjTHI2WmV0RFpiYVNGVExxblNPL2JJUGpBMy96QVVvcWdHRkFFUVM0SWh1TXpFcDJJM2pKemJ6a2svSUVteWF4K3JoWlR3ZDZmK0NHdHdQaXh1OEl2ekFDcXVQV1BSRXU5WnZHa1V6cFJ3dlJSdWFOTjZjcjBXMXdXaXRzOUlDZFlKN2x0YmdNaVNMM3NUUGV1ZmdOY1ZxTVZXRmtDUERINGpHMmpBMFhjVmdRajYyQ2IyOXY5Zi96LysyS2JZdkl2L3p6anBRQVBrbGlhVkR6TnJXNTdUWi9aT3laRDBubGZNbUFJQklBR0FJMEQzay9tZE40eHI5djg1WmJaYmJxZkgyakdkNWhVcU5aV3dsNVNQZm9HbWZFbG1helVJZU5MMWovbWtGN1ZOQXpUcTRqTnQ4Sm9RMTFOUU9jbWhwclhveFN4ZlJHSjlMREVPQVErZG14QVFIOTBpdGk5ZTJ1L01vZXVhR2NEVEhvQyt4c21FZVdteEVLZWZRdUl6SGJwdzVUYzVjRW9jYm9BRDA5b2lwV1FodFRPMXdpdmYvTytEUmUycnBsL0U5d2xyekJvcmpKc09lRzFCL1hQVzRFYUpFRmRObEVDRVpnYTVab0dSSFhnWW91R1J1VmttOHRERVNpRXlGTm8rM3M1TTVwdVNkVHlVTDJsbG5JTlZIRXQ5MVhVTlc0ZXdkTWdKNGJvSmZFeXQvaVk1V1hxYkErQTJGa3Q1WjBsdXRpV2hlOW5aSXlJVWp5WERDM1VzYUcxdCtlTng2ejRXL09Zb1RCN0E2eCtkTlNUT2k5QUluY3RiRVNxbTVndk9Md3c3T1dYUHJtSHdWWmFzcmw0ZUQxMTNwbStKdFQ3SlZPdm5DWHFkenpkVFJIZ0owUGlHVEZZVzVHdnQ5UjlMRDZMemZzMHYvVFpaSFNteVZOcTd2aUlIRTZEQks3UXAwN0l6NTVFTThTWXRRdlpmL29iQm5pVFdpNUMyL292SGZ3NFZuZGtFNVhZZGpPaENNUmpEZU9FZlhlTi9Dd2ZHZHVpVUlmc29GZVV4WGVRWGJhN2M3OTcyWE52OHcrZFRqalVNMFFlTkFSZVcrSjAxNGRLQUQvTWNRWVhUN2MwR1FQSWtuM0xsNlI3Z0dqdWlRb1pEMFRFZUVxUXBLb1oxNWcvME9QUUkxN1FpU3Y5QVVST2EvVi9UUU4zZHZMQXJlYzNScnNZbHZCbTFiOExXemx0ZHVnc0M1MGxOS1lMRXAyYStaWllxUGVqVUxSbE9KaDV6ai9MVk15VER2d0toTXh4d3VEa3hKMVFwb05JME9UV0xvbTRaNzFTTnpJOVRWMWlYSnJJdTlXY25kK01DYUF3OG8xalNYZDk0WVUvMWdua3JDOUJVRU90UXZFSVE3ZzBpNmgrS0wySktrOFlkbDdIcnV2Z1dNU0FtTmUrTHNoR2hWNHFuV0hoTzkvUklQUXpZMXRIUmoyVnFPeU5zRHBLMGN3dys1NkFkREM0Z3NXd1kwWHhvdWNJV0lxcy9HY3duV3FsYVQwS1ByOG1iSzVVOTQvMzAxaTFXTHQ0WUlOVFZ2Q0ZCckZaYkliWThleWNPZGVKMnRlRDVJZlBMQ1JnN2pqY0ZUd2xNRk5sOXpkaC9vM0UvaEhQd2o3QldnME1VMDlwUHJCTGJyQ2dtNTRBNkgrSTZ2Mjcrakw1Z2tqV2cvaVlka3M5amJmVlA1eS9uMGRsZ1dFTWxLYXNsN0p2RlpkNTZMZnliVzFlZWFWTzBneFRmWFp3RDhHNFNJMTE2eXg3VUtWUmd1aTZZYTFZcGl4cVhlTkxjOEl4dEF3Q1U1SWh3UWduK05xSG5SYUR2NjFDeEtoT3E0cE9YN002cGtBK1BtcGQ0ajF2bjZBQ1VBTG9MTGM0dnBYY2k4VmlkTHh6bTdxRkJlN3MrcXV1SnM2RVRZbW5wZ1MzTHdTWnhQSWx0Z0JEWHo4TTFrL1cyeVNOdjJmOS9OUGh4TEdLMkQyMWRrSGVTR21lblJUM1lxY2RsMG0vaDNPWXI4VitsWE5ZR2Y4YUNDcGQ0YldqRTRRSVBqN3ZVS040TnJmczdNTDZZMk95UzgzMEpDbm9mZy9rN2xwRnB0NFNxWmM1SEdnMUhDT3JIdk9kQzhiUDZGR0RiRS9WVjBtWDRJYWt6YmRTL29wK0t0M0cyNC84UWJCVjd5ODZzR1NRL3ZaelU4RlhzN3U2akl2d2Noc0VQMkJwSWhXM0c4dVdOd2EzSG1qZkgvWmpoaENXdmx1QWNGK25NZjE0Q2xLZzVoR2d0UExKOTh1ZU5Ba2M1SHMyV1psazJRSHZmcmVDSzFDQ0dPNm5NWlZTYjk5Vk0vYWpyOFdIVHRlOUpTbWtYcS9pL1U5NDNIRWJkelc2UmUvUzg4ZEtnZzhwR09MbEFlTmlxcmNMa1VSMy9hQ2xGcE1YY09VUDNybUVUY1dTZk1YWkUzVFVPaThpK2ZxUm5UWUxmbFZ4L1ZiLzZHSjdlSVJaVUE2azNSWVIzaUZTSzljNGlEZE53SnVaTDJGS3ovSUs1VmltY05XRXFkWGpTb3hTZ21GMFVQbERvVWxOclBjTTdmdG1BOFk5Z0tpcUtFSHVXTitBWlJJd3RWU3h5ZTJLZjhyTTNsaEo1WGNCWFU5bjR2ME95MVJVMk0rNHFNOEFRUFZ3c2U4RXJOU29iNW9GUFd4dXFablZ6bzFxQi9JQnhrTTNFVlVLRlVVbE8zZTUxMjU5R2dOY0piQ21sdnJkanRvVFc3ckNobTF3eUNLenBDVHdvelVVRU9JY1dMbmVSTGdNWGgrU2pHU0ZrQWxsemJHUzVISzdMbGZDTVJOUkRTdmJRUGpjWGFlbk5ZeEN2dTJReXpuejZTdHV4Vmo2NlNnSTBUOEI2L3NmSEFKWVphWjc4dGhqT1NJRnVtTldMUWJlWml4RENDQyt2MFlCdGt4aUJCM2plZkhxWi9kRkhVK2NyYmo2T3ZTMXgvSkREN3ZsbTd6T1ZQd3BVQzAxbmh4WnVZLzYzRTdnJztcblxuLy8gaHR0cHM6Ly91bmljb2RlLm9yZy9yZXBvcnRzL3RyMTUvXHJcbi8vIGZvciByZWZlcmVuY2UgaW1wbGVtZW50YXRpb25cclxuLy8gc2VlOiAvZGVyaXZlL25mLmpzXHJcblxyXG5cclxuLy8gYWxnb3JpdGhtaWMgaGFuZ3VsXHJcbi8vIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3ZlcnNpb25zL1VuaWNvZGUxNS4wLjAvY2gwMy5wZGYgKHBhZ2UgMTQ0KVxyXG5jb25zdCBTMCA9IDB4QUMwMDtcclxuY29uc3QgTDAgPSAweDExMDA7XHJcbmNvbnN0IFYwID0gMHgxMTYxO1xyXG5jb25zdCBUMCA9IDB4MTFBNztcclxuY29uc3QgTF9DT1VOVCA9IDE5O1xyXG5jb25zdCBWX0NPVU5UID0gMjE7XHJcbmNvbnN0IFRfQ09VTlQgPSAyODtcclxuY29uc3QgTl9DT1VOVCA9IFZfQ09VTlQgKiBUX0NPVU5UO1xyXG5jb25zdCBTX0NPVU5UID0gTF9DT1VOVCAqIE5fQ09VTlQ7XHJcbmNvbnN0IFMxID0gUzAgKyBTX0NPVU5UO1xyXG5jb25zdCBMMSA9IEwwICsgTF9DT1VOVDtcclxuY29uc3QgVjEgPSBWMCArIFZfQ09VTlQ7XHJcbmNvbnN0IFQxID0gVDAgKyBUX0NPVU5UO1xyXG5cclxuZnVuY3Rpb24gdW5wYWNrX2NjKHBhY2tlZCkge1xyXG5cdHJldHVybiAocGFja2VkID4+IDI0KSAmIDB4RkY7XHJcbn1cclxuZnVuY3Rpb24gdW5wYWNrX2NwKHBhY2tlZCkge1xyXG5cdHJldHVybiBwYWNrZWQgJiAweEZGRkZGRjtcclxufVxyXG5cclxubGV0IFNISUZURURfUkFOSywgRVhDTFVTSU9OUywgREVDT01QLCBSRUNPTVA7XHJcblxyXG5mdW5jdGlvbiBpbml0JDEoKSB7XHJcblx0Ly9jb25zb2xlLnRpbWUoJ25mJyk7XHJcblx0bGV0IHIgPSByZWFkX2NvbXByZXNzZWRfcGF5bG9hZChDT01QUkVTU0VEKTtcclxuXHRTSElGVEVEX1JBTksgPSBuZXcgTWFwKHJlYWRfc29ydGVkX2FycmF5cyhyKS5mbGF0TWFwKCh2LCBpKSA9PiB2Lm1hcCh4ID0+IFt4LCAoaSsxKSA8PCAyNF0pKSk7IC8vIHByZS1zaGlmdGVkXHJcblx0RVhDTFVTSU9OUyA9IG5ldyBTZXQocmVhZF9zb3J0ZWQocikpO1xyXG5cdERFQ09NUCA9IG5ldyBNYXAoKTtcclxuXHRSRUNPTVAgPSBuZXcgTWFwKCk7XHJcblx0Zm9yIChsZXQgW2NwLCBjcHNdIG9mIHJlYWRfbWFwcGVkKHIpKSB7XHJcblx0XHRpZiAoIUVYQ0xVU0lPTlMuaGFzKGNwKSAmJiBjcHMubGVuZ3RoID09IDIpIHtcclxuXHRcdFx0bGV0IFthLCBiXSA9IGNwcztcclxuXHRcdFx0bGV0IGJ1Y2tldCA9IFJFQ09NUC5nZXQoYSk7XHJcblx0XHRcdGlmICghYnVja2V0KSB7XHJcblx0XHRcdFx0YnVja2V0ID0gbmV3IE1hcCgpO1xyXG5cdFx0XHRcdFJFQ09NUC5zZXQoYSwgYnVja2V0KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRidWNrZXQuc2V0KGIsIGNwKTtcclxuXHRcdH1cclxuXHRcdERFQ09NUC5zZXQoY3AsIGNwcy5yZXZlcnNlKCkpOyAvLyBzdG9yZWQgcmV2ZXJzZWRcclxuXHR9XHJcblx0Ly9jb25zb2xlLnRpbWVFbmQoJ25mJyk7XHJcblx0Ly8gMjAyMzA5MDU6IDExbXNcclxufVxyXG5cclxuZnVuY3Rpb24gaXNfaGFuZ3VsKGNwKSB7XHJcblx0cmV0dXJuIGNwID49IFMwICYmIGNwIDwgUzE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbXBvc2VfcGFpcihhLCBiKSB7XHJcblx0aWYgKGEgPj0gTDAgJiYgYSA8IEwxICYmIGIgPj0gVjAgJiYgYiA8IFYxKSB7XHJcblx0XHRyZXR1cm4gUzAgKyAoYSAtIEwwKSAqIE5fQ09VTlQgKyAoYiAtIFYwKSAqIFRfQ09VTlQ7XHJcblx0fSBlbHNlIGlmIChpc19oYW5ndWwoYSkgJiYgYiA+IFQwICYmIGIgPCBUMSAmJiAoYSAtIFMwKSAlIFRfQ09VTlQgPT0gMCkge1xyXG5cdFx0cmV0dXJuIGEgKyAoYiAtIFQwKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0bGV0IHJlY29tcCA9IFJFQ09NUC5nZXQoYSk7XHJcblx0XHRpZiAocmVjb21wKSB7XHJcblx0XHRcdHJlY29tcCA9IHJlY29tcC5nZXQoYik7XHJcblx0XHRcdGlmIChyZWNvbXApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVjb21wO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gLTE7XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBkZWNvbXBvc2VkKGNwcykge1xyXG5cdGlmICghU0hJRlRFRF9SQU5LKSBpbml0JDEoKTtcclxuXHRsZXQgcmV0ID0gW107XHJcblx0bGV0IGJ1ZiA9IFtdO1xyXG5cdGxldCBjaGVja19vcmRlciA9IGZhbHNlO1xyXG5cdGZ1bmN0aW9uIGFkZChjcCkge1xyXG5cdFx0bGV0IGNjID0gU0hJRlRFRF9SQU5LLmdldChjcCk7XHJcblx0XHRpZiAoY2MpIHtcclxuXHRcdFx0Y2hlY2tfb3JkZXIgPSB0cnVlO1xyXG5cdFx0XHRjcCB8PSBjYztcclxuXHRcdH1cclxuXHRcdHJldC5wdXNoKGNwKTtcclxuXHR9XHJcblx0Zm9yIChsZXQgY3Agb2YgY3BzKSB7XHJcblx0XHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0XHRpZiAoY3AgPCAweDgwKSB7XHJcblx0XHRcdFx0cmV0LnB1c2goY3ApO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGlzX2hhbmd1bChjcCkpIHtcclxuXHRcdFx0XHRsZXQgc19pbmRleCA9IGNwIC0gUzA7XHJcblx0XHRcdFx0bGV0IGxfaW5kZXggPSBzX2luZGV4IC8gTl9DT1VOVCB8IDA7XHJcblx0XHRcdFx0bGV0IHZfaW5kZXggPSAoc19pbmRleCAlIE5fQ09VTlQpIC8gVF9DT1VOVCB8IDA7XHJcblx0XHRcdFx0bGV0IHRfaW5kZXggPSBzX2luZGV4ICUgVF9DT1VOVDtcclxuXHRcdFx0XHRhZGQoTDAgKyBsX2luZGV4KTtcclxuXHRcdFx0XHRhZGQoVjAgKyB2X2luZGV4KTtcclxuXHRcdFx0XHRpZiAodF9pbmRleCA+IDApIGFkZChUMCArIHRfaW5kZXgpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGxldCBtYXBwZWQgPSBERUNPTVAuZ2V0KGNwKTtcclxuXHRcdFx0XHRpZiAobWFwcGVkKSB7XHJcblx0XHRcdFx0XHRidWYucHVzaCguLi5tYXBwZWQpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRhZGQoY3ApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIWJ1Zi5sZW5ndGgpIGJyZWFrO1xyXG5cdFx0XHRjcCA9IGJ1Zi5wb3AoKTtcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKGNoZWNrX29yZGVyICYmIHJldC5sZW5ndGggPiAxKSB7XHJcblx0XHRsZXQgcHJldl9jYyA9IHVucGFja19jYyhyZXRbMF0pO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDE7IGkgPCByZXQubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0bGV0IGNjID0gdW5wYWNrX2NjKHJldFtpXSk7XHJcblx0XHRcdGlmIChjYyA9PSAwIHx8IHByZXZfY2MgPD0gY2MpIHtcclxuXHRcdFx0XHRwcmV2X2NjID0gY2M7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHRcdFx0bGV0IGogPSBpLTE7XHJcblx0XHRcdHdoaWxlICh0cnVlKSB7XHJcblx0XHRcdFx0bGV0IHRtcCA9IHJldFtqKzFdO1xyXG5cdFx0XHRcdHJldFtqKzFdID0gcmV0W2pdO1xyXG5cdFx0XHRcdHJldFtqXSA9IHRtcDtcclxuXHRcdFx0XHRpZiAoIWopIGJyZWFrO1xyXG5cdFx0XHRcdHByZXZfY2MgPSB1bnBhY2tfY2MocmV0Wy0tal0pO1xyXG5cdFx0XHRcdGlmIChwcmV2X2NjIDw9IGNjKSBicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRwcmV2X2NjID0gdW5wYWNrX2NjKHJldFtpXSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbXBvc2VkX2Zyb21fZGVjb21wb3NlZCh2KSB7XHJcblx0bGV0IHJldCA9IFtdO1xyXG5cdGxldCBzdGFjayA9IFtdO1xyXG5cdGxldCBwcmV2X2NwID0gLTE7XHJcblx0bGV0IHByZXZfY2MgPSAwO1xyXG5cdGZvciAobGV0IHBhY2tlZCBvZiB2KSB7XHJcblx0XHRsZXQgY2MgPSB1bnBhY2tfY2MocGFja2VkKTtcclxuXHRcdGxldCBjcCA9IHVucGFja19jcChwYWNrZWQpO1xyXG5cdFx0aWYgKHByZXZfY3AgPT0gLTEpIHtcclxuXHRcdFx0aWYgKGNjID09IDApIHtcclxuXHRcdFx0XHRwcmV2X2NwID0gY3A7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmV0LnB1c2goY3ApO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKHByZXZfY2MgPiAwICYmIHByZXZfY2MgPj0gY2MpIHtcclxuXHRcdFx0aWYgKGNjID09IDApIHtcclxuXHRcdFx0XHRyZXQucHVzaChwcmV2X2NwLCAuLi5zdGFjayk7XHJcblx0XHRcdFx0c3RhY2subGVuZ3RoID0gMDtcclxuXHRcdFx0XHRwcmV2X2NwID0gY3A7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c3RhY2sucHVzaChjcCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cHJldl9jYyA9IGNjO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bGV0IGNvbXBvc2VkID0gY29tcG9zZV9wYWlyKHByZXZfY3AsIGNwKTtcclxuXHRcdFx0aWYgKGNvbXBvc2VkID49IDApIHtcclxuXHRcdFx0XHRwcmV2X2NwID0gY29tcG9zZWQ7XHJcblx0XHRcdH0gZWxzZSBpZiAocHJldl9jYyA9PSAwICYmIGNjID09IDApIHtcclxuXHRcdFx0XHRyZXQucHVzaChwcmV2X2NwKTtcclxuXHRcdFx0XHRwcmV2X2NwID0gY3A7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c3RhY2sucHVzaChjcCk7XHJcblx0XHRcdFx0cHJldl9jYyA9IGNjO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmIChwcmV2X2NwID49IDApIHtcclxuXHRcdHJldC5wdXNoKHByZXZfY3AsIC4uLnN0YWNrKTtcdFxyXG5cdH1cclxuXHRyZXR1cm4gcmV0O1xyXG59XHJcblxyXG4vLyBub3RlOiBjcHMgY2FuIGJlIGl0ZXJhYmxlXHJcbmZ1bmN0aW9uIG5mZChjcHMpIHtcclxuXHRyZXR1cm4gZGVjb21wb3NlZChjcHMpLm1hcCh1bnBhY2tfY3ApO1xyXG59XHJcbmZ1bmN0aW9uIG5mYyhjcHMpIHtcclxuXHRyZXR1cm4gY29tcG9zZWRfZnJvbV9kZWNvbXBvc2VkKGRlY29tcG9zZWQoY3BzKSk7XHJcbn1cblxuY29uc3QgSFlQSEVOID0gMHgyRDtcclxuY29uc3QgU1RPUCA9IDB4MkU7XHJcbmNvbnN0IFNUT1BfQ0ggPSAnLic7XHJcbmNvbnN0IEZFMEYgPSAweEZFMEY7XHJcbmNvbnN0IFVOSVFVRV9QSCA9IDE7XHJcblxyXG4vLyAyMDIzMDkxMzogcmVwbGFjZSBbLi4udl0gd2l0aCBBcnJheV9mcm9tKHYpIHRvIGF2b2lkIGxhcmdlIHNwcmVhZHNcclxuY29uc3QgQXJyYXlfZnJvbSA9IHggPT4gQXJyYXkuZnJvbSh4KTsgLy8gQXJyYXkuZnJvbS5iaW5kKEFycmF5KTtcclxuXHJcbmZ1bmN0aW9uIGdyb3VwX2hhc19jcChnLCBjcCkge1xyXG5cdC8vIDIwMjMwOTEzOiBrZWVwIHByaW1hcnkgYW5kIHNlY29uZGFyeSBkaXN0aW5jdCBpbnN0ZWFkIG9mIGNyZWF0aW5nIHZhbGlkIHVuaW9uXHJcblx0cmV0dXJuIGcuUC5oYXMoY3ApIHx8IGcuUS5oYXMoY3ApO1xyXG59XHJcblxyXG5jbGFzcyBFbW9qaSBleHRlbmRzIEFycmF5IHtcclxuXHRnZXQgaXNfZW1vamkoKSB7IHJldHVybiB0cnVlOyB9IC8vIGZyZWUgdGFnZ2luZyBzeXN0ZW1cclxufVxyXG5cclxubGV0IE1BUFBFRCwgSUdOT1JFRCwgQ00sIE5TTSwgRVNDQVBFLCBORkNfQ0hFQ0ssIEdST1VQUywgV0hPTEVfVkFMSUQsIFdIT0xFX01BUCwgVkFMSUQsIEVNT0pJX0xJU1QsIEVNT0pJX1JPT1Q7XHJcblxyXG5mdW5jdGlvbiBpbml0KCkge1xyXG5cdGlmIChNQVBQRUQpIHJldHVybjtcclxuXHRcclxuXHRsZXQgciA9IHJlYWRfY29tcHJlc3NlZF9wYXlsb2FkKENPTVBSRVNTRUQkMSk7XHJcblx0Y29uc3QgcmVhZF9zb3J0ZWRfYXJyYXkgPSAoKSA9PiByZWFkX3NvcnRlZChyKTtcclxuXHRjb25zdCByZWFkX3NvcnRlZF9zZXQgPSAoKSA9PiBuZXcgU2V0KHJlYWRfc29ydGVkX2FycmF5KCkpO1xyXG5cdGNvbnN0IHNldF9hZGRfbWFueSA9IChzZXQsIHYpID0+IHYuZm9yRWFjaCh4ID0+IHNldC5hZGQoeCkpO1xyXG5cclxuXHRNQVBQRUQgPSBuZXcgTWFwKHJlYWRfbWFwcGVkKHIpKTsgXHJcblx0SUdOT1JFRCA9IHJlYWRfc29ydGVkX3NldCgpOyAvLyBpZ25vcmVkIGNoYXJhY3RlcnMgYXJlIG5vdCB2YWxpZCwgc28ganVzdCByZWFkIHJhdyBjb2RlcG9pbnRzXHJcblxyXG5cdC8qXHJcblx0Ly8gZGlyZWN0IGluY2x1ZGUgZnJvbSBwYXlsb2FkIGlzIHNtYWxsZXIgdGhhbiB0aGUgZGVjb21wcmVzc2lvbiBjb2RlXHJcblx0Y29uc3QgRkVOQ0VEID0gbmV3IE1hcChyZWFkX2FycmF5X3doaWxlKCgpID0+IHtcclxuXHRcdGxldCBjcCA9IHIoKTtcclxuXHRcdGlmIChjcCkgcmV0dXJuIFtjcCwgcmVhZF9zdHIocigpKV07XHJcblx0fSkpO1xyXG5cdCovXHJcblx0Ly8gMjAyMzAyMTc6IHdlIHN0aWxsIG5lZWQgYWxsIENNIGZvciBwcm9wZXIgZXJyb3IgZm9ybWF0dGluZ1xyXG5cdC8vIGJ1dCBub3JtIG9ubHkgbmVlZHMgTlNNIHN1YnNldCB0aGF0IGFyZSBwb3RlbnRpYWxseS12YWxpZFxyXG5cdENNID0gcmVhZF9zb3J0ZWRfYXJyYXkoKTtcclxuXHROU00gPSBuZXcgU2V0KHJlYWRfc29ydGVkX2FycmF5KCkubWFwKGkgPT4gQ01baV0pKTtcclxuXHRDTSA9IG5ldyBTZXQoQ00pO1xyXG5cdFxyXG5cdEVTQ0FQRSA9IHJlYWRfc29ydGVkX3NldCgpOyAvLyBjaGFyYWN0ZXJzIHRoYXQgc2hvdWxkIG5vdCBiZSBwcmludGVkXHJcblx0TkZDX0NIRUNLID0gcmVhZF9zb3J0ZWRfc2V0KCk7IC8vIG9ubHkgbmVlZGVkIHRvIGlsbHVzdHJhdGUgZW5zX3Rva2VuaXplKCkgdHJhbnNmb3JtYXRpb25zXHJcblxyXG5cdGxldCBjaHVua3MgPSByZWFkX3NvcnRlZF9hcnJheXMocik7XHJcblx0bGV0IHVucmVzdHJpY3RlZCA9IHIoKTtcclxuXHQvL2NvbnN0IHJlYWRfY2h1bmtlZCA9ICgpID0+IG5ldyBTZXQocmVhZF9zb3J0ZWRfYXJyYXkoKS5mbGF0TWFwKGkgPT4gY2h1bmtzW2ldKS5jb25jYXQocmVhZF9zb3J0ZWRfYXJyYXkoKSkpO1xyXG5cdGNvbnN0IHJlYWRfY2h1bmtlZCA9ICgpID0+IHtcclxuXHRcdC8vIDIwMjMwOTIxOiBidWlsZCBzZXQgaW4gcGFydHMsIDJ4IGZhc3RlclxyXG5cdFx0bGV0IHNldCA9IG5ldyBTZXQoKTtcclxuXHRcdHJlYWRfc29ydGVkX2FycmF5KCkuZm9yRWFjaChpID0+IHNldF9hZGRfbWFueShzZXQsIGNodW5rc1tpXSkpO1xyXG5cdFx0c2V0X2FkZF9tYW55KHNldCwgcmVhZF9zb3J0ZWRfYXJyYXkoKSk7XHJcblx0XHRyZXR1cm4gc2V0OyBcclxuXHR9O1xyXG5cdEdST1VQUyA9IHJlYWRfYXJyYXlfd2hpbGUoaSA9PiB7XHJcblx0XHQvLyBtaW5pZmllciBwcm9wZXJ0eSBtYW5nbGluZyBzZWVtcyB1bnNhZmVcclxuXHRcdC8vIHNvIHRoZXNlIGFyZSBtYW51YWxseSByZW5hbWVkIHRvIHNpbmdsZSBjaGFyc1xyXG5cdFx0bGV0IE4gPSByZWFkX2FycmF5X3doaWxlKHIpLm1hcCh4ID0+IHgrMHg2MCk7XHJcblx0XHRpZiAoTi5sZW5ndGgpIHtcclxuXHRcdFx0bGV0IFIgPSBpID49IHVucmVzdHJpY3RlZDsgLy8gdW5yZXN0cmljdGVkIHRoZW4gcmVzdHJpY3RlZFxyXG5cdFx0XHROWzBdIC09IDMyOyAvLyBjYXBpdGFsaXplXHJcblx0XHRcdE4gPSBzdHJfZnJvbV9jcHMoTik7XHJcblx0XHRcdGlmIChSKSBOPWBSZXN0cmljdGVkWyR7Tn1dYDtcclxuXHRcdFx0bGV0IFAgPSByZWFkX2NodW5rZWQoKTsgLy8gcHJpbWFyeVxyXG5cdFx0XHRsZXQgUSA9IHJlYWRfY2h1bmtlZCgpOyAvLyBzZWNvbmRhcnlcclxuXHRcdFx0bGV0IE0gPSAhcigpOyAvLyBub3Qtd2hpdGVsaXN0ZWQsIGNoZWNrIGZvciBOU01cclxuXHRcdFx0Ly8gKioqIHRoaXMgY29kZSBjdXJyZW50bHkgaXNuJ3QgbmVlZGVkICoqKlxyXG5cdFx0XHQvKlxyXG5cdFx0XHRsZXQgViA9IFsuLi5QLCAuLi5RXS5zb3J0KChhLCBiKSA9PiBhLWIpOyAvLyBkZXJpdmU6IHNvcnRlZCB2YWxpZFxyXG5cdFx0XHRsZXQgTSA9IHIoKS0xOyAvLyBudW1iZXIgb2YgY29tYmluaW5nIG1hcmtcclxuXHRcdFx0aWYgKE0gPCAwKSB7IC8vIHdoaXRlbGlzdGVkXHJcblx0XHRcdFx0TSA9IG5ldyBNYXAocmVhZF9hcnJheV93aGlsZSgoKSA9PiB7XHJcblx0XHRcdFx0XHRsZXQgaSA9IHIoKTtcclxuXHRcdFx0XHRcdGlmIChpKSByZXR1cm4gW1ZbaS0xXSwgcmVhZF9hcnJheV93aGlsZSgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdGxldCB2ID0gcmVhZF9hcnJheV93aGlsZShyKTtcclxuXHRcdFx0XHRcdFx0aWYgKHYubGVuZ3RoKSByZXR1cm4gdi5tYXAoeCA9PiB4LTEpO1xyXG5cdFx0XHRcdFx0fSldO1xyXG5cdFx0XHRcdH0pKTtcclxuXHRcdFx0fSovXHJcblx0XHRcdHJldHVybiB7TiwgUCwgUSwgTSwgUn07XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdC8vIGRlY29kZSBjb21wcmVzc2VkIHdob2xlc1xyXG5cdFdIT0xFX1ZBTElEID0gcmVhZF9zb3J0ZWRfc2V0KCk7XHJcblx0V0hPTEVfTUFQID0gbmV3IE1hcCgpO1xyXG5cdGxldCB3aG9sZXMgPSByZWFkX3NvcnRlZF9hcnJheSgpLmNvbmNhdChBcnJheV9mcm9tKFdIT0xFX1ZBTElEKSkuc29ydCgoYSwgYikgPT4gYS1iKTsgLy8gbXVzdCBiZSBzb3J0ZWRcclxuXHR3aG9sZXMuZm9yRWFjaCgoY3AsIGkpID0+IHtcclxuXHRcdGxldCBkID0gcigpOyBcclxuXHRcdGxldCB3ID0gd2hvbGVzW2ldID0gZCA/IHdob2xlc1tpLWRdIDoge1Y6IFtdLCBNOiBuZXcgTWFwKCl9O1xyXG5cdFx0dy5WLnB1c2goY3ApOyAvLyBhZGQgdG8gbWVtYmVyIHNldFxyXG5cdFx0aWYgKCFXSE9MRV9WQUxJRC5oYXMoY3ApKSB7XHJcblx0XHRcdFdIT0xFX01BUC5zZXQoY3AsIHcpOyAgLy8gcmVnaXN0ZXIgd2l0aCB3aG9sZSBtYXBcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0Ly8gY29tcHV0ZSBjb25mdXNhYmxlLWV4dGVudCBjb21wbGVtZW50c1xyXG5cdC8vIHVzYWdlOiBXSE9MRV9NQVAuZ2V0KGNwKS5NLmdldChjcCkgPSBjb21wbGVtZW50IHNldFxyXG5cdGZvciAobGV0IHtWLCBNfSBvZiBuZXcgU2V0KFdIT0xFX01BUC52YWx1ZXMoKSkpIHtcclxuXHRcdC8vIGNvbm5lY3QgYWxsIGdyb3VwcyB0aGF0IGhhdmUgZWFjaCB3aG9sZSBjaGFyYWN0ZXJcclxuXHRcdGxldCByZWNzID0gW107XHJcblx0XHRmb3IgKGxldCBjcCBvZiBWKSB7XHJcblx0XHRcdGxldCBncyA9IEdST1VQUy5maWx0ZXIoZyA9PiBncm91cF9oYXNfY3AoZywgY3ApKTtcclxuXHRcdFx0bGV0IHJlYyA9IHJlY3MuZmluZCgoe0d9KSA9PiBncy5zb21lKGcgPT4gRy5oYXMoZykpKTtcclxuXHRcdFx0aWYgKCFyZWMpIHtcclxuXHRcdFx0XHRyZWMgPSB7RzogbmV3IFNldCgpLCBWOiBbXX07XHJcblx0XHRcdFx0cmVjcy5wdXNoKHJlYyk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmVjLlYucHVzaChjcCk7XHJcblx0XHRcdHNldF9hZGRfbWFueShyZWMuRywgZ3MpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gcGVyIGNoYXJhY3RlciBjYWNoZSBncm91cHMgd2hpY2ggYXJlIG5vdCBhIG1lbWJlciBvZiB0aGUgZXh0ZW50XHJcblx0XHRsZXQgdW5pb24gPSByZWNzLmZsYXRNYXAoeCA9PiBBcnJheV9mcm9tKHguRykpOyAvLyBhbGwgb2YgdGhlIGdyb3VwcyB1c2VkIGJ5IHRoaXMgd2hvbGVcclxuXHRcdGZvciAobGV0IHtHLCBWfSBvZiByZWNzKSB7XHJcblx0XHRcdGxldCBjb21wbGVtZW50ID0gbmV3IFNldCh1bmlvbi5maWx0ZXIoZyA9PiAhRy5oYXMoZykpKTsgLy8gZ3JvdXBzIG5vdCBjb3ZlcmVkIGJ5IHRoZSBleHRlbnRcclxuXHRcdFx0Zm9yIChsZXQgY3Agb2YgVikge1xyXG5cdFx0XHRcdE0uc2V0KGNwLCBjb21wbGVtZW50KTsgLy8gdGhpcyBpcyB0aGUgc2FtZSByZWZlcmVuY2VcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gY29tcHV0ZSB2YWxpZCBzZXRcclxuXHQvLyAyMDIzMDkyNDogVkFMSUQgd2FzIHVuaW9uIGJ1dCBjYW4gYmUgcmUtdXNlZFxyXG5cdFZBTElEID0gbmV3IFNldCgpOyAvLyBleGlzdHMgaW4gMSsgZ3JvdXBzXHJcblx0bGV0IG11bHRpID0gbmV3IFNldCgpOyAvLyBleGlzdHMgaW4gMisgZ3JvdXBzXHJcblx0Y29uc3QgYWRkX3RvX3VuaW9uID0gY3AgPT4gVkFMSUQuaGFzKGNwKSA/IG11bHRpLmFkZChjcCkgOiBWQUxJRC5hZGQoY3ApO1xyXG5cdGZvciAobGV0IGcgb2YgR1JPVVBTKSB7XHJcblx0XHRmb3IgKGxldCBjcCBvZiBnLlApIGFkZF90b191bmlvbihjcCk7XHJcblx0XHRmb3IgKGxldCBjcCBvZiBnLlEpIGFkZF90b191bmlvbihjcCk7XHJcblx0fVxyXG5cdC8vIGR1YWwgcHVycG9zZSBXSE9MRV9NQVA6IHJldHVybiBwbGFjZWhvbGRlciBpZiB1bmlxdWUgbm9uLWNvbmZ1c2FibGVcclxuXHRmb3IgKGxldCBjcCBvZiBWQUxJRCkge1xyXG5cdFx0aWYgKCFXSE9MRV9NQVAuaGFzKGNwKSAmJiAhbXVsdGkuaGFzKGNwKSkge1xyXG5cdFx0XHRXSE9MRV9NQVAuc2V0KGNwLCBVTklRVUVfUEgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHQvLyBhZGQgYWxsIGRlY29tcG9zZWQgcGFydHNcclxuXHQvLyBzZWUgZGVyaXZlOiBcIlZhbGlkIGlzIENsb3NlZCAodmlhIEJydXRlLWZvcmNlKVwiXHJcblx0c2V0X2FkZF9tYW55KFZBTElELCBuZmQoVkFMSUQpKTtcclxuXHRcclxuXHQvLyBkZWNvZGUgZW1vamlcclxuXHQvLyAyMDIzMDcxOTogZW1vamkgYXJlIG5vdyBmdWxseS1leHBhbmRlZCB0byBhdm9pZCBxdWlyayBsb2dpYyBcclxuXHRFTU9KSV9MSVNUID0gcmVhZF90cmllKHIpLm1hcCh2ID0+IEVtb2ppLmZyb20odikpLnNvcnQoY29tcGFyZV9hcnJheXMpO1xyXG5cdEVNT0pJX1JPT1QgPSBuZXcgTWFwKCk7IC8vIHRoaXMgaGFzIGFwcHJveCA3SyBub2RlcyAoMisgcGVyIGVtb2ppKVxyXG5cdGZvciAobGV0IGNwcyBvZiBFTU9KSV9MSVNUKSB7XHJcblx0XHQvLyAyMDIzMDcxOTogY2hhbmdlIHRvICpzbGlnaHRseSogc3RyaWN0ZXIgYWxnb3JpdGhtIHdoaWNoIGRpc2FsbG93cyBcclxuXHRcdC8vIGluc2VydGlvbiBvZiBtaXNwbGFjZWQgRkUwRiBpbiBlbW9qaSBzZXF1ZW5jZXMgKG1hdGNoaW5nIEVOU0lQLTE1KVxyXG5cdFx0Ly8gZXhhbXBsZTogYmVhdXRpZmllZCBbQSBCXSAoZWcuIGZsYWcgZW1vamkpIFxyXG5cdFx0Ly8gIGJlZm9yZTogYWxsb3c6IFtBIEZFMEYgQl0sIGVycm9yOiBbQSBGRTBGIEZFMEYgQl0gXHJcblx0XHQvLyAgIGFmdGVyOiBlcnJvcjogYm90aFxyXG5cdFx0Ly8gbm90ZTogdGhpcyBjb2RlIG5vdyBtYXRjaGVzIEVOU05vcm1hbGl6ZS57Y3MsamF2YX0gbG9naWNcclxuXHRcdGxldCBwcmV2ID0gW0VNT0pJX1JPT1RdO1xyXG5cdFx0Zm9yIChsZXQgY3Agb2YgY3BzKSB7XHJcblx0XHRcdGxldCBuZXh0ID0gcHJldi5tYXAobm9kZSA9PiB7XHJcblx0XHRcdFx0bGV0IGNoaWxkID0gbm9kZS5nZXQoY3ApO1xyXG5cdFx0XHRcdGlmICghY2hpbGQpIHtcclxuXHRcdFx0XHRcdC8vIHNob3VsZCB0aGlzIGJlIG9iamVjdD8gXHJcblx0XHRcdFx0XHQvLyAobW9zdCBoYXZlIDEtMiBpdGVtcywgZmV3IGhhdmUgbWFueSlcclxuXHRcdFx0XHRcdC8vIDIwMjMwNzE5OiBubywgdjggZGVmYXVsdCBtYXAgaXMgND9cclxuXHRcdFx0XHRcdGNoaWxkID0gbmV3IE1hcCgpO1xyXG5cdFx0XHRcdFx0bm9kZS5zZXQoY3AsIGNoaWxkKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGNoaWxkO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0aWYgKGNwID09PSBGRTBGKSB7XHJcblx0XHRcdFx0cHJldi5wdXNoKC4uLm5leHQpOyAvLyBsZXNzIHRoYW4gMjAgZWxlbWVudHNcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRwcmV2ID0gbmV4dDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Zm9yIChsZXQgeCBvZiBwcmV2KSB7XHJcblx0XHRcdHguViA9IGNwcztcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbi8vIGlmIGVzY2FwZWQ6IHtIRVh9XHJcbi8vICAgICAgIGVsc2U6IFwieFwiIHtIRVh9XHJcbmZ1bmN0aW9uIHF1b3RlZF9jcChjcCkge1xyXG5cdHJldHVybiAoc2hvdWxkX2VzY2FwZShjcCkgPyAnJyA6IGAke2JpZGlfcXEoc2FmZV9zdHJfZnJvbV9jcHMoW2NwXSkpfSBgKSArIHF1b3RlX2NwKGNwKTtcclxufVxyXG5cclxuLy8gMjAyMzAyMTE6IHNvbWUgbWVzc2FnZXMgY2FuIGJlIG1peGVkLWRpcmVjdGlvbmFsIGFuZCByZXN1bHQgaW4gc3BpbGxvdmVyXHJcbi8vIHVzZSAyMDBFIGFmdGVyIGEgcXVvdGVkIHN0cmluZyB0byBmb3JjZSB0aGUgcmVtYWluZGVyIG9mIGEgc3RyaW5nIGZyb20gXHJcbi8vIGFjcXVyaW5nIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHF1b3RlXHJcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9JbnRlcm5hdGlvbmFsL3F1ZXN0aW9ucy9xYS1iaWRpLXVuaWNvZGUtY29udHJvbHMjZXhjZXB0aW9uc1xyXG5mdW5jdGlvbiBiaWRpX3FxKHMpIHtcclxuXHRyZXR1cm4gYFwiJHtzfVwiXFx1MjAwRWA7IC8vIHN0cm9uZyBMVFJcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tfbGFiZWxfZXh0ZW5zaW9uKGNwcykge1xyXG5cdGlmIChjcHMubGVuZ3RoID49IDQgJiYgY3BzWzJdID09IEhZUEhFTiAmJiBjcHNbM10gPT0gSFlQSEVOKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgbGFiZWwgZXh0ZW5zaW9uOiBcIiR7c3RyX2Zyb21fY3BzKGNwcy5zbGljZSgwLCA0KSl9XCJgKTsgLy8gdGhpcyBjYW4gb25seSBiZSBhc2NpaSBzbyBjYW50IGJlIGJpZGlcclxuXHR9XHJcbn1cclxuZnVuY3Rpb24gY2hlY2tfbGVhZGluZ191bmRlcnNjb3JlKGNwcykge1xyXG5cdGNvbnN0IFVOREVSU0NPUkUgPSAweDVGO1xyXG5cdGZvciAobGV0IGkgPSBjcHMubGFzdEluZGV4T2YoVU5ERVJTQ09SRSk7IGkgPiAwOyApIHtcclxuXHRcdGlmIChjcHNbLS1pXSAhPT0gVU5ERVJTQ09SRSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ3VuZGVyc2NvcmUgYWxsb3dlZCBvbmx5IGF0IHN0YXJ0Jyk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcbi8vIGNoZWNrIHRoYXQgYSBmZW5jZWQgY3AgaXMgbm90IGxlYWRpbmcsIHRyYWlsaW5nLCBvciB0b3VjaGluZyBhbm90aGVyIGZlbmNlZCBjcFxyXG5mdW5jdGlvbiBjaGVja19mZW5jZWQoY3BzKSB7XHJcblx0bGV0IGNwID0gY3BzWzBdO1xyXG5cdGxldCBwcmV2ID0gRkVOQ0VELmdldChjcCk7XHJcblx0aWYgKHByZXYpIHRocm93IGVycm9yX3BsYWNlbWVudChgbGVhZGluZyAke3ByZXZ9YCk7XHJcblx0bGV0IG4gPSBjcHMubGVuZ3RoO1xyXG5cdGxldCBsYXN0ID0gLTE7IC8vIHByZXZlbnRzIHRyYWlsaW5nIGZyb20gdGhyb3dpbmdcclxuXHRmb3IgKGxldCBpID0gMTsgaSA8IG47IGkrKykge1xyXG5cdFx0Y3AgPSBjcHNbaV07XHJcblx0XHRsZXQgbWF0Y2ggPSBGRU5DRUQuZ2V0KGNwKTtcclxuXHRcdGlmIChtYXRjaCkge1xyXG5cdFx0XHQvLyBzaW5jZSBjcHNbMF0gaXNuJ3QgZmVuY2VkLCBjcHNbMV0gY2Fubm90IHRocm93XHJcblx0XHRcdGlmIChsYXN0ID09IGkpIHRocm93IGVycm9yX3BsYWNlbWVudChgJHtwcmV2fSArICR7bWF0Y2h9YCk7XHJcblx0XHRcdGxhc3QgPSBpICsgMTtcclxuXHRcdFx0cHJldiA9IG1hdGNoO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAobGFzdCA9PSBuKSB0aHJvdyBlcnJvcl9wbGFjZW1lbnQoYHRyYWlsaW5nICR7cHJldn1gKTtcclxufVxyXG5cclxuLy8gY3JlYXRlIGEgc2FmZSB0byBwcmludCBzdHJpbmcgXHJcbi8vIGludmlzaWJsZXMgYXJlIGVzY2FwZWRcclxuLy8gbGVhZGluZyBjbSB1c2VzIHBsYWNlaG9sZGVyXHJcbi8vIGlmIGNwcyBleGNlZWQgbWF4LCBtaWRkbGUgdHJ1bmNhdGUgd2l0aCBlbGxpcHNpc1xyXG4vLyBxdW90ZXIoY3ApID0+IHN0cmluZywgZWcuIDMwMDAgPT4gXCJ7MzAwMH1cIlxyXG4vLyBub3RlOiBpbiBodG1sLCB5b3UnZCBjYWxsIHRoaXMgZnVuY3Rpb24gdGhlbiByZXBsYWNlIFs8PiZdIHdpdGggZW50aXRpZXNcclxuZnVuY3Rpb24gc2FmZV9zdHJfZnJvbV9jcHMoY3BzLCBtYXggPSBJbmZpbml0eSwgcXVvdGVyID0gcXVvdGVfY3ApIHtcclxuXHQvL2lmIChOdW1iZXIuaXNJbnRlZ2VyKGNwcykpIGNwcyA9IFtjcHNdO1xyXG5cdC8vaWYgKCFBcnJheS5pc0FycmF5KGNwcykpIHRocm93IG5ldyBUeXBlRXJyb3IoYGV4cGVjdGVkIGNvZGVwb2ludHNgKTtcclxuXHRsZXQgYnVmID0gW107XHJcblx0aWYgKGlzX2NvbWJpbmluZ19tYXJrKGNwc1swXSkpIGJ1Zi5wdXNoKCfil4wnKTtcclxuXHRpZiAoY3BzLmxlbmd0aCA+IG1heCkge1xyXG5cdFx0bWF4ID4+PSAxO1xyXG5cdFx0Y3BzID0gWy4uLmNwcy5zbGljZSgwLCBtYXgpLCAweDIwMjYsIC4uLmNwcy5zbGljZSgtbWF4KV07XHJcblx0fVxyXG5cdGxldCBwcmV2ID0gMDtcclxuXHRsZXQgbiA9IGNwcy5sZW5ndGg7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuXHRcdGxldCBjcCA9IGNwc1tpXTtcclxuXHRcdGlmIChzaG91bGRfZXNjYXBlKGNwKSkge1xyXG5cdFx0XHRidWYucHVzaChzdHJfZnJvbV9jcHMoY3BzLnNsaWNlKHByZXYsIGkpKSk7XHJcblx0XHRcdGJ1Zi5wdXNoKHF1b3RlcihjcCkpO1xyXG5cdFx0XHRwcmV2ID0gaSArIDE7XHJcblx0XHR9XHJcblx0fVxyXG5cdGJ1Zi5wdXNoKHN0cl9mcm9tX2NwcyhjcHMuc2xpY2UocHJldiwgbikpKTtcclxuXHRyZXR1cm4gYnVmLmpvaW4oJycpO1xyXG59XHJcblxyXG4vLyBub3RlOiBzZXQocykgY2Fubm90IGJlIGV4cG9zZWQgYmVjYXVzZSB0aGV5IGNhbiBiZSBtb2RpZmllZFxyXG4vLyBub3RlOiBPYmplY3QuZnJlZXplKCkgZG9lc24ndCB3b3JrXHJcbmZ1bmN0aW9uIGlzX2NvbWJpbmluZ19tYXJrKGNwKSB7XHJcblx0aW5pdCgpO1xyXG5cdHJldHVybiBDTS5oYXMoY3ApO1xyXG59XHJcbmZ1bmN0aW9uIHNob3VsZF9lc2NhcGUoY3ApIHtcclxuXHRpbml0KCk7XHJcblx0cmV0dXJuIEVTQ0FQRS5oYXMoY3ApO1xyXG59XHJcblxyXG4vLyByZXR1cm4gYWxsIHN1cHBvcnRlZCBlbW9qaSBhcyBmdWxseS1xdWFsaWZpZWQgZW1vamkgXHJcbi8vIG9yZGVyZWQgYnkgbGVuZ3RoIHRoZW4gbGV4aWNvZ3JhcGhpYyBcclxuZnVuY3Rpb24gZW5zX2Vtb2ppKCkge1xyXG5cdGluaXQoKTtcclxuXHRyZXR1cm4gRU1PSklfTElTVC5tYXAoeCA9PiB4LnNsaWNlKCkpOyAvLyBlbW9qaSBhcmUgZXhwb3NlZCBzbyBjb3B5XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuc19ub3JtYWxpemVfZnJhZ21lbnQoZnJhZywgZGVjb21wb3NlKSB7XHJcblx0aW5pdCgpO1xyXG5cdGxldCBuZiA9IGRlY29tcG9zZSA/IG5mZCA6IG5mYztcclxuXHRyZXR1cm4gZnJhZy5zcGxpdChTVE9QX0NIKS5tYXAobGFiZWwgPT4gc3RyX2Zyb21fY3BzKHRva2Vuc19mcm9tX3N0cihleHBsb2RlX2NwKGxhYmVsKSwgbmYsIGZpbHRlcl9mZTBmKS5mbGF0KCkpKS5qb2luKFNUT1BfQ0gpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbnNfbm9ybWFsaXplKG5hbWUpIHtcclxuXHRyZXR1cm4gZmxhdHRlbihzcGxpdChuYW1lLCBuZmMsIGZpbHRlcl9mZTBmKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuc19iZWF1dGlmeShuYW1lKSB7XHJcblx0bGV0IGxhYmVscyA9IHNwbGl0KG5hbWUsIG5mYywgeCA9PiB4KTsgLy8gZW1vamkgbm90IGV4cG9zZWRcclxuXHRmb3IgKGxldCB7dHlwZSwgb3V0cHV0LCBlcnJvcn0gb2YgbGFiZWxzKSB7XHJcblx0XHRpZiAoZXJyb3IpIGJyZWFrOyAvLyBmbGF0dGVuIHdpbGwgdGhyb3dcclxuXHJcblx0XHQvLyByZXBsYWNlIGxlYWRpbmcvdHJhaWxpbmcgaHlwaGVuXHJcblx0XHQvLyAyMDIzMDEyMTogY29uc2lkZXIgYmVhdXRpZmluZyBhbGwgb3IgbGVhZGluZy90cmFpbGluZyBoeXBoZW4gdG8gdW5pY29kZSB2YXJpYW50XHJcblx0XHQvLyBub3QgZXhhY3RseSB0aGUgc2FtZSBpbiBldmVyeSBmb250LCBidXQgdmVyeSBzaW1pbGFyOiBcIi1cIiB2cyBcIuKAkFwiXHJcblx0XHQvKlxyXG5cdFx0Y29uc3QgVU5JQ09ERV9IWVBIRU4gPSAweDIwMTA7XHJcblx0XHQvLyBtYXliZSB0aGlzIHNob3VsZCByZXBsYWNlIGFsbCBmb3IgdmlzdWFsIGNvbnNpc3RhbmN5P1xyXG5cdFx0Ly8gYG5vZGUgdG9vbHMvcmVnLWNvdW50LmpzIHJlZ2V4IF4tXFx7MixcXH1gID0+IDU5MlxyXG5cdFx0Ly9mb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dC5sZW5ndGg7IGkrKykgaWYgKG91dHB1dFtpXSA9PSAweDJEKSBvdXRwdXRbaV0gPSAweDIwMTA7XHJcblx0XHRpZiAob3V0cHV0WzBdID09IEhZUEhFTikgb3V0cHV0WzBdID0gVU5JQ09ERV9IWVBIRU47XHJcblx0XHRsZXQgZW5kID0gb3V0cHV0Lmxlbmd0aC0xO1xyXG5cdFx0aWYgKG91dHB1dFtlbmRdID09IEhZUEhFTikgb3V0cHV0W2VuZF0gPSBVTklDT0RFX0hZUEhFTjtcclxuXHRcdCovXHJcblx0XHQvLyAyMDIzMDEyMzogV0hBVFdHIFVSTCB1c2VzIFwiQ2hlY2tIeXBoZW5zXCIgZmFsc2VcclxuXHRcdC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaWRuYVxyXG5cclxuXHRcdC8vIHVwZGF0ZSBldGhlcmV1bSBzeW1ib2xcclxuXHRcdC8vIM6+ID0+IM6eIGlmIG5vdCBncmVla1xyXG5cdFx0aWYgKHR5cGUgIT09ICdHcmVlaycpIGFycmF5X3JlcGxhY2Uob3V0cHV0LCAweDNCRSwgMHgzOUUpO1xyXG5cclxuXHRcdC8vIDIwMjIxMjEzOiBmaXhlcyBiaWRpIHN1YmRvbWFpbiBpc3N1ZSwgYnV0IGJyZWFrcyBpbnZhcmlhbnQgKDIwMEUgaXMgZGlzYWxsb3dlZClcclxuXHRcdC8vIGNvdWxkIGJlIGZpeGVkIHdpdGggc3BlY2lhbCBjYXNlIGZvcjogMkQgKC4pICsgMjAwRSAoTFRSKVxyXG5cdFx0Ly8gaHR0cHM6Ly9kaXNjdXNzLmVucy5kb21haW5zL3QvYmlkaS1sYWJlbC1vcmRlcmluZy1zcG9vZi8xNTgyNFxyXG5cdFx0Ly9vdXRwdXQuc3BsaWNlKDAsIDAsIDB4MjAwRSk7XHJcblx0fVxyXG5cdHJldHVybiBmbGF0dGVuKGxhYmVscyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFycmF5X3JlcGxhY2UodiwgYSwgYikge1xyXG5cdGxldCBwcmV2ID0gMDtcclxuXHR3aGlsZSAodHJ1ZSkge1xyXG5cdFx0bGV0IG5leHQgPSB2LmluZGV4T2YoYSwgcHJldik7XHJcblx0XHRpZiAobmV4dCA8IDApIGJyZWFrO1xyXG5cdFx0dltuZXh0XSA9IGI7IFxyXG5cdFx0cHJldiA9IG5leHQgKyAxO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZW5zX3NwbGl0KG5hbWUsIHByZXNlcnZlX2Vtb2ppKSB7XHJcblx0cmV0dXJuIHNwbGl0KG5hbWUsIG5mYywgcHJlc2VydmVfZW1vamkgPyB4ID0+IHguc2xpY2UoKSA6IGZpbHRlcl9mZTBmKTsgLy8gZW1vamkgYXJlIGV4cG9zZWQgc28gY29weVxyXG59XHJcblxyXG5mdW5jdGlvbiBzcGxpdChuYW1lLCBuZiwgZWYpIHtcclxuXHRpZiAoIW5hbWUpIHJldHVybiBbXTsgLy8gMjAyMzA3MTk6IGVtcHR5IG5hbWUgYWxsb3dhbmNlXHJcblx0aW5pdCgpO1xyXG5cdGxldCBvZmZzZXQgPSAwO1xyXG5cdC8vIGh0dHBzOi8vdW5pY29kZS5vcmcvcmVwb3J0cy90cjQ2LyNWYWxpZGl0eV9Dcml0ZXJpYVxyXG5cdC8vIDQuKSBcIlRoZSBsYWJlbCBtdXN0IG5vdCBjb250YWluIGEgVSswMDJFICggLiApIEZVTEwgU1RPUC5cIlxyXG5cdHJldHVybiBuYW1lLnNwbGl0KFNUT1BfQ0gpLm1hcChsYWJlbCA9PiB7XHJcblx0XHRsZXQgaW5wdXQgPSBleHBsb2RlX2NwKGxhYmVsKTtcclxuXHRcdGxldCBpbmZvID0ge1xyXG5cdFx0XHRpbnB1dCxcclxuXHRcdFx0b2Zmc2V0LCAvLyBjb2RlcG9pbnQsIG5vdCBzdWJzdHJpbmchXHJcblx0XHR9O1xyXG5cdFx0b2Zmc2V0ICs9IGlucHV0Lmxlbmd0aCArIDE7IC8vICsgc3RvcFxyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Ly8gMS4pIFwiVGhlIGxhYmVsIG11c3QgYmUgaW4gVW5pY29kZSBOb3JtYWxpemF0aW9uIEZvcm0gTkZDXCJcclxuXHRcdFx0bGV0IHRva2VucyA9IGluZm8udG9rZW5zID0gdG9rZW5zX2Zyb21fc3RyKGlucHV0LCBuZiwgZWYpO1xyXG5cdFx0XHRsZXQgdG9rZW5fY291bnQgPSB0b2tlbnMubGVuZ3RoO1xyXG5cdFx0XHRsZXQgdHlwZTtcclxuXHRcdFx0aWYgKCF0b2tlbl9jb3VudCkgeyAvLyB0aGUgbGFiZWwgd2FzIGVmZmVjdGl2ZWx5IGVtcHR5IChjb3VsZCBvZiBoYWQgaWdub3JlZCBjaGFyYWN0ZXJzKVxyXG5cdFx0XHRcdC8vbm9ybSA9IFtdO1xyXG5cdFx0XHRcdC8vdHlwZSA9ICdOb25lJzsgLy8gdXNlIHRoaXMgaW5zdGVhZCBvZiBuZXh0IG1hdGNoLCBcIkFTQ0lJXCJcclxuXHRcdFx0XHQvLyAyMDIzMDEyMDogY2hhbmdlIHRvIHN0cmljdFxyXG5cdFx0XHRcdC8vIGh0dHBzOi8vZGlzY3Vzcy5lbnMuZG9tYWlucy90L2Vucy1uYW1lLW5vcm1hbGl6YXRpb24tMm5kLzE0NTY0LzU5XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBlbXB0eSBsYWJlbGApO1xyXG5cdFx0XHR9IFxyXG5cdFx0XHRsZXQgbm9ybSA9IGluZm8ub3V0cHV0ID0gdG9rZW5zLmZsYXQoKTtcclxuXHRcdFx0Y2hlY2tfbGVhZGluZ191bmRlcnNjb3JlKG5vcm0pO1xyXG5cdFx0XHRsZXQgZW1vamkgPSBpbmZvLmVtb2ppID0gdG9rZW5fY291bnQgPiAxIHx8IHRva2Vuc1swXS5pc19lbW9qaTsgLy8gc2FtZSBhczogdG9rZW5zLnNvbWUoeCA9PiB4LmlzX2Vtb2ppKTtcclxuXHRcdFx0aWYgKCFlbW9qaSAmJiBub3JtLmV2ZXJ5KGNwID0+IGNwIDwgMHg4MCkpIHsgLy8gc3BlY2lhbCBjYXNlIGZvciBhc2NpaVxyXG5cdFx0XHRcdC8vIDIwMjMwMTIzOiBtYXRjaGVzIG1hdGNoZXMgV0hBVFdHLCBzZWUgbm90ZSAzLjNcclxuXHRcdFx0XHRjaGVja19sYWJlbF9leHRlbnNpb24obm9ybSk7IC8vIG9ubHkgbmVlZGVkIGZvciBhc2NpaVxyXG5cdFx0XHRcdC8vIGNhbnQgaGF2ZSBmZW5jZWRcclxuXHRcdFx0XHQvLyBjYW50IGhhdmUgY21cclxuXHRcdFx0XHQvLyBjYW50IGhhdmUgd2hvbGVzXHJcblx0XHRcdFx0Ly8gc2VlIGRlcml2ZTogXCJGYXN0cGF0aCBBU0NJSVwiXHJcblx0XHRcdFx0dHlwZSA9ICdBU0NJSSc7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bGV0IGNoYXJzID0gdG9rZW5zLmZsYXRNYXAoeCA9PiB4LmlzX2Vtb2ppID8gW10gOiB4KTsgLy8gYWxsIG9mIHRoZSBuZmMgdG9rZW5zIGNvbmNhdCB0b2dldGhlclxyXG5cdFx0XHRcdGlmICghY2hhcnMubGVuZ3RoKSB7IC8vIHRoZXJlcyBubyB0ZXh0LCBqdXN0IGVtb2ppXHJcblx0XHRcdFx0XHR0eXBlID0gJ0Vtb2ppJztcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gNS4pIFwiVGhlIGxhYmVsIG11c3Qgbm90IGJlZ2luIHdpdGggYSBjb21iaW5pbmcgbWFyaywgdGhhdCBpczogR2VuZXJhbF9DYXRlZ29yeT1NYXJrLlwiXHJcblx0XHRcdFx0XHRpZiAoQ00uaGFzKG5vcm1bMF0pKSB0aHJvdyBlcnJvcl9wbGFjZW1lbnQoJ2xlYWRpbmcgY29tYmluaW5nIG1hcmsnKTtcclxuXHRcdFx0XHRcdGZvciAobGV0IGkgPSAxOyBpIDwgdG9rZW5fY291bnQ7IGkrKykgeyAvLyB3ZSd2ZSBhbHJlYWR5IGNoZWNrZWQgdGhlIGZpcnN0IHRva2VuXHJcblx0XHRcdFx0XHRcdGxldCBjcHMgPSB0b2tlbnNbaV07XHJcblx0XHRcdFx0XHRcdGlmICghY3BzLmlzX2Vtb2ppICYmIENNLmhhcyhjcHNbMF0pKSB7IC8vIGV2ZXJ5IHRleHQgdG9rZW4gaGFzIGVtb2ppIG5laWdoYm9ycywgZWcuIEV0RUVFdEV0Li4uXHJcblx0XHRcdFx0XHRcdFx0Ly8gYmlkaV9xcSgpIG5vdCBuZWVkZWQgc2luY2UgZW1vamkgaXMgTFRSIGFuZCBjcHMgaXMgYSBDTVxyXG5cdFx0XHRcdFx0XHRcdHRocm93IGVycm9yX3BsYWNlbWVudChgZW1vamkgKyBjb21iaW5pbmcgbWFyazogXCIke3N0cl9mcm9tX2Nwcyh0b2tlbnNbaS0xXSl9ICsgJHtzYWZlX3N0cl9mcm9tX2NwcyhbY3BzWzBdXSl9XCJgKTsgXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGNoZWNrX2ZlbmNlZChub3JtKTtcclxuXHRcdFx0XHRcdGxldCB1bmlxdWUgPSBBcnJheV9mcm9tKG5ldyBTZXQoY2hhcnMpKTtcclxuXHRcdFx0XHRcdGxldCBbZ10gPSBkZXRlcm1pbmVfZ3JvdXAodW5pcXVlKTsgLy8gdGFrZSB0aGUgZmlyc3QgbWF0Y2hcclxuXHRcdFx0XHRcdC8vIHNlZSBkZXJpdmU6IFwiTWF0Y2hpbmcgR3JvdXBzIGhhdmUgU2FtZSBDTSBTdHlsZVwiXHJcblx0XHRcdFx0XHQvLyBhbHRlcm5hdGl2ZTogY291bGQgZm9ybSBhIGh5YnJpZCB0eXBlOiBMYXRpbi9KYXBhbmVzZS8uLi5cdFxyXG5cdFx0XHRcdFx0Y2hlY2tfZ3JvdXAoZywgY2hhcnMpOyAvLyBuZWVkIHRleHQgaW4gb3JkZXJcclxuXHRcdFx0XHRcdGNoZWNrX3dob2xlKGcsIHVuaXF1ZSk7IC8vIG9ubHkgbmVlZCB1bmlxdWUgdGV4dCAob3JkZXIgd291bGQgYmUgcmVxdWlyZWQgZm9yIG11bHRpcGxlLWNoYXIgY29uZnVzYWJsZXMpXHJcblx0XHRcdFx0XHR0eXBlID0gZy5OO1xyXG5cdFx0XHRcdFx0Ly8gMjAyMzAxMjE6IGNvbnNpZGVyIGV4cG9zaW5nIHJlc3RyaWN0ZWQgZmxhZ1xyXG5cdFx0XHRcdFx0Ly8gaXQncyBzaW1wbGVyIHRvIGp1c3QgY2hlY2sgZm9yICdSZXN0cmljdGVkJ1xyXG5cdFx0XHRcdFx0Ly8gb3IgZXZlbiBiZXR0ZXI6IHR5cGUuZW5kc1dpdGgoJ10nKVxyXG5cdFx0XHRcdFx0Ly9pZiAoZy5SKSBpbmZvLnJlc3RyaWN0ZWQgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpbmZvLnR5cGUgPSB0eXBlO1xyXG5cdFx0fSBjYXRjaCAoZXJyKSB7XHJcblx0XHRcdGluZm8uZXJyb3IgPSBlcnI7IC8vIHVzZSBmdWxsIGVycm9yIG9iamVjdFxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGluZm87XHJcblx0fSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrX3dob2xlKGdyb3VwLCB1bmlxdWUpIHtcclxuXHRsZXQgbWFrZXI7XHJcblx0bGV0IHNoYXJlZCA9IFtdO1xyXG5cdGZvciAobGV0IGNwIG9mIHVuaXF1ZSkge1xyXG5cdFx0bGV0IHdob2xlID0gV0hPTEVfTUFQLmdldChjcCk7XHJcblx0XHRpZiAod2hvbGUgPT09IFVOSVFVRV9QSCkgcmV0dXJuOyAvLyB1bmlxdWUsIG5vbi1jb25mdXNhYmxlXHJcblx0XHRpZiAod2hvbGUpIHtcclxuXHRcdFx0bGV0IHNldCA9IHdob2xlLk0uZ2V0KGNwKTsgLy8gZ3JvdXBzIHdoaWNoIGhhdmUgYSBjaGFyYWN0ZXIgdGhhdCBsb29rLWxpa2UgdGhpcyBjaGFyYWN0ZXJcclxuXHRcdFx0bWFrZXIgPSBtYWtlciA/IG1ha2VyLmZpbHRlcihnID0+IHNldC5oYXMoZykpIDogQXJyYXlfZnJvbShzZXQpO1xyXG5cdFx0XHRpZiAoIW1ha2VyLmxlbmd0aCkgcmV0dXJuOyAvLyBjb25mdXNhYmxlIGludGVyc2VjdGlvbiBpcyBlbXB0eVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c2hhcmVkLnB1c2goY3ApOyBcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKG1ha2VyKSB7XHJcblx0XHQvLyB3ZSBoYXZlIDErIGNvbmZ1c2FibGVcclxuXHRcdC8vIGNoZWNrIGlmIGFueSBvZiB0aGUgcmVtYWluaW5nIGdyb3Vwc1xyXG5cdFx0Ly8gY29udGFpbiB0aGUgc2hhcmVkIGNoYXJhY3RlcnMgdG9vXHJcblx0XHRmb3IgKGxldCBnIG9mIG1ha2VyKSB7XHJcblx0XHRcdGlmIChzaGFyZWQuZXZlcnkoY3AgPT4gZ3JvdXBfaGFzX2NwKGcsIGNwKSkpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYHdob2xlLXNjcmlwdCBjb25mdXNhYmxlOiAke2dyb3VwLk59LyR7Zy5OfWApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG4vLyBhc3N1bXB0aW9uOiB1bmlxdWUuc2l6ZSA+IDBcclxuLy8gcmV0dXJucyBsaXN0IG9mIG1hdGNoaW5nIGdyb3Vwc1xyXG5mdW5jdGlvbiBkZXRlcm1pbmVfZ3JvdXAodW5pcXVlKSB7XHJcblx0bGV0IGdyb3VwcyA9IEdST1VQUztcclxuXHRmb3IgKGxldCBjcCBvZiB1bmlxdWUpIHtcclxuXHRcdC8vIG5vdGU6IHdlIG5lZWQgdG8gZG9kZ2UgQ00gdGhhdCBhcmUgd2hpdGVsaXN0ZWRcclxuXHRcdC8vIGJ1dCB0aGF0IGNvZGUgaXNuJ3QgY3VycmVudGx5IG5lY2Vzc2FyeVxyXG5cdFx0bGV0IGdzID0gZ3JvdXBzLmZpbHRlcihnID0+IGdyb3VwX2hhc19jcChnLCBjcCkpO1xyXG5cdFx0aWYgKCFncy5sZW5ndGgpIHtcclxuXHRcdFx0aWYgKCFHUk9VUFMuc29tZShnID0+IGdyb3VwX2hhc19jcChnLCBjcCkpKSB7IFxyXG5cdFx0XHRcdC8vIHRoZSBjaGFyYWN0ZXIgd2FzIGNvbXBvc2VkIG9mIHZhbGlkIHBhcnRzXHJcblx0XHRcdFx0Ly8gYnV0IGl0J3MgTkZDIGZvcm0gaXMgaW52YWxpZFxyXG5cdFx0XHRcdC8vIDIwMjMwNzE2OiBjaGFuZ2UgdG8gbW9yZSBleGFjdCBzdGF0ZW1lbnQsIHNlZTogRU5TTm9ybWFsaXplLntjcyxqYXZhfVxyXG5cdFx0XHRcdC8vIG5vdGU6IHRoaXMgZG9lc24ndCBoYXZlIHRvIGJlIGEgY29tcG9zaXRpb25cclxuXHRcdFx0XHQvLyAyMDIzMDcyMDogY2hhbmdlIHRvIGZ1bGwgY2hlY2tcclxuXHRcdFx0XHR0aHJvdyBlcnJvcl9kaXNhbGxvd2VkKGNwKTsgLy8gdGhpcyBzaG91bGQgYmUgcmFyZVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIHRoZXJlIGlzIG5vIGdyb3VwIHRoYXQgY29udGFpbnMgYWxsIHRoZXNlIGNoYXJhY3RlcnNcclxuXHRcdFx0XHQvLyB0aHJvdyB1c2luZyB0aGUgaGlnaGVzdCBwcmlvcml0eSBncm91cCB0aGF0IG1hdGNoZWRcclxuXHRcdFx0XHQvLyBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzkvI21peGVkX3NjcmlwdF9jb25mdXNhYmxlc1xyXG5cdFx0XHRcdHRocm93IGVycm9yX2dyb3VwX21lbWJlcihncm91cHNbMF0sIGNwKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Z3JvdXBzID0gZ3M7XHJcblx0XHRpZiAoZ3MubGVuZ3RoID09IDEpIGJyZWFrOyAvLyB0aGVyZSBpcyBvbmx5IG9uZSBncm91cCBsZWZ0XHJcblx0fVxyXG5cdC8vIHRoZXJlIGFyZSBhdCBsZWFzdCAxIGdyb3VwKHMpIHdpdGggYWxsIG9mIHRoZXNlIGNoYXJhY3RlcnNcclxuXHRyZXR1cm4gZ3JvdXBzO1xyXG59XHJcblxyXG4vLyB0aHJvdyBvbiBmaXJzdCBlcnJvclxyXG5mdW5jdGlvbiBmbGF0dGVuKHNwbGl0KSB7XHJcblx0cmV0dXJuIHNwbGl0Lm1hcCgoe2lucHV0LCBlcnJvciwgb3V0cHV0fSkgPT4ge1xyXG5cdFx0aWYgKGVycm9yKSB7XHJcblx0XHRcdC8vIGRvbid0IHByaW50IGxhYmVsIGFnYWluIGlmIGp1c3QgYSBzaW5nbGUgbGFiZWxcclxuXHRcdFx0bGV0IG1zZyA9IGVycm9yLm1lc3NhZ2U7XHJcblx0XHRcdC8vIGJpZGlfcXEoKSBvbmx5IG5lY2Vzc2FyeSBpZiBtc2cgaXMgZGlnaXRzXHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihzcGxpdC5sZW5ndGggPT0gMSA/IG1zZyA6IGBJbnZhbGlkIGxhYmVsICR7YmlkaV9xcShzYWZlX3N0cl9mcm9tX2NwcyhpbnB1dCwgNjMpKX06ICR7bXNnfWApOyBcclxuXHRcdH1cclxuXHRcdHJldHVybiBzdHJfZnJvbV9jcHMob3V0cHV0KTtcclxuXHR9KS5qb2luKFNUT1BfQ0gpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBlcnJvcl9kaXNhbGxvd2VkKGNwKSB7XHJcblx0Ly8gVE9ETzogYWRkIGNwIHRvIGVycm9yP1xyXG5cdHJldHVybiBuZXcgRXJyb3IoYGRpc2FsbG93ZWQgY2hhcmFjdGVyOiAke3F1b3RlZF9jcChjcCl9YCk7IFxyXG59XHJcbmZ1bmN0aW9uIGVycm9yX2dyb3VwX21lbWJlcihnLCBjcCkge1xyXG5cdGxldCBxdW90ZWQgPSBxdW90ZWRfY3AoY3ApO1xyXG5cdGxldCBnZyA9IEdST1VQUy5maW5kKGcgPT4gZy5QLmhhcyhjcCkpOyAvLyBvbmx5IGNoZWNrIHByaW1hcnlcclxuXHRpZiAoZ2cpIHtcclxuXHRcdHF1b3RlZCA9IGAke2dnLk59ICR7cXVvdGVkfWA7XHJcblx0fVxyXG5cdHJldHVybiBuZXcgRXJyb3IoYGlsbGVnYWwgbWl4dHVyZTogJHtnLk59ICsgJHtxdW90ZWR9YCk7XHJcbn1cclxuZnVuY3Rpb24gZXJyb3JfcGxhY2VtZW50KHdoZXJlKSB7XHJcblx0cmV0dXJuIG5ldyBFcnJvcihgaWxsZWdhbCBwbGFjZW1lbnQ6ICR7d2hlcmV9YCk7XHJcbn1cclxuXHJcbi8vIGFzc3VtcHRpb246IGNwcy5sZW5ndGggPiAwXHJcbi8vIGFzc3VtcHRpb246IGNwc1swXSBpc24ndCBhIENNXHJcbi8vIGFzc3VtcHRpb246IHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgaXNuJ3QgYW4gZW1vamlcclxuZnVuY3Rpb24gY2hlY2tfZ3JvdXAoZywgY3BzKSB7XHJcblx0Zm9yIChsZXQgY3Agb2YgY3BzKSB7XHJcblx0XHRpZiAoIWdyb3VwX2hhc19jcChnLCBjcCkpIHtcclxuXHRcdFx0Ly8gZm9yIHdoaXRlbGlzdGVkIHNjcmlwdHMsIHRoaXMgd2lsbCB0aHJvdyBpbGxlZ2FsIG1peHR1cmUgb24gaW52YWxpZCBjbSwgZWcuIFwiZXszMDB9ezMwMH1cIlxyXG5cdFx0XHQvLyBhdCB0aGUgbW9tZW50LCBpdCdzIHVubmVjZXNzYXJ5IHRvIGludHJvZHVjZSBhbiBleHRyYSBlcnJvciB0eXBlXHJcblx0XHRcdC8vIHVudGlsIHRoZXJlIGV4aXN0cyBhIHdoaXRlbGlzdGVkIG11bHRpLWNoYXJhY3RlclxyXG5cdFx0XHQvLyAgIGVnLiBpZiAoTSA8IDAgJiYgaXNfY29tYmluaW5nX21hcmsoY3ApKSB7IC4uLiB9XHJcblx0XHRcdC8vIHRoZXJlIGFyZSAzIGNhc2VzOlxyXG5cdFx0XHQvLyAgIDEuIGlsbGVnYWwgY20gZm9yIHdyb25nIGdyb3VwID0+IG1peHR1cmUgZXJyb3JcclxuXHRcdFx0Ly8gICAyLiBpbGxlZ2FsIGNtIGZvciBzYW1lIGdyb3VwID0+IGNtIGVycm9yXHJcblx0XHRcdC8vICAgICAgIHJlcXVpcmVzIHNldCBvZiB3aGl0ZWxpc3QgY20gcGVyIGdyb3VwOiBcclxuXHRcdFx0Ly8gICAgICAgIGVnLiBuZXcgU2V0KFsuLi5nLlAsIC4uLmcuUV0uZmxhdE1hcChuZmMpLmZpbHRlcihjcCA9PiBDTS5oYXMoY3ApKSlcclxuXHRcdFx0Ly8gICAzLiB3cm9uZyBncm91cCA9PiBtaXh0dXJlIGVycm9yXHJcblx0XHRcdHRocm93IGVycm9yX2dyb3VwX21lbWJlcihnLCBjcCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdC8vaWYgKE0gPj0gMCkgeyAvLyB3ZSBoYXZlIGEga25vd24gZml4ZWQgY20gY291bnRcclxuXHRpZiAoZy5NKSB7IC8vIHdlIG5lZWQgdG8gY2hlY2sgZm9yIE5TTVxyXG5cdFx0bGV0IGRlY29tcG9zZWQgPSBuZmQoY3BzKTtcclxuXHRcdGZvciAobGV0IGkgPSAxLCBlID0gZGVjb21wb3NlZC5sZW5ndGg7IGkgPCBlOyBpKyspIHsgLy8gc2VlOiBhc3N1bXB0aW9uXHJcblx0XHRcdC8vIDIwMjMwMjEwOiBidWdmaXg6IHVzaW5nIGNwcyBpbnN0ZWFkIG9mIGRlY29tcG9zZWQgaC90IENhcmJvbjIyNVxyXG5cdFx0XHQvKlxyXG5cdFx0XHRpZiAoQ00uaGFzKGRlY29tcG9zZWRbaV0pKSB7XHJcblx0XHRcdFx0bGV0IGogPSBpICsgMTtcclxuXHRcdFx0XHR3aGlsZSAoaiA8IGUgJiYgQ00uaGFzKGRlY29tcG9zZWRbal0pKSBqKys7XHJcblx0XHRcdFx0aWYgKGogLSBpID4gTSkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGB0b28gbWFueSBjb21iaW5pbmcgbWFya3M6ICR7Zy5OfSAke2JpZGlfcXEoc3RyX2Zyb21fY3BzKGRlY29tcG9zZWQuc2xpY2UoaS0xLCBqKSkpfSAoJHtqLWl9LyR7TX0pYCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGkgPSBqO1xyXG5cdFx0XHR9XHJcblx0XHRcdCovXHJcblx0XHRcdC8vIDIwMjMwMjE3OiBzd2l0Y2ggdG8gTlNNIGNvdW50aW5nXHJcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzOS8jT3B0aW9uYWxfRGV0ZWN0aW9uXHJcblx0XHRcdGlmIChOU00uaGFzKGRlY29tcG9zZWRbaV0pKSB7XHJcblx0XHRcdFx0bGV0IGogPSBpICsgMTtcclxuXHRcdFx0XHRmb3IgKGxldCBjcDsgaiA8IGUgJiYgTlNNLmhhcyhjcCA9IGRlY29tcG9zZWRbal0pOyBqKyspIHtcclxuXHRcdFx0XHRcdC8vIGEuIEZvcmJpZCBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbm9uc3BhY2luZyBtYXJrLlxyXG5cdFx0XHRcdFx0Zm9yIChsZXQgayA9IGk7IGsgPCBqOyBrKyspIHsgLy8gTyhuXjIpIGJ1dCBuIDwgMTAwXHJcblx0XHRcdFx0XHRcdGlmIChkZWNvbXBvc2VkW2tdID09IGNwKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBkdXBsaWNhdGUgbm9uLXNwYWNpbmcgbWFya3M6ICR7cXVvdGVkX2NwKGNwKX1gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyBwYXJzZSB0byBlbmQgc28gd2UgaGF2ZSBmdWxsIG5zbSBjb3VudFxyXG5cdFx0XHRcdC8vIGIuIEZvcmJpZCBzZXF1ZW5jZXMgb2YgbW9yZSB0aGFuIDQgbm9uc3BhY2luZyBtYXJrcyAoZ2M9TW4gb3IgZ2M9TWUpLlxyXG5cdFx0XHRcdGlmIChqIC0gaSA+IE5TTV9NQVgpIHtcclxuXHRcdFx0XHRcdC8vIG5vdGU6IHRoaXMgc2xpY2Ugc3RhcnRzIHdpdGggYSBiYXNlIGNoYXIgb3Igc3BhY2luZy1tYXJrIGNtXHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYGV4Y2Vzc2l2ZSBub24tc3BhY2luZyBtYXJrczogJHtiaWRpX3FxKHNhZmVfc3RyX2Zyb21fY3BzKGRlY29tcG9zZWQuc2xpY2UoaS0xLCBqKSkpfSAoJHtqLWl9LyR7TlNNX01BWH0pYCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGkgPSBqO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdC8vICoqKiB0aGlzIGNvZGUgY3VycmVudGx5IGlzbid0IG5lZWRlZCAqKipcclxuXHQvKlxyXG5cdGxldCBjbV93aGl0ZWxpc3QgPSBNIGluc3RhbmNlb2YgTWFwO1xyXG5cdGZvciAobGV0IGkgPSAwLCBlID0gY3BzLmxlbmd0aDsgaSA8IGU7ICkge1xyXG5cdFx0bGV0IGNwID0gY3BzW2krK107XHJcblx0XHRsZXQgc2VxcyA9IGNtX3doaXRlbGlzdCAmJiBNLmdldChjcCk7XHJcblx0XHRpZiAoc2VxcykgeyBcclxuXHRcdFx0Ly8gbGlzdCBvZiBjb2RlcG9pbnRzIHRoYXQgY2FuIGZvbGxvd1xyXG5cdFx0XHQvLyBpZiB0aGlzIGV4aXN0cywgdGhpcyB3aWxsIGFsd2F5cyBiZSAxK1xyXG5cdFx0XHRsZXQgaiA9IGk7XHJcblx0XHRcdHdoaWxlIChqIDwgZSAmJiBDTS5oYXMoY3BzW2pdKSkgaisrO1xyXG5cdFx0XHRsZXQgY21zID0gY3BzLnNsaWNlKGksIGopO1xyXG5cdFx0XHRsZXQgbWF0Y2ggPSBzZXFzLmZpbmQoc2VxID0+ICFjb21wYXJlX2FycmF5cyhzZXEsIGNtcykpO1xyXG5cdFx0XHRpZiAoIW1hdGNoKSB0aHJvdyBuZXcgRXJyb3IoYGRpc2FsbG93ZWQgY29tYmluaW5nIG1hcmsgc2VxdWVuY2U6IFwiJHtzYWZlX3N0cl9mcm9tX2NwcyhbY3AsIC4uLmNtc10pfVwiYCk7XHJcblx0XHRcdGkgPSBqO1xyXG5cdFx0fSBlbHNlIGlmICghVi5oYXMoY3ApKSB7XHJcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzOS8jbWl4ZWRfc2NyaXB0X2NvbmZ1c2FibGVzXHJcblx0XHRcdGxldCBxdW90ZWQgPSBxdW90ZWRfY3AoY3ApO1xyXG5cdFx0XHRmb3IgKGxldCBjcCBvZiBjcHMpIHtcclxuXHRcdFx0XHRsZXQgdSA9IFVOSVFVRS5nZXQoY3ApO1xyXG5cdFx0XHRcdGlmICh1ICYmIHUgIT09IGcpIHtcclxuXHRcdFx0XHRcdC8vIGlmIGJvdGggc2NyaXB0cyBhcmUgcmVzdHJpY3RlZCB0aGlzIGVycm9yIGlzIGNvbmZ1c2luZ1xyXG5cdFx0XHRcdFx0Ly8gYmVjYXVzZSB3ZSBkb24ndCBkaWZmZXJlbnRpYXRlIFJlc3RyaWN0ZWRBIGZyb20gUmVzdHJpY3RlZEIgXHJcblx0XHRcdFx0XHRpZiAoIXUuUikgcXVvdGVkID0gYCR7cXVvdGVkfSBpcyAke3UuTn1gO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihgZGlzYWxsb3dlZCAke2cuTn0gY2hhcmFjdGVyOiAke3F1b3RlZH1gKTtcclxuXHRcdFx0Ly90aHJvdyBuZXcgRXJyb3IoYGRpc2FsbG93ZWQgY2hhcmFjdGVyOiAke3F1b3RlZH0gKGV4cGVjdGVkICR7Zy5OfSlgKTtcclxuXHRcdFx0Ly90aHJvdyBuZXcgRXJyb3IoYCR7Zy5OfSBkb2VzIG5vdCBhbGxvdzogJHtxdW90ZWR9YCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmICghY21fd2hpdGVsaXN0KSB7XHJcblx0XHRsZXQgZGVjb21wb3NlZCA9IG5mZChjcHMpO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDEsIGUgPSBkZWNvbXBvc2VkLmxlbmd0aDsgaSA8IGU7IGkrKykgeyAvLyB3ZSBrbm93IGl0IGNhbid0IGJlIGNtIGxlYWRpbmdcclxuXHRcdFx0aWYgKENNLmhhcyhkZWNvbXBvc2VkW2ldKSkge1xyXG5cdFx0XHRcdGxldCBqID0gaSArIDE7XHJcblx0XHRcdFx0d2hpbGUgKGogPCBlICYmIENNLmhhcyhkZWNvbXBvc2VkW2pdKSkgaisrO1xyXG5cdFx0XHRcdGlmIChqIC0gaSA+IE0pIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihgdG9vIG1hbnkgY29tYmluaW5nIG1hcmtzOiBcIiR7c3RyX2Zyb21fY3BzKGRlY29tcG9zZWQuc2xpY2UoaS0xLCBqKSl9XCIgKCR7ai1pfS8ke019KWApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpID0gajtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHQqL1xyXG59XHJcblxyXG4vLyBnaXZlbiBhIGxpc3Qgb2YgY29kZXBvaW50c1xyXG4vLyByZXR1cm5zIGEgbGlzdCBvZiBsaXN0cywgd2hlcmUgZW1vamkgYXJlIGEgZnVsbHktcXVhbGlmaWVkIChhcyBBcnJheSBzdWJjbGFzcylcclxuLy8gZWcuIGV4cGxvZGVfY3AoXCJhYmPwn5KpZFwiKSA9PiBbWzYxLCA2MiwgNjNdLCBFbW9qaVsxRjRBOSwgRkUwRl0sIFs2NF1dXHJcbi8vIDIwMjMwODE4OiByZW5hbWUgZm9yICdwcm9jZXNzJyBuYW1lIGNvbGxpc2lvbiBoL3QgSmF2YXJvbWVcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FkcmFmZnkvZW5zLW5vcm1hbGl6ZS5qcy9pc3N1ZXMvMjNcclxuZnVuY3Rpb24gdG9rZW5zX2Zyb21fc3RyKGlucHV0LCBuZiwgZWYpIHtcclxuXHRsZXQgcmV0ID0gW107XHJcblx0bGV0IGNoYXJzID0gW107XHJcblx0aW5wdXQgPSBpbnB1dC5zbGljZSgpLnJldmVyc2UoKTsgLy8gZmxpcCBzbyB3ZSBjYW4gcG9wXHJcblx0d2hpbGUgKGlucHV0Lmxlbmd0aCkge1xyXG5cdFx0bGV0IGVtb2ppID0gY29uc3VtZV9lbW9qaV9yZXZlcnNlZChpbnB1dCk7XHJcblx0XHRpZiAoZW1vamkpIHtcclxuXHRcdFx0aWYgKGNoYXJzLmxlbmd0aCkge1xyXG5cdFx0XHRcdHJldC5wdXNoKG5mKGNoYXJzKSk7XHJcblx0XHRcdFx0Y2hhcnMgPSBbXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXQucHVzaChlZihlbW9qaSkpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bGV0IGNwID0gaW5wdXQucG9wKCk7XHJcblx0XHRcdGlmIChWQUxJRC5oYXMoY3ApKSB7XHJcblx0XHRcdFx0Y2hhcnMucHVzaChjcCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bGV0IGNwcyA9IE1BUFBFRC5nZXQoY3ApO1xyXG5cdFx0XHRcdGlmIChjcHMpIHtcclxuXHRcdFx0XHRcdGNoYXJzLnB1c2goLi4uY3BzKTsgLy8gbGVzcyB0aGFuIDEwIGVsZW1lbnRzXHJcblx0XHRcdFx0fSBlbHNlIGlmICghSUdOT1JFRC5oYXMoY3ApKSB7XHJcblx0XHRcdFx0XHQvLyAyMDIzMDkxMjogdW5pY29kZSAxNS4xIGNoYW5nZWQgdGhlIG9yZGVyIG9mIHByb2Nlc3Npbmcgc3VjaCB0aGF0XHJcblx0XHRcdFx0XHQvLyBkaXNhbGxvd2VkIHBhcnRzIGFyZSBvbmx5IHJlamVjdGVkIGFmdGVyIE5GQ1xyXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly91bmljb2RlLm9yZy9yZXBvcnRzL3RyNDYvI1ZhbGlkaXR5X0NyaXRlcmlhXHJcblx0XHRcdFx0XHQvLyB0aGlzIGRvZXNuJ3QgaW1wYWN0IG5vcm1hbGl6YXRpb24gYXMgb2YgdG9kYXlcclxuXHRcdFx0XHRcdC8vIHRlY2huaWNhbGx5LCB0aGlzIGVycm9yIGNhbiBiZSByZW1vdmVkIGFzIHRoZSBncm91cCBsb2dpYyB3aWxsIGFwcGx5IHNpbWlsYXIgbG9naWNcclxuXHRcdFx0XHRcdC8vIGhvd2V2ZXIgdGhlIGVycm9yIHR5cGUgbWlnaHQgYmUgbGVzcyBjbGVhclxyXG5cdFx0XHRcdFx0dGhyb3cgZXJyb3JfZGlzYWxsb3dlZChjcCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmIChjaGFycy5sZW5ndGgpIHtcclxuXHRcdHJldC5wdXNoKG5mKGNoYXJzKSk7XHJcblx0fVxyXG5cdHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbHRlcl9mZTBmKGNwcykge1xyXG5cdHJldHVybiBjcHMuZmlsdGVyKGNwID0+IGNwICE9IEZFMEYpO1xyXG59XHJcblxyXG4vLyBnaXZlbiBhcnJheSBvZiBjb2RlcG9pbnRzXHJcbi8vIHJldHVybnMgdGhlIGxvbmdlc3QgdmFsaWQgZW1vamkgc2VxdWVuY2UgKG9yIHVuZGVmaW5lZCBpZiBubyBtYXRjaClcclxuLy8gKk1VVEFURVMqIHRoZSBzdXBwbGllZCBhcnJheVxyXG4vLyBkaXNhbGxvd3MgaW50ZXJsZWF2ZWQgaWdub3JlZCBjaGFyYWN0ZXJzXHJcbi8vIGZpbGxzIChvcHRpb25hbCkgZWF0ZW4gYXJyYXkgd2l0aCBtYXRjaGVkIGNvZGVwb2ludHNcclxuZnVuY3Rpb24gY29uc3VtZV9lbW9qaV9yZXZlcnNlZChjcHMsIGVhdGVuKSB7XHJcblx0bGV0IG5vZGUgPSBFTU9KSV9ST09UO1xyXG5cdGxldCBlbW9qaTtcclxuXHRsZXQgcG9zID0gY3BzLmxlbmd0aDtcclxuXHR3aGlsZSAocG9zKSB7XHJcblx0XHRub2RlID0gbm9kZS5nZXQoY3BzWy0tcG9zXSk7XHJcblx0XHRpZiAoIW5vZGUpIGJyZWFrO1xyXG5cdFx0bGV0IHtWfSA9IG5vZGU7XHJcblx0XHRpZiAoVikgeyAvLyB0aGlzIGlzIGEgdmFsaWQgZW1vamkgKHNvIGZhcilcclxuXHRcdFx0ZW1vamkgPSBWO1xyXG5cdFx0XHRpZiAoZWF0ZW4pIGVhdGVuLnB1c2goLi4uY3BzLnNsaWNlKHBvcykucmV2ZXJzZSgpKTsgLy8gKG9wdGlvbmFsKSBjb3B5IGlucHV0LCB1c2VkIGZvciBlbnNfdG9rZW5pemUoKVxyXG5cdFx0XHRjcHMubGVuZ3RoID0gcG9zOyAvLyB0cnVuY2F0ZVxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gZW1vamk7XHJcbn1cclxuXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyB0b2tlbml6ZXIgXHJcblxyXG5jb25zdCBUWV9WQUxJRCA9ICd2YWxpZCc7XHJcbmNvbnN0IFRZX01BUFBFRCA9ICdtYXBwZWQnO1xyXG5jb25zdCBUWV9JR05PUkVEID0gJ2lnbm9yZWQnO1xyXG5jb25zdCBUWV9ESVNBTExPV0VEID0gJ2Rpc2FsbG93ZWQnO1xyXG5jb25zdCBUWV9FTU9KSSA9ICdlbW9qaSc7XHJcbmNvbnN0IFRZX05GQyA9ICduZmMnO1xyXG5jb25zdCBUWV9TVE9QID0gJ3N0b3AnO1xyXG5cclxuZnVuY3Rpb24gZW5zX3Rva2VuaXplKG5hbWUsIHtcclxuXHRuZiA9IHRydWUsIC8vIGNvbGxhcHNlIHVubm9ybWFsaXplZCBydW5zIGludG8gYSBzaW5nbGUgdG9rZW5cclxufSA9IHt9KSB7XHJcblx0aW5pdCgpO1xyXG5cdGxldCBpbnB1dCA9IGV4cGxvZGVfY3AobmFtZSkucmV2ZXJzZSgpO1xyXG5cdGxldCBlYXRlbiA9IFtdO1xyXG5cdGxldCB0b2tlbnMgPSBbXTtcclxuXHR3aGlsZSAoaW5wdXQubGVuZ3RoKSB7XHJcblx0XHRsZXQgZW1vamkgPSBjb25zdW1lX2Vtb2ppX3JldmVyc2VkKGlucHV0LCBlYXRlbik7XHJcblx0XHRpZiAoZW1vamkpIHtcclxuXHRcdFx0dG9rZW5zLnB1c2goe1xyXG5cdFx0XHRcdHR5cGU6IFRZX0VNT0pJLFxyXG5cdFx0XHRcdGVtb2ppOiBlbW9qaS5zbGljZSgpLCAvLyBjb3B5IGVtb2ppXHJcblx0XHRcdFx0aW5wdXQ6IGVhdGVuLFxyXG5cdFx0XHRcdGNwczogZmlsdGVyX2ZlMGYoZW1vamkpXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRlYXRlbiA9IFtdOyAvLyByZXNldCBidWZmZXJcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGxldCBjcCA9IGlucHV0LnBvcCgpO1xyXG5cdFx0XHRpZiAoY3AgPT0gU1RPUCkge1xyXG5cdFx0XHRcdHRva2Vucy5wdXNoKHt0eXBlOiBUWV9TVE9QLCBjcH0pO1xyXG5cdFx0XHR9IGVsc2UgaWYgKFZBTElELmhhcyhjcCkpIHtcclxuXHRcdFx0XHR0b2tlbnMucHVzaCh7dHlwZTogVFlfVkFMSUQsIGNwczogW2NwXX0pO1xyXG5cdFx0XHR9IGVsc2UgaWYgKElHTk9SRUQuaGFzKGNwKSkge1xyXG5cdFx0XHRcdHRva2Vucy5wdXNoKHt0eXBlOiBUWV9JR05PUkVELCBjcH0pO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGxldCBjcHMgPSBNQVBQRUQuZ2V0KGNwKTtcclxuXHRcdFx0XHRpZiAoY3BzKSB7XHJcblx0XHRcdFx0XHR0b2tlbnMucHVzaCh7dHlwZTogVFlfTUFQUEVELCBjcCwgY3BzOiBjcHMuc2xpY2UoKX0pO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0b2tlbnMucHVzaCh7dHlwZTogVFlfRElTQUxMT1dFRCwgY3B9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKG5mKSB7XHJcblx0XHRmb3IgKGxldCBpID0gMCwgc3RhcnQgPSAtMTsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRsZXQgdG9rZW4gPSB0b2tlbnNbaV07XHJcblx0XHRcdGlmIChpc192YWxpZF9vcl9tYXBwZWQodG9rZW4udHlwZSkpIHtcclxuXHRcdFx0XHRpZiAocmVxdWlyZXNfY2hlY2sodG9rZW4uY3BzKSkgeyAvLyBub3JtYWxpemF0aW9uIG1pZ2h0IGJlIG5lZWRlZFxyXG5cdFx0XHRcdFx0bGV0IGVuZCA9IGkgKyAxO1xyXG5cdFx0XHRcdFx0Zm9yIChsZXQgcG9zID0gZW5kOyBwb3MgPCB0b2tlbnMubGVuZ3RoOyBwb3MrKykgeyAvLyBmaW5kIGFkamFjZW50IHRleHRcclxuXHRcdFx0XHRcdFx0bGV0IHt0eXBlLCBjcHN9ID0gdG9rZW5zW3Bvc107XHJcblx0XHRcdFx0XHRcdGlmIChpc192YWxpZF9vcl9tYXBwZWQodHlwZSkpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIXJlcXVpcmVzX2NoZWNrKGNwcykpIGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdGVuZCA9IHBvcyArIDE7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZSAhPT0gVFlfSUdOT1JFRCkgeyAvLyB8fCB0eXBlICE9PSBUWV9ESVNBTExPV0VEKSB7IFxyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoc3RhcnQgPCAwKSBzdGFydCA9IGk7XHJcblx0XHRcdFx0XHRsZXQgc2xpY2UgPSB0b2tlbnMuc2xpY2Uoc3RhcnQsIGVuZCk7XHJcblx0XHRcdFx0XHRsZXQgY3BzMCA9IHNsaWNlLmZsYXRNYXAoeCA9PiBpc192YWxpZF9vcl9tYXBwZWQoeC50eXBlKSA/IHguY3BzIDogW10pOyAvLyBzdHJpcCBqdW5rIHRva2Vuc1xyXG5cdFx0XHRcdFx0bGV0IGNwcyA9IG5mYyhjcHMwKTtcclxuXHRcdFx0XHRcdGlmIChjb21wYXJlX2FycmF5cyhjcHMsIGNwczApKSB7IC8vIGJ1bmRsZSBpbnRvIGFuIG5mYyB0b2tlblxyXG5cdFx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCwge1xyXG5cdFx0XHRcdFx0XHRcdHR5cGU6IFRZX05GQywgXHJcblx0XHRcdFx0XHRcdFx0aW5wdXQ6IGNwczAsIC8vIHRoZXJlIGFyZSAzIHN0YXRlczogdG9rZW5zMCA9PShwcm9jZXNzKT0+IGlucHV0ID09KG5mYyk9PiB0b2tlbnMvY3BzXHJcblx0XHRcdFx0XHRcdFx0Y3BzLCBcclxuXHRcdFx0XHRcdFx0XHR0b2tlbnMwOiBjb2xsYXBzZV92YWxpZF90b2tlbnMoc2xpY2UpLFxyXG5cdFx0XHRcdFx0XHRcdHRva2VuczogZW5zX3Rva2VuaXplKHN0cl9mcm9tX2NwcyhjcHMpLCB7bmY6IGZhbHNlfSlcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdGkgPSBzdGFydDtcclxuXHRcdFx0XHRcdH0gZWxzZSB7IFxyXG5cdFx0XHRcdFx0XHRpID0gZW5kIC0gMTsgLy8gc2tpcCB0byBlbmQgb2Ygc2xpY2VcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHN0YXJ0ID0gLTE7IC8vIHJlc2V0XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHN0YXJ0ID0gaTsgLy8gcmVtZW1iZXIgbGFzdFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIGlmICh0b2tlbi50eXBlICE9PSBUWV9JR05PUkVEKSB7IC8vIDIwMjIxMDI0OiBpcyB0aGlzIGNvcnJlY3Q/XHJcblx0XHRcdFx0c3RhcnQgPSAtMTsgLy8gcmVzZXRcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gY29sbGFwc2VfdmFsaWRfdG9rZW5zKHRva2Vucyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzX3ZhbGlkX29yX21hcHBlZCh0eXBlKSB7XHJcblx0cmV0dXJuIHR5cGUgPT0gVFlfVkFMSUQgfHwgdHlwZSA9PSBUWV9NQVBQRUQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlcXVpcmVzX2NoZWNrKGNwcykge1xyXG5cdHJldHVybiBjcHMuc29tZShjcCA9PiBORkNfQ0hFQ0suaGFzKGNwKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbGxhcHNlX3ZhbGlkX3Rva2Vucyh0b2tlbnMpIHtcclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xyXG5cdFx0aWYgKHRva2Vuc1tpXS50eXBlID09IFRZX1ZBTElEKSB7XHJcblx0XHRcdGxldCBqID0gaSArIDE7XHJcblx0XHRcdHdoaWxlIChqIDwgdG9rZW5zLmxlbmd0aCAmJiB0b2tlbnNbal0udHlwZSA9PSBUWV9WQUxJRCkgaisrO1xyXG5cdFx0XHR0b2tlbnMuc3BsaWNlKGksIGogLSBpLCB7dHlwZTogVFlfVkFMSUQsIGNwczogdG9rZW5zLnNsaWNlKGksIGopLmZsYXRNYXAoeCA9PiB4LmNwcyl9KTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIHRva2VucztcclxufVxuXG5leHBvcnQgeyBlbnNfYmVhdXRpZnksIGVuc19lbW9qaSwgZW5zX25vcm1hbGl6ZSwgZW5zX25vcm1hbGl6ZV9mcmFnbWVudCwgZW5zX3NwbGl0LCBlbnNfdG9rZW5pemUsIGlzX2NvbWJpbmluZ19tYXJrLCBuZmMsIG5mZCwgc2FmZV9zdHJfZnJvbV9jcHMsIHNob3VsZF9lc2NhcGUgfTtcbiIsImltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gXCIuLi9jcnlwdG8vaW5kZXguanNcIjtcbmltcG9ydCB7IGNvbmNhdCwgaGV4bGlmeSwgYXNzZXJ0QXJndW1lbnQsIHRvVXRmOEJ5dGVzIH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBlbnNfbm9ybWFsaXplIH0gZnJvbSBcIkBhZHJhZmZ5L2Vucy1ub3JtYWxpemVcIjtcbmNvbnN0IFplcm9zID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuWmVyb3MuZmlsbCgwKTtcbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50KGNvbXApIHtcbiAgICBhc3NlcnRBcmd1bWVudChjb21wLmxlbmd0aCAhPT0gMCwgXCJpbnZhbGlkIEVOUyBuYW1lOyBlbXB0eSBjb21wb25lbnRcIiwgXCJjb21wXCIsIGNvbXApO1xuICAgIHJldHVybiBjb21wO1xufVxuZnVuY3Rpb24gZW5zTmFtZVNwbGl0KG5hbWUpIHtcbiAgICBjb25zdCBieXRlcyA9IHRvVXRmOEJ5dGVzKGVuc05vcm1hbGl6ZShuYW1lKSk7XG4gICAgY29uc3QgY29tcHMgPSBbXTtcbiAgICBpZiAobmFtZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNvbXBzO1xuICAgIH1cbiAgICBsZXQgbGFzdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBkID0gYnl0ZXNbaV07XG4gICAgICAgIC8vIEEgc2VwYXJhdG9yIChpLmUuIFwiLlwiKTsgY29weSB0aGlzIGNvbXBvbmVudFxuICAgICAgICBpZiAoZCA9PT0gMHgyZSkge1xuICAgICAgICAgICAgY29tcHMucHVzaChjaGVja0NvbXBvbmVudChieXRlcy5zbGljZShsYXN0LCBpKSkpO1xuICAgICAgICAgICAgbGFzdCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFRoZXJlIHdhcyBhIHN0cmF5IHNlcGFyYXRvciBhdCB0aGUgZW5kIG9mIHRoZSBuYW1lXG4gICAgYXNzZXJ0QXJndW1lbnQobGFzdCA8IGJ5dGVzLmxlbmd0aCwgXCJpbnZhbGlkIEVOUyBuYW1lOyBlbXB0eSBjb21wb25lbnRcIiwgXCJuYW1lXCIsIG5hbWUpO1xuICAgIGNvbXBzLnB1c2goY2hlY2tDb21wb25lbnQoYnl0ZXMuc2xpY2UobGFzdCkpKTtcbiAgICByZXR1cm4gY29tcHM7XG59XG4vKipcbiAqICBSZXR1cm5zIHRoZSBFTlMgJSVuYW1lJSUgbm9ybWFsaXplZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuc05vcm1hbGl6ZShuYW1lKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKG5hbWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlbXB0eSBsYWJlbFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW5zX25vcm1hbGl6ZShuYW1lKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBgaW52YWxpZCBFTlMgbmFtZSAoJHtlcnJvci5tZXNzYWdlfSlgLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgfVxufVxuLyoqXG4gKiAgUmV0dXJucyBgYHRydWVgYCBpZiAlJW5hbWUlJSBpcyBhIHZhbGlkIEVOUyBuYW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZE5hbWUobmFtZSkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiAoZW5zTmFtZVNwbGl0KG5hbWUpLmxlbmd0aCAhPT0gMCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiAgUmV0dXJucyB0aGUgW1tsaW5rLW5hbWVoYXNoXV0gZm9yICUlbmFtZSUlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbmFtZWhhc2gobmFtZSkge1xuICAgIGFzc2VydEFyZ3VtZW50KHR5cGVvZiAobmFtZSkgPT09IFwic3RyaW5nXCIsIFwiaW52YWxpZCBFTlMgbmFtZTsgbm90IGEgc3RyaW5nXCIsIFwibmFtZVwiLCBuYW1lKTtcbiAgICBhc3NlcnRBcmd1bWVudChuYW1lLmxlbmd0aCwgYGludmFsaWQgRU5TIG5hbWUgKGVtcHR5IGxhYmVsKWAsIFwibmFtZVwiLCBuYW1lKTtcbiAgICBsZXQgcmVzdWx0ID0gWmVyb3M7XG4gICAgY29uc3QgY29tcHMgPSBlbnNOYW1lU3BsaXQobmFtZSk7XG4gICAgd2hpbGUgKGNvbXBzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBrZWNjYWsyNTYoY29uY2F0KFtyZXN1bHQsIGtlY2NhazI1NigoY29tcHMucG9wKCkpKV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGhleGxpZnkocmVzdWx0KTtcbn1cbi8qKlxuICogIFJldHVybnMgdGhlIEROUyBlbmNvZGVkICUlbmFtZSUlLlxuICpcbiAqICBUaGlzIGlzIHVzZWQgZm9yIHZhcmlvdXMgcGFydHMgb2YgRU5TIG5hbWUgcmVzb2x1dGlvbiwgc3VjaFxuICogIGFzIHRoZSB3aWxkY2FyZCByZXNvbHV0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZG5zRW5jb2RlKG5hbWUsIF9tYXhMZW5ndGgpIHtcbiAgICBjb25zdCBsZW5ndGggPSAoX21heExlbmd0aCAhPSBudWxsKSA/IF9tYXhMZW5ndGggOiA2MztcbiAgICBhc3NlcnRBcmd1bWVudChsZW5ndGggPD0gMjU1LCBcIkROUyBlbmNvZGVkIGxhYmVsIGNhbm5vdCBleGNlZWQgMjU1XCIsIFwibGVuZ3RoXCIsIGxlbmd0aCk7XG4gICAgcmV0dXJuIGhleGxpZnkoY29uY2F0KGVuc05hbWVTcGxpdChuYW1lKS5tYXAoKGNvbXApID0+IHtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoY29tcC5sZW5ndGggPD0gbGVuZ3RoLCBgbGFiZWwgJHtKU09OLnN0cmluZ2lmeShuYW1lKX0gZXhjZWVkcyAke2xlbmd0aH0gYnl0ZXNgLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoY29tcC5sZW5ndGggKyAxKTtcbiAgICAgICAgYnl0ZXMuc2V0KGNvbXAsIDEpO1xuICAgICAgICBieXRlc1swXSA9IGJ5dGVzLmxlbmd0aCAtIDE7XG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICB9KSkpICsgXCIwMFwiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmFtZWhhc2guanMubWFwIiwiLyoqXG4gKiAgQSBjb25zdGFudCBmb3IgdGhlIHplcm8gaGFzaC5cbiAqXG4gKiAgKCoqaS5lLioqIGBgXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcImBgKVxuICovXG5leHBvcnQgY29uc3QgWmVyb0hhc2ggPSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzaGVzLmpzLm1hcCIsImltcG9ydCB7IFplcm9IYXNoIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY29uY2F0LCBkYXRhTGVuZ3RoLCBnZXRCaWdJbnQsIGdldEJ5dGVzLCBnZXROdW1iZXIsIGhleGxpZnksIHRvQmVBcnJheSwgaXNIZXhTdHJpbmcsIHplcm9QYWRWYWx1ZSwgYXNzZXJ0QXJndW1lbnQsIGFzc2VydFByaXZhdGUgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbi8vIENvbnN0YW50c1xuY29uc3QgQk5fMCA9IEJpZ0ludCgwKTtcbmNvbnN0IEJOXzEgPSBCaWdJbnQoMSk7XG5jb25zdCBCTl8yID0gQmlnSW50KDIpO1xuY29uc3QgQk5fMjcgPSBCaWdJbnQoMjcpO1xuY29uc3QgQk5fMjggPSBCaWdJbnQoMjgpO1xuY29uc3QgQk5fMzUgPSBCaWdJbnQoMzUpO1xuY29uc3QgX2d1YXJkID0ge307XG5mdW5jdGlvbiB0b1VpbnQyNTYodmFsdWUpIHtcbiAgICByZXR1cm4gemVyb1BhZFZhbHVlKHRvQmVBcnJheSh2YWx1ZSksIDMyKTtcbn1cbi8qKlxuICogIEEgU2lnbmF0dXJlICBAVE9ET1xuICpcbiAqXG4gKiAgQF9kb2Nsb2M6IGFwaS9jcnlwdG86U2lnbmluZ1xuICovXG5leHBvcnQgY2xhc3MgU2lnbmF0dXJlIHtcbiAgICAjcjtcbiAgICAjcztcbiAgICAjdjtcbiAgICAjbmV0d29ya1Y7XG4gICAgLyoqXG4gICAgICogIFRoZSBgYHJgYCB2YWx1ZSBmb3IgYSBzaWduYXV0cmUuXG4gICAgICpcbiAgICAgKiAgVGhpcyByZXByZXNlbnRzIHRoZSBgYHhgYCBjb29yZGluYXRlIG9mIGEgXCJyZWZlcmVuY2VcIiBvclxuICAgICAqICBjaGFsbGVuZ2UgcG9pbnQsIGZyb20gd2hpY2ggdGhlIGBgeWBgIGNhbiBiZSBjb21wdXRlZC5cbiAgICAgKi9cbiAgICBnZXQgcigpIHsgcmV0dXJuIHRoaXMuI3I7IH1cbiAgICBzZXQgcih2YWx1ZSkge1xuICAgICAgICBhc3NlcnRBcmd1bWVudChkYXRhTGVuZ3RoKHZhbHVlKSA9PT0gMzIsIFwiaW52YWxpZCByXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB0aGlzLiNyID0gaGV4bGlmeSh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgYGBzYGAgdmFsdWUgZm9yIGEgc2lnbmF0dXJlLlxuICAgICAqL1xuICAgIGdldCBzKCkgeyByZXR1cm4gdGhpcy4jczsgfVxuICAgIHNldCBzKF92YWx1ZSkge1xuICAgICAgICBhc3NlcnRBcmd1bWVudChkYXRhTGVuZ3RoKF92YWx1ZSkgPT09IDMyLCBcImludmFsaWQgc1wiLCBcInZhbHVlXCIsIF92YWx1ZSk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaGV4bGlmeShfdmFsdWUpO1xuICAgICAgICBhc3NlcnRBcmd1bWVudChwYXJzZUludCh2YWx1ZS5zdWJzdHJpbmcoMCwgMykpIDwgOCwgXCJub24tY2Fub25pY2FsIHNcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuI3MgPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBgYHZgYCB2YWx1ZSBmb3IgYSBzaWduYXR1cmUuXG4gICAgICpcbiAgICAgKiAgU2luY2UgYSBnaXZlbiBgYHhgYCB2YWx1ZSBmb3IgYGByYGAgaGFzIHR3byBwb3NzaWJsZSB2YWx1ZXMgZm9yXG4gICAgICogIGl0cyBjb3JyZXNwb25kaW4gYGB5YGAsIHRoZSBgYHZgYCBpbmRpY2F0ZXMgd2hpY2ggb2YgdGhlIHR3byBgYHlgYFxuICAgICAqICB2YWx1ZXMgdG8gdXNlLlxuICAgICAqXG4gICAgICogIEl0IGlzIG5vcm1hbGl6ZWQgdG8gdGhlIHZhbHVlcyBgYDI3YGAgb3IgYGAyOGBgIGZvciBsZWdhY3lcbiAgICAgKiAgcHVycG9zZXMuXG4gICAgICovXG4gICAgZ2V0IHYoKSB7IHJldHVybiB0aGlzLiN2OyB9XG4gICAgc2V0IHYodmFsdWUpIHtcbiAgICAgICAgY29uc3QgdiA9IGdldE51bWJlcih2YWx1ZSwgXCJ2YWx1ZVwiKTtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQodiA9PT0gMjcgfHwgdiA9PT0gMjgsIFwiaW52YWxpZCB2XCIsIFwidlwiLCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuI3YgPSB2O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIEVJUC0xNTUgYGB2YGAgZm9yIGxlZ2FjeSB0cmFuc2FjdGlvbnMuIEZvciBub24tbGVnYWN5XG4gICAgICogIHRyYW5zYWN0aW9ucywgdGhpcyB2YWx1ZSBpcyBgYG51bGxgYC5cbiAgICAgKi9cbiAgICBnZXQgbmV0d29ya1YoKSB7IHJldHVybiB0aGlzLiNuZXR3b3JrVjsgfVxuICAgIC8qKlxuICAgICAqICBUaGUgY2hhaW4gSUQgZm9yIEVJUC0xNTUgbGVnYWN5IHRyYW5zYWN0aW9ucy4gRm9yIG5vbi1sZWdhY3lcbiAgICAgKiAgdHJhbnNhY3Rpb25zLCB0aGlzIHZhbHVlIGlzIGBgbnVsbGBgLlxuICAgICAqL1xuICAgIGdldCBsZWdhY3lDaGFpbklkKCkge1xuICAgICAgICBjb25zdCB2ID0gdGhpcy5uZXR3b3JrVjtcbiAgICAgICAgaWYgKHYgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNpZ25hdHVyZS5nZXRDaGFpbklkKHYpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIGBgeVBhcml0eWBgIGZvciB0aGUgc2lnbmF0dXJlLlxuICAgICAqXG4gICAgICogIFNlZSBgYHZgYCBmb3IgbW9yZSBkZXRhaWxzIG9uIGhvdyB0aGlzIHZhbHVlIGlzIHVzZWQuXG4gICAgICovXG4gICAgZ2V0IHlQYXJpdHkoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy52ID09PSAyNykgPyAwIDogMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBbW2xpbmstZWlwLTIwOThdXSBjb21wYWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBgYHlQYXJpdHlgYFxuICAgICAqICBhbmQgYGBzYGAgY29tcGFjdGVkIGludG8gYSBzaW5nbGUgYGBieXRlczMyYGAuXG4gICAgICovXG4gICAgZ2V0IHlQYXJpdHlBbmRTKCkge1xuICAgICAgICAvLyBUaGUgRUlQLTIwOTggY29tcGFjdCByZXByZXNlbnRhdGlvblxuICAgICAgICBjb25zdCB5UGFyaXR5QW5kUyA9IGdldEJ5dGVzKHRoaXMucyk7XG4gICAgICAgIGlmICh0aGlzLnlQYXJpdHkpIHtcbiAgICAgICAgICAgIHlQYXJpdHlBbmRTWzBdIHw9IDB4ODA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhleGxpZnkoeVBhcml0eUFuZFMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIFtbbGluay1laXAtMjA5OF1dIGNvbXBhY3QgcmVwcmVzZW50YXRpb24uXG4gICAgICovXG4gICAgZ2V0IGNvbXBhY3RTZXJpYWxpemVkKCkge1xuICAgICAgICByZXR1cm4gY29uY2F0KFt0aGlzLnIsIHRoaXMueVBhcml0eUFuZFNdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBzZXJpYWxpemVkIHJlcHJlc2VudGF0aW9uLlxuICAgICAqL1xuICAgIGdldCBzZXJpYWxpemVkKCkge1xuICAgICAgICByZXR1cm4gY29uY2F0KFt0aGlzLnIsIHRoaXMucywgKHRoaXMueVBhcml0eSA/IFwiMHgxY1wiIDogXCIweDFiXCIpXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGd1YXJkLCByLCBzLCB2KSB7XG4gICAgICAgIGFzc2VydFByaXZhdGUoZ3VhcmQsIF9ndWFyZCwgXCJTaWduYXR1cmVcIik7XG4gICAgICAgIHRoaXMuI3IgPSByO1xuICAgICAgICB0aGlzLiNzID0gcztcbiAgICAgICAgdGhpcy4jdiA9IHY7XG4gICAgICAgIHRoaXMuI25ldHdvcmtWID0gbnVsbDtcbiAgICB9XG4gICAgW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldKCkge1xuICAgICAgICByZXR1cm4gYFNpZ25hdHVyZSB7IHI6IFwiJHt0aGlzLnJ9XCIsIHM6IFwiJHt0aGlzLnN9XCIsIHlQYXJpdHk6ICR7dGhpcy55UGFyaXR5fSwgbmV0d29ya1Y6ICR7dGhpcy5uZXR3b3JrVn0gfWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGEgbmV3IGlkZW50aWNhbCBbW1NpZ25hdHVyZV1dLlxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBjbG9uZSA9IG5ldyBTaWduYXR1cmUoX2d1YXJkLCB0aGlzLnIsIHRoaXMucywgdGhpcy52KTtcbiAgICAgICAgaWYgKHRoaXMubmV0d29ya1YpIHtcbiAgICAgICAgICAgIGNsb25lLiNuZXR3b3JrViA9IHRoaXMubmV0d29ya1Y7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIHJlcHJlc2VudGF0aW9uIHRoYXQgaXMgY29tcGF0aWJsZSB3aXRoIGBgSlNPTi5zdHJpbmdpZnlgYC5cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IG5ldHdvcmtWID0gdGhpcy5uZXR3b3JrVjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF90eXBlOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgbmV0d29ya1Y6ICgobmV0d29ya1YgIT0gbnVsbCkgPyBuZXR3b3JrVi50b1N0cmluZygpIDogbnVsbCksXG4gICAgICAgICAgICByOiB0aGlzLnIsIHM6IHRoaXMucywgdjogdGhpcy52LFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ29tcHV0ZSB0aGUgY2hhaW4gSUQgZnJvbSB0aGUgYGB2YGAgaW4gYSBsZWdhY3kgRUlQLTE1NSB0cmFuc2FjdGlvbnMuXG4gICAgICpcbiAgICAgKiAgQGV4YW1wbGU6XG4gICAgICogICAgU2lnbmF0dXJlLmdldENoYWluSWQoNDUpXG4gICAgICogICAgLy9fcmVzdWx0OlxuICAgICAqXG4gICAgICogICAgU2lnbmF0dXJlLmdldENoYWluSWQoNDYpXG4gICAgICogICAgLy9fcmVzdWx0OlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRDaGFpbklkKHYpIHtcbiAgICAgICAgY29uc3QgYnYgPSBnZXRCaWdJbnQodiwgXCJ2XCIpO1xuICAgICAgICAvLyBUaGUgdiBpcyBub3QgYW4gRUlQLTE1NSB2LCBzbyBpdCBpcyB0aGUgdW5zcGVjaWZpZWQgY2hhaW4gSURcbiAgICAgICAgaWYgKChidiA9PSBCTl8yNykgfHwgKGJ2ID09IEJOXzI4KSkge1xuICAgICAgICAgICAgcmV0dXJuIEJOXzA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQmFkIHZhbHVlIGZvciBhbiBFSVAtMTU1IHZcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoYnYgPj0gQk5fMzUsIFwiaW52YWxpZCBFSVAtMTU1IHZcIiwgXCJ2XCIsIHYpO1xuICAgICAgICByZXR1cm4gKGJ2IC0gQk5fMzUpIC8gQk5fMjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIENvbXB1dGUgdGhlIGBgdmBgIGZvciBhIGNoYWluIElEIGZvciBhIGxlZ2FjeSBFSVAtMTU1IHRyYW5zYWN0aW9ucy5cbiAgICAgKlxuICAgICAqICBMZWdhY3kgdHJhbnNhY3Rpb25zIHdoaWNoIHVzZSBbW2xpbmstZWlwLTE1NV1dIGhpamFjayB0aGUgYGB2YGBcbiAgICAgKiAgcHJvcGVydHkgdG8gaW5jbHVkZSB0aGUgY2hhaW4gSUQuXG4gICAgICpcbiAgICAgKiAgQGV4YW1wbGU6XG4gICAgICogICAgU2lnbmF0dXJlLmdldENoYWluSWRWKDUsIDI3KVxuICAgICAqICAgIC8vX3Jlc3VsdDpcbiAgICAgKlxuICAgICAqICAgIFNpZ25hdHVyZS5nZXRDaGFpbklkVig1LCAyOClcbiAgICAgKiAgICAvL19yZXN1bHQ6XG4gICAgICpcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0Q2hhaW5JZFYoY2hhaW5JZCwgdikge1xuICAgICAgICByZXR1cm4gKGdldEJpZ0ludChjaGFpbklkKSAqIEJOXzIpICsgQmlnSW50KDM1ICsgdiAtIDI3KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIENvbXB1dGUgdGhlIG5vcm1hbGl6ZWQgbGVnYWN5IHRyYW5zYWN0aW9uIGBgdmBgIGZyb20gYSBgYHlQYXJpcnR5YGAsXG4gICAgICogIGEgbGVnYWN5IHRyYW5zYWN0aW9uIGBgdmBgIG9yIGEgbGVnYWN5IFtbbGluay1laXAtMTU1XV0gdHJhbnNhY3Rpb24uXG4gICAgICpcbiAgICAgKiAgQGV4YW1wbGU6XG4gICAgICogICAgLy8gVGhlIHZhbHVlcyAwIGFuZCAxIGltcGx5IHYgaXMgYWN0dWFsbHkgeVBhcml0eVxuICAgICAqICAgIFNpZ25hdHVyZS5nZXROb3JtYWxpemVkVigwKVxuICAgICAqICAgIC8vX3Jlc3VsdDpcbiAgICAgKlxuICAgICAqICAgIC8vIExlZ2FjeSBub24tRUlQLTE1NTkgdHJhbnNhY3Rpb24gKGkuZS4gMjcgb3IgMjgpXG4gICAgICogICAgU2lnbmF0dXJlLmdldE5vcm1hbGl6ZWRWKDI3KVxuICAgICAqICAgIC8vX3Jlc3VsdDpcbiAgICAgKlxuICAgICAqICAgIC8vIExlZ2FjeSBFSVAtMTU1IHRyYW5zYWN0aW9uIChpLmUuID49IDM1KVxuICAgICAqICAgIFNpZ25hdHVyZS5nZXROb3JtYWxpemVkVig0NilcbiAgICAgKiAgICAvL19yZXN1bHQ6XG4gICAgICpcbiAgICAgKiAgICAvLyBJbnZhbGlkIHZhbHVlcyB0aHJvd1xuICAgICAqICAgIFNpZ25hdHVyZS5nZXROb3JtYWxpemVkVig1KVxuICAgICAqICAgIC8vX2Vycm9yOlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXROb3JtYWxpemVkVih2KSB7XG4gICAgICAgIGNvbnN0IGJ2ID0gZ2V0QmlnSW50KHYpO1xuICAgICAgICBpZiAoYnYgPT09IEJOXzAgfHwgYnYgPT09IEJOXzI3KSB7XG4gICAgICAgICAgICByZXR1cm4gMjc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ2ID09PSBCTl8xIHx8IGJ2ID09PSBCTl8yOCkge1xuICAgICAgICAgICAgcmV0dXJuIDI4O1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGJ2ID49IEJOXzM1LCBcImludmFsaWQgdlwiLCBcInZcIiwgdik7XG4gICAgICAgIC8vIE90aGVyd2lzZSwgRUlQLTE1NSB2IG1lYW5zIG9kZCBpcyAyNyBhbmQgZXZlbiBpcyAyOFxuICAgICAgICByZXR1cm4gKGJ2ICYgQk5fMSkgPyAyNyA6IDI4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyBbW1NpZ25hdHVyZV1dLlxuICAgICAqXG4gICAgICogIElmIG5vICUlc2lnJSUgaXMgcHJvdmlkZWQsIGEgbmV3IFtbU2lnbmF0dXJlXV0gaXMgY3JlYXRlZFxuICAgICAqICB3aXRoIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogIElmICUlc2lnJSUgaXMgYSBzdHJpbmcsIGl0IGlzIHBhcnNlZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbShzaWcpIHtcbiAgICAgICAgZnVuY3Rpb24gYXNzZXJ0RXJyb3IoY2hlY2ssIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGNoZWNrLCBtZXNzYWdlLCBcInNpZ25hdHVyZVwiLCBzaWcpO1xuICAgICAgICB9XG4gICAgICAgIDtcbiAgICAgICAgaWYgKHNpZyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNpZ25hdHVyZShfZ3VhcmQsIFplcm9IYXNoLCBaZXJvSGFzaCwgMjcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKHNpZykgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gZ2V0Qnl0ZXMoc2lnLCBcInNpZ25hdHVyZVwiKTtcbiAgICAgICAgICAgIGlmIChieXRlcy5sZW5ndGggPT09IDY0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IGhleGxpZnkoYnl0ZXMuc2xpY2UoMCwgMzIpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gYnl0ZXMuc2xpY2UoMzIsIDY0KTtcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gKHNbMF0gJiAweDgwKSA/IDI4IDogMjc7XG4gICAgICAgICAgICAgICAgc1swXSAmPSAweDdmO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKF9ndWFyZCwgciwgaGV4bGlmeShzKSwgdik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoID09PSA2NSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBoZXhsaWZ5KGJ5dGVzLnNsaWNlKDAsIDMyKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGJ5dGVzLnNsaWNlKDMyLCA2NCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0RXJyb3IoKHNbMF0gJiAweDgwKSA9PT0gMCwgXCJub24tY2Fub25pY2FsIHNcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgdiA9IFNpZ25hdHVyZS5nZXROb3JtYWxpemVkVihieXRlc1s2NF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKF9ndWFyZCwgciwgaGV4bGlmeShzKSwgdik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3NlcnRFcnJvcihmYWxzZSwgXCJpbnZhbGlkIHJhdyBzaWduYXR1cmUgbGVuZ3RoXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaWcgaW5zdGFuY2VvZiBTaWduYXR1cmUpIHtcbiAgICAgICAgICAgIHJldHVybiBzaWcuY2xvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBHZXQgclxuICAgICAgICBjb25zdCBfciA9IHNpZy5yO1xuICAgICAgICBhc3NlcnRFcnJvcihfciAhPSBudWxsLCBcIm1pc3NpbmcgclwiKTtcbiAgICAgICAgY29uc3QgciA9IHRvVWludDI1Nihfcik7XG4gICAgICAgIC8vIEdldCBzOyBieSBhbnkgbWVhbnMgbmVjZXNzYXJ5ICh3ZSBjaGVjayBjb25zaXN0ZW5jeSBiZWxvdylcbiAgICAgICAgY29uc3QgcyA9IChmdW5jdGlvbiAocywgeVBhcml0eUFuZFMpIHtcbiAgICAgICAgICAgIGlmIChzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9VaW50MjU2KHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHlQYXJpdHlBbmRTICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRFcnJvcihpc0hleFN0cmluZyh5UGFyaXR5QW5kUywgMzIpLCBcImludmFsaWQgeVBhcml0eUFuZFNcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBnZXRCeXRlcyh5UGFyaXR5QW5kUyk7XG4gICAgICAgICAgICAgICAgYnl0ZXNbMF0gJj0gMHg3ZjtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGV4bGlmeShieXRlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3NlcnRFcnJvcihmYWxzZSwgXCJtaXNzaW5nIHNcIik7XG4gICAgICAgIH0pKHNpZy5zLCBzaWcueVBhcml0eUFuZFMpO1xuICAgICAgICBhc3NlcnRFcnJvcigoZ2V0Qnl0ZXMocylbMF0gJiAweDgwKSA9PSAwLCBcIm5vbi1jYW5vbmljYWwgc1wiKTtcbiAgICAgICAgLy8gR2V0IHY7IGJ5IGFueSBtZWFucyBuZWNlc3NhcnkgKHdlIGNoZWNrIGNvbnNpc3RlbmN5IGJlbG93KVxuICAgICAgICBjb25zdCB7IG5ldHdvcmtWLCB2IH0gPSAoZnVuY3Rpb24gKF92LCB5UGFyaXR5QW5kUywgeVBhcml0eSkge1xuICAgICAgICAgICAgaWYgKF92ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gZ2V0QmlnSW50KF92KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBuZXR3b3JrVjogKCh2ID49IEJOXzM1KSA/IHYgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgICAgICB2OiBTaWduYXR1cmUuZ2V0Tm9ybWFsaXplZFYodilcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHlQYXJpdHlBbmRTICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRFcnJvcihpc0hleFN0cmluZyh5UGFyaXR5QW5kUywgMzIpLCBcImludmFsaWQgeVBhcml0eUFuZFNcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdjogKChnZXRCeXRlcyh5UGFyaXR5QW5kUylbMF0gJiAweDgwKSA/IDI4IDogMjcpIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeVBhcml0eSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChnZXROdW1iZXIoeVBhcml0eSwgXCJzaWcueVBhcml0eVwiKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiB7IHY6IDI3IH07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIHsgdjogMjggfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXNzZXJ0RXJyb3IoZmFsc2UsIFwiaW52YWxpZCB5UGFyaXR5XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXNzZXJ0RXJyb3IoZmFsc2UsIFwibWlzc2luZyB2XCIpO1xuICAgICAgICB9KShzaWcudiwgc2lnLnlQYXJpdHlBbmRTLCBzaWcueVBhcml0eSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTaWduYXR1cmUoX2d1YXJkLCByLCBzLCB2KTtcbiAgICAgICAgaWYgKG5ldHdvcmtWKSB7XG4gICAgICAgICAgICByZXN1bHQuI25ldHdvcmtWID0gbmV0d29ya1Y7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgbXVsdGlwbGUgb2YgdiwgeVBhcml0eSwgeVBhcml0eUFuZFMgd2UgZ2l2ZW4sIGNoZWNrIHRoZXkgbWF0Y2hcbiAgICAgICAgYXNzZXJ0RXJyb3Ioc2lnLnlQYXJpdHkgPT0gbnVsbCB8fCBnZXROdW1iZXIoc2lnLnlQYXJpdHksIFwic2lnLnlQYXJpdHlcIikgPT09IHJlc3VsdC55UGFyaXR5LCBcInlQYXJpdHkgbWlzbWF0Y2hcIik7XG4gICAgICAgIGFzc2VydEVycm9yKHNpZy55UGFyaXR5QW5kUyA9PSBudWxsIHx8IHNpZy55UGFyaXR5QW5kUyA9PT0gcmVzdWx0LnlQYXJpdHlBbmRTLCBcInlQYXJpdHlBbmRTIG1pc21hdGNoXCIpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25hdHVyZS5qcy5tYXAiLCJpbXBvcnQgeyBleGlzdHMsIG91dHB1dCB9IGZyb20gJy4vX2Fzc2VydC5qcyc7XG5pbXBvcnQgeyBIYXNoLCBjcmVhdGVWaWV3LCB0b0J5dGVzIH0gZnJvbSAnLi91dGlscy5qcyc7XG4vLyBQb2x5ZmlsbCBmb3IgU2FmYXJpIDE0XG5mdW5jdGlvbiBzZXRCaWdVaW50NjQodmlldywgYnl0ZU9mZnNldCwgdmFsdWUsIGlzTEUpIHtcbiAgICBpZiAodHlwZW9mIHZpZXcuc2V0QmlnVWludDY0ID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gdmlldy5zZXRCaWdVaW50NjQoYnl0ZU9mZnNldCwgdmFsdWUsIGlzTEUpO1xuICAgIGNvbnN0IF8zMm4gPSBCaWdJbnQoMzIpO1xuICAgIGNvbnN0IF91MzJfbWF4ID0gQmlnSW50KDB4ZmZmZmZmZmYpO1xuICAgIGNvbnN0IHdoID0gTnVtYmVyKCh2YWx1ZSA+PiBfMzJuKSAmIF91MzJfbWF4KTtcbiAgICBjb25zdCB3bCA9IE51bWJlcih2YWx1ZSAmIF91MzJfbWF4KTtcbiAgICBjb25zdCBoID0gaXNMRSA/IDQgOiAwO1xuICAgIGNvbnN0IGwgPSBpc0xFID8gMCA6IDQ7XG4gICAgdmlldy5zZXRVaW50MzIoYnl0ZU9mZnNldCArIGgsIHdoLCBpc0xFKTtcbiAgICB2aWV3LnNldFVpbnQzMihieXRlT2Zmc2V0ICsgbCwgd2wsIGlzTEUpO1xufVxuLy8gQmFzZSBTSEEyIGNsYXNzIChSRkMgNjIzNClcbmV4cG9ydCBjbGFzcyBTSEEyIGV4dGVuZHMgSGFzaCB7XG4gICAgY29uc3RydWN0b3IoYmxvY2tMZW4sIG91dHB1dExlbiwgcGFkT2Zmc2V0LCBpc0xFKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYmxvY2tMZW4gPSBibG9ja0xlbjtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRoaXMucGFkT2Zmc2V0ID0gcGFkT2Zmc2V0O1xuICAgICAgICB0aGlzLmlzTEUgPSBpc0xFO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGJsb2NrTGVuKTtcbiAgICAgICAgdGhpcy52aWV3ID0gY3JlYXRlVmlldyh0aGlzLmJ1ZmZlcik7XG4gICAgfVxuICAgIHVwZGF0ZShkYXRhKSB7XG4gICAgICAgIGV4aXN0cyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyB2aWV3LCBidWZmZXIsIGJsb2NrTGVuIH0gPSB0aGlzO1xuICAgICAgICBkYXRhID0gdG9CeXRlcyhkYXRhKTtcbiAgICAgICAgY29uc3QgbGVuID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IGxlbjspIHtcbiAgICAgICAgICAgIGNvbnN0IHRha2UgPSBNYXRoLm1pbihibG9ja0xlbiAtIHRoaXMucG9zLCBsZW4gLSBwb3MpO1xuICAgICAgICAgICAgLy8gRmFzdCBwYXRoOiB3ZSBoYXZlIGF0IGxlYXN0IG9uZSBibG9jayBpbiBpbnB1dCwgY2FzdCBpdCB0byB2aWV3IGFuZCBwcm9jZXNzXG4gICAgICAgICAgICBpZiAodGFrZSA9PT0gYmxvY2tMZW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhVmlldyA9IGNyZWF0ZVZpZXcoZGF0YSk7XG4gICAgICAgICAgICAgICAgZm9yICg7IGJsb2NrTGVuIDw9IGxlbiAtIHBvczsgcG9zICs9IGJsb2NrTGVuKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MoZGF0YVZpZXcsIHBvcyk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIuc2V0KGRhdGEuc3ViYXJyYXkocG9zLCBwb3MgKyB0YWtlKSwgdGhpcy5wb3MpO1xuICAgICAgICAgICAgdGhpcy5wb3MgKz0gdGFrZTtcbiAgICAgICAgICAgIHBvcyArPSB0YWtlO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID09PSBibG9ja0xlbikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzcyh2aWV3LCAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIHRoaXMucm91bmRDbGVhbigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGlnZXN0SW50byhvdXQpIHtcbiAgICAgICAgZXhpc3RzKHRoaXMpO1xuICAgICAgICBvdXRwdXQob3V0LCB0aGlzKTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIC8vIFBhZGRpbmdcbiAgICAgICAgLy8gV2UgY2FuIGF2b2lkIGFsbG9jYXRpb24gb2YgYnVmZmVyIGZvciBwYWRkaW5nIGNvbXBsZXRlbHkgaWYgaXRcbiAgICAgICAgLy8gd2FzIHByZXZpb3VzbHkgbm90IGFsbG9jYXRlZCBoZXJlLiBCdXQgaXQgd29uJ3QgY2hhbmdlIHBlcmZvcm1hbmNlLlxuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgdmlldywgYmxvY2tMZW4sIGlzTEUgfSA9IHRoaXM7XG4gICAgICAgIGxldCB7IHBvcyB9ID0gdGhpcztcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBiaXQgJzEnIHRvIHRoZSBtZXNzYWdlXG4gICAgICAgIGJ1ZmZlcltwb3MrK10gPSAwYjEwMDAwMDAwO1xuICAgICAgICB0aGlzLmJ1ZmZlci5zdWJhcnJheShwb3MpLmZpbGwoMCk7XG4gICAgICAgIC8vIHdlIGhhdmUgbGVzcyB0aGFuIHBhZE9mZnNldCBsZWZ0IGluIGJ1ZmZlciwgc28gd2UgY2Fubm90IHB1dCBsZW5ndGggaW4gY3VycmVudCBibG9jaywgbmVlZCBwcm9jZXNzIGl0IGFuZCBwYWQgYWdhaW5cbiAgICAgICAgaWYgKHRoaXMucGFkT2Zmc2V0ID4gYmxvY2tMZW4gLSBwb3MpIHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzcyh2aWV3LCAwKTtcbiAgICAgICAgICAgIHBvcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUGFkIHVudGlsIGZ1bGwgYmxvY2sgYnl0ZSB3aXRoIHplcm9zXG4gICAgICAgIGZvciAobGV0IGkgPSBwb3M7IGkgPCBibG9ja0xlbjsgaSsrKVxuICAgICAgICAgICAgYnVmZmVyW2ldID0gMDtcbiAgICAgICAgLy8gTm90ZTogc2hhNTEyIHJlcXVpcmVzIGxlbmd0aCB0byBiZSAxMjhiaXQgaW50ZWdlciwgYnV0IGxlbmd0aCBpbiBKUyB3aWxsIG92ZXJmbG93IGJlZm9yZSB0aGF0XG4gICAgICAgIC8vIFlvdSBuZWVkIHRvIHdyaXRlIGFyb3VuZCAyIGV4YWJ5dGVzICh1NjRfbWF4IC8gOCAvICgxMDI0Kio2KSkgZm9yIHRoaXMgdG8gaGFwcGVuLlxuICAgICAgICAvLyBTbyB3ZSBqdXN0IHdyaXRlIGxvd2VzdCA2NCBiaXRzIG9mIHRoYXQgdmFsdWUuXG4gICAgICAgIHNldEJpZ1VpbnQ2NCh2aWV3LCBibG9ja0xlbiAtIDgsIEJpZ0ludCh0aGlzLmxlbmd0aCAqIDgpLCBpc0xFKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICBjb25zdCBvdmlldyA9IGNyZWF0ZVZpZXcob3V0KTtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5vdXRwdXRMZW47XG4gICAgICAgIC8vIE5PVEU6IHdlIGRvIGRpdmlzaW9uIGJ5IDQgbGF0ZXIsIHdoaWNoIHNob3VsZCBiZSBmdXNlZCBpbiBzaW5nbGUgb3Agd2l0aCBtb2R1bG8gYnkgSklUXG4gICAgICAgIGlmIChsZW4gJSA0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfc2hhMjogb3V0cHV0TGVuIHNob3VsZCBiZSBhbGlnbmVkIHRvIDMyYml0Jyk7XG4gICAgICAgIGNvbnN0IG91dExlbiA9IGxlbiAvIDQ7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXQoKTtcbiAgICAgICAgaWYgKG91dExlbiA+IHN0YXRlLmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignX3NoYTI6IG91dHB1dExlbiBiaWdnZXIgdGhhbiBzdGF0ZScpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dExlbjsgaSsrKVxuICAgICAgICAgICAgb3ZpZXcuc2V0VWludDMyKDQgKiBpLCBzdGF0ZVtpXSwgaXNMRSk7XG4gICAgfVxuICAgIGRpZ2VzdCgpIHtcbiAgICAgICAgY29uc3QgeyBidWZmZXIsIG91dHB1dExlbiB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5kaWdlc3RJbnRvKGJ1ZmZlcik7XG4gICAgICAgIGNvbnN0IHJlcyA9IGJ1ZmZlci5zbGljZSgwLCBvdXRwdXRMZW4pO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgX2Nsb25lSW50byh0bykge1xuICAgICAgICB0byB8fCAodG8gPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpKTtcbiAgICAgICAgdG8uc2V0KC4uLnRoaXMuZ2V0KCkpO1xuICAgICAgICBjb25zdCB7IGJsb2NrTGVuLCBidWZmZXIsIGxlbmd0aCwgZmluaXNoZWQsIGRlc3Ryb3llZCwgcG9zIH0gPSB0aGlzO1xuICAgICAgICB0by5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRvLnBvcyA9IHBvcztcbiAgICAgICAgdG8uZmluaXNoZWQgPSBmaW5pc2hlZDtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gZGVzdHJveWVkO1xuICAgICAgICBpZiAobGVuZ3RoICUgYmxvY2tMZW4pXG4gICAgICAgICAgICB0by5idWZmZXIuc2V0KGJ1ZmZlcik7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fc2hhMi5qcy5tYXAiLCJpbXBvcnQgeyBTSEEyIH0gZnJvbSAnLi9fc2hhMi5qcyc7XG5pbXBvcnQgeyByb3RyLCB3cmFwQ29uc3RydWN0b3IgfSBmcm9tICcuL3V0aWxzLmpzJztcbi8vIFNIQTItMjU2IG5lZWQgdG8gdHJ5IDJeMTI4IGhhc2hlcyB0byBleGVjdXRlIGJpcnRoZGF5IGF0dGFjay5cbi8vIEJUQyBuZXR3b3JrIGlzIGRvaW5nIDJeNjcgaGFzaGVzL3NlYyBhcyBwZXIgZWFybHkgMjAyMy5cbi8vIENob2ljZTogYSA/IGIgOiBjXG5jb25zdCBDaGkgPSAoYSwgYiwgYykgPT4gKGEgJiBiKSBeICh+YSAmIGMpO1xuLy8gTWFqb3JpdHkgZnVuY3Rpb24sIHRydWUgaWYgYW55IHR3byBpbnB1c3QgaXMgdHJ1ZVxuY29uc3QgTWFqID0gKGEsIGIsIGMpID0+IChhICYgYikgXiAoYSAmIGMpIF4gKGIgJiBjKTtcbi8vIFJvdW5kIGNvbnN0YW50czpcbi8vIGZpcnN0IDMyIGJpdHMgb2YgdGhlIGZyYWN0aW9uYWwgcGFydHMgb2YgdGhlIGN1YmUgcm9vdHMgb2YgdGhlIGZpcnN0IDY0IHByaW1lcyAyLi4zMTEpXG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IFNIQTI1Nl9LID0gLyogQF9fUFVSRV9fICovIG5ldyBVaW50MzJBcnJheShbXG4gICAgMHg0MjhhMmY5OCwgMHg3MTM3NDQ5MSwgMHhiNWMwZmJjZiwgMHhlOWI1ZGJhNSwgMHgzOTU2YzI1YiwgMHg1OWYxMTFmMSwgMHg5MjNmODJhNCwgMHhhYjFjNWVkNSxcbiAgICAweGQ4MDdhYTk4LCAweDEyODM1YjAxLCAweDI0MzE4NWJlLCAweDU1MGM3ZGMzLCAweDcyYmU1ZDc0LCAweDgwZGViMWZlLCAweDliZGMwNmE3LCAweGMxOWJmMTc0LFxuICAgIDB4ZTQ5YjY5YzEsIDB4ZWZiZTQ3ODYsIDB4MGZjMTlkYzYsIDB4MjQwY2ExY2MsIDB4MmRlOTJjNmYsIDB4NGE3NDg0YWEsIDB4NWNiMGE5ZGMsIDB4NzZmOTg4ZGEsXG4gICAgMHg5ODNlNTE1MiwgMHhhODMxYzY2ZCwgMHhiMDAzMjdjOCwgMHhiZjU5N2ZjNywgMHhjNmUwMGJmMywgMHhkNWE3OTE0NywgMHgwNmNhNjM1MSwgMHgxNDI5Mjk2NyxcbiAgICAweDI3YjcwYTg1LCAweDJlMWIyMTM4LCAweDRkMmM2ZGZjLCAweDUzMzgwZDEzLCAweDY1MGE3MzU0LCAweDc2NmEwYWJiLCAweDgxYzJjOTJlLCAweDkyNzIyYzg1LFxuICAgIDB4YTJiZmU4YTEsIDB4YTgxYTY2NGIsIDB4YzI0YjhiNzAsIDB4Yzc2YzUxYTMsIDB4ZDE5MmU4MTksIDB4ZDY5OTA2MjQsIDB4ZjQwZTM1ODUsIDB4MTA2YWEwNzAsXG4gICAgMHgxOWE0YzExNiwgMHgxZTM3NmMwOCwgMHgyNzQ4Nzc0YywgMHgzNGIwYmNiNSwgMHgzOTFjMGNiMywgMHg0ZWQ4YWE0YSwgMHg1YjljY2E0ZiwgMHg2ODJlNmZmMyxcbiAgICAweDc0OGY4MmVlLCAweDc4YTU2MzZmLCAweDg0Yzg3ODE0LCAweDhjYzcwMjA4LCAweDkwYmVmZmZhLCAweGE0NTA2Y2ViLCAweGJlZjlhM2Y3LCAweGM2NzE3OGYyXG5dKTtcbi8vIEluaXRpYWwgc3RhdGUgKGZpcnN0IDMyIGJpdHMgb2YgdGhlIGZyYWN0aW9uYWwgcGFydHMgb2YgdGhlIHNxdWFyZSByb290cyBvZiB0aGUgZmlyc3QgOCBwcmltZXMgMi4uMTkpOlxuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBJViA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVWludDMyQXJyYXkoW1xuICAgIDB4NmEwOWU2NjcsIDB4YmI2N2FlODUsIDB4M2M2ZWYzNzIsIDB4YTU0ZmY1M2EsIDB4NTEwZTUyN2YsIDB4OWIwNTY4OGMsIDB4MWY4M2Q5YWIsIDB4NWJlMGNkMTlcbl0pO1xuLy8gVGVtcG9yYXJ5IGJ1ZmZlciwgbm90IHVzZWQgdG8gc3RvcmUgYW55dGhpbmcgYmV0d2VlbiBydW5zXG4vLyBOYW1lZCB0aGlzIHdheSBiZWNhdXNlIGl0IG1hdGNoZXMgc3BlY2lmaWNhdGlvbi5cbmNvbnN0IFNIQTI1Nl9XID0gLyogQF9fUFVSRV9fICovIG5ldyBVaW50MzJBcnJheSg2NCk7XG5jbGFzcyBTSEEyNTYgZXh0ZW5kcyBTSEEyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoNjQsIDMyLCA4LCBmYWxzZSk7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB1c2UgYXJyYXkgaGVyZSBzaW5jZSBhcnJheSBhbGxvd3MgaW5kZXhpbmcgYnkgdmFyaWFibGVcbiAgICAgICAgLy8gd2hpY2ggbWVhbnMgb3B0aW1pemVyL2NvbXBpbGVyIGNhbm5vdCB1c2UgcmVnaXN0ZXJzLlxuICAgICAgICB0aGlzLkEgPSBJVlswXSB8IDA7XG4gICAgICAgIHRoaXMuQiA9IElWWzFdIHwgMDtcbiAgICAgICAgdGhpcy5DID0gSVZbMl0gfCAwO1xuICAgICAgICB0aGlzLkQgPSBJVlszXSB8IDA7XG4gICAgICAgIHRoaXMuRSA9IElWWzRdIHwgMDtcbiAgICAgICAgdGhpcy5GID0gSVZbNV0gfCAwO1xuICAgICAgICB0aGlzLkcgPSBJVls2XSB8IDA7XG4gICAgICAgIHRoaXMuSCA9IElWWzddIHwgMDtcbiAgICB9XG4gICAgZ2V0KCkge1xuICAgICAgICBjb25zdCB7IEEsIEIsIEMsIEQsIEUsIEYsIEcsIEggfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbQSwgQiwgQywgRCwgRSwgRiwgRywgSF07XG4gICAgfVxuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIHNldChBLCBCLCBDLCBELCBFLCBGLCBHLCBIKSB7XG4gICAgICAgIHRoaXMuQSA9IEEgfCAwO1xuICAgICAgICB0aGlzLkIgPSBCIHwgMDtcbiAgICAgICAgdGhpcy5DID0gQyB8IDA7XG4gICAgICAgIHRoaXMuRCA9IEQgfCAwO1xuICAgICAgICB0aGlzLkUgPSBFIHwgMDtcbiAgICAgICAgdGhpcy5GID0gRiB8IDA7XG4gICAgICAgIHRoaXMuRyA9IEcgfCAwO1xuICAgICAgICB0aGlzLkggPSBIIHwgMDtcbiAgICB9XG4gICAgcHJvY2Vzcyh2aWV3LCBvZmZzZXQpIHtcbiAgICAgICAgLy8gRXh0ZW5kIHRoZSBmaXJzdCAxNiB3b3JkcyBpbnRvIHRoZSByZW1haW5pbmcgNDggd29yZHMgd1sxNi4uNjNdIG9mIHRoZSBtZXNzYWdlIHNjaGVkdWxlIGFycmF5XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKywgb2Zmc2V0ICs9IDQpXG4gICAgICAgICAgICBTSEEyNTZfV1tpXSA9IHZpZXcuZ2V0VWludDMyKG9mZnNldCwgZmFsc2UpO1xuICAgICAgICBmb3IgKGxldCBpID0gMTY7IGkgPCA2NDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBXMTUgPSBTSEEyNTZfV1tpIC0gMTVdO1xuICAgICAgICAgICAgY29uc3QgVzIgPSBTSEEyNTZfV1tpIC0gMl07XG4gICAgICAgICAgICBjb25zdCBzMCA9IHJvdHIoVzE1LCA3KSBeIHJvdHIoVzE1LCAxOCkgXiAoVzE1ID4+PiAzKTtcbiAgICAgICAgICAgIGNvbnN0IHMxID0gcm90cihXMiwgMTcpIF4gcm90cihXMiwgMTkpIF4gKFcyID4+PiAxMCk7XG4gICAgICAgICAgICBTSEEyNTZfV1tpXSA9IChzMSArIFNIQTI1Nl9XW2kgLSA3XSArIHMwICsgU0hBMjU2X1dbaSAtIDE2XSkgfCAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbXByZXNzaW9uIGZ1bmN0aW9uIG1haW4gbG9vcCwgNjQgcm91bmRzXG4gICAgICAgIGxldCB7IEEsIEIsIEMsIEQsIEUsIEYsIEcsIEggfSA9IHRoaXM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc2lnbWExID0gcm90cihFLCA2KSBeIHJvdHIoRSwgMTEpIF4gcm90cihFLCAyNSk7XG4gICAgICAgICAgICBjb25zdCBUMSA9IChIICsgc2lnbWExICsgQ2hpKEUsIEYsIEcpICsgU0hBMjU2X0tbaV0gKyBTSEEyNTZfV1tpXSkgfCAwO1xuICAgICAgICAgICAgY29uc3Qgc2lnbWEwID0gcm90cihBLCAyKSBeIHJvdHIoQSwgMTMpIF4gcm90cihBLCAyMik7XG4gICAgICAgICAgICBjb25zdCBUMiA9IChzaWdtYTAgKyBNYWooQSwgQiwgQykpIHwgMDtcbiAgICAgICAgICAgIEggPSBHO1xuICAgICAgICAgICAgRyA9IEY7XG4gICAgICAgICAgICBGID0gRTtcbiAgICAgICAgICAgIEUgPSAoRCArIFQxKSB8IDA7XG4gICAgICAgICAgICBEID0gQztcbiAgICAgICAgICAgIEMgPSBCO1xuICAgICAgICAgICAgQiA9IEE7XG4gICAgICAgICAgICBBID0gKFQxICsgVDIpIHwgMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgdGhlIGNvbXByZXNzZWQgY2h1bmsgdG8gdGhlIGN1cnJlbnQgaGFzaCB2YWx1ZVxuICAgICAgICBBID0gKEEgKyB0aGlzLkEpIHwgMDtcbiAgICAgICAgQiA9IChCICsgdGhpcy5CKSB8IDA7XG4gICAgICAgIEMgPSAoQyArIHRoaXMuQykgfCAwO1xuICAgICAgICBEID0gKEQgKyB0aGlzLkQpIHwgMDtcbiAgICAgICAgRSA9IChFICsgdGhpcy5FKSB8IDA7XG4gICAgICAgIEYgPSAoRiArIHRoaXMuRikgfCAwO1xuICAgICAgICBHID0gKEcgKyB0aGlzLkcpIHwgMDtcbiAgICAgICAgSCA9IChIICsgdGhpcy5IKSB8IDA7XG4gICAgICAgIHRoaXMuc2V0KEEsIEIsIEMsIEQsIEUsIEYsIEcsIEgpO1xuICAgIH1cbiAgICByb3VuZENsZWFuKCkge1xuICAgICAgICBTSEEyNTZfVy5maWxsKDApO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnNldCgwLCAwLCAwLCAwLCAwLCAwLCAwLCAwKTtcbiAgICAgICAgdGhpcy5idWZmZXIuZmlsbCgwKTtcbiAgICB9XG59XG4vLyBDb25zdGFudHMgZnJvbSBodHRwczovL252bHB1YnMubmlzdC5nb3YvbmlzdHB1YnMvRklQUy9OSVNULkZJUFMuMTgwLTQucGRmXG5jbGFzcyBTSEEyMjQgZXh0ZW5kcyBTSEEyNTYge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLkEgPSAweGMxMDU5ZWQ4IHwgMDtcbiAgICAgICAgdGhpcy5CID0gMHgzNjdjZDUwNyB8IDA7XG4gICAgICAgIHRoaXMuQyA9IDB4MzA3MGRkMTcgfCAwO1xuICAgICAgICB0aGlzLkQgPSAweGY3MGU1OTM5IHwgMDtcbiAgICAgICAgdGhpcy5FID0gMHhmZmMwMGIzMSB8IDA7XG4gICAgICAgIHRoaXMuRiA9IDB4Njg1ODE1MTEgfCAwO1xuICAgICAgICB0aGlzLkcgPSAweDY0Zjk4ZmE3IHwgMDtcbiAgICAgICAgdGhpcy5IID0gMHhiZWZhNGZhNCB8IDA7XG4gICAgICAgIHRoaXMub3V0cHV0TGVuID0gMjg7XG4gICAgfVxufVxuLyoqXG4gKiBTSEEyLTI1NiBoYXNoIGZ1bmN0aW9uXG4gKiBAcGFyYW0gbWVzc2FnZSAtIGRhdGEgdGhhdCB3b3VsZCBiZSBoYXNoZWRcbiAqL1xuZXhwb3J0IGNvbnN0IHNoYTI1NiA9IC8qIEBfX1BVUkVfXyAqLyB3cmFwQ29uc3RydWN0b3IoKCkgPT4gbmV3IFNIQTI1NigpKTtcbmV4cG9ydCBjb25zdCBzaGEyMjQgPSAvKiBAX19QVVJFX18gKi8gd3JhcENvbnN0cnVjdG9yKCgpID0+IG5ldyBTSEEyMjQoKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGEyNTYuanMubWFwIiwiLyohIG5vYmxlLWN1cnZlcyAtIE1JVCBMaWNlbnNlIChjKSAyMDIyIFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuLy8gMTAwIGxpbmVzIG9mIGNvZGUgaW4gdGhlIGZpbGUgYXJlIGR1cGxpY2F0ZWQgZnJvbSBub2JsZS1oYXNoZXMgKHV0aWxzKS5cbi8vIFRoaXMgaXMgT0s6IGBhYnN0cmFjdGAgZGlyZWN0b3J5IGRvZXMgbm90IHVzZSBub2JsZS1oYXNoZXMuXG4vLyBVc2VyIG1heSBvcHQtaW4gaW50byB1c2luZyBkaWZmZXJlbnQgaGFzaGluZyBsaWJyYXJ5LiBUaGlzIHdheSwgbm9ibGUtaGFzaGVzXG4vLyB3b24ndCBiZSBpbmNsdWRlZCBpbnRvIHRoZWlyIGJ1bmRsZS5cbmNvbnN0IF8wbiA9IEJpZ0ludCgwKTtcbmNvbnN0IF8xbiA9IEJpZ0ludCgxKTtcbmNvbnN0IF8ybiA9IEJpZ0ludCgyKTtcbmNvbnN0IHU4YSA9IChhKSA9PiBhIGluc3RhbmNlb2YgVWludDhBcnJheTtcbmNvbnN0IGhleGVzID0gLyogQF9fUFVSRV9fICovIEFycmF5LmZyb20oeyBsZW5ndGg6IDI1NiB9LCAoXywgaSkgPT4gaS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSk7XG4vKipcbiAqIEBleGFtcGxlIGJ5dGVzVG9IZXgoVWludDhBcnJheS5mcm9tKFsweGNhLCAweGZlLCAweDAxLCAweDIzXSkpIC8vICdjYWZlMDEyMydcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVzVG9IZXgoYnl0ZXMpIHtcbiAgICBpZiAoIXU4YShieXRlcykpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVWludDhBcnJheSBleHBlY3RlZCcpO1xuICAgIC8vIHByZS1jYWNoaW5nIGltcHJvdmVzIHRoZSBzcGVlZCA2eFxuICAgIGxldCBoZXggPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGhleCArPSBoZXhlc1tieXRlc1tpXV07XG4gICAgfVxuICAgIHJldHVybiBoZXg7XG59XG5leHBvcnQgZnVuY3Rpb24gbnVtYmVyVG9IZXhVbnBhZGRlZChudW0pIHtcbiAgICBjb25zdCBoZXggPSBudW0udG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiBoZXgubGVuZ3RoICYgMSA/IGAwJHtoZXh9YCA6IGhleDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb051bWJlcihoZXgpIHtcbiAgICBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGV4IHN0cmluZyBleHBlY3RlZCwgZ290ICcgKyB0eXBlb2YgaGV4KTtcbiAgICAvLyBCaWcgRW5kaWFuXG4gICAgcmV0dXJuIEJpZ0ludChoZXggPT09ICcnID8gJzAnIDogYDB4JHtoZXh9YCk7XG59XG4vKipcbiAqIEBleGFtcGxlIGhleFRvQnl0ZXMoJ2NhZmUwMTIzJykgLy8gVWludDhBcnJheS5mcm9tKFsweGNhLCAweGZlLCAweDAxLCAweDIzXSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhleFRvQnl0ZXMoaGV4KSB7XG4gICAgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hleCBzdHJpbmcgZXhwZWN0ZWQsIGdvdCAnICsgdHlwZW9mIGhleCk7XG4gICAgY29uc3QgbGVuID0gaGV4Lmxlbmd0aDtcbiAgICBpZiAobGVuICUgMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwYWRkZWQgaGV4IHN0cmluZyBleHBlY3RlZCwgZ290IHVucGFkZGVkIGhleCBvZiBsZW5ndGggJyArIGxlbik7XG4gICAgY29uc3QgYXJyYXkgPSBuZXcgVWludDhBcnJheShsZW4gLyAyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGogPSBpICogMjtcbiAgICAgICAgY29uc3QgaGV4Qnl0ZSA9IGhleC5zbGljZShqLCBqICsgMik7XG4gICAgICAgIGNvbnN0IGJ5dGUgPSBOdW1iZXIucGFyc2VJbnQoaGV4Qnl0ZSwgMTYpO1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGJ5dGUpIHx8IGJ5dGUgPCAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJ5dGUgc2VxdWVuY2UnKTtcbiAgICAgICAgYXJyYXlbaV0gPSBieXRlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG4vLyBCRTogQmlnIEVuZGlhbiwgTEU6IExpdHRsZSBFbmRpYW5cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvTnVtYmVyQkUoYnl0ZXMpIHtcbiAgICByZXR1cm4gaGV4VG9OdW1iZXIoYnl0ZXNUb0hleChieXRlcykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVzVG9OdW1iZXJMRShieXRlcykge1xuICAgIGlmICghdThhKGJ5dGVzKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVaW50OEFycmF5IGV4cGVjdGVkJyk7XG4gICAgcmV0dXJuIGhleFRvTnVtYmVyKGJ5dGVzVG9IZXgoVWludDhBcnJheS5mcm9tKGJ5dGVzKS5yZXZlcnNlKCkpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBudW1iZXJUb0J5dGVzQkUobiwgbGVuKSB7XG4gICAgcmV0dXJuIGhleFRvQnl0ZXMobi50b1N0cmluZygxNikucGFkU3RhcnQobGVuICogMiwgJzAnKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbnVtYmVyVG9CeXRlc0xFKG4sIGxlbikge1xuICAgIHJldHVybiBudW1iZXJUb0J5dGVzQkUobiwgbGVuKS5yZXZlcnNlKCk7XG59XG4vLyBVbnBhZGRlZCwgcmFyZWx5IHVzZWRcbmV4cG9ydCBmdW5jdGlvbiBudW1iZXJUb1ZhckJ5dGVzQkUobikge1xuICAgIHJldHVybiBoZXhUb0J5dGVzKG51bWJlclRvSGV4VW5wYWRkZWQobikpO1xufVxuLyoqXG4gKiBUYWtlcyBoZXggc3RyaW5nIG9yIFVpbnQ4QXJyYXksIGNvbnZlcnRzIHRvIFVpbnQ4QXJyYXkuXG4gKiBWYWxpZGF0ZXMgb3V0cHV0IGxlbmd0aC5cbiAqIFdpbGwgdGhyb3cgZXJyb3IgZm9yIG90aGVyIHR5cGVzLlxuICogQHBhcmFtIHRpdGxlIGRlc2NyaXB0aXZlIHRpdGxlIGZvciBhbiBlcnJvciBlLmcuICdwcml2YXRlIGtleSdcbiAqIEBwYXJhbSBoZXggaGV4IHN0cmluZyBvciBVaW50OEFycmF5XG4gKiBAcGFyYW0gZXhwZWN0ZWRMZW5ndGggb3B0aW9uYWwsIHdpbGwgY29tcGFyZSB0byByZXN1bHQgYXJyYXkncyBsZW5ndGhcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVCeXRlcyh0aXRsZSwgaGV4LCBleHBlY3RlZExlbmd0aCkge1xuICAgIGxldCByZXM7XG4gICAgaWYgKHR5cGVvZiBoZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXMgPSBoZXhUb0J5dGVzKGhleCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aXRsZX0gbXVzdCBiZSB2YWxpZCBoZXggc3RyaW5nLCBnb3QgXCIke2hleH1cIi4gQ2F1c2U6ICR7ZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh1OGEoaGV4KSkge1xuICAgICAgICAvLyBVaW50OEFycmF5LmZyb20oKSBpbnN0ZWFkIG9mIGhhc2guc2xpY2UoKSBiZWNhdXNlIG5vZGUuanMgQnVmZmVyXG4gICAgICAgIC8vIGlzIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXksIGFuZCBpdHMgc2xpY2UoKSBjcmVhdGVzICoqbXV0YWJsZSoqIGNvcHlcbiAgICAgICAgcmVzID0gVWludDhBcnJheS5mcm9tKGhleCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGl0bGV9IG11c3QgYmUgaGV4IHN0cmluZyBvciBVaW50OEFycmF5YCk7XG4gICAgfVxuICAgIGNvbnN0IGxlbiA9IHJlcy5sZW5ndGg7XG4gICAgaWYgKHR5cGVvZiBleHBlY3RlZExlbmd0aCA9PT0gJ251bWJlcicgJiYgbGVuICE9PSBleHBlY3RlZExlbmd0aClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RpdGxlfSBleHBlY3RlZCAke2V4cGVjdGVkTGVuZ3RofSBieXRlcywgZ290ICR7bGVufWApO1xuICAgIHJldHVybiByZXM7XG59XG4vKipcbiAqIENvcGllcyBzZXZlcmFsIFVpbnQ4QXJyYXlzIGludG8gb25lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0Qnl0ZXMoLi4uYXJyYXlzKSB7XG4gICAgY29uc3QgciA9IG5ldyBVaW50OEFycmF5KGFycmF5cy5yZWR1Y2UoKHN1bSwgYSkgPT4gc3VtICsgYS5sZW5ndGgsIDApKTtcbiAgICBsZXQgcGFkID0gMDsgLy8gd2FsayB0aHJvdWdoIGVhY2ggaXRlbSwgZW5zdXJlIHRoZXkgaGF2ZSBwcm9wZXIgdHlwZVxuICAgIGFycmF5cy5mb3JFYWNoKChhKSA9PiB7XG4gICAgICAgIGlmICghdThhKGEpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVaW50OEFycmF5IGV4cGVjdGVkJyk7XG4gICAgICAgIHIuc2V0KGEsIHBhZCk7XG4gICAgICAgIHBhZCArPSBhLmxlbmd0aDtcbiAgICB9KTtcbiAgICByZXR1cm4gcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbEJ5dGVzKGIxLCBiMikge1xuICAgIC8vIFdlIGRvbid0IGNhcmUgYWJvdXQgdGltaW5nIGF0dGFja3MgaGVyZVxuICAgIGlmIChiMS5sZW5ndGggIT09IGIyLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYjEubGVuZ3RoOyBpKyspXG4gICAgICAgIGlmIChiMVtpXSAhPT0gYjJbaV0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIEBleGFtcGxlIHV0ZjhUb0J5dGVzKCdhYmMnKSAvLyBuZXcgVWludDhBcnJheShbOTcsIDk4LCA5OV0pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1dGY4VG9CeXRlcyhzdHIpIHtcbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdXRmOFRvQnl0ZXMgZXhwZWN0ZWQgc3RyaW5nLCBnb3QgJHt0eXBlb2Ygc3RyfWApO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKSk7IC8vIGh0dHBzOi8vYnVnemlsLmxhLzE2ODE4MDlcbn1cbi8vIEJpdCBvcGVyYXRpb25zXG4vKipcbiAqIENhbGN1bGF0ZXMgYW1vdW50IG9mIGJpdHMgaW4gYSBiaWdpbnQuXG4gKiBTYW1lIGFzIGBuLnRvU3RyaW5nKDIpLmxlbmd0aGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpdExlbihuKSB7XG4gICAgbGV0IGxlbjtcbiAgICBmb3IgKGxlbiA9IDA7IG4gPiBfMG47IG4gPj49IF8xbiwgbGVuICs9IDEpXG4gICAgICAgIDtcbiAgICByZXR1cm4gbGVuO1xufVxuLyoqXG4gKiBHZXRzIHNpbmdsZSBiaXQgYXQgcG9zaXRpb24uXG4gKiBOT1RFOiBmaXJzdCBiaXQgcG9zaXRpb24gaXMgMCAoc2FtZSBhcyBhcnJheXMpXG4gKiBTYW1lIGFzIGAhIStBcnJheS5mcm9tKG4udG9TdHJpbmcoMikpLnJldmVyc2UoKVtwb3NdYFxuICovXG5leHBvcnQgZnVuY3Rpb24gYml0R2V0KG4sIHBvcykge1xuICAgIHJldHVybiAobiA+PiBCaWdJbnQocG9zKSkgJiBfMW47XG59XG4vKipcbiAqIFNldHMgc2luZ2xlIGJpdCBhdCBwb3NpdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGJpdFNldCA9IChuLCBwb3MsIHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIG4gfCAoKHZhbHVlID8gXzFuIDogXzBuKSA8PCBCaWdJbnQocG9zKSk7XG59O1xuLyoqXG4gKiBDYWxjdWxhdGUgbWFzayBmb3IgTiBiaXRzLiBOb3QgdXNpbmcgKiogb3BlcmF0b3Igd2l0aCBiaWdpbnRzIGJlY2F1c2Ugb2Ygb2xkIGVuZ2luZXMuXG4gKiBTYW1lIGFzIEJpZ0ludChgMGIke0FycmF5KGkpLmZpbGwoJzEnKS5qb2luKCcnKX1gKVxuICovXG5leHBvcnQgY29uc3QgYml0TWFzayA9IChuKSA9PiAoXzJuIDw8IEJpZ0ludChuIC0gMSkpIC0gXzFuO1xuLy8gRFJCR1xuY29uc3QgdThuID0gKGRhdGEpID0+IG5ldyBVaW50OEFycmF5KGRhdGEpOyAvLyBjcmVhdGVzIFVpbnQ4QXJyYXlcbmNvbnN0IHU4ZnIgPSAoYXJyKSA9PiBVaW50OEFycmF5LmZyb20oYXJyKTsgLy8gYW5vdGhlciBzaG9ydGN1dFxuLyoqXG4gKiBNaW5pbWFsIEhNQUMtRFJCRyBmcm9tIE5JU1QgODAwLTkwIGZvciBSRkM2OTc5IHNpZ3MuXG4gKiBAcmV0dXJucyBmdW5jdGlvbiB0aGF0IHdpbGwgY2FsbCBEUkJHIHVudGlsIDJuZCBhcmcgcmV0dXJucyBzb21ldGhpbmcgbWVhbmluZ2Z1bFxuICogQGV4YW1wbGVcbiAqICAgY29uc3QgZHJiZyA9IGNyZWF0ZUhtYWNEUkJHPEtleT4oMzIsIDMyLCBobWFjKTtcbiAqICAgZHJiZyhzZWVkLCBieXRlc1RvS2V5KTsgLy8gYnl0ZXNUb0tleSBtdXN0IHJldHVybiBLZXkgb3IgdW5kZWZpbmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIbWFjRHJiZyhoYXNoTGVuLCBxQnl0ZUxlbiwgaG1hY0ZuKSB7XG4gICAgaWYgKHR5cGVvZiBoYXNoTGVuICE9PSAnbnVtYmVyJyB8fCBoYXNoTGVuIDwgMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoYXNoTGVuIG11c3QgYmUgYSBudW1iZXInKTtcbiAgICBpZiAodHlwZW9mIHFCeXRlTGVuICE9PSAnbnVtYmVyJyB8fCBxQnl0ZUxlbiA8IDIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncUJ5dGVMZW4gbXVzdCBiZSBhIG51bWJlcicpO1xuICAgIGlmICh0eXBlb2YgaG1hY0ZuICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2htYWNGbiBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAvLyBTdGVwIEIsIFN0ZXAgQzogc2V0IGhhc2hMZW4gdG8gOCpjZWlsKGhsZW4vOClcbiAgICBsZXQgdiA9IHU4bihoYXNoTGVuKTsgLy8gTWluaW1hbCBub24tZnVsbC1zcGVjIEhNQUMtRFJCRyBmcm9tIE5JU1QgODAwLTkwIGZvciBSRkM2OTc5IHNpZ3MuXG4gICAgbGV0IGsgPSB1OG4oaGFzaExlbik7IC8vIFN0ZXBzIEIgYW5kIEMgb2YgUkZDNjk3OSAzLjI6IHNldCBoYXNoTGVuLCBpbiBvdXIgY2FzZSBhbHdheXMgc2FtZVxuICAgIGxldCBpID0gMDsgLy8gSXRlcmF0aW9ucyBjb3VudGVyLCB3aWxsIHRocm93IHdoZW4gb3ZlciAxMDAwXG4gICAgY29uc3QgcmVzZXQgPSAoKSA9PiB7XG4gICAgICAgIHYuZmlsbCgxKTtcbiAgICAgICAgay5maWxsKDApO1xuICAgICAgICBpID0gMDtcbiAgICB9O1xuICAgIGNvbnN0IGggPSAoLi4uYikgPT4gaG1hY0ZuKGssIHYsIC4uLmIpOyAvLyBobWFjKGspKHYsIC4uLnZhbHVlcylcbiAgICBjb25zdCByZXNlZWQgPSAoc2VlZCA9IHU4bigpKSA9PiB7XG4gICAgICAgIC8vIEhNQUMtRFJCRyByZXNlZWQoKSBmdW5jdGlvbi4gU3RlcHMgRC1HXG4gICAgICAgIGsgPSBoKHU4ZnIoWzB4MDBdKSwgc2VlZCk7IC8vIGsgPSBobWFjKGsgfHwgdiB8fCAweDAwIHx8IHNlZWQpXG4gICAgICAgIHYgPSBoKCk7IC8vIHYgPSBobWFjKGsgfHwgdilcbiAgICAgICAgaWYgKHNlZWQubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBrID0gaCh1OGZyKFsweDAxXSksIHNlZWQpOyAvLyBrID0gaG1hYyhrIHx8IHYgfHwgMHgwMSB8fCBzZWVkKVxuICAgICAgICB2ID0gaCgpOyAvLyB2ID0gaG1hYyhrIHx8IHYpXG4gICAgfTtcbiAgICBjb25zdCBnZW4gPSAoKSA9PiB7XG4gICAgICAgIC8vIEhNQUMtRFJCRyBnZW5lcmF0ZSgpIGZ1bmN0aW9uXG4gICAgICAgIGlmIChpKysgPj0gMTAwMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZHJiZzogdHJpZWQgMTAwMCB2YWx1ZXMnKTtcbiAgICAgICAgbGV0IGxlbiA9IDA7XG4gICAgICAgIGNvbnN0IG91dCA9IFtdO1xuICAgICAgICB3aGlsZSAobGVuIDwgcUJ5dGVMZW4pIHtcbiAgICAgICAgICAgIHYgPSBoKCk7XG4gICAgICAgICAgICBjb25zdCBzbCA9IHYuc2xpY2UoKTtcbiAgICAgICAgICAgIG91dC5wdXNoKHNsKTtcbiAgICAgICAgICAgIGxlbiArPSB2Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uY2F0Qnl0ZXMoLi4ub3V0KTtcbiAgICB9O1xuICAgIGNvbnN0IGdlblVudGlsID0gKHNlZWQsIHByZWQpID0+IHtcbiAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgcmVzZWVkKHNlZWQpOyAvLyBTdGVwcyBELUdcbiAgICAgICAgbGV0IHJlcyA9IHVuZGVmaW5lZDsgLy8gU3RlcCBIOiBncmluZCB1bnRpbCBrIGlzIGluIFsxLi5uLTFdXG4gICAgICAgIHdoaWxlICghKHJlcyA9IHByZWQoZ2VuKCkpKSlcbiAgICAgICAgICAgIHJlc2VlZCgpO1xuICAgICAgICByZXNldCgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgcmV0dXJuIGdlblVudGlsO1xufVxuLy8gVmFsaWRhdGluZyBjdXJ2ZXMgYW5kIGZpZWxkc1xuY29uc3QgdmFsaWRhdG9yRm5zID0ge1xuICAgIGJpZ2ludDogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ2JpZ2ludCcsXG4gICAgZnVuY3Rpb246ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicsXG4gICAgYm9vbGVhbjogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nLFxuICAgIHN0cmluZzogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycsXG4gICAgc3RyaW5nT3JVaW50OEFycmF5OiAodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyB8fCB2YWwgaW5zdGFuY2VvZiBVaW50OEFycmF5LFxuICAgIGlzU2FmZUludGVnZXI6ICh2YWwpID0+IE51bWJlci5pc1NhZmVJbnRlZ2VyKHZhbCksXG4gICAgYXJyYXk6ICh2YWwpID0+IEFycmF5LmlzQXJyYXkodmFsKSxcbiAgICBmaWVsZDogKHZhbCwgb2JqZWN0KSA9PiBvYmplY3QuRnAuaXNWYWxpZCh2YWwpLFxuICAgIGhhc2g6ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicgJiYgTnVtYmVyLmlzU2FmZUludGVnZXIodmFsLm91dHB1dExlbiksXG59O1xuLy8gdHlwZSBSZWNvcmQ8SyBleHRlbmRzIHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCwgVD4gPSB7IFtQIGluIEtdOiBUOyB9XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPYmplY3Qob2JqZWN0LCB2YWxpZGF0b3JzLCBvcHRWYWxpZGF0b3JzID0ge30pIHtcbiAgICBjb25zdCBjaGVja0ZpZWxkID0gKGZpZWxkTmFtZSwgdHlwZSwgaXNPcHRpb25hbCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja1ZhbCA9IHZhbGlkYXRvckZuc1t0eXBlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBjaGVja1ZhbCAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB2YWxpZGF0b3IgXCIke3R5cGV9XCIsIGV4cGVjdGVkIGZ1bmN0aW9uYCk7XG4gICAgICAgIGNvbnN0IHZhbCA9IG9iamVjdFtmaWVsZE5hbWVdO1xuICAgICAgICBpZiAoaXNPcHRpb25hbCAmJiB2YWwgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKCFjaGVja1ZhbCh2YWwsIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwYXJhbSAke1N0cmluZyhmaWVsZE5hbWUpfT0ke3ZhbH0gKCR7dHlwZW9mIHZhbH0pLCBleHBlY3RlZCAke3R5cGV9YCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZvciAoY29uc3QgW2ZpZWxkTmFtZSwgdHlwZV0gb2YgT2JqZWN0LmVudHJpZXModmFsaWRhdG9ycykpXG4gICAgICAgIGNoZWNrRmllbGQoZmllbGROYW1lLCB0eXBlLCBmYWxzZSk7XG4gICAgZm9yIChjb25zdCBbZmllbGROYW1lLCB0eXBlXSBvZiBPYmplY3QuZW50cmllcyhvcHRWYWxpZGF0b3JzKSlcbiAgICAgICAgY2hlY2tGaWVsZChmaWVsZE5hbWUsIHR5cGUsIHRydWUpO1xuICAgIHJldHVybiBvYmplY3Q7XG59XG4vLyB2YWxpZGF0ZSB0eXBlIHRlc3RzXG4vLyBjb25zdCBvOiB7IGE6IG51bWJlcjsgYjogbnVtYmVyOyBjOiBudW1iZXIgfSA9IHsgYTogMSwgYjogNSwgYzogNiB9O1xuLy8gY29uc3QgejAgPSB2YWxpZGF0ZU9iamVjdChvLCB7IGE6ICdpc1NhZmVJbnRlZ2VyJyB9LCB7IGM6ICdiaWdpbnQnIH0pOyAvLyBPayFcbi8vIC8vIFNob3VsZCBmYWlsIHR5cGUtY2hlY2tcbi8vIGNvbnN0IHoxID0gdmFsaWRhdGVPYmplY3QobywgeyBhOiAndG1wJyB9LCB7IGM6ICd6eicgfSk7XG4vLyBjb25zdCB6MiA9IHZhbGlkYXRlT2JqZWN0KG8sIHsgYTogJ2lzU2FmZUludGVnZXInIH0sIHsgYzogJ3p6JyB9KTtcbi8vIGNvbnN0IHozID0gdmFsaWRhdGVPYmplY3QobywgeyB0ZXN0OiAnYm9vbGVhbicsIHo6ICdidWcnIH0pO1xuLy8gY29uc3QgejQgPSB2YWxpZGF0ZU9iamVjdChvLCB7IGE6ICdib29sZWFuJywgejogJ2J1ZycgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiLCIvKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG4vLyBVdGlsaXRpZXMgZm9yIG1vZHVsYXIgYXJpdGhtZXRpY3MgYW5kIGZpbml0ZSBmaWVsZHNcbmltcG9ydCB7IGJpdE1hc2ssIG51bWJlclRvQnl0ZXNCRSwgbnVtYmVyVG9CeXRlc0xFLCBieXRlc1RvTnVtYmVyQkUsIGJ5dGVzVG9OdW1iZXJMRSwgZW5zdXJlQnl0ZXMsIHZhbGlkYXRlT2JqZWN0LCB9IGZyb20gJy4vdXRpbHMuanMnO1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBfMG4gPSBCaWdJbnQoMCksIF8xbiA9IEJpZ0ludCgxKSwgXzJuID0gQmlnSW50KDIpLCBfM24gPSBCaWdJbnQoMyk7XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IF80biA9IEJpZ0ludCg0KSwgXzVuID0gQmlnSW50KDUpLCBfOG4gPSBCaWdJbnQoOCk7XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IF85biA9IEJpZ0ludCg5KSwgXzE2biA9IEJpZ0ludCgxNik7XG4vLyBDYWxjdWxhdGVzIGEgbW9kdWxvIGJcbmV4cG9ydCBmdW5jdGlvbiBtb2QoYSwgYikge1xuICAgIGNvbnN0IHJlc3VsdCA9IGEgJSBiO1xuICAgIHJldHVybiByZXN1bHQgPj0gXzBuID8gcmVzdWx0IDogYiArIHJlc3VsdDtcbn1cbi8qKlxuICogRWZmaWNpZW50bHkgcmFpc2UgbnVtIHRvIHBvd2VyIGFuZCBkbyBtb2R1bGFyIGRpdmlzaW9uLlxuICogVW5zYWZlIGluIHNvbWUgY29udGV4dHM6IHVzZXMgbGFkZGVyLCBzbyBjYW4gZXhwb3NlIGJpZ2ludCBiaXRzLlxuICogQGV4YW1wbGVcbiAqIHBvdygybiwgNm4sIDExbikgLy8gNjRuICUgMTFuID09IDluXG4gKi9cbi8vIFRPRE86IHVzZSBmaWVsZCB2ZXJzaW9uICYmIHJlbW92ZVxuZXhwb3J0IGZ1bmN0aW9uIHBvdyhudW0sIHBvd2VyLCBtb2R1bG8pIHtcbiAgICBpZiAobW9kdWxvIDw9IF8wbiB8fCBwb3dlciA8IF8wbilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBwb3dlci9tb2R1bG8gPiAwJyk7XG4gICAgaWYgKG1vZHVsbyA9PT0gXzFuKVxuICAgICAgICByZXR1cm4gXzBuO1xuICAgIGxldCByZXMgPSBfMW47XG4gICAgd2hpbGUgKHBvd2VyID4gXzBuKSB7XG4gICAgICAgIGlmIChwb3dlciAmIF8xbilcbiAgICAgICAgICAgIHJlcyA9IChyZXMgKiBudW0pICUgbW9kdWxvO1xuICAgICAgICBudW0gPSAobnVtICogbnVtKSAlIG1vZHVsbztcbiAgICAgICAgcG93ZXIgPj49IF8xbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8vIERvZXMgeCBeICgyIF4gcG93ZXIpIG1vZCBwLiBwb3cyKDMwLCA0KSA9PSAzMCBeICgyIF4gNClcbmV4cG9ydCBmdW5jdGlvbiBwb3cyKHgsIHBvd2VyLCBtb2R1bG8pIHtcbiAgICBsZXQgcmVzID0geDtcbiAgICB3aGlsZSAocG93ZXItLSA+IF8wbikge1xuICAgICAgICByZXMgKj0gcmVzO1xuICAgICAgICByZXMgJT0gbW9kdWxvO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLy8gSW52ZXJzZXMgbnVtYmVyIG92ZXIgbW9kdWxvXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG51bWJlciwgbW9kdWxvKSB7XG4gICAgaWYgKG51bWJlciA9PT0gXzBuIHx8IG1vZHVsbyA8PSBfMG4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZlcnQ6IGV4cGVjdGVkIHBvc2l0aXZlIGludGVnZXJzLCBnb3Qgbj0ke251bWJlcn0gbW9kPSR7bW9kdWxvfWApO1xuICAgIH1cbiAgICAvLyBFdWNsaWRlYW4gR0NEIGh0dHBzOi8vYnJpbGxpYW50Lm9yZy93aWtpL2V4dGVuZGVkLWV1Y2xpZGVhbi1hbGdvcml0aG0vXG4gICAgLy8gRmVybWF0J3MgbGl0dGxlIHRoZW9yZW0gXCJDVC1saWtlXCIgdmVyc2lvbiBpbnYobikgPSBuXihtLTIpIG1vZCBtIGlzIDMweCBzbG93ZXIuXG4gICAgbGV0IGEgPSBtb2QobnVtYmVyLCBtb2R1bG8pO1xuICAgIGxldCBiID0gbW9kdWxvO1xuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIGxldCB4ID0gXzBuLCB5ID0gXzFuLCB1ID0gXzFuLCB2ID0gXzBuO1xuICAgIHdoaWxlIChhICE9PSBfMG4pIHtcbiAgICAgICAgLy8gSklUIGFwcGxpZXMgb3B0aW1pemF0aW9uIGlmIHRob3NlIHR3byBsaW5lcyBmb2xsb3cgZWFjaCBvdGhlclxuICAgICAgICBjb25zdCBxID0gYiAvIGE7XG4gICAgICAgIGNvbnN0IHIgPSBiICUgYTtcbiAgICAgICAgY29uc3QgbSA9IHggLSB1ICogcTtcbiAgICAgICAgY29uc3QgbiA9IHkgLSB2ICogcTtcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIGIgPSBhLCBhID0gciwgeCA9IHUsIHkgPSB2LCB1ID0gbSwgdiA9IG47XG4gICAgfVxuICAgIGNvbnN0IGdjZCA9IGI7XG4gICAgaWYgKGdjZCAhPT0gXzFuKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmVydDogZG9lcyBub3QgZXhpc3QnKTtcbiAgICByZXR1cm4gbW9kKHgsIG1vZHVsbyk7XG59XG4vKipcbiAqIFRvbmVsbGktU2hhbmtzIHNxdWFyZSByb290IHNlYXJjaCBhbGdvcml0aG0uXG4gKiAxLiBodHRwczovL2VwcmludC5pYWNyLm9yZy8yMDEyLzY4NS5wZGYgKHBhZ2UgMTIpXG4gKiAyLiBTcXVhcmUgUm9vdHMgZnJvbSAxOyAyNCwgNTEsIDEwIHRvIERhbiBTaGFua3NcbiAqIFdpbGwgc3RhcnQgYW4gaW5maW5pdGUgbG9vcCBpZiBmaWVsZCBvcmRlciBQIGlzIG5vdCBwcmltZS5cbiAqIEBwYXJhbSBQIGZpZWxkIG9yZGVyXG4gKiBAcmV0dXJucyBmdW5jdGlvbiB0aGF0IHRha2VzIGZpZWxkIEZwIChjcmVhdGVkIGZyb20gUCkgYW5kIG51bWJlciBuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b25lbGxpU2hhbmtzKFApIHtcbiAgICAvLyBMZWdlbmRyZSBjb25zdGFudDogdXNlZCB0byBjYWxjdWxhdGUgTGVnZW5kcmUgc3ltYm9sIChhIHwgcCksXG4gICAgLy8gd2hpY2ggZGVub3RlcyB0aGUgdmFsdWUgb2YgYV4oKHAtMSkvMikgKG1vZCBwKS5cbiAgICAvLyAoYSB8IHApIOKJoSAxICAgIGlmIGEgaXMgYSBzcXVhcmUgKG1vZCBwKVxuICAgIC8vIChhIHwgcCkg4omhIC0xICAgaWYgYSBpcyBub3QgYSBzcXVhcmUgKG1vZCBwKVxuICAgIC8vIChhIHwgcCkg4omhIDAgICAgaWYgYSDiiaEgMCAobW9kIHApXG4gICAgY29uc3QgbGVnZW5kcmVDID0gKFAgLSBfMW4pIC8gXzJuO1xuICAgIGxldCBRLCBTLCBaO1xuICAgIC8vIFN0ZXAgMTogQnkgZmFjdG9yaW5nIG91dCBwb3dlcnMgb2YgMiBmcm9tIHAgLSAxLFxuICAgIC8vIGZpbmQgcSBhbmQgcyBzdWNoIHRoYXQgcCAtIDEgPSBxKigyXnMpIHdpdGggcSBvZGRcbiAgICBmb3IgKFEgPSBQIC0gXzFuLCBTID0gMDsgUSAlIF8ybiA9PT0gXzBuOyBRIC89IF8ybiwgUysrKVxuICAgICAgICA7XG4gICAgLy8gU3RlcCAyOiBTZWxlY3QgYSBub24tc3F1YXJlIHogc3VjaCB0aGF0ICh6IHwgcCkg4omhIC0xIGFuZCBzZXQgYyDiiaEgenFcbiAgICBmb3IgKFogPSBfMm47IFogPCBQICYmIHBvdyhaLCBsZWdlbmRyZUMsIFApICE9PSBQIC0gXzFuOyBaKyspXG4gICAgICAgIDtcbiAgICAvLyBGYXN0LXBhdGhcbiAgICBpZiAoUyA9PT0gMSkge1xuICAgICAgICBjb25zdCBwMWRpdjQgPSAoUCArIF8xbikgLyBfNG47XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiB0b25lbGxpRmFzdChGcCwgbikge1xuICAgICAgICAgICAgY29uc3Qgcm9vdCA9IEZwLnBvdyhuLCBwMWRpdjQpO1xuICAgICAgICAgICAgaWYgKCFGcC5lcWwoRnAuc3FyKHJvb3QpLCBuKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIHNxdWFyZSByb290Jyk7XG4gICAgICAgICAgICByZXR1cm4gcm9vdDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gU2xvdy1wYXRoXG4gICAgY29uc3QgUTFkaXYyID0gKFEgKyBfMW4pIC8gXzJuO1xuICAgIHJldHVybiBmdW5jdGlvbiB0b25lbGxpU2xvdyhGcCwgbikge1xuICAgICAgICAvLyBTdGVwIDA6IENoZWNrIHRoYXQgbiBpcyBpbmRlZWQgYSBzcXVhcmU6IChuIHwgcCkgc2hvdWxkIG5vdCBiZSDiiaEgLTFcbiAgICAgICAgaWYgKEZwLnBvdyhuLCBsZWdlbmRyZUMpID09PSBGcC5uZWcoRnAuT05FKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3QnKTtcbiAgICAgICAgbGV0IHIgPSBTO1xuICAgICAgICAvLyBUT0RPOiB3aWxsIGZhaWwgYXQgRnAyL2V0Y1xuICAgICAgICBsZXQgZyA9IEZwLnBvdyhGcC5tdWwoRnAuT05FLCBaKSwgUSk7IC8vIHdpbGwgdXBkYXRlIGJvdGggeCBhbmQgYlxuICAgICAgICBsZXQgeCA9IEZwLnBvdyhuLCBRMWRpdjIpOyAvLyBmaXJzdCBndWVzcyBhdCB0aGUgc3F1YXJlIHJvb3RcbiAgICAgICAgbGV0IGIgPSBGcC5wb3cobiwgUSk7IC8vIGZpcnN0IGd1ZXNzIGF0IHRoZSBmdWRnZSBmYWN0b3JcbiAgICAgICAgd2hpbGUgKCFGcC5lcWwoYiwgRnAuT05FKSkge1xuICAgICAgICAgICAgaWYgKEZwLmVxbChiLCBGcC5aRVJPKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gRnAuWkVSTzsgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVG9uZWxsaSVFMiU4MCU5M1NoYW5rc19hbGdvcml0aG0gKDQuIElmIHQgPSAwLCByZXR1cm4gciA9IDApXG4gICAgICAgICAgICAvLyBGaW5kIG0gc3VjaCBiXigyXm0pPT0xXG4gICAgICAgICAgICBsZXQgbSA9IDE7XG4gICAgICAgICAgICBmb3IgKGxldCB0MiA9IEZwLnNxcihiKTsgbSA8IHI7IG0rKykge1xuICAgICAgICAgICAgICAgIGlmIChGcC5lcWwodDIsIEZwLk9ORSkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIHQyID0gRnAuc3FyKHQyKTsgLy8gdDIgKj0gdDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5PVEU6IHItbS0xIGNhbiBiZSBiaWdnZXIgdGhhbiAzMiwgbmVlZCB0byBjb252ZXJ0IHRvIGJpZ2ludCBiZWZvcmUgc2hpZnQsIG90aGVyd2lzZSB0aGVyZSB3aWxsIGJlIG92ZXJmbG93XG4gICAgICAgICAgICBjb25zdCBnZSA9IEZwLnBvdyhnLCBfMW4gPDwgQmlnSW50KHIgLSBtIC0gMSkpOyAvLyBnZSA9IDJeKHItbS0xKVxuICAgICAgICAgICAgZyA9IEZwLnNxcihnZSk7IC8vIGcgPSBnZSAqIGdlXG4gICAgICAgICAgICB4ID0gRnAubXVsKHgsIGdlKTsgLy8geCAqPSBnZVxuICAgICAgICAgICAgYiA9IEZwLm11bChiLCBnKTsgLy8gYiAqPSBnXG4gICAgICAgICAgICByID0gbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geDtcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIEZwU3FydChQKSB7XG4gICAgLy8gTk9URTogZGlmZmVyZW50IGFsZ29yaXRobXMgY2FuIGdpdmUgZGlmZmVyZW50IHJvb3RzLCBpdCBpcyB1cCB0byB1c2VyIHRvIGRlY2lkZSB3aGljaCBvbmUgdGhleSB3YW50LlxuICAgIC8vIEZvciBleGFtcGxlIHRoZXJlIGlzIEZwU3FydE9kZC9GcFNxcnRFdmVuIHRvIGNob2ljZSByb290IGJhc2VkIG9uIG9kZG5lc3MgKHVzZWQgZm9yIGhhc2gtdG8tY3VydmUpLlxuICAgIC8vIFAg4omhIDMgKG1vZCA0KVxuICAgIC8vIOKImm4gPSBuXigoUCsxKS80KVxuICAgIGlmIChQICUgXzRuID09PSBfM24pIHtcbiAgICAgICAgLy8gTm90IGFsbCByb290cyBwb3NzaWJsZSFcbiAgICAgICAgLy8gY29uc3QgT1JERVIgPVxuICAgICAgICAvLyAgIDB4MWEwMTExZWEzOTdmZTY5YTRiMWJhN2I2NDM0YmFjZDc2NDc3NGI4NGYzODUxMmJmNjczMGQyYTBmNmIwZjYyNDFlYWJmZmZlYjE1M2ZmZmZiOWZlZmZmZmZmZmZhYWFibjtcbiAgICAgICAgLy8gY29uc3QgTlVNID0gNzIwNTc1OTQwMzc5Mjc4MTZuO1xuICAgICAgICBjb25zdCBwMWRpdjQgPSAoUCArIF8xbikgLyBfNG47XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBzcXJ0M21vZDQoRnAsIG4pIHtcbiAgICAgICAgICAgIGNvbnN0IHJvb3QgPSBGcC5wb3cobiwgcDFkaXY0KTtcbiAgICAgICAgICAgIC8vIFRocm93IGlmIHJvb3QqKjIgIT0gblxuICAgICAgICAgICAgaWYgKCFGcC5lcWwoRnAuc3FyKHJvb3QpLCBuKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIHNxdWFyZSByb290Jyk7XG4gICAgICAgICAgICByZXR1cm4gcm9vdDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gQXRraW4gYWxnb3JpdGhtIGZvciBxIOKJoSA1IChtb2QgOCksIGh0dHBzOi8vZXByaW50LmlhY3Iub3JnLzIwMTIvNjg1LnBkZiAocGFnZSAxMClcbiAgICBpZiAoUCAlIF84biA9PT0gXzVuKSB7XG4gICAgICAgIGNvbnN0IGMxID0gKFAgLSBfNW4pIC8gXzhuO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gc3FydDVtb2Q4KEZwLCBuKSB7XG4gICAgICAgICAgICBjb25zdCBuMiA9IEZwLm11bChuLCBfMm4pO1xuICAgICAgICAgICAgY29uc3QgdiA9IEZwLnBvdyhuMiwgYzEpO1xuICAgICAgICAgICAgY29uc3QgbnYgPSBGcC5tdWwobiwgdik7XG4gICAgICAgICAgICBjb25zdCBpID0gRnAubXVsKEZwLm11bChudiwgXzJuKSwgdik7XG4gICAgICAgICAgICBjb25zdCByb290ID0gRnAubXVsKG52LCBGcC5zdWIoaSwgRnAuT05FKSk7XG4gICAgICAgICAgICBpZiAoIUZwLmVxbChGcC5zcXIocm9vdCksIG4pKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3QnKTtcbiAgICAgICAgICAgIHJldHVybiByb290O1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBQIOKJoSA5IChtb2QgMTYpXG4gICAgaWYgKFAgJSBfMTZuID09PSBfOW4pIHtcbiAgICAgICAgLy8gTk9URTogdG9uZWxsaSBpcyB0b28gc2xvdyBmb3IgYmxzLUZwMiBjYWxjdWxhdGlvbnMgZXZlbiBvbiBzdGFydFxuICAgICAgICAvLyBNZWFucyB3ZSBjYW5ub3QgdXNlIHNxcnQgZm9yIGNvbnN0YW50cyBhdCBhbGwhXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGNvbnN0IGMxID0gRnAuc3FydChGcC5uZWdhdGUoRnAuT05FKSk7IC8vICAxLiBjMSA9IHNxcnQoLTEpIGluIEYsIGkuZS4sIChjMV4yKSA9PSAtMSBpbiBGXG4gICAgICAgIC8vIGNvbnN0IGMyID0gRnAuc3FydChjMSk7ICAgICAgICAgICAgICAgIC8vICAyLiBjMiA9IHNxcnQoYzEpIGluIEYsIGkuZS4sIChjMl4yKSA9PSBjMSBpbiBGXG4gICAgICAgIC8vIGNvbnN0IGMzID0gRnAuc3FydChGcC5uZWdhdGUoYzEpKTsgICAgIC8vICAzLiBjMyA9IHNxcnQoLWMxKSBpbiBGLCBpLmUuLCAoYzNeMikgPT0gLWMxIGluIEZcbiAgICAgICAgLy8gY29uc3QgYzQgPSAoUCArIF83bikgLyBfMTZuOyAgICAgICAgICAgLy8gIDQuIGM0ID0gKHEgKyA3KSAvIDE2ICAgICAgICAjIEludGVnZXIgYXJpdGhtZXRpY1xuICAgICAgICAvLyBzcXJ0ID0gKHgpID0+IHtcbiAgICAgICAgLy8gICBsZXQgdHYxID0gRnAucG93KHgsIGM0KTsgICAgICAgICAgICAgLy8gIDEuIHR2MSA9IHheYzRcbiAgICAgICAgLy8gICBsZXQgdHYyID0gRnAubXVsKGMxLCB0djEpOyAgICAgICAgICAgLy8gIDIuIHR2MiA9IGMxICogdHYxXG4gICAgICAgIC8vICAgY29uc3QgdHYzID0gRnAubXVsKGMyLCB0djEpOyAgICAgICAgIC8vICAzLiB0djMgPSBjMiAqIHR2MVxuICAgICAgICAvLyAgIGxldCB0djQgPSBGcC5tdWwoYzMsIHR2MSk7ICAgICAgICAgICAvLyAgNC4gdHY0ID0gYzMgKiB0djFcbiAgICAgICAgLy8gICBjb25zdCBlMSA9IEZwLmVxdWFscyhGcC5zcXVhcmUodHYyKSwgeCk7IC8vICA1LiAgZTEgPSAodHYyXjIpID09IHhcbiAgICAgICAgLy8gICBjb25zdCBlMiA9IEZwLmVxdWFscyhGcC5zcXVhcmUodHYzKSwgeCk7IC8vICA2LiAgZTIgPSAodHYzXjIpID09IHhcbiAgICAgICAgLy8gICB0djEgPSBGcC5jbW92KHR2MSwgdHYyLCBlMSk7IC8vICA3LiB0djEgPSBDTU9WKHR2MSwgdHYyLCBlMSkgICMgU2VsZWN0IHR2MiBpZiAodHYyXjIpID09IHhcbiAgICAgICAgLy8gICB0djIgPSBGcC5jbW92KHR2NCwgdHYzLCBlMik7IC8vICA4LiB0djIgPSBDTU9WKHR2NCwgdHYzLCBlMikgICMgU2VsZWN0IHR2MyBpZiAodHYzXjIpID09IHhcbiAgICAgICAgLy8gICBjb25zdCBlMyA9IEZwLmVxdWFscyhGcC5zcXVhcmUodHYyKSwgeCk7IC8vICA5LiAgZTMgPSAodHYyXjIpID09IHhcbiAgICAgICAgLy8gICByZXR1cm4gRnAuY21vdih0djEsIHR2MiwgZTMpOyAvLyAgMTAuICB6ID0gQ01PVih0djEsIHR2MiwgZTMpICAjIFNlbGVjdCB0aGUgc3FydCBmcm9tIHR2MSBhbmQgdHYyXG4gICAgICAgIC8vIH1cbiAgICB9XG4gICAgLy8gT3RoZXIgY2FzZXM6IFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobVxuICAgIHJldHVybiB0b25lbGxpU2hhbmtzKFApO1xufVxuLy8gTGl0dGxlLWVuZGlhbiBjaGVjayBmb3IgZmlyc3QgTEUgYml0IChsYXN0IEJFIGJpdCk7XG5leHBvcnQgY29uc3QgaXNOZWdhdGl2ZUxFID0gKG51bSwgbW9kdWxvKSA9PiAobW9kKG51bSwgbW9kdWxvKSAmIF8xbikgPT09IF8xbjtcbi8vIHByZXR0aWVyLWlnbm9yZVxuY29uc3QgRklFTERfRklFTERTID0gW1xuICAgICdjcmVhdGUnLCAnaXNWYWxpZCcsICdpczAnLCAnbmVnJywgJ2ludicsICdzcXJ0JywgJ3NxcicsXG4gICAgJ2VxbCcsICdhZGQnLCAnc3ViJywgJ211bCcsICdwb3cnLCAnZGl2JyxcbiAgICAnYWRkTicsICdzdWJOJywgJ211bE4nLCAnc3FyTidcbl07XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVGaWVsZChmaWVsZCkge1xuICAgIGNvbnN0IGluaXRpYWwgPSB7XG4gICAgICAgIE9SREVSOiAnYmlnaW50JyxcbiAgICAgICAgTUFTSzogJ2JpZ2ludCcsXG4gICAgICAgIEJZVEVTOiAnaXNTYWZlSW50ZWdlcicsXG4gICAgICAgIEJJVFM6ICdpc1NhZmVJbnRlZ2VyJyxcbiAgICB9O1xuICAgIGNvbnN0IG9wdHMgPSBGSUVMRF9GSUVMRFMucmVkdWNlKChtYXAsIHZhbCkgPT4ge1xuICAgICAgICBtYXBbdmFsXSA9ICdmdW5jdGlvbic7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfSwgaW5pdGlhbCk7XG4gICAgcmV0dXJuIHZhbGlkYXRlT2JqZWN0KGZpZWxkLCBvcHRzKTtcbn1cbi8vIEdlbmVyaWMgZmllbGQgZnVuY3Rpb25zXG4vKipcbiAqIFNhbWUgYXMgYHBvd2AgYnV0IGZvciBGcDogbm9uLWNvbnN0YW50LXRpbWUuXG4gKiBVbnNhZmUgaW4gc29tZSBjb250ZXh0czogdXNlcyBsYWRkZXIsIHNvIGNhbiBleHBvc2UgYmlnaW50IGJpdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBGcFBvdyhmLCBudW0sIHBvd2VyKSB7XG4gICAgLy8gU2hvdWxkIGhhdmUgc2FtZSBzcGVlZCBhcyBwb3cgZm9yIGJpZ2ludHNcbiAgICAvLyBUT0RPOiBiZW5jaG1hcmshXG4gICAgaWYgKHBvd2VyIDwgXzBuKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHBvd2VyID4gMCcpO1xuICAgIGlmIChwb3dlciA9PT0gXzBuKVxuICAgICAgICByZXR1cm4gZi5PTkU7XG4gICAgaWYgKHBvd2VyID09PSBfMW4pXG4gICAgICAgIHJldHVybiBudW07XG4gICAgbGV0IHAgPSBmLk9ORTtcbiAgICBsZXQgZCA9IG51bTtcbiAgICB3aGlsZSAocG93ZXIgPiBfMG4pIHtcbiAgICAgICAgaWYgKHBvd2VyICYgXzFuKVxuICAgICAgICAgICAgcCA9IGYubXVsKHAsIGQpO1xuICAgICAgICBkID0gZi5zcXIoZCk7XG4gICAgICAgIHBvd2VyID4+PSBfMW47XG4gICAgfVxuICAgIHJldHVybiBwO1xufVxuLyoqXG4gKiBFZmZpY2llbnRseSBpbnZlcnQgYW4gYXJyYXkgb2YgRmllbGQgZWxlbWVudHMuXG4gKiBgaW52KDApYCB3aWxsIHJldHVybiBgdW5kZWZpbmVkYCBoZXJlOiBtYWtlIHN1cmUgdG8gdGhyb3cgYW4gZXJyb3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBGcEludmVydEJhdGNoKGYsIG51bXMpIHtcbiAgICBjb25zdCB0bXAgPSBuZXcgQXJyYXkobnVtcy5sZW5ndGgpO1xuICAgIC8vIFdhbGsgZnJvbSBmaXJzdCB0byBsYXN0LCBtdWx0aXBseSB0aGVtIGJ5IGVhY2ggb3RoZXIgTU9EIHBcbiAgICBjb25zdCBsYXN0TXVsdGlwbGllZCA9IG51bXMucmVkdWNlKChhY2MsIG51bSwgaSkgPT4ge1xuICAgICAgICBpZiAoZi5pczAobnVtKSlcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIHRtcFtpXSA9IGFjYztcbiAgICAgICAgcmV0dXJuIGYubXVsKGFjYywgbnVtKTtcbiAgICB9LCBmLk9ORSk7XG4gICAgLy8gSW52ZXJ0IGxhc3QgZWxlbWVudFxuICAgIGNvbnN0IGludmVydGVkID0gZi5pbnYobGFzdE11bHRpcGxpZWQpO1xuICAgIC8vIFdhbGsgZnJvbSBsYXN0IHRvIGZpcnN0LCBtdWx0aXBseSB0aGVtIGJ5IGludmVydGVkIGVhY2ggb3RoZXIgTU9EIHBcbiAgICBudW1zLnJlZHVjZVJpZ2h0KChhY2MsIG51bSwgaSkgPT4ge1xuICAgICAgICBpZiAoZi5pczAobnVtKSlcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIHRtcFtpXSA9IGYubXVsKGFjYywgdG1wW2ldKTtcbiAgICAgICAgcmV0dXJuIGYubXVsKGFjYywgbnVtKTtcbiAgICB9LCBpbnZlcnRlZCk7XG4gICAgcmV0dXJuIHRtcDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBGcERpdihmLCBsaHMsIHJocykge1xuICAgIHJldHVybiBmLm11bChsaHMsIHR5cGVvZiByaHMgPT09ICdiaWdpbnQnID8gaW52ZXJ0KHJocywgZi5PUkRFUikgOiBmLmludihyaHMpKTtcbn1cbi8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBUcnVlIHdoZW5ldmVyIHRoZSB2YWx1ZSB4IGlzIGEgc3F1YXJlIGluIHRoZSBmaWVsZCBGLlxuZXhwb3J0IGZ1bmN0aW9uIEZwSXNTcXVhcmUoZikge1xuICAgIGNvbnN0IGxlZ2VuZHJlQ29uc3QgPSAoZi5PUkRFUiAtIF8xbikgLyBfMm47IC8vIEludGVnZXIgYXJpdGhtZXRpY1xuICAgIHJldHVybiAoeCkgPT4ge1xuICAgICAgICBjb25zdCBwID0gZi5wb3coeCwgbGVnZW5kcmVDb25zdCk7XG4gICAgICAgIHJldHVybiBmLmVxbChwLCBmLlpFUk8pIHx8IGYuZXFsKHAsIGYuT05FKTtcbiAgICB9O1xufVxuLy8gQ1VSVkUubiBsZW5ndGhzXG5leHBvcnQgZnVuY3Rpb24gbkxlbmd0aChuLCBuQml0TGVuZ3RoKSB7XG4gICAgLy8gQml0IHNpemUsIGJ5dGUgc2l6ZSBvZiBDVVJWRS5uXG4gICAgY29uc3QgX25CaXRMZW5ndGggPSBuQml0TGVuZ3RoICE9PSB1bmRlZmluZWQgPyBuQml0TGVuZ3RoIDogbi50b1N0cmluZygyKS5sZW5ndGg7XG4gICAgY29uc3QgbkJ5dGVMZW5ndGggPSBNYXRoLmNlaWwoX25CaXRMZW5ndGggLyA4KTtcbiAgICByZXR1cm4geyBuQml0TGVuZ3RoOiBfbkJpdExlbmd0aCwgbkJ5dGVMZW5ndGggfTtcbn1cbi8qKlxuICogSW5pdGlhbGl6ZXMgYSBmaW5pdGUgZmllbGQgb3ZlciBwcmltZS4gKipOb24tcHJpbWVzIGFyZSBub3Qgc3VwcG9ydGVkLioqXG4gKiBEbyBub3QgaW5pdCBpbiBsb29wOiBzbG93LiBWZXJ5IGZyYWdpbGU6IGFsd2F5cyBydW4gYSBiZW5jaG1hcmsgb24gYSBjaGFuZ2UuXG4gKiBNYWpvciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25zOlxuICogKiBhKSBkZW5vcm1hbGl6ZWQgb3BlcmF0aW9ucyBsaWtlIG11bE4gaW5zdGVhZCBvZiBtdWxcbiAqICogYikgc2FtZSBvYmplY3Qgc2hhcGU6IG5ldmVyIGFkZCBvciByZW1vdmUga2V5c1xuICogKiBjKSBPYmplY3QuZnJlZXplXG4gKiBAcGFyYW0gT1JERVIgcHJpbWUgcG9zaXRpdmUgYmlnaW50XG4gKiBAcGFyYW0gYml0TGVuIGhvdyBtYW55IGJpdHMgdGhlIGZpZWxkIGNvbnN1bWVzXG4gKiBAcGFyYW0gaXNMRSAoZGVmOiBmYWxzZSkgaWYgZW5jb2RpbmcgLyBkZWNvZGluZyBzaG91bGQgYmUgaW4gbGl0dGxlLWVuZGlhblxuICogQHBhcmFtIHJlZGVmIG9wdGlvbmFsIGZhc3RlciByZWRlZmluaXRpb25zIG9mIHNxcnQgYW5kIG90aGVyIG1ldGhvZHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEZpZWxkKE9SREVSLCBiaXRMZW4sIGlzTEUgPSBmYWxzZSwgcmVkZWYgPSB7fSkge1xuICAgIGlmIChPUkRFUiA8PSBfMG4pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgRmllbGQgT1JERVIgPiAwLCBnb3QgJHtPUkRFUn1gKTtcbiAgICBjb25zdCB7IG5CaXRMZW5ndGg6IEJJVFMsIG5CeXRlTGVuZ3RoOiBCWVRFUyB9ID0gbkxlbmd0aChPUkRFUiwgYml0TGVuKTtcbiAgICBpZiAoQllURVMgPiAyMDQ4KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpZWxkIGxlbmd0aHMgb3ZlciAyMDQ4IGJ5dGVzIGFyZSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgY29uc3Qgc3FydFAgPSBGcFNxcnQoT1JERVIpO1xuICAgIGNvbnN0IGYgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgT1JERVIsXG4gICAgICAgIEJJVFMsXG4gICAgICAgIEJZVEVTLFxuICAgICAgICBNQVNLOiBiaXRNYXNrKEJJVFMpLFxuICAgICAgICBaRVJPOiBfMG4sXG4gICAgICAgIE9ORTogXzFuLFxuICAgICAgICBjcmVhdGU6IChudW0pID0+IG1vZChudW0sIE9SREVSKSxcbiAgICAgICAgaXNWYWxpZDogKG51bSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBudW0gIT09ICdiaWdpbnQnKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBmaWVsZCBlbGVtZW50OiBleHBlY3RlZCBiaWdpbnQsIGdvdCAke3R5cGVvZiBudW19YCk7XG4gICAgICAgICAgICByZXR1cm4gXzBuIDw9IG51bSAmJiBudW0gPCBPUkRFUjsgLy8gMCBpcyB2YWxpZCBlbGVtZW50LCBidXQgaXQncyBub3QgaW52ZXJ0aWJsZVxuICAgICAgICB9LFxuICAgICAgICBpczA6IChudW0pID0+IG51bSA9PT0gXzBuLFxuICAgICAgICBpc09kZDogKG51bSkgPT4gKG51bSAmIF8xbikgPT09IF8xbixcbiAgICAgICAgbmVnOiAobnVtKSA9PiBtb2QoLW51bSwgT1JERVIpLFxuICAgICAgICBlcWw6IChsaHMsIHJocykgPT4gbGhzID09PSByaHMsXG4gICAgICAgIHNxcjogKG51bSkgPT4gbW9kKG51bSAqIG51bSwgT1JERVIpLFxuICAgICAgICBhZGQ6IChsaHMsIHJocykgPT4gbW9kKGxocyArIHJocywgT1JERVIpLFxuICAgICAgICBzdWI6IChsaHMsIHJocykgPT4gbW9kKGxocyAtIHJocywgT1JERVIpLFxuICAgICAgICBtdWw6IChsaHMsIHJocykgPT4gbW9kKGxocyAqIHJocywgT1JERVIpLFxuICAgICAgICBwb3c6IChudW0sIHBvd2VyKSA9PiBGcFBvdyhmLCBudW0sIHBvd2VyKSxcbiAgICAgICAgZGl2OiAobGhzLCByaHMpID0+IG1vZChsaHMgKiBpbnZlcnQocmhzLCBPUkRFUiksIE9SREVSKSxcbiAgICAgICAgLy8gU2FtZSBhcyBhYm92ZSwgYnV0IGRvZXNuJ3Qgbm9ybWFsaXplXG4gICAgICAgIHNxck46IChudW0pID0+IG51bSAqIG51bSxcbiAgICAgICAgYWRkTjogKGxocywgcmhzKSA9PiBsaHMgKyByaHMsXG4gICAgICAgIHN1Yk46IChsaHMsIHJocykgPT4gbGhzIC0gcmhzLFxuICAgICAgICBtdWxOOiAobGhzLCByaHMpID0+IGxocyAqIHJocyxcbiAgICAgICAgaW52OiAobnVtKSA9PiBpbnZlcnQobnVtLCBPUkRFUiksXG4gICAgICAgIHNxcnQ6IHJlZGVmLnNxcnQgfHwgKChuKSA9PiBzcXJ0UChmLCBuKSksXG4gICAgICAgIGludmVydEJhdGNoOiAobHN0KSA9PiBGcEludmVydEJhdGNoKGYsIGxzdCksXG4gICAgICAgIC8vIFRPRE86IGRvIHdlIHJlYWxseSBuZWVkIGNvbnN0YW50IGNtb3Y/XG4gICAgICAgIC8vIFdlIGRvbid0IGhhdmUgY29uc3QtdGltZSBiaWdpbnRzIGFueXdheSwgc28gcHJvYmFibHkgd2lsbCBiZSBub3QgdmVyeSB1c2VmdWxcbiAgICAgICAgY21vdjogKGEsIGIsIGMpID0+IChjID8gYiA6IGEpLFxuICAgICAgICB0b0J5dGVzOiAobnVtKSA9PiAoaXNMRSA/IG51bWJlclRvQnl0ZXNMRShudW0sIEJZVEVTKSA6IG51bWJlclRvQnl0ZXNCRShudW0sIEJZVEVTKSksXG4gICAgICAgIGZyb21CeXRlczogKGJ5dGVzKSA9PiB7XG4gICAgICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoICE9PSBCWVRFUylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZwLmZyb21CeXRlczogZXhwZWN0ZWQgJHtCWVRFU30sIGdvdCAke2J5dGVzLmxlbmd0aH1gKTtcbiAgICAgICAgICAgIHJldHVybiBpc0xFID8gYnl0ZXNUb051bWJlckxFKGJ5dGVzKSA6IGJ5dGVzVG9OdW1iZXJCRShieXRlcyk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoZik7XG59XG5leHBvcnQgZnVuY3Rpb24gRnBTcXJ0T2RkKEZwLCBlbG0pIHtcbiAgICBpZiAoIUZwLmlzT2RkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpZWxkIGRvZXNuJ3QgaGF2ZSBpc09kZGApO1xuICAgIGNvbnN0IHJvb3QgPSBGcC5zcXJ0KGVsbSk7XG4gICAgcmV0dXJuIEZwLmlzT2RkKHJvb3QpID8gcm9vdCA6IEZwLm5lZyhyb290KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBGcFNxcnRFdmVuKEZwLCBlbG0pIHtcbiAgICBpZiAoIUZwLmlzT2RkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpZWxkIGRvZXNuJ3QgaGF2ZSBpc09kZGApO1xuICAgIGNvbnN0IHJvb3QgPSBGcC5zcXJ0KGVsbSk7XG4gICAgcmV0dXJuIEZwLmlzT2RkKHJvb3QpID8gRnAubmVnKHJvb3QpIDogcm9vdDtcbn1cbi8qKlxuICogXCJDb25zdGFudC10aW1lXCIgcHJpdmF0ZSBrZXkgZ2VuZXJhdGlvbiB1dGlsaXR5LlxuICogU2FtZSBhcyBtYXBLZXlUb0ZpZWxkLCBidXQgYWNjZXB0cyBsZXNzIGJ5dGVzICg0MCBpbnN0ZWFkIG9mIDQ4IGZvciAzMi1ieXRlIGZpZWxkKS5cbiAqIFdoaWNoIG1ha2VzIGl0IHNsaWdodGx5IG1vcmUgYmlhc2VkLCBsZXNzIHNlY3VyZS5cbiAqIEBkZXByZWNhdGVkIHVzZSBtYXBLZXlUb0ZpZWxkIGluc3RlYWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2hUb1ByaXZhdGVTY2FsYXIoaGFzaCwgZ3JvdXBPcmRlciwgaXNMRSA9IGZhbHNlKSB7XG4gICAgaGFzaCA9IGVuc3VyZUJ5dGVzKCdwcml2YXRlSGFzaCcsIGhhc2gpO1xuICAgIGNvbnN0IGhhc2hMZW4gPSBoYXNoLmxlbmd0aDtcbiAgICBjb25zdCBtaW5MZW4gPSBuTGVuZ3RoKGdyb3VwT3JkZXIpLm5CeXRlTGVuZ3RoICsgODtcbiAgICBpZiAobWluTGVuIDwgMjQgfHwgaGFzaExlbiA8IG1pbkxlbiB8fCBoYXNoTGVuID4gMTAyNClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBoYXNoVG9Qcml2YXRlU2NhbGFyOiBleHBlY3RlZCAke21pbkxlbn0tMTAyNCBieXRlcyBvZiBpbnB1dCwgZ290ICR7aGFzaExlbn1gKTtcbiAgICBjb25zdCBudW0gPSBpc0xFID8gYnl0ZXNUb051bWJlckxFKGhhc2gpIDogYnl0ZXNUb051bWJlckJFKGhhc2gpO1xuICAgIHJldHVybiBtb2QobnVtLCBncm91cE9yZGVyIC0gXzFuKSArIF8xbjtcbn1cbi8qKlxuICogUmV0dXJucyB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgY29uc3VtZWQgYnkgdGhlIGZpZWxkIGVsZW1lbnQuXG4gKiBGb3IgZXhhbXBsZSwgMzIgYnl0ZXMgZm9yIHVzdWFsIDI1Ni1iaXQgd2VpZXJzdHJhc3MgY3VydmUuXG4gKiBAcGFyYW0gZmllbGRPcmRlciBudW1iZXIgb2YgZmllbGQgZWxlbWVudHMsIHVzdWFsbHkgQ1VSVkUublxuICogQHJldHVybnMgYnl0ZSBsZW5ndGggb2YgZmllbGRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZpZWxkQnl0ZXNMZW5ndGgoZmllbGRPcmRlcikge1xuICAgIGlmICh0eXBlb2YgZmllbGRPcmRlciAhPT0gJ2JpZ2ludCcpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZmllbGQgb3JkZXIgbXVzdCBiZSBiaWdpbnQnKTtcbiAgICBjb25zdCBiaXRMZW5ndGggPSBmaWVsZE9yZGVyLnRvU3RyaW5nKDIpLmxlbmd0aDtcbiAgICByZXR1cm4gTWF0aC5jZWlsKGJpdExlbmd0aCAvIDgpO1xufVxuLyoqXG4gKiBSZXR1cm5zIG1pbmltYWwgYW1vdW50IG9mIGJ5dGVzIHRoYXQgY2FuIGJlIHNhZmVseSByZWR1Y2VkXG4gKiBieSBmaWVsZCBvcmRlci5cbiAqIFNob3VsZCBiZSAyXi0xMjggZm9yIDEyOC1iaXQgY3VydmUgc3VjaCBhcyBQMjU2LlxuICogQHBhcmFtIGZpZWxkT3JkZXIgbnVtYmVyIG9mIGZpZWxkIGVsZW1lbnRzLCB1c3VhbGx5IENVUlZFLm5cbiAqIEByZXR1cm5zIGJ5dGUgbGVuZ3RoIG9mIHRhcmdldCBoYXNoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNaW5IYXNoTGVuZ3RoKGZpZWxkT3JkZXIpIHtcbiAgICBjb25zdCBsZW5ndGggPSBnZXRGaWVsZEJ5dGVzTGVuZ3RoKGZpZWxkT3JkZXIpO1xuICAgIHJldHVybiBsZW5ndGggKyBNYXRoLmNlaWwobGVuZ3RoIC8gMik7XG59XG4vKipcbiAqIFwiQ29uc3RhbnQtdGltZVwiIHByaXZhdGUga2V5IGdlbmVyYXRpb24gdXRpbGl0eS5cbiAqIENhbiB0YWtlIChuICsgbi8yKSBvciBtb3JlIGJ5dGVzIG9mIHVuaWZvcm0gaW5wdXQgZS5nLiBmcm9tIENTUFJORyBvciBLREZcbiAqIGFuZCBjb252ZXJ0IHRoZW0gaW50byBwcml2YXRlIHNjYWxhciwgd2l0aCB0aGUgbW9kdWxvIGJpYXMgYmVpbmcgbmVnbGlnaWJsZS5cbiAqIE5lZWRzIGF0IGxlYXN0IDQ4IGJ5dGVzIG9mIGlucHV0IGZvciAzMi1ieXRlIHByaXZhdGUga2V5LlxuICogaHR0cHM6Ly9yZXNlYXJjaC5rdWRlbHNraXNlY3VyaXR5LmNvbS8yMDIwLzA3LzI4L3RoZS1kZWZpbml0aXZlLWd1aWRlLXRvLW1vZHVsby1iaWFzLWFuZC1ob3ctdG8tYXZvaWQtaXQvXG4gKiBGSVBTIDE4Ni01LCBBLjIgaHR0cHM6Ly9jc3JjLm5pc3QuZ292L3B1YmxpY2F0aW9ucy9kZXRhaWwvZmlwcy8xODYvNS9maW5hbFxuICogUkZDIDkzODAsIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5MzgwI3NlY3Rpb24tNVxuICogQHBhcmFtIGhhc2ggaGFzaCBvdXRwdXQgZnJvbSBTSEEzIG9yIGEgc2ltaWxhciBmdW5jdGlvblxuICogQHBhcmFtIGdyb3VwT3JkZXIgc2l6ZSBvZiBzdWJncm91cCAtIChlLmcuIHNlY3AyNTZrMS5DVVJWRS5uKVxuICogQHBhcmFtIGlzTEUgaW50ZXJwcmV0IGhhc2ggYnl0ZXMgYXMgTEUgbnVtXG4gKiBAcmV0dXJucyB2YWxpZCBwcml2YXRlIHNjYWxhclxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwSGFzaFRvRmllbGQoa2V5LCBmaWVsZE9yZGVyLCBpc0xFID0gZmFsc2UpIHtcbiAgICBjb25zdCBsZW4gPSBrZXkubGVuZ3RoO1xuICAgIGNvbnN0IGZpZWxkTGVuID0gZ2V0RmllbGRCeXRlc0xlbmd0aChmaWVsZE9yZGVyKTtcbiAgICBjb25zdCBtaW5MZW4gPSBnZXRNaW5IYXNoTGVuZ3RoKGZpZWxkT3JkZXIpO1xuICAgIC8vIE5vIHNtYWxsIG51bWJlcnM6IG5lZWQgdG8gdW5kZXJzdGFuZCBiaWFzIHN0b3J5LiBObyBodWdlIG51bWJlcnM6IGVhc2llciB0byBkZXRlY3QgSlMgdGltaW5ncy5cbiAgICBpZiAobGVuIDwgMTYgfHwgbGVuIDwgbWluTGVuIHx8IGxlbiA+IDEwMjQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgJHttaW5MZW59LTEwMjQgYnl0ZXMgb2YgaW5wdXQsIGdvdCAke2xlbn1gKTtcbiAgICBjb25zdCBudW0gPSBpc0xFID8gYnl0ZXNUb051bWJlckJFKGtleSkgOiBieXRlc1RvTnVtYmVyTEUoa2V5KTtcbiAgICAvLyBgbW9kKHgsIDExKWAgY2FuIHNvbWV0aW1lcyBwcm9kdWNlIDAuIGBtb2QoeCwgMTApICsgMWAgaXMgdGhlIHNhbWUsIGJ1dCBubyAwXG4gICAgY29uc3QgcmVkdWNlZCA9IG1vZChudW0sIGZpZWxkT3JkZXIgLSBfMW4pICsgXzFuO1xuICAgIHJldHVybiBpc0xFID8gbnVtYmVyVG9CeXRlc0xFKHJlZHVjZWQsIGZpZWxkTGVuKSA6IG51bWJlclRvQnl0ZXNCRShyZWR1Y2VkLCBmaWVsZExlbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGFyLmpzLm1hcCIsImltcG9ydCB7IGhhc2ggYXMgYXNzZXJ0SGFzaCwgYnl0ZXMgYXMgYXNzZXJ0Qnl0ZXMsIGV4aXN0cyBhcyBhc3NlcnRFeGlzdHMgfSBmcm9tICcuL19hc3NlcnQuanMnO1xuaW1wb3J0IHsgSGFzaCwgdG9CeXRlcyB9IGZyb20gJy4vdXRpbHMuanMnO1xuLy8gSE1BQyAoUkZDIDIxMDQpXG5leHBvcnQgY2xhc3MgSE1BQyBleHRlbmRzIEhhc2gge1xuICAgIGNvbnN0cnVjdG9yKGhhc2gsIF9rZXkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICBhc3NlcnRIYXNoKGhhc2gpO1xuICAgICAgICBjb25zdCBrZXkgPSB0b0J5dGVzKF9rZXkpO1xuICAgICAgICB0aGlzLmlIYXNoID0gaGFzaC5jcmVhdGUoKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmlIYXNoLnVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgaW5zdGFuY2Ugb2YgY2xhc3Mgd2hpY2ggZXh0ZW5kcyB1dGlscy5IYXNoJyk7XG4gICAgICAgIHRoaXMuYmxvY2tMZW4gPSB0aGlzLmlIYXNoLmJsb2NrTGVuO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IHRoaXMuaUhhc2gub3V0cHV0TGVuO1xuICAgICAgICBjb25zdCBibG9ja0xlbiA9IHRoaXMuYmxvY2tMZW47XG4gICAgICAgIGNvbnN0IHBhZCA9IG5ldyBVaW50OEFycmF5KGJsb2NrTGVuKTtcbiAgICAgICAgLy8gYmxvY2tMZW4gY2FuIGJlIGJpZ2dlciB0aGFuIG91dHB1dExlblxuICAgICAgICBwYWQuc2V0KGtleS5sZW5ndGggPiBibG9ja0xlbiA/IGhhc2guY3JlYXRlKCkudXBkYXRlKGtleSkuZGlnZXN0KCkgOiBrZXkpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHBhZFtpXSBePSAweDM2O1xuICAgICAgICB0aGlzLmlIYXNoLnVwZGF0ZShwYWQpO1xuICAgICAgICAvLyBCeSBkb2luZyB1cGRhdGUgKHByb2Nlc3Npbmcgb2YgZmlyc3QgYmxvY2spIG9mIG91dGVyIGhhc2ggaGVyZSB3ZSBjYW4gcmUtdXNlIGl0IGJldHdlZW4gbXVsdGlwbGUgY2FsbHMgdmlhIGNsb25lXG4gICAgICAgIHRoaXMub0hhc2ggPSBoYXNoLmNyZWF0ZSgpO1xuICAgICAgICAvLyBVbmRvIGludGVybmFsIFhPUiAmJiBhcHBseSBvdXRlciBYT1JcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBwYWRbaV0gXj0gMHgzNiBeIDB4NWM7XG4gICAgICAgIHRoaXMub0hhc2gudXBkYXRlKHBhZCk7XG4gICAgICAgIHBhZC5maWxsKDApO1xuICAgIH1cbiAgICB1cGRhdGUoYnVmKSB7XG4gICAgICAgIGFzc2VydEV4aXN0cyh0aGlzKTtcbiAgICAgICAgdGhpcy5pSGFzaC51cGRhdGUoYnVmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRpZ2VzdEludG8ob3V0KSB7XG4gICAgICAgIGFzc2VydEV4aXN0cyh0aGlzKTtcbiAgICAgICAgYXNzZXJ0Qnl0ZXMob3V0LCB0aGlzLm91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmlIYXNoLmRpZ2VzdEludG8ob3V0KTtcbiAgICAgICAgdGhpcy5vSGFzaC51cGRhdGUob3V0KTtcbiAgICAgICAgdGhpcy5vSGFzaC5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIH1cbiAgICBkaWdlc3QoKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KHRoaXMub0hhc2gub3V0cHV0TGVuKTtcbiAgICAgICAgdGhpcy5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIF9jbG9uZUludG8odG8pIHtcbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBpbnN0YW5jZSB3aXRob3V0IGNhbGxpbmcgY29uc3RydWN0b3Igc2luY2Uga2V5IGFscmVhZHkgaW4gc3RhdGUgYW5kIHdlIGRvbid0IGtub3cgaXQuXG4gICAgICAgIHRvIHx8ICh0byA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLCB7fSkpO1xuICAgICAgICBjb25zdCB7IG9IYXNoLCBpSGFzaCwgZmluaXNoZWQsIGRlc3Ryb3llZCwgYmxvY2tMZW4sIG91dHB1dExlbiB9ID0gdGhpcztcbiAgICAgICAgdG8gPSB0bztcbiAgICAgICAgdG8uZmluaXNoZWQgPSBmaW5pc2hlZDtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gZGVzdHJveWVkO1xuICAgICAgICB0by5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0by5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRvLm9IYXNoID0gb0hhc2guX2Nsb25lSW50byh0by5vSGFzaCk7XG4gICAgICAgIHRvLmlIYXNoID0gaUhhc2guX2Nsb25lSW50byh0by5pSGFzaCk7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9IYXNoLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5pSGFzaC5kZXN0cm95KCk7XG4gICAgfVxufVxuLyoqXG4gKiBITUFDOiBSRkMyMTA0IG1lc3NhZ2UgYXV0aGVudGljYXRpb24gY29kZS5cbiAqIEBwYXJhbSBoYXNoIC0gZnVuY3Rpb24gdGhhdCB3b3VsZCBiZSB1c2VkIGUuZy4gc2hhMjU2XG4gKiBAcGFyYW0ga2V5IC0gbWVzc2FnZSBrZXlcbiAqIEBwYXJhbSBtZXNzYWdlIC0gbWVzc2FnZSBkYXRhXG4gKi9cbmV4cG9ydCBjb25zdCBobWFjID0gKGhhc2gsIGtleSwgbWVzc2FnZSkgPT4gbmV3IEhNQUMoaGFzaCwga2V5KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KCk7XG5obWFjLmNyZWF0ZSA9IChoYXNoLCBrZXkpID0+IG5ldyBITUFDKGhhc2gsIGtleSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1obWFjLmpzLm1hcCIsIi8qISBub2JsZS1jdXJ2ZXMgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbi8vIEFiZWxpYW4gZ3JvdXAgdXRpbGl0aWVzXG5pbXBvcnQgeyB2YWxpZGF0ZUZpZWxkLCBuTGVuZ3RoIH0gZnJvbSAnLi9tb2R1bGFyLmpzJztcbmltcG9ydCB7IHZhbGlkYXRlT2JqZWN0IH0gZnJvbSAnLi91dGlscy5qcyc7XG5jb25zdCBfMG4gPSBCaWdJbnQoMCk7XG5jb25zdCBfMW4gPSBCaWdJbnQoMSk7XG4vLyBFbGxpcHRpYyBjdXJ2ZSBtdWx0aXBsaWNhdGlvbiBvZiBQb2ludCBieSBzY2FsYXIuIEZyYWdpbGUuXG4vLyBTY2FsYXJzIHNob3VsZCBhbHdheXMgYmUgbGVzcyB0aGFuIGN1cnZlIG9yZGVyOiB0aGlzIHNob3VsZCBiZSBjaGVja2VkIGluc2lkZSBvZiBhIGN1cnZlIGl0c2VsZi5cbi8vIENyZWF0ZXMgcHJlY29tcHV0YXRpb24gdGFibGVzIGZvciBmYXN0IG11bHRpcGxpY2F0aW9uOlxuLy8gLSBwcml2YXRlIHNjYWxhciBpcyBzcGxpdCBieSBmaXhlZCBzaXplIHdpbmRvd3Mgb2YgVyBiaXRzXG4vLyAtIGV2ZXJ5IHdpbmRvdyBwb2ludCBpcyBjb2xsZWN0ZWQgZnJvbSB3aW5kb3cncyB0YWJsZSAmIGFkZGVkIHRvIGFjY3VtdWxhdG9yXG4vLyAtIHNpbmNlIHdpbmRvd3MgYXJlIGRpZmZlcmVudCwgc2FtZSBwb2ludCBpbnNpZGUgdGFibGVzIHdvbid0IGJlIGFjY2Vzc2VkIG1vcmUgdGhhbiBvbmNlIHBlciBjYWxjXG4vLyAtIGVhY2ggbXVsdGlwbGljYXRpb24gaXMgJ01hdGguY2VpbChDVVJWRV9PUkRFUiAvIPCdkYopICsgMScgcG9pbnQgYWRkaXRpb25zIChmaXhlZCBmb3IgYW55IHNjYWxhcilcbi8vIC0gKzEgd2luZG93IGlzIG5lY2Nlc3NhcnkgZm9yIHdOQUZcbi8vIC0gd05BRiByZWR1Y2VzIHRhYmxlIHNpemU6IDJ4IGxlc3MgbWVtb3J5ICsgMnggZmFzdGVyIGdlbmVyYXRpb24sIGJ1dCAxMCUgc2xvd2VyIG11bHRpcGxpY2F0aW9uXG4vLyBUT0RPOiBSZXNlYXJjaCByZXR1cm5pbmcgMmQgSlMgYXJyYXkgb2Ygd2luZG93cywgaW5zdGVhZCBvZiBhIHNpbmdsZSB3aW5kb3cuIFRoaXMgd291bGQgYWxsb3dcbi8vIHdpbmRvd3MgdG8gYmUgaW4gZGlmZmVyZW50IG1lbW9yeSBsb2NhdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiB3TkFGKGMsIGJpdHMpIHtcbiAgICBjb25zdCBjb25zdFRpbWVOZWdhdGUgPSAoY29uZGl0aW9uLCBpdGVtKSA9PiB7XG4gICAgICAgIGNvbnN0IG5lZyA9IGl0ZW0ubmVnYXRlKCk7XG4gICAgICAgIHJldHVybiBjb25kaXRpb24gPyBuZWcgOiBpdGVtO1xuICAgIH07XG4gICAgY29uc3Qgb3B0cyA9IChXKSA9PiB7XG4gICAgICAgIGNvbnN0IHdpbmRvd3MgPSBNYXRoLmNlaWwoYml0cyAvIFcpICsgMTsgLy8gKzEsIGJlY2F1c2VcbiAgICAgICAgY29uc3Qgd2luZG93U2l6ZSA9IDIgKiogKFcgLSAxKTsgLy8gLTEgYmVjYXVzZSB3ZSBza2lwIHplcm9cbiAgICAgICAgcmV0dXJuIHsgd2luZG93cywgd2luZG93U2l6ZSB9O1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uc3RUaW1lTmVnYXRlLFxuICAgICAgICAvLyBub24tY29uc3QgdGltZSBtdWx0aXBsaWNhdGlvbiBsYWRkZXJcbiAgICAgICAgdW5zYWZlTGFkZGVyKGVsbSwgbikge1xuICAgICAgICAgICAgbGV0IHAgPSBjLlpFUk87XG4gICAgICAgICAgICBsZXQgZCA9IGVsbTtcbiAgICAgICAgICAgIHdoaWxlIChuID4gXzBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKG4gJiBfMW4pXG4gICAgICAgICAgICAgICAgICAgIHAgPSBwLmFkZChkKTtcbiAgICAgICAgICAgICAgICBkID0gZC5kb3VibGUoKTtcbiAgICAgICAgICAgICAgICBuID4+PSBfMW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSB3TkFGIHByZWNvbXB1dGF0aW9uIHdpbmRvdy4gVXNlZCBmb3IgY2FjaGluZy5cbiAgICAgICAgICogRGVmYXVsdCB3aW5kb3cgc2l6ZSBpcyBzZXQgYnkgYHV0aWxzLnByZWNvbXB1dGUoKWAgYW5kIGlzIGVxdWFsIHRvIDguXG4gICAgICAgICAqIE51bWJlciBvZiBwcmVjb21wdXRlZCBwb2ludHMgZGVwZW5kcyBvbiB0aGUgY3VydmUgc2l6ZTpcbiAgICAgICAgICogMl4o8J2RiuKIkjEpICogKE1hdGguY2VpbCjwnZGbIC8g8J2RiikgKyAxKSwgd2hlcmU6XG4gICAgICAgICAqIC0g8J2RiiBpcyB0aGUgd2luZG93IHNpemVcbiAgICAgICAgICogLSDwnZGbIGlzIHRoZSBiaXRsZW5ndGggb2YgdGhlIGN1cnZlIG9yZGVyLlxuICAgICAgICAgKiBGb3IgYSAyNTYtYml0IGN1cnZlIGFuZCB3aW5kb3cgc2l6ZSA4LCB0aGUgbnVtYmVyIG9mIHByZWNvbXB1dGVkIHBvaW50cyBpcyAxMjggKiAzMyA9IDQyMjQuXG4gICAgICAgICAqIEByZXR1cm5zIHByZWNvbXB1dGVkIHBvaW50IHRhYmxlcyBmbGF0dGVuZWQgdG8gYSBzaW5nbGUgYXJyYXlcbiAgICAgICAgICovXG4gICAgICAgIHByZWNvbXB1dGVXaW5kb3coZWxtLCBXKSB7XG4gICAgICAgICAgICBjb25zdCB7IHdpbmRvd3MsIHdpbmRvd1NpemUgfSA9IG9wdHMoVyk7XG4gICAgICAgICAgICBjb25zdCBwb2ludHMgPSBbXTtcbiAgICAgICAgICAgIGxldCBwID0gZWxtO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSBwO1xuICAgICAgICAgICAgZm9yIChsZXQgd2luZG93ID0gMDsgd2luZG93IDwgd2luZG93czsgd2luZG93KyspIHtcbiAgICAgICAgICAgICAgICBiYXNlID0gcDtcbiAgICAgICAgICAgICAgICBwb2ludHMucHVzaChiYXNlKTtcbiAgICAgICAgICAgICAgICAvLyA9MSwgYmVjYXVzZSB3ZSBza2lwIHplcm9cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHdpbmRvd1NpemU7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBiYXNlID0gYmFzZS5hZGQocCk7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGJhc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwID0gYmFzZS5kb3VibGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwb2ludHM7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbXBsZW1lbnRzIGVjIG11bHRpcGxpY2F0aW9uIHVzaW5nIHByZWNvbXB1dGVkIHRhYmxlcyBhbmQgdy1hcnkgbm9uLWFkamFjZW50IGZvcm0uXG4gICAgICAgICAqIEBwYXJhbSBXIHdpbmRvdyBzaXplXG4gICAgICAgICAqIEBwYXJhbSBwcmVjb21wdXRlcyBwcmVjb21wdXRlZCB0YWJsZXNcbiAgICAgICAgICogQHBhcmFtIG4gc2NhbGFyICh3ZSBkb24ndCBjaGVjayBoZXJlLCBidXQgc2hvdWxkIGJlIGxlc3MgdGhhbiBjdXJ2ZSBvcmRlcilcbiAgICAgICAgICogQHJldHVybnMgcmVhbCBhbmQgZmFrZSAoZm9yIGNvbnN0LXRpbWUpIHBvaW50c1xuICAgICAgICAgKi9cbiAgICAgICAgd05BRihXLCBwcmVjb21wdXRlcywgbikge1xuICAgICAgICAgICAgLy8gVE9ETzogbWF5YmUgY2hlY2sgdGhhdCBzY2FsYXIgaXMgbGVzcyB0aGFuIGdyb3VwIG9yZGVyPyB3TkFGIGJlaGF2aW91cyBpcyB1bmRlZmluZWQgb3RoZXJ3aXNlXG4gICAgICAgICAgICAvLyBCdXQgbmVlZCB0byBjYXJlZnVsbHkgcmVtb3ZlIG90aGVyIGNoZWNrcyBiZWZvcmUgd05BRi4gT1JERVIgPT0gYml0cyBoZXJlXG4gICAgICAgICAgICBjb25zdCB7IHdpbmRvd3MsIHdpbmRvd1NpemUgfSA9IG9wdHMoVyk7XG4gICAgICAgICAgICBsZXQgcCA9IGMuWkVSTztcbiAgICAgICAgICAgIGxldCBmID0gYy5CQVNFO1xuICAgICAgICAgICAgY29uc3QgbWFzayA9IEJpZ0ludCgyICoqIFcgLSAxKTsgLy8gQ3JlYXRlIG1hc2sgd2l0aCBXIG9uZXM6IDBiMTExMSBmb3IgVz00IGV0Yy5cbiAgICAgICAgICAgIGNvbnN0IG1heE51bWJlciA9IDIgKiogVztcbiAgICAgICAgICAgIGNvbnN0IHNoaWZ0QnkgPSBCaWdJbnQoVyk7XG4gICAgICAgICAgICBmb3IgKGxldCB3aW5kb3cgPSAwOyB3aW5kb3cgPCB3aW5kb3dzOyB3aW5kb3crKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHdpbmRvdyAqIHdpbmRvd1NpemU7XG4gICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBXIGJpdHMuXG4gICAgICAgICAgICAgICAgbGV0IHdiaXRzID0gTnVtYmVyKG4gJiBtYXNrKTtcbiAgICAgICAgICAgICAgICAvLyBTaGlmdCBudW1iZXIgYnkgVyBiaXRzLlxuICAgICAgICAgICAgICAgIG4gPj49IHNoaWZ0Qnk7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGJpdHMgYXJlIGJpZ2dlciB0aGFuIG1heCBzaXplLCB3ZSdsbCBzcGxpdCB0aG9zZS5cbiAgICAgICAgICAgICAgICAvLyArMjI0ID0+IDI1NiAtIDMyXG4gICAgICAgICAgICAgICAgaWYgKHdiaXRzID4gd2luZG93U2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICB3Yml0cyAtPSBtYXhOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgIG4gKz0gXzFuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGNvZGUgd2FzIGZpcnN0IHdyaXR0ZW4gd2l0aCBhc3N1bXB0aW9uIHRoYXQgJ2YnIGFuZCAncCcgd2lsbCBuZXZlciBiZSBpbmZpbml0eSBwb2ludDpcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSBlYWNoIGFkZGl0aW9uIGlzIG11bHRpcGxpZWQgYnkgMiAqKiBXLCBpdCBjYW5ub3QgY2FuY2VsIGVhY2ggb3RoZXIuIEhvd2V2ZXIsXG4gICAgICAgICAgICAgICAgLy8gdGhlcmUgaXMgbmVnYXRlIG5vdzogaXQgaXMgcG9zc2libGUgdGhhdCBuZWdhdGVkIGVsZW1lbnQgZnJvbSBsb3cgdmFsdWVcbiAgICAgICAgICAgICAgICAvLyB3b3VsZCBiZSB0aGUgc2FtZSBhcyBoaWdoIGVsZW1lbnQsIHdoaWNoIHdpbGwgY3JlYXRlIGNhcnJ5IGludG8gbmV4dCB3aW5kb3cuXG4gICAgICAgICAgICAgICAgLy8gSXQncyBub3Qgb2J2aW91cyBob3cgdGhpcyBjYW4gZmFpbCwgYnV0IHN0aWxsIHdvcnRoIGludmVzdGlnYXRpbmcgbGF0ZXIuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UncmUgb250byBaZXJvIHBvaW50LlxuICAgICAgICAgICAgICAgIC8vIEFkZCByYW5kb20gcG9pbnQgaW5zaWRlIGN1cnJlbnQgd2luZG93IHRvIGYuXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0MSA9IG9mZnNldDtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQyID0gb2Zmc2V0ICsgTWF0aC5hYnMod2JpdHMpIC0gMTsgLy8gLTEgYmVjYXVzZSB3ZSBza2lwIHplcm9cbiAgICAgICAgICAgICAgICBjb25zdCBjb25kMSA9IHdpbmRvdyAlIDIgIT09IDA7XG4gICAgICAgICAgICAgICAgY29uc3QgY29uZDIgPSB3Yml0cyA8IDA7XG4gICAgICAgICAgICAgICAgaWYgKHdiaXRzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBtb3N0IGltcG9ydGFudCBwYXJ0IGZvciBjb25zdC10aW1lIGdldFB1YmxpY0tleVxuICAgICAgICAgICAgICAgICAgICBmID0gZi5hZGQoY29uc3RUaW1lTmVnYXRlKGNvbmQxLCBwcmVjb21wdXRlc1tvZmZzZXQxXSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcCA9IHAuYWRkKGNvbnN0VGltZU5lZ2F0ZShjb25kMiwgcHJlY29tcHV0ZXNbb2Zmc2V0Ml0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBKSVQtY29tcGlsZXIgc2hvdWxkIG5vdCBlbGltaW5hdGUgZiBoZXJlLCBzaW5jZSBpdCB3aWxsIGxhdGVyIGJlIHVzZWQgaW4gbm9ybWFsaXplWigpXG4gICAgICAgICAgICAvLyBFdmVuIGlmIHRoZSB2YXJpYWJsZSBpcyBzdGlsbCB1bnVzZWQsIHRoZXJlIGFyZSBzb21lIGNoZWNrcyB3aGljaCB3aWxsXG4gICAgICAgICAgICAvLyB0aHJvdyBhbiBleGNlcHRpb24sIHNvIGNvbXBpbGVyIG5lZWRzIHRvIHByb3ZlIHRoZXkgd29uJ3QgaGFwcGVuLCB3aGljaCBpcyBoYXJkLlxuICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB0aGVyZSBpcyBhIHdheSB0byBGIGJlIGluZmluaXR5LXBvaW50IGV2ZW4gaWYgcCBpcyBub3QsXG4gICAgICAgICAgICAvLyB3aGljaCBtYWtlcyBpdCBsZXNzIGNvbnN0LXRpbWU6IGFyb3VuZCAxIGJpZ2ludCBtdWx0aXBseS5cbiAgICAgICAgICAgIHJldHVybiB7IHAsIGYgfTtcbiAgICAgICAgfSxcbiAgICAgICAgd05BRkNhY2hlZChQLCBwcmVjb21wdXRlc01hcCwgbiwgdHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBXID0gUC5fV0lORE9XX1NJWkUgfHwgMTtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBwcmVjb21wdXRlcyBvbiBhIGZpcnN0IHJ1biwgcmV1c2UgdGhlbSBhZnRlclxuICAgICAgICAgICAgbGV0IGNvbXAgPSBwcmVjb21wdXRlc01hcC5nZXQoUCk7XG4gICAgICAgICAgICBpZiAoIWNvbXApIHtcbiAgICAgICAgICAgICAgICBjb21wID0gdGhpcy5wcmVjb21wdXRlV2luZG93KFAsIFcpO1xuICAgICAgICAgICAgICAgIGlmIChXICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZWNvbXB1dGVzTWFwLnNldChQLCB0cmFuc2Zvcm0oY29tcCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLndOQUYoVywgY29tcCwgbik7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUJhc2ljKGN1cnZlKSB7XG4gICAgdmFsaWRhdGVGaWVsZChjdXJ2ZS5GcCk7XG4gICAgdmFsaWRhdGVPYmplY3QoY3VydmUsIHtcbiAgICAgICAgbjogJ2JpZ2ludCcsXG4gICAgICAgIGg6ICdiaWdpbnQnLFxuICAgICAgICBHeDogJ2ZpZWxkJyxcbiAgICAgICAgR3k6ICdmaWVsZCcsXG4gICAgfSwge1xuICAgICAgICBuQml0TGVuZ3RoOiAnaXNTYWZlSW50ZWdlcicsXG4gICAgICAgIG5CeXRlTGVuZ3RoOiAnaXNTYWZlSW50ZWdlcicsXG4gICAgfSk7XG4gICAgLy8gU2V0IGRlZmF1bHRzXG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoe1xuICAgICAgICAuLi5uTGVuZ3RoKGN1cnZlLm4sIGN1cnZlLm5CaXRMZW5ndGgpLFxuICAgICAgICAuLi5jdXJ2ZSxcbiAgICAgICAgLi4ueyBwOiBjdXJ2ZS5GcC5PUkRFUiB9LFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VydmUuanMubWFwIiwiLyohIG5vYmxlLWN1cnZlcyAtIE1JVCBMaWNlbnNlIChjKSAyMDIyIFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuLy8gU2hvcnQgV2VpZXJzdHJhc3MgY3VydmUuIFRoZSBmb3JtdWxhIGlzOiB5wrIgPSB4wrMgKyBheCArIGJcbmltcG9ydCAqIGFzIG1vZCBmcm9tICcuL21vZHVsYXIuanMnO1xuaW1wb3J0ICogYXMgdXQgZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgeyBlbnN1cmVCeXRlcyB9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgd05BRiwgdmFsaWRhdGVCYXNpYyB9IGZyb20gJy4vY3VydmUuanMnO1xuZnVuY3Rpb24gdmFsaWRhdGVQb2ludE9wdHMoY3VydmUpIHtcbiAgICBjb25zdCBvcHRzID0gdmFsaWRhdGVCYXNpYyhjdXJ2ZSk7XG4gICAgdXQudmFsaWRhdGVPYmplY3Qob3B0cywge1xuICAgICAgICBhOiAnZmllbGQnLFxuICAgICAgICBiOiAnZmllbGQnLFxuICAgIH0sIHtcbiAgICAgICAgYWxsb3dlZFByaXZhdGVLZXlMZW5ndGhzOiAnYXJyYXknLFxuICAgICAgICB3cmFwUHJpdmF0ZUtleTogJ2Jvb2xlYW4nLFxuICAgICAgICBpc1RvcnNpb25GcmVlOiAnZnVuY3Rpb24nLFxuICAgICAgICBjbGVhckNvZmFjdG9yOiAnZnVuY3Rpb24nLFxuICAgICAgICBhbGxvd0luZmluaXR5UG9pbnQ6ICdib29sZWFuJyxcbiAgICAgICAgZnJvbUJ5dGVzOiAnZnVuY3Rpb24nLFxuICAgICAgICB0b0J5dGVzOiAnZnVuY3Rpb24nLFxuICAgIH0pO1xuICAgIGNvbnN0IHsgZW5kbywgRnAsIGEgfSA9IG9wdHM7XG4gICAgaWYgKGVuZG8pIHtcbiAgICAgICAgaWYgKCFGcC5lcWwoYSwgRnAuWkVSTykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRW5kb21vcnBoaXNtIGNhbiBvbmx5IGJlIGRlZmluZWQgZm9yIEtvYmxpdHogY3VydmVzIHRoYXQgaGF2ZSBhPTAnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGVuZG8gIT09ICdvYmplY3QnIHx8XG4gICAgICAgICAgICB0eXBlb2YgZW5kby5iZXRhICE9PSAnYmlnaW50JyB8fFxuICAgICAgICAgICAgdHlwZW9mIGVuZG8uc3BsaXRTY2FsYXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgZW5kb21vcnBoaXNtIHdpdGggYmV0YTogYmlnaW50IGFuZCBzcGxpdFNjYWxhcjogZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IC4uLm9wdHMgfSk7XG59XG4vLyBBU04uMSBERVIgZW5jb2RpbmcgdXRpbGl0aWVzXG5jb25zdCB7IGJ5dGVzVG9OdW1iZXJCRTogYjJuLCBoZXhUb0J5dGVzOiBoMmIgfSA9IHV0O1xuZXhwb3J0IGNvbnN0IERFUiA9IHtcbiAgICAvLyBhc24uMSBERVIgZW5jb2RpbmcgdXRpbHNcbiAgICBFcnI6IGNsYXNzIERFUkVyciBleHRlbmRzIEVycm9yIHtcbiAgICAgICAgY29uc3RydWN0b3IobSA9ICcnKSB7XG4gICAgICAgICAgICBzdXBlcihtKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgX3BhcnNlSW50KGRhdGEpIHtcbiAgICAgICAgY29uc3QgeyBFcnI6IEUgfSA9IERFUjtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgMiB8fCBkYXRhWzBdICE9PSAweDAyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEUoJ0ludmFsaWQgc2lnbmF0dXJlIGludGVnZXIgdGFnJyk7XG4gICAgICAgIGNvbnN0IGxlbiA9IGRhdGFbMV07XG4gICAgICAgIGNvbnN0IHJlcyA9IGRhdGEuc3ViYXJyYXkoMiwgbGVuICsgMik7XG4gICAgICAgIGlmICghbGVuIHx8IHJlcy5sZW5ndGggIT09IGxlbilcbiAgICAgICAgICAgIHRocm93IG5ldyBFKCdJbnZhbGlkIHNpZ25hdHVyZSBpbnRlZ2VyOiB3cm9uZyBsZW5ndGgnKTtcbiAgICAgICAgLy8gaHR0cHM6Ly9jcnlwdG8uc3RhY2tleGNoYW5nZS5jb20vYS81NzczNCBMZWZ0bW9zdCBiaXQgb2YgZmlyc3QgYnl0ZSBpcyAnbmVnYXRpdmUnIGZsYWcsXG4gICAgICAgIC8vIHNpbmNlIHdlIGFsd2F5cyB1c2UgcG9zaXRpdmUgaW50ZWdlcnMgaGVyZS4gSXQgbXVzdCBhbHdheXMgYmUgZW1wdHk6XG4gICAgICAgIC8vIC0gYWRkIHplcm8gYnl0ZSBpZiBleGlzdHNcbiAgICAgICAgLy8gLSBpZiBuZXh0IGJ5dGUgZG9lc24ndCBoYXZlIGEgZmxhZywgbGVhZGluZyB6ZXJvIGlzIG5vdCBhbGxvd2VkIChtaW5pbWFsIGVuY29kaW5nKVxuICAgICAgICBpZiAocmVzWzBdICYgMGIxMDAwMDAwMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFKCdJbnZhbGlkIHNpZ25hdHVyZSBpbnRlZ2VyOiBuZWdhdGl2ZScpO1xuICAgICAgICBpZiAocmVzWzBdID09PSAweDAwICYmICEocmVzWzFdICYgMGIxMDAwMDAwMCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRSgnSW52YWxpZCBzaWduYXR1cmUgaW50ZWdlcjogdW5uZWNlc3NhcnkgbGVhZGluZyB6ZXJvJyk7XG4gICAgICAgIHJldHVybiB7IGQ6IGIybihyZXMpLCBsOiBkYXRhLnN1YmFycmF5KGxlbiArIDIpIH07IC8vIGQgaXMgZGF0YSwgbCBpcyBsZWZ0XG4gICAgfSxcbiAgICB0b1NpZyhoZXgpIHtcbiAgICAgICAgLy8gcGFyc2UgREVSIHNpZ25hdHVyZVxuICAgICAgICBjb25zdCB7IEVycjogRSB9ID0gREVSO1xuICAgICAgICBjb25zdCBkYXRhID0gdHlwZW9mIGhleCA9PT0gJ3N0cmluZycgPyBoMmIoaGV4KSA6IGhleDtcbiAgICAgICAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1aThhIGV4cGVjdGVkJyk7XG4gICAgICAgIGxldCBsID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGlmIChsIDwgMiB8fCBkYXRhWzBdICE9IDB4MzApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRSgnSW52YWxpZCBzaWduYXR1cmUgdGFnJyk7XG4gICAgICAgIGlmIChkYXRhWzFdICE9PSBsIC0gMilcbiAgICAgICAgICAgIHRocm93IG5ldyBFKCdJbnZhbGlkIHNpZ25hdHVyZTogaW5jb3JyZWN0IGxlbmd0aCcpO1xuICAgICAgICBjb25zdCB7IGQ6IHIsIGw6IHNCeXRlcyB9ID0gREVSLl9wYXJzZUludChkYXRhLnN1YmFycmF5KDIpKTtcbiAgICAgICAgY29uc3QgeyBkOiBzLCBsOiByQnl0ZXNMZWZ0IH0gPSBERVIuX3BhcnNlSW50KHNCeXRlcyk7XG4gICAgICAgIGlmIChyQnl0ZXNMZWZ0Lmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBFKCdJbnZhbGlkIHNpZ25hdHVyZTogbGVmdCBieXRlcyBhZnRlciBwYXJzaW5nJyk7XG4gICAgICAgIHJldHVybiB7IHIsIHMgfTtcbiAgICB9LFxuICAgIGhleEZyb21TaWcoc2lnKSB7XG4gICAgICAgIC8vIEFkZCBsZWFkaW5nIHplcm8gaWYgZmlyc3QgYnl0ZSBoYXMgbmVnYXRpdmUgYml0IGVuYWJsZWQuIE1vcmUgZGV0YWlscyBpbiAnX3BhcnNlSW50J1xuICAgICAgICBjb25zdCBzbGljZSA9IChzKSA9PiAoTnVtYmVyLnBhcnNlSW50KHNbMF0sIDE2KSAmIDBiMTAwMCA/ICcwMCcgKyBzIDogcyk7XG4gICAgICAgIGNvbnN0IGggPSAobnVtKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBoZXggPSBudW0udG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgcmV0dXJuIGhleC5sZW5ndGggJiAxID8gYDAke2hleH1gIDogaGV4O1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzID0gc2xpY2UoaChzaWcucykpO1xuICAgICAgICBjb25zdCByID0gc2xpY2UoaChzaWcucikpO1xuICAgICAgICBjb25zdCBzaGwgPSBzLmxlbmd0aCAvIDI7XG4gICAgICAgIGNvbnN0IHJobCA9IHIubGVuZ3RoIC8gMjtcbiAgICAgICAgY29uc3Qgc2wgPSBoKHNobCk7XG4gICAgICAgIGNvbnN0IHJsID0gaChyaGwpO1xuICAgICAgICByZXR1cm4gYDMwJHtoKHJobCArIHNobCArIDQpfTAyJHtybH0ke3J9MDIke3NsfSR7c31gO1xuICAgIH0sXG59O1xuLy8gQmUgZnJpZW5kbHkgdG8gYmFkIEVDTUFTY3JpcHQgcGFyc2VycyBieSBub3QgdXNpbmcgYmlnaW50IGxpdGVyYWxzXG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IF8wbiA9IEJpZ0ludCgwKSwgXzFuID0gQmlnSW50KDEpLCBfMm4gPSBCaWdJbnQoMiksIF8zbiA9IEJpZ0ludCgzKSwgXzRuID0gQmlnSW50KDQpO1xuZXhwb3J0IGZ1bmN0aW9uIHdlaWVyc3RyYXNzUG9pbnRzKG9wdHMpIHtcbiAgICBjb25zdCBDVVJWRSA9IHZhbGlkYXRlUG9pbnRPcHRzKG9wdHMpO1xuICAgIGNvbnN0IHsgRnAgfSA9IENVUlZFOyAvLyBBbGwgY3VydmVzIGhhcyBzYW1lIGZpZWxkIC8gZ3JvdXAgbGVuZ3RoIGFzIGZvciBub3csIGJ1dCB0aGV5IGNhbiBkaWZmZXJcbiAgICBjb25zdCB0b0J5dGVzID0gQ1VSVkUudG9CeXRlcyB8fFxuICAgICAgICAoKF9jLCBwb2ludCwgX2lzQ29tcHJlc3NlZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYSA9IHBvaW50LnRvQWZmaW5lKCk7XG4gICAgICAgICAgICByZXR1cm4gdXQuY29uY2F0Qnl0ZXMoVWludDhBcnJheS5mcm9tKFsweDA0XSksIEZwLnRvQnl0ZXMoYS54KSwgRnAudG9CeXRlcyhhLnkpKTtcbiAgICAgICAgfSk7XG4gICAgY29uc3QgZnJvbUJ5dGVzID0gQ1VSVkUuZnJvbUJ5dGVzIHx8XG4gICAgICAgICgoYnl0ZXMpID0+IHtcbiAgICAgICAgICAgIC8vIGNvbnN0IGhlYWQgPSBieXRlc1swXTtcbiAgICAgICAgICAgIGNvbnN0IHRhaWwgPSBieXRlcy5zdWJhcnJheSgxKTtcbiAgICAgICAgICAgIC8vIGlmIChoZWFkICE9PSAweDA0KSB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgbm9uLWNvbXByZXNzZWQgZW5jb2RpbmcgaXMgc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICBjb25zdCB4ID0gRnAuZnJvbUJ5dGVzKHRhaWwuc3ViYXJyYXkoMCwgRnAuQllURVMpKTtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBGcC5mcm9tQnl0ZXModGFpbC5zdWJhcnJheShGcC5CWVRFUywgMiAqIEZwLkJZVEVTKSk7XG4gICAgICAgICAgICByZXR1cm4geyB4LCB5IH07XG4gICAgICAgIH0pO1xuICAgIC8qKlxuICAgICAqIHnCsiA9IHjCsyArIGF4ICsgYjogU2hvcnQgd2VpZXJzdHJhc3MgY3VydmUgZm9ybXVsYVxuICAgICAqIEByZXR1cm5zIHnCslxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdlaWVyc3RyYXNzRXF1YXRpb24oeCkge1xuICAgICAgICBjb25zdCB7IGEsIGIgfSA9IENVUlZFO1xuICAgICAgICBjb25zdCB4MiA9IEZwLnNxcih4KTsgLy8geCAqIHhcbiAgICAgICAgY29uc3QgeDMgPSBGcC5tdWwoeDIsIHgpOyAvLyB4MiAqIHhcbiAgICAgICAgcmV0dXJuIEZwLmFkZChGcC5hZGQoeDMsIEZwLm11bCh4LCBhKSksIGIpOyAvLyB4MyArIGEgKiB4ICsgYlxuICAgIH1cbiAgICAvLyBWYWxpZGF0ZSB3aGV0aGVyIHRoZSBwYXNzZWQgY3VydmUgcGFyYW1zIGFyZSB2YWxpZC5cbiAgICAvLyBXZSBjaGVjayBpZiBjdXJ2ZSBlcXVhdGlvbiB3b3JrcyBmb3IgZ2VuZXJhdG9yIHBvaW50LlxuICAgIC8vIGBhc3NlcnRWYWxpZGl0eSgpYCB3b24ndCB3b3JrOiBgaXNUb3JzaW9uRnJlZSgpYCBpcyBub3QgYXZhaWxhYmxlIGF0IHRoaXMgcG9pbnQgaW4gYmxzMTItMzgxLlxuICAgIC8vIFByb2plY3RpdmVQb2ludCBjbGFzcyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0LlxuICAgIGlmICghRnAuZXFsKEZwLnNxcihDVVJWRS5HeSksIHdlaWVyc3RyYXNzRXF1YXRpb24oQ1VSVkUuR3gpKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgZ2VuZXJhdG9yIHBvaW50OiBlcXVhdGlvbiBsZWZ0ICE9IHJpZ2h0Jyk7XG4gICAgLy8gVmFsaWQgZ3JvdXAgZWxlbWVudHMgcmVzaWRlIGluIHJhbmdlIDEuLm4tMVxuICAgIGZ1bmN0aW9uIGlzV2l0aGluQ3VydmVPcmRlcihudW0pIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBudW0gPT09ICdiaWdpbnQnICYmIF8wbiA8IG51bSAmJiBudW0gPCBDVVJWRS5uO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhc3NlcnRHRShudW0pIHtcbiAgICAgICAgaWYgKCFpc1dpdGhpbkN1cnZlT3JkZXIobnVtKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdmFsaWQgYmlnaW50OiAwIDwgYmlnaW50IDwgY3VydmUubicpO1xuICAgIH1cbiAgICAvLyBWYWxpZGF0ZXMgaWYgcHJpdiBrZXkgaXMgdmFsaWQgYW5kIGNvbnZlcnRzIGl0IHRvIGJpZ2ludC5cbiAgICAvLyBTdXBwb3J0cyBvcHRpb25zIGFsbG93ZWRQcml2YXRlS2V5TGVuZ3RocyBhbmQgd3JhcFByaXZhdGVLZXkuXG4gICAgZnVuY3Rpb24gbm9ybVByaXZhdGVLZXlUb1NjYWxhcihrZXkpIHtcbiAgICAgICAgY29uc3QgeyBhbGxvd2VkUHJpdmF0ZUtleUxlbmd0aHM6IGxlbmd0aHMsIG5CeXRlTGVuZ3RoLCB3cmFwUHJpdmF0ZUtleSwgbiB9ID0gQ1VSVkU7XG4gICAgICAgIGlmIChsZW5ndGhzICYmIHR5cGVvZiBrZXkgIT09ICdiaWdpbnQnKSB7XG4gICAgICAgICAgICBpZiAoa2V5IGluc3RhbmNlb2YgVWludDhBcnJheSlcbiAgICAgICAgICAgICAgICBrZXkgPSB1dC5ieXRlc1RvSGV4KGtleSk7XG4gICAgICAgICAgICAvLyBOb3JtYWxpemUgdG8gaGV4IHN0cmluZywgcGFkLiBFLmcuIFA1MjEgd291bGQgbm9ybSAxMzAtMTMyIGNoYXIgaGV4IHRvIDEzMi1jaGFyIGJ5dGVzXG4gICAgICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycgfHwgIWxlbmd0aHMuaW5jbHVkZXMoa2V5Lmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGtleScpO1xuICAgICAgICAgICAga2V5ID0ga2V5LnBhZFN0YXJ0KG5CeXRlTGVuZ3RoICogMiwgJzAnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbnVtO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbnVtID1cbiAgICAgICAgICAgICAgICB0eXBlb2Yga2V5ID09PSAnYmlnaW50J1xuICAgICAgICAgICAgICAgICAgICA/IGtleVxuICAgICAgICAgICAgICAgICAgICA6IHV0LmJ5dGVzVG9OdW1iZXJCRShlbnN1cmVCeXRlcygncHJpdmF0ZSBrZXknLCBrZXksIG5CeXRlTGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHByaXZhdGUga2V5IG11c3QgYmUgJHtuQnl0ZUxlbmd0aH0gYnl0ZXMsIGhleCBvciBiaWdpbnQsIG5vdCAke3R5cGVvZiBrZXl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdyYXBQcml2YXRlS2V5KVxuICAgICAgICAgICAgbnVtID0gbW9kLm1vZChudW0sIG4pOyAvLyBkaXNhYmxlZCBieSBkZWZhdWx0LCBlbmFibGVkIGZvciBCTFNcbiAgICAgICAgYXNzZXJ0R0UobnVtKTsgLy8gbnVtIGluIHJhbmdlIFsxLi5OLTFdXG4gICAgICAgIHJldHVybiBudW07XG4gICAgfVxuICAgIGNvbnN0IHBvaW50UHJlY29tcHV0ZXMgPSBuZXcgTWFwKCk7XG4gICAgZnVuY3Rpb24gYXNzZXJ0UHJqUG9pbnQob3RoZXIpIHtcbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBQb2ludCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2plY3RpdmVQb2ludCBleHBlY3RlZCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9qZWN0aXZlIFBvaW50IHdvcmtzIGluIDNkIC8gcHJvamVjdGl2ZSAoaG9tb2dlbmVvdXMpIGNvb3JkaW5hdGVzOiAoeCwgeSwgeikg4oiLICh4PXgveiwgeT15L3opXG4gICAgICogRGVmYXVsdCBQb2ludCB3b3JrcyBpbiAyZCAvIGFmZmluZSBjb29yZGluYXRlczogKHgsIHkpXG4gICAgICogV2UncmUgZG9pbmcgY2FsY3VsYXRpb25zIGluIHByb2plY3RpdmUsIGJlY2F1c2UgaXRzIG9wZXJhdGlvbnMgZG9uJ3QgcmVxdWlyZSBjb3N0bHkgaW52ZXJzaW9uLlxuICAgICAqL1xuICAgIGNsYXNzIFBvaW50IHtcbiAgICAgICAgY29uc3RydWN0b3IocHgsIHB5LCBweikge1xuICAgICAgICAgICAgdGhpcy5weCA9IHB4O1xuICAgICAgICAgICAgdGhpcy5weSA9IHB5O1xuICAgICAgICAgICAgdGhpcy5weiA9IHB6O1xuICAgICAgICAgICAgaWYgKHB4ID09IG51bGwgfHwgIUZwLmlzVmFsaWQocHgpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigneCByZXF1aXJlZCcpO1xuICAgICAgICAgICAgaWYgKHB5ID09IG51bGwgfHwgIUZwLmlzVmFsaWQocHkpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigneSByZXF1aXJlZCcpO1xuICAgICAgICAgICAgaWYgKHB6ID09IG51bGwgfHwgIUZwLmlzVmFsaWQocHopKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigneiByZXF1aXJlZCcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIERvZXMgbm90IHZhbGlkYXRlIGlmIHRoZSBwb2ludCBpcyBvbi1jdXJ2ZS5cbiAgICAgICAgLy8gVXNlIGZyb21IZXggaW5zdGVhZCwgb3IgY2FsbCBhc3NlcnRWYWxpZGl0eSgpIGxhdGVyLlxuICAgICAgICBzdGF0aWMgZnJvbUFmZmluZShwKSB7XG4gICAgICAgICAgICBjb25zdCB7IHgsIHkgfSA9IHAgfHwge307XG4gICAgICAgICAgICBpZiAoIXAgfHwgIUZwLmlzVmFsaWQoeCkgfHwgIUZwLmlzVmFsaWQoeSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGFmZmluZSBwb2ludCcpO1xuICAgICAgICAgICAgaWYgKHAgaW5zdGFuY2VvZiBQb2ludClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2plY3RpdmUgcG9pbnQgbm90IGFsbG93ZWQnKTtcbiAgICAgICAgICAgIGNvbnN0IGlzMCA9IChpKSA9PiBGcC5lcWwoaSwgRnAuWkVSTyk7XG4gICAgICAgICAgICAvLyBmcm9tQWZmaW5lKHg6MCwgeTowKSB3b3VsZCBwcm9kdWNlICh4OjAsIHk6MCwgejoxKSwgYnV0IHdlIG5lZWQgKHg6MCwgeToxLCB6OjApXG4gICAgICAgICAgICBpZiAoaXMwKHgpICYmIGlzMCh5KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gUG9pbnQuWkVSTztcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9pbnQoeCwgeSwgRnAuT05FKTtcbiAgICAgICAgfVxuICAgICAgICBnZXQgeCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvQWZmaW5lKCkueDtcbiAgICAgICAgfVxuICAgICAgICBnZXQgeSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvQWZmaW5lKCkueTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogVGFrZXMgYSBidW5jaCBvZiBQcm9qZWN0aXZlIFBvaW50cyBidXQgZXhlY3V0ZXMgb25seSBvbmVcbiAgICAgICAgICogaW52ZXJzaW9uIG9uIGFsbCBvZiB0aGVtLiBJbnZlcnNpb24gaXMgdmVyeSBzbG93IG9wZXJhdGlvbixcbiAgICAgICAgICogc28gdGhpcyBpbXByb3ZlcyBwZXJmb3JtYW5jZSBtYXNzaXZlbHkuXG4gICAgICAgICAqIE9wdGltaXphdGlvbjogY29udmVydHMgYSBsaXN0IG9mIHByb2plY3RpdmUgcG9pbnRzIHRvIGEgbGlzdCBvZiBpZGVudGljYWwgcG9pbnRzIHdpdGggWj0xLlxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIG5vcm1hbGl6ZVoocG9pbnRzKSB7XG4gICAgICAgICAgICBjb25zdCB0b0ludiA9IEZwLmludmVydEJhdGNoKHBvaW50cy5tYXAoKHApID0+IHAucHopKTtcbiAgICAgICAgICAgIHJldHVybiBwb2ludHMubWFwKChwLCBpKSA9PiBwLnRvQWZmaW5lKHRvSW52W2ldKSkubWFwKFBvaW50LmZyb21BZmZpbmUpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyBoYXNoIHN0cmluZyBvciBVaW50OEFycmF5IHRvIFBvaW50LlxuICAgICAgICAgKiBAcGFyYW0gaGV4IHNob3J0L2xvbmcgRUNEU0EgaGV4XG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgZnJvbUhleChoZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IFAgPSBQb2ludC5mcm9tQWZmaW5lKGZyb21CeXRlcyhlbnN1cmVCeXRlcygncG9pbnRIZXgnLCBoZXgpKSk7XG4gICAgICAgICAgICBQLmFzc2VydFZhbGlkaXR5KCk7XG4gICAgICAgICAgICByZXR1cm4gUDtcbiAgICAgICAgfVxuICAgICAgICAvLyBNdWx0aXBsaWVzIGdlbmVyYXRvciBwb2ludCBieSBwcml2YXRlS2V5LlxuICAgICAgICBzdGF0aWMgZnJvbVByaXZhdGVLZXkocHJpdmF0ZUtleSkge1xuICAgICAgICAgICAgcmV0dXJuIFBvaW50LkJBU0UubXVsdGlwbHkobm9ybVByaXZhdGVLZXlUb1NjYWxhcihwcml2YXRlS2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gXCJQcml2YXRlIG1ldGhvZFwiLCBkb24ndCB1c2UgaXQgZGlyZWN0bHlcbiAgICAgICAgX3NldFdpbmRvd1NpemUod2luZG93U2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5fV0lORE9XX1NJWkUgPSB3aW5kb3dTaXplO1xuICAgICAgICAgICAgcG9pbnRQcmVjb21wdXRlcy5kZWxldGUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQSBwb2ludCBvbiBjdXJ2ZSBpcyB2YWxpZCBpZiBpdCBjb25mb3JtcyB0byBlcXVhdGlvbi5cbiAgICAgICAgYXNzZXJ0VmFsaWRpdHkoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pczAoKSkge1xuICAgICAgICAgICAgICAgIC8vICgwLCAxLCAwKSBha2EgWkVSTyBpcyBpbnZhbGlkIGluIG1vc3QgY29udGV4dHMuXG4gICAgICAgICAgICAgICAgLy8gSW4gQkxTLCBaRVJPIGNhbiBiZSBzZXJpYWxpemVkLCBzbyB3ZSBhbGxvdyBpdC5cbiAgICAgICAgICAgICAgICAvLyAoMCwgMCwgMCkgaXMgd3JvbmcgcmVwcmVzZW50YXRpb24gb2YgWkVSTyBhbmQgaXMgYWx3YXlzIGludmFsaWQuXG4gICAgICAgICAgICAgICAgaWYgKENVUlZFLmFsbG93SW5maW5pdHlQb2ludCAmJiAhRnAuaXMwKHRoaXMucHkpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgcG9pbnQ6IFpFUk8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNvbWUgM3JkLXBhcnR5IHRlc3QgdmVjdG9ycyByZXF1aXJlIGRpZmZlcmVudCB3b3JkaW5nIGJldHdlZW4gaGVyZSAmIGBmcm9tQ29tcHJlc3NlZEhleGBcbiAgICAgICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy50b0FmZmluZSgpO1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgeCwgeSBhcmUgdmFsaWQgZmllbGQgZWxlbWVudHNcbiAgICAgICAgICAgIGlmICghRnAuaXNWYWxpZCh4KSB8fCAhRnAuaXNWYWxpZCh5KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBwb2ludDogeCBvciB5IG5vdCBGRScpO1xuICAgICAgICAgICAgY29uc3QgbGVmdCA9IEZwLnNxcih5KTsgLy8gecKyXG4gICAgICAgICAgICBjb25zdCByaWdodCA9IHdlaWVyc3RyYXNzRXF1YXRpb24oeCk7IC8vIHjCsyArIGF4ICsgYlxuICAgICAgICAgICAgaWYgKCFGcC5lcWwobGVmdCwgcmlnaHQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIHBvaW50OiBlcXVhdGlvbiBsZWZ0ICE9IHJpZ2h0Jyk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNUb3JzaW9uRnJlZSgpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIHBvaW50OiBub3QgaW4gcHJpbWUtb3JkZXIgc3ViZ3JvdXAnKTtcbiAgICAgICAgfVxuICAgICAgICBoYXNFdmVuWSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgeSB9ID0gdGhpcy50b0FmZmluZSgpO1xuICAgICAgICAgICAgaWYgKEZwLmlzT2RkKVxuICAgICAgICAgICAgICAgIHJldHVybiAhRnAuaXNPZGQoeSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGaWVsZCBkb2Vzbid0IHN1cHBvcnQgaXNPZGRcIik7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbXBhcmUgb25lIHBvaW50IHRvIGFub3RoZXIuXG4gICAgICAgICAqL1xuICAgICAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgICAgIGFzc2VydFByalBvaW50KG90aGVyKTtcbiAgICAgICAgICAgIGNvbnN0IHsgcHg6IFgxLCBweTogWTEsIHB6OiBaMSB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgcHg6IFgyLCBweTogWTIsIHB6OiBaMiB9ID0gb3RoZXI7XG4gICAgICAgICAgICBjb25zdCBVMSA9IEZwLmVxbChGcC5tdWwoWDEsIFoyKSwgRnAubXVsKFgyLCBaMSkpO1xuICAgICAgICAgICAgY29uc3QgVTIgPSBGcC5lcWwoRnAubXVsKFkxLCBaMiksIEZwLm11bChZMiwgWjEpKTtcbiAgICAgICAgICAgIHJldHVybiBVMSAmJiBVMjtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogRmxpcHMgcG9pbnQgdG8gb25lIGNvcnJlc3BvbmRpbmcgdG8gKHgsIC15KSBpbiBBZmZpbmUgY29vcmRpbmF0ZXMuXG4gICAgICAgICAqL1xuICAgICAgICBuZWdhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMucHgsIEZwLm5lZyh0aGlzLnB5KSwgdGhpcy5weik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVuZXMtQ29zdGVsbG8tQmF0aW5hIGV4Y2VwdGlvbi1mcmVlIGRvdWJsaW5nIGZvcm11bGEuXG4gICAgICAgIC8vIFRoZXJlIGlzIDMwJSBmYXN0ZXIgSmFjb2JpYW4gZm9ybXVsYSwgYnV0IGl0IGlzIG5vdCBjb21wbGV0ZS5cbiAgICAgICAgLy8gaHR0cHM6Ly9lcHJpbnQuaWFjci5vcmcvMjAxNS8xMDYwLCBhbGdvcml0aG0gM1xuICAgICAgICAvLyBDb3N0OiA4TSArIDNTICsgMyphICsgMipiMyArIDE1YWRkLlxuICAgICAgICBkb3VibGUoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGEsIGIgfSA9IENVUlZFO1xuICAgICAgICAgICAgY29uc3QgYjMgPSBGcC5tdWwoYiwgXzNuKTtcbiAgICAgICAgICAgIGNvbnN0IHsgcHg6IFgxLCBweTogWTEsIHB6OiBaMSB9ID0gdGhpcztcbiAgICAgICAgICAgIGxldCBYMyA9IEZwLlpFUk8sIFkzID0gRnAuWkVSTywgWjMgPSBGcC5aRVJPOyAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgICAgIGxldCB0MCA9IEZwLm11bChYMSwgWDEpOyAvLyBzdGVwIDFcbiAgICAgICAgICAgIGxldCB0MSA9IEZwLm11bChZMSwgWTEpO1xuICAgICAgICAgICAgbGV0IHQyID0gRnAubXVsKFoxLCBaMSk7XG4gICAgICAgICAgICBsZXQgdDMgPSBGcC5tdWwoWDEsIFkxKTtcbiAgICAgICAgICAgIHQzID0gRnAuYWRkKHQzLCB0Myk7IC8vIHN0ZXAgNVxuICAgICAgICAgICAgWjMgPSBGcC5tdWwoWDEsIFoxKTtcbiAgICAgICAgICAgIFozID0gRnAuYWRkKFozLCBaMyk7XG4gICAgICAgICAgICBYMyA9IEZwLm11bChhLCBaMyk7XG4gICAgICAgICAgICBZMyA9IEZwLm11bChiMywgdDIpO1xuICAgICAgICAgICAgWTMgPSBGcC5hZGQoWDMsIFkzKTsgLy8gc3RlcCAxMFxuICAgICAgICAgICAgWDMgPSBGcC5zdWIodDEsIFkzKTtcbiAgICAgICAgICAgIFkzID0gRnAuYWRkKHQxLCBZMyk7XG4gICAgICAgICAgICBZMyA9IEZwLm11bChYMywgWTMpO1xuICAgICAgICAgICAgWDMgPSBGcC5tdWwodDMsIFgzKTtcbiAgICAgICAgICAgIFozID0gRnAubXVsKGIzLCBaMyk7IC8vIHN0ZXAgMTVcbiAgICAgICAgICAgIHQyID0gRnAubXVsKGEsIHQyKTtcbiAgICAgICAgICAgIHQzID0gRnAuc3ViKHQwLCB0Mik7XG4gICAgICAgICAgICB0MyA9IEZwLm11bChhLCB0Myk7XG4gICAgICAgICAgICB0MyA9IEZwLmFkZCh0MywgWjMpO1xuICAgICAgICAgICAgWjMgPSBGcC5hZGQodDAsIHQwKTsgLy8gc3RlcCAyMFxuICAgICAgICAgICAgdDAgPSBGcC5hZGQoWjMsIHQwKTtcbiAgICAgICAgICAgIHQwID0gRnAuYWRkKHQwLCB0Mik7XG4gICAgICAgICAgICB0MCA9IEZwLm11bCh0MCwgdDMpO1xuICAgICAgICAgICAgWTMgPSBGcC5hZGQoWTMsIHQwKTtcbiAgICAgICAgICAgIHQyID0gRnAubXVsKFkxLCBaMSk7IC8vIHN0ZXAgMjVcbiAgICAgICAgICAgIHQyID0gRnAuYWRkKHQyLCB0Mik7XG4gICAgICAgICAgICB0MCA9IEZwLm11bCh0MiwgdDMpO1xuICAgICAgICAgICAgWDMgPSBGcC5zdWIoWDMsIHQwKTtcbiAgICAgICAgICAgIFozID0gRnAubXVsKHQyLCB0MSk7XG4gICAgICAgICAgICBaMyA9IEZwLmFkZChaMywgWjMpOyAvLyBzdGVwIDMwXG4gICAgICAgICAgICBaMyA9IEZwLmFkZChaMywgWjMpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludChYMywgWTMsIFozKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZW5lcy1Db3N0ZWxsby1CYXRpbmEgZXhjZXB0aW9uLWZyZWUgYWRkaXRpb24gZm9ybXVsYS5cbiAgICAgICAgLy8gVGhlcmUgaXMgMzAlIGZhc3RlciBKYWNvYmlhbiBmb3JtdWxhLCBidXQgaXQgaXMgbm90IGNvbXBsZXRlLlxuICAgICAgICAvLyBodHRwczovL2VwcmludC5pYWNyLm9yZy8yMDE1LzEwNjAsIGFsZ29yaXRobSAxXG4gICAgICAgIC8vIENvc3Q6IDEyTSArIDBTICsgMyphICsgMypiMyArIDIzYWRkLlxuICAgICAgICBhZGQob3RoZXIpIHtcbiAgICAgICAgICAgIGFzc2VydFByalBvaW50KG90aGVyKTtcbiAgICAgICAgICAgIGNvbnN0IHsgcHg6IFgxLCBweTogWTEsIHB6OiBaMSB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgcHg6IFgyLCBweTogWTIsIHB6OiBaMiB9ID0gb3RoZXI7XG4gICAgICAgICAgICBsZXQgWDMgPSBGcC5aRVJPLCBZMyA9IEZwLlpFUk8sIFozID0gRnAuWkVSTzsgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgICBjb25zdCBhID0gQ1VSVkUuYTtcbiAgICAgICAgICAgIGNvbnN0IGIzID0gRnAubXVsKENVUlZFLmIsIF8zbik7XG4gICAgICAgICAgICBsZXQgdDAgPSBGcC5tdWwoWDEsIFgyKTsgLy8gc3RlcCAxXG4gICAgICAgICAgICBsZXQgdDEgPSBGcC5tdWwoWTEsIFkyKTtcbiAgICAgICAgICAgIGxldCB0MiA9IEZwLm11bChaMSwgWjIpO1xuICAgICAgICAgICAgbGV0IHQzID0gRnAuYWRkKFgxLCBZMSk7XG4gICAgICAgICAgICBsZXQgdDQgPSBGcC5hZGQoWDIsIFkyKTsgLy8gc3RlcCA1XG4gICAgICAgICAgICB0MyA9IEZwLm11bCh0MywgdDQpO1xuICAgICAgICAgICAgdDQgPSBGcC5hZGQodDAsIHQxKTtcbiAgICAgICAgICAgIHQzID0gRnAuc3ViKHQzLCB0NCk7XG4gICAgICAgICAgICB0NCA9IEZwLmFkZChYMSwgWjEpO1xuICAgICAgICAgICAgbGV0IHQ1ID0gRnAuYWRkKFgyLCBaMik7IC8vIHN0ZXAgMTBcbiAgICAgICAgICAgIHQ0ID0gRnAubXVsKHQ0LCB0NSk7XG4gICAgICAgICAgICB0NSA9IEZwLmFkZCh0MCwgdDIpO1xuICAgICAgICAgICAgdDQgPSBGcC5zdWIodDQsIHQ1KTtcbiAgICAgICAgICAgIHQ1ID0gRnAuYWRkKFkxLCBaMSk7XG4gICAgICAgICAgICBYMyA9IEZwLmFkZChZMiwgWjIpOyAvLyBzdGVwIDE1XG4gICAgICAgICAgICB0NSA9IEZwLm11bCh0NSwgWDMpO1xuICAgICAgICAgICAgWDMgPSBGcC5hZGQodDEsIHQyKTtcbiAgICAgICAgICAgIHQ1ID0gRnAuc3ViKHQ1LCBYMyk7XG4gICAgICAgICAgICBaMyA9IEZwLm11bChhLCB0NCk7XG4gICAgICAgICAgICBYMyA9IEZwLm11bChiMywgdDIpOyAvLyBzdGVwIDIwXG4gICAgICAgICAgICBaMyA9IEZwLmFkZChYMywgWjMpO1xuICAgICAgICAgICAgWDMgPSBGcC5zdWIodDEsIFozKTtcbiAgICAgICAgICAgIFozID0gRnAuYWRkKHQxLCBaMyk7XG4gICAgICAgICAgICBZMyA9IEZwLm11bChYMywgWjMpO1xuICAgICAgICAgICAgdDEgPSBGcC5hZGQodDAsIHQwKTsgLy8gc3RlcCAyNVxuICAgICAgICAgICAgdDEgPSBGcC5hZGQodDEsIHQwKTtcbiAgICAgICAgICAgIHQyID0gRnAubXVsKGEsIHQyKTtcbiAgICAgICAgICAgIHQ0ID0gRnAubXVsKGIzLCB0NCk7XG4gICAgICAgICAgICB0MSA9IEZwLmFkZCh0MSwgdDIpO1xuICAgICAgICAgICAgdDIgPSBGcC5zdWIodDAsIHQyKTsgLy8gc3RlcCAzMFxuICAgICAgICAgICAgdDIgPSBGcC5tdWwoYSwgdDIpO1xuICAgICAgICAgICAgdDQgPSBGcC5hZGQodDQsIHQyKTtcbiAgICAgICAgICAgIHQwID0gRnAubXVsKHQxLCB0NCk7XG4gICAgICAgICAgICBZMyA9IEZwLmFkZChZMywgdDApO1xuICAgICAgICAgICAgdDAgPSBGcC5tdWwodDUsIHQ0KTsgLy8gc3RlcCAzNVxuICAgICAgICAgICAgWDMgPSBGcC5tdWwodDMsIFgzKTtcbiAgICAgICAgICAgIFgzID0gRnAuc3ViKFgzLCB0MCk7XG4gICAgICAgICAgICB0MCA9IEZwLm11bCh0MywgdDEpO1xuICAgICAgICAgICAgWjMgPSBGcC5tdWwodDUsIFozKTtcbiAgICAgICAgICAgIFozID0gRnAuYWRkKFozLCB0MCk7IC8vIHN0ZXAgNDBcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9pbnQoWDMsIFkzLCBaMyk7XG4gICAgICAgIH1cbiAgICAgICAgc3VidHJhY3Qob3RoZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChvdGhlci5uZWdhdGUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaXMwKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXF1YWxzKFBvaW50LlpFUk8pO1xuICAgICAgICB9XG4gICAgICAgIHdOQUYobikge1xuICAgICAgICAgICAgcmV0dXJuIHduYWYud05BRkNhY2hlZCh0aGlzLCBwb2ludFByZWNvbXB1dGVzLCBuLCAoY29tcCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvSW52ID0gRnAuaW52ZXJ0QmF0Y2goY29tcC5tYXAoKHApID0+IHAucHopKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcC5tYXAoKHAsIGkpID0+IHAudG9BZmZpbmUodG9JbnZbaV0pKS5tYXAoUG9pbnQuZnJvbUFmZmluZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogTm9uLWNvbnN0YW50LXRpbWUgbXVsdGlwbGljYXRpb24uIFVzZXMgZG91YmxlLWFuZC1hZGQgYWxnb3JpdGhtLlxuICAgICAgICAgKiBJdCdzIGZhc3RlciwgYnV0IHNob3VsZCBvbmx5IGJlIHVzZWQgd2hlbiB5b3UgZG9uJ3QgY2FyZSBhYm91dFxuICAgICAgICAgKiBhbiBleHBvc2VkIHByaXZhdGUga2V5IGUuZy4gc2lnIHZlcmlmaWNhdGlvbiwgd2hpY2ggd29ya3Mgb3ZlciAqcHVibGljKiBrZXlzLlxuICAgICAgICAgKi9cbiAgICAgICAgbXVsdGlwbHlVbnNhZmUobikge1xuICAgICAgICAgICAgY29uc3QgSSA9IFBvaW50LlpFUk87XG4gICAgICAgICAgICBpZiAobiA9PT0gXzBuKVxuICAgICAgICAgICAgICAgIHJldHVybiBJO1xuICAgICAgICAgICAgYXNzZXJ0R0Uobik7IC8vIFdpbGwgdGhyb3cgb24gMFxuICAgICAgICAgICAgaWYgKG4gPT09IF8xbilcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgZW5kbyB9ID0gQ1VSVkU7XG4gICAgICAgICAgICBpZiAoIWVuZG8pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHduYWYudW5zYWZlTGFkZGVyKHRoaXMsIG4pO1xuICAgICAgICAgICAgLy8gQXBwbHkgZW5kb21vcnBoaXNtXG4gICAgICAgICAgICBsZXQgeyBrMW5lZywgazEsIGsybmVnLCBrMiB9ID0gZW5kby5zcGxpdFNjYWxhcihuKTtcbiAgICAgICAgICAgIGxldCBrMXAgPSBJO1xuICAgICAgICAgICAgbGV0IGsycCA9IEk7XG4gICAgICAgICAgICBsZXQgZCA9IHRoaXM7XG4gICAgICAgICAgICB3aGlsZSAoazEgPiBfMG4gfHwgazIgPiBfMG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoazEgJiBfMW4pXG4gICAgICAgICAgICAgICAgICAgIGsxcCA9IGsxcC5hZGQoZCk7XG4gICAgICAgICAgICAgICAgaWYgKGsyICYgXzFuKVxuICAgICAgICAgICAgICAgICAgICBrMnAgPSBrMnAuYWRkKGQpO1xuICAgICAgICAgICAgICAgIGQgPSBkLmRvdWJsZSgpO1xuICAgICAgICAgICAgICAgIGsxID4+PSBfMW47XG4gICAgICAgICAgICAgICAgazIgPj49IF8xbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrMW5lZylcbiAgICAgICAgICAgICAgICBrMXAgPSBrMXAubmVnYXRlKCk7XG4gICAgICAgICAgICBpZiAoazJuZWcpXG4gICAgICAgICAgICAgICAgazJwID0gazJwLm5lZ2F0ZSgpO1xuICAgICAgICAgICAgazJwID0gbmV3IFBvaW50KEZwLm11bChrMnAucHgsIGVuZG8uYmV0YSksIGsycC5weSwgazJwLnB6KTtcbiAgICAgICAgICAgIHJldHVybiBrMXAuYWRkKGsycCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0YW50IHRpbWUgbXVsdGlwbGljYXRpb24uXG4gICAgICAgICAqIFVzZXMgd05BRiBtZXRob2QuIFdpbmRvd2VkIG1ldGhvZCBtYXkgYmUgMTAlIGZhc3RlcixcbiAgICAgICAgICogYnV0IHRha2VzIDJ4IGxvbmdlciB0byBnZW5lcmF0ZSBhbmQgY29uc3VtZXMgMnggbWVtb3J5LlxuICAgICAgICAgKiBVc2VzIHByZWNvbXB1dGVzIHdoZW4gYXZhaWxhYmxlLlxuICAgICAgICAgKiBVc2VzIGVuZG9tb3JwaGlzbSBmb3IgS29ibGl0eiBjdXJ2ZXMuXG4gICAgICAgICAqIEBwYXJhbSBzY2FsYXIgYnkgd2hpY2ggdGhlIHBvaW50IHdvdWxkIGJlIG11bHRpcGxpZWRcbiAgICAgICAgICogQHJldHVybnMgTmV3IHBvaW50XG4gICAgICAgICAqL1xuICAgICAgICBtdWx0aXBseShzY2FsYXIpIHtcbiAgICAgICAgICAgIGFzc2VydEdFKHNjYWxhcik7XG4gICAgICAgICAgICBsZXQgbiA9IHNjYWxhcjtcbiAgICAgICAgICAgIGxldCBwb2ludCwgZmFrZTsgLy8gRmFrZSBwb2ludCBpcyB1c2VkIHRvIGNvbnN0LXRpbWUgbXVsdFxuICAgICAgICAgICAgY29uc3QgeyBlbmRvIH0gPSBDVVJWRTtcbiAgICAgICAgICAgIGlmIChlbmRvKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBrMW5lZywgazEsIGsybmVnLCBrMiB9ID0gZW5kby5zcGxpdFNjYWxhcihuKTtcbiAgICAgICAgICAgICAgICBsZXQgeyBwOiBrMXAsIGY6IGYxcCB9ID0gdGhpcy53TkFGKGsxKTtcbiAgICAgICAgICAgICAgICBsZXQgeyBwOiBrMnAsIGY6IGYycCB9ID0gdGhpcy53TkFGKGsyKTtcbiAgICAgICAgICAgICAgICBrMXAgPSB3bmFmLmNvbnN0VGltZU5lZ2F0ZShrMW5lZywgazFwKTtcbiAgICAgICAgICAgICAgICBrMnAgPSB3bmFmLmNvbnN0VGltZU5lZ2F0ZShrMm5lZywgazJwKTtcbiAgICAgICAgICAgICAgICBrMnAgPSBuZXcgUG9pbnQoRnAubXVsKGsycC5weCwgZW5kby5iZXRhKSwgazJwLnB5LCBrMnAucHopO1xuICAgICAgICAgICAgICAgIHBvaW50ID0gazFwLmFkZChrMnApO1xuICAgICAgICAgICAgICAgIGZha2UgPSBmMXAuYWRkKGYycCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHAsIGYgfSA9IHRoaXMud05BRihuKTtcbiAgICAgICAgICAgICAgICBwb2ludCA9IHA7XG4gICAgICAgICAgICAgICAgZmFrZSA9IGY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBOb3JtYWxpemUgYHpgIGZvciBib3RoIHBvaW50cywgYnV0IHJldHVybiBvbmx5IHJlYWwgb25lXG4gICAgICAgICAgICByZXR1cm4gUG9pbnQubm9ybWFsaXplWihbcG9pbnQsIGZha2VdKVswXTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogRWZmaWNpZW50bHkgY2FsY3VsYXRlIGBhUCArIGJRYC4gVW5zYWZlLCBjYW4gZXhwb3NlIHByaXZhdGUga2V5LCBpZiB1c2VkIGluY29ycmVjdGx5LlxuICAgICAgICAgKiBOb3QgdXNpbmcgU3RyYXVzcy1TaGFtaXIgdHJpY2s6IHByZWNvbXB1dGF0aW9uIHRhYmxlcyBhcmUgZmFzdGVyLlxuICAgICAgICAgKiBUaGUgdHJpY2sgY291bGQgYmUgdXNlZnVsIGlmIGJvdGggUCBhbmQgUSBhcmUgbm90IEcgKG5vdCBpbiBvdXIgY2FzZSkuXG4gICAgICAgICAqIEByZXR1cm5zIG5vbi16ZXJvIGFmZmluZSBwb2ludFxuICAgICAgICAgKi9cbiAgICAgICAgbXVsdGlwbHlBbmRBZGRVbnNhZmUoUSwgYSwgYikge1xuICAgICAgICAgICAgY29uc3QgRyA9IFBvaW50LkJBU0U7IC8vIE5vIFN0cmF1c3MtU2hhbWlyIHRyaWNrOiB3ZSBoYXZlIDEwJSBmYXN0ZXIgRyBwcmVjb21wdXRlc1xuICAgICAgICAgICAgY29uc3QgbXVsID0gKFAsIGEgLy8gU2VsZWN0IGZhc3RlciBtdWx0aXBseSgpIG1ldGhvZFxuICAgICAgICAgICAgKSA9PiAoYSA9PT0gXzBuIHx8IGEgPT09IF8xbiB8fCAhUC5lcXVhbHMoRykgPyBQLm11bHRpcGx5VW5zYWZlKGEpIDogUC5tdWx0aXBseShhKSk7XG4gICAgICAgICAgICBjb25zdCBzdW0gPSBtdWwodGhpcywgYSkuYWRkKG11bChRLCBiKSk7XG4gICAgICAgICAgICByZXR1cm4gc3VtLmlzMCgpID8gdW5kZWZpbmVkIDogc3VtO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbnZlcnRzIFByb2plY3RpdmUgcG9pbnQgdG8gYWZmaW5lICh4LCB5KSBjb29yZGluYXRlcy5cbiAgICAgICAgLy8gQ2FuIGFjY2VwdCBwcmVjb21wdXRlZCBaXi0xIC0gZm9yIGV4YW1wbGUsIGZyb20gaW52ZXJ0QmF0Y2guXG4gICAgICAgIC8vICh4LCB5LCB6KSDiiIsgKHg9eC96LCB5PXkveilcbiAgICAgICAgdG9BZmZpbmUoaXopIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcHg6IHgsIHB5OiB5LCBwejogeiB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IGlzMCA9IHRoaXMuaXMwKCk7XG4gICAgICAgICAgICAvLyBJZiBpbnZaIHdhcyAwLCB3ZSByZXR1cm4gemVybyBwb2ludC4gSG93ZXZlciB3ZSBzdGlsbCB3YW50IHRvIGV4ZWN1dGVcbiAgICAgICAgICAgIC8vIGFsbCBvcGVyYXRpb25zLCBzbyB3ZSByZXBsYWNlIGludlogd2l0aCBhIHJhbmRvbSBudW1iZXIsIDEuXG4gICAgICAgICAgICBpZiAoaXogPT0gbnVsbClcbiAgICAgICAgICAgICAgICBpeiA9IGlzMCA/IEZwLk9ORSA6IEZwLmludih6KTtcbiAgICAgICAgICAgIGNvbnN0IGF4ID0gRnAubXVsKHgsIGl6KTtcbiAgICAgICAgICAgIGNvbnN0IGF5ID0gRnAubXVsKHksIGl6KTtcbiAgICAgICAgICAgIGNvbnN0IHp6ID0gRnAubXVsKHosIGl6KTtcbiAgICAgICAgICAgIGlmIChpczApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgeDogRnAuWkVSTywgeTogRnAuWkVSTyB9O1xuICAgICAgICAgICAgaWYgKCFGcC5lcWwoenosIEZwLk9ORSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZaIHdhcyBpbnZhbGlkJyk7XG4gICAgICAgICAgICByZXR1cm4geyB4OiBheCwgeTogYXkgfTtcbiAgICAgICAgfVxuICAgICAgICBpc1RvcnNpb25GcmVlKCkge1xuICAgICAgICAgICAgY29uc3QgeyBoOiBjb2ZhY3RvciwgaXNUb3JzaW9uRnJlZSB9ID0gQ1VSVkU7XG4gICAgICAgICAgICBpZiAoY29mYWN0b3IgPT09IF8xbilcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gTm8gc3ViZ3JvdXBzLCBhbHdheXMgdG9yc2lvbi1mcmVlXG4gICAgICAgICAgICBpZiAoaXNUb3JzaW9uRnJlZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNUb3JzaW9uRnJlZShQb2ludCwgdGhpcyk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2lzVG9yc2lvbkZyZWUoKSBoYXMgbm90IGJlZW4gZGVjbGFyZWQgZm9yIHRoZSBlbGxpcHRpYyBjdXJ2ZScpO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyQ29mYWN0b3IoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGg6IGNvZmFjdG9yLCBjbGVhckNvZmFjdG9yIH0gPSBDVVJWRTtcbiAgICAgICAgICAgIGlmIChjb2ZhY3RvciA9PT0gXzFuKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOyAvLyBGYXN0LXBhdGhcbiAgICAgICAgICAgIGlmIChjbGVhckNvZmFjdG9yKVxuICAgICAgICAgICAgICAgIHJldHVybiBjbGVhckNvZmFjdG9yKFBvaW50LCB0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm11bHRpcGx5VW5zYWZlKENVUlZFLmgpO1xuICAgICAgICB9XG4gICAgICAgIHRvUmF3Qnl0ZXMoaXNDb21wcmVzc2VkID0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRvQnl0ZXMoUG9pbnQsIHRoaXMsIGlzQ29tcHJlc3NlZCk7XG4gICAgICAgIH1cbiAgICAgICAgdG9IZXgoaXNDb21wcmVzc2VkID0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHV0LmJ5dGVzVG9IZXgodGhpcy50b1Jhd0J5dGVzKGlzQ29tcHJlc3NlZCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFBvaW50LkJBU0UgPSBuZXcgUG9pbnQoQ1VSVkUuR3gsIENVUlZFLkd5LCBGcC5PTkUpO1xuICAgIFBvaW50LlpFUk8gPSBuZXcgUG9pbnQoRnAuWkVSTywgRnAuT05FLCBGcC5aRVJPKTtcbiAgICBjb25zdCBfYml0cyA9IENVUlZFLm5CaXRMZW5ndGg7XG4gICAgY29uc3Qgd25hZiA9IHdOQUYoUG9pbnQsIENVUlZFLmVuZG8gPyBNYXRoLmNlaWwoX2JpdHMgLyAyKSA6IF9iaXRzKTtcbiAgICAvLyBWYWxpZGF0ZSBpZiBnZW5lcmF0b3IgcG9pbnQgaXMgb24gY3VydmVcbiAgICByZXR1cm4ge1xuICAgICAgICBDVVJWRSxcbiAgICAgICAgUHJvamVjdGl2ZVBvaW50OiBQb2ludCxcbiAgICAgICAgbm9ybVByaXZhdGVLZXlUb1NjYWxhcixcbiAgICAgICAgd2VpZXJzdHJhc3NFcXVhdGlvbixcbiAgICAgICAgaXNXaXRoaW5DdXJ2ZU9yZGVyLFxuICAgIH07XG59XG5mdW5jdGlvbiB2YWxpZGF0ZU9wdHMoY3VydmUpIHtcbiAgICBjb25zdCBvcHRzID0gdmFsaWRhdGVCYXNpYyhjdXJ2ZSk7XG4gICAgdXQudmFsaWRhdGVPYmplY3Qob3B0cywge1xuICAgICAgICBoYXNoOiAnaGFzaCcsXG4gICAgICAgIGhtYWM6ICdmdW5jdGlvbicsXG4gICAgICAgIHJhbmRvbUJ5dGVzOiAnZnVuY3Rpb24nLFxuICAgIH0sIHtcbiAgICAgICAgYml0czJpbnQ6ICdmdW5jdGlvbicsXG4gICAgICAgIGJpdHMyaW50X21vZE46ICdmdW5jdGlvbicsXG4gICAgICAgIGxvd1M6ICdib29sZWFuJyxcbiAgICB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IGxvd1M6IHRydWUsIC4uLm9wdHMgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gd2VpZXJzdHJhc3MoY3VydmVEZWYpIHtcbiAgICBjb25zdCBDVVJWRSA9IHZhbGlkYXRlT3B0cyhjdXJ2ZURlZik7XG4gICAgY29uc3QgeyBGcCwgbjogQ1VSVkVfT1JERVIgfSA9IENVUlZFO1xuICAgIGNvbnN0IGNvbXByZXNzZWRMZW4gPSBGcC5CWVRFUyArIDE7IC8vIGUuZy4gMzMgZm9yIDMyXG4gICAgY29uc3QgdW5jb21wcmVzc2VkTGVuID0gMiAqIEZwLkJZVEVTICsgMTsgLy8gZS5nLiA2NSBmb3IgMzJcbiAgICBmdW5jdGlvbiBpc1ZhbGlkRmllbGRFbGVtZW50KG51bSkge1xuICAgICAgICByZXR1cm4gXzBuIDwgbnVtICYmIG51bSA8IEZwLk9SREVSOyAvLyAwIGlzIGJhbm5lZCBzaW5jZSBpdCdzIG5vdCBpbnZlcnRpYmxlIEZFXG4gICAgfVxuICAgIGZ1bmN0aW9uIG1vZE4oYSkge1xuICAgICAgICByZXR1cm4gbW9kLm1vZChhLCBDVVJWRV9PUkRFUik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGludk4oYSkge1xuICAgICAgICByZXR1cm4gbW9kLmludmVydChhLCBDVVJWRV9PUkRFUik7XG4gICAgfVxuICAgIGNvbnN0IHsgUHJvamVjdGl2ZVBvaW50OiBQb2ludCwgbm9ybVByaXZhdGVLZXlUb1NjYWxhciwgd2VpZXJzdHJhc3NFcXVhdGlvbiwgaXNXaXRoaW5DdXJ2ZU9yZGVyLCB9ID0gd2VpZXJzdHJhc3NQb2ludHMoe1xuICAgICAgICAuLi5DVVJWRSxcbiAgICAgICAgdG9CeXRlcyhfYywgcG9pbnQsIGlzQ29tcHJlc3NlZCkge1xuICAgICAgICAgICAgY29uc3QgYSA9IHBvaW50LnRvQWZmaW5lKCk7XG4gICAgICAgICAgICBjb25zdCB4ID0gRnAudG9CeXRlcyhhLngpO1xuICAgICAgICAgICAgY29uc3QgY2F0ID0gdXQuY29uY2F0Qnl0ZXM7XG4gICAgICAgICAgICBpZiAoaXNDb21wcmVzc2VkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhdChVaW50OEFycmF5LmZyb20oW3BvaW50Lmhhc0V2ZW5ZKCkgPyAweDAyIDogMHgwM10pLCB4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYXQoVWludDhBcnJheS5mcm9tKFsweDA0XSksIHgsIEZwLnRvQnl0ZXMoYS55KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZyb21CeXRlcyhieXRlcykge1xuICAgICAgICAgICAgY29uc3QgbGVuID0gYnl0ZXMubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgaGVhZCA9IGJ5dGVzWzBdO1xuICAgICAgICAgICAgY29uc3QgdGFpbCA9IGJ5dGVzLnN1YmFycmF5KDEpO1xuICAgICAgICAgICAgLy8gdGhpcy5hc3NlcnRWYWxpZGl0eSgpIGlzIGRvbmUgaW5zaWRlIG9mIGZyb21IZXhcbiAgICAgICAgICAgIGlmIChsZW4gPT09IGNvbXByZXNzZWRMZW4gJiYgKGhlYWQgPT09IDB4MDIgfHwgaGVhZCA9PT0gMHgwMykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gdXQuYnl0ZXNUb051bWJlckJFKHRhaWwpO1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZEZpZWxkRWxlbWVudCh4KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQb2ludCBpcyBub3Qgb24gY3VydmUnKTtcbiAgICAgICAgICAgICAgICBjb25zdCB5MiA9IHdlaWVyc3RyYXNzRXF1YXRpb24oeCk7IC8vIHnCsiA9IHjCsyArIGF4ICsgYlxuICAgICAgICAgICAgICAgIGxldCB5ID0gRnAuc3FydCh5Mik7IC8vIHkgPSB5wrIgXiAocCsxKS80XG4gICAgICAgICAgICAgICAgY29uc3QgaXNZT2RkID0gKHkgJiBfMW4pID09PSBfMW47XG4gICAgICAgICAgICAgICAgLy8gRUNEU0FcbiAgICAgICAgICAgICAgICBjb25zdCBpc0hlYWRPZGQgPSAoaGVhZCAmIDEpID09PSAxO1xuICAgICAgICAgICAgICAgIGlmIChpc0hlYWRPZGQgIT09IGlzWU9kZClcbiAgICAgICAgICAgICAgICAgICAgeSA9IEZwLm5lZyh5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB4LCB5IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChsZW4gPT09IHVuY29tcHJlc3NlZExlbiAmJiBoZWFkID09PSAweDA0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IEZwLmZyb21CeXRlcyh0YWlsLnN1YmFycmF5KDAsIEZwLkJZVEVTKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IEZwLmZyb21CeXRlcyh0YWlsLnN1YmFycmF5KEZwLkJZVEVTLCAyICogRnAuQllURVMpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB4LCB5IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBvaW50IG9mIGxlbmd0aCAke2xlbn0gd2FzIGludmFsaWQuIEV4cGVjdGVkICR7Y29tcHJlc3NlZExlbn0gY29tcHJlc3NlZCBieXRlcyBvciAke3VuY29tcHJlc3NlZExlbn0gdW5jb21wcmVzc2VkIGJ5dGVzYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgY29uc3QgbnVtVG9OQnl0ZVN0ciA9IChudW0pID0+IHV0LmJ5dGVzVG9IZXgodXQubnVtYmVyVG9CeXRlc0JFKG51bSwgQ1VSVkUubkJ5dGVMZW5ndGgpKTtcbiAgICBmdW5jdGlvbiBpc0JpZ2dlclRoYW5IYWxmT3JkZXIobnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IEhBTEYgPSBDVVJWRV9PUkRFUiA+PiBfMW47XG4gICAgICAgIHJldHVybiBudW1iZXIgPiBIQUxGO1xuICAgIH1cbiAgICBmdW5jdGlvbiBub3JtYWxpemVTKHMpIHtcbiAgICAgICAgcmV0dXJuIGlzQmlnZ2VyVGhhbkhhbGZPcmRlcihzKSA/IG1vZE4oLXMpIDogcztcbiAgICB9XG4gICAgLy8gc2xpY2UgYnl0ZXMgbnVtXG4gICAgY29uc3Qgc2xjTnVtID0gKGIsIGZyb20sIHRvKSA9PiB1dC5ieXRlc1RvTnVtYmVyQkUoYi5zbGljZShmcm9tLCB0bykpO1xuICAgIC8qKlxuICAgICAqIEVDRFNBIHNpZ25hdHVyZSB3aXRoIGl0cyAociwgcykgcHJvcGVydGllcy4gU3VwcG9ydHMgREVSICYgY29tcGFjdCByZXByZXNlbnRhdGlvbnMuXG4gICAgICovXG4gICAgY2xhc3MgU2lnbmF0dXJlIHtcbiAgICAgICAgY29uc3RydWN0b3IociwgcywgcmVjb3ZlcnkpIHtcbiAgICAgICAgICAgIHRoaXMuciA9IHI7XG4gICAgICAgICAgICB0aGlzLnMgPSBzO1xuICAgICAgICAgICAgdGhpcy5yZWNvdmVyeSA9IHJlY292ZXJ5O1xuICAgICAgICAgICAgdGhpcy5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHBhaXIgKGJ5dGVzIG9mIHIsIGJ5dGVzIG9mIHMpXG4gICAgICAgIHN0YXRpYyBmcm9tQ29tcGFjdChoZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IGwgPSBDVVJWRS5uQnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIGhleCA9IGVuc3VyZUJ5dGVzKCdjb21wYWN0U2lnbmF0dXJlJywgaGV4LCBsICogMik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNpZ25hdHVyZShzbGNOdW0oaGV4LCAwLCBsKSwgc2xjTnVtKGhleCwgbCwgMiAqIGwpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBERVIgZW5jb2RlZCBFQ0RTQSBzaWduYXR1cmVcbiAgICAgICAgLy8gaHR0cHM6Ly9iaXRjb2luLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy81NzY0NC93aGF0LWFyZS10aGUtcGFydHMtb2YtYS1iaXRjb2luLXRyYW5zYWN0aW9uLWlucHV0LXNjcmlwdFxuICAgICAgICBzdGF0aWMgZnJvbURFUihoZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgciwgcyB9ID0gREVSLnRvU2lnKGVuc3VyZUJ5dGVzKCdERVInLCBoZXgpKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKHIsIHMpO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydFZhbGlkaXR5KCkge1xuICAgICAgICAgICAgLy8gY2FuIHVzZSBhc3NlcnRHRSBoZXJlXG4gICAgICAgICAgICBpZiAoIWlzV2l0aGluQ3VydmVPcmRlcih0aGlzLnIpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignciBtdXN0IGJlIDAgPCByIDwgQ1VSVkUubicpO1xuICAgICAgICAgICAgaWYgKCFpc1dpdGhpbkN1cnZlT3JkZXIodGhpcy5zKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3MgbXVzdCBiZSAwIDwgcyA8IENVUlZFLm4nKTtcbiAgICAgICAgfVxuICAgICAgICBhZGRSZWNvdmVyeUJpdChyZWNvdmVyeSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaWduYXR1cmUodGhpcy5yLCB0aGlzLnMsIHJlY292ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZWNvdmVyUHVibGljS2V5KG1zZ0hhc2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgciwgcywgcmVjb3Zlcnk6IHJlYyB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IGggPSBiaXRzMmludF9tb2ROKGVuc3VyZUJ5dGVzKCdtc2dIYXNoJywgbXNnSGFzaCkpOyAvLyBUcnVuY2F0ZSBoYXNoXG4gICAgICAgICAgICBpZiAocmVjID09IG51bGwgfHwgIVswLCAxLCAyLCAzXS5pbmNsdWRlcyhyZWMpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncmVjb3ZlcnkgaWQgaW52YWxpZCcpO1xuICAgICAgICAgICAgY29uc3QgcmFkaiA9IHJlYyA9PT0gMiB8fCByZWMgPT09IDMgPyByICsgQ1VSVkUubiA6IHI7XG4gICAgICAgICAgICBpZiAocmFkaiA+PSBGcC5PUkRFUilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlY292ZXJ5IGlkIDIgb3IgMyBpbnZhbGlkJyk7XG4gICAgICAgICAgICBjb25zdCBwcmVmaXggPSAocmVjICYgMSkgPT09IDAgPyAnMDInIDogJzAzJztcbiAgICAgICAgICAgIGNvbnN0IFIgPSBQb2ludC5mcm9tSGV4KHByZWZpeCArIG51bVRvTkJ5dGVTdHIocmFkaikpO1xuICAgICAgICAgICAgY29uc3QgaXIgPSBpbnZOKHJhZGopOyAvLyByXi0xXG4gICAgICAgICAgICBjb25zdCB1MSA9IG1vZE4oLWggKiBpcik7IC8vIC1ocl4tMVxuICAgICAgICAgICAgY29uc3QgdTIgPSBtb2ROKHMgKiBpcik7IC8vIHNyXi0xXG4gICAgICAgICAgICBjb25zdCBRID0gUG9pbnQuQkFTRS5tdWx0aXBseUFuZEFkZFVuc2FmZShSLCB1MSwgdTIpOyAvLyAoc3JeLTEpUi0oaHJeLTEpRyA9IC0oaHJeLTEpRyArIChzcl4tMSlcbiAgICAgICAgICAgIGlmICghUSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BvaW50IGF0IGluZmluaWZ5Jyk7IC8vIHVuc2FmZSBpcyBmaW5lOiBubyBwcml2IGRhdGEgbGVha2VkXG4gICAgICAgICAgICBRLmFzc2VydFZhbGlkaXR5KCk7XG4gICAgICAgICAgICByZXR1cm4gUTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTaWduYXR1cmVzIHNob3VsZCBiZSBsb3ctcywgdG8gcHJldmVudCBtYWxsZWFiaWxpdHkuXG4gICAgICAgIGhhc0hpZ2hTKCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQmlnZ2VyVGhhbkhhbGZPcmRlcih0aGlzLnMpO1xuICAgICAgICB9XG4gICAgICAgIG5vcm1hbGl6ZVMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYXNIaWdoUygpID8gbmV3IFNpZ25hdHVyZSh0aGlzLnIsIG1vZE4oLXRoaXMucyksIHRoaXMucmVjb3ZlcnkpIDogdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvLyBERVItZW5jb2RlZFxuICAgICAgICB0b0RFUlJhd0J5dGVzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHV0LmhleFRvQnl0ZXModGhpcy50b0RFUkhleCgpKTtcbiAgICAgICAgfVxuICAgICAgICB0b0RFUkhleCgpIHtcbiAgICAgICAgICAgIHJldHVybiBERVIuaGV4RnJvbVNpZyh7IHI6IHRoaXMuciwgczogdGhpcy5zIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHBhZGRlZCBieXRlcyBvZiByLCB0aGVuIHBhZGRlZCBieXRlcyBvZiBzXG4gICAgICAgIHRvQ29tcGFjdFJhd0J5dGVzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHV0LmhleFRvQnl0ZXModGhpcy50b0NvbXBhY3RIZXgoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdG9Db21wYWN0SGV4KCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bVRvTkJ5dGVTdHIodGhpcy5yKSArIG51bVRvTkJ5dGVTdHIodGhpcy5zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB1dGlscyA9IHtcbiAgICAgICAgaXNWYWxpZFByaXZhdGVLZXkocHJpdmF0ZUtleSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBub3JtUHJpdmF0ZUtleVRvU2NhbGFyKHByaXZhdGVLZXkpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBub3JtUHJpdmF0ZUtleVRvU2NhbGFyOiBub3JtUHJpdmF0ZUtleVRvU2NhbGFyLFxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZXMgY3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlIHByaXZhdGUga2V5IGZyb20gcmFuZG9tIG9mIHNpemVcbiAgICAgICAgICogKGdyb3VwTGVuICsgY2VpbChncm91cExlbiAvIDIpKSB3aXRoIG1vZHVsbyBiaWFzIGJlaW5nIG5lZ2xpZ2libGUuXG4gICAgICAgICAqL1xuICAgICAgICByYW5kb21Qcml2YXRlS2V5OiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBtb2QuZ2V0TWluSGFzaExlbmd0aChDVVJWRS5uKTtcbiAgICAgICAgICAgIHJldHVybiBtb2QubWFwSGFzaFRvRmllbGQoQ1VSVkUucmFuZG9tQnl0ZXMobGVuZ3RoKSwgQ1VSVkUubik7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIHByZWNvbXB1dGUgdGFibGUgZm9yIGFuIGFyYml0cmFyeSBFQyBwb2ludC4gTWFrZXMgcG9pbnQgXCJjYWNoZWRcIi5cbiAgICAgICAgICogQWxsb3dzIHRvIG1hc3NpdmVseSBzcGVlZC11cCBgcG9pbnQubXVsdGlwbHkoc2NhbGFyKWAuXG4gICAgICAgICAqIEByZXR1cm5zIGNhY2hlZCBwb2ludFxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBjb25zdCBmYXN0ID0gdXRpbHMucHJlY29tcHV0ZSg4LCBQcm9qZWN0aXZlUG9pbnQuZnJvbUhleChzb21lb25lc1B1YktleSkpO1xuICAgICAgICAgKiBmYXN0Lm11bHRpcGx5KHByaXZLZXkpOyAvLyBtdWNoIGZhc3RlciBFQ0RIIG5vd1xuICAgICAgICAgKi9cbiAgICAgICAgcHJlY29tcHV0ZSh3aW5kb3dTaXplID0gOCwgcG9pbnQgPSBQb2ludC5CQVNFKSB7XG4gICAgICAgICAgICBwb2ludC5fc2V0V2luZG93U2l6ZSh3aW5kb3dTaXplKTtcbiAgICAgICAgICAgIHBvaW50Lm11bHRpcGx5KEJpZ0ludCgzKSk7IC8vIDMgaXMgYXJiaXRyYXJ5LCBqdXN0IG5lZWQgYW55IG51bWJlciBoZXJlXG4gICAgICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBwdWJsaWMga2V5IGZvciBhIHByaXZhdGUga2V5LiBDaGVja3MgZm9yIHZhbGlkaXR5IG9mIHRoZSBwcml2YXRlIGtleS5cbiAgICAgKiBAcGFyYW0gcHJpdmF0ZUtleSBwcml2YXRlIGtleVxuICAgICAqIEBwYXJhbSBpc0NvbXByZXNzZWQgd2hldGhlciB0byByZXR1cm4gY29tcGFjdCAoZGVmYXVsdCksIG9yIGZ1bGwga2V5XG4gICAgICogQHJldHVybnMgUHVibGljIGtleSwgZnVsbCB3aGVuIGlzQ29tcHJlc3NlZD1mYWxzZTsgc2hvcnQgd2hlbiBpc0NvbXByZXNzZWQ9dHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFB1YmxpY0tleShwcml2YXRlS2V5LCBpc0NvbXByZXNzZWQgPSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBQb2ludC5mcm9tUHJpdmF0ZUtleShwcml2YXRlS2V5KS50b1Jhd0J5dGVzKGlzQ29tcHJlc3NlZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFF1aWNrIGFuZCBkaXJ0eSBjaGVjayBmb3IgaXRlbSBiZWluZyBwdWJsaWMga2V5LiBEb2VzIG5vdCB2YWxpZGF0ZSBoZXgsIG9yIGJlaW5nIG9uLWN1cnZlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvYlB1YihpdGVtKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IGl0ZW0gaW5zdGFuY2VvZiBVaW50OEFycmF5O1xuICAgICAgICBjb25zdCBzdHIgPSB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZyc7XG4gICAgICAgIGNvbnN0IGxlbiA9IChhcnIgfHwgc3RyKSAmJiBpdGVtLmxlbmd0aDtcbiAgICAgICAgaWYgKGFycilcbiAgICAgICAgICAgIHJldHVybiBsZW4gPT09IGNvbXByZXNzZWRMZW4gfHwgbGVuID09PSB1bmNvbXByZXNzZWRMZW47XG4gICAgICAgIGlmIChzdHIpXG4gICAgICAgICAgICByZXR1cm4gbGVuID09PSAyICogY29tcHJlc3NlZExlbiB8fCBsZW4gPT09IDIgKiB1bmNvbXByZXNzZWRMZW47XG4gICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgUG9pbnQpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFQ0RIIChFbGxpcHRpYyBDdXJ2ZSBEaWZmaWUgSGVsbG1hbikuXG4gICAgICogQ29tcHV0ZXMgc2hhcmVkIHB1YmxpYyBrZXkgZnJvbSBwcml2YXRlIGtleSBhbmQgcHVibGljIGtleS5cbiAgICAgKiBDaGVja3M6IDEpIHByaXZhdGUga2V5IHZhbGlkaXR5IDIpIHNoYXJlZCBrZXkgaXMgb24tY3VydmUuXG4gICAgICogRG9lcyBOT1QgaGFzaCB0aGUgcmVzdWx0LlxuICAgICAqIEBwYXJhbSBwcml2YXRlQSBwcml2YXRlIGtleVxuICAgICAqIEBwYXJhbSBwdWJsaWNCIGRpZmZlcmVudCBwdWJsaWMga2V5XG4gICAgICogQHBhcmFtIGlzQ29tcHJlc3NlZCB3aGV0aGVyIHRvIHJldHVybiBjb21wYWN0IChkZWZhdWx0KSwgb3IgZnVsbCBrZXlcbiAgICAgKiBAcmV0dXJucyBzaGFyZWQgcHVibGljIGtleVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFNoYXJlZFNlY3JldChwcml2YXRlQSwgcHVibGljQiwgaXNDb21wcmVzc2VkID0gdHJ1ZSkge1xuICAgICAgICBpZiAoaXNQcm9iUHViKHByaXZhdGVBKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZmlyc3QgYXJnIG11c3QgYmUgcHJpdmF0ZSBrZXknKTtcbiAgICAgICAgaWYgKCFpc1Byb2JQdWIocHVibGljQikpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NlY29uZCBhcmcgbXVzdCBiZSBwdWJsaWMga2V5Jyk7XG4gICAgICAgIGNvbnN0IGIgPSBQb2ludC5mcm9tSGV4KHB1YmxpY0IpOyAvLyBjaGVjayBmb3IgYmVpbmcgb24tY3VydmVcbiAgICAgICAgcmV0dXJuIGIubXVsdGlwbHkobm9ybVByaXZhdGVLZXlUb1NjYWxhcihwcml2YXRlQSkpLnRvUmF3Qnl0ZXMoaXNDb21wcmVzc2VkKTtcbiAgICB9XG4gICAgLy8gUkZDNjk3OTogZW5zdXJlIEVDRFNBIG1zZyBpcyBYIGJ5dGVzIGFuZCA8IE4uIFJGQyBzdWdnZXN0cyBvcHRpb25hbCB0cnVuY2F0aW5nIHZpYSBiaXRzMm9jdGV0cy5cbiAgICAvLyBGSVBTIDE4Ni00IDQuNiBzdWdnZXN0cyB0aGUgbGVmdG1vc3QgbWluKG5CaXRMZW4sIG91dExlbikgYml0cywgd2hpY2ggbWF0Y2hlcyBiaXRzMmludC5cbiAgICAvLyBiaXRzMmludCBjYW4gcHJvZHVjZSByZXM+Tiwgd2UgY2FuIGRvIG1vZChyZXMsIE4pIHNpbmNlIHRoZSBiaXRMZW4gaXMgdGhlIHNhbWUuXG4gICAgLy8gaW50Mm9jdGV0cyBjYW4ndCBiZSB1c2VkOyBwYWRzIHNtYWxsIG1zZ3Mgd2l0aCAwOiB1bmFjY2VwdGF0YmxlIGZvciB0cnVuYyBhcyBwZXIgUkZDIHZlY3RvcnNcbiAgICBjb25zdCBiaXRzMmludCA9IENVUlZFLmJpdHMyaW50IHx8XG4gICAgICAgIGZ1bmN0aW9uIChieXRlcykge1xuICAgICAgICAgICAgLy8gRm9yIGN1cnZlcyB3aXRoIG5CaXRMZW5ndGggJSA4ICE9PSAwOiBiaXRzMm9jdGV0cyhiaXRzMm9jdGV0cyhtKSkgIT09IGJpdHMyb2N0ZXRzKG0pXG4gICAgICAgICAgICAvLyBmb3Igc29tZSBjYXNlcywgc2luY2UgYnl0ZXMubGVuZ3RoICogOCBpcyBub3QgYWN0dWFsIGJpdExlbmd0aC5cbiAgICAgICAgICAgIGNvbnN0IG51bSA9IHV0LmJ5dGVzVG9OdW1iZXJCRShieXRlcyk7IC8vIGNoZWNrIGZvciA9PSB1OCBkb25lIGhlcmVcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gYnl0ZXMubGVuZ3RoICogOCAtIENVUlZFLm5CaXRMZW5ndGg7IC8vIHRydW5jYXRlIHRvIG5CaXRMZW5ndGggbGVmdG1vc3QgYml0c1xuICAgICAgICAgICAgcmV0dXJuIGRlbHRhID4gMCA/IG51bSA+PiBCaWdJbnQoZGVsdGEpIDogbnVtO1xuICAgICAgICB9O1xuICAgIGNvbnN0IGJpdHMyaW50X21vZE4gPSBDVVJWRS5iaXRzMmludF9tb2ROIHx8XG4gICAgICAgIGZ1bmN0aW9uIChieXRlcykge1xuICAgICAgICAgICAgcmV0dXJuIG1vZE4oYml0czJpbnQoYnl0ZXMpKTsgLy8gY2FuJ3QgdXNlIGJ5dGVzVG9OdW1iZXJCRSBoZXJlXG4gICAgICAgIH07XG4gICAgLy8gTk9URTogcGFkcyBvdXRwdXQgd2l0aCB6ZXJvIGFzIHBlciBzcGVjXG4gICAgY29uc3QgT1JERVJfTUFTSyA9IHV0LmJpdE1hc2soQ1VSVkUubkJpdExlbmd0aCk7XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdG8gYnl0ZXMuIENoZWNrcyBpZiBudW0gaW4gYFswLi5PUkRFUl9NQVNLLTFdYCBlLmcuOiBgWzAuLjJeMjU2LTFdYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnQyb2N0ZXRzKG51bSkge1xuICAgICAgICBpZiAodHlwZW9mIG51bSAhPT0gJ2JpZ2ludCcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JpZ2ludCBleHBlY3RlZCcpO1xuICAgICAgICBpZiAoIShfMG4gPD0gbnVtICYmIG51bSA8IE9SREVSX01BU0spKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBiaWdpbnQgZXhwZWN0ZWQgPCAyXiR7Q1VSVkUubkJpdExlbmd0aH1gKTtcbiAgICAgICAgLy8gd29ya3Mgd2l0aCBvcmRlciwgY2FuIGhhdmUgZGlmZmVyZW50IHNpemUgdGhhbiBudW1Ub0ZpZWxkIVxuICAgICAgICByZXR1cm4gdXQubnVtYmVyVG9CeXRlc0JFKG51bSwgQ1VSVkUubkJ5dGVMZW5ndGgpO1xuICAgIH1cbiAgICAvLyBTdGVwcyBBLCBEIG9mIFJGQzY5NzkgMy4yXG4gICAgLy8gQ3JlYXRlcyBSRkM2OTc5IHNlZWQ7IGNvbnZlcnRzIG1zZy9wcml2S2V5IHRvIG51bWJlcnMuXG4gICAgLy8gVXNlZCBvbmx5IGluIHNpZ24sIG5vdCBpbiB2ZXJpZnkuXG4gICAgLy8gTk9URTogd2UgY2Fubm90IGFzc3VtZSBoZXJlIHRoYXQgbXNnSGFzaCBoYXMgc2FtZSBhbW91bnQgb2YgYnl0ZXMgYXMgY3VydmUgb3JkZXIsIHRoaXMgd2lsbCBiZSB3cm9uZyBhdCBsZWFzdCBmb3IgUDUyMS5cbiAgICAvLyBBbHNvIGl0IGNhbiBiZSBiaWdnZXIgZm9yIFAyMjQgKyBTSEEyNTZcbiAgICBmdW5jdGlvbiBwcmVwU2lnKG1zZ0hhc2gsIHByaXZhdGVLZXksIG9wdHMgPSBkZWZhdWx0U2lnT3B0cykge1xuICAgICAgICBpZiAoWydyZWNvdmVyZWQnLCAnY2Fub25pY2FsJ10uc29tZSgoaykgPT4gayBpbiBvcHRzKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2lnbigpIGxlZ2FjeSBvcHRpb25zIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgY29uc3QgeyBoYXNoLCByYW5kb21CeXRlcyB9ID0gQ1VSVkU7XG4gICAgICAgIGxldCB7IGxvd1MsIHByZWhhc2gsIGV4dHJhRW50cm9weTogZW50IH0gPSBvcHRzOyAvLyBnZW5lcmF0ZXMgbG93LXMgc2lncyBieSBkZWZhdWx0XG4gICAgICAgIGlmIChsb3dTID09IG51bGwpXG4gICAgICAgICAgICBsb3dTID0gdHJ1ZTsgLy8gUkZDNjk3OSAzLjI6IHdlIHNraXAgc3RlcCBBLCBiZWNhdXNlIHdlIGFscmVhZHkgcHJvdmlkZSBoYXNoXG4gICAgICAgIG1zZ0hhc2ggPSBlbnN1cmVCeXRlcygnbXNnSGFzaCcsIG1zZ0hhc2gpO1xuICAgICAgICBpZiAocHJlaGFzaClcbiAgICAgICAgICAgIG1zZ0hhc2ggPSBlbnN1cmVCeXRlcygncHJlaGFzaGVkIG1zZ0hhc2gnLCBoYXNoKG1zZ0hhc2gpKTtcbiAgICAgICAgLy8gV2UgY2FuJ3QgbGF0ZXIgY2FsbCBiaXRzMm9jdGV0cywgc2luY2UgbmVzdGVkIGJpdHMyaW50IGlzIGJyb2tlbiBmb3IgY3VydmVzXG4gICAgICAgIC8vIHdpdGggbkJpdExlbmd0aCAlIDggIT09IDAuIEJlY2F1c2Ugb2YgdGhhdCwgd2UgdW53cmFwIGl0IGhlcmUgYXMgaW50Mm9jdGV0cyBjYWxsLlxuICAgICAgICAvLyBjb25zdCBiaXRzMm9jdGV0cyA9IChiaXRzKSA9PiBpbnQyb2N0ZXRzKGJpdHMyaW50X21vZE4oYml0cykpXG4gICAgICAgIGNvbnN0IGgxaW50ID0gYml0czJpbnRfbW9kTihtc2dIYXNoKTtcbiAgICAgICAgY29uc3QgZCA9IG5vcm1Qcml2YXRlS2V5VG9TY2FsYXIocHJpdmF0ZUtleSk7IC8vIHZhbGlkYXRlIHByaXZhdGUga2V5LCBjb252ZXJ0IHRvIGJpZ2ludFxuICAgICAgICBjb25zdCBzZWVkQXJncyA9IFtpbnQyb2N0ZXRzKGQpLCBpbnQyb2N0ZXRzKGgxaW50KV07XG4gICAgICAgIC8vIGV4dHJhRW50cm9weS4gUkZDNjk3OSAzLjY6IGFkZGl0aW9uYWwgaycgKG9wdGlvbmFsKS5cbiAgICAgICAgaWYgKGVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBLID0gSE1BQ19LKFYgfHwgMHgwMCB8fCBpbnQyb2N0ZXRzKHgpIHx8IGJpdHMyb2N0ZXRzKGgxKSB8fCBrJylcbiAgICAgICAgICAgIGNvbnN0IGUgPSBlbnQgPT09IHRydWUgPyByYW5kb21CeXRlcyhGcC5CWVRFUykgOiBlbnQ7IC8vIGdlbmVyYXRlIHJhbmRvbSBieXRlcyBPUiBwYXNzIGFzLWlzXG4gICAgICAgICAgICBzZWVkQXJncy5wdXNoKGVuc3VyZUJ5dGVzKCdleHRyYUVudHJvcHknLCBlKSk7IC8vIGNoZWNrIGZvciBiZWluZyBieXRlc1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlZWQgPSB1dC5jb25jYXRCeXRlcyguLi5zZWVkQXJncyk7IC8vIFN0ZXAgRCBvZiBSRkM2OTc5IDMuMlxuICAgICAgICBjb25zdCBtID0gaDFpbnQ7IC8vIE5PVEU6IG5vIG5lZWQgdG8gY2FsbCBiaXRzMmludCBzZWNvbmQgdGltZSBoZXJlLCBpdCBpcyBpbnNpZGUgdHJ1bmNhdGVIYXNoIVxuICAgICAgICAvLyBDb252ZXJ0cyBzaWduYXR1cmUgcGFyYW1zIGludG8gcG9pbnQgdyByL3MsIGNoZWNrcyByZXN1bHQgZm9yIHZhbGlkaXR5LlxuICAgICAgICBmdW5jdGlvbiBrMnNpZyhrQnl0ZXMpIHtcbiAgICAgICAgICAgIC8vIFJGQyA2OTc5IFNlY3Rpb24gMy4yLCBzdGVwIDM6IGsgPSBiaXRzMmludChUKVxuICAgICAgICAgICAgY29uc3QgayA9IGJpdHMyaW50KGtCeXRlcyk7IC8vIENhbm5vdCB1c2UgZmllbGRzIG1ldGhvZHMsIHNpbmNlIGl0IGlzIGdyb3VwIGVsZW1lbnRcbiAgICAgICAgICAgIGlmICghaXNXaXRoaW5DdXJ2ZU9yZGVyKGspKVxuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gSW1wb3J0YW50OiBhbGwgbW9kKCkgY2FsbHMgaGVyZSBtdXN0IGJlIGRvbmUgb3ZlciBOXG4gICAgICAgICAgICBjb25zdCBpayA9IGludk4oayk7IC8vIGteLTEgbW9kIG5cbiAgICAgICAgICAgIGNvbnN0IHEgPSBQb2ludC5CQVNFLm11bHRpcGx5KGspLnRvQWZmaW5lKCk7IC8vIHEgPSBHa1xuICAgICAgICAgICAgY29uc3QgciA9IG1vZE4ocS54KTsgLy8gciA9IHEueCBtb2QgblxuICAgICAgICAgICAgaWYgKHIgPT09IF8wbilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBDYW4gdXNlIHNjYWxhciBibGluZGluZyBiXi0xKGJtICsgYmRyKSB3aGVyZSBiIOKIiCBbMSxx4oiSMV0gYWNjb3JkaW5nIHRvXG4gICAgICAgICAgICAvLyBodHRwczovL3RjaGVzLmlhY3Iub3JnL2luZGV4LnBocC9UQ0hFUy9hcnRpY2xlL3ZpZXcvNzMzNy82NTA5LiBXZSd2ZSBkZWNpZGVkIGFnYWluc3QgaXQ6XG4gICAgICAgICAgICAvLyBhKSBkZXBlbmRlbmN5IG9uIENTUFJORyBiKSAxNSUgc2xvd2Rvd24gYykgZG9lc24ndCByZWFsbHkgaGVscCBzaW5jZSBiaWdpbnRzIGFyZSBub3QgQ1RcbiAgICAgICAgICAgIGNvbnN0IHMgPSBtb2ROKGlrICogbW9kTihtICsgciAqIGQpKTsgLy8gTm90IHVzaW5nIGJsaW5kaW5nIGhlcmVcbiAgICAgICAgICAgIGlmIChzID09PSBfMG4pXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IHJlY292ZXJ5ID0gKHEueCA9PT0gciA/IDAgOiAyKSB8IE51bWJlcihxLnkgJiBfMW4pOyAvLyByZWNvdmVyeSBiaXQgKDIgb3IgMywgd2hlbiBxLnggPiBuKVxuICAgICAgICAgICAgbGV0IG5vcm1TID0gcztcbiAgICAgICAgICAgIGlmIChsb3dTICYmIGlzQmlnZ2VyVGhhbkhhbGZPcmRlcihzKSkge1xuICAgICAgICAgICAgICAgIG5vcm1TID0gbm9ybWFsaXplUyhzKTsgLy8gaWYgbG93UyB3YXMgcGFzc2VkLCBlbnN1cmUgcyBpcyBhbHdheXNcbiAgICAgICAgICAgICAgICByZWNvdmVyeSBePSAxOyAvLyAvLyBpbiB0aGUgYm90dG9tIGhhbGYgb2YgTlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaWduYXR1cmUociwgbm9ybVMsIHJlY292ZXJ5KTsgLy8gdXNlIG5vcm1TLCBub3Qgc1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNlZWQsIGsyc2lnIH07XG4gICAgfVxuICAgIGNvbnN0IGRlZmF1bHRTaWdPcHRzID0geyBsb3dTOiBDVVJWRS5sb3dTLCBwcmVoYXNoOiBmYWxzZSB9O1xuICAgIGNvbnN0IGRlZmF1bHRWZXJPcHRzID0geyBsb3dTOiBDVVJWRS5sb3dTLCBwcmVoYXNoOiBmYWxzZSB9O1xuICAgIC8qKlxuICAgICAqIFNpZ25zIG1lc3NhZ2UgaGFzaCB3aXRoIGEgcHJpdmF0ZSBrZXkuXG4gICAgICogYGBgXG4gICAgICogc2lnbihtLCBkLCBrKSB3aGVyZVxuICAgICAqICAgKHgsIHkpID0gRyDDlyBrXG4gICAgICogICByID0geCBtb2QgblxuICAgICAqICAgcyA9IChtICsgZHIpL2sgbW9kIG5cbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gbXNnSGFzaCBOT1QgbWVzc2FnZS4gbXNnIG5lZWRzIHRvIGJlIGhhc2hlZCB0byBgbXNnSGFzaGAsIG9yIHVzZSBgcHJlaGFzaGAuXG4gICAgICogQHBhcmFtIHByaXZLZXkgcHJpdmF0ZSBrZXlcbiAgICAgKiBAcGFyYW0gb3B0cyBsb3dTIGZvciBub24tbWFsbGVhYmxlIHNpZ3MuIGV4dHJhRW50cm9weSBmb3IgbWl4aW5nIHJhbmRvbW5lc3MgaW50byBrLiBwcmVoYXNoIHdpbGwgaGFzaCBmaXJzdCBhcmcuXG4gICAgICogQHJldHVybnMgc2lnbmF0dXJlIHdpdGggcmVjb3ZlcnkgcGFyYW1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaWduKG1zZ0hhc2gsIHByaXZLZXksIG9wdHMgPSBkZWZhdWx0U2lnT3B0cykge1xuICAgICAgICBjb25zdCB7IHNlZWQsIGsyc2lnIH0gPSBwcmVwU2lnKG1zZ0hhc2gsIHByaXZLZXksIG9wdHMpOyAvLyBTdGVwcyBBLCBEIG9mIFJGQzY5NzkgMy4yLlxuICAgICAgICBjb25zdCBDID0gQ1VSVkU7XG4gICAgICAgIGNvbnN0IGRyYmcgPSB1dC5jcmVhdGVIbWFjRHJiZyhDLmhhc2gub3V0cHV0TGVuLCBDLm5CeXRlTGVuZ3RoLCBDLmhtYWMpO1xuICAgICAgICByZXR1cm4gZHJiZyhzZWVkLCBrMnNpZyk7IC8vIFN0ZXBzIEIsIEMsIEQsIEUsIEYsIEdcbiAgICB9XG4gICAgLy8gRW5hYmxlIHByZWNvbXB1dGVzLiBTbG93cyBkb3duIGZpcnN0IHB1YmxpY0tleSBjb21wdXRhdGlvbiBieSAyMG1zLlxuICAgIFBvaW50LkJBU0UuX3NldFdpbmRvd1NpemUoOCk7XG4gICAgLy8gdXRpbHMucHJlY29tcHV0ZSg4LCBQcm9qZWN0aXZlUG9pbnQuQkFTRSlcbiAgICAvKipcbiAgICAgKiBWZXJpZmllcyBhIHNpZ25hdHVyZSBhZ2FpbnN0IG1lc3NhZ2UgaGFzaCBhbmQgcHVibGljIGtleS5cbiAgICAgKiBSZWplY3RzIGxvd1Mgc2lnbmF0dXJlcyBieSBkZWZhdWx0OiB0byBvdmVycmlkZSxcbiAgICAgKiBzcGVjaWZ5IG9wdGlvbiBge2xvd1M6IGZhbHNlfWAuIEltcGxlbWVudHMgc2VjdGlvbiA0LjEuNCBmcm9tIGh0dHBzOi8vd3d3LnNlY2cub3JnL3NlYzEtdjIucGRmOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogdmVyaWZ5KHIsIHMsIGgsIFApIHdoZXJlXG4gICAgICogICBVMSA9IGhzXi0xIG1vZCBuXG4gICAgICogICBVMiA9IHJzXi0xIG1vZCBuXG4gICAgICogICBSID0gVTHii4VHIC0gVTLii4VQXG4gICAgICogICBtb2QoUi54LCBuKSA9PSByXG4gICAgICogYGBgXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmVyaWZ5KHNpZ25hdHVyZSwgbXNnSGFzaCwgcHVibGljS2V5LCBvcHRzID0gZGVmYXVsdFZlck9wdHMpIHtcbiAgICAgICAgY29uc3Qgc2cgPSBzaWduYXR1cmU7XG4gICAgICAgIG1zZ0hhc2ggPSBlbnN1cmVCeXRlcygnbXNnSGFzaCcsIG1zZ0hhc2gpO1xuICAgICAgICBwdWJsaWNLZXkgPSBlbnN1cmVCeXRlcygncHVibGljS2V5JywgcHVibGljS2V5KTtcbiAgICAgICAgaWYgKCdzdHJpY3QnIGluIG9wdHMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ29wdGlvbnMuc3RyaWN0IHdhcyByZW5hbWVkIHRvIGxvd1MnKTtcbiAgICAgICAgY29uc3QgeyBsb3dTLCBwcmVoYXNoIH0gPSBvcHRzO1xuICAgICAgICBsZXQgX3NpZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IFA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNnID09PSAnc3RyaW5nJyB8fCBzZyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgICAgICAvLyBTaWduYXR1cmUgY2FuIGJlIHJlcHJlc2VudGVkIGluIDIgd2F5czogY29tcGFjdCAoMipuQnl0ZUxlbmd0aCkgJiBERVIgKHZhcmlhYmxlLWxlbmd0aCkuXG4gICAgICAgICAgICAgICAgLy8gU2luY2UgREVSIGNhbiBhbHNvIGJlIDIqbkJ5dGVMZW5ndGggYnl0ZXMsIHdlIGNoZWNrIGZvciBpdCBmaXJzdC5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBfc2lnID0gU2lnbmF0dXJlLmZyb21ERVIoc2cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZGVyRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoZGVyRXJyb3IgaW5zdGFuY2VvZiBERVIuRXJyKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGRlckVycm9yO1xuICAgICAgICAgICAgICAgICAgICBfc2lnID0gU2lnbmF0dXJlLmZyb21Db21wYWN0KHNnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Ygc2cgPT09ICdvYmplY3QnICYmIHR5cGVvZiBzZy5yID09PSAnYmlnaW50JyAmJiB0eXBlb2Ygc2cucyA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHIsIHMgfSA9IHNnO1xuICAgICAgICAgICAgICAgIF9zaWcgPSBuZXcgU2lnbmF0dXJlKHIsIHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQQVJTRScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUCA9IFBvaW50LmZyb21IZXgocHVibGljS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5tZXNzYWdlID09PSAnUEFSU0UnKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc2lnbmF0dXJlIG11c3QgYmUgU2lnbmF0dXJlIGluc3RhbmNlLCBVaW50OEFycmF5IG9yIGhleCBzdHJpbmdgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93UyAmJiBfc2lnLmhhc0hpZ2hTKCkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChwcmVoYXNoKVxuICAgICAgICAgICAgbXNnSGFzaCA9IENVUlZFLmhhc2gobXNnSGFzaCk7XG4gICAgICAgIGNvbnN0IHsgciwgcyB9ID0gX3NpZztcbiAgICAgICAgY29uc3QgaCA9IGJpdHMyaW50X21vZE4obXNnSGFzaCk7IC8vIENhbm5vdCB1c2UgZmllbGRzIG1ldGhvZHMsIHNpbmNlIGl0IGlzIGdyb3VwIGVsZW1lbnRcbiAgICAgICAgY29uc3QgaXMgPSBpbnZOKHMpOyAvLyBzXi0xXG4gICAgICAgIGNvbnN0IHUxID0gbW9kTihoICogaXMpOyAvLyB1MSA9IGhzXi0xIG1vZCBuXG4gICAgICAgIGNvbnN0IHUyID0gbW9kTihyICogaXMpOyAvLyB1MiA9IHJzXi0xIG1vZCBuXG4gICAgICAgIGNvbnN0IFIgPSBQb2ludC5CQVNFLm11bHRpcGx5QW5kQWRkVW5zYWZlKFAsIHUxLCB1Mik/LnRvQWZmaW5lKCk7IC8vIFIgPSB1MeKLhUcgKyB1MuKLhVBcbiAgICAgICAgaWYgKCFSKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCB2ID0gbW9kTihSLngpO1xuICAgICAgICByZXR1cm4gdiA9PT0gcjtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgQ1VSVkUsXG4gICAgICAgIGdldFB1YmxpY0tleSxcbiAgICAgICAgZ2V0U2hhcmVkU2VjcmV0LFxuICAgICAgICBzaWduLFxuICAgICAgICB2ZXJpZnksXG4gICAgICAgIFByb2plY3RpdmVQb2ludDogUG9pbnQsXG4gICAgICAgIFNpZ25hdHVyZSxcbiAgICAgICAgdXRpbHMsXG4gICAgfTtcbn1cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIFNoYWxsdWUgYW5kIHZhbiBkZSBXb2VzdGlqbmUgbWV0aG9kIGZvciBhbnkgd2VpZXJzdHJhc3MgY3VydmUuXG4gKiBUT0RPOiBjaGVjayBpZiB0aGVyZSBpcyBhIHdheSB0byBtZXJnZSB0aGlzIHdpdGggdXZSYXRpbyBpbiBFZHdhcmRzOyBtb3ZlIHRvIG1vZHVsYXIuXG4gKiBiID0gVHJ1ZSBhbmQgeSA9IHNxcnQodSAvIHYpIGlmICh1IC8gdikgaXMgc3F1YXJlIGluIEYsIGFuZFxuICogYiA9IEZhbHNlIGFuZCB5ID0gc3FydChaICogKHUgLyB2KSkgb3RoZXJ3aXNlLlxuICogQHBhcmFtIEZwXG4gKiBAcGFyYW0gWlxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNXVUZwU3FydFJhdGlvKEZwLCBaKSB7XG4gICAgLy8gR2VuZXJpYyBpbXBsZW1lbnRhdGlvblxuICAgIGNvbnN0IHEgPSBGcC5PUkRFUjtcbiAgICBsZXQgbCA9IF8wbjtcbiAgICBmb3IgKGxldCBvID0gcSAtIF8xbjsgbyAlIF8ybiA9PT0gXzBuOyBvIC89IF8ybilcbiAgICAgICAgbCArPSBfMW47XG4gICAgY29uc3QgYzEgPSBsOyAvLyAxLiBjMSwgdGhlIGxhcmdlc3QgaW50ZWdlciBzdWNoIHRoYXQgMl5jMSBkaXZpZGVzIHEgLSAxLlxuICAgIC8vIFdlIG5lZWQgMm4gKiogYzEgYW5kIDJuICoqIChjMS0xKS4gV2UgY2FuJ3QgdXNlICoqOyBidXQgd2UgY2FuIHVzZSA8PC5cbiAgICAvLyAybiAqKiBjMSA9PSAybiA8PCAoYzEtMSlcbiAgICBjb25zdCBfMm5fcG93X2MxXzEgPSBfMm4gPDwgKGMxIC0gXzFuIC0gXzFuKTtcbiAgICBjb25zdCBfMm5fcG93X2MxID0gXzJuX3Bvd19jMV8xICogXzJuO1xuICAgIGNvbnN0IGMyID0gKHEgLSBfMW4pIC8gXzJuX3Bvd19jMTsgLy8gMi4gYzIgPSAocSAtIDEpIC8gKDJeYzEpICAjIEludGVnZXIgYXJpdGhtZXRpY1xuICAgIGNvbnN0IGMzID0gKGMyIC0gXzFuKSAvIF8ybjsgLy8gMy4gYzMgPSAoYzIgLSAxKSAvIDIgICAgICAgICAgICAjIEludGVnZXIgYXJpdGhtZXRpY1xuICAgIGNvbnN0IGM0ID0gXzJuX3Bvd19jMSAtIF8xbjsgLy8gNC4gYzQgPSAyXmMxIC0gMSAgICAgICAgICAgICAgICAjIEludGVnZXIgYXJpdGhtZXRpY1xuICAgIGNvbnN0IGM1ID0gXzJuX3Bvd19jMV8xOyAvLyA1LiBjNSA9IDJeKGMxIC0gMSkgICAgICAgICAgICAgICAgICAjIEludGVnZXIgYXJpdGhtZXRpY1xuICAgIGNvbnN0IGM2ID0gRnAucG93KFosIGMyKTsgLy8gNi4gYzYgPSBaXmMyXG4gICAgY29uc3QgYzcgPSBGcC5wb3coWiwgKGMyICsgXzFuKSAvIF8ybik7IC8vIDcuIGM3ID0gWl4oKGMyICsgMSkgLyAyKVxuICAgIGxldCBzcXJ0UmF0aW8gPSAodSwgdikgPT4ge1xuICAgICAgICBsZXQgdHYxID0gYzY7IC8vIDEuIHR2MSA9IGM2XG4gICAgICAgIGxldCB0djIgPSBGcC5wb3codiwgYzQpOyAvLyAyLiB0djIgPSB2XmM0XG4gICAgICAgIGxldCB0djMgPSBGcC5zcXIodHYyKTsgLy8gMy4gdHYzID0gdHYyXjJcbiAgICAgICAgdHYzID0gRnAubXVsKHR2Mywgdik7IC8vIDQuIHR2MyA9IHR2MyAqIHZcbiAgICAgICAgbGV0IHR2NSA9IEZwLm11bCh1LCB0djMpOyAvLyA1LiB0djUgPSB1ICogdHYzXG4gICAgICAgIHR2NSA9IEZwLnBvdyh0djUsIGMzKTsgLy8gNi4gdHY1ID0gdHY1XmMzXG4gICAgICAgIHR2NSA9IEZwLm11bCh0djUsIHR2Mik7IC8vIDcuIHR2NSA9IHR2NSAqIHR2MlxuICAgICAgICB0djIgPSBGcC5tdWwodHY1LCB2KTsgLy8gOC4gdHYyID0gdHY1ICogdlxuICAgICAgICB0djMgPSBGcC5tdWwodHY1LCB1KTsgLy8gOS4gdHYzID0gdHY1ICogdVxuICAgICAgICBsZXQgdHY0ID0gRnAubXVsKHR2MywgdHYyKTsgLy8gMTAuIHR2NCA9IHR2MyAqIHR2MlxuICAgICAgICB0djUgPSBGcC5wb3codHY0LCBjNSk7IC8vIDExLiB0djUgPSB0djReYzVcbiAgICAgICAgbGV0IGlzUVIgPSBGcC5lcWwodHY1LCBGcC5PTkUpOyAvLyAxMi4gaXNRUiA9IHR2NSA9PSAxXG4gICAgICAgIHR2MiA9IEZwLm11bCh0djMsIGM3KTsgLy8gMTMuIHR2MiA9IHR2MyAqIGM3XG4gICAgICAgIHR2NSA9IEZwLm11bCh0djQsIHR2MSk7IC8vIDE0LiB0djUgPSB0djQgKiB0djFcbiAgICAgICAgdHYzID0gRnAuY21vdih0djIsIHR2MywgaXNRUik7IC8vIDE1LiB0djMgPSBDTU9WKHR2MiwgdHYzLCBpc1FSKVxuICAgICAgICB0djQgPSBGcC5jbW92KHR2NSwgdHY0LCBpc1FSKTsgLy8gMTYuIHR2NCA9IENNT1YodHY1LCB0djQsIGlzUVIpXG4gICAgICAgIC8vIDE3LiBmb3IgaSBpbiAoYzEsIGMxIC0gMSwgLi4uLCAyKTpcbiAgICAgICAgZm9yIChsZXQgaSA9IGMxOyBpID4gXzFuOyBpLS0pIHtcbiAgICAgICAgICAgIGxldCB0djUgPSBpIC0gXzJuOyAvLyAxOC4gICAgdHY1ID0gaSAtIDJcbiAgICAgICAgICAgIHR2NSA9IF8ybiA8PCAodHY1IC0gXzFuKTsgLy8gMTkuICAgIHR2NSA9IDJedHY1XG4gICAgICAgICAgICBsZXQgdHZ2NSA9IEZwLnBvdyh0djQsIHR2NSk7IC8vIDIwLiAgICB0djUgPSB0djRedHY1XG4gICAgICAgICAgICBjb25zdCBlMSA9IEZwLmVxbCh0dnY1LCBGcC5PTkUpOyAvLyAyMS4gICAgZTEgPSB0djUgPT0gMVxuICAgICAgICAgICAgdHYyID0gRnAubXVsKHR2MywgdHYxKTsgLy8gMjIuICAgIHR2MiA9IHR2MyAqIHR2MVxuICAgICAgICAgICAgdHYxID0gRnAubXVsKHR2MSwgdHYxKTsgLy8gMjMuICAgIHR2MSA9IHR2MSAqIHR2MVxuICAgICAgICAgICAgdHZ2NSA9IEZwLm11bCh0djQsIHR2MSk7IC8vIDI0LiAgICB0djUgPSB0djQgKiB0djFcbiAgICAgICAgICAgIHR2MyA9IEZwLmNtb3YodHYyLCB0djMsIGUxKTsgLy8gMjUuICAgIHR2MyA9IENNT1YodHYyLCB0djMsIGUxKVxuICAgICAgICAgICAgdHY0ID0gRnAuY21vdih0dnY1LCB0djQsIGUxKTsgLy8gMjYuICAgIHR2NCA9IENNT1YodHY1LCB0djQsIGUxKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGlzVmFsaWQ6IGlzUVIsIHZhbHVlOiB0djMgfTtcbiAgICB9O1xuICAgIGlmIChGcC5PUkRFUiAlIF80biA9PT0gXzNuKSB7XG4gICAgICAgIC8vIHNxcnRfcmF0aW9fM21vZDQodSwgdilcbiAgICAgICAgY29uc3QgYzEgPSAoRnAuT1JERVIgLSBfM24pIC8gXzRuOyAvLyAxLiBjMSA9IChxIC0gMykgLyA0ICAgICAjIEludGVnZXIgYXJpdGhtZXRpY1xuICAgICAgICBjb25zdCBjMiA9IEZwLnNxcnQoRnAubmVnKFopKTsgLy8gMi4gYzIgPSBzcXJ0KC1aKVxuICAgICAgICBzcXJ0UmF0aW8gPSAodSwgdikgPT4ge1xuICAgICAgICAgICAgbGV0IHR2MSA9IEZwLnNxcih2KTsgLy8gMS4gdHYxID0gdl4yXG4gICAgICAgICAgICBjb25zdCB0djIgPSBGcC5tdWwodSwgdik7IC8vIDIuIHR2MiA9IHUgKiB2XG4gICAgICAgICAgICB0djEgPSBGcC5tdWwodHYxLCB0djIpOyAvLyAzLiB0djEgPSB0djEgKiB0djJcbiAgICAgICAgICAgIGxldCB5MSA9IEZwLnBvdyh0djEsIGMxKTsgLy8gNC4geTEgPSB0djFeYzFcbiAgICAgICAgICAgIHkxID0gRnAubXVsKHkxLCB0djIpOyAvLyA1LiB5MSA9IHkxICogdHYyXG4gICAgICAgICAgICBjb25zdCB5MiA9IEZwLm11bCh5MSwgYzIpOyAvLyA2LiB5MiA9IHkxICogYzJcbiAgICAgICAgICAgIGNvbnN0IHR2MyA9IEZwLm11bChGcC5zcXIoeTEpLCB2KTsgLy8gNy4gdHYzID0geTFeMjsgOC4gdHYzID0gdHYzICogdlxuICAgICAgICAgICAgY29uc3QgaXNRUiA9IEZwLmVxbCh0djMsIHUpOyAvLyA5LiBpc1FSID0gdHYzID09IHVcbiAgICAgICAgICAgIGxldCB5ID0gRnAuY21vdih5MiwgeTEsIGlzUVIpOyAvLyAxMC4geSA9IENNT1YoeTIsIHkxLCBpc1FSKVxuICAgICAgICAgICAgcmV0dXJuIHsgaXNWYWxpZDogaXNRUiwgdmFsdWU6IHkgfTsgLy8gMTEuIHJldHVybiAoaXNRUiwgeSkgaXNRUiA/IHkgOiB5KmMyXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIE5vIGN1cnZlcyB1c2VzIHRoYXRcbiAgICAvLyBpZiAoRnAuT1JERVIgJSBfOG4gPT09IF81bikgLy8gc3FydF9yYXRpb181bW9kOFxuICAgIHJldHVybiBzcXJ0UmF0aW87XG59XG4vKipcbiAqIFNpbXBsaWZpZWQgU2hhbGx1ZS12YW4gZGUgV29lc3Rpam5lLVVsYXMgTWV0aG9kXG4gKiBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjOTM4MCNzZWN0aW9uLTYuNi4yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXBUb0N1cnZlU2ltcGxlU1dVKEZwLCBvcHRzKSB7XG4gICAgbW9kLnZhbGlkYXRlRmllbGQoRnApO1xuICAgIGlmICghRnAuaXNWYWxpZChvcHRzLkEpIHx8ICFGcC5pc1ZhbGlkKG9wdHMuQikgfHwgIUZwLmlzVmFsaWQob3B0cy5aKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXBUb0N1cnZlU2ltcGxlU1dVOiBpbnZhbGlkIG9wdHMnKTtcbiAgICBjb25zdCBzcXJ0UmF0aW8gPSBTV1VGcFNxcnRSYXRpbyhGcCwgb3B0cy5aKTtcbiAgICBpZiAoIUZwLmlzT2RkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZwLmlzT2RkIGlzIG5vdCBpbXBsZW1lbnRlZCEnKTtcbiAgICAvLyBJbnB1dDogdSwgYW4gZWxlbWVudCBvZiBGLlxuICAgIC8vIE91dHB1dDogKHgsIHkpLCBhIHBvaW50IG9uIEUuXG4gICAgcmV0dXJuICh1KSA9PiB7XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICBsZXQgdHYxLCB0djIsIHR2MywgdHY0LCB0djUsIHR2NiwgeCwgeTtcbiAgICAgICAgdHYxID0gRnAuc3FyKHUpOyAvLyAxLiAgdHYxID0gdV4yXG4gICAgICAgIHR2MSA9IEZwLm11bCh0djEsIG9wdHMuWik7IC8vIDIuICB0djEgPSBaICogdHYxXG4gICAgICAgIHR2MiA9IEZwLnNxcih0djEpOyAvLyAzLiAgdHYyID0gdHYxXjJcbiAgICAgICAgdHYyID0gRnAuYWRkKHR2MiwgdHYxKTsgLy8gNC4gIHR2MiA9IHR2MiArIHR2MVxuICAgICAgICB0djMgPSBGcC5hZGQodHYyLCBGcC5PTkUpOyAvLyA1LiAgdHYzID0gdHYyICsgMVxuICAgICAgICB0djMgPSBGcC5tdWwodHYzLCBvcHRzLkIpOyAvLyA2LiAgdHYzID0gQiAqIHR2M1xuICAgICAgICB0djQgPSBGcC5jbW92KG9wdHMuWiwgRnAubmVnKHR2MiksICFGcC5lcWwodHYyLCBGcC5aRVJPKSk7IC8vIDcuICB0djQgPSBDTU9WKFosIC10djIsIHR2MiAhPSAwKVxuICAgICAgICB0djQgPSBGcC5tdWwodHY0LCBvcHRzLkEpOyAvLyA4LiAgdHY0ID0gQSAqIHR2NFxuICAgICAgICB0djIgPSBGcC5zcXIodHYzKTsgLy8gOS4gIHR2MiA9IHR2M14yXG4gICAgICAgIHR2NiA9IEZwLnNxcih0djQpOyAvLyAxMC4gdHY2ID0gdHY0XjJcbiAgICAgICAgdHY1ID0gRnAubXVsKHR2Niwgb3B0cy5BKTsgLy8gMTEuIHR2NSA9IEEgKiB0djZcbiAgICAgICAgdHYyID0gRnAuYWRkKHR2MiwgdHY1KTsgLy8gMTIuIHR2MiA9IHR2MiArIHR2NVxuICAgICAgICB0djIgPSBGcC5tdWwodHYyLCB0djMpOyAvLyAxMy4gdHYyID0gdHYyICogdHYzXG4gICAgICAgIHR2NiA9IEZwLm11bCh0djYsIHR2NCk7IC8vIDE0LiB0djYgPSB0djYgKiB0djRcbiAgICAgICAgdHY1ID0gRnAubXVsKHR2Niwgb3B0cy5CKTsgLy8gMTUuIHR2NSA9IEIgKiB0djZcbiAgICAgICAgdHYyID0gRnAuYWRkKHR2MiwgdHY1KTsgLy8gMTYuIHR2MiA9IHR2MiArIHR2NVxuICAgICAgICB4ID0gRnAubXVsKHR2MSwgdHYzKTsgLy8gMTcuICAgeCA9IHR2MSAqIHR2M1xuICAgICAgICBjb25zdCB7IGlzVmFsaWQsIHZhbHVlIH0gPSBzcXJ0UmF0aW8odHYyLCB0djYpOyAvLyAxOC4gKGlzX2d4MV9zcXVhcmUsIHkxKSA9IHNxcnRfcmF0aW8odHYyLCB0djYpXG4gICAgICAgIHkgPSBGcC5tdWwodHYxLCB1KTsgLy8gMTkuICAgeSA9IHR2MSAqIHUgIC0+IFogKiB1XjMgKiB5MVxuICAgICAgICB5ID0gRnAubXVsKHksIHZhbHVlKTsgLy8gMjAuICAgeSA9IHkgKiB5MVxuICAgICAgICB4ID0gRnAuY21vdih4LCB0djMsIGlzVmFsaWQpOyAvLyAyMS4gICB4ID0gQ01PVih4LCB0djMsIGlzX2d4MV9zcXVhcmUpXG4gICAgICAgIHkgPSBGcC5jbW92KHksIHZhbHVlLCBpc1ZhbGlkKTsgLy8gMjIuICAgeSA9IENNT1YoeSwgeTEsIGlzX2d4MV9zcXVhcmUpXG4gICAgICAgIGNvbnN0IGUxID0gRnAuaXNPZGQodSkgPT09IEZwLmlzT2RkKHkpOyAvLyAyMy4gIGUxID0gc2duMCh1KSA9PSBzZ24wKHkpXG4gICAgICAgIHkgPSBGcC5jbW92KEZwLm5lZyh5KSwgeSwgZTEpOyAvLyAyNC4gICB5ID0gQ01PVigteSwgeSwgZTEpXG4gICAgICAgIHggPSBGcC5kaXYoeCwgdHY0KTsgLy8gMjUuICAgeCA9IHggLyB0djRcbiAgICAgICAgcmV0dXJuIHsgeCwgeSB9O1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWllcnN0cmFzcy5qcy5tYXAiLCIvKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5pbXBvcnQgeyBobWFjIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9obWFjJztcbmltcG9ydCB7IGNvbmNhdEJ5dGVzLCByYW5kb21CeXRlcyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuaW1wb3J0IHsgd2VpZXJzdHJhc3MgfSBmcm9tICcuL2Fic3RyYWN0L3dlaWVyc3RyYXNzLmpzJztcbi8vIGNvbm5lY3RzIG5vYmxlLWN1cnZlcyB0byBub2JsZS1oYXNoZXNcbmV4cG9ydCBmdW5jdGlvbiBnZXRIYXNoKGhhc2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBoYXNoLFxuICAgICAgICBobWFjOiAoa2V5LCAuLi5tc2dzKSA9PiBobWFjKGhhc2gsIGtleSwgY29uY2F0Qnl0ZXMoLi4ubXNncykpLFxuICAgICAgICByYW5kb21CeXRlcyxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUN1cnZlKGN1cnZlRGVmLCBkZWZIYXNoKSB7XG4gICAgY29uc3QgY3JlYXRlID0gKGhhc2gpID0+IHdlaWVyc3RyYXNzKHsgLi4uY3VydmVEZWYsIC4uLmdldEhhc2goaGFzaCkgfSk7XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoeyAuLi5jcmVhdGUoZGVmSGFzaCksIGNyZWF0ZSB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9zaG9ydHdfdXRpbHMuanMubWFwIiwiLyohIG5vYmxlLWN1cnZlcyAtIE1JVCBMaWNlbnNlIChjKSAyMDIyIFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuaW1wb3J0IHsgc2hhMjU2IH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9zaGEyNTYnO1xuaW1wb3J0IHsgcmFuZG9tQnl0ZXMgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3V0aWxzJztcbmltcG9ydCB7IEZpZWxkLCBtb2QsIHBvdzIgfSBmcm9tICcuL2Fic3RyYWN0L21vZHVsYXIuanMnO1xuaW1wb3J0IHsgbWFwVG9DdXJ2ZVNpbXBsZVNXVSB9IGZyb20gJy4vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanMnO1xuaW1wb3J0IHsgYnl0ZXNUb051bWJlckJFLCBjb25jYXRCeXRlcywgZW5zdXJlQnl0ZXMsIG51bWJlclRvQnl0ZXNCRSB9IGZyb20gJy4vYWJzdHJhY3QvdXRpbHMuanMnO1xuaW1wb3J0IHsgY3JlYXRlSGFzaGVyLCBpc29nZW55TWFwIH0gZnJvbSAnLi9hYnN0cmFjdC9oYXNoLXRvLWN1cnZlLmpzJztcbmltcG9ydCB7IGNyZWF0ZUN1cnZlIH0gZnJvbSAnLi9fc2hvcnR3X3V0aWxzLmpzJztcbmNvbnN0IHNlY3AyNTZrMVAgPSBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmVmZmZmZmMyZicpO1xuY29uc3Qgc2VjcDI1NmsxTiA9IEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWJhYWVkY2U2YWY0OGEwM2JiZmQyNWU4Y2QwMzY0MTQxJyk7XG5jb25zdCBfMW4gPSBCaWdJbnQoMSk7XG5jb25zdCBfMm4gPSBCaWdJbnQoMik7XG5jb25zdCBkaXZOZWFyZXN0ID0gKGEsIGIpID0+IChhICsgYiAvIF8ybikgLyBiO1xuLyoqXG4gKiDiiJpuID0gbl4oKHArMSkvNCkgZm9yIGZpZWxkcyBwID0gMyBtb2QgNC4gV2UgdW53cmFwIHRoZSBsb29wIGFuZCBtdWx0aXBseSBiaXQtYnktYml0LlxuICogKFArMW4vNG4pLnRvU3RyaW5nKDIpIHdvdWxkIHByb2R1Y2UgYml0cyBbMjIzeCAxLCAwLCAyMnggMSwgNHggMCwgMTEsIDAwXVxuICovXG5mdW5jdGlvbiBzcXJ0TW9kKHkpIHtcbiAgICBjb25zdCBQID0gc2VjcDI1NmsxUDtcbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICBjb25zdCBfM24gPSBCaWdJbnQoMyksIF82biA9IEJpZ0ludCg2KSwgXzExbiA9IEJpZ0ludCgxMSksIF8yMm4gPSBCaWdJbnQoMjIpO1xuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIGNvbnN0IF8yM24gPSBCaWdJbnQoMjMpLCBfNDRuID0gQmlnSW50KDQ0KSwgXzg4biA9IEJpZ0ludCg4OCk7XG4gICAgY29uc3QgYjIgPSAoeSAqIHkgKiB5KSAlIFA7IC8vIHheMywgMTFcbiAgICBjb25zdCBiMyA9IChiMiAqIGIyICogeSkgJSBQOyAvLyB4XjdcbiAgICBjb25zdCBiNiA9IChwb3cyKGIzLCBfM24sIFApICogYjMpICUgUDtcbiAgICBjb25zdCBiOSA9IChwb3cyKGI2LCBfM24sIFApICogYjMpICUgUDtcbiAgICBjb25zdCBiMTEgPSAocG93MihiOSwgXzJuLCBQKSAqIGIyKSAlIFA7XG4gICAgY29uc3QgYjIyID0gKHBvdzIoYjExLCBfMTFuLCBQKSAqIGIxMSkgJSBQO1xuICAgIGNvbnN0IGI0NCA9IChwb3cyKGIyMiwgXzIybiwgUCkgKiBiMjIpICUgUDtcbiAgICBjb25zdCBiODggPSAocG93MihiNDQsIF80NG4sIFApICogYjQ0KSAlIFA7XG4gICAgY29uc3QgYjE3NiA9IChwb3cyKGI4OCwgXzg4biwgUCkgKiBiODgpICUgUDtcbiAgICBjb25zdCBiMjIwID0gKHBvdzIoYjE3NiwgXzQ0biwgUCkgKiBiNDQpICUgUDtcbiAgICBjb25zdCBiMjIzID0gKHBvdzIoYjIyMCwgXzNuLCBQKSAqIGIzKSAlIFA7XG4gICAgY29uc3QgdDEgPSAocG93MihiMjIzLCBfMjNuLCBQKSAqIGIyMikgJSBQO1xuICAgIGNvbnN0IHQyID0gKHBvdzIodDEsIF82biwgUCkgKiBiMikgJSBQO1xuICAgIGNvbnN0IHJvb3QgPSBwb3cyKHQyLCBfMm4sIFApO1xuICAgIGlmICghRnAuZXFsKEZwLnNxcihyb290KSwgeSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3QnKTtcbiAgICByZXR1cm4gcm9vdDtcbn1cbmNvbnN0IEZwID0gRmllbGQoc2VjcDI1NmsxUCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHsgc3FydDogc3FydE1vZCB9KTtcbmV4cG9ydCBjb25zdCBzZWNwMjU2azEgPSBjcmVhdGVDdXJ2ZSh7XG4gICAgYTogQmlnSW50KDApLFxuICAgIGI6IEJpZ0ludCg3KSxcbiAgICBGcCxcbiAgICBuOiBzZWNwMjU2azFOLFxuICAgIC8vIEJhc2UgcG9pbnQgKHgsIHkpIGFrYSBnZW5lcmF0b3IgcG9pbnRcbiAgICBHeDogQmlnSW50KCc1NTA2NjI2MzAyMjI3NzM0MzY2OTU3ODcxODg5NTE2ODUzNDMyNjI1MDYwMzQ1Mzc3NzU5NDE3NTUwMDE4NzM2MDM4OTExNjcyOTI0MCcpLFxuICAgIEd5OiBCaWdJbnQoJzMyNjcwNTEwMDIwNzU4ODE2OTc4MDgzMDg1MTMwNTA3MDQzMTg0NDcxMjczMzgwNjU5MjQzMjc1OTM4OTA0MzM1NzU3MzM3NDgyNDI0JyksXG4gICAgaDogQmlnSW50KDEpLFxuICAgIGxvd1M6IHRydWUsXG4gICAgLyoqXG4gICAgICogc2VjcDI1NmsxIGJlbG9uZ3MgdG8gS29ibGl0eiBjdXJ2ZXM6IGl0IGhhcyBlZmZpY2llbnRseSBjb21wdXRhYmxlIGVuZG9tb3JwaGlzbS5cbiAgICAgKiBFbmRvbW9ycGhpc20gdXNlcyAyeCBsZXNzIFJBTSwgc3BlZWRzIHVwIHByZWNvbXB1dGF0aW9uIGJ5IDJ4IGFuZCBFQ0RIIC8ga2V5IHJlY292ZXJ5IGJ5IDIwJS5cbiAgICAgKiBGb3IgcHJlY29tcHV0ZWQgd05BRiBpdCB0cmFkZXMgb2ZmIDEvMiBpbml0IHRpbWUgJiAxLzMgcmFtIGZvciAyMCUgcGVyZiBoaXQuXG4gICAgICogRXhwbGFuYXRpb246IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhdWxtaWxsci9lYjY3MDgwNjc5M2U4NGRmNjI4YTdjNDM0YTg3MzA2NlxuICAgICAqL1xuICAgIGVuZG86IHtcbiAgICAgICAgYmV0YTogQmlnSW50KCcweDdhZTk2YTJiNjU3YzA3MTA2ZTY0NDc5ZWFjMzQzNGU5OWNmMDQ5NzUxMmY1ODk5NWMxMzk2YzI4NzE5NTAxZWUnKSxcbiAgICAgICAgc3BsaXRTY2FsYXI6IChrKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuID0gc2VjcDI1NmsxTjtcbiAgICAgICAgICAgIGNvbnN0IGExID0gQmlnSW50KCcweDMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1Jyk7XG4gICAgICAgICAgICBjb25zdCBiMSA9IC1fMW4gKiBCaWdJbnQoJzB4ZTQ0MzdlZDYwMTBlODgyODZmNTQ3ZmE5MGFiZmU0YzMnKTtcbiAgICAgICAgICAgIGNvbnN0IGEyID0gQmlnSW50KCcweDExNGNhNTBmN2E4ZTJmM2Y2NTdjMTEwOGQ5ZDQ0Y2ZkOCcpO1xuICAgICAgICAgICAgY29uc3QgYjIgPSBhMTtcbiAgICAgICAgICAgIGNvbnN0IFBPV18yXzEyOCA9IEJpZ0ludCgnMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnKTsgLy8gKDJuKioxMjhuKS50b1N0cmluZygxNilcbiAgICAgICAgICAgIGNvbnN0IGMxID0gZGl2TmVhcmVzdChiMiAqIGssIG4pO1xuICAgICAgICAgICAgY29uc3QgYzIgPSBkaXZOZWFyZXN0KC1iMSAqIGssIG4pO1xuICAgICAgICAgICAgbGV0IGsxID0gbW9kKGsgLSBjMSAqIGExIC0gYzIgKiBhMiwgbik7XG4gICAgICAgICAgICBsZXQgazIgPSBtb2QoLWMxICogYjEgLSBjMiAqIGIyLCBuKTtcbiAgICAgICAgICAgIGNvbnN0IGsxbmVnID0gazEgPiBQT1dfMl8xMjg7XG4gICAgICAgICAgICBjb25zdCBrMm5lZyA9IGsyID4gUE9XXzJfMTI4O1xuICAgICAgICAgICAgaWYgKGsxbmVnKVxuICAgICAgICAgICAgICAgIGsxID0gbiAtIGsxO1xuICAgICAgICAgICAgaWYgKGsybmVnKVxuICAgICAgICAgICAgICAgIGsyID0gbiAtIGsyO1xuICAgICAgICAgICAgaWYgKGsxID4gUE9XXzJfMTI4IHx8IGsyID4gUE9XXzJfMTI4KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzcGxpdFNjYWxhcjogRW5kb21vcnBoaXNtIGZhaWxlZCwgaz0nICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBrMW5lZywgazEsIGsybmVnLCBrMiB9O1xuICAgICAgICB9LFxuICAgIH0sXG59LCBzaGEyNTYpO1xuLy8gU2Nobm9yciBzaWduYXR1cmVzIGFyZSBzdXBlcmlvciB0byBFQ0RTQSBmcm9tIGFib3ZlLiBCZWxvdyBpcyBTY2hub3JyLXNwZWNpZmljIEJJUDAzNDAgY29kZS5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAzNDAubWVkaWF3aWtpXG5jb25zdCBfMG4gPSBCaWdJbnQoMCk7XG5jb25zdCBmZSA9ICh4KSA9PiB0eXBlb2YgeCA9PT0gJ2JpZ2ludCcgJiYgXzBuIDwgeCAmJiB4IDwgc2VjcDI1NmsxUDtcbmNvbnN0IGdlID0gKHgpID0+IHR5cGVvZiB4ID09PSAnYmlnaW50JyAmJiBfMG4gPCB4ICYmIHggPCBzZWNwMjU2azFOO1xuLyoqIEFuIG9iamVjdCBtYXBwaW5nIHRhZ3MgdG8gdGhlaXIgdGFnZ2VkIGhhc2ggcHJlZml4IG9mIFtTSEEyNTYodGFnKSB8IFNIQTI1Nih0YWcpXSAqL1xuY29uc3QgVEFHR0VEX0hBU0hfUFJFRklYRVMgPSB7fTtcbmZ1bmN0aW9uIHRhZ2dlZEhhc2godGFnLCAuLi5tZXNzYWdlcykge1xuICAgIGxldCB0YWdQID0gVEFHR0VEX0hBU0hfUFJFRklYRVNbdGFnXTtcbiAgICBpZiAodGFnUCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHRhZ0ggPSBzaGEyNTYoVWludDhBcnJheS5mcm9tKHRhZywgKGMpID0+IGMuY2hhckNvZGVBdCgwKSkpO1xuICAgICAgICB0YWdQID0gY29uY2F0Qnl0ZXModGFnSCwgdGFnSCk7XG4gICAgICAgIFRBR0dFRF9IQVNIX1BSRUZJWEVTW3RhZ10gPSB0YWdQO1xuICAgIH1cbiAgICByZXR1cm4gc2hhMjU2KGNvbmNhdEJ5dGVzKHRhZ1AsIC4uLm1lc3NhZ2VzKSk7XG59XG4vLyBFQ0RTQSBjb21wYWN0IHBvaW50cyBhcmUgMzMtYnl0ZS4gU2Nobm9yciBpcyAzMjogd2Ugc3RyaXAgZmlyc3QgYnl0ZSAweDAyIG9yIDB4MDNcbmNvbnN0IHBvaW50VG9CeXRlcyA9IChwb2ludCkgPT4gcG9pbnQudG9SYXdCeXRlcyh0cnVlKS5zbGljZSgxKTtcbmNvbnN0IG51bVRvMzJiID0gKG4pID0+IG51bWJlclRvQnl0ZXNCRShuLCAzMik7XG5jb25zdCBtb2RQID0gKHgpID0+IG1vZCh4LCBzZWNwMjU2azFQKTtcbmNvbnN0IG1vZE4gPSAoeCkgPT4gbW9kKHgsIHNlY3AyNTZrMU4pO1xuY29uc3QgUG9pbnQgPSBzZWNwMjU2azEuUHJvamVjdGl2ZVBvaW50O1xuY29uc3QgR211bEFkZCA9IChRLCBhLCBiKSA9PiBQb2ludC5CQVNFLm11bHRpcGx5QW5kQWRkVW5zYWZlKFEsIGEsIGIpO1xuLy8gQ2FsY3VsYXRlIHBvaW50LCBzY2FsYXIgYW5kIGJ5dGVzXG5mdW5jdGlvbiBzY2hub3JyR2V0RXh0UHViS2V5KHByaXYpIHtcbiAgICBsZXQgZF8gPSBzZWNwMjU2azEudXRpbHMubm9ybVByaXZhdGVLZXlUb1NjYWxhcihwcml2KTsgLy8gc2FtZSBtZXRob2QgZXhlY3V0ZWQgaW4gZnJvbVByaXZhdGVLZXlcbiAgICBsZXQgcCA9IFBvaW50LmZyb21Qcml2YXRlS2V5KGRfKTsgLy8gUCA9IGQn4ouFRzsgMCA8IGQnIDwgbiBjaGVjayBpcyBkb25lIGluc2lkZVxuICAgIGNvbnN0IHNjYWxhciA9IHAuaGFzRXZlblkoKSA/IGRfIDogbW9kTigtZF8pO1xuICAgIHJldHVybiB7IHNjYWxhcjogc2NhbGFyLCBieXRlczogcG9pbnRUb0J5dGVzKHApIH07XG59XG4vKipcbiAqIGxpZnRfeCBmcm9tIEJJUDM0MC4gQ29udmVydCAzMi1ieXRlIHggY29vcmRpbmF0ZSB0byBlbGxpcHRpYyBjdXJ2ZSBwb2ludC5cbiAqIEByZXR1cm5zIHZhbGlkIHBvaW50IGNoZWNrZWQgZm9yIGJlaW5nIG9uLWN1cnZlXG4gKi9cbmZ1bmN0aW9uIGxpZnRfeCh4KSB7XG4gICAgaWYgKCFmZSh4KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgeDogbmVlZCAwIDwgeCA8IHAnKTsgLy8gRmFpbCBpZiB4IOKJpSBwLlxuICAgIGNvbnN0IHh4ID0gbW9kUCh4ICogeCk7XG4gICAgY29uc3QgYyA9IG1vZFAoeHggKiB4ICsgQmlnSW50KDcpKTsgLy8gTGV0IGMgPSB4wrMgKyA3IG1vZCBwLlxuICAgIGxldCB5ID0gc3FydE1vZChjKTsgLy8gTGV0IHkgPSBjXihwKzEpLzQgbW9kIHAuXG4gICAgaWYgKHkgJSBfMm4gIT09IF8wbilcbiAgICAgICAgeSA9IG1vZFAoLXkpOyAvLyBSZXR1cm4gdGhlIHVuaXF1ZSBwb2ludCBQIHN1Y2ggdGhhdCB4KFApID0geCBhbmRcbiAgICBjb25zdCBwID0gbmV3IFBvaW50KHgsIHksIF8xbik7IC8vIHkoUCkgPSB5IGlmIHkgbW9kIDIgPSAwIG9yIHkoUCkgPSBwLXkgb3RoZXJ3aXNlLlxuICAgIHAuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICByZXR1cm4gcDtcbn1cbi8qKlxuICogQ3JlYXRlIHRhZ2dlZCBoYXNoLCBjb252ZXJ0IGl0IHRvIGJpZ2ludCwgcmVkdWNlIG1vZHVsby1uLlxuICovXG5mdW5jdGlvbiBjaGFsbGVuZ2UoLi4uYXJncykge1xuICAgIHJldHVybiBtb2ROKGJ5dGVzVG9OdW1iZXJCRSh0YWdnZWRIYXNoKCdCSVAwMzQwL2NoYWxsZW5nZScsIC4uLmFyZ3MpKSk7XG59XG4vKipcbiAqIFNjaG5vcnIgcHVibGljIGtleSBpcyBqdXN0IGB4YCBjb29yZGluYXRlIG9mIFBvaW50IGFzIHBlciBCSVAzNDAuXG4gKi9cbmZ1bmN0aW9uIHNjaG5vcnJHZXRQdWJsaWNLZXkocHJpdmF0ZUtleSkge1xuICAgIHJldHVybiBzY2hub3JyR2V0RXh0UHViS2V5KHByaXZhdGVLZXkpLmJ5dGVzOyAvLyBkJz1pbnQoc2spLiBGYWlsIGlmIGQnPTAgb3IgZCfiiaVuLiBSZXQgYnl0ZXMoZCfii4VHKVxufVxuLyoqXG4gKiBDcmVhdGVzIFNjaG5vcnIgc2lnbmF0dXJlIGFzIHBlciBCSVAzNDAuIFZlcmlmaWVzIGl0c2VsZiBiZWZvcmUgcmV0dXJuaW5nIGFueXRoaW5nLlxuICogYXV4UmFuZCBpcyBvcHRpb25hbCBhbmQgaXMgbm90IHRoZSBzb2xlIHNvdXJjZSBvZiBrIGdlbmVyYXRpb246IGJhZCBDU1BSTkcgd29uJ3QgYmUgZGFuZ2Vyb3VzLlxuICovXG5mdW5jdGlvbiBzY2hub3JyU2lnbihtZXNzYWdlLCBwcml2YXRlS2V5LCBhdXhSYW5kID0gcmFuZG9tQnl0ZXMoMzIpKSB7XG4gICAgY29uc3QgbSA9IGVuc3VyZUJ5dGVzKCdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgY29uc3QgeyBieXRlczogcHgsIHNjYWxhcjogZCB9ID0gc2Nobm9yckdldEV4dFB1YktleShwcml2YXRlS2V5KTsgLy8gY2hlY2tzIGZvciBpc1dpdGhpbkN1cnZlT3JkZXJcbiAgICBjb25zdCBhID0gZW5zdXJlQnl0ZXMoJ2F1eFJhbmQnLCBhdXhSYW5kLCAzMik7IC8vIEF1eGlsaWFyeSByYW5kb20gZGF0YSBhOiBhIDMyLWJ5dGUgYXJyYXlcbiAgICBjb25zdCB0ID0gbnVtVG8zMmIoZCBeIGJ5dGVzVG9OdW1iZXJCRSh0YWdnZWRIYXNoKCdCSVAwMzQwL2F1eCcsIGEpKSk7IC8vIExldCB0IGJlIHRoZSBieXRlLXdpc2UgeG9yIG9mIGJ5dGVzKGQpIGFuZCBoYXNoL2F1eChhKVxuICAgIGNvbnN0IHJhbmQgPSB0YWdnZWRIYXNoKCdCSVAwMzQwL25vbmNlJywgdCwgcHgsIG0pOyAvLyBMZXQgcmFuZCA9IGhhc2gvbm9uY2UodCB8fCBieXRlcyhQKSB8fCBtKVxuICAgIGNvbnN0IGtfID0gbW9kTihieXRlc1RvTnVtYmVyQkUocmFuZCkpOyAvLyBMZXQgaycgPSBpbnQocmFuZCkgbW9kIG5cbiAgICBpZiAoa18gPT09IF8wbilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaWduIGZhaWxlZDogayBpcyB6ZXJvJyk7IC8vIEZhaWwgaWYgaycgPSAwLlxuICAgIGNvbnN0IHsgYnl0ZXM6IHJ4LCBzY2FsYXI6IGsgfSA9IHNjaG5vcnJHZXRFeHRQdWJLZXkoa18pOyAvLyBMZXQgUiA9IGsn4ouFRy5cbiAgICBjb25zdCBlID0gY2hhbGxlbmdlKHJ4LCBweCwgbSk7IC8vIExldCBlID0gaW50KGhhc2gvY2hhbGxlbmdlKGJ5dGVzKFIpIHx8IGJ5dGVzKFApIHx8IG0pKSBtb2Qgbi5cbiAgICBjb25zdCBzaWcgPSBuZXcgVWludDhBcnJheSg2NCk7IC8vIExldCBzaWcgPSBieXRlcyhSKSB8fCBieXRlcygoayArIGVkKSBtb2QgbikuXG4gICAgc2lnLnNldChyeCwgMCk7XG4gICAgc2lnLnNldChudW1UbzMyYihtb2ROKGsgKyBlICogZCkpLCAzMik7XG4gICAgLy8gSWYgVmVyaWZ5KGJ5dGVzKFApLCBtLCBzaWcpIChzZWUgYmVsb3cpIHJldHVybnMgZmFpbHVyZSwgYWJvcnRcbiAgICBpZiAoIXNjaG5vcnJWZXJpZnkoc2lnLCBtLCBweCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2lnbjogSW52YWxpZCBzaWduYXR1cmUgcHJvZHVjZWQnKTtcbiAgICByZXR1cm4gc2lnO1xufVxuLyoqXG4gKiBWZXJpZmllcyBTY2hub3JyIHNpZ25hdHVyZS5cbiAqIFdpbGwgc3dhbGxvdyBlcnJvcnMgJiByZXR1cm4gZmFsc2UgZXhjZXB0IGZvciBpbml0aWFsIHR5cGUgdmFsaWRhdGlvbiBvZiBhcmd1bWVudHMuXG4gKi9cbmZ1bmN0aW9uIHNjaG5vcnJWZXJpZnkoc2lnbmF0dXJlLCBtZXNzYWdlLCBwdWJsaWNLZXkpIHtcbiAgICBjb25zdCBzaWcgPSBlbnN1cmVCeXRlcygnc2lnbmF0dXJlJywgc2lnbmF0dXJlLCA2NCk7XG4gICAgY29uc3QgbSA9IGVuc3VyZUJ5dGVzKCdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgY29uc3QgcHViID0gZW5zdXJlQnl0ZXMoJ3B1YmxpY0tleScsIHB1YmxpY0tleSwgMzIpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IFAgPSBsaWZ0X3goYnl0ZXNUb051bWJlckJFKHB1YikpOyAvLyBQID0gbGlmdF94KGludChwaykpOyBmYWlsIGlmIHRoYXQgZmFpbHNcbiAgICAgICAgY29uc3QgciA9IGJ5dGVzVG9OdW1iZXJCRShzaWcuc3ViYXJyYXkoMCwgMzIpKTsgLy8gTGV0IHIgPSBpbnQoc2lnWzA6MzJdKTsgZmFpbCBpZiByIOKJpSBwLlxuICAgICAgICBpZiAoIWZlKHIpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBzID0gYnl0ZXNUb051bWJlckJFKHNpZy5zdWJhcnJheSgzMiwgNjQpKTsgLy8gTGV0IHMgPSBpbnQoc2lnWzMyOjY0XSk7IGZhaWwgaWYgcyDiiaUgbi5cbiAgICAgICAgaWYgKCFnZShzKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgZSA9IGNoYWxsZW5nZShudW1UbzMyYihyKSwgcG9pbnRUb0J5dGVzKFApLCBtKTsgLy8gaW50KGNoYWxsZW5nZShieXRlcyhyKXx8Ynl0ZXMoUCl8fG0pKSVuXG4gICAgICAgIGNvbnN0IFIgPSBHbXVsQWRkKFAsIHMsIG1vZE4oLWUpKTsgLy8gUiA9IHPii4VHIC0gZeKLhVBcbiAgICAgICAgaWYgKCFSIHx8ICFSLmhhc0V2ZW5ZKCkgfHwgUi50b0FmZmluZSgpLnggIT09IHIpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIC1lUCA9PSAobi1lKVBcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIEZhaWwgaWYgaXNfaW5maW5pdGUoUikgLyBub3QgaGFzX2V2ZW5feShSKSAvIHgoUikg4omgIHIuXG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IHNjaG5vcnIgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+ICh7XG4gICAgZ2V0UHVibGljS2V5OiBzY2hub3JyR2V0UHVibGljS2V5LFxuICAgIHNpZ246IHNjaG5vcnJTaWduLFxuICAgIHZlcmlmeTogc2Nobm9yclZlcmlmeSxcbiAgICB1dGlsczoge1xuICAgICAgICByYW5kb21Qcml2YXRlS2V5OiBzZWNwMjU2azEudXRpbHMucmFuZG9tUHJpdmF0ZUtleSxcbiAgICAgICAgbGlmdF94LFxuICAgICAgICBwb2ludFRvQnl0ZXMsXG4gICAgICAgIG51bWJlclRvQnl0ZXNCRSxcbiAgICAgICAgYnl0ZXNUb051bWJlckJFLFxuICAgICAgICB0YWdnZWRIYXNoLFxuICAgICAgICBtb2QsXG4gICAgfSxcbn0pKSgpO1xuY29uc3QgaXNvTWFwID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBpc29nZW55TWFwKEZwLCBbXG4gICAgLy8geE51bVxuICAgIFtcbiAgICAgICAgJzB4OGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGRhYWFhYThjNycsXG4gICAgICAgICcweDdkM2Q0YzgwYmMzMjFkNWI5ZjMxNWNlYTdmZDQ0YzVkNTk1ZDJmYzBiZjYzYjkyZGZmZjEwNDRmMTdjNjU4MScsXG4gICAgICAgICcweDUzNGMzMjhkMjNmMjM0ZTZlMmE0MTNkZWNhMjVjYWVjZTQ1MDYxNDQwMzdjNDAzMTRlY2JkMGI1M2Q5ZGQyNjInLFxuICAgICAgICAnMHg4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZGFhYWFhODhjJyxcbiAgICBdLFxuICAgIC8vIHhEZW5cbiAgICBbXG4gICAgICAgICcweGQzNTc3MTE5M2Q5NDkxOGE5Y2EzNGNjYmI3YjY0MGRkODZjZDQwOTU0MmY4NDg3ZDlmZTZiNzQ1NzgxZWI0OWInLFxuICAgICAgICAnMHhlZGFkYzZmNjQzODNkYzFkZjdjNGIyZDUxYjU0MjI1NDA2ZDM2YjY0MWY1ZTQxYmJjNTJhNTY2MTJhOGM2ZDE0JyxcbiAgICAgICAgJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMScsIC8vIExBU1QgMVxuICAgIF0sXG4gICAgLy8geU51bVxuICAgIFtcbiAgICAgICAgJzB4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGI4ZTM4ZTIzYycsXG4gICAgICAgICcweGM3NWUwYzMyZDVjYjdjMGZhOWQwYTU0YjEyYTBhNmQ1NjQ3YWIwNDZkNjg2ZGE2ZmRmZmM5MGZjMjAxZDcxYTMnLFxuICAgICAgICAnMHgyOWE2MTk0NjkxZjkxYTczNzE1MjA5ZWY2NTEyZTU3NjcyMjgzMGEyMDFiZTIwMThhNzY1ZTg1YTllY2VlOTMxJyxcbiAgICAgICAgJzB4MmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmYzOGUzOGQ4NCcsXG4gICAgXSxcbiAgICAvLyB5RGVuXG4gICAgW1xuICAgICAgICAnMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWZmZmZmOTNiJyxcbiAgICAgICAgJzB4N2EwNjUzNGJiOGJkYjQ5ZmQ1ZTllNjYzMjcyMmMyOTg5NDY3YzFiZmM4ZThkOTc4ZGZiNDI1ZDI2ODVjMjU3MycsXG4gICAgICAgICcweDY0ODRhYTcxNjU0NWNhMmNmM2E3MGMzZmE4ZmUzMzdlMGEzZDIxMTYyZjBkNjI5OWE3YmY4MTkyYmZkMmE3NmYnLFxuICAgICAgICAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxJywgLy8gTEFTVCAxXG4gICAgXSxcbl0ubWFwKChpKSA9PiBpLm1hcCgoaikgPT4gQmlnSW50KGopKSkpKSgpO1xuY29uc3QgbWFwU1dVID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBtYXBUb0N1cnZlU2ltcGxlU1dVKEZwLCB7XG4gICAgQTogQmlnSW50KCcweDNmODczMWFiZGQ2NjFhZGNhMDhhNTU1OGYwZjVkMjcyZTk1M2QzNjNjYjZmMGU1ZDQwNTQ0N2MwMWE0NDQ1MzMnKSxcbiAgICBCOiBCaWdJbnQoJzE3NzEnKSxcbiAgICBaOiBGcC5jcmVhdGUoQmlnSW50KCctMTEnKSksXG59KSkoKTtcbmNvbnN0IGh0ZiA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gY3JlYXRlSGFzaGVyKHNlY3AyNTZrMS5Qcm9qZWN0aXZlUG9pbnQsIChzY2FsYXJzKSA9PiB7XG4gICAgY29uc3QgeyB4LCB5IH0gPSBtYXBTV1UoRnAuY3JlYXRlKHNjYWxhcnNbMF0pKTtcbiAgICByZXR1cm4gaXNvTWFwKHgsIHkpO1xufSwge1xuICAgIERTVDogJ3NlY3AyNTZrMV9YTUQ6U0hBLTI1Nl9TU1dVX1JPXycsXG4gICAgZW5jb2RlRFNUOiAnc2VjcDI1NmsxX1hNRDpTSEEtMjU2X1NTV1VfTlVfJyxcbiAgICBwOiBGcC5PUkRFUixcbiAgICBtOiAxLFxuICAgIGs6IDEyOCxcbiAgICBleHBhbmQ6ICd4bWQnLFxuICAgIGhhc2g6IHNoYTI1Nixcbn0pKSgpO1xuZXhwb3J0IGNvbnN0IGhhc2hUb0N1cnZlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBodGYuaGFzaFRvQ3VydmUpKCk7XG5leHBvcnQgY29uc3QgZW5jb2RlVG9DdXJ2ZSA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gaHRmLmVuY29kZVRvQ3VydmUpKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWNwMjU2azEuanMubWFwIiwiLyoqXG4gKiAgQWRkIGRldGFpbHMgYWJvdXQgc2lnbmluZyBoZXJlLlxuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9jcnlwdG86U2lnbmluZyAgW2Fib3V0LXNpZ25pbmddXG4gKi9cbmltcG9ydCB7IHNlY3AyNTZrMSB9IGZyb20gXCJAbm9ibGUvY3VydmVzL3NlY3AyNTZrMVwiO1xuaW1wb3J0IHsgY29uY2F0LCBkYXRhTGVuZ3RoLCBnZXRCeXRlcywgZ2V0Qnl0ZXNDb3B5LCBoZXhsaWZ5LCB0b0JlSGV4LCBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgU2lnbmF0dXJlIH0gZnJvbSBcIi4vc2lnbmF0dXJlLmpzXCI7XG4vKipcbiAqICBBICoqU2lnbmluZ0tleSoqIHByb3ZpZGVzIGhpZ2gtbGV2ZWwgYWNjZXNzIHRvIHRoZSBlbGxpcHRpYyBjdXJ2ZVxuICogIGNyeXB0b2dyYXBoeSAoRUNDKSBvcGVyYXRpb25zIGFuZCBrZXkgbWFuYWdlbWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNpZ25pbmdLZXkge1xuICAgICNwcml2YXRlS2V5O1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3ICoqU2lnbmluZ0tleSoqIGZvciAlJXByaXZhdGVLZXklJS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlS2V5KSB7XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGRhdGFMZW5ndGgocHJpdmF0ZUtleSkgPT09IDMyLCBcImludmFsaWQgcHJpdmF0ZSBrZXlcIiwgXCJwcml2YXRlS2V5XCIsIFwiW1JFREFDVEVEXVwiKTtcbiAgICAgICAgdGhpcy4jcHJpdmF0ZUtleSA9IGhleGxpZnkocHJpdmF0ZUtleSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgcHJpdmF0ZSBrZXkuXG4gICAgICovXG4gICAgZ2V0IHByaXZhdGVLZXkoKSB7IHJldHVybiB0aGlzLiNwcml2YXRlS2V5OyB9XG4gICAgLyoqXG4gICAgICogIFRoZSB1bmNvbXByZXNzZWQgcHVibGljIGtleS5cbiAgICAgKlxuICAgICAqIFRoaXMgd2lsbCBhbHdheXMgYmVnaW4gd2l0aCB0aGUgcHJlZml4IGBgMHgwNGBgIGFuZCBiZSAxMzJcbiAgICAgKiBjaGFyYWN0ZXJzIGxvbmcgKHRoZSBgYDB4YGAgcHJlZml4IGFuZCAxMzAgaGV4YWRlY2ltYWwgbmliYmxlcykuXG4gICAgICovXG4gICAgZ2V0IHB1YmxpY0tleSgpIHsgcmV0dXJuIFNpZ25pbmdLZXkuY29tcHV0ZVB1YmxpY0tleSh0aGlzLiNwcml2YXRlS2V5KTsgfVxuICAgIC8qKlxuICAgICAqICBUaGUgY29tcHJlc3NlZCBwdWJsaWMga2V5LlxuICAgICAqXG4gICAgICogIFRoaXMgd2lsbCBhbHdheXMgYmVnaW4gd2l0aCBlaXRoZXIgdGhlIHByZWZpeCBgYDB4MDJgYCBvciBgYDB4MDNgYFxuICAgICAqICBhbmQgYmUgNjggY2hhcmFjdGVycyBsb25nICh0aGUgYGAweGBgIHByZWZpeCBhbmQgMzMgaGV4YWRlY2ltYWxcbiAgICAgKiAgbmliYmxlcylcbiAgICAgKi9cbiAgICBnZXQgY29tcHJlc3NlZFB1YmxpY0tleSgpIHsgcmV0dXJuIFNpZ25pbmdLZXkuY29tcHV0ZVB1YmxpY0tleSh0aGlzLiNwcml2YXRlS2V5LCB0cnVlKTsgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm4gdGhlIHNpZ25hdHVyZSBvZiB0aGUgc2lnbmVkICUlZGlnZXN0JSUuXG4gICAgICovXG4gICAgc2lnbihkaWdlc3QpIHtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZGF0YUxlbmd0aChkaWdlc3QpID09PSAzMiwgXCJpbnZhbGlkIGRpZ2VzdCBsZW5ndGhcIiwgXCJkaWdlc3RcIiwgZGlnZXN0KTtcbiAgICAgICAgY29uc3Qgc2lnID0gc2VjcDI1NmsxLnNpZ24oZ2V0Qnl0ZXNDb3B5KGRpZ2VzdCksIGdldEJ5dGVzQ29weSh0aGlzLiNwcml2YXRlS2V5KSwge1xuICAgICAgICAgICAgbG93UzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFNpZ25hdHVyZS5mcm9tKHtcbiAgICAgICAgICAgIHI6IHRvQmVIZXgoc2lnLnIsIDMyKSxcbiAgICAgICAgICAgIHM6IHRvQmVIZXgoc2lnLnMsIDMyKSxcbiAgICAgICAgICAgIHY6IChzaWcucmVjb3ZlcnkgPyAweDFjIDogMHgxYilcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoZSBbW2xpbmstd2lraS1lY2RoXV0gc2hhcmVkIHNlY3JldCBiZXR3ZWVuIHRoaXNcbiAgICAgKiAgcHJpdmF0ZSBrZXkgYW5kIHRoZSAlJW90aGVyJSUga2V5LlxuICAgICAqXG4gICAgICogIFRoZSAlJW90aGVyJSUga2V5IG1heSBiZSBhbnkgdHlwZSBvZiBrZXksIGEgcmF3IHB1YmxpYyBrZXksXG4gICAgICogIGEgY29tcHJlc3NlZC91bmNvbXByZXNzZWQgcHViaWMga2V5IG9yIGFwcml2YXRlIGtleS5cbiAgICAgKlxuICAgICAqICBCZXN0IHByYWN0aWNlIGlzIHVzdWFsbHkgdG8gdXNlIGEgY3J5cHRvZ3JhcGhpYyBoYXNoIG9uIHRoZVxuICAgICAqICByZXR1cm5lZCB2YWx1ZSBiZWZvcmUgdXNpbmcgaXQgYXMgYSBzeW1ldHJpYyBzZWNyZXQuXG4gICAgICpcbiAgICAgKiAgQGV4YW1wbGU6XG4gICAgICogICAgc2lnbjEgPSBuZXcgU2lnbmluZ0tleShpZChcInNvbWUtc2VjcmV0LTFcIikpXG4gICAgICogICAgc2lnbjIgPSBuZXcgU2lnbmluZ0tleShpZChcInNvbWUtc2VjcmV0LTJcIikpXG4gICAgICpcbiAgICAgKiAgICAvLyBOb3RpY2UgdGhhdCBwcml2QS5jb21wdXRlU2hhcmVkU2VjcmV0KHB1YkIpLi4uXG4gICAgICogICAgc2lnbjEuY29tcHV0ZVNoYXJlZFNlY3JldChzaWduMi5wdWJsaWNLZXkpXG4gICAgICogICAgLy9fcmVzdWx0OlxuICAgICAqXG4gICAgICogICAgLy8gLi4uaXMgZXF1YWwgdG8gcHJpdkIuY29tcHV0ZVNoYXJlZFNlY3JldChwdWJBKS5cbiAgICAgKiAgICBzaWduMi5jb21wdXRlU2hhcmVkU2VjcmV0KHNpZ24xLnB1YmxpY0tleSlcbiAgICAgKiAgICAvL19yZXN1bHQ6XG4gICAgICovXG4gICAgY29tcHV0ZVNoYXJlZFNlY3JldChvdGhlcikge1xuICAgICAgICBjb25zdCBwdWJLZXkgPSBTaWduaW5nS2V5LmNvbXB1dGVQdWJsaWNLZXkob3RoZXIpO1xuICAgICAgICByZXR1cm4gaGV4bGlmeShzZWNwMjU2azEuZ2V0U2hhcmVkU2VjcmV0KGdldEJ5dGVzQ29weSh0aGlzLiNwcml2YXRlS2V5KSwgZ2V0Qnl0ZXMocHViS2V5KSwgZmFsc2UpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIENvbXB1dGUgdGhlIHB1YmxpYyBrZXkgZm9yICUla2V5JSUsIG9wdGlvbmFsbHkgJSVjb21wcmVzc2VkJSUuXG4gICAgICpcbiAgICAgKiAgVGhlICUla2V5JSUgbWF5IGJlIGFueSB0eXBlIG9mIGtleSwgYSByYXcgcHVibGljIGtleSwgYVxuICAgICAqICBjb21wcmVzc2VkL3VuY29tcHJlc3NlZCBwdWJsaWMga2V5IG9yIHByaXZhdGUga2V5LlxuICAgICAqXG4gICAgICogIEBleGFtcGxlOlxuICAgICAqICAgIHNpZ24gPSBuZXcgU2lnbmluZ0tleShpZChcInNvbWUtc2VjcmV0XCIpKTtcbiAgICAgKlxuICAgICAqICAgIC8vIENvbXB1dGUgdGhlIHVuY29tcHJlc3NlZCBwdWJsaWMga2V5IGZvciBhIHByaXZhdGUga2V5XG4gICAgICogICAgU2lnbmluZ0tleS5jb21wdXRlUHVibGljS2V5KHNpZ24ucHJpdmF0ZUtleSlcbiAgICAgKiAgICAvL19yZXN1bHQ6XG4gICAgICpcbiAgICAgKiAgICAvLyBDb21wdXRlIHRoZSBjb21wcmVzc2VkIHB1YmxpYyBrZXkgZm9yIGEgcHJpdmF0ZSBrZXlcbiAgICAgKiAgICBTaWduaW5nS2V5LmNvbXB1dGVQdWJsaWNLZXkoc2lnbi5wcml2YXRlS2V5LCB0cnVlKVxuICAgICAqICAgIC8vX3Jlc3VsdDpcbiAgICAgKlxuICAgICAqICAgIC8vIENvbXB1dGUgdGhlIHVuY29tcHJlc3NlZCBwdWJsaWMga2V5XG4gICAgICogICAgU2lnbmluZ0tleS5jb21wdXRlUHVibGljS2V5KHNpZ24ucHVibGljS2V5LCBmYWxzZSk7XG4gICAgICogICAgLy9fcmVzdWx0OlxuICAgICAqXG4gICAgICogICAgLy8gQ29tcHV0ZSB0aGUgQ29tcHJlc3NlZCBhIHB1YmxpYyBrZXlcbiAgICAgKiAgICBTaWduaW5nS2V5LmNvbXB1dGVQdWJsaWNLZXkoc2lnbi5wdWJsaWNLZXksIHRydWUpO1xuICAgICAqICAgIC8vX3Jlc3VsdDpcbiAgICAgKi9cbiAgICBzdGF0aWMgY29tcHV0ZVB1YmxpY0tleShrZXksIGNvbXByZXNzZWQpIHtcbiAgICAgICAgbGV0IGJ5dGVzID0gZ2V0Qnl0ZXMoa2V5LCBcImtleVwiKTtcbiAgICAgICAgLy8gcHJpdmF0ZSBrZXlcbiAgICAgICAgaWYgKGJ5dGVzLmxlbmd0aCA9PT0gMzIpIHtcbiAgICAgICAgICAgIGNvbnN0IHB1YktleSA9IHNlY3AyNTZrMS5nZXRQdWJsaWNLZXkoYnl0ZXMsICEhY29tcHJlc3NlZCk7XG4gICAgICAgICAgICByZXR1cm4gaGV4bGlmeShwdWJLZXkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJhdyBwdWJsaWMga2V5OyB1c2UgdW5jb21wcmVzc2VkIGtleSB3aXRoIDB4MDQgcHJlZml4XG4gICAgICAgIGlmIChieXRlcy5sZW5ndGggPT09IDY0KSB7XG4gICAgICAgICAgICBjb25zdCBwdWIgPSBuZXcgVWludDhBcnJheSg2NSk7XG4gICAgICAgICAgICBwdWJbMF0gPSAweDA0O1xuICAgICAgICAgICAgcHViLnNldChieXRlcywgMSk7XG4gICAgICAgICAgICBieXRlcyA9IHB1YjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwb2ludCA9IHNlY3AyNTZrMS5Qcm9qZWN0aXZlUG9pbnQuZnJvbUhleChieXRlcyk7XG4gICAgICAgIHJldHVybiBoZXhsaWZ5KHBvaW50LnRvUmF3Qnl0ZXMoY29tcHJlc3NlZCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0aGUgcHVibGljIGtleSBmb3IgdGhlIHByaXZhdGUga2V5IHdoaWNoIHByb2R1Y2VkIHRoZVxuICAgICAqICAlJXNpZ25hdHVyZSUlIGZvciB0aGUgZ2l2ZW4gJSVkaWdlc3QlJS5cbiAgICAgKlxuICAgICAqICBAZXhhbXBsZTpcbiAgICAgKiAgICBrZXkgPSBuZXcgU2lnbmluZ0tleShpZChcInNvbWUtc2VjcmV0XCIpKVxuICAgICAqICAgIGRpZ2VzdCA9IGlkKFwiaGVsbG8gd29ybGRcIilcbiAgICAgKiAgICBzaWcgPSBrZXkuc2lnbihkaWdlc3QpXG4gICAgICpcbiAgICAgKiAgICAvLyBOb3RpY2UgdGhlIHNpZ25lciBwdWJsaWMga2V5Li4uXG4gICAgICogICAga2V5LnB1YmxpY0tleVxuICAgICAqICAgIC8vX3Jlc3VsdDpcbiAgICAgKlxuICAgICAqICAgIC8vIC4uLmlzIGVxdWFsIHRvIHRoZSByZWNvdmVyZWQgcHVibGljIGtleVxuICAgICAqICAgIFNpZ25pbmdLZXkucmVjb3ZlclB1YmxpY0tleShkaWdlc3QsIHNpZylcbiAgICAgKiAgICAvL19yZXN1bHQ6XG4gICAgICpcbiAgICAgKi9cbiAgICBzdGF0aWMgcmVjb3ZlclB1YmxpY0tleShkaWdlc3QsIHNpZ25hdHVyZSkge1xuICAgICAgICBhc3NlcnRBcmd1bWVudChkYXRhTGVuZ3RoKGRpZ2VzdCkgPT09IDMyLCBcImludmFsaWQgZGlnZXN0IGxlbmd0aFwiLCBcImRpZ2VzdFwiLCBkaWdlc3QpO1xuICAgICAgICBjb25zdCBzaWcgPSBTaWduYXR1cmUuZnJvbShzaWduYXR1cmUpO1xuICAgICAgICBsZXQgc2VjcFNpZyA9IHNlY3AyNTZrMS5TaWduYXR1cmUuZnJvbUNvbXBhY3QoZ2V0Qnl0ZXNDb3B5KGNvbmNhdChbc2lnLnIsIHNpZy5zXSkpKTtcbiAgICAgICAgc2VjcFNpZyA9IHNlY3BTaWcuYWRkUmVjb3ZlcnlCaXQoc2lnLnlQYXJpdHkpO1xuICAgICAgICBjb25zdCBwdWJLZXkgPSBzZWNwU2lnLnJlY292ZXJQdWJsaWNLZXkoZ2V0Qnl0ZXNDb3B5KGRpZ2VzdCkpO1xuICAgICAgICBhc3NlcnRBcmd1bWVudChwdWJLZXkgIT0gbnVsbCwgXCJpbnZhbGlkIHNpZ25hdXRyZSBmb3IgZGlnZXN0XCIsIFwic2lnbmF0dXJlXCIsIHNpZ25hdHVyZSk7XG4gICAgICAgIHJldHVybiBcIjB4XCIgKyBwdWJLZXkudG9IZXgoZmFsc2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0aGUgcG9pbnQgcmVzdWx0aW5nIGZyb20gYWRkaW5nIHRoZSBlbGxpcGljIGN1cnZlIHBvaW50c1xuICAgICAqICAlJXAwJSUgYW5kICUlcDElJS5cbiAgICAgKlxuICAgICAqICBUaGlzIGlzIG5vdCBhIGNvbW1vbiBmdW5jdGlvbiBtb3N0IGRldmVsb3BlcnMgc2hvdWxkIHJlcXVpcmUsIGJ1dFxuICAgICAqICBjYW4gYmUgdXNlZnVsIGZvciBjZXJ0YWluIHByaXZhY3ktc3BlY2lmaWMgdGVjaG5pcXVlcy5cbiAgICAgKlxuICAgICAqICBGb3IgZXhhbXBsZSwgaXQgaXMgdXNlZCBieSBbW0hETm9kZVdhbGxldF1dIHRvIGNvbXB1dGUgY2hpbGRcbiAgICAgKiAgYWRkcmVzc2VzIGZyb20gcGFyZW50IHB1YmxpYyBrZXlzIGFuZCBjaGFpbiBjb2Rlcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgYWRkUG9pbnRzKHAwLCBwMSwgY29tcHJlc3NlZCkge1xuICAgICAgICBjb25zdCBwdWIwID0gc2VjcDI1NmsxLlByb2plY3RpdmVQb2ludC5mcm9tSGV4KFNpZ25pbmdLZXkuY29tcHV0ZVB1YmxpY0tleShwMCkuc3Vic3RyaW5nKDIpKTtcbiAgICAgICAgY29uc3QgcHViMSA9IHNlY3AyNTZrMS5Qcm9qZWN0aXZlUG9pbnQuZnJvbUhleChTaWduaW5nS2V5LmNvbXB1dGVQdWJsaWNLZXkocDEpLnN1YnN0cmluZygyKSk7XG4gICAgICAgIHJldHVybiBcIjB4XCIgKyBwdWIwLmFkZChwdWIxKS50b0hleCghIWNvbXByZXNzZWQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25pbmcta2V5LmpzLm1hcCIsIi8vU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vd2lraS93aWtpL1JMUFxuaW1wb3J0IHsgaGV4bGlmeSB9IGZyb20gXCIuL2RhdGEuanNcIjtcbmltcG9ydCB7IGFzc2VydCwgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi9lcnJvcnMuanNcIjtcbmltcG9ydCB7IGdldEJ5dGVzIH0gZnJvbSBcIi4vZGF0YS5qc1wiO1xuZnVuY3Rpb24gaGV4bGlmeUJ5dGUodmFsdWUpIHtcbiAgICBsZXQgcmVzdWx0ID0gdmFsdWUudG9TdHJpbmcoMTYpO1xuICAgIHdoaWxlIChyZXN1bHQubGVuZ3RoIDwgMikge1xuICAgICAgICByZXN1bHQgPSBcIjBcIiArIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIFwiMHhcIiArIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHVuYXJyYXlpZnlJbnRlZ2VyKGRhdGEsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMjU2KSArIGRhdGFbb2Zmc2V0ICsgaV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBfZGVjb2RlQ2hpbGRyZW4oZGF0YSwgb2Zmc2V0LCBjaGlsZE9mZnNldCwgbGVuZ3RoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgd2hpbGUgKGNoaWxkT2Zmc2V0IDwgb2Zmc2V0ICsgMSArIGxlbmd0aCkge1xuICAgICAgICBjb25zdCBkZWNvZGVkID0gX2RlY29kZShkYXRhLCBjaGlsZE9mZnNldCk7XG4gICAgICAgIHJlc3VsdC5wdXNoKGRlY29kZWQucmVzdWx0KTtcbiAgICAgICAgY2hpbGRPZmZzZXQgKz0gZGVjb2RlZC5jb25zdW1lZDtcbiAgICAgICAgYXNzZXJ0KGNoaWxkT2Zmc2V0IDw9IG9mZnNldCArIDEgKyBsZW5ndGgsIFwiY2hpbGQgZGF0YSB0b28gc2hvcnRcIiwgXCJCVUZGRVJfT1ZFUlJVTlwiLCB7XG4gICAgICAgICAgICBidWZmZXI6IGRhdGEsIGxlbmd0aCwgb2Zmc2V0XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4geyBjb25zdW1lZDogKDEgKyBsZW5ndGgpLCByZXN1bHQ6IHJlc3VsdCB9O1xufVxuLy8gcmV0dXJucyB7IGNvbnN1bWVkOiBudW1iZXIsIHJlc3VsdDogT2JqZWN0IH1cbmZ1bmN0aW9uIF9kZWNvZGUoZGF0YSwgb2Zmc2V0KSB7XG4gICAgYXNzZXJ0KGRhdGEubGVuZ3RoICE9PSAwLCBcImRhdGEgdG9vIHNob3J0XCIsIFwiQlVGRkVSX09WRVJSVU5cIiwge1xuICAgICAgICBidWZmZXI6IGRhdGEsIGxlbmd0aDogMCwgb2Zmc2V0OiAxXG4gICAgfSk7XG4gICAgY29uc3QgY2hlY2tPZmZzZXQgPSAob2Zmc2V0KSA9PiB7XG4gICAgICAgIGFzc2VydChvZmZzZXQgPD0gZGF0YS5sZW5ndGgsIFwiZGF0YSBzaG9ydCBzZWdtZW50IHRvbyBzaG9ydFwiLCBcIkJVRkZFUl9PVkVSUlVOXCIsIHtcbiAgICAgICAgICAgIGJ1ZmZlcjogZGF0YSwgbGVuZ3RoOiBkYXRhLmxlbmd0aCwgb2Zmc2V0XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gQXJyYXkgd2l0aCBleHRyYSBsZW5ndGggcHJlZml4XG4gICAgaWYgKGRhdGFbb2Zmc2V0XSA+PSAweGY4KSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aExlbmd0aCA9IGRhdGFbb2Zmc2V0XSAtIDB4Zjc7XG4gICAgICAgIGNoZWNrT2Zmc2V0KG9mZnNldCArIDEgKyBsZW5ndGhMZW5ndGgpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSB1bmFycmF5aWZ5SW50ZWdlcihkYXRhLCBvZmZzZXQgKyAxLCBsZW5ndGhMZW5ndGgpO1xuICAgICAgICBjaGVja09mZnNldChvZmZzZXQgKyAxICsgbGVuZ3RoTGVuZ3RoICsgbGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIF9kZWNvZGVDaGlsZHJlbihkYXRhLCBvZmZzZXQsIG9mZnNldCArIDEgKyBsZW5ndGhMZW5ndGgsIGxlbmd0aExlbmd0aCArIGxlbmd0aCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGFbb2Zmc2V0XSA+PSAweGMwKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGRhdGFbb2Zmc2V0XSAtIDB4YzA7XG4gICAgICAgIGNoZWNrT2Zmc2V0KG9mZnNldCArIDEgKyBsZW5ndGgpO1xuICAgICAgICByZXR1cm4gX2RlY29kZUNoaWxkcmVuKGRhdGEsIG9mZnNldCwgb2Zmc2V0ICsgMSwgbGVuZ3RoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGF0YVtvZmZzZXRdID49IDB4YjgpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoTGVuZ3RoID0gZGF0YVtvZmZzZXRdIC0gMHhiNztcbiAgICAgICAgY2hlY2tPZmZzZXQob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCk7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHVuYXJyYXlpZnlJbnRlZ2VyKGRhdGEsIG9mZnNldCArIDEsIGxlbmd0aExlbmd0aCk7XG4gICAgICAgIGNoZWNrT2Zmc2V0KG9mZnNldCArIDEgKyBsZW5ndGhMZW5ndGggKyBsZW5ndGgpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBoZXhsaWZ5KGRhdGEuc2xpY2Uob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCwgb2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCArIGxlbmd0aCkpO1xuICAgICAgICByZXR1cm4geyBjb25zdW1lZDogKDEgKyBsZW5ndGhMZW5ndGggKyBsZW5ndGgpLCByZXN1bHQ6IHJlc3VsdCB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhW29mZnNldF0gPj0gMHg4MCkge1xuICAgICAgICBjb25zdCBsZW5ndGggPSBkYXRhW29mZnNldF0gLSAweDgwO1xuICAgICAgICBjaGVja09mZnNldChvZmZzZXQgKyAxICsgbGVuZ3RoKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gaGV4bGlmeShkYXRhLnNsaWNlKG9mZnNldCArIDEsIG9mZnNldCArIDEgKyBsZW5ndGgpKTtcbiAgICAgICAgcmV0dXJuIHsgY29uc3VtZWQ6ICgxICsgbGVuZ3RoKSwgcmVzdWx0OiByZXN1bHQgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgY29uc3VtZWQ6IDEsIHJlc3VsdDogaGV4bGlmeUJ5dGUoZGF0YVtvZmZzZXRdKSB9O1xufVxuLyoqXG4gKiAgRGVjb2RlcyAlJWRhdGElJSBpbnRvIHRoZSBzdHJ1Y3R1cmVkIGRhdGEgaXQgcmVwcmVzZW50cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVJscChfZGF0YSkge1xuICAgIGNvbnN0IGRhdGEgPSBnZXRCeXRlcyhfZGF0YSwgXCJkYXRhXCIpO1xuICAgIGNvbnN0IGRlY29kZWQgPSBfZGVjb2RlKGRhdGEsIDApO1xuICAgIGFzc2VydEFyZ3VtZW50KGRlY29kZWQuY29uc3VtZWQgPT09IGRhdGEubGVuZ3RoLCBcInVuZXhwZWN0ZWQganVuayBhZnRlciBybHAgcGF5bG9hZFwiLCBcImRhdGFcIiwgX2RhdGEpO1xuICAgIHJldHVybiBkZWNvZGVkLnJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJscC1kZWNvZGUuanMubWFwIiwiLy9TZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS93aWtpL3dpa2kvUkxQXG5pbXBvcnQgeyBnZXRCeXRlcyB9IGZyb20gXCIuL2RhdGEuanNcIjtcbmZ1bmN0aW9uIGFycmF5aWZ5SW50ZWdlcih2YWx1ZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIHdoaWxlICh2YWx1ZSkge1xuICAgICAgICByZXN1bHQudW5zaGlmdCh2YWx1ZSAmIDB4ZmYpO1xuICAgICAgICB2YWx1ZSA+Pj0gODtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIF9lbmNvZGUob2JqZWN0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgICAgICBsZXQgcGF5bG9hZCA9IFtdO1xuICAgICAgICBvYmplY3QuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIHBheWxvYWQgPSBwYXlsb2FkLmNvbmNhdChfZW5jb2RlKGNoaWxkKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocGF5bG9hZC5sZW5ndGggPD0gNTUpIHtcbiAgICAgICAgICAgIHBheWxvYWQudW5zaGlmdCgweGMwICsgcGF5bG9hZC5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXlpZnlJbnRlZ2VyKHBheWxvYWQubGVuZ3RoKTtcbiAgICAgICAgbGVuZ3RoLnVuc2hpZnQoMHhmNyArIGxlbmd0aC5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gbGVuZ3RoLmNvbmNhdChwYXlsb2FkKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGdldEJ5dGVzKG9iamVjdCwgXCJvYmplY3RcIikpO1xuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMSAmJiBkYXRhWzBdIDw9IDB4N2YpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGEubGVuZ3RoIDw9IDU1KSB7XG4gICAgICAgIGRhdGEudW5zaGlmdCgweDgwICsgZGF0YS5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgY29uc3QgbGVuZ3RoID0gYXJyYXlpZnlJbnRlZ2VyKGRhdGEubGVuZ3RoKTtcbiAgICBsZW5ndGgudW5zaGlmdCgweGI3ICsgbGVuZ3RoLmxlbmd0aCk7XG4gICAgcmV0dXJuIGxlbmd0aC5jb25jYXQoZGF0YSk7XG59XG5jb25zdCBuaWJibGVzID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XG4vKipcbiAqICBFbmNvZGVzICUlb2JqZWN0JSUgYXMgYW4gUkxQLWVuY29kZWQgW1tEYXRhSGV4U3RyaW5nXV0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVSbHAob2JqZWN0KSB7XG4gICAgbGV0IHJlc3VsdCA9IFwiMHhcIjtcbiAgICBmb3IgKGNvbnN0IHYgb2YgX2VuY29kZShvYmplY3QpKSB7XG4gICAgICAgIHJlc3VsdCArPSBuaWJibGVzW3YgPj4gNF07XG4gICAgICAgIHJlc3VsdCArPSBuaWJibGVzW3YgJiAweGZdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmxwLWVuY29kZS5qcy5tYXAiLCJpbXBvcnQgeyBnZXRBZGRyZXNzIH0gZnJvbSBcIi4uL2FkZHJlc3MvaW5kZXguanNcIjtcbmltcG9ydCB7IFplcm9BZGRyZXNzIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9hZGRyZXNzZXMuanNcIjtcbmltcG9ydCB7IGtlY2NhazI1NiwgU2lnbmF0dXJlLCBTaWduaW5nS2V5IH0gZnJvbSBcIi4uL2NyeXB0by9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY29uY2F0LCBkZWNvZGVSbHAsIGVuY29kZVJscCwgZ2V0Qnl0ZXMsIGdldEJpZ0ludCwgZ2V0TnVtYmVyLCBoZXhsaWZ5LCBhc3NlcnQsIGFzc2VydEFyZ3VtZW50LCBpc0hleFN0cmluZywgdG9CZUFycmF5LCB6ZXJvUGFkVmFsdWUgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGFjY2Vzc0xpc3RpZnkgfSBmcm9tIFwiLi9hY2Nlc3NsaXN0LmpzXCI7XG5pbXBvcnQgeyByZWNvdmVyQWRkcmVzcyB9IGZyb20gXCIuL2FkZHJlc3MuanNcIjtcbmNvbnN0IEJOXzAgPSBCaWdJbnQoMCk7XG5jb25zdCBCTl8yID0gQmlnSW50KDIpO1xuY29uc3QgQk5fMjcgPSBCaWdJbnQoMjcpO1xuY29uc3QgQk5fMjggPSBCaWdJbnQoMjgpO1xuY29uc3QgQk5fMzUgPSBCaWdJbnQoMzUpO1xuY29uc3QgQk5fTUFYX1VJTlQgPSBCaWdJbnQoXCIweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIik7XG5mdW5jdGlvbiBoYW5kbGVBZGRyZXNzKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBcIjB4XCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBnZXRBZGRyZXNzKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGhhbmRsZUFjY2Vzc0xpc3QodmFsdWUsIHBhcmFtKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFjY2Vzc0xpc3RpZnkodmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIGVycm9yLm1lc3NhZ2UsIHBhcmFtLCB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFuZGxlTnVtYmVyKF92YWx1ZSwgcGFyYW0pIHtcbiAgICBpZiAoX3ZhbHVlID09PSBcIjB4XCIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiBnZXROdW1iZXIoX3ZhbHVlLCBwYXJhbSk7XG59XG5mdW5jdGlvbiBoYW5kbGVVaW50KF92YWx1ZSwgcGFyYW0pIHtcbiAgICBpZiAoX3ZhbHVlID09PSBcIjB4XCIpIHtcbiAgICAgICAgcmV0dXJuIEJOXzA7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gZ2V0QmlnSW50KF92YWx1ZSwgcGFyYW0pO1xuICAgIGFzc2VydEFyZ3VtZW50KHZhbHVlIDw9IEJOX01BWF9VSU5ULCBcInZhbHVlIGV4Y2VlZHMgdWludCBzaXplXCIsIHBhcmFtLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gZm9ybWF0TnVtYmVyKF92YWx1ZSwgbmFtZSkge1xuICAgIGNvbnN0IHZhbHVlID0gZ2V0QmlnSW50KF92YWx1ZSwgXCJ2YWx1ZVwiKTtcbiAgICBjb25zdCByZXN1bHQgPSB0b0JlQXJyYXkodmFsdWUpO1xuICAgIGFzc2VydEFyZ3VtZW50KHJlc3VsdC5sZW5ndGggPD0gMzIsIGB2YWx1ZSB0b28gbGFyZ2VgLCBgdHguJHtuYW1lfWAsIHZhbHVlKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZm9ybWF0QWNjZXNzTGlzdCh2YWx1ZSkge1xuICAgIHJldHVybiBhY2Nlc3NMaXN0aWZ5KHZhbHVlKS5tYXAoKHNldCkgPT4gW3NldC5hZGRyZXNzLCBzZXQuc3RvcmFnZUtleXNdKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdEhhc2hlcyh2YWx1ZSwgcGFyYW0pIHtcbiAgICBhc3NlcnRBcmd1bWVudChBcnJheS5pc0FycmF5KHZhbHVlKSwgYGludmFsaWQgJHtwYXJhbX1gLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGlzSGV4U3RyaW5nKHZhbHVlW2ldLCAzMiksIFwiaW52YWxpZCAkeyBwYXJhbSB9IGhhc2hcIiwgYHZhbHVlWyR7aX1dYCwgdmFsdWVbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcGFyc2VMZWdhY3koZGF0YSkge1xuICAgIGNvbnN0IGZpZWxkcyA9IGRlY29kZVJscChkYXRhKTtcbiAgICBhc3NlcnRBcmd1bWVudChBcnJheS5pc0FycmF5KGZpZWxkcykgJiYgKGZpZWxkcy5sZW5ndGggPT09IDkgfHwgZmllbGRzLmxlbmd0aCA9PT0gNiksIFwiaW52YWxpZCBmaWVsZCBjb3VudCBmb3IgbGVnYWN5IHRyYW5zYWN0aW9uXCIsIFwiZGF0YVwiLCBkYXRhKTtcbiAgICBjb25zdCB0eCA9IHtcbiAgICAgICAgdHlwZTogMCxcbiAgICAgICAgbm9uY2U6IGhhbmRsZU51bWJlcihmaWVsZHNbMF0sIFwibm9uY2VcIiksXG4gICAgICAgIGdhc1ByaWNlOiBoYW5kbGVVaW50KGZpZWxkc1sxXSwgXCJnYXNQcmljZVwiKSxcbiAgICAgICAgZ2FzTGltaXQ6IGhhbmRsZVVpbnQoZmllbGRzWzJdLCBcImdhc0xpbWl0XCIpLFxuICAgICAgICB0bzogaGFuZGxlQWRkcmVzcyhmaWVsZHNbM10pLFxuICAgICAgICB2YWx1ZTogaGFuZGxlVWludChmaWVsZHNbNF0sIFwidmFsdWVcIiksXG4gICAgICAgIGRhdGE6IGhleGxpZnkoZmllbGRzWzVdKSxcbiAgICAgICAgY2hhaW5JZDogQk5fMFxuICAgIH07XG4gICAgLy8gTGVnYWN5IHVuc2lnbmVkIHRyYW5zYWN0aW9uXG4gICAgaWYgKGZpZWxkcy5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgcmV0dXJuIHR4O1xuICAgIH1cbiAgICBjb25zdCB2ID0gaGFuZGxlVWludChmaWVsZHNbNl0sIFwidlwiKTtcbiAgICBjb25zdCByID0gaGFuZGxlVWludChmaWVsZHNbN10sIFwiclwiKTtcbiAgICBjb25zdCBzID0gaGFuZGxlVWludChmaWVsZHNbOF0sIFwic1wiKTtcbiAgICBpZiAociA9PT0gQk5fMCAmJiBzID09PSBCTl8wKSB7XG4gICAgICAgIC8vIEVJUC0xNTUgdW5zaWduZWQgdHJhbnNhY3Rpb25cbiAgICAgICAgdHguY2hhaW5JZCA9IHY7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBDb21wdXRlIHRoZSBFSVAtMTU1IGNoYWluIElEIChvciAwIGZvciBsZWdhY3kpXG4gICAgICAgIGxldCBjaGFpbklkID0gKHYgLSBCTl8zNSkgLyBCTl8yO1xuICAgICAgICBpZiAoY2hhaW5JZCA8IEJOXzApIHtcbiAgICAgICAgICAgIGNoYWluSWQgPSBCTl8wO1xuICAgICAgICB9XG4gICAgICAgIHR4LmNoYWluSWQgPSBjaGFpbklkO1xuICAgICAgICAvLyBTaWduZWQgTGVnYWN5IFRyYW5zYWN0aW9uXG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGNoYWluSWQgIT09IEJOXzAgfHwgKHYgPT09IEJOXzI3IHx8IHYgPT09IEJOXzI4KSwgXCJub24tY2Fub25pY2FsIGxlZ2FjeSB2XCIsIFwidlwiLCBmaWVsZHNbNl0pO1xuICAgICAgICB0eC5zaWduYXR1cmUgPSBTaWduYXR1cmUuZnJvbSh7XG4gICAgICAgICAgICByOiB6ZXJvUGFkVmFsdWUoZmllbGRzWzddLCAzMiksXG4gICAgICAgICAgICBzOiB6ZXJvUGFkVmFsdWUoZmllbGRzWzhdLCAzMiksXG4gICAgICAgICAgICB2XG4gICAgICAgIH0pO1xuICAgICAgICB0eC5oYXNoID0ga2VjY2FrMjU2KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gdHg7XG59XG5mdW5jdGlvbiBfc2VyaWFsaXplTGVnYWN5KHR4LCBzaWcpIHtcbiAgICBjb25zdCBmaWVsZHMgPSBbXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5ub25jZSwgXCJub25jZVwiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4Lmdhc1ByaWNlIHx8IDAsIFwiZ2FzUHJpY2VcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5nYXNMaW1pdCwgXCJnYXNMaW1pdFwiKSxcbiAgICAgICAgKHR4LnRvIHx8IFwiMHhcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC52YWx1ZSwgXCJ2YWx1ZVwiKSxcbiAgICAgICAgdHguZGF0YSxcbiAgICBdO1xuICAgIGxldCBjaGFpbklkID0gQk5fMDtcbiAgICBpZiAodHguY2hhaW5JZCAhPSBCTl8wKSB7XG4gICAgICAgIC8vIEEgY2hhaW5JZCB3YXMgcHJvdmlkZWQ7IGlmIG5vbi16ZXJvIHdlJ2xsIHVzZSBFSVAtMTU1XG4gICAgICAgIGNoYWluSWQgPSBnZXRCaWdJbnQodHguY2hhaW5JZCwgXCJ0eC5jaGFpbklkXCIpO1xuICAgICAgICAvLyBXZSBoYXZlIGEgY2hhaW5JZCBpbiB0aGUgdHggYW5kIGFuIEVJUC0xNTUgdiBpbiB0aGUgc2lnbmF0dXJlLFxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhleSBhZ3JlZSB3aXRoIGVhY2ggb3RoZXJcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoIXNpZyB8fCBzaWcubmV0d29ya1YgPT0gbnVsbCB8fCBzaWcubGVnYWN5Q2hhaW5JZCA9PT0gY2hhaW5JZCwgXCJ0eC5jaGFpbklkL3NpZy52IG1pc21hdGNoXCIsIFwic2lnXCIsIHNpZyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR4LnNpZ25hdHVyZSkge1xuICAgICAgICAvLyBObyBleHBsaWNpdCBjaGFpbklkLCBidXQgRUlQLTE1NSBoYXZlIGEgZGVyaXZlZCBpbXBsaWNpdCBjaGFpbklkXG4gICAgICAgIGNvbnN0IGxlZ2FjeSA9IHR4LnNpZ25hdHVyZS5sZWdhY3lDaGFpbklkO1xuICAgICAgICBpZiAobGVnYWN5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNoYWluSWQgPSBsZWdhY3k7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVxdWVzdGluZyBhbiB1bnNpZ25lZCB0cmFuc2FjdGlvblxuICAgIGlmICghc2lnKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgYW4gRUlQLTE1NSB0cmFuc2FjdGlvbiAoY2hhaW5JZCB3YXMgc3BlY2lmaWVkIGFuZCBub24temVybylcbiAgICAgICAgaWYgKGNoYWluSWQgIT09IEJOXzApIHtcbiAgICAgICAgICAgIGZpZWxkcy5wdXNoKHRvQmVBcnJheShjaGFpbklkKSk7XG4gICAgICAgICAgICBmaWVsZHMucHVzaChcIjB4XCIpO1xuICAgICAgICAgICAgZmllbGRzLnB1c2goXCIweFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW5jb2RlUmxwKGZpZWxkcyk7XG4gICAgfVxuICAgIC8vIEBUT0RPOiBXZSBzaG91bGQgcHJvYmFibHkgY2hlY2sgdGhhdCB0eC5zaWduYXR1cmUsIGNoYWluSWQsIGFuZCBzaWdcbiAgICAvLyAgICAgICAgbWF0Y2ggYnV0IHRoYXQgbG9naWMgY291bGQgYnJlYWsgZXhpc3RpbmcgY29kZSwgc28gc2NoZWR1bGVcbiAgICAvLyAgICAgICAgdGhpcyBmb3IgdGhlIG5leHQgbWFqb3IgYnVtcC5cbiAgICAvLyBDb21wdXRlIHRoZSBFSVAtMTU1IHZcbiAgICBsZXQgdiA9IEJpZ0ludCgyNyArIHNpZy55UGFyaXR5KTtcbiAgICBpZiAoY2hhaW5JZCAhPT0gQk5fMCkge1xuICAgICAgICB2ID0gU2lnbmF0dXJlLmdldENoYWluSWRWKGNoYWluSWQsIHNpZy52KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQmlnSW50KHNpZy52KSAhPT0gdikge1xuICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgXCJ0eC5jaGFpbklkL3NpZy52IG1pc21hdGNoXCIsIFwic2lnXCIsIHNpZyk7XG4gICAgfVxuICAgIC8vIEFkZCB0aGUgc2lnbmF0dXJlXG4gICAgZmllbGRzLnB1c2godG9CZUFycmF5KHYpKTtcbiAgICBmaWVsZHMucHVzaCh0b0JlQXJyYXkoc2lnLnIpKTtcbiAgICBmaWVsZHMucHVzaCh0b0JlQXJyYXkoc2lnLnMpKTtcbiAgICByZXR1cm4gZW5jb2RlUmxwKGZpZWxkcyk7XG59XG5mdW5jdGlvbiBfcGFyc2VFaXBTaWduYXR1cmUodHgsIGZpZWxkcykge1xuICAgIGxldCB5UGFyaXR5O1xuICAgIHRyeSB7XG4gICAgICAgIHlQYXJpdHkgPSBoYW5kbGVOdW1iZXIoZmllbGRzWzBdLCBcInlQYXJpdHlcIik7XG4gICAgICAgIGlmICh5UGFyaXR5ICE9PSAwICYmIHlQYXJpdHkgIT09IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImJhZCB5UGFyaXR5XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgXCJpbnZhbGlkIHlQYXJpdHlcIiwgXCJ5UGFyaXR5XCIsIGZpZWxkc1swXSk7XG4gICAgfVxuICAgIGNvbnN0IHIgPSB6ZXJvUGFkVmFsdWUoZmllbGRzWzFdLCAzMik7XG4gICAgY29uc3QgcyA9IHplcm9QYWRWYWx1ZShmaWVsZHNbMl0sIDMyKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBTaWduYXR1cmUuZnJvbSh7IHIsIHMsIHlQYXJpdHkgfSk7XG4gICAgdHguc2lnbmF0dXJlID0gc2lnbmF0dXJlO1xufVxuZnVuY3Rpb24gX3BhcnNlRWlwMTU1OShkYXRhKSB7XG4gICAgY29uc3QgZmllbGRzID0gZGVjb2RlUmxwKGdldEJ5dGVzKGRhdGEpLnNsaWNlKDEpKTtcbiAgICBhc3NlcnRBcmd1bWVudChBcnJheS5pc0FycmF5KGZpZWxkcykgJiYgKGZpZWxkcy5sZW5ndGggPT09IDkgfHwgZmllbGRzLmxlbmd0aCA9PT0gMTIpLCBcImludmFsaWQgZmllbGQgY291bnQgZm9yIHRyYW5zYWN0aW9uIHR5cGU6IDJcIiwgXCJkYXRhXCIsIGhleGxpZnkoZGF0YSkpO1xuICAgIGNvbnN0IHR4ID0ge1xuICAgICAgICB0eXBlOiAyLFxuICAgICAgICBjaGFpbklkOiBoYW5kbGVVaW50KGZpZWxkc1swXSwgXCJjaGFpbklkXCIpLFxuICAgICAgICBub25jZTogaGFuZGxlTnVtYmVyKGZpZWxkc1sxXSwgXCJub25jZVwiKSxcbiAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IGhhbmRsZVVpbnQoZmllbGRzWzJdLCBcIm1heFByaW9yaXR5RmVlUGVyR2FzXCIpLFxuICAgICAgICBtYXhGZWVQZXJHYXM6IGhhbmRsZVVpbnQoZmllbGRzWzNdLCBcIm1heEZlZVBlckdhc1wiKSxcbiAgICAgICAgZ2FzUHJpY2U6IG51bGwsXG4gICAgICAgIGdhc0xpbWl0OiBoYW5kbGVVaW50KGZpZWxkc1s0XSwgXCJnYXNMaW1pdFwiKSxcbiAgICAgICAgdG86IGhhbmRsZUFkZHJlc3MoZmllbGRzWzVdKSxcbiAgICAgICAgdmFsdWU6IGhhbmRsZVVpbnQoZmllbGRzWzZdLCBcInZhbHVlXCIpLFxuICAgICAgICBkYXRhOiBoZXhsaWZ5KGZpZWxkc1s3XSksXG4gICAgICAgIGFjY2Vzc0xpc3Q6IGhhbmRsZUFjY2Vzc0xpc3QoZmllbGRzWzhdLCBcImFjY2Vzc0xpc3RcIiksXG4gICAgfTtcbiAgICAvLyBVbnNpZ25lZCBFSVAtMTU1OSBUcmFuc2FjdGlvblxuICAgIGlmIChmaWVsZHMubGVuZ3RoID09PSA5KSB7XG4gICAgICAgIHJldHVybiB0eDtcbiAgICB9XG4gICAgdHguaGFzaCA9IGtlY2NhazI1NihkYXRhKTtcbiAgICBfcGFyc2VFaXBTaWduYXR1cmUodHgsIGZpZWxkcy5zbGljZSg5KSk7XG4gICAgcmV0dXJuIHR4O1xufVxuZnVuY3Rpb24gX3NlcmlhbGl6ZUVpcDE1NTkodHgsIHNpZykge1xuICAgIGNvbnN0IGZpZWxkcyA9IFtcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4LmNoYWluSWQsIFwiY2hhaW5JZFwiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4Lm5vbmNlLCBcIm5vbmNlXCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgfHwgMCwgXCJtYXhQcmlvcml0eUZlZVBlckdhc1wiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4Lm1heEZlZVBlckdhcyB8fCAwLCBcIm1heEZlZVBlckdhc1wiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4Lmdhc0xpbWl0LCBcImdhc0xpbWl0XCIpLFxuICAgICAgICAodHgudG8gfHwgXCIweFwiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4LnZhbHVlLCBcInZhbHVlXCIpLFxuICAgICAgICB0eC5kYXRhLFxuICAgICAgICBmb3JtYXRBY2Nlc3NMaXN0KHR4LmFjY2Vzc0xpc3QgfHwgW10pXG4gICAgXTtcbiAgICBpZiAoc2lnKSB7XG4gICAgICAgIGZpZWxkcy5wdXNoKGZvcm1hdE51bWJlcihzaWcueVBhcml0eSwgXCJ5UGFyaXR5XCIpKTtcbiAgICAgICAgZmllbGRzLnB1c2godG9CZUFycmF5KHNpZy5yKSk7XG4gICAgICAgIGZpZWxkcy5wdXNoKHRvQmVBcnJheShzaWcucykpO1xuICAgIH1cbiAgICByZXR1cm4gY29uY2F0KFtcIjB4MDJcIiwgZW5jb2RlUmxwKGZpZWxkcyldKTtcbn1cbmZ1bmN0aW9uIF9wYXJzZUVpcDI5MzAoZGF0YSkge1xuICAgIGNvbnN0IGZpZWxkcyA9IGRlY29kZVJscChnZXRCeXRlcyhkYXRhKS5zbGljZSgxKSk7XG4gICAgYXNzZXJ0QXJndW1lbnQoQXJyYXkuaXNBcnJheShmaWVsZHMpICYmIChmaWVsZHMubGVuZ3RoID09PSA4IHx8IGZpZWxkcy5sZW5ndGggPT09IDExKSwgXCJpbnZhbGlkIGZpZWxkIGNvdW50IGZvciB0cmFuc2FjdGlvbiB0eXBlOiAxXCIsIFwiZGF0YVwiLCBoZXhsaWZ5KGRhdGEpKTtcbiAgICBjb25zdCB0eCA9IHtcbiAgICAgICAgdHlwZTogMSxcbiAgICAgICAgY2hhaW5JZDogaGFuZGxlVWludChmaWVsZHNbMF0sIFwiY2hhaW5JZFwiKSxcbiAgICAgICAgbm9uY2U6IGhhbmRsZU51bWJlcihmaWVsZHNbMV0sIFwibm9uY2VcIiksXG4gICAgICAgIGdhc1ByaWNlOiBoYW5kbGVVaW50KGZpZWxkc1syXSwgXCJnYXNQcmljZVwiKSxcbiAgICAgICAgZ2FzTGltaXQ6IGhhbmRsZVVpbnQoZmllbGRzWzNdLCBcImdhc0xpbWl0XCIpLFxuICAgICAgICB0bzogaGFuZGxlQWRkcmVzcyhmaWVsZHNbNF0pLFxuICAgICAgICB2YWx1ZTogaGFuZGxlVWludChmaWVsZHNbNV0sIFwidmFsdWVcIiksXG4gICAgICAgIGRhdGE6IGhleGxpZnkoZmllbGRzWzZdKSxcbiAgICAgICAgYWNjZXNzTGlzdDogaGFuZGxlQWNjZXNzTGlzdChmaWVsZHNbN10sIFwiYWNjZXNzTGlzdFwiKVxuICAgIH07XG4gICAgLy8gVW5zaWduZWQgRUlQLTI5MzAgVHJhbnNhY3Rpb25cbiAgICBpZiAoZmllbGRzLmxlbmd0aCA9PT0gOCkge1xuICAgICAgICByZXR1cm4gdHg7XG4gICAgfVxuICAgIHR4Lmhhc2ggPSBrZWNjYWsyNTYoZGF0YSk7XG4gICAgX3BhcnNlRWlwU2lnbmF0dXJlKHR4LCBmaWVsZHMuc2xpY2UoOCkpO1xuICAgIHJldHVybiB0eDtcbn1cbmZ1bmN0aW9uIF9zZXJpYWxpemVFaXAyOTMwKHR4LCBzaWcpIHtcbiAgICBjb25zdCBmaWVsZHMgPSBbXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5jaGFpbklkLCBcImNoYWluSWRcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5ub25jZSwgXCJub25jZVwiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4Lmdhc1ByaWNlIHx8IDAsIFwiZ2FzUHJpY2VcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5nYXNMaW1pdCwgXCJnYXNMaW1pdFwiKSxcbiAgICAgICAgKHR4LnRvIHx8IFwiMHhcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC52YWx1ZSwgXCJ2YWx1ZVwiKSxcbiAgICAgICAgdHguZGF0YSxcbiAgICAgICAgZm9ybWF0QWNjZXNzTGlzdCh0eC5hY2Nlc3NMaXN0IHx8IFtdKVxuICAgIF07XG4gICAgaWYgKHNpZykge1xuICAgICAgICBmaWVsZHMucHVzaChmb3JtYXROdW1iZXIoc2lnLnlQYXJpdHksIFwicmVjb3ZlcnlQYXJhbVwiKSk7XG4gICAgICAgIGZpZWxkcy5wdXNoKHRvQmVBcnJheShzaWcucikpO1xuICAgICAgICBmaWVsZHMucHVzaCh0b0JlQXJyYXkoc2lnLnMpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdChbXCIweDAxXCIsIGVuY29kZVJscChmaWVsZHMpXSk7XG59XG5mdW5jdGlvbiBfcGFyc2VFaXA0ODQ0KGRhdGEpIHtcbiAgICBjb25zdCBmaWVsZHMgPSBkZWNvZGVSbHAoZ2V0Qnl0ZXMoZGF0YSkuc2xpY2UoMSkpO1xuICAgIGFzc2VydEFyZ3VtZW50KEFycmF5LmlzQXJyYXkoZmllbGRzKSAmJiAoZmllbGRzLmxlbmd0aCA9PT0gMTEgfHwgZmllbGRzLmxlbmd0aCA9PT0gMTQpLCBcImludmFsaWQgZmllbGQgY291bnQgZm9yIHRyYW5zYWN0aW9uIHR5cGU6IDNcIiwgXCJkYXRhXCIsIGhleGxpZnkoZGF0YSkpO1xuICAgIGNvbnN0IHR4ID0ge1xuICAgICAgICB0eXBlOiAzLFxuICAgICAgICBjaGFpbklkOiBoYW5kbGVVaW50KGZpZWxkc1swXSwgXCJjaGFpbklkXCIpLFxuICAgICAgICBub25jZTogaGFuZGxlTnVtYmVyKGZpZWxkc1sxXSwgXCJub25jZVwiKSxcbiAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IGhhbmRsZVVpbnQoZmllbGRzWzJdLCBcIm1heFByaW9yaXR5RmVlUGVyR2FzXCIpLFxuICAgICAgICBtYXhGZWVQZXJHYXM6IGhhbmRsZVVpbnQoZmllbGRzWzNdLCBcIm1heEZlZVBlckdhc1wiKSxcbiAgICAgICAgZ2FzUHJpY2U6IG51bGwsXG4gICAgICAgIGdhc0xpbWl0OiBoYW5kbGVVaW50KGZpZWxkc1s0XSwgXCJnYXNMaW1pdFwiKSxcbiAgICAgICAgdG86IGhhbmRsZUFkZHJlc3MoZmllbGRzWzVdKSxcbiAgICAgICAgdmFsdWU6IGhhbmRsZVVpbnQoZmllbGRzWzZdLCBcInZhbHVlXCIpLFxuICAgICAgICBkYXRhOiBoZXhsaWZ5KGZpZWxkc1s3XSksXG4gICAgICAgIGFjY2Vzc0xpc3Q6IGhhbmRsZUFjY2Vzc0xpc3QoZmllbGRzWzhdLCBcImFjY2Vzc0xpc3RcIiksXG4gICAgICAgIG1heEZlZVBlckJsb2JHYXM6IGhhbmRsZVVpbnQoZmllbGRzWzldLCBcIm1heEZlZVBlckJsb2JHYXNcIiksXG4gICAgICAgIGJsb2JWZXJzaW9uZWRIYXNoZXM6IGZpZWxkc1sxMF1cbiAgICB9O1xuICAgIGFzc2VydEFyZ3VtZW50KHR4LnRvICE9IG51bGwsIFwiaW52YWxpZCBhZGRyZXNzIGZvciB0cmFuc2FjdGlvbiB0eXBlOiAzXCIsIFwiZGF0YVwiLCBkYXRhKTtcbiAgICBhc3NlcnRBcmd1bWVudChBcnJheS5pc0FycmF5KHR4LmJsb2JWZXJzaW9uZWRIYXNoZXMpLCBcImludmFsaWQgYmxvYlZlcnNpb25lZEhhc2hlczogbXVzdCBiZSBhbiBhcnJheVwiLCBcImRhdGFcIiwgZGF0YSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eC5ibG9iVmVyc2lvbmVkSGFzaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGlzSGV4U3RyaW5nKHR4LmJsb2JWZXJzaW9uZWRIYXNoZXNbaV0sIDMyKSwgYGludmFsaWQgYmxvYlZlcnNpb25lZEhhc2ggYXQgaW5kZXggJHtpfTogbXVzdCBiZSBsZW5ndGggMzJgLCBcImRhdGFcIiwgZGF0YSk7XG4gICAgfVxuICAgIC8vIFVuc2lnbmVkIEVJUC00ODQ0IFRyYW5zYWN0aW9uXG4gICAgaWYgKGZpZWxkcy5sZW5ndGggPT09IDExKSB7XG4gICAgICAgIHJldHVybiB0eDtcbiAgICB9XG4gICAgdHguaGFzaCA9IGtlY2NhazI1NihkYXRhKTtcbiAgICBfcGFyc2VFaXBTaWduYXR1cmUodHgsIGZpZWxkcy5zbGljZSgxMSkpO1xuICAgIHJldHVybiB0eDtcbn1cbmZ1bmN0aW9uIF9zZXJpYWxpemVFaXA0ODQ0KHR4LCBzaWcpIHtcbiAgICBjb25zdCBmaWVsZHMgPSBbXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5jaGFpbklkLCBcImNoYWluSWRcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5ub25jZSwgXCJub25jZVwiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzIHx8IDAsIFwibWF4UHJpb3JpdHlGZWVQZXJHYXNcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5tYXhGZWVQZXJHYXMgfHwgMCwgXCJtYXhGZWVQZXJHYXNcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0eC5nYXNMaW1pdCwgXCJnYXNMaW1pdFwiKSxcbiAgICAgICAgKHR4LnRvIHx8IFplcm9BZGRyZXNzKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHR4LnZhbHVlLCBcInZhbHVlXCIpLFxuICAgICAgICB0eC5kYXRhLFxuICAgICAgICBmb3JtYXRBY2Nlc3NMaXN0KHR4LmFjY2Vzc0xpc3QgfHwgW10pLFxuICAgICAgICBmb3JtYXROdW1iZXIodHgubWF4RmVlUGVyQmxvYkdhcyB8fCAwLCBcIm1heEZlZVBlckJsb2JHYXNcIiksXG4gICAgICAgIGZvcm1hdEhhc2hlcyh0eC5ibG9iVmVyc2lvbmVkSGFzaGVzIHx8IFtdLCBcImJsb2JWZXJzaW9uZWRIYXNoZXNcIilcbiAgICBdO1xuICAgIGlmIChzaWcpIHtcbiAgICAgICAgZmllbGRzLnB1c2goZm9ybWF0TnVtYmVyKHNpZy55UGFyaXR5LCBcInlQYXJpdHlcIikpO1xuICAgICAgICBmaWVsZHMucHVzaCh0b0JlQXJyYXkoc2lnLnIpKTtcbiAgICAgICAgZmllbGRzLnB1c2godG9CZUFycmF5KHNpZy5zKSk7XG4gICAgfVxuICAgIHJldHVybiBjb25jYXQoW1wiMHgwM1wiLCBlbmNvZGVSbHAoZmllbGRzKV0pO1xufVxuLyoqXG4gKiAgQSAqKlRyYW5zYWN0aW9uKiogZGVzY3JpYmVzIGFuIG9wZXJhdGlvbiB0byBiZSBleGVjdXRlZCBvblxuICogIEV0aGVyZXVtIGJ5IGFuIEV4dGVybmFsbHkgT3duZWQgQWNjb3VudCAoRU9BKS4gSXQgaW5jbHVkZXNcbiAqICB3aG8gKHRoZSBbW3RvXV0gYWRkcmVzcyksIHdoYXQgKHRoZSBbW2RhdGFdXSkgYW5kIGhvdyBtdWNoICh0aGVcbiAqICBbW3ZhbHVlXV0gaW4gZXRoZXIpIHRoZSBvcGVyYXRpb24gc2hvdWxkIGVudGFpbC5cbiAqXG4gKiAgQGV4YW1wbGU6XG4gKiAgICB0eCA9IG5ldyBUcmFuc2FjdGlvbigpXG4gKiAgICAvL19yZXN1bHQ6XG4gKlxuICogICAgdHguZGF0YSA9IFwiMHgxMjM0XCI7XG4gKiAgICAvL19yZXN1bHQ6XG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbiB7XG4gICAgI3R5cGU7XG4gICAgI3RvO1xuICAgICNkYXRhO1xuICAgICNub25jZTtcbiAgICAjZ2FzTGltaXQ7XG4gICAgI2dhc1ByaWNlO1xuICAgICNtYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICAjbWF4RmVlUGVyR2FzO1xuICAgICN2YWx1ZTtcbiAgICAjY2hhaW5JZDtcbiAgICAjc2lnO1xuICAgICNhY2Nlc3NMaXN0O1xuICAgICNtYXhGZWVQZXJCbG9iR2FzO1xuICAgICNibG9iVmVyc2lvbmVkSGFzaGVzO1xuICAgIC8qKlxuICAgICAqICBUaGUgdHJhbnNhY3Rpb24gdHlwZS5cbiAgICAgKlxuICAgICAqICBJZiBudWxsLCB0aGUgdHlwZSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgaW5mZXJyZWQgYmFzZWQgb25cbiAgICAgKiAgZXhwbGljaXQgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBnZXQgdHlwZSgpIHsgcmV0dXJuIHRoaXMuI3R5cGU7IH1cbiAgICBzZXQgdHlwZSh2YWx1ZSkge1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgICAgICAgdGhpcy4jdHlwZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYXNlIFwibGVnYWN5XCI6XG4gICAgICAgICAgICAgICAgdGhpcy4jdHlwZSA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYXNlIFwiYmVybGluXCI6XG4gICAgICAgICAgICBjYXNlIFwiZWlwLTI5MzBcIjpcbiAgICAgICAgICAgICAgICB0aGlzLiN0eXBlID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhc2UgXCJsb25kb25cIjpcbiAgICAgICAgICAgIGNhc2UgXCJlaXAtMTU1OVwiOlxuICAgICAgICAgICAgICAgIHRoaXMuI3R5cGUgPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FzZSBcImNhbmN1blwiOlxuICAgICAgICAgICAgY2FzZSBcImVpcC00ODQ0XCI6XG4gICAgICAgICAgICAgICAgdGhpcy4jdHlwZSA9IDM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcInVuc3VwcG9ydGVkIHRyYW5zYWN0aW9uIHR5cGVcIiwgXCJ0eXBlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIG5hbWUgb2YgdGhlIHRyYW5zYWN0aW9uIHR5cGUuXG4gICAgICovXG4gICAgZ2V0IHR5cGVOYW1lKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gXCJsZWdhY3lcIjtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFwiZWlwLTI5MzBcIjtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFwiZWlwLTE1NTlcIjtcbiAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFwiZWlwLTQ4NDRcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBgYHRvYGAgYWRkcmVzcyBmb3IgdGhlIHRyYW5zYWN0aW9uIG9yIGBgbnVsbGBgIGlmIHRoZVxuICAgICAqICB0cmFuc2FjdGlvbiBpcyBhbiBgYGluaXRgYCB0cmFuc2FjdGlvbi5cbiAgICAgKi9cbiAgICBnZXQgdG8oKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy4jdG87XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsICYmIHRoaXMudHlwZSA9PT0gMykge1xuICAgICAgICAgICAgcmV0dXJuIFplcm9BZGRyZXNzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IHRvKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuI3RvID0gKHZhbHVlID09IG51bGwpID8gbnVsbCA6IGdldEFkZHJlc3ModmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIHRyYW5zYWN0aW9uIG5vbmNlLlxuICAgICAqL1xuICAgIGdldCBub25jZSgpIHsgcmV0dXJuIHRoaXMuI25vbmNlOyB9XG4gICAgc2V0IG5vbmNlKHZhbHVlKSB7IHRoaXMuI25vbmNlID0gZ2V0TnVtYmVyKHZhbHVlLCBcInZhbHVlXCIpOyB9XG4gICAgLyoqXG4gICAgICogIFRoZSBnYXMgbGltaXQuXG4gICAgICovXG4gICAgZ2V0IGdhc0xpbWl0KCkgeyByZXR1cm4gdGhpcy4jZ2FzTGltaXQ7IH1cbiAgICBzZXQgZ2FzTGltaXQodmFsdWUpIHsgdGhpcy4jZ2FzTGltaXQgPSBnZXRCaWdJbnQodmFsdWUpOyB9XG4gICAgLyoqXG4gICAgICogIFRoZSBnYXMgcHJpY2UuXG4gICAgICpcbiAgICAgKiAgT24gbGVnYWN5IG5ldHdvcmtzIHRoaXMgZGVmaW5lcyB0aGUgZmVlIHRoYXQgd2lsbCBiZSBwYWlkLiBPblxuICAgICAqICBFSVAtMTU1OSBuZXR3b3JrcywgdGhpcyBzaG91bGQgYmUgYGBudWxsYGAuXG4gICAgICovXG4gICAgZ2V0IGdhc1ByaWNlKCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuI2dhc1ByaWNlO1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiAodGhpcy50eXBlID09PSAwIHx8IHRoaXMudHlwZSA9PT0gMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBCTl8wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IGdhc1ByaWNlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuI2dhc1ByaWNlID0gKHZhbHVlID09IG51bGwpID8gbnVsbCA6IGdldEJpZ0ludCh2YWx1ZSwgXCJnYXNQcmljZVwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBtYXhpbXVtIHByaW9yaXR5IGZlZSBwZXIgdW5pdCBvZiBnYXMgdG8gcGF5LiBPbiBsZWdhY3lcbiAgICAgKiAgbmV0d29ya3MgdGhpcyBzaG91bGQgYmUgYGBudWxsYGAuXG4gICAgICovXG4gICAgZ2V0IG1heFByaW9yaXR5RmVlUGVyR2FzKCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuI21heFByaW9yaXR5RmVlUGVyR2FzO1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gMiB8fCB0aGlzLnR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQk5fMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IG1heFByaW9yaXR5RmVlUGVyR2FzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuI21heFByaW9yaXR5RmVlUGVyR2FzID0gKHZhbHVlID09IG51bGwpID8gbnVsbCA6IGdldEJpZ0ludCh2YWx1ZSwgXCJtYXhQcmlvcml0eUZlZVBlckdhc1wiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBtYXhpbXVtIHRvdGFsIGZlZSBwZXIgdW5pdCBvZiBnYXMgdG8gcGF5LiBPbiBsZWdhY3lcbiAgICAgKiAgbmV0d29ya3MgdGhpcyBzaG91bGQgYmUgYGBudWxsYGAuXG4gICAgICovXG4gICAgZ2V0IG1heEZlZVBlckdhcygpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiNtYXhGZWVQZXJHYXM7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50eXBlID09PSAyIHx8IHRoaXMudHlwZSA9PT0gMykge1xuICAgICAgICAgICAgICAgIHJldHVybiBCTl8wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzZXQgbWF4RmVlUGVyR2FzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuI21heEZlZVBlckdhcyA9ICh2YWx1ZSA9PSBudWxsKSA/IG51bGwgOiBnZXRCaWdJbnQodmFsdWUsIFwibWF4RmVlUGVyR2FzXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIHRyYW5zYWN0aW9uIGRhdGEuIEZvciBgYGluaXRgYCB0cmFuc2FjdGlvbnMgdGhpcyBpcyB0aGVcbiAgICAgKiAgZGVwbG95bWVudCBjb2RlLlxuICAgICAqL1xuICAgIGdldCBkYXRhKCkgeyByZXR1cm4gdGhpcy4jZGF0YTsgfVxuICAgIHNldCBkYXRhKHZhbHVlKSB7IHRoaXMuI2RhdGEgPSBoZXhsaWZ5KHZhbHVlKTsgfVxuICAgIC8qKlxuICAgICAqICBUaGUgYW1vdW50IG9mIGV0aGVyIChpbiB3ZWkpIHRvIHNlbmQgaW4gdGhpcyB0cmFuc2FjdGlvbnMuXG4gICAgICovXG4gICAgZ2V0IHZhbHVlKCkgeyByZXR1cm4gdGhpcy4jdmFsdWU7IH1cbiAgICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy4jdmFsdWUgPSBnZXRCaWdJbnQodmFsdWUsIFwidmFsdWVcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgY2hhaW4gSUQgdGhpcyB0cmFuc2FjdGlvbiBpcyB2YWxpZCBvbi5cbiAgICAgKi9cbiAgICBnZXQgY2hhaW5JZCgpIHsgcmV0dXJuIHRoaXMuI2NoYWluSWQ7IH1cbiAgICBzZXQgY2hhaW5JZCh2YWx1ZSkgeyB0aGlzLiNjaGFpbklkID0gZ2V0QmlnSW50KHZhbHVlKTsgfVxuICAgIC8qKlxuICAgICAqICBJZiBzaWduZWQsIHRoZSBzaWduYXR1cmUgZm9yIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgICovXG4gICAgZ2V0IHNpZ25hdHVyZSgpIHsgcmV0dXJuIHRoaXMuI3NpZyB8fCBudWxsOyB9XG4gICAgc2V0IHNpZ25hdHVyZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLiNzaWcgPSAodmFsdWUgPT0gbnVsbCkgPyBudWxsIDogU2lnbmF0dXJlLmZyb20odmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIGFjY2VzcyBsaXN0LlxuICAgICAqXG4gICAgICogIEFuIGFjY2VzcyBsaXN0IHBlcm1pdHMgZGlzY291bnRlZCAoYnV0IHByZS1wYWlkKSBhY2Nlc3MgdG9cbiAgICAgKiAgYnl0ZWNvZGUgYW5kIHN0YXRlIHZhcmlhYmxlIGFjY2VzcyB3aXRoaW4gY29udHJhY3QgZXhlY3V0aW9uLlxuICAgICAqL1xuICAgIGdldCBhY2Nlc3NMaXN0KCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuI2FjY2Vzc0xpc3QgfHwgbnVsbDtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09IDEgfHwgdGhpcy50eXBlID09PSAyIHx8IHRoaXMudHlwZSA9PT0gMykge1xuICAgICAgICAgICAgICAgIC8vIEBUT0RPOiBpbiB2NywgdGhpcyBzaG91bGQgYXNzaWduIHRoZSB2YWx1ZSBvciBiZWNvbWVcbiAgICAgICAgICAgICAgICAvLyBhIGxpdmUgb2JqZWN0IGl0c2VsZiwgb3RoZXJ3aXNlIG11dGF0aW9uIGlzIGluY29uc2lzdGVudFxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IGFjY2Vzc0xpc3QodmFsdWUpIHtcbiAgICAgICAgdGhpcy4jYWNjZXNzTGlzdCA9ICh2YWx1ZSA9PSBudWxsKSA/IG51bGwgOiBhY2Nlc3NMaXN0aWZ5KHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBtYXggZmVlIHBlciBibG9iIGdhcyBmb3IgQ2FuY3VuIHRyYW5zYWN0aW9ucy5cbiAgICAgKi9cbiAgICBnZXQgbWF4RmVlUGVyQmxvYkdhcygpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLiNtYXhGZWVQZXJCbG9iR2FzO1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiB0aGlzLnR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgIHJldHVybiBCTl8wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IG1heEZlZVBlckJsb2JHYXModmFsdWUpIHtcbiAgICAgICAgdGhpcy4jbWF4RmVlUGVyQmxvYkdhcyA9ICh2YWx1ZSA9PSBudWxsKSA/IG51bGwgOiBnZXRCaWdJbnQodmFsdWUsIFwibWF4RmVlUGVyQmxvYkdhc1wiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBCTE9CIHZlcnNpb25lZCBoYXNoZXMgZm9yIENhbmN1biB0cmFuc2FjdGlvbnMuXG4gICAgICovXG4gICAgZ2V0IGJsb2JWZXJzaW9uZWRIYXNoZXMoKSB7XG4gICAgICAgIC8vIEBUT0RPOiBNdXRhdGlvbiBpcyBpbmNvbnNpc3RlbnQ7IGlmIHVuc2V0LCB0aGUgcmV0dXJuZWQgdmFsdWVcbiAgICAgICAgLy8gY2Fubm90IG11dGF0ZSB0aGUgb2JqZWN0LCBpZiBzZXQgaXQgY2FuXG4gICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuI2Jsb2JWZXJzaW9uZWRIYXNoZXM7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsICYmIHRoaXMudHlwZSA9PT0gMykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IGJsb2JWZXJzaW9uZWRIYXNoZXModmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KEFycmF5LmlzQXJyYXkodmFsdWUpLCBcImJsb2JWZXJzaW9uZWRIYXNoZXMgbXVzdCBiZSBhbiBBcnJheVwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRBcmd1bWVudChpc0hleFN0cmluZyh2YWx1ZVtpXSwgMzIpLCBcImludmFsaWQgYmxvYlZlcnNpb25lZEhhc2hcIiwgYHZhbHVlWyR7aX1dYCwgdmFsdWVbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2Jsb2JWZXJzaW9uZWRIYXNoZXMgPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIENyZWF0ZXMgYSBuZXcgVHJhbnNhY3Rpb24gd2l0aCBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy4jdHlwZSA9IG51bGw7XG4gICAgICAgIHRoaXMuI3RvID0gbnVsbDtcbiAgICAgICAgdGhpcy4jbm9uY2UgPSAwO1xuICAgICAgICB0aGlzLiNnYXNMaW1pdCA9IEJOXzA7XG4gICAgICAgIHRoaXMuI2dhc1ByaWNlID0gbnVsbDtcbiAgICAgICAgdGhpcy4jbWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBudWxsO1xuICAgICAgICB0aGlzLiNtYXhGZWVQZXJHYXMgPSBudWxsO1xuICAgICAgICB0aGlzLiNkYXRhID0gXCIweFwiO1xuICAgICAgICB0aGlzLiN2YWx1ZSA9IEJOXzA7XG4gICAgICAgIHRoaXMuI2NoYWluSWQgPSBCTl8wO1xuICAgICAgICB0aGlzLiNzaWcgPSBudWxsO1xuICAgICAgICB0aGlzLiNhY2Nlc3NMaXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy4jbWF4RmVlUGVyQmxvYkdhcyA9IG51bGw7XG4gICAgICAgIHRoaXMuI2Jsb2JWZXJzaW9uZWRIYXNoZXMgPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIHRyYW5zYWN0aW9uIGhhc2gsIGlmIHNpZ25lZC4gT3RoZXJ3aXNlLCBgYG51bGxgYC5cbiAgICAgKi9cbiAgICBnZXQgaGFzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2lnbmF0dXJlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZWNjYWsyNTYodGhpcy5zZXJpYWxpemVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBwcmUtaW1hZ2UgaGFzaCBvZiB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogIFRoaXMgaXMgdGhlIGRpZ2VzdCB0aGF0IGEgW1tTaWduZXJdXSBtdXN0IHNpZ24gdG8gYXV0aG9yaXplXG4gICAgICogIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgICovXG4gICAgZ2V0IHVuc2lnbmVkSGFzaCgpIHtcbiAgICAgICAgcmV0dXJuIGtlY2NhazI1Nih0aGlzLnVuc2lnbmVkU2VyaWFsaXplZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgc2VuZGluZyBhZGRyZXNzLCBpZiBzaWduZWQuIE90aGVyd2lzZSwgYGBudWxsYGAuXG4gICAgICovXG4gICAgZ2V0IGZyb20oKSB7XG4gICAgICAgIGlmICh0aGlzLnNpZ25hdHVyZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVjb3ZlckFkZHJlc3ModGhpcy51bnNpZ25lZEhhc2gsIHRoaXMuc2lnbmF0dXJlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBwdWJsaWMga2V5IG9mIHRoZSBzZW5kZXIsIGlmIHNpZ25lZC4gT3RoZXJ3aXNlLCBgYG51bGxgYC5cbiAgICAgKi9cbiAgICBnZXQgZnJvbVB1YmxpY0tleSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2lnbmF0dXJlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTaWduaW5nS2V5LnJlY292ZXJQdWJsaWNLZXkodGhpcy51bnNpZ25lZEhhc2gsIHRoaXMuc2lnbmF0dXJlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiBzaWduZWQuXG4gICAgICpcbiAgICAgKiAgVGhpcyBwcm92aWRlcyBhIFR5cGUgR3VhcmQgdGhhdCBwcm9wZXJ0aWVzIHJlcXVpcmluZyBhIHNpZ25lZFxuICAgICAqICB0cmFuc2FjdGlvbiBhcmUgbm9uLW51bGwuXG4gICAgICovXG4gICAgaXNTaWduZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpZ25hdHVyZSAhPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIHNlcmlhbGl6ZWQgdHJhbnNhY3Rpb24uXG4gICAgICpcbiAgICAgKiAgVGhpcyB0aHJvd3MgaWYgdGhlIHRyYW5zYWN0aW9uIGlzIHVuc2lnbmVkLiBGb3IgdGhlIHByZS1pbWFnZSxcbiAgICAgKiAgdXNlIFtbdW5zaWduZWRTZXJpYWxpemVkXV0uXG4gICAgICovXG4gICAgZ2V0IHNlcmlhbGl6ZWQoKSB7XG4gICAgICAgIGFzc2VydCh0aGlzLnNpZ25hdHVyZSAhPSBudWxsLCBcImNhbm5vdCBzZXJpYWxpemUgdW5zaWduZWQgdHJhbnNhY3Rpb247IG1heWJlIHlvdSBtZWFudCAudW5zaWduZWRTZXJpYWxpemVkXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcIi5zZXJpYWxpemVkXCIgfSk7XG4gICAgICAgIHN3aXRjaCAodGhpcy5pbmZlclR5cGUoKSkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBfc2VyaWFsaXplTGVnYWN5KHRoaXMsIHRoaXMuc2lnbmF0dXJlKTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gX3NlcmlhbGl6ZUVpcDI5MzAodGhpcywgdGhpcy5zaWduYXR1cmUpO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiBfc2VyaWFsaXplRWlwMTU1OSh0aGlzLCB0aGlzLnNpZ25hdHVyZSk7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zZXJpYWxpemVFaXA0ODQ0KHRoaXMsIHRoaXMuc2lnbmF0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgdHJhbnNhY3Rpb24gdHlwZVwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCIuc2VyaWFsaXplZFwiIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIHRyYW5zYWN0aW9uIHByZS1pbWFnZS5cbiAgICAgKlxuICAgICAqICBUaGUgaGFzaCBvZiB0aGlzIGlzIHRoZSBkaWdlc3Qgd2hpY2ggbmVlZHMgdG8gYmUgc2lnbmVkIHRvXG4gICAgICogIGF1dGhvcml6ZSB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAqL1xuICAgIGdldCB1bnNpZ25lZFNlcmlhbGl6ZWQoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5pbmZlclR5cGUoKSkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBfc2VyaWFsaXplTGVnYWN5KHRoaXMpO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBfc2VyaWFsaXplRWlwMjkzMCh0aGlzKTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX3NlcmlhbGl6ZUVpcDE1NTkodGhpcyk7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zZXJpYWxpemVFaXA0ODQ0KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydChmYWxzZSwgXCJ1bnN1cHBvcnRlZCB0cmFuc2FjdGlvbiB0eXBlXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uOiBcIi51bnNpZ25lZFNlcmlhbGl6ZWRcIiB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiB0aGUgbW9zdCBcImxpa2VseVwiIHR5cGU7IGN1cnJlbnRseSB0aGUgaGlnaGVzdFxuICAgICAqICBzdXBwb3J0ZWQgdHJhbnNhY3Rpb24gdHlwZS5cbiAgICAgKi9cbiAgICBpbmZlclR5cGUoKSB7XG4gICAgICAgIGNvbnN0IHR5cGVzID0gdGhpcy5pbmZlclR5cGVzKCk7XG4gICAgICAgIC8vIFByZWZlciBMb25kb24gKEVJUC0xNTU5KSBvdmVyIENhbmN1biAoQkxPYilcbiAgICAgICAgaWYgKHR5cGVzLmluZGV4T2YoMikgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmV0dXJuIHRoZSBoaWdoZXN0IGluZmVycmVkIHR5cGVcbiAgICAgICAgcmV0dXJuICh0eXBlcy5wb3AoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBWYWxpZGF0ZXMgdGhlIGV4cGxpY2l0IHByb3BlcnRpZXMgYW5kIHJldHVybnMgYSBsaXN0IG9mIGNvbXBhdGlibGVcbiAgICAgKiAgdHJhbnNhY3Rpb24gdHlwZXMuXG4gICAgICovXG4gICAgaW5mZXJUeXBlcygpIHtcbiAgICAgICAgLy8gQ2hlY2tzIHRoYXQgdGhlcmUgYXJlIG5vIGNvbmZsaWN0aW5nIHByb3BlcnRpZXMgc2V0XG4gICAgICAgIGNvbnN0IGhhc0dhc1ByaWNlID0gdGhpcy5nYXNQcmljZSAhPSBudWxsO1xuICAgICAgICBjb25zdCBoYXNGZWUgPSAodGhpcy5tYXhGZWVQZXJHYXMgIT0gbnVsbCB8fCB0aGlzLm1heFByaW9yaXR5RmVlUGVyR2FzICE9IG51bGwpO1xuICAgICAgICBjb25zdCBoYXNBY2Nlc3NMaXN0ID0gKHRoaXMuYWNjZXNzTGlzdCAhPSBudWxsKTtcbiAgICAgICAgY29uc3QgaGFzQmxvYiA9ICh0aGlzLiNtYXhGZWVQZXJCbG9iR2FzICE9IG51bGwgfHwgdGhpcy4jYmxvYlZlcnNpb25lZEhhc2hlcyk7XG4gICAgICAgIC8vaWYgKGhhc0dhc1ByaWNlICYmIGhhc0ZlZSkge1xuICAgICAgICAvLyAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cmFuc2FjdGlvbiBjYW5ub3QgaGF2ZSBnYXNQcmljZSBhbmQgbWF4RmVlUGVyR2FzXCIpO1xuICAgICAgICAvL31cbiAgICAgICAgaWYgKHRoaXMubWF4RmVlUGVyR2FzICE9IG51bGwgJiYgdGhpcy5tYXhQcmlvcml0eUZlZVBlckdhcyAhPSBudWxsKSB7XG4gICAgICAgICAgICBhc3NlcnQodGhpcy5tYXhGZWVQZXJHYXMgPj0gdGhpcy5tYXhQcmlvcml0eUZlZVBlckdhcywgXCJwcmlvcml0eUZlZSBjYW5ub3QgYmUgbW9yZSB0aGFuIG1heEZlZVwiLCBcIkJBRF9EQVRBXCIsIHsgdmFsdWU6IHRoaXMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy9pZiAodGhpcy50eXBlID09PSAyICYmIGhhc0dhc1ByaWNlKSB7XG4gICAgICAgIC8vICAgIHRocm93IG5ldyBFcnJvcihcImVpcC0xNTU5IHRyYW5zYWN0aW9uIGNhbm5vdCBoYXZlIGdhc1ByaWNlXCIpO1xuICAgICAgICAvL31cbiAgICAgICAgYXNzZXJ0KCFoYXNGZWUgfHwgKHRoaXMudHlwZSAhPT0gMCAmJiB0aGlzLnR5cGUgIT09IDEpLCBcInRyYW5zYWN0aW9uIHR5cGUgY2Fubm90IGhhdmUgbWF4RmVlUGVyR2FzIG9yIG1heFByaW9yaXR5RmVlUGVyR2FzXCIsIFwiQkFEX0RBVEFcIiwgeyB2YWx1ZTogdGhpcyB9KTtcbiAgICAgICAgYXNzZXJ0KHRoaXMudHlwZSAhPT0gMCB8fCAhaGFzQWNjZXNzTGlzdCwgXCJsZWdhY3kgdHJhbnNhY3Rpb24gY2Fubm90IGhhdmUgYWNjZXNzTGlzdFwiLCBcIkJBRF9EQVRBXCIsIHsgdmFsdWU6IHRoaXMgfSk7XG4gICAgICAgIGNvbnN0IHR5cGVzID0gW107XG4gICAgICAgIC8vIEV4cGxpY2l0IHR5cGVcbiAgICAgICAgaWYgKHRoaXMudHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0eXBlcy5wdXNoKHRoaXMudHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoaGFzRmVlKSB7XG4gICAgICAgICAgICAgICAgdHlwZXMucHVzaCgyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGhhc0dhc1ByaWNlKSB7XG4gICAgICAgICAgICAgICAgdHlwZXMucHVzaCgxKTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0FjY2Vzc0xpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZXMucHVzaCgwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoYXNBY2Nlc3NMaXN0KSB7XG4gICAgICAgICAgICAgICAgdHlwZXMucHVzaCgxKTtcbiAgICAgICAgICAgICAgICB0eXBlcy5wdXNoKDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGFzQmxvYiAmJiB0aGlzLnRvKSB7XG4gICAgICAgICAgICAgICAgdHlwZXMucHVzaCgzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHR5cGVzLnB1c2goMCk7XG4gICAgICAgICAgICAgICAgdHlwZXMucHVzaCgxKTtcbiAgICAgICAgICAgICAgICB0eXBlcy5wdXNoKDIpO1xuICAgICAgICAgICAgICAgIHR5cGVzLnB1c2goMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHlwZXMuc29ydCgpO1xuICAgICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRydWUgaWYgdGhpcyB0cmFuc2FjdGlvbiBpcyBhIGxlZ2FjeSB0cmFuc2FjdGlvbiAoaS5lLlxuICAgICAqICBgYHR5cGUgPT09IDBgYCkuXG4gICAgICpcbiAgICAgKiAgVGhpcyBwcm92aWRlcyBhIFR5cGUgR3VhcmQgdGhhdCB0aGUgcmVsYXRlZCBwcm9wZXJ0aWVzIGFyZVxuICAgICAqICBub24tbnVsbC5cbiAgICAgKi9cbiAgICBpc0xlZ2FjeSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnR5cGUgPT09IDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0cnVlIGlmIHRoaXMgdHJhbnNhY3Rpb24gaXMgYmVybGluIGhhcmRmb3JtIHRyYW5zYWN0aW9uIChpLmUuXG4gICAgICogIGBgdHlwZSA9PT0gMWBgKS5cbiAgICAgKlxuICAgICAqICBUaGlzIHByb3ZpZGVzIGEgVHlwZSBHdWFyZCB0aGF0IHRoZSByZWxhdGVkIHByb3BlcnRpZXMgYXJlXG4gICAgICogIG5vbi1udWxsLlxuICAgICAqL1xuICAgIGlzQmVybGluKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMudHlwZSA9PT0gMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRydWUgaWYgdGhpcyB0cmFuc2FjdGlvbiBpcyBsb25kb24gaGFyZGZvcm0gdHJhbnNhY3Rpb24gKGkuZS5cbiAgICAgKiAgYGB0eXBlID09PSAyYGApLlxuICAgICAqXG4gICAgICogIFRoaXMgcHJvdmlkZXMgYSBUeXBlIEd1YXJkIHRoYXQgdGhlIHJlbGF0ZWQgcHJvcGVydGllcyBhcmVcbiAgICAgKiAgbm9uLW51bGwuXG4gICAgICovXG4gICAgaXNMb25kb24oKSB7XG4gICAgICAgIHJldHVybiAodGhpcy50eXBlID09PSAyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiB0aGlzIHRyYW5zYWN0aW9uIGlzIGFuIFtbbGluay1laXAtNDg0NF1dIEJMT0JcbiAgICAgKiAgdHJhbnNhY3Rpb24uXG4gICAgICpcbiAgICAgKiAgVGhpcyBwcm92aWRlcyBhIFR5cGUgR3VhcmQgdGhhdCB0aGUgcmVsYXRlZCBwcm9wZXJ0aWVzIGFyZVxuICAgICAqICBub24tbnVsbC5cbiAgICAgKi9cbiAgICBpc0NhbmN1bigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnR5cGUgPT09IDMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlIGEgY29weSBvZiB0aGlzIHRyYW5zYWNpdG9uLlxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbSh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIEpTT04tZnJpZW5kbHkgb2JqZWN0LlxuICAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QgcyA9ICh2KSA9PiB7XG4gICAgICAgICAgICBpZiAodiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgdG86IHRoaXMudG8sXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGZyb206IHRoaXMuZnJvbSxcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgICAgICAgIG5vbmNlOiB0aGlzLm5vbmNlLFxuICAgICAgICAgICAgZ2FzTGltaXQ6IHModGhpcy5nYXNMaW1pdCksXG4gICAgICAgICAgICBnYXNQcmljZTogcyh0aGlzLmdhc1ByaWNlKSxcbiAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBzKHRoaXMubWF4UHJpb3JpdHlGZWVQZXJHYXMpLFxuICAgICAgICAgICAgbWF4RmVlUGVyR2FzOiBzKHRoaXMubWF4RmVlUGVyR2FzKSxcbiAgICAgICAgICAgIHZhbHVlOiBzKHRoaXMudmFsdWUpLFxuICAgICAgICAgICAgY2hhaW5JZDogcyh0aGlzLmNoYWluSWQpLFxuICAgICAgICAgICAgc2lnOiB0aGlzLnNpZ25hdHVyZSA/IHRoaXMuc2lnbmF0dXJlLnRvSlNPTigpIDogbnVsbCxcbiAgICAgICAgICAgIGFjY2Vzc0xpc3Q6IHRoaXMuYWNjZXNzTGlzdFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlIGEgKipUcmFuc2FjdGlvbioqIGZyb20gYSBzZXJpYWxpemVkIHRyYW5zYWN0aW9uIG9yIGFcbiAgICAgKiAgVHJhbnNhY3Rpb24tbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgc3RhdGljIGZyb20odHgpIHtcbiAgICAgICAgaWYgKHR4ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mICh0eCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBnZXRCeXRlcyh0eCk7XG4gICAgICAgICAgICBpZiAocGF5bG9hZFswXSA+PSAweDdmKSB7IC8vIEBUT0RPOiA+IHZzID49ID8/XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uLmZyb20oX3BhcnNlTGVnYWN5KHBheWxvYWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAocGF5bG9hZFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFRyYW5zYWN0aW9uLmZyb20oX3BhcnNlRWlwMjkzMChwYXlsb2FkKSk7XG4gICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbShfcGFyc2VFaXAxNTU5KHBheWxvYWQpKTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBUcmFuc2FjdGlvbi5mcm9tKF9wYXJzZUVpcDQ4NDQocGF5bG9hZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBcInVuc3VwcG9ydGVkIHRyYW5zYWN0aW9uIHR5cGVcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IFwiZnJvbVwiIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBUcmFuc2FjdGlvbigpO1xuICAgICAgICBpZiAodHgudHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQudHlwZSA9IHR4LnR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4LnRvICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC50byA9IHR4LnRvO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eC5ub25jZSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQubm9uY2UgPSB0eC5ub25jZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHguZ2FzTGltaXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0Lmdhc0xpbWl0ID0gdHguZ2FzTGltaXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4Lmdhc1ByaWNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5nYXNQcmljZSA9IHR4Lmdhc1ByaWNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eC5tYXhQcmlvcml0eUZlZVBlckdhcyAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQubWF4UHJpb3JpdHlGZWVQZXJHYXMgPSB0eC5tYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHgubWF4RmVlUGVyR2FzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5tYXhGZWVQZXJHYXMgPSB0eC5tYXhGZWVQZXJHYXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4Lm1heEZlZVBlckJsb2JHYXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0Lm1heEZlZVBlckJsb2JHYXMgPSB0eC5tYXhGZWVQZXJCbG9iR2FzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eC5kYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5kYXRhID0gdHguZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHgudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0LnZhbHVlID0gdHgudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4LmNoYWluSWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0LmNoYWluSWQgPSB0eC5jaGFpbklkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eC5zaWduYXR1cmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0LnNpZ25hdHVyZSA9IFNpZ25hdHVyZS5mcm9tKHR4LnNpZ25hdHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4LmFjY2Vzc0xpc3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0LmFjY2Vzc0xpc3QgPSB0eC5hY2Nlc3NMaXN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eC5ibG9iVmVyc2lvbmVkSGFzaGVzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5ibG9iVmVyc2lvbmVkSGFzaGVzID0gdHguYmxvYlZlcnNpb25lZEhhc2hlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHguaGFzaCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChyZXN1bHQuaXNTaWduZWQoKSwgXCJ1bnNpZ25lZCB0cmFuc2FjdGlvbiBjYW5ub3QgZGVmaW5lIGhhc2hcIiwgXCJ0eFwiLCB0eCk7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChyZXN1bHQuaGFzaCA9PT0gdHguaGFzaCwgXCJoYXNoIG1pc21hdGNoXCIsIFwidHhcIiwgdHgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eC5mcm9tICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHJlc3VsdC5pc1NpZ25lZCgpLCBcInVuc2lnbmVkIHRyYW5zYWN0aW9uIGNhbm5vdCBkZWZpbmUgZnJvbVwiLCBcInR4XCIsIHR4KTtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHJlc3VsdC5mcm9tLnRvTG93ZXJDYXNlKCkgPT09ICh0eC5mcm9tIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCksIFwiZnJvbSBtaXNtYXRjaFwiLCBcInR4XCIsIHR4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zYWN0aW9uLmpzLm1hcCIsImltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiLi4vYWRkcmVzcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsga2VjY2FrMjU2LCBTaWduaW5nS2V5IH0gZnJvbSBcIi4uL2NyeXB0by9pbmRleC5qc1wiO1xuLyoqXG4gKiAgUmV0dXJucyB0aGUgYWRkcmVzcyBmb3IgdGhlICUla2V5JSUuXG4gKlxuICogIFRoZSBrZXkgbWF5IGJlIGFueSBzdGFuZGFyZCBmb3JtIG9mIHB1YmxpYyBrZXkgb3IgYSBwcml2YXRlIGtleS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVBZGRyZXNzKGtleSkge1xuICAgIGxldCBwdWJrZXk7XG4gICAgaWYgKHR5cGVvZiAoa2V5KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBwdWJrZXkgPSBTaWduaW5nS2V5LmNvbXB1dGVQdWJsaWNLZXkoa2V5LCBmYWxzZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwdWJrZXkgPSBrZXkucHVibGljS2V5O1xuICAgIH1cbiAgICByZXR1cm4gZ2V0QWRkcmVzcyhrZWNjYWsyNTYoXCIweFwiICsgcHVia2V5LnN1YnN0cmluZyg0KSkuc3Vic3RyaW5nKDI2KSk7XG59XG4vKipcbiAqICBSZXR1cm5zIHRoZSByZWNvdmVyZWQgYWRkcmVzcyBmb3IgdGhlIHByaXZhdGUga2V5IHRoYXQgd2FzXG4gKiAgdXNlZCB0byBzaWduICUlZGlnZXN0JSUgdGhhdCByZXN1bHRlZCBpbiAlJXNpZ25hdHVyZSUlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVjb3ZlckFkZHJlc3MoZGlnZXN0LCBzaWduYXR1cmUpIHtcbiAgICByZXR1cm4gY29tcHV0ZUFkZHJlc3MoU2lnbmluZ0tleS5yZWNvdmVyUHVibGljS2V5KGRpZ2VzdCwgc2lnbmF0dXJlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzLmpzLm1hcCIsIi8qKlxuICogIFRoZSBbQmFzZTU4IEVuY29kaW5nXShsaW5rLWJhc2U1OCkgc2NoZW1lIGFsbG93cyBhICoqbnVtZXJpYyoqIHZhbHVlXG4gKiAgdG8gYmUgZW5jb2RlZCBhcyBhIGNvbXBhY3Qgc3RyaW5nIHVzaW5nIGEgcmFkaXggb2YgNTggdXNpbmcgb25seVxuICogIGFscGhhLW51bWVyaWMgY2hhcmFjdGVycy4gQ29uZnVzaW5nbHkgc2ltaWxhciBjaGFyYWN0ZXJzIGFyZSBvbWl0dGVkXG4gKiAgKGkuZS4gYGBcImwwT1wiYGApLlxuICpcbiAqICBOb3RlIHRoYXQgQmFzZTU4IGVuY29kZXMgYSAqKm51bWVyaWMqKiB2YWx1ZSwgbm90IGFyYml0cmFyeSBieXRlcyxcbiAqICBzaW5jZSBhbnkgemVyby1ieXRlcyBvbiB0aGUgbGVmdCB3b3VsZCBnZXQgcmVtb3ZlZC4gVG8gbWl0aWdhdGUgdGhpc1xuICogIGlzc3VlIG1vc3Qgc2NoZW1lcyB0aGF0IHVzZSBCYXNlNTggY2hvb3NlIHNwZWNpZmljIGhpZ2gtb3JkZXIgdmFsdWVzXG4gKiAgdG8gZW5zdXJlIG5vbi16ZXJvIHByZWZpeGVzLlxuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS91dGlsczpCYXNlNTggRW5jb2RpbmcgW2Fib3V0LWJhc2U1OF1cbiAqL1xuaW1wb3J0IHsgZ2V0Qnl0ZXMgfSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5pbXBvcnQgeyBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuL2Vycm9ycy5qc1wiO1xuaW1wb3J0IHsgdG9CaWdJbnQgfSBmcm9tIFwiLi9tYXRocy5qc1wiO1xuY29uc3QgQWxwaGFiZXQgPSBcIjEyMzQ1Njc4OUFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWmFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpcIjtcbmxldCBMb29rdXAgPSBudWxsO1xuZnVuY3Rpb24gZ2V0QWxwaGEobGV0dGVyKSB7XG4gICAgaWYgKExvb2t1cCA9PSBudWxsKSB7XG4gICAgICAgIExvb2t1cCA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IEFscGhhYmV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBMb29rdXBbQWxwaGFiZXRbaV1dID0gQmlnSW50KGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IExvb2t1cFtsZXR0ZXJdO1xuICAgIGFzc2VydEFyZ3VtZW50KHJlc3VsdCAhPSBudWxsLCBgaW52YWxpZCBiYXNlNTggdmFsdWVgLCBcImxldHRlclwiLCBsZXR0ZXIpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCBCTl8wID0gQmlnSW50KDApO1xuY29uc3QgQk5fNTggPSBCaWdJbnQoNTgpO1xuLyoqXG4gKiAgRW5jb2RlICUldmFsdWUlJSBhcyBhIEJhc2U1OC1lbmNvZGVkIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUJhc2U1OChfdmFsdWUpIHtcbiAgICBjb25zdCBieXRlcyA9IGdldEJ5dGVzKF92YWx1ZSk7XG4gICAgbGV0IHZhbHVlID0gdG9CaWdJbnQoYnl0ZXMpO1xuICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgIHdoaWxlICh2YWx1ZSkge1xuICAgICAgICByZXN1bHQgPSBBbHBoYWJldFtOdW1iZXIodmFsdWUgJSBCTl81OCldICsgcmVzdWx0O1xuICAgICAgICB2YWx1ZSAvPSBCTl81ODtcbiAgICB9XG4gICAgLy8gQWNjb3VudCBmb3IgbGVhZGluZyBwYWRkaW5nIHplcm9zXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYnl0ZXNbaV0pIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IEFscGhhYmV0WzBdICsgcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiAgRGVjb2RlIHRoZSBCYXNlNTgtZW5jb2RlZCAlJXZhbHVlJSUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVCYXNlNTgodmFsdWUpIHtcbiAgICBsZXQgcmVzdWx0ID0gQk5fMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCAqPSBCTl81ODtcbiAgICAgICAgcmVzdWx0ICs9IGdldEFscGhhKHZhbHVlW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2U1OC5qcy5tYXAiLCIvKipcbiAqICBFTlMgaXMgYSBzZXJ2aWNlIHdoaWNoIGFsbG93cyBlYXN5LXRvLXJlbWVtYmVyIG5hbWVzIHRvIG1hcCB0b1xuICogIG5ldHdvcmsgYWRkcmVzc2VzLlxuICpcbiAqICBAX3NlY3Rpb246IGFwaS9wcm92aWRlcnMvZW5zLXJlc29sdmVyOkVOUyBSZXNvbHZlciAgW2Fib3V0LWVucy1yc29sdmVyXVxuICovXG5pbXBvcnQgeyBnZXRBZGRyZXNzIH0gZnJvbSBcIi4uL2FkZHJlc3MvaW5kZXguanNcIjtcbmltcG9ydCB7IFplcm9BZGRyZXNzIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQ29udHJhY3QgfSBmcm9tIFwiLi4vY29udHJhY3QvaW5kZXguanNcIjtcbmltcG9ydCB7IGRuc0VuY29kZSwgbmFtZWhhc2ggfSBmcm9tIFwiLi4vaGFzaC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaGV4bGlmeSwgaXNIZXhTdHJpbmcsIHRvQmVIZXgsIGRlZmluZVByb3BlcnRpZXMsIGVuY29kZUJhc2U1OCwgYXNzZXJ0LCBhc3NlcnRBcmd1bWVudCwgaXNFcnJvciwgRmV0Y2hSZXF1ZXN0IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG4vLyBAVE9ETzogVGhpcyBzaG91bGQgdXNlIHRoZSBmZXRjaC1kYXRhOmlwZnMgZ2F0ZXdheVxuLy8gVHJpbSBvZmYgdGhlIGlwZnM6Ly8gcHJlZml4IGFuZCByZXR1cm4gdGhlIGRlZmF1bHQgZ2F0ZXdheSBVUkxcbmZ1bmN0aW9uIGdldElwZnNMaW5rKGxpbmspIHtcbiAgICBpZiAobGluay5tYXRjaCgvXmlwZnM6XFwvXFwvaXBmc1xcLy9pKSkge1xuICAgICAgICBsaW5rID0gbGluay5zdWJzdHJpbmcoMTIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChsaW5rLm1hdGNoKC9eaXBmczpcXC9cXC8vaSkpIHtcbiAgICAgICAgbGluayA9IGxpbmsuc3Vic3RyaW5nKDcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgSVBGUyBmb3JtYXRcIiwgXCJsaW5rXCIsIGxpbmspO1xuICAgIH1cbiAgICByZXR1cm4gYGh0dHBzOi9cXC9nYXRld2F5LmlwZnMuaW8vaXBmcy8ke2xpbmt9YDtcbn1cbjtcbjtcbi8qKlxuICogIEEgcHJvdmlkZXIgcGx1Z2luIHN1cGVyLWNsYXNzIGZvciBwcm9jZXNzaW5nIG11bHRpY29pbiBhZGRyZXNzIHR5cGVzLlxuICovXG5leHBvcnQgY2xhc3MgTXVsdGljb2luUHJvdmlkZXJQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqICBUaGUgbmFtZS5cbiAgICAgKi9cbiAgICBuYW1lO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3ICoqTXVsdGljb2luUHJvdmlkZXJQbHVpbmcqKiBmb3IgJSVuYW1lJSUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgbmFtZSB9KTtcbiAgICB9XG4gICAgY29ubmVjdChwcm9pdmRlcikge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYGB0cnVlYGAgaWYgJSVjb2luVHlwZSUlIGlzIHN1cHBvcnRlZCBieSB0aGlzIHBsdWdpbi5cbiAgICAgKi9cbiAgICBzdXBwb3J0c0NvaW5UeXBlKGNvaW5UeXBlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc292bGVzIHRvIHRoZSBlbmNvZGVkICUlYWRkcmVzcyUlIGZvciAlJWNvaW5UeXBlJSUuXG4gICAgICovXG4gICAgYXN5bmMgZW5jb2RlQWRkcmVzcyhjb2luVHlwZSwgYWRkcmVzcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBjb2luXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb3ZsZXMgdG8gdGhlIGRlY29kZWQgJSVkYXRhJSUgZm9yICUlY29pblR5cGUlJS5cbiAgICAgKi9cbiAgICBhc3luYyBkZWNvZGVBZGRyZXNzKGNvaW5UeXBlLCBkYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIGNvaW5cIik7XG4gICAgfVxufVxuY29uc3QgQmFzaWNNdWx0aWNvaW5QbHVnaW5JZCA9IFwib3JnLmV0aGVycy5wbHVnaW5zLnByb3ZpZGVyLkJhc2ljTXVsdGljb2luXCI7XG4vKipcbiAqICBBICoqQmFzaWNNdWx0aWNvaW5Qcm92aWRlclBsdWdpbioqIHByb3ZpZGVzIHNlcnZpY2UgZm9yIGNvbW1vblxuICogIGNvaW4gdHlwZXMsIHdoaWNoIGRvIG5vdCByZXF1aXJlIGFkZGl0aW9uYWwgbGlicmFyaWVzIHRvIGVuY29kZSBvclxuICogIGRlY29kZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2ljTXVsdGljb2luUHJvdmlkZXJQbHVnaW4gZXh0ZW5kcyBNdWx0aWNvaW5Qcm92aWRlclBsdWdpbiB7XG4gICAgLyoqXG4gICAgICogIENyZWF0ZXMgYSBuZXcgKipCYXNpY011bHRpY29pblByb3ZpZGVyUGx1Z2luKiouXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKEJhc2ljTXVsdGljb2luUGx1Z2luSWQpO1xuICAgIH1cbn1cbmNvbnN0IG1hdGNoZXJJcGZzID0gbmV3IFJlZ0V4cChcIl4oaXBmcyk6L1xcLyguKikkXCIsIFwiaVwiKTtcbmNvbnN0IG1hdGNoZXJzID0gW1xuICAgIG5ldyBSZWdFeHAoXCJeKGh0dHBzKTovXFwvKC4qKSRcIiwgXCJpXCIpLFxuICAgIG5ldyBSZWdFeHAoXCJeKGRhdGEpOiguKikkXCIsIFwiaVwiKSxcbiAgICBtYXRjaGVySXBmcyxcbiAgICBuZXcgUmVnRXhwKFwiXmVpcDE1NTpbMC05XSsvKGVyY1swLTldKyk6KC4qKSRcIiwgXCJpXCIpLFxuXTtcbi8qKlxuICogIEEgY29ubmVjdGVkIG9iamVjdCB0byBhIHJlc29sdmVkIEVOUyBuYW1lIHJlc29sdmVyLCB3aGljaCBjYW4gYmVcbiAqICB1c2VkIHRvIHF1ZXJ5IGFkZGl0aW9uYWwgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGNsYXNzIEVuc1Jlc29sdmVyIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIGNvbm5lY3RlZCBwcm92aWRlci5cbiAgICAgKi9cbiAgICBwcm92aWRlcjtcbiAgICAvKipcbiAgICAgKiAgVGhlIGFkZHJlc3Mgb2YgdGhlIHJlc29sdmVyLlxuICAgICAqL1xuICAgIGFkZHJlc3M7XG4gICAgLyoqXG4gICAgICogIFRoZSBuYW1lIHRoaXMgcmVzb2x2ZXIgd2FzIHJlc29sdmVkIGFnYWluc3QuXG4gICAgICovXG4gICAgbmFtZTtcbiAgICAvLyBGb3IgRUlQLTI1NDQgbmFtZXMsIHRoZSBhbmNlc3RvciB0aGF0IHByb3ZpZGVkIHRoZSByZXNvbHZlclxuICAgICNzdXBwb3J0czI1NDQ7XG4gICAgI3Jlc29sdmVyO1xuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyLCBhZGRyZXNzLCBuYW1lKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBwcm92aWRlciwgYWRkcmVzcywgbmFtZSB9KTtcbiAgICAgICAgdGhpcy4jc3VwcG9ydHMyNTQ0ID0gbnVsbDtcbiAgICAgICAgdGhpcy4jcmVzb2x2ZXIgPSBuZXcgQ29udHJhY3QoYWRkcmVzcywgW1xuICAgICAgICAgICAgXCJmdW5jdGlvbiBzdXBwb3J0c0ludGVyZmFjZShieXRlczQpIHZpZXcgcmV0dXJucyAoYm9vbClcIixcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcmVzb2x2ZShieXRlcywgYnl0ZXMpIHZpZXcgcmV0dXJucyAoYnl0ZXMpXCIsXG4gICAgICAgICAgICBcImZ1bmN0aW9uIGFkZHIoYnl0ZXMzMikgdmlldyByZXR1cm5zIChhZGRyZXNzKVwiLFxuICAgICAgICAgICAgXCJmdW5jdGlvbiBhZGRyKGJ5dGVzMzIsIHVpbnQpIHZpZXcgcmV0dXJucyAoYnl0ZXMpXCIsXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHRleHQoYnl0ZXMzMiwgc3RyaW5nKSB2aWV3IHJldHVybnMgKHN0cmluZylcIixcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gY29udGVudGhhc2goYnl0ZXMzMikgdmlldyByZXR1cm5zIChieXRlcylcIixcbiAgICAgICAgXSwgcHJvdmlkZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb2x2ZXMgdG8gdHJ1ZSBpZiB0aGUgcmVzb2x2ZXIgc3VwcG9ydHMgd2lsZGNhcmQgcmVzb2x1dGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBzdXBwb3J0c1dpbGRjYXJkKCkge1xuICAgICAgICBpZiAodGhpcy4jc3VwcG9ydHMyNTQ0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuI3N1cHBvcnRzMjU0NCA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuI3Jlc29sdmVyLnN1cHBvcnRzSW50ZXJmYWNlKFwiMHg5MDYxYjkyM1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdpbGRjYXJkIHJlc29sdmVycyBtdXN0IHVuZGVyc3RhbmQgc3VwcG9ydHNJbnRlcmZhY2VcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHJldHVybiB0cnVlLlxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNFcnJvcihlcnJvciwgXCJDQUxMX0VYQ0VQVElPTlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIExldCBmdXR1cmUgYXR0ZW1wdHMgdHJ5IGFnYWluLi4uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3N1cHBvcnRzMjU0NCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuI3N1cHBvcnRzMjU0NDtcbiAgICB9XG4gICAgYXN5bmMgI2ZldGNoKGZ1bmNOYW1lLCBwYXJhbXMpIHtcbiAgICAgICAgcGFyYW1zID0gKHBhcmFtcyB8fCBbXSkuc2xpY2UoKTtcbiAgICAgICAgY29uc3QgaWZhY2UgPSB0aGlzLiNyZXNvbHZlci5pbnRlcmZhY2U7XG4gICAgICAgIC8vIFRoZSBmaXJzdCBwYXJhbWV0ZXJzIGlzIGFsd2F5cyB0aGUgbm9kZWhhc2hcbiAgICAgICAgcGFyYW1zLnVuc2hpZnQobmFtZWhhc2godGhpcy5uYW1lKSk7XG4gICAgICAgIGxldCBmcmFnbWVudCA9IG51bGw7XG4gICAgICAgIGlmIChhd2FpdCB0aGlzLnN1cHBvcnRzV2lsZGNhcmQoKSkge1xuICAgICAgICAgICAgZnJhZ21lbnQgPSBpZmFjZS5nZXRGdW5jdGlvbihmdW5jTmFtZSk7XG4gICAgICAgICAgICBhc3NlcnQoZnJhZ21lbnQsIFwibWlzc2luZyBmcmFnbWVudFwiLCBcIlVOS05PV05fRVJST1JcIiwge1xuICAgICAgICAgICAgICAgIGluZm86IHsgZnVuY05hbWUgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwYXJhbXMgPSBbXG4gICAgICAgICAgICAgICAgZG5zRW5jb2RlKHRoaXMubmFtZSwgMjU1KSxcbiAgICAgICAgICAgICAgICBpZmFjZS5lbmNvZGVGdW5jdGlvbkRhdGEoZnJhZ21lbnQsIHBhcmFtcylcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBmdW5jTmFtZSA9IFwicmVzb2x2ZShieXRlcyxieXRlcylcIjtcbiAgICAgICAgfVxuICAgICAgICBwYXJhbXMucHVzaCh7XG4gICAgICAgICAgICBlbmFibGVDY2lwUmVhZDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuI3Jlc29sdmVyW2Z1bmNOYW1lXSguLi5wYXJhbXMpO1xuICAgICAgICAgICAgaWYgKGZyYWdtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlmYWNlLmRlY29kZUZ1bmN0aW9uUmVzdWx0KGZyYWdtZW50LCByZXN1bHQpWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICghaXNFcnJvcihlcnJvciwgXCJDQUxMX0VYQ0VQVElPTlwiKSkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb2x2ZXMgdG8gdGhlIGFkZHJlc3MgZm9yICUlY29pblR5cGUlJSBvciBudWxsIGlmIHRoZVxuICAgICAqICBwcm92aWRlZCAlJWNvaW5UeXBlJSUgaGFzIG5vdCBiZWVuIGNvbmZpZ3VyZWQuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QWRkcmVzcyhjb2luVHlwZSkge1xuICAgICAgICBpZiAoY29pblR5cGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29pblR5cGUgPSA2MDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29pblR5cGUgPT09IDYwKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuI2ZldGNoKFwiYWRkcihieXRlczMyKVwiKTtcbiAgICAgICAgICAgICAgICAvLyBObyBhZGRyZXNzXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PSBudWxsIHx8IHJlc3VsdCA9PT0gWmVyb0FkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNFcnJvcihlcnJvciwgXCJDQUxMX0VYQ0VQVElPTlwiKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHJ5IGRlY29kaW5nIGl0cyBFVk0gY2Fub25pY2FsIGNoYWluIGFzIGFuIEVWTSBjaGFpbiBhZGRyZXNzIGZpcnN0XG4gICAgICAgIGlmIChjb2luVHlwZSA+PSAwICYmIGNvaW5UeXBlIDwgMHg4MDAwMDAwMCkge1xuICAgICAgICAgICAgbGV0IGV0aENvaW5UeXBlID0gY29pblR5cGUgKyAweDgwMDAwMDAwO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuI2ZldGNoKFwiYWRkcihieXRlczMyLHVpbnQpXCIsIFtldGhDb2luVHlwZV0pO1xuICAgICAgICAgICAgaWYgKGlzSGV4U3RyaW5nKGRhdGEsIDIwKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRBZGRyZXNzKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBjb2luUGx1Z2luID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBwbHVnaW4gb2YgdGhpcy5wcm92aWRlci5wbHVnaW5zKSB7XG4gICAgICAgICAgICBpZiAoIShwbHVnaW4gaW5zdGFuY2VvZiBNdWx0aWNvaW5Qcm92aWRlclBsdWdpbikpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwbHVnaW4uc3VwcG9ydHNDb2luVHlwZShjb2luVHlwZSkpIHtcbiAgICAgICAgICAgICAgICBjb2luUGx1Z2luID0gcGx1Z2luO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb2luUGx1Z2luID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIGtlY2NhazI1NihcImFkZHIoYnl0ZXMzMix1aW50MjU2XCIpXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLiNmZXRjaChcImFkZHIoYnl0ZXMzMix1aW50KVwiLCBbY29pblR5cGVdKTtcbiAgICAgICAgLy8gTm8gYWRkcmVzc1xuICAgICAgICBpZiAoZGF0YSA9PSBudWxsIHx8IGRhdGEgPT09IFwiMHhcIikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgYWRkcmVzc1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gYXdhaXQgY29pblBsdWdpbi5kZWNvZGVBZGRyZXNzKGNvaW5UeXBlLCBkYXRhKTtcbiAgICAgICAgaWYgKGFkZHJlc3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGFkZHJlc3M7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0KGZhbHNlLCBgaW52YWxpZCBjb2luIGRhdGFgLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IGBnZXRBZGRyZXNzKCR7Y29pblR5cGV9KWAsXG4gICAgICAgICAgICBpbmZvOiB7IGNvaW5UeXBlLCBkYXRhIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXNvbHZlcyB0byB0aGUgRUlQLTYzNCB0ZXh0IHJlY29yZCBmb3IgJSVrZXklJSwgb3IgYGBudWxsYGBcbiAgICAgKiAgaWYgdW5jb25maWd1cmVkLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRleHQoa2V5KSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLiNmZXRjaChcInRleHQoYnl0ZXMzMixzdHJpbmcpXCIsIFtrZXldKTtcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCB8fCBkYXRhID09PSBcIjB4XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUnNvbHZlcyB0byB0aGUgY29udGVudC1oYXNoIG9yIGBgbnVsbGBgIGlmIHVuY29uZmlndXJlZC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRDb250ZW50SGFzaCgpIHtcbiAgICAgICAgLy8ga2VjY2FrMjU2KFwiY29udGVudGhhc2goKVwiKVxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy4jZmV0Y2goXCJjb250ZW50aGFzaChieXRlczMyKVwiKTtcbiAgICAgICAgLy8gTm8gY29udGVudGhhc2hcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCB8fCBkYXRhID09PSBcIjB4XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIElQRlMgKENJRDogMSwgVHlwZTogNzA9REFHLVBCLCA3Mj1saWJwMnAta2V5KVxuICAgICAgICBjb25zdCBpcGZzID0gZGF0YS5tYXRjaCgvXjB4KGUzMDEwMTcwfGU1MDEwMTcyKSgoWzAtOWEtZl1bMC05YS1mXSkoWzAtOWEtZl1bMC05YS1mXSkoWzAtOWEtZl0qKSkkLyk7XG4gICAgICAgIGlmIChpcGZzKSB7XG4gICAgICAgICAgICBjb25zdCBzY2hlbWUgPSAoaXBmc1sxXSA9PT0gXCJlMzAxMDE3MFwiKSA/IFwiaXBmc1wiIDogXCJpcG5zXCI7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBwYXJzZUludChpcGZzWzRdLCAxNik7XG4gICAgICAgICAgICBpZiAoaXBmc1s1XS5sZW5ndGggPT09IGxlbmd0aCAqIDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7c2NoZW1lfTovXFwvJHtlbmNvZGVCYXNlNTgoXCIweFwiICsgaXBmc1syXSl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBTd2FybSAoQ0lEOiAxLCBUeXBlOiBzd2FybS1tYW5pZmVzdDsgaGFzaC9sZW5ndGggaGFyZC1jb2RlZCB0byBrZWNjYWsyNTYvMzIpXG4gICAgICAgIGNvbnN0IHN3YXJtID0gZGF0YS5tYXRjaCgvXjB4ZTQwMTAxZmEwMTFiMjAoWzAtOWEtZl0qKSQvKTtcbiAgICAgICAgaWYgKHN3YXJtICYmIHN3YXJtWzFdLmxlbmd0aCA9PT0gNjQpIHtcbiAgICAgICAgICAgIHJldHVybiBgYnp6Oi9cXC8ke3N3YXJtWzFdfWA7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0KGZhbHNlLCBgaW52YWxpZCBvciB1bnN1cHBvcnRlZCBjb250ZW50IGhhc2ggZGF0YWAsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJnZXRDb250ZW50SGFzaCgpXCIsXG4gICAgICAgICAgICBpbmZvOiB7IGRhdGEgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmVzIHRvIHRoZSBhdmF0YXIgdXJsIG9yIGBgbnVsbGBgIGlmIHRoZSBhdmF0YXIgaXMgZWl0aGVyXG4gICAgICogIHVuY29uZmlndXJlZCBvciBpbmNvcnJlY3RseSBjb25maWd1cmVkIChlLmcuIHJlZmVyZW5jZXMgYW4gTkZUXG4gICAgICogIG5vdCBvd25lZCBieSB0aGUgYWRkcmVzcykuXG4gICAgICpcbiAgICAgKiAgSWYgZGlhZ25vc2luZyBpc3N1ZXMgd2l0aCBjb25maWd1cmF0aW9ucywgdGhlIFtbX2dldEF2YXRhcl1dXG4gICAgICogIG1ldGhvZCBtYXkgYmUgdXNlZnVsLlxuICAgICAqL1xuICAgIGFzeW5jIGdldEF2YXRhcigpIHtcbiAgICAgICAgY29uc3QgYXZhdGFyID0gYXdhaXQgdGhpcy5fZ2V0QXZhdGFyKCk7XG4gICAgICAgIHJldHVybiBhdmF0YXIudXJsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgV2hlbiByZXNvbHZpbmcgYW4gYXZhdGFyLCB0aGVyZSBhcmUgbWFueSBzdGVwcyBpbnZvbHZlZCwgc3VjaFxuICAgICAqICBmZXRjaGluZyBtZXRhZGF0YSBhbmQgcG9zc2libHkgdmFsaWRhdGluZyBvd25lcnNoaXAgb2YgYW5cbiAgICAgKiAgTkZULlxuICAgICAqXG4gICAgICogIFRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkIHRvIGV4YW1pbmUgZWFjaCBzdGVwIGFuZCB0aGUgdmFsdWUgaXRcbiAgICAgKiAgd2FzIHdvcmtpbmcgZnJvbS5cbiAgICAgKi9cbiAgICBhc3luYyBfZ2V0QXZhdGFyKCkge1xuICAgICAgICBjb25zdCBsaW5rYWdlID0gW3sgdHlwZTogXCJuYW1lXCIsIHZhbHVlOiB0aGlzLm5hbWUgfV07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyB0ZXN0IGRhdGEgZm9yIHJpY21vby5ldGhcbiAgICAgICAgICAgIC8vY29uc3QgYXZhdGFyID0gXCJlaXAxNTU6MS9lcmM3MjE6MHgyNjUzODVjN2Y0MTMyMjI4QTBkNTRFQjFBOWU3NDYwYjkxYzBjQzY4LzI5MjMzXCI7XG4gICAgICAgICAgICBjb25zdCBhdmF0YXIgPSBhd2FpdCB0aGlzLmdldFRleHQoXCJhdmF0YXJcIik7XG4gICAgICAgICAgICBpZiAoYXZhdGFyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcIiFhdmF0YXJcIiwgdmFsdWU6IFwiXCIgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdXJsOiBudWxsLCBsaW5rYWdlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcImF2YXRhclwiLCB2YWx1ZTogYXZhdGFyIH0pO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRjaGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gYXZhdGFyLm1hdGNoKG1hdGNoZXJzW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NoZW1lID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHNjaGVtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaHR0cHNcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRhdGFcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwidXJsXCIsIHZhbHVlOiBhdmF0YXIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBsaW5rYWdlLCB1cmw6IGF2YXRhciB9O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaXBmc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBnZXRJcGZzTGluayhhdmF0YXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCJpcGZzXCIsIHZhbHVlOiBhdmF0YXIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcInVybFwiLCB2YWx1ZTogdXJsIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgbGlua2FnZSwgdXJsIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVyYzcyMVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZXJjMTE1NVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXBlbmRpbmcgb24gdGhlIEVSQyB0eXBlLCB1c2UgdG9rZW5VUkkodWludDI1Nikgb3IgdXJsKHVpbnQyNTYpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IChzY2hlbWUgPT09IFwiZXJjNzIxXCIpID8gXCJ0b2tlblVSSSh1aW50MjU2KVwiIDogXCJ1cmkodWludDI1NilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IHNjaGVtZSwgdmFsdWU6IGF2YXRhciB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBvd25lciBvZiB0aGlzIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG93bmVyID0gYXdhaXQgdGhpcy5nZXRBZGRyZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3duZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwiIW93bmVyXCIsIHZhbHVlOiBcIlwiIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHVybDogbnVsbCwgbGlua2FnZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcHMgPSAobWF0Y2hbMl0gfHwgXCJcIikuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBzLmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IGAhJHtzY2hlbWV9Y2FpcGAsIHZhbHVlOiAobWF0Y2hbMl0gfHwgXCJcIikgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdXJsOiBudWxsLCBsaW5rYWdlIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlbklkID0gY29tcHNbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250cmFjdCA9IG5ldyBDb250cmFjdChjb21wc1swXSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVSQy03MjFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uIHRva2VuVVJJKHVpbnQpIHZpZXcgcmV0dXJucyAoc3RyaW5nKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb24gb3duZXJPZih1aW50KSB2aWV3IHJldHVybnMgKGFkZHJlc3MpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRVJDLTExNTVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uIHVyaSh1aW50KSB2aWV3IHJldHVybnMgKHN0cmluZylcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzLCB1aW50MjU2KSB2aWV3IHJldHVybnMgKHVpbnQpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sIHRoaXMucHJvdmlkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGlzIGFjY291bnQgb3ducyB0aGUgdG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY2hlbWUgPT09IFwiZXJjNzIxXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlbk93bmVyID0gYXdhaXQgY29udHJhY3Qub3duZXJPZih0b2tlbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3duZXIgIT09IHRva2VuT3duZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCIhb3duZXJcIiwgdmFsdWU6IHRva2VuT3duZXIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHVybDogbnVsbCwgbGlua2FnZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcIm93bmVyXCIsIHZhbHVlOiB0b2tlbk93bmVyIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2NoZW1lID09PSBcImVyYzExNTVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhbGFuY2UgPSBhd2FpdCBjb250cmFjdC5iYWxhbmNlT2Yob3duZXIsIHRva2VuSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYmFsYW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcIiFiYWxhbmNlXCIsIHZhbHVlOiBcIjBcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdXJsOiBudWxsLCBsaW5rYWdlIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwiYmFsYW5jZVwiLCB2YWx1ZTogYmFsYW5jZS50b1N0cmluZygpIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgdG9rZW4gY29udHJhY3QgZm9yIHRoZSBtZXRhZGF0YSBVUkxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtZXRhZGF0YVVybCA9IGF3YWl0IGNvbnRyYWN0W3NlbGVjdG9yXSh0b2tlbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXRhZGF0YVVybCA9PSBudWxsIHx8IG1ldGFkYXRhVXJsID09PSBcIjB4XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcIiFtZXRhZGF0YS11cmxcIiwgdmFsdWU6IFwiXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdXJsOiBudWxsLCBsaW5rYWdlIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcIm1ldGFkYXRhLXVybC1iYXNlXCIsIHZhbHVlOiBtZXRhZGF0YVVybCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVSQy0xMTU1IGFsbG93cyBhIGdlbmVyaWMge2lkfSBpbiB0aGUgVVJMXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NoZW1lID09PSBcImVyYzExNTVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhVXJsID0gbWV0YWRhdGFVcmwucmVwbGFjZShcIntpZH1cIiwgdG9CZUhleCh0b2tlbklkLCAzMikuc3Vic3RyaW5nKDIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcIm1ldGFkYXRhLXVybC1leHBhbmRlZFwiLCB2YWx1ZTogbWV0YWRhdGFVcmwgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmFuc2Zvcm0gSVBGUyBtZXRhZGF0YSBsaW5rc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGFkYXRhVXJsLm1hdGNoKC9eaXBmczovaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YVVybCA9IGdldElwZnNMaW5rKG1ldGFkYXRhVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwibWV0YWRhdGEtdXJsXCIsIHZhbHVlOiBtZXRhZGF0YVVybCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgdG9rZW4gbWV0YWRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAobmV3IEZldGNoUmVxdWVzdChtZXRhZGF0YVVybCkpLnNlbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmFzc2VydE9rKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhID0gcmVzcG9uc2UuYm9keUpzb247XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcIiFtZXRhZGF0YVwiLCB2YWx1ZTogcmVzcG9uc2UuYm9keVRleHQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBieXRlcyA9IHJlc3BvbnNlLmJvZHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChieXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCIhbWV0YWRhdGFcIiwgdmFsdWU6IGhleGxpZnkoYnl0ZXMpIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHVybDogbnVsbCwgbGlua2FnZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB1cmw6IG51bGwsIGxpbmthZ2UgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcIiFtZXRhZGF0YVwiLCB2YWx1ZTogXCJcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB1cmw6IG51bGwsIGxpbmthZ2UgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwibWV0YWRhdGFcIiwgdmFsdWU6IEpTT04uc3RyaW5naWZ5KG1ldGFkYXRhKSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFB1bGwgdGhlIGltYWdlIFVSTCBvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbWFnZVVybCA9IG1ldGFkYXRhLmltYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoaW1hZ2VVcmwpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCIhaW1hZ2VVcmxcIiwgdmFsdWU6IFwiXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdXJsOiBudWxsLCBsaW5rYWdlIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VVcmwubWF0Y2goL14oaHR0cHM6XFwvXFwvfGRhdGE6KS9pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbG93XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmFuc2Zvcm0gSVBGUyBsaW5rIHRvIGdhdGV3YXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpcGZzID0gaW1hZ2VVcmwubWF0Y2gobWF0Y2hlcklwZnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpcGZzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCIhaW1hZ2VVcmwtaXBmc1wiLCB2YWx1ZTogaW1hZ2VVcmwgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHVybDogbnVsbCwgbGlua2FnZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcImltYWdlVXJsLWlwZnNcIiwgdmFsdWU6IGltYWdlVXJsIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlVXJsID0gZ2V0SXBmc0xpbmsoaW1hZ2VVcmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCJ1cmxcIiwgdmFsdWU6IGltYWdlVXJsIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgbGlua2FnZSwgdXJsOiBpbWFnZVVybCB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgIHJldHVybiB7IGxpbmthZ2UsIHVybDogbnVsbCB9O1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgZ2V0RW5zQWRkcmVzcyhwcm92aWRlcikge1xuICAgICAgICBjb25zdCBuZXR3b3JrID0gYXdhaXQgcHJvdmlkZXIuZ2V0TmV0d29yaygpO1xuICAgICAgICBjb25zdCBlbnNQbHVnaW4gPSBuZXR3b3JrLmdldFBsdWdpbihcIm9yZy5ldGhlcnMucGx1Z2lucy5uZXR3b3JrLkVuc1wiKTtcbiAgICAgICAgLy8gTm8gRU5TLi4uXG4gICAgICAgIGFzc2VydChlbnNQbHVnaW4sIFwibmV0d29yayBkb2VzIG5vdCBzdXBwb3J0IEVOU1wiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IFwiZ2V0RW5zQWRkcmVzc1wiLCBpbmZvOiB7IG5ldHdvcmsgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGVuc1BsdWdpbi5hZGRyZXNzO1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgI2dldFJlc29sdmVyKHByb3ZpZGVyLCBuYW1lKSB7XG4gICAgICAgIGNvbnN0IGVuc0FkZHIgPSBhd2FpdCBFbnNSZXNvbHZlci5nZXRFbnNBZGRyZXNzKHByb3ZpZGVyKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRyYWN0ID0gbmV3IENvbnRyYWN0KGVuc0FkZHIsIFtcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uIHJlc29sdmVyKGJ5dGVzMzIpIHZpZXcgcmV0dXJucyAoYWRkcmVzcylcIlxuICAgICAgICAgICAgXSwgcHJvdmlkZXIpO1xuICAgICAgICAgICAgY29uc3QgYWRkciA9IGF3YWl0IGNvbnRyYWN0LnJlc29sdmVyKG5hbWVoYXNoKG5hbWUpLCB7XG4gICAgICAgICAgICAgICAgZW5hYmxlQ2NpcFJlYWQ6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGFkZHIgPT09IFplcm9BZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWRkcjtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEVOUyByZWdpc3RyeSBjYW5ub3QgdGhyb3cgZXJyb3JzIG9uIHJlc29sdmVyKGJ5dGVzMzIpLFxuICAgICAgICAgICAgLy8gc28gcHJvYmFibHkgYSBsaW5rIGVycm9yXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmUgdG8gdGhlIEVOUyByZXNvbHZlciBmb3IgJSVuYW1lJSUgdXNpbmcgJSVwcm92aWRlciUlIG9yXG4gICAgICogIGBgbnVsbGBgIGlmIHVuY29uZmlndXJlZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgZnJvbU5hbWUocHJvdmlkZXIsIG5hbWUpIHtcbiAgICAgICAgbGV0IGN1cnJlbnROYW1lID0gbmFtZTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50TmFtZSA9PT0gXCJcIiB8fCBjdXJyZW50TmFtZSA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE9wdGltaXphdGlvbiBzaW5jZSB0aGUgZXRoIG5vZGUgY2Fubm90IGNoYW5nZSBhbmQgZG9lc1xuICAgICAgICAgICAgLy8gbm90IGhhdmUgYSB3aWxkY2FyZCByZXNvbHZlclxuICAgICAgICAgICAgaWYgKG5hbWUgIT09IFwiZXRoXCIgJiYgY3VycmVudE5hbWUgPT09IFwiZXRoXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENoZWNrIHRoZSBjdXJyZW50IG5vZGUgZm9yIGEgcmVzb2x2ZXJcbiAgICAgICAgICAgIGNvbnN0IGFkZHIgPSBhd2FpdCBFbnNSZXNvbHZlci4jZ2V0UmVzb2x2ZXIocHJvdmlkZXIsIGN1cnJlbnROYW1lKTtcbiAgICAgICAgICAgIC8vIEZvdW5kIGEgcmVzb2x2ZXIhXG4gICAgICAgICAgICBpZiAoYWRkciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBuZXcgRW5zUmVzb2x2ZXIocHJvdmlkZXIsIGFkZHIsIG5hbWUpO1xuICAgICAgICAgICAgICAgIC8vIExlZ2FjeSByZXNvbHZlciBmb3VuZCwgdXNpbmcgRUlQLTI1NDQgc28gaXQgaXNuJ3Qgc2FmZSB0byB1c2VcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudE5hbWUgIT09IG5hbWUgJiYgIShhd2FpdCByZXNvbHZlci5zdXBwb3J0c1dpbGRjYXJkKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBHZXQgdGhlIHBhcmVudCBub2RlXG4gICAgICAgICAgICBjdXJyZW50TmFtZSA9IGN1cnJlbnROYW1lLnNwbGl0KFwiLlwiKS5zbGljZSgxKS5qb2luKFwiLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVucy1yZXNvbHZlci5qcy5tYXAiLCIvKipcbiAqICBAX2lnbm9yZVxuICovXG5pbXBvcnQgeyBnZXRBZGRyZXNzLCBnZXRDcmVhdGVBZGRyZXNzIH0gZnJvbSBcIi4uL2FkZHJlc3MvaW5kZXguanNcIjtcbmltcG9ydCB7IFNpZ25hdHVyZSB9IGZyb20gXCIuLi9jcnlwdG8vaW5kZXguanNcIjtcbmltcG9ydCB7IGFjY2Vzc0xpc3RpZnkgfSBmcm9tIFwiLi4vdHJhbnNhY3Rpb24vaW5kZXguanNcIjtcbmltcG9ydCB7IGdldEJpZ0ludCwgZ2V0TnVtYmVyLCBoZXhsaWZ5LCBpc0hleFN0cmluZywgemVyb1BhZFZhbHVlLCBhc3NlcnQsIGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5jb25zdCBCTl8wID0gQmlnSW50KDApO1xuZXhwb3J0IGZ1bmN0aW9uIGFsbG93TnVsbChmb3JtYXQsIG51bGxWYWx1ZSkge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXQodmFsdWUpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5T2YoZm9ybWF0LCBhbGxvd051bGwpIHtcbiAgICByZXR1cm4gKChhcnJheSkgPT4ge1xuICAgICAgICBpZiAoYWxsb3dOdWxsICYmIGFycmF5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vdCBhbiBhcnJheVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXkubWFwKChpKSA9PiBmb3JtYXQoaSkpO1xuICAgIH0pO1xufVxuLy8gUmVxdWlyZXMgYW4gb2JqZWN0IHdoaWNoIG1hdGNoZXMgYSBmbGVldCBvZiBvdGhlciBmb3JtYXR0ZXJzXG4vLyBBbnkgRm9ybWF0RnVuYyBtYXkgcmV0dXJuIGB1bmRlZmluZWRgIHRvIGhhdmUgdGhlIHZhbHVlIG9taXR0ZWRcbi8vIGZyb20gdGhlIHJlc3VsdCBvYmplY3QuIENhbGxzIHByZXNlcnZlIGB0aGlzYC5cbmV4cG9ydCBmdW5jdGlvbiBvYmplY3QoZm9ybWF0LCBhbHROYW1lcykge1xuICAgIHJldHVybiAoKHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBmb3JtYXQpIHtcbiAgICAgICAgICAgIGxldCBzcmNLZXkgPSBrZXk7XG4gICAgICAgICAgICBpZiAoYWx0TmFtZXMgJiYga2V5IGluIGFsdE5hbWVzICYmICEoc3JjS2V5IGluIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYWx0S2V5IG9mIGFsdE5hbWVzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsdEtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3JjS2V5ID0gYWx0S2V5O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG52ID0gZm9ybWF0W2tleV0odmFsdWVbc3JjS2V5XSk7XG4gICAgICAgICAgICAgICAgaWYgKG52ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBudjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpID8gZXJyb3IubWVzc2FnZSA6IFwibm90LWFuLWVycm9yXCI7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBgaW52YWxpZCB2YWx1ZSBmb3IgdmFsdWUuJHtrZXl9ICgke21lc3NhZ2V9KWAsIFwiQkFEX0RBVEFcIiwgeyB2YWx1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEJvb2xlYW4odmFsdWUpIHtcbiAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgY2FzZSBcInRydWVcIjpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlIGZhbHNlOlxuICAgICAgICBjYXNlIFwiZmFsc2VcIjpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIGBpbnZhbGlkIGJvb2xlYW47ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWAsIFwidmFsdWVcIiwgdmFsdWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGEodmFsdWUpIHtcbiAgICBhc3NlcnRBcmd1bWVudChpc0hleFN0cmluZyh2YWx1ZSwgdHJ1ZSksIFwiaW52YWxpZCBkYXRhXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRIYXNoKHZhbHVlKSB7XG4gICAgYXNzZXJ0QXJndW1lbnQoaXNIZXhTdHJpbmcodmFsdWUsIDMyKSwgXCJpbnZhbGlkIGhhc2hcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFVpbnQyNTYodmFsdWUpIHtcbiAgICBpZiAoIWlzSGV4U3RyaW5nKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHVpbnQyNTZcIik7XG4gICAgfVxuICAgIHJldHVybiB6ZXJvUGFkVmFsdWUodmFsdWUsIDMyKTtcbn1cbmNvbnN0IF9mb3JtYXRMb2cgPSBvYmplY3Qoe1xuICAgIGFkZHJlc3M6IGdldEFkZHJlc3MsXG4gICAgYmxvY2tIYXNoOiBmb3JtYXRIYXNoLFxuICAgIGJsb2NrTnVtYmVyOiBnZXROdW1iZXIsXG4gICAgZGF0YTogZm9ybWF0RGF0YSxcbiAgICBpbmRleDogZ2V0TnVtYmVyLFxuICAgIHJlbW92ZWQ6IGFsbG93TnVsbChmb3JtYXRCb29sZWFuLCBmYWxzZSksXG4gICAgdG9waWNzOiBhcnJheU9mKGZvcm1hdEhhc2gpLFxuICAgIHRyYW5zYWN0aW9uSGFzaDogZm9ybWF0SGFzaCxcbiAgICB0cmFuc2FjdGlvbkluZGV4OiBnZXROdW1iZXIsXG59LCB7XG4gICAgaW5kZXg6IFtcImxvZ0luZGV4XCJdXG59KTtcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRMb2codmFsdWUpIHtcbiAgICByZXR1cm4gX2Zvcm1hdExvZyh2YWx1ZSk7XG59XG5jb25zdCBfZm9ybWF0QmxvY2sgPSBvYmplY3Qoe1xuICAgIGhhc2g6IGFsbG93TnVsbChmb3JtYXRIYXNoKSxcbiAgICBwYXJlbnRIYXNoOiBmb3JtYXRIYXNoLFxuICAgIHBhcmVudEJlYWNvbkJsb2NrUm9vdDogYWxsb3dOdWxsKGZvcm1hdEhhc2gsIG51bGwpLFxuICAgIG51bWJlcjogZ2V0TnVtYmVyLFxuICAgIHRpbWVzdGFtcDogZ2V0TnVtYmVyLFxuICAgIG5vbmNlOiBhbGxvd051bGwoZm9ybWF0RGF0YSksXG4gICAgZGlmZmljdWx0eTogZ2V0QmlnSW50LFxuICAgIGdhc0xpbWl0OiBnZXRCaWdJbnQsXG4gICAgZ2FzVXNlZDogZ2V0QmlnSW50LFxuICAgIHN0YXRlUm9vdDogYWxsb3dOdWxsKGZvcm1hdEhhc2gsIG51bGwpLFxuICAgIHJlY2VpcHRzUm9vdDogYWxsb3dOdWxsKGZvcm1hdEhhc2gsIG51bGwpLFxuICAgIGJsb2JHYXNVc2VkOiBhbGxvd051bGwoZ2V0QmlnSW50LCBudWxsKSxcbiAgICBleGNlc3NCbG9iR2FzOiBhbGxvd051bGwoZ2V0QmlnSW50LCBudWxsKSxcbiAgICBtaW5lcjogYWxsb3dOdWxsKGdldEFkZHJlc3MpLFxuICAgIGV4dHJhRGF0YTogZm9ybWF0RGF0YSxcbiAgICBiYXNlRmVlUGVyR2FzOiBhbGxvd051bGwoZ2V0QmlnSW50KVxufSk7XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0QmxvY2sodmFsdWUpIHtcbiAgICBjb25zdCByZXN1bHQgPSBfZm9ybWF0QmxvY2sodmFsdWUpO1xuICAgIHJlc3VsdC50cmFuc2FjdGlvbnMgPSB2YWx1ZS50cmFuc2FjdGlvbnMubWFwKCh0eCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mICh0eCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0eDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0VHJhbnNhY3Rpb25SZXNwb25zZSh0eCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IF9mb3JtYXRSZWNlaXB0TG9nID0gb2JqZWN0KHtcbiAgICB0cmFuc2FjdGlvbkluZGV4OiBnZXROdW1iZXIsXG4gICAgYmxvY2tOdW1iZXI6IGdldE51bWJlcixcbiAgICB0cmFuc2FjdGlvbkhhc2g6IGZvcm1hdEhhc2gsXG4gICAgYWRkcmVzczogZ2V0QWRkcmVzcyxcbiAgICB0b3BpY3M6IGFycmF5T2YoZm9ybWF0SGFzaCksXG4gICAgZGF0YTogZm9ybWF0RGF0YSxcbiAgICBpbmRleDogZ2V0TnVtYmVyLFxuICAgIGJsb2NrSGFzaDogZm9ybWF0SGFzaCxcbn0sIHtcbiAgICBpbmRleDogW1wibG9nSW5kZXhcIl1cbn0pO1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFJlY2VpcHRMb2codmFsdWUpIHtcbiAgICByZXR1cm4gX2Zvcm1hdFJlY2VpcHRMb2codmFsdWUpO1xufVxuY29uc3QgX2Zvcm1hdFRyYW5zYWN0aW9uUmVjZWlwdCA9IG9iamVjdCh7XG4gICAgdG86IGFsbG93TnVsbChnZXRBZGRyZXNzLCBudWxsKSxcbiAgICBmcm9tOiBhbGxvd051bGwoZ2V0QWRkcmVzcywgbnVsbCksXG4gICAgY29udHJhY3RBZGRyZXNzOiBhbGxvd051bGwoZ2V0QWRkcmVzcywgbnVsbCksXG4gICAgLy8gc2hvdWxkIGJlIGFsbG93TnVsbChoYXNoKSwgYnV0IGJyb2tlbi1FSVAtNjU4IHN1cHBvcnQgaXMgaGFuZGxlZCBpbiByZWNlaXB0XG4gICAgaW5kZXg6IGdldE51bWJlcixcbiAgICByb290OiBhbGxvd051bGwoaGV4bGlmeSksXG4gICAgZ2FzVXNlZDogZ2V0QmlnSW50LFxuICAgIGJsb2JHYXNVc2VkOiBhbGxvd051bGwoZ2V0QmlnSW50LCBudWxsKSxcbiAgICBsb2dzQmxvb206IGFsbG93TnVsbChmb3JtYXREYXRhKSxcbiAgICBibG9ja0hhc2g6IGZvcm1hdEhhc2gsXG4gICAgaGFzaDogZm9ybWF0SGFzaCxcbiAgICBsb2dzOiBhcnJheU9mKGZvcm1hdFJlY2VpcHRMb2cpLFxuICAgIGJsb2NrTnVtYmVyOiBnZXROdW1iZXIsXG4gICAgLy9jb25maXJtYXRpb25zOiBhbGxvd051bGwoZ2V0TnVtYmVyLCBudWxsKSxcbiAgICBjdW11bGF0aXZlR2FzVXNlZDogZ2V0QmlnSW50LFxuICAgIGVmZmVjdGl2ZUdhc1ByaWNlOiBhbGxvd051bGwoZ2V0QmlnSW50KSxcbiAgICBibG9iR2FzUHJpY2U6IGFsbG93TnVsbChnZXRCaWdJbnQsIG51bGwpLFxuICAgIHN0YXR1czogYWxsb3dOdWxsKGdldE51bWJlciksXG4gICAgdHlwZTogYWxsb3dOdWxsKGdldE51bWJlciwgMClcbn0sIHtcbiAgICBlZmZlY3RpdmVHYXNQcmljZTogW1wiZ2FzUHJpY2VcIl0sXG4gICAgaGFzaDogW1widHJhbnNhY3Rpb25IYXNoXCJdLFxuICAgIGluZGV4OiBbXCJ0cmFuc2FjdGlvbkluZGV4XCJdLFxufSk7XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VHJhbnNhY3Rpb25SZWNlaXB0KHZhbHVlKSB7XG4gICAgcmV0dXJuIF9mb3JtYXRUcmFuc2FjdGlvblJlY2VpcHQodmFsdWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFRyYW5zYWN0aW9uUmVzcG9uc2UodmFsdWUpIHtcbiAgICAvLyBTb21lIGNsaWVudHMgKFRlc3RSUEMpIGRvIHN0cmFuZ2UgdGhpbmdzIGxpa2UgcmV0dXJuIDB4MCBmb3IgdGhlXG4gICAgLy8gMCBhZGRyZXNzOyBjb3JyZWN0IHRoaXMgdG8gYmUgYSByZWFsIGFkZHJlc3NcbiAgICBpZiAodmFsdWUudG8gJiYgZ2V0QmlnSW50KHZhbHVlLnRvKSA9PT0gQk5fMCkge1xuICAgICAgICB2YWx1ZS50byA9IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IG9iamVjdCh7XG4gICAgICAgIGhhc2g6IGZvcm1hdEhhc2gsXG4gICAgICAgIC8vIFNvbWUgbm9kZXMgZG8gbm90IHJldHVybiB0aGlzLCB1c3VhbGx5IHRlc3Qgbm9kZXMgKGxpa2UgR2FuYWNoZSlcbiAgICAgICAgaW5kZXg6IGFsbG93TnVsbChnZXROdW1iZXIsIHVuZGVmaW5lZCksXG4gICAgICAgIHR5cGU6ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBcIjB4XCIgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdldE51bWJlcih2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFjY2Vzc0xpc3Q6IGFsbG93TnVsbChhY2Nlc3NMaXN0aWZ5LCBudWxsKSxcbiAgICAgICAgYmxvYlZlcnNpb25lZEhhc2hlczogYWxsb3dOdWxsKGFycmF5T2YoZm9ybWF0SGFzaCwgdHJ1ZSksIG51bGwpLFxuICAgICAgICBibG9ja0hhc2g6IGFsbG93TnVsbChmb3JtYXRIYXNoLCBudWxsKSxcbiAgICAgICAgYmxvY2tOdW1iZXI6IGFsbG93TnVsbChnZXROdW1iZXIsIG51bGwpLFxuICAgICAgICB0cmFuc2FjdGlvbkluZGV4OiBhbGxvd051bGwoZ2V0TnVtYmVyLCBudWxsKSxcbiAgICAgICAgZnJvbTogZ2V0QWRkcmVzcyxcbiAgICAgICAgLy8gZWl0aGVyIChnYXNQcmljZSkgb3IgKG1heFByaW9yaXR5RmVlUGVyR2FzICsgbWF4RmVlUGVyR2FzKSBtdXN0IGJlIHNldFxuICAgICAgICBnYXNQcmljZTogYWxsb3dOdWxsKGdldEJpZ0ludCksXG4gICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBhbGxvd051bGwoZ2V0QmlnSW50KSxcbiAgICAgICAgbWF4RmVlUGVyR2FzOiBhbGxvd051bGwoZ2V0QmlnSW50KSxcbiAgICAgICAgbWF4RmVlUGVyQmxvYkdhczogYWxsb3dOdWxsKGdldEJpZ0ludCwgbnVsbCksXG4gICAgICAgIGdhc0xpbWl0OiBnZXRCaWdJbnQsXG4gICAgICAgIHRvOiBhbGxvd051bGwoZ2V0QWRkcmVzcywgbnVsbCksXG4gICAgICAgIHZhbHVlOiBnZXRCaWdJbnQsXG4gICAgICAgIG5vbmNlOiBnZXROdW1iZXIsXG4gICAgICAgIGRhdGE6IGZvcm1hdERhdGEsXG4gICAgICAgIGNyZWF0ZXM6IGFsbG93TnVsbChnZXRBZGRyZXNzLCBudWxsKSxcbiAgICAgICAgY2hhaW5JZDogYWxsb3dOdWxsKGdldEJpZ0ludCwgbnVsbClcbiAgICB9LCB7XG4gICAgICAgIGRhdGE6IFtcImlucHV0XCJdLFxuICAgICAgICBnYXNMaW1pdDogW1wiZ2FzXCJdLFxuICAgICAgICBpbmRleDogW1widHJhbnNhY3Rpb25JbmRleFwiXVxuICAgIH0pKHZhbHVlKTtcbiAgICAvLyBJZiB0byBhbmQgY3JlYXRlcyBhcmUgZW1wdHksIHBvcHVsYXRlIHRoZSBjcmVhdGVzIGZyb20gdGhlIHZhbHVlXG4gICAgaWYgKHJlc3VsdC50byA9PSBudWxsICYmIHJlc3VsdC5jcmVhdGVzID09IG51bGwpIHtcbiAgICAgICAgcmVzdWx0LmNyZWF0ZXMgPSBnZXRDcmVhdGVBZGRyZXNzKHJlc3VsdCk7XG4gICAgfVxuICAgIC8vIEBUT0RPOiBDaGVjayBmZWUgZGF0YVxuICAgIC8vIEFkZCBhbiBhY2Nlc3MgbGlzdCB0byBzdXBwb3J0ZWQgdHJhbnNhY3Rpb24gdHlwZXNcbiAgICBpZiAoKHZhbHVlLnR5cGUgPT09IDEgfHwgdmFsdWUudHlwZSA9PT0gMikgJiYgdmFsdWUuYWNjZXNzTGlzdCA9PSBudWxsKSB7XG4gICAgICAgIHJlc3VsdC5hY2Nlc3NMaXN0ID0gW107XG4gICAgfVxuICAgIC8vIENvbXB1dGUgdGhlIHNpZ25hdHVyZVxuICAgIGlmICh2YWx1ZS5zaWduYXR1cmUpIHtcbiAgICAgICAgcmVzdWx0LnNpZ25hdHVyZSA9IFNpZ25hdHVyZS5mcm9tKHZhbHVlLnNpZ25hdHVyZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQuc2lnbmF0dXJlID0gU2lnbmF0dXJlLmZyb20odmFsdWUpO1xuICAgIH1cbiAgICAvLyBTb21lIGJhY2tlbmRzIG9taXQgQ2hhaW5JZCBvbiBsZWdhY3kgdHJhbnNhY3Rpb25zLCBidXQgd2UgY2FuIGNvbXB1dGUgaXRcbiAgICBpZiAocmVzdWx0LmNoYWluSWQgPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBjaGFpbklkID0gcmVzdWx0LnNpZ25hdHVyZS5sZWdhY3lDaGFpbklkO1xuICAgICAgICBpZiAoY2hhaW5JZCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQuY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQFRPRE86IGNoZWNrIGNoYWluSURcbiAgICAvKlxuICAgIGlmICh2YWx1ZS5jaGFpbklkICE9IG51bGwpIHtcbiAgICAgICAgbGV0IGNoYWluSWQgPSB2YWx1ZS5jaGFpbklkO1xuXG4gICAgICAgIGlmIChpc0hleFN0cmluZyhjaGFpbklkKSkge1xuICAgICAgICAgICAgY2hhaW5JZCA9IEJpZ051bWJlci5mcm9tKGNoYWluSWQpLnRvTnVtYmVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQuY2hhaW5JZCA9IGNoYWluSWQ7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgY2hhaW5JZCA9IHZhbHVlLm5ldHdvcmtJZDtcblxuICAgICAgICAvLyBnZXRoLWV0YyByZXR1cm5zIGNoYWluSWRcbiAgICAgICAgaWYgKGNoYWluSWQgPT0gbnVsbCAmJiByZXN1bHQudiA9PSBudWxsKSB7XG4gICAgICAgICAgICBjaGFpbklkID0gdmFsdWUuY2hhaW5JZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0hleFN0cmluZyhjaGFpbklkKSkge1xuICAgICAgICAgICAgY2hhaW5JZCA9IEJpZ051bWJlci5mcm9tKGNoYWluSWQpLnRvTnVtYmVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mKGNoYWluSWQpICE9PSBcIm51bWJlclwiICYmIHJlc3VsdC52ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNoYWluSWQgPSAocmVzdWx0LnYgLSAzNSkgLyAyO1xuICAgICAgICAgICAgaWYgKGNoYWluSWQgPCAwKSB7IGNoYWluSWQgPSAwOyB9XG4gICAgICAgICAgICBjaGFpbklkID0gcGFyc2VJbnQoY2hhaW5JZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mKGNoYWluSWQpICE9PSBcIm51bWJlclwiKSB7IGNoYWluSWQgPSAwOyB9XG5cbiAgICAgICAgcmVzdWx0LmNoYWluSWQgPSBjaGFpbklkO1xuICAgIH1cbiAgICAqL1xuICAgIC8vIDB4MDAwMC4uLiBzaG91bGQgYWN0dWFsbHkgYmUgbnVsbFxuICAgIGlmIChyZXN1bHQuYmxvY2tIYXNoICYmIGdldEJpZ0ludChyZXN1bHQuYmxvY2tIYXNoKSA9PT0gQk5fMCkge1xuICAgICAgICByZXN1bHQuYmxvY2tIYXNoID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdC5qcy5tYXAiLCJpbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiLi4vY3J5cHRvL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBjb25jYXQsIGRhdGFTbGljZSwgZ2V0QmlnSW50LCBnZXRCeXRlcywgZW5jb2RlUmxwLCBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCIuL2FkZHJlc3MuanNcIjtcbi8vIGh0dHA6Ly9ldGhlcmV1bS5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvNzYwL2hvdy1pcy10aGUtYWRkcmVzcy1vZi1hbi1ldGhlcmV1bS1jb250cmFjdC1jb21wdXRlZFxuLyoqXG4gKiAgUmV0dXJucyB0aGUgYWRkcmVzcyB0aGF0IHdvdWxkIHJlc3VsdCBmcm9tIGEgYGBDUkVBVEVgYCBmb3IgJSV0eCUlLlxuICpcbiAqICBUaGlzIGNhbiBiZSB1c2VkIHRvIGNvbXB1dGUgdGhlIGFkZHJlc3MgYSBjb250cmFjdCB3aWxsIGJlXG4gKiAgZGVwbG95ZWQgdG8gYnkgYW4gRU9BIHdoZW4gc2VuZGluZyBhIGRlcGxveW1lbnQgdHJhbnNhY3Rpb24gKGkuZS5cbiAqICB3aGVuIHRoZSBgYHRvYGAgYWRkcmVzcyBpcyBgYG51bGxgYCkuXG4gKlxuICogIFRoaXMgY2FuIGFsc28gYmUgdXNlZCB0byBjb21wdXRlIHRoZSBhZGRyZXNzIGEgY29udHJhY3Qgd2lsbCBiZVxuICogIGRlcGxveWVkIHRvIGJ5IGEgY29udHJhY3QsIGJ5IHVzaW5nIHRoZSBjb250cmFjdCdzIGFkZHJlc3MgYXMgdGhlXG4gKiAgYGB0b2BgIGFuZCB0aGUgY29udHJhY3QncyBub25jZS5cbiAqXG4gKiAgQGV4YW1wbGVcbiAqICAgIGZyb20gPSBcIjB4OGJhMWYxMDk1NTFiRDQzMjgwMzAxMjY0NUFjMTM2ZGRkNjREQkE3MlwiO1xuICogICAgbm9uY2UgPSA1O1xuICpcbiAqICAgIGdldENyZWF0ZUFkZHJlc3MoeyBmcm9tLCBub25jZSB9KTtcbiAqICAgIC8vX3Jlc3VsdDpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENyZWF0ZUFkZHJlc3ModHgpIHtcbiAgICBjb25zdCBmcm9tID0gZ2V0QWRkcmVzcyh0eC5mcm9tKTtcbiAgICBjb25zdCBub25jZSA9IGdldEJpZ0ludCh0eC5ub25jZSwgXCJ0eC5ub25jZVwiKTtcbiAgICBsZXQgbm9uY2VIZXggPSBub25jZS50b1N0cmluZygxNik7XG4gICAgaWYgKG5vbmNlSGV4ID09PSBcIjBcIikge1xuICAgICAgICBub25jZUhleCA9IFwiMHhcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAobm9uY2VIZXgubGVuZ3RoICUgMikge1xuICAgICAgICBub25jZUhleCA9IFwiMHgwXCIgKyBub25jZUhleDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5vbmNlSGV4ID0gXCIweFwiICsgbm9uY2VIZXg7XG4gICAgfVxuICAgIHJldHVybiBnZXRBZGRyZXNzKGRhdGFTbGljZShrZWNjYWsyNTYoZW5jb2RlUmxwKFtmcm9tLCBub25jZUhleF0pKSwgMTIpKTtcbn1cbi8qKlxuICogIFJldHVybnMgdGhlIGFkZHJlc3MgdGhhdCB3b3VsZCByZXN1bHQgZnJvbSBhIGBgQ1JFQVRFMmBgIG9wZXJhdGlvblxuICogIHdpdGggdGhlIGdpdmVuICUlZnJvbSUlLCAlJXNhbHQlJSBhbmQgJSVpbml0Q29kZUhhc2glJS5cbiAqXG4gKiAgVG8gY29tcHV0ZSB0aGUgJSVpbml0Q29kZUhhc2glJSBmcm9tIGEgY29udHJhY3QncyBpbml0IGNvZGUsIHVzZVxuICogIHRoZSBbW2tlY2NhazI1Nl1dIGZ1bmN0aW9uLlxuICpcbiAqICBGb3IgYSBxdWljayBvdmVydmlldyBhbmQgZXhhbXBsZSBvZiBgYENSRUFURTJgYCwgc2VlIFtbbGluay1yaWNtb28td2lzcHNdXS5cbiAqXG4gKiAgQGV4YW1wbGVcbiAqICAgIC8vIFRoZSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdFxuICogICAgZnJvbSA9IFwiMHg4YmExZjEwOTU1MWJENDMyODAzMDEyNjQ1QWMxMzZkZGQ2NERCQTcyXCJcbiAqXG4gKiAgICAvLyBUaGUgc2FsdFxuICogICAgc2FsdCA9IGlkKFwiSGVsbG9Xb3JsZFwiKVxuICpcbiAqICAgIC8vIFRoZSBoYXNoIG9mIHRoZSBpbml0Q29kZVxuICogICAgaW5pdENvZGUgPSBcIjB4NjM5NDE5OGRmMTYwMDA1MjYxMDNmZjYwMjA2MDA0NjAxYzMzNWFmYTYwNDA1MTYwNjBmM1wiO1xuICogICAgaW5pdENvZGVIYXNoID0ga2VjY2FrMjU2KGluaXRDb2RlKVxuICpcbiAqICAgIGdldENyZWF0ZTJBZGRyZXNzKGZyb20sIHNhbHQsIGluaXRDb2RlSGFzaClcbiAqICAgIC8vX3Jlc3VsdDpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENyZWF0ZTJBZGRyZXNzKF9mcm9tLCBfc2FsdCwgX2luaXRDb2RlSGFzaCkge1xuICAgIGNvbnN0IGZyb20gPSBnZXRBZGRyZXNzKF9mcm9tKTtcbiAgICBjb25zdCBzYWx0ID0gZ2V0Qnl0ZXMoX3NhbHQsIFwic2FsdFwiKTtcbiAgICBjb25zdCBpbml0Q29kZUhhc2ggPSBnZXRCeXRlcyhfaW5pdENvZGVIYXNoLCBcImluaXRDb2RlSGFzaFwiKTtcbiAgICBhc3NlcnRBcmd1bWVudChzYWx0Lmxlbmd0aCA9PT0gMzIsIFwic2FsdCBtdXN0IGJlIDMyIGJ5dGVzXCIsIFwic2FsdFwiLCBfc2FsdCk7XG4gICAgYXNzZXJ0QXJndW1lbnQoaW5pdENvZGVIYXNoLmxlbmd0aCA9PT0gMzIsIFwiaW5pdENvZGVIYXNoIG11c3QgYmUgMzIgYnl0ZXNcIiwgXCJpbml0Q29kZUhhc2hcIiwgX2luaXRDb2RlSGFzaCk7XG4gICAgcmV0dXJuIGdldEFkZHJlc3MoZGF0YVNsaWNlKGtlY2NhazI1Nihjb25jYXQoW1wiMHhmZlwiLCBmcm9tLCBzYWx0LCBpbml0Q29kZUhhc2hdKSksIDEyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250cmFjdC1hZGRyZXNzLmpzLm1hcCIsImltcG9ydCB7IGRlZmluZVByb3BlcnRpZXMgfSBmcm9tIFwiLi4vdXRpbHMvcHJvcGVydGllcy5qc1wiO1xuaW1wb3J0IHsgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmNvbnN0IEVuc0FkZHJlc3MgPSBcIjB4MDAwMDAwMDAwMDBDMkUwNzRlQzY5QTBkRmIyOTk3QkE2QzdkMmUxZVwiO1xuLyoqXG4gKiAgQSAqKk5ldHdvcmtQbHVnaW4qKiBwcm92aWRlcyBhZGRpdGlvbmFsIGZ1bmN0aW9uYWxpdHkgb24gYSBbW05ldHdvcmtdXS5cbiAqL1xuZXhwb3J0IGNsYXNzIE5ldHdvcmtQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqICBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luLlxuICAgICAqXG4gICAgICogIEl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSByZXZlcnNlLWRvbWFpbi1ub3RhdGlvbiwgd2hpY2ggcGVybWl0c1xuICAgICAqICB1bmlxdWUgbmFtZXMgd2l0aCBhIGtub3duIGF1dGhvcml0eSBhcyB3ZWxsIGFzIGhpZXJhcmNoYWwgZW50cmllcy5cbiAgICAgKi9cbiAgICBuYW1lO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3ICoqTmV0d29ya1BsdWdpbioqLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IG5hbWUgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgY29weSBvZiB0aGlzIHBsdWdpbi5cbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOZXR3b3JrUGx1Z2luKHRoaXMubmFtZSk7XG4gICAgfVxufVxuLyoqXG4gKiAgQSAqKkdhc0Nvc3RQbHVnaW4qKiBhbGxvd3MgYSBuZXR3b3JrIHRvIHByb3ZpZGUgYWx0ZXJuYXRpdmUgdmFsdWVzIHdoZW5cbiAqICBjb21wdXRpbmcgdGhlIGludHJpbnNpYyBnYXMgcmVxdWlyZWQgZm9yIGEgdHJhbnNhY3Rpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBHYXNDb3N0UGx1Z2luIGV4dGVuZHMgTmV0d29ya1BsdWdpbiB7XG4gICAgLyoqXG4gICAgICogIFRoZSBibG9jayBudW1iZXIgdG8gdHJlYXQgdGhlc2UgdmFsdWVzIGFzIHZhbGlkIGZyb20uXG4gICAgICpcbiAgICAgKiAgVGhpcyBhbGxvd3MgYSBoYXJkZm9yayB0byBoYXZlIHVwZGF0ZWQgdmFsdWVzIGluY2x1ZGVkIGFzIHdlbGwgYXNcbiAgICAgKiAgbXVsdXRpcGxlIGhhcmRmb3JrcyB0byBiZSBzdXBwb3J0ZWQuXG4gICAgICovXG4gICAgZWZmZWN0aXZlQmxvY2s7XG4gICAgLyoqXG4gICAgICogIFRoZSB0cmFuc2FjdGlvbnMgYmFzZSBmZWUuXG4gICAgICovXG4gICAgdHhCYXNlO1xuICAgIC8qKlxuICAgICAqICBUaGUgZmVlIGZvciBjcmVhdGluZyBhIG5ldyBhY2NvdW50LlxuICAgICAqL1xuICAgIHR4Q3JlYXRlO1xuICAgIC8qKlxuICAgICAqICBUaGUgZmVlIHBlciB6ZXJvLWJ5dGUgaW4gdGhlIGRhdGEuXG4gICAgICovXG4gICAgdHhEYXRhWmVybztcbiAgICAvKipcbiAgICAgKiAgVGhlIGZlZSBwZXIgbm9uLXplcm8tYnl0ZSBpbiB0aGUgZGF0YS5cbiAgICAgKi9cbiAgICB0eERhdGFOb256ZXJvO1xuICAgIC8qKlxuICAgICAqICBUaGUgZmVlIHBlciBzdG9yYWdlIGtleSBpbiB0aGUgW1tsaW5rLWVpcC0yOTMwXV0gYWNjZXNzIGxpc3QuXG4gICAgICovXG4gICAgdHhBY2Nlc3NMaXN0U3RvcmFnZUtleTtcbiAgICAvKipcbiAgICAgKiAgVGhlIGZlZSBwZXIgYWRkcmVzcyBpbiB0aGUgW1tsaW5rLWVpcC0yOTMwXV0gYWNjZXNzIGxpc3QuXG4gICAgICovXG4gICAgdHhBY2Nlc3NMaXN0QWRkcmVzcztcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyBHYXNDb3N0UGx1Z2luIGZyb20gJSVlZmZlY3RpdmVCbG9jayUlIHVudGlsIHRoZVxuICAgICAqICBsYXRlc3QgYmxvY2sgb3IgYW5vdGhlciBHYXNDb3N0UGx1Z2luIHN1cGVyY2VkZXMgdGhhdCBibG9jayBudW1iZXIsXG4gICAgICogIHdpdGggdGhlIGFzc29jaWF0ZWQgJSVjb3N0cyUlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVmZmVjdGl2ZUJsb2NrLCBjb3N0cykge1xuICAgICAgICBpZiAoZWZmZWN0aXZlQmxvY2sgPT0gbnVsbCkge1xuICAgICAgICAgICAgZWZmZWN0aXZlQmxvY2sgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKGBvcmcuZXRoZXJzLm5ldHdvcmsucGx1Z2lucy5HYXNDb3N0IyR7KGVmZmVjdGl2ZUJsb2NrIHx8IDApfWApO1xuICAgICAgICBjb25zdCBwcm9wcyA9IHsgZWZmZWN0aXZlQmxvY2sgfTtcbiAgICAgICAgZnVuY3Rpb24gc2V0KG5hbWUsIG51bGxpc2gpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IChjb3N0cyB8fCB7fSlbbmFtZV07XG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbnVsbGlzaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KHR5cGVvZiAodmFsdWUpID09PSBcIm51bWJlclwiLCBgaW52YWx1ZCB2YWx1ZSBmb3IgJHtuYW1lfWAsIFwiY29zdHNcIiwgY29zdHMpO1xuICAgICAgICAgICAgcHJvcHNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBzZXQoXCJ0eEJhc2VcIiwgMjEwMDApO1xuICAgICAgICBzZXQoXCJ0eENyZWF0ZVwiLCAzMjAwMCk7XG4gICAgICAgIHNldChcInR4RGF0YVplcm9cIiwgNCk7XG4gICAgICAgIHNldChcInR4RGF0YU5vbnplcm9cIiwgMTYpO1xuICAgICAgICBzZXQoXCJ0eEFjY2Vzc0xpc3RTdG9yYWdlS2V5XCIsIDE5MDApO1xuICAgICAgICBzZXQoXCJ0eEFjY2Vzc0xpc3RBZGRyZXNzXCIsIDI0MDApO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHByb3BzKTtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgR2FzQ29zdFBsdWdpbih0aGlzLmVmZmVjdGl2ZUJsb2NrLCB0aGlzKTtcbiAgICB9XG59XG4vKipcbiAqICBBbiAqKkVuc1BsdWdpbioqIGFsbG93cyBhIFtbTmV0d29ya11dIHRvIHNwZWNpZnkgdGhlIEVOUyBSZWdpc3RyeVxuICogIENvbnRyYWN0IGFkZHJlc3MgYW5kIHRoZSB0YXJnZXQgbmV0d29yayB0byB1c2Ugd2hlbiB1c2luZyB0aGF0XG4gKiAgY29udHJhY3QuXG4gKlxuICogIFZhcmlvdXMgdGVzdG5ldHMgaGF2ZSB0aGVpciBvd24gaW5zdGFuY2Ugb2YgdGhlIGNvbnRyYWN0IHRvIHVzZSwgYnV0XG4gKiAgaW4gZ2VuZXJhbCwgdGhlIG1haW5uZXQgaW5zdGFuY2Ugc3VwcG9ydHMgbXVsdGktY2hhaW4gYWRkcmVzc2VzIGFuZFxuICogIHNob3VsZCBiZSB1c2VkLlxuICovXG5leHBvcnQgY2xhc3MgRW5zUGx1Z2luIGV4dGVuZHMgTmV0d29ya1BsdWdpbiB7XG4gICAgLyoqXG4gICAgICogIFRoZSBFTlMgUmVnaXN0cnR5IENvbnRyYWN0IGFkZHJlc3MuXG4gICAgICovXG4gICAgYWRkcmVzcztcbiAgICAvKipcbiAgICAgKiAgVGhlIGNoYWluIElEIHRoYXQgdGhlIEVOUyBjb250cmFjdCBsaXZlcyBvbi5cbiAgICAgKi9cbiAgICB0YXJnZXROZXR3b3JrO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3ICoqRW5zUGx1Z2luKiogY29ubmVjdGVkIHRvICUlYWRkcmVzcyUlIG9uIHRoZVxuICAgICAqICAlJXRhcmdldE5ldHdvcmslJS4gVGhlIGRlZmF1bHQgRU5TIGFkZHJlc3MgYW5kIG1haW5uZXQgaXMgdXNlZFxuICAgICAqICBpZiB1bnNwZWNpZmllZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhZGRyZXNzLCB0YXJnZXROZXR3b3JrKSB7XG4gICAgICAgIHN1cGVyKFwib3JnLmV0aGVycy5wbHVnaW5zLm5ldHdvcmsuRW5zXCIpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgICAgIGFkZHJlc3M6IChhZGRyZXNzIHx8IEVuc0FkZHJlc3MpLFxuICAgICAgICAgICAgdGFyZ2V0TmV0d29yazogKCh0YXJnZXROZXR3b3JrID09IG51bGwpID8gMSA6IHRhcmdldE5ldHdvcmspXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbnNQbHVnaW4odGhpcy5hZGRyZXNzLCB0aGlzLnRhcmdldE5ldHdvcmspO1xuICAgIH1cbn1cbi8qKlxuICogIEEgKipGZWVEYXRhTmV0d29ya1BsdWdpbioqIGFsbG93cyBhIG5ldHdvcmsgdG8gcHJvdmlkZSBhbmQgYWx0ZXJuYXRlXG4gKiAgbWVhbnMgdG8gc3BlY2lmeSBpdHMgZmVlIGRhdGEuXG4gKlxuICogIEZvciBleGFtcGxlLCBhIG5ldHdvcmsgd2hpY2ggZG9lcyBub3Qgc3VwcG9ydCBbW2xpbmstZWlwLTE1NTldXSBtYXlcbiAqICBjaG9vc2UgdG8gdXNlIGEgR2FzIFN0YXRpb24gc2l0ZSB0byBhcHByb3hpbWF0ZSB0aGUgZ2FzIHByaWNlLlxuICovXG5leHBvcnQgY2xhc3MgRmVlRGF0YU5ldHdvcmtQbHVnaW4gZXh0ZW5kcyBOZXR3b3JrUGx1Z2luIHtcbiAgICAjZmVlRGF0YUZ1bmM7XG4gICAgLyoqXG4gICAgICogIFRoZSBmZWUgZGF0YSBmdW5jdGlvbiBwcm92aWRlZCB0byB0aGUgY29uc3RydWN0b3IuXG4gICAgICovXG4gICAgZ2V0IGZlZURhdGFGdW5jKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZmVlRGF0YUZ1bmM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3ICoqRmVlRGF0YU5ldHdvcmtQbHVnaW4qKi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihmZWVEYXRhRnVuYykge1xuICAgICAgICBzdXBlcihcIm9yZy5ldGhlcnMucGx1Z2lucy5uZXR3b3JrLkZlZURhdGFcIik7XG4gICAgICAgIHRoaXMuI2ZlZURhdGFGdW5jID0gZmVlRGF0YUZ1bmM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXNvbHZlcyB0byB0aGUgZmVlIGRhdGEuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0RmVlRGF0YShwcm92aWRlcikge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy4jZmVlRGF0YUZ1bmMocHJvdmlkZXIpO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGZWVEYXRhTmV0d29ya1BsdWdpbih0aGlzLiNmZWVEYXRhRnVuYyk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZldGNoVXJsRmVlRGF0YU5ldHdvcmtQbHVnaW4gZXh0ZW5kcyBOZXR3b3JrUGx1Z2luIHtcbiAgICAjdXJsO1xuICAgICNwcm9jZXNzRnVuYztcbiAgICAvKipcbiAgICAgKiAgVGhlIFVSTCB0byBpbml0aWFsaXplIHRoZSBGZXRjaFJlcXVlc3Qgd2l0aCBpbiAlJXByb2Nlc3NGdW5jJSUuXG4gICAgICovXG4gICAgZ2V0IHVybCgpIHsgcmV0dXJuIHRoaXMuI3VybDsgfVxuICAgIC8qKlxuICAgICAqICBUaGUgY2FsbGJhY2sgdG8gdXNlIHdoZW4gY29tcHV0aW5nIHRoZSBGZWVEYXRhLlxuICAgICAqL1xuICAgIGdldCBwcm9jZXNzRnVuYygpIHsgcmV0dXJuIHRoaXMuI3Byb2Nlc3NGdW5jOyB9XG4gICAgLyoqXG4gICAgICogIENyZWF0ZXMgYSBuZXcgKipGZXRjaFVybEZlZURhdGFOZXR3b3JrUGx1Z2luKiogd2hpY2ggd2lsbFxuICAgICAqICBiZSB1c2VkIHdoZW4gY29tcHV0aW5nIHRoZSBmZWUgZGF0YSBmb3IgdGhlIG5ldHdvcmsuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodXJsLCBwcm9jZXNzRnVuYykge1xuICAgICAgICBzdXBlcihcIm9yZy5ldGhlcnMucGx1Z2lucy5uZXR3b3JrLkZldGNoVXJsRmVlRGF0YVBsdWdpblwiKTtcbiAgICAgICAgdGhpcy4jdXJsID0gdXJsO1xuICAgICAgICB0aGlzLiNwcm9jZXNzRnVuYyA9IHByb2Nlc3NGdW5jO1xuICAgIH1cbiAgICAvLyBXZSBhcmUgaW1tdXRhYmxlLCBzbyB3ZSBjYW4gc2VydmUgYXMgb3VyIG93biBjbG9uZVxuICAgIGNsb25lKCkgeyByZXR1cm4gdGhpczsgfVxufVxuLypcbmV4cG9ydCBjbGFzcyBDdXN0b21CbG9ja05ldHdvcmtQbHVnaW4gZXh0ZW5kcyBOZXR3b3JrUGx1Z2luIHtcbiAgICByZWFkb25seSAjYmxvY2tGdW5jOiAocHJvdmlkZXI6IFByb3ZpZGVyLCBibG9jazogQmxvY2tQYXJhbXM8c3RyaW5nPikgPT4gQmxvY2s8c3RyaW5nPjtcbiAgICByZWFkb25seSAjYmxvY2tXaXRoVHhzRnVuYzogKHByb3ZpZGVyOiBQcm92aWRlciwgYmxvY2s6IEJsb2NrUGFyYW1zPFRyYW5zYWN0aW9uUmVzcG9uc2VQYXJhbXM+KSA9PiBCbG9jazxUcmFuc2FjdGlvblJlc3BvbnNlPjtcblxuICAgIGNvbnN0cnVjdG9yKGJsb2NrRnVuYzogKHByb3ZpZGVyOiBQcm92aWRlciwgYmxvY2s6IEJsb2NrUGFyYW1zPHN0cmluZz4pID0+IEJsb2NrPHN0cmluZz4sIGJsb2NrV2l0aFR4c0Z1bmM6IChwcm92aWRlcjogUHJvdmlkZXIsIGJsb2NrOiBCbG9ja1BhcmFtczxUcmFuc2FjdGlvblJlc3BvbnNlUGFyYW1zPikgPT4gQmxvY2s8VHJhbnNhY3Rpb25SZXNwb25zZT4pIHtcbiAgICAgICAgc3VwZXIoXCJvcmcuZXRoZXJzLm5ldHdvcmstcGx1Z2lucy5jdXN0b20tYmxvY2tcIik7XG4gICAgICAgIHRoaXMuI2Jsb2NrRnVuYyA9IGJsb2NrRnVuYztcbiAgICAgICAgdGhpcy4jYmxvY2tXaXRoVHhzRnVuYyA9IGJsb2NrV2l0aFR4c0Z1bmM7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QmxvY2socHJvdmlkZXI6IFByb3ZpZGVyLCBibG9jazogQmxvY2tQYXJhbXM8c3RyaW5nPik6IFByb21pc2U8QmxvY2s8c3RyaW5nPj4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy4jYmxvY2tGdW5jKHByb3ZpZGVyLCBibG9jayk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QmxvY2tpb25zKHByb3ZpZGVyOiBQcm92aWRlciwgYmxvY2s6IEJsb2NrUGFyYW1zPFRyYW5zYWN0aW9uUmVzcG9uc2VQYXJhbXM+KTogUHJvbWlzZTxCbG9jazxUcmFuc2FjdGlvblJlc3BvbnNlPj4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy4jYmxvY2tXaXRoVHhzRnVuYyhwcm92aWRlciwgYmxvY2spO1xuICAgIH1cblxuICAgIGNsb25lKCk6IEN1c3RvbUJsb2NrTmV0d29ya1BsdWdpbiB7XG4gICAgICAgIHJldHVybiBuZXcgQ3VzdG9tQmxvY2tOZXR3b3JrUGx1Z2luKHRoaXMuI2Jsb2NrRnVuYywgdGhpcy4jYmxvY2tXaXRoVHhzRnVuYyk7XG4gICAgfVxufVxuKi9cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsdWdpbnMtbmV0d29yay5qcy5tYXAiLCIvKipcbiAqICBBICoqTmV0d29yayoqIGVuY2Fwc3VsYXRlcyB0aGUgdmFyaW91cyBwcm9wZXJ0aWVzIHJlcXVpcmVkIHRvXG4gKiAgaW50ZXJhY3Qgd2l0aCBhIHNwZWNpZmljIGNoYWluLlxuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9wcm92aWRlcnM6TmV0d29ya3MgIFtuZXR3b3Jrc11cbiAqL1xuaW1wb3J0IHsgYWNjZXNzTGlzdGlmeSB9IGZyb20gXCIuLi90cmFuc2FjdGlvbi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0QmlnSW50LCBhc3NlcnQsIGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBFbnNQbHVnaW4sIEZldGNoVXJsRmVlRGF0YU5ldHdvcmtQbHVnaW4sIEdhc0Nvc3RQbHVnaW4gfSBmcm9tIFwiLi9wbHVnaW5zLW5ldHdvcmsuanNcIjtcbi8qICogKiAqXG4vLyBOZXR3b3JrcyB3aGljaCBvcGVyYXRpb24gYWdhaW5zdCBhbiBMMiBjYW4gdXNlIHRoaXMgcGx1Z2luIHRvXG4vLyBzcGVjaWZ5IGhvdyB0byBhY2Nlc3MgTDEsIGZvciB0aGUgcHVycG9zZSBvZiByZXNvbHZpbmcgRU5TLFxuLy8gZm9yIGV4YW1wbGUuXG5leHBvcnQgY2xhc3MgTGF5ZXJPbmVDb25uZWN0aW9uUGx1Z2luIGV4dGVuZHMgTmV0d29ya1BsdWdpbiB7XG4gICAgcmVhZG9ubHkgcHJvdmlkZXIhOiBQcm92aWRlcjtcbi8vIEBUT0RPOiBSZW5hbWUgdG8gQ2hhaW5BY2Nlc3MgYW5kIGFsbG93IGZvciBjb25uZWN0aW5nIHRvIGFueSBjaGFpblxuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyOiBQcm92aWRlcikge1xuICAgICAgICBzdXBlcihcIm9yZy5ldGhlcnMucGx1Z2lucy5sYXllci1vbmUtY29ubmVjdGlvblwiKTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllczxMYXllck9uZUNvbm5lY3Rpb25QbHVnaW4+KHRoaXMsIHsgcHJvdmlkZXIgfSk7XG4gICAgfVxuXG4gICAgY2xvbmUoKTogTGF5ZXJPbmVDb25uZWN0aW9uUGx1Z2luIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXllck9uZUNvbm5lY3Rpb25QbHVnaW4odGhpcy5wcm92aWRlcik7XG4gICAgfVxufVxuKi9cbmNvbnN0IE5ldHdvcmtzID0gbmV3IE1hcCgpO1xuLyoqXG4gKiAgQSAqKk5ldHdvcmsqKiBwcm92aWRlcyBhY2Nlc3MgdG8gYSBjaGFpbidzIHByb3BlcnRpZXMgYW5kIGFsbG93c1xuICogIGZvciBwbHVnLWlucyB0byBleHRlbmQgZnVuY3Rpb25hbGl0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIE5ldHdvcmsge1xuICAgICNuYW1lO1xuICAgICNjaGFpbklkO1xuICAgICNwbHVnaW5zO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3ICoqTmV0d29yayoqIGZvciAlJW5hbWUlJSBhbmQgJSVjaGFpbklkJSUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgY2hhaW5JZCkge1xuICAgICAgICB0aGlzLiNuYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy4jY2hhaW5JZCA9IGdldEJpZ0ludChjaGFpbklkKTtcbiAgICAgICAgdGhpcy4jcGx1Z2lucyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYSBKU09OLWNvbXBhdGlibGUgcmVwcmVzZW50YXRpb24gb2YgYSBOZXR3b3JrLlxuICAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHsgbmFtZTogdGhpcy5uYW1lLCBjaGFpbklkOiBTdHJpbmcodGhpcy5jaGFpbklkKSB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGhlIG5ldHdvcmsgY29tbW9uIG5hbWUuXG4gICAgICpcbiAgICAgKiAgVGhpcyBpcyB0aGUgY2Fub25pY2FsIG5hbWUsIGFzIG5ldHdvcmtzIG1pZ2ggaGF2ZSBtdWx0aXBsZVxuICAgICAqICBuYW1lcy5cbiAgICAgKi9cbiAgICBnZXQgbmFtZSgpIHsgcmV0dXJuIHRoaXMuI25hbWU7IH1cbiAgICBzZXQgbmFtZSh2YWx1ZSkgeyB0aGlzLiNuYW1lID0gdmFsdWU7IH1cbiAgICAvKipcbiAgICAgKiAgVGhlIG5ldHdvcmsgY2hhaW4gSUQuXG4gICAgICovXG4gICAgZ2V0IGNoYWluSWQoKSB7IHJldHVybiB0aGlzLiNjaGFpbklkOyB9XG4gICAgc2V0IGNoYWluSWQodmFsdWUpIHsgdGhpcy4jY2hhaW5JZCA9IGdldEJpZ0ludCh2YWx1ZSwgXCJjaGFpbklkXCIpOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBpZiAlJW90aGVyJSUgbWF0Y2hlcyB0aGlzIG5ldHdvcmsuIEFueSBjaGFpbiBJRFxuICAgICAqICBtdXN0IG1hdGNoLCBhbmQgaWYgbm8gY2hhaW4gSUQgaXMgcHJlc2VudCwgdGhlIG5hbWUgbXVzdCBtYXRjaC5cbiAgICAgKlxuICAgICAqICBUaGlzIG1ldGhvZCBkb2VzIG5vdCBjdXJyZW50bHkgY2hlY2sgZm9yIGFkZGl0aW9uYWwgcHJvcGVydGllcyxcbiAgICAgKiAgc3VjaCBhcyBFTlMgYWRkcmVzcyBvciBwbHVnLWluIGNvbXBhdGliaWxpdHkuXG4gICAgICovXG4gICAgbWF0Y2hlcyhvdGhlcikge1xuICAgICAgICBpZiAob3RoZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKG90aGVyKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuY2hhaW5JZCA9PT0gZ2V0QmlnSW50KG90aGVyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLm5hbWUgPT09IG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChvdGhlcikgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIChvdGhlcikgPT09IFwiYmlnaW50XCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmNoYWluSWQgPT09IGdldEJpZ0ludChvdGhlcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChvdGhlcikgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGlmIChvdGhlci5jaGFpbklkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuY2hhaW5JZCA9PT0gZ2V0QmlnSW50KG90aGVyLmNoYWluSWQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3RoZXIubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLm5hbWUgPT09IG90aGVyLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIGxpc3Qgb2YgcGx1Z2lucyBjdXJyZW50bHkgYXR0YWNoZWQgdG8gdGhpcyBOZXR3b3JrLlxuICAgICAqL1xuICAgIGdldCBwbHVnaW5zKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLiNwbHVnaW5zLnZhbHVlcygpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEF0dGFjaCBhIG5ldyAlJXBsdWdpbiUlIHRvIHRoaXMgTmV0d29yay4gVGhlIG5ldHdvcmsgbmFtZVxuICAgICAqICBtdXN0IGJlIHVuaXF1ZSwgZXhjbHVkaW5nIGFueSBmcmFnbWVudC5cbiAgICAgKi9cbiAgICBhdHRhY2hQbHVnaW4ocGx1Z2luKSB7XG4gICAgICAgIGlmICh0aGlzLiNwbHVnaW5zLmdldChwbHVnaW4ubmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IHJlcGxhY2UgZXhpc3RpbmcgcGx1Z2luOiAke3BsdWdpbi5uYW1lfSBgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNwbHVnaW5zLnNldChwbHVnaW4ubmFtZSwgcGx1Z2luLmNsb25lKCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiB0aGUgcGx1Z2luLCBpZiBhbnksIG1hdGNoaW5nICUlbmFtZSUlIGV4YWN0bHkuIFBsdWdpbnNcbiAgICAgKiAgd2l0aCBmcmFnbWVudHMgd2lsbCBub3QgYmUgcmV0dXJuZWQgdW5sZXNzICUlbmFtZSUlIGluY2x1ZGVzXG4gICAgICogIGEgZnJhZ21lbnQuXG4gICAgICovXG4gICAgZ2V0UGx1Z2luKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLiNwbHVnaW5zLmdldChuYW1lKSkgfHwgbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEdldHMgYSBsaXN0IG9mIGFsbCBwbHVnaW5zIHRoYXQgbWF0Y2ggJSVuYW1lJSUsIHdpdGggb3RyIHdpdGhvdXRcbiAgICAgKiAgYSBmcmFnbWVudC5cbiAgICAgKi9cbiAgICBnZXRQbHVnaW5zKGJhc2VuYW1lKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5wbHVnaW5zLmZpbHRlcigocCkgPT4gKHAubmFtZS5zcGxpdChcIiNcIilbMF0gPT09IGJhc2VuYW1lKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlIGEgY29weSBvZiB0aGlzIE5ldHdvcmsuXG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNsb25lID0gbmV3IE5ldHdvcmsodGhpcy5uYW1lLCB0aGlzLmNoYWluSWQpO1xuICAgICAgICB0aGlzLnBsdWdpbnMuZm9yRWFjaCgocGx1Z2luKSA9PiB7XG4gICAgICAgICAgICBjbG9uZS5hdHRhY2hQbHVnaW4ocGx1Z2luLmNsb25lKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ29tcHV0ZSB0aGUgaW50cmluc2ljIGdhcyByZXF1aXJlZCBmb3IgYSB0cmFuc2FjdGlvbi5cbiAgICAgKlxuICAgICAqICBBIEdhc0Nvc3RQbHVnaW4gY2FuIGJlIGF0dGFjaGVkIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0XG4gICAgICogIHZhbHVlcy5cbiAgICAgKi9cbiAgICBjb21wdXRlSW50cmluc2ljR2FzKHR4KSB7XG4gICAgICAgIGNvbnN0IGNvc3RzID0gdGhpcy5nZXRQbHVnaW4oXCJvcmcuZXRoZXJzLnBsdWdpbnMubmV0d29yay5HYXNDb3N0XCIpIHx8IChuZXcgR2FzQ29zdFBsdWdpbigpKTtcbiAgICAgICAgbGV0IGdhcyA9IGNvc3RzLnR4QmFzZTtcbiAgICAgICAgaWYgKHR4LnRvID09IG51bGwpIHtcbiAgICAgICAgICAgIGdhcyArPSBjb3N0cy50eENyZWF0ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHguZGF0YSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDI7IGkgPCB0eC5kYXRhLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR4LmRhdGEuc3Vic3RyaW5nKGksIGkgKyAyKSA9PT0gXCIwMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhcyArPSBjb3N0cy50eERhdGFaZXJvO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FzICs9IGNvc3RzLnR4RGF0YU5vbnplcm87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eC5hY2Nlc3NMaXN0KSB7XG4gICAgICAgICAgICBjb25zdCBhY2Nlc3NMaXN0ID0gYWNjZXNzTGlzdGlmeSh0eC5hY2Nlc3NMaXN0KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYWRkciBpbiBhY2Nlc3NMaXN0KSB7XG4gICAgICAgICAgICAgICAgZ2FzICs9IGNvc3RzLnR4QWNjZXNzTGlzdEFkZHJlc3MgKyBjb3N0cy50eEFjY2Vzc0xpc3RTdG9yYWdlS2V5ICogYWNjZXNzTGlzdFthZGRyXS5zdG9yYWdlS2V5cy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdhcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYSBuZXcgTmV0d29yayBmb3IgdGhlICUlbmV0d29yayUlIG5hbWUgb3IgY2hhaW5JZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbShuZXR3b3JrKSB7XG4gICAgICAgIGluamVjdENvbW1vbk5ldHdvcmtzKCk7XG4gICAgICAgIC8vIERlZmF1bHQgbmV0d29ya1xuICAgICAgICBpZiAobmV0d29yayA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gTmV0d29yay5mcm9tKFwibWFpbm5ldFwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYW5vbmljYWwgbmFtZSBvciBjaGFpbiBJRFxuICAgICAgICBpZiAodHlwZW9mIChuZXR3b3JrKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgbmV0d29yayA9IEJpZ0ludChuZXR3b3JrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChuZXR3b3JrKSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgKG5ldHdvcmspID09PSBcImJpZ2ludFwiKSB7XG4gICAgICAgICAgICBjb25zdCBuZXR3b3JrRnVuYyA9IE5ldHdvcmtzLmdldChuZXR3b3JrKTtcbiAgICAgICAgICAgIGlmIChuZXR3b3JrRnVuYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXR3b3JrRnVuYygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiAobmV0d29yaykgPT09IFwiYmlnaW50XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE5ldHdvcmsoXCJ1bmtub3duXCIsIG5ldHdvcmspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5rbm93biBuZXR3b3JrXCIsIFwibmV0d29ya1wiLCBuZXR3b3JrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDbG9uYWJsZSB3aXRoIG5ldHdvcmstbGlrZSBhYmlsaXRpZXNcbiAgICAgICAgaWYgKHR5cGVvZiAobmV0d29yay5jbG9uZSkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY29uc3QgY2xvbmUgPSBuZXR3b3JrLmNsb25lKCk7XG4gICAgICAgICAgICAvL2lmICh0eXBlb2YobmV0d29yay5uYW1lKSAhPT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YobmV0d29yay5jaGFpbklkKSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgLy99XG4gICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTmV0d29ya2lzaFxuICAgICAgICBpZiAodHlwZW9mIChuZXR3b3JrKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQodHlwZW9mIChuZXR3b3JrLm5hbWUpID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiAobmV0d29yay5jaGFpbklkKSA9PT0gXCJudW1iZXJcIiwgXCJpbnZhbGlkIG5ldHdvcmsgb2JqZWN0IG5hbWUgb3IgY2hhaW5JZFwiLCBcIm5ldHdvcmtcIiwgbmV0d29yayk7XG4gICAgICAgICAgICBjb25zdCBjdXN0b20gPSBuZXcgTmV0d29yaygobmV0d29yay5uYW1lKSwgKG5ldHdvcmsuY2hhaW5JZCkpO1xuICAgICAgICAgICAgaWYgKG5ldHdvcmsuZW5zQWRkcmVzcyB8fCBuZXR3b3JrLmVuc05ldHdvcmsgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGN1c3RvbS5hdHRhY2hQbHVnaW4obmV3IEVuc1BsdWdpbihuZXR3b3JrLmVuc0FkZHJlc3MsIG5ldHdvcmsuZW5zTmV0d29yaykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9pZiAoKDxhbnk+bmV0d29yaykubGF5ZXJPbmVDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAvLyAgICBjdXN0b20uYXR0YWNoUGx1Z2luKG5ldyBMYXllck9uZUNvbm5lY3Rpb25QbHVnaW4oKDxhbnk+bmV0d29yaykubGF5ZXJPbmVDb25uZWN0aW9uKSk7XG4gICAgICAgICAgICAvL31cbiAgICAgICAgICAgIHJldHVybiBjdXN0b207XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwiaW52YWxpZCBuZXR3b3JrXCIsIFwibmV0d29ya1wiLCBuZXR3b3JrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlZ2lzdGVyICUlbmFtZU9yQ2hhaW5JZCUlIHdpdGggYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zXG4gICAgICogIGFuIGluc3RhbmNlIG9mIGEgTmV0d29yayByZXByZXNlbnRpbmcgdGhhdCBjaGFpbi5cbiAgICAgKi9cbiAgICBzdGF0aWMgcmVnaXN0ZXIobmFtZU9yQ2hhaW5JZCwgbmV0d29ya0Z1bmMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAobmFtZU9yQ2hhaW5JZCkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIG5hbWVPckNoYWluSWQgPSBCaWdJbnQobmFtZU9yQ2hhaW5JZCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBOZXR3b3Jrcy5nZXQobmFtZU9yQ2hhaW5JZCk7XG4gICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIGBjb25mbGljdGluZyBuZXR3b3JrIGZvciAke0pTT04uc3RyaW5naWZ5KGV4aXN0aW5nLm5hbWUpfWAsIFwibmFtZU9yQ2hhaW5JZFwiLCBuYW1lT3JDaGFpbklkKTtcbiAgICAgICAgfVxuICAgICAgICBOZXR3b3Jrcy5zZXQobmFtZU9yQ2hhaW5JZCwgbmV0d29ya0Z1bmMpO1xuICAgIH1cbn1cbi8vIFdlIGRvbid0IHdhbnQgdG8gYnJpbmcgaW4gZm9ybWF0VW5pdHMgYmVjYXVzZSBpdCBpcyBiYWNrZWQgYnlcbi8vIEZpeGVkTnVtYmVyIGFuZCB3ZSB3YW50IHRvIGtlZXAgTmV0d29ya3MgdGlueS4gVGhlIHZhbHVlc1xuLy8gaW5jbHVkZWQgYnkgdGhlIEdhcyBTdGF0aW9ucyBhcmUgYWxzbyBJRUVFIDc1NCB3aXRoIGxvdHMgb2Zcbi8vIHJvdW5kaW5nIGlzc3VlcyBhbmQgZXhjZWVkIHRoZSBzdHJpY3QgY2hlY2tzIGZvcm1hdFVuaXRzIGhhcy5cbmZ1bmN0aW9uIHBhcnNlVW5pdHMoX3ZhbHVlLCBkZWNpbWFscykge1xuICAgIGNvbnN0IHZhbHVlID0gU3RyaW5nKF92YWx1ZSk7XG4gICAgaWYgKCF2YWx1ZS5tYXRjaCgvXlswLTkuXSskLykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGd3ZWkgdmFsdWU6ICR7X3ZhbHVlfWApO1xuICAgIH1cbiAgICAvLyBCcmVhayBpbnRvIFsgd2hvbGUsIGZyYWN0aW9uIF1cbiAgICBjb25zdCBjb21wcyA9IHZhbHVlLnNwbGl0KFwiLlwiKTtcbiAgICBpZiAoY29tcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNvbXBzLnB1c2goXCJcIik7XG4gICAgfVxuICAgIC8vIE1vcmUgdGhhbiAxIGRlY2ltYWwgcG9pbnQgb3IgdG9vIG1hbnkgZnJhY3Rpb25hbCBwb3NpdGlvbnNcbiAgICBpZiAoY29tcHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBnd2VpIHZhbHVlOiAke192YWx1ZX1gKTtcbiAgICB9XG4gICAgLy8gUGFkIHRoZSBmcmFjdGlvbiB0byA5IGRlY2ltYWxwbGFjZXNcbiAgICB3aGlsZSAoY29tcHNbMV0ubGVuZ3RoIDwgZGVjaW1hbHMpIHtcbiAgICAgICAgY29tcHNbMV0gKz0gXCIwXCI7XG4gICAgfVxuICAgIC8vIFRvbyBtYW55IGRlY2ltYWxzIGFuZCBzb21lIG5vbi16ZXJvIGVuZGluZywgdGFrZSB0aGUgY2VpbGluZ1xuICAgIGlmIChjb21wc1sxXS5sZW5ndGggPiA5KSB7XG4gICAgICAgIGxldCBmcmFjID0gQmlnSW50KGNvbXBzWzFdLnN1YnN0cmluZygwLCA5KSk7XG4gICAgICAgIGlmICghY29tcHNbMV0uc3Vic3RyaW5nKDkpLm1hdGNoKC9eMCskLykpIHtcbiAgICAgICAgICAgIGZyYWMrKztcbiAgICAgICAgfVxuICAgICAgICBjb21wc1sxXSA9IGZyYWMudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIEJpZ0ludChjb21wc1swXSArIGNvbXBzWzFdKTtcbn1cbi8vIFVzZWQgYnkgUG9seWdvbiB0byB1c2UgYSBnYXMgc3RhdGlvbiBmb3IgZmVlIGRhdGFcbmZ1bmN0aW9uIGdldEdhc1N0YXRpb25QbHVnaW4odXJsKSB7XG4gICAgcmV0dXJuIG5ldyBGZXRjaFVybEZlZURhdGFOZXR3b3JrUGx1Z2luKHVybCwgYXN5bmMgKGZldGNoRmVlRGF0YSwgcHJvdmlkZXIsIHJlcXVlc3QpID0+IHtcbiAgICAgICAgLy8gUHJldmVudCBDbG91ZGZsYXJlIGZyb20gYmxvY2tpbmcgb3VyIHJlcXVlc3QgaW4gbm9kZS5qc1xuICAgICAgICByZXF1ZXN0LnNldEhlYWRlcihcIlVzZXItQWdlbnRcIiwgXCJldGhlcnNcIik7XG4gICAgICAgIGxldCByZXNwb25zZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IFtfcmVzcG9uc2UsIF9mZWVEYXRhXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnNlbmQoKSwgZmV0Y2hGZWVEYXRhKClcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBfcmVzcG9uc2U7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gcmVzcG9uc2UuYm9keUpzb24uc3RhbmRhcmQ7XG4gICAgICAgICAgICBjb25zdCBmZWVEYXRhID0ge1xuICAgICAgICAgICAgICAgIGdhc1ByaWNlOiBfZmVlRGF0YS5nYXNQcmljZSxcbiAgICAgICAgICAgICAgICBtYXhGZWVQZXJHYXM6IHBhcnNlVW5pdHMocGF5bG9hZC5tYXhGZWUsIDkpLFxuICAgICAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBwYXJzZVVuaXRzKHBheWxvYWQubWF4UHJpb3JpdHlGZWUsIDkpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBmZWVEYXRhO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBgZXJyb3IgZW5jb3VudGVyZWQgd2l0aCBwb2x5Z29uIGdhcyBzdGF0aW9uICgke0pTT04uc3RyaW5naWZ5KHJlcXVlc3QudXJsKX0pYCwgXCJTRVJWRVJfRVJST1JcIiwgeyByZXF1ZXN0LCByZXNwb25zZSwgZXJyb3IgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIFNlZTogaHR0cHM6Ly9jaGFpbmxpc3Qub3JnXG5sZXQgaW5qZWN0ZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGluamVjdENvbW1vbk5ldHdvcmtzKCkge1xuICAgIGlmIChpbmplY3RlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGluamVjdGVkID0gdHJ1ZTtcbiAgICAvLy8gUmVnaXN0ZXIgcG9wdWxhciBFdGhlcmV1bSBuZXR3b3Jrc1xuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyRXRoKG5hbWUsIGNoYWluSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ldHdvcmsgPSBuZXcgTmV0d29yayhuYW1lLCBjaGFpbklkKTtcbiAgICAgICAgICAgIC8vIFdlIHVzZSAwIHRvIGRpc2FibGUgRU5TXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5lbnNOZXR3b3JrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuZXR3b3JrLmF0dGFjaFBsdWdpbihuZXcgRW5zUGx1Z2luKG51bGwsIG9wdGlvbnMuZW5zTmV0d29yaykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV0d29yay5hdHRhY2hQbHVnaW4obmV3IEdhc0Nvc3RQbHVnaW4oKSk7XG4gICAgICAgICAgICAob3B0aW9ucy5wbHVnaW5zIHx8IFtdKS5mb3JFYWNoKChwbHVnaW4pID0+IHtcbiAgICAgICAgICAgICAgICBuZXR3b3JrLmF0dGFjaFBsdWdpbihwbHVnaW4pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbmV0d29yaztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUmVnaXN0ZXIgdGhlIG5ldHdvcmsgYnkgbmFtZSBhbmQgY2hhaW4gSURcbiAgICAgICAgTmV0d29yay5yZWdpc3RlcihuYW1lLCBmdW5jKTtcbiAgICAgICAgTmV0d29yay5yZWdpc3RlcihjaGFpbklkLCBmdW5jKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuYWx0TmFtZXMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYWx0TmFtZXMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIE5ldHdvcmsucmVnaXN0ZXIobmFtZSwgZnVuYyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWdpc3RlckV0aChcIm1haW5uZXRcIiwgMSwgeyBlbnNOZXR3b3JrOiAxLCBhbHROYW1lczogW1wiaG9tZXN0ZWFkXCJdIH0pO1xuICAgIHJlZ2lzdGVyRXRoKFwicm9wc3RlblwiLCAzLCB7IGVuc05ldHdvcms6IDMgfSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJyaW5rZWJ5XCIsIDQsIHsgZW5zTmV0d29yazogNCB9KTtcbiAgICByZWdpc3RlckV0aChcImdvZXJsaVwiLCA1LCB7IGVuc05ldHdvcms6IDUgfSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJrb3ZhblwiLCA0MiwgeyBlbnNOZXR3b3JrOiA0MiB9KTtcbiAgICByZWdpc3RlckV0aChcInNlcG9saWFcIiwgMTExNTUxMTEsIHsgZW5zTmV0d29yazogMTExNTUxMTEgfSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJob2xlc2t5XCIsIDE3MDAwLCB7IGVuc05ldHdvcms6IDE3MDAwIH0pO1xuICAgIHJlZ2lzdGVyRXRoKFwiY2xhc3NpY1wiLCA2MSwge30pO1xuICAgIHJlZ2lzdGVyRXRoKFwiY2xhc3NpY0tvdHRpXCIsIDYsIHt9KTtcbiAgICByZWdpc3RlckV0aChcImFyYml0cnVtXCIsIDQyMTYxLCB7XG4gICAgICAgIGVuc05ldHdvcms6IDEsXG4gICAgfSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJhcmJpdHJ1bS1nb2VybGlcIiwgNDIxNjEzLCB7fSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJhcmJpdHJ1bS1zZXBvbGlhXCIsIDQyMTYxNCwge30pO1xuICAgIHJlZ2lzdGVyRXRoKFwiYmFzZVwiLCA4NDUzLCB7IGVuc05ldHdvcms6IDEgfSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJiYXNlLWdvZXJsaVwiLCA4NDUzMSwge30pO1xuICAgIHJlZ2lzdGVyRXRoKFwiYmFzZS1zZXBvbGlhXCIsIDg0NTMyLCB7fSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJibmJcIiwgNTYsIHsgZW5zTmV0d29yazogMSB9KTtcbiAgICByZWdpc3RlckV0aChcImJuYnRcIiwgOTcsIHt9KTtcbiAgICByZWdpc3RlckV0aChcImxpbmVhXCIsIDU5MTQ0LCB7IGVuc05ldHdvcms6IDEgfSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJsaW5lYS1nb2VybGlcIiwgNTkxNDAsIHt9KTtcbiAgICByZWdpc3RlckV0aChcIm1hdGljXCIsIDEzNywge1xuICAgICAgICBlbnNOZXR3b3JrOiAxLFxuICAgICAgICBwbHVnaW5zOiBbXG4gICAgICAgICAgICBnZXRHYXNTdGF0aW9uUGx1Z2luKFwiaHR0cHM6L1xcL2dhc3N0YXRpb24ucG9seWdvbi50ZWNobm9sb2d5L3YyXCIpXG4gICAgICAgIF1cbiAgICB9KTtcbiAgICByZWdpc3RlckV0aChcIm1hdGljLW11bWJhaVwiLCA4MDAwMSwge1xuICAgICAgICBhbHROYW1lczogW1wibWF0aWNNdW1iYWlcIiwgXCJtYXRpY211bVwiXSxcbiAgICAgICAgcGx1Z2luczogW1xuICAgICAgICAgICAgZ2V0R2FzU3RhdGlvblBsdWdpbihcImh0dHBzOi9cXC9nYXNzdGF0aW9uLXRlc3RuZXQucG9seWdvbi50ZWNobm9sb2d5L3YyXCIpXG4gICAgICAgIF1cbiAgICB9KTtcbiAgICByZWdpc3RlckV0aChcIm9wdGltaXNtXCIsIDEwLCB7XG4gICAgICAgIGVuc05ldHdvcms6IDEsXG4gICAgICAgIHBsdWdpbnM6IFtdXG4gICAgfSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJvcHRpbWlzbS1nb2VybGlcIiwgNDIwLCB7fSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJvcHRpbWlzbS1zZXBvbGlhXCIsIDExMTU1NDIwLCB7fSk7XG4gICAgcmVnaXN0ZXJFdGgoXCJ4ZGFpXCIsIDEwMCwgeyBlbnNOZXR3b3JrOiAxIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0d29yay5qcy5tYXAiLCJpbXBvcnQgeyBhc3NlcnQsIGlzSGV4U3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5mdW5jdGlvbiBjb3B5KG9iaikge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufVxuLyoqXG4gKiAgUmV0dXJuIHRoZSBwb2xsaW5nIHN1YnNjcmliZXIgZm9yIGNvbW1vbiBldmVudHMuXG4gKlxuICogIEBfZG9jbG9jOiBhcGkvcHJvdmlkZXJzL2Fic3RyYWN0LXByb3ZpZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQb2xsaW5nU3Vic2NyaWJlcihwcm92aWRlciwgZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQgPT09IFwiYmxvY2tcIikge1xuICAgICAgICByZXR1cm4gbmV3IFBvbGxpbmdCbG9ja1N1YnNjcmliZXIocHJvdmlkZXIpO1xuICAgIH1cbiAgICBpZiAoaXNIZXhTdHJpbmcoZXZlbnQsIDMyKSkge1xuICAgICAgICByZXR1cm4gbmV3IFBvbGxpbmdUcmFuc2FjdGlvblN1YnNjcmliZXIocHJvdmlkZXIsIGV2ZW50KTtcbiAgICB9XG4gICAgYXNzZXJ0KGZhbHNlLCBcInVuc3VwcG9ydGVkIHBvbGxpbmcgZXZlbnRcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICBvcGVyYXRpb246IFwiZ2V0UG9sbGluZ1N1YnNjcmliZXJcIiwgaW5mbzogeyBldmVudCB9XG4gICAgfSk7XG59XG4vLyBAVE9ETzogcmVmYWN0b3IgdGhpc1xuLyoqXG4gKiAgQSAqKlBvbGxpbmdCbG9ja1N1YnNjcmliZXIqKiBwb2xscyBhdCBhIHJlZ3VsYXIgaW50ZXJ2YWwgZm9yIGEgY2hhbmdlXG4gKiAgaW4gdGhlIGJsb2NrIG51bWJlci5cbiAqXG4gKiAgQF9kb2Nsb2M6IGFwaS9wcm92aWRlcnMvYWJzdHJhY3QtcHJvdmlkZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFBvbGxpbmdCbG9ja1N1YnNjcmliZXIge1xuICAgICNwcm92aWRlcjtcbiAgICAjcG9sbGVyO1xuICAgICNpbnRlcnZhbDtcbiAgICAvLyBUaGUgbW9zdCByZWNlbnQgYmxvY2sgd2UgaGF2ZSBzY2FubmVkIGZvciBldmVudHMuIFRoZSB2YWx1ZSAtMlxuICAgIC8vIGluZGljYXRlcyB3ZSBzdGlsbCBuZWVkIHRvIGZldGNoIGFuIGluaXRpYWwgYmxvY2sgbnVtYmVyXG4gICAgI2Jsb2NrTnVtYmVyO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGUgYSBuZXcgKipQb2xsaW5nQmxvY2tTdWJzY3JpYmVyKiogYXR0YWNoZWQgdG8gJSVwcm92aWRlciUlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyKSB7XG4gICAgICAgIHRoaXMuI3Byb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgICAgIHRoaXMuI3BvbGxlciA9IG51bGw7XG4gICAgICAgIHRoaXMuI2ludGVydmFsID0gNDAwMDtcbiAgICAgICAgdGhpcy4jYmxvY2tOdW1iZXIgPSAtMjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRoZSBwb2xsaW5nIGludGVydmFsLlxuICAgICAqL1xuICAgIGdldCBwb2xsaW5nSW50ZXJ2YWwoKSB7IHJldHVybiB0aGlzLiNpbnRlcnZhbDsgfVxuICAgIHNldCBwb2xsaW5nSW50ZXJ2YWwodmFsdWUpIHsgdGhpcy4jaW50ZXJ2YWwgPSB2YWx1ZTsgfVxuICAgIGFzeW5jICNwb2xsKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYmxvY2tOdW1iZXIgPSBhd2FpdCB0aGlzLiNwcm92aWRlci5nZXRCbG9ja051bWJlcigpO1xuICAgICAgICAgICAgLy8gQm9vdHN0cmFwIHBvbGwgdG8gc2V0dXAgb3VyIGluaXRpYWwgYmxvY2sgbnVtYmVyXG4gICAgICAgICAgICBpZiAodGhpcy4jYmxvY2tOdW1iZXIgPT09IC0yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jYmxvY2tOdW1iZXIgPSBibG9ja051bWJlcjtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBAVE9ETzogUHV0IGEgY2FwIG9uIHRoZSBtYXhpbXVtIG51bWJlciBvZiBldmVudHMgcGVyIGxvb3A/XG4gICAgICAgICAgICBpZiAoYmxvY2tOdW1iZXIgIT09IHRoaXMuI2Jsb2NrTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYiA9IHRoaXMuI2Jsb2NrTnVtYmVyICsgMTsgYiA8PSBibG9ja051bWJlcjsgYisrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYmVlbiBzdG9wcGVkXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiNwb2xsZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuI3Byb3ZpZGVyLmVtaXQoXCJibG9ja1wiLCBiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy4jYmxvY2tOdW1iZXIgPSBibG9ja051bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEBUT0RPOiBNaW5vciBidW1wLCBhZGQgYW4gXCJlcnJvclwiIGV2ZW50IHRvIGxldCBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgLy8gICAgICAgIGtub3cgdGhpbmdzIHdlbnQgYXdyeS5cbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGhhdmUgYmVlbiBzdG9wcGVkXG4gICAgICAgIGlmICh0aGlzLiNwb2xsZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3BvbGxlciA9IHRoaXMuI3Byb3ZpZGVyLl9zZXRUaW1lb3V0KHRoaXMuI3BvbGwuYmluZCh0aGlzKSwgdGhpcy4jaW50ZXJ2YWwpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3BvbGxlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3BvbGxlciA9IHRoaXMuI3Byb3ZpZGVyLl9zZXRUaW1lb3V0KHRoaXMuI3BvbGwuYmluZCh0aGlzKSwgdGhpcy4jaW50ZXJ2YWwpO1xuICAgICAgICB0aGlzLiNwb2xsKCk7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICghdGhpcy4jcG9sbGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jcHJvdmlkZXIuX2NsZWFyVGltZW91dCh0aGlzLiNwb2xsZXIpO1xuICAgICAgICB0aGlzLiNwb2xsZXIgPSBudWxsO1xuICAgIH1cbiAgICBwYXVzZShkcm9wV2hpbGVQYXVzZWQpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIGlmIChkcm9wV2hpbGVQYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuI2Jsb2NrTnVtYmVyID0gLTI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzdW1lKCkge1xuICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxufVxuLyoqXG4gKiAgQW4gKipPbkJsb2NrU3Vic2NyaWJlcioqIGNhbiBiZSBzdWItY2xhc3NlZCwgd2l0aCBhIFtbX3BvbGxdXVxuICogIGltcGxtZW50YXRpb24gd2hpY2ggd2lsbCBiZSBjYWxsZWQgb24gZXZlcnkgbmV3IGJsb2NrLlxuICpcbiAqICBAX2RvY2xvYzogYXBpL3Byb3ZpZGVycy9hYnN0cmFjdC1wcm92aWRlclxuICovXG5leHBvcnQgY2xhc3MgT25CbG9ja1N1YnNjcmliZXIge1xuICAgICNwcm92aWRlcjtcbiAgICAjcG9sbDtcbiAgICAjcnVubmluZztcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlIGEgbmV3ICoqT25CbG9ja1N1YnNjcmliZXIqKiBhdHRhY2hlZCB0byAlJXByb3ZpZGVyJSUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvdmlkZXIpIHtcbiAgICAgICAgdGhpcy4jcHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICAgICAgdGhpcy4jcnVubmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLiNwb2xsID0gKGJsb2NrTnVtYmVyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wb2xsKGJsb2NrTnVtYmVyLCB0aGlzLiNwcm92aWRlcik7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDYWxsZWQgb24gZXZlcnkgbmV3IGJsb2NrLlxuICAgICAqL1xuICAgIGFzeW5jIF9wb2xsKGJsb2NrTnVtYmVyLCBwcm92aWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzdWItY2xhc3NlcyBtdXN0IG92ZXJyaWRlIHRoaXNcIik7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICBpZiAodGhpcy4jcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3J1bm5pbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLiNwb2xsKC0yKTtcbiAgICAgICAgdGhpcy4jcHJvdmlkZXIub24oXCJibG9ja1wiLCB0aGlzLiNwb2xsKTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLiNydW5uaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jcnVubmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLiNwcm92aWRlci5vZmYoXCJibG9ja1wiLCB0aGlzLiNwb2xsKTtcbiAgICB9XG4gICAgcGF1c2UoZHJvcFdoaWxlUGF1c2VkKSB7IHRoaXMuc3RvcCgpOyB9XG4gICAgcmVzdW1lKCkgeyB0aGlzLnN0YXJ0KCk7IH1cbn1cbmV4cG9ydCBjbGFzcyBQb2xsaW5nQmxvY2tUYWdTdWJzY3JpYmVyIGV4dGVuZHMgT25CbG9ja1N1YnNjcmliZXIge1xuICAgICN0YWc7XG4gICAgI2xhc3RCbG9jaztcbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlciwgdGFnKSB7XG4gICAgICAgIHN1cGVyKHByb3ZpZGVyKTtcbiAgICAgICAgdGhpcy4jdGFnID0gdGFnO1xuICAgICAgICB0aGlzLiNsYXN0QmxvY2sgPSAtMjtcbiAgICB9XG4gICAgcGF1c2UoZHJvcFdoaWxlUGF1c2VkKSB7XG4gICAgICAgIGlmIChkcm9wV2hpbGVQYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuI2xhc3RCbG9jayA9IC0yO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLnBhdXNlKGRyb3BXaGlsZVBhdXNlZCk7XG4gICAgfVxuICAgIGFzeW5jIF9wb2xsKGJsb2NrTnVtYmVyLCBwcm92aWRlcikge1xuICAgICAgICBjb25zdCBibG9jayA9IGF3YWl0IHByb3ZpZGVyLmdldEJsb2NrKHRoaXMuI3RhZyk7XG4gICAgICAgIGlmIChibG9jayA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuI2xhc3RCbG9jayA9PT0gLTIpIHtcbiAgICAgICAgICAgIHRoaXMuI2xhc3RCbG9jayA9IGJsb2NrLm51bWJlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChibG9jay5udW1iZXIgPiB0aGlzLiNsYXN0QmxvY2spIHtcbiAgICAgICAgICAgIHByb3ZpZGVyLmVtaXQodGhpcy4jdGFnLCBibG9jay5udW1iZXIpO1xuICAgICAgICAgICAgdGhpcy4jbGFzdEJsb2NrID0gYmxvY2subnVtYmVyO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiAgQF9pZ25vcmU6XG4gKlxuICogIEBfZG9jbG9jOiBhcGkvcHJvdmlkZXJzL2Fic3RyYWN0LXByb3ZpZGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBQb2xsaW5nT3JwaGFuU3Vic2NyaWJlciBleHRlbmRzIE9uQmxvY2tTdWJzY3JpYmVyIHtcbiAgICAjZmlsdGVyO1xuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyLCBmaWx0ZXIpIHtcbiAgICAgICAgc3VwZXIocHJvdmlkZXIpO1xuICAgICAgICB0aGlzLiNmaWx0ZXIgPSBjb3B5KGZpbHRlcik7XG4gICAgfVxuICAgIGFzeW5jIF9wb2xsKGJsb2NrTnVtYmVyLCBwcm92aWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJAVE9ET1wiKTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy4jZmlsdGVyKTtcbiAgICB9XG59XG4vKipcbiAqICBBICoqUG9sbGluZ1RyYW5zYWN0aW9uU3Vic2NyaWJlcioqIHdpbGwgcG9sbCBmb3IgYSBnaXZlbiB0cmFuc2FjdGlvblxuICogIGhhc2ggZm9yIGl0cyByZWNlaXB0LlxuICpcbiAqICBAX2RvY2xvYzogYXBpL3Byb3ZpZGVycy9hYnN0cmFjdC1wcm92aWRlclxuICovXG5leHBvcnQgY2xhc3MgUG9sbGluZ1RyYW5zYWN0aW9uU3Vic2NyaWJlciBleHRlbmRzIE9uQmxvY2tTdWJzY3JpYmVyIHtcbiAgICAjaGFzaDtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlIGEgbmV3ICoqUG9sbGluZ1RyYW5zYWN0aW9uU3Vic2NyaWJlcioqIGF0dGFjaGVkIHRvXG4gICAgICogICUlcHJvdmlkZXIlJSwgbGlzdGVuaW5nIGZvciAlJWhhc2glJS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlciwgaGFzaCkge1xuICAgICAgICBzdXBlcihwcm92aWRlcik7XG4gICAgICAgIHRoaXMuI2hhc2ggPSBoYXNoO1xuICAgIH1cbiAgICBhc3luYyBfcG9sbChibG9ja051bWJlciwgcHJvdmlkZXIpIHtcbiAgICAgICAgY29uc3QgdHggPSBhd2FpdCBwcm92aWRlci5nZXRUcmFuc2FjdGlvblJlY2VpcHQodGhpcy4jaGFzaCk7XG4gICAgICAgIGlmICh0eCkge1xuICAgICAgICAgICAgcHJvdmlkZXIuZW1pdCh0aGlzLiNoYXNoLCB0eCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqICBBICoqUG9sbGluZ0V2ZW50U3Vic2NyaWJlcioqIHdpbGwgcG9sbCBmb3IgYSBnaXZlbiBmaWx0ZXIgZm9yIGl0cyBsb2dzLlxuICpcbiAqICBAX2RvY2xvYzogYXBpL3Byb3ZpZGVycy9hYnN0cmFjdC1wcm92aWRlclxuICovXG5leHBvcnQgY2xhc3MgUG9sbGluZ0V2ZW50U3Vic2NyaWJlciB7XG4gICAgI3Byb3ZpZGVyO1xuICAgICNmaWx0ZXI7XG4gICAgI3BvbGxlcjtcbiAgICAjcnVubmluZztcbiAgICAvLyBUaGUgbW9zdCByZWNlbnQgYmxvY2sgd2UgaGF2ZSBzY2FubmVkIGZvciBldmVudHMuIFRoZSB2YWx1ZSAtMlxuICAgIC8vIGluZGljYXRlcyB3ZSBzdGlsbCBuZWVkIHRvIGZldGNoIGFuIGluaXRpYWwgYmxvY2sgbnVtYmVyXG4gICAgI2Jsb2NrTnVtYmVyO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGUgYSBuZXcgKipQb2xsaW5nVHJhbnNhY3Rpb25TdWJzY3JpYmVyKiogYXR0YWNoZWQgdG9cbiAgICAgKiAgJSVwcm92aWRlciUlLCBsaXN0ZW5pbmcgZm9yICUlZmlsdGVyJSUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvdmlkZXIsIGZpbHRlcikge1xuICAgICAgICB0aGlzLiNwcm92aWRlciA9IHByb3ZpZGVyO1xuICAgICAgICB0aGlzLiNmaWx0ZXIgPSBjb3B5KGZpbHRlcik7XG4gICAgICAgIHRoaXMuI3BvbGxlciA9IHRoaXMuI3BvbGwuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy4jcnVubmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLiNibG9ja051bWJlciA9IC0yO1xuICAgIH1cbiAgICBhc3luYyAjcG9sbChibG9ja051bWJlcikge1xuICAgICAgICAvLyBUaGUgaW5pdGlhbCBibG9jayBoYXNuJ3QgYmVlbiBkZXRlcm1pbmVkIHlldFxuICAgICAgICBpZiAodGhpcy4jYmxvY2tOdW1iZXIgPT09IC0yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlsdGVyID0gY29weSh0aGlzLiNmaWx0ZXIpO1xuICAgICAgICBmaWx0ZXIuZnJvbUJsb2NrID0gdGhpcy4jYmxvY2tOdW1iZXIgKyAxO1xuICAgICAgICBmaWx0ZXIudG9CbG9jayA9IGJsb2NrTnVtYmVyO1xuICAgICAgICBjb25zdCBsb2dzID0gYXdhaXQgdGhpcy4jcHJvdmlkZXIuZ2V0TG9ncyhmaWx0ZXIpO1xuICAgICAgICAvLyBObyBsb2dzIGNvdWxkIGp1c3QgbWVhbiB0aGUgbm9kZSBoYXMgbm90IGluZGV4ZWQgdGhlbSB5ZXQsXG4gICAgICAgIC8vIHNvIHdlIGtlZXAgYSBzbGlkaW5nIHdpbmRvdyBvZiA2MCBibG9ja3MgdG8ga2VlcCBzY2FubmluZ1xuICAgICAgICBpZiAobG9ncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLiNibG9ja051bWJlciA8IGJsb2NrTnVtYmVyIC0gNjApIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNibG9ja051bWJlciA9IGJsb2NrTnVtYmVyIC0gNjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBsb2cgb2YgbG9ncykge1xuICAgICAgICAgICAgdGhpcy4jcHJvdmlkZXIuZW1pdCh0aGlzLiNmaWx0ZXIsIGxvZyk7XG4gICAgICAgICAgICAvLyBPbmx5IGFkdmFuY2UgdGhlIGJsb2NrIG51bWJlciB3aGVuIGxvZ3Mgd2VyZSBmb3VuZCB0b1xuICAgICAgICAgICAgLy8gYWNjb3VudCBmb3IgbmV0d29ya3MgKGxpa2UgQk5CIGFuZCBQb2x5Z29uKSB3aGljaCBtYXlcbiAgICAgICAgICAgIC8vIHNhY3JpZmljZSBldmVudCBjb25zaXN0ZW5jeSBmb3IgYmxvY2sgZXZlbnQgc3BlZWRcbiAgICAgICAgICAgIHRoaXMuI2Jsb2NrTnVtYmVyID0gbG9nLmJsb2NrTnVtYmVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICBpZiAodGhpcy4jcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3J1bm5pbmcgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy4jYmxvY2tOdW1iZXIgPT09IC0yKSB7XG4gICAgICAgICAgICB0aGlzLiNwcm92aWRlci5nZXRCbG9ja051bWJlcigpLnRoZW4oKGJsb2NrTnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4jYmxvY2tOdW1iZXIgPSBibG9ja051bWJlcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3Byb3ZpZGVyLm9uKFwiYmxvY2tcIiwgdGhpcy4jcG9sbGVyKTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLiNydW5uaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jcnVubmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLiNwcm92aWRlci5vZmYoXCJibG9ja1wiLCB0aGlzLiNwb2xsZXIpO1xuICAgIH1cbiAgICBwYXVzZShkcm9wV2hpbGVQYXVzZWQpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIGlmIChkcm9wV2hpbGVQYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuI2Jsb2NrTnVtYmVyID0gLTI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzdW1lKCkge1xuICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlci1wb2xsaW5nLmpzLm1hcCIsIi8qKlxuICogIFRoZSBhdmFpbGFibGUgcHJvdmlkZXJzIHNob3VsZCBzdWZmaWNlIGZvciBtb3N0IGRldmVsb3BlcnMgcHVycG9zZXMsXG4gKiAgYnV0IHRoZSBbW0Fic3RyYWN0UHJvdmlkZXJdXSBjbGFzcyBoYXMgbWFueSBmZWF0dXJlcyB3aGljaCBlbmFibGVcbiAqICBzdWItY2xhc3NpbmcgaXQgZm9yIHNwZWNpZmljIHB1cnBvc2VzLlxuICpcbiAqICBAX3NlY3Rpb246IGFwaS9wcm92aWRlcnMvYWJzdHJhY3QtcHJvdmlkZXI6IFN1YmNsYXNzaW5nIFByb3ZpZGVyICBbYWJzdHJhY3QtcHJvdmlkZXJdXG4gKi9cbi8vIEBUT0RPXG4vLyBFdmVudCBjb2FsZXNjZW5jZVxuLy8gICBXaGVuIHdlIHJlZ2lzdGVyIGFuIGV2ZW50IHdpdGggYW4gYXN5bmMgdmFsdWUgKGUuZy4gYWRkcmVzcyBpcyBhIFNpZ25lclxuLy8gICBvciBFTlMgbmFtZSksIHdlIG5lZWQgdG8gYWRkIGl0IGltbWVpZGF0ZWx5IGZvciB0aGUgRXZlbnQgQVBJLCBidXQgYWxzb1xuLy8gICBuZWVkIHRpbWUgdG8gcmVzb2x2ZSB0aGUgYWRkcmVzcy4gVXBvbiByZXNvbHZpbmcgdGhlIGFkZHJlc3MsIHdlIG5lZWQgdG9cbi8vICAgbWlncmF0ZSB0aGUgbGlzdGVuZXIgdG8gdGhlIHN0YXRpYyBldmVudC4gV2UgYWxzbyBuZWVkIHRvIG1haW50YWluIGEgbWFwXG4vLyAgIG9mIFNpZ25lci9FTlMgbmFtZSB0byBhZGRyZXNzIHNvIHdlIGNhbiBzeW5jIHJlc3BvbmQgdG8gbGlzdGVuZXJDb3VudC5cbmltcG9ydCB7IGdldEFkZHJlc3MsIHJlc29sdmVBZGRyZXNzIH0gZnJvbSBcIi4uL2FkZHJlc3MvaW5kZXguanNcIjtcbmltcG9ydCB7IFplcm9BZGRyZXNzIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQ29udHJhY3QgfSBmcm9tIFwiLi4vY29udHJhY3QvaW5kZXguanNcIjtcbmltcG9ydCB7IG5hbWVoYXNoIH0gZnJvbSBcIi4uL2hhc2gvaW5kZXguanNcIjtcbmltcG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSBcIi4uL3RyYW5zYWN0aW9uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBjb25jYXQsIGRhdGFMZW5ndGgsIGRhdGFTbGljZSwgaGV4bGlmeSwgaXNIZXhTdHJpbmcsIGdldEJpZ0ludCwgZ2V0Qnl0ZXMsIGdldE51bWJlciwgaXNDYWxsRXhjZXB0aW9uLCBpc0Vycm9yLCBtYWtlRXJyb3IsIGFzc2VydCwgYXNzZXJ0QXJndW1lbnQsIEZldGNoUmVxdWVzdCwgdG9CZUFycmF5LCB0b1F1YW50aXR5LCBkZWZpbmVQcm9wZXJ0aWVzLCBFdmVudFBheWxvYWQsIHJlc29sdmVQcm9wZXJ0aWVzLCB0b1V0ZjhTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IEVuc1Jlc29sdmVyIH0gZnJvbSBcIi4vZW5zLXJlc29sdmVyLmpzXCI7XG5pbXBvcnQgeyBmb3JtYXRCbG9jaywgZm9ybWF0TG9nLCBmb3JtYXRUcmFuc2FjdGlvblJlY2VpcHQsIGZvcm1hdFRyYW5zYWN0aW9uUmVzcG9uc2UgfSBmcm9tIFwiLi9mb3JtYXQuanNcIjtcbmltcG9ydCB7IE5ldHdvcmsgfSBmcm9tIFwiLi9uZXR3b3JrLmpzXCI7XG5pbXBvcnQgeyBjb3B5UmVxdWVzdCwgQmxvY2ssIEZlZURhdGEsIExvZywgVHJhbnNhY3Rpb25SZWNlaXB0LCBUcmFuc2FjdGlvblJlc3BvbnNlIH0gZnJvbSBcIi4vcHJvdmlkZXIuanNcIjtcbmltcG9ydCB7IFBvbGxpbmdCbG9ja1N1YnNjcmliZXIsIFBvbGxpbmdCbG9ja1RhZ1N1YnNjcmliZXIsIFBvbGxpbmdFdmVudFN1YnNjcmliZXIsIFBvbGxpbmdPcnBoYW5TdWJzY3JpYmVyLCBQb2xsaW5nVHJhbnNhY3Rpb25TdWJzY3JpYmVyIH0gZnJvbSBcIi4vc3Vic2NyaWJlci1wb2xsaW5nLmpzXCI7XG4vLyBDb25zdGFudHNcbmNvbnN0IEJOXzIgPSBCaWdJbnQoMik7XG5jb25zdCBNQVhfQ0NJUF9SRURJUkVDVFMgPSAxMDtcbmZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdHlwZW9mICh2YWx1ZS50aGVuKSA9PT0gXCJmdW5jdGlvblwiKTtcbn1cbmZ1bmN0aW9uIGdldFRhZyhwcmVmaXgsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHByZWZpeCArIFwiOlwiICsgSlNPTi5zdHJpbmdpZnkodmFsdWUsIChrLCB2KSA9PiB7XG4gICAgICAgIGlmICh2ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBcIm51bGxcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mICh2KSA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgICAgICAgcmV0dXJuIGBiaWdpbnQ6JHt2LnRvU3RyaW5nKCl9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mICh2KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIHYudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0IG9iamVjdCBrZXlzXG4gICAgICAgIGlmICh0eXBlb2YgKHYpID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModik7XG4gICAgICAgICAgICBrZXlzLnNvcnQoKTtcbiAgICAgICAgICAgIHJldHVybiBrZXlzLnJlZHVjZSgoYWNjdW0sIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGFjY3VtW2tleV0gPSB2W2tleV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgICAgICAgICAgfSwge30pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2O1xuICAgIH0pO1xufVxuLyoqXG4gKiAgQW4gKipVbm1hbmFnZWRTdWJzY3JpYmVyKiogaXMgdXNlZnVsIGZvciBldmVudHMgd2hpY2ggZG8gbm90IHJlcXVpcmVcbiAqICBhbnkgYWRkaXRpb25hbCBtYW5hZ2VtZW50LCBzdWNoIGFzIGBgXCJkZWJ1Z1wiYGAgd2hpY2ggb25seSByZXF1aXJlc1xuICogIGVtaXQgaW4gc3luY2hyb25vdXMgZXZlbnQgbG9vcCB0cmlnZ2VyZWQgY2FsbHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBVbm1hbmFnZWRTdWJzY3JpYmVyIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIG5hbWUgZm9mIHRoZSBldmVudC5cbiAgICAgKi9cbiAgICBuYW1lO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGUgYSBuZXcgVW5tYW5hZ2VkU3Vic2NyaWJlciB3aXRoICUlbmFtZSUlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHsgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IG5hbWUgfSk7IH1cbiAgICBzdGFydCgpIHsgfVxuICAgIHN0b3AoKSB7IH1cbiAgICBwYXVzZShkcm9wV2hpbGVQYXVzZWQpIHsgfVxuICAgIHJlc3VtZSgpIHsgfVxufVxuZnVuY3Rpb24gY29weSh2YWx1ZSkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG59XG5mdW5jdGlvbiBjb25jaXNpZnkoaXRlbXMpIHtcbiAgICBpdGVtcyA9IEFycmF5LmZyb20oKG5ldyBTZXQoaXRlbXMpKS52YWx1ZXMoKSk7XG4gICAgaXRlbXMuc29ydCgpO1xuICAgIHJldHVybiBpdGVtcztcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFN1YnNjcmlwdGlvbihfZXZlbnQsIHByb3ZpZGVyKSB7XG4gICAgaWYgKF9ldmVudCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZXZlbnRcIik7XG4gICAgfVxuICAgIC8vIE5vcm1hbGl6ZSB0b3BpYyBhcnJheSBpbmZvIGFuIEV2ZW50RmlsdGVyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoX2V2ZW50KSkge1xuICAgICAgICBfZXZlbnQgPSB7IHRvcGljczogX2V2ZW50IH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKF9ldmVudCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgc3dpdGNoIChfZXZlbnQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJibG9ja1wiOlxuICAgICAgICAgICAgY2FzZSBcImRlYnVnXCI6XG4gICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgIGNhc2UgXCJmaW5hbGl6ZWRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJuZXR3b3JrXCI6XG4gICAgICAgICAgICBjYXNlIFwicGVuZGluZ1wiOlxuICAgICAgICAgICAgY2FzZSBcInNhZmVcIjoge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IF9ldmVudCwgdGFnOiBfZXZlbnQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNIZXhTdHJpbmcoX2V2ZW50LCAzMikpIHtcbiAgICAgICAgY29uc3QgaGFzaCA9IF9ldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcInRyYW5zYWN0aW9uXCIsIHRhZzogZ2V0VGFnKFwidHhcIiwgeyBoYXNoIH0pLCBoYXNoIH07XG4gICAgfVxuICAgIGlmIChfZXZlbnQub3JwaGFuKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gX2V2ZW50O1xuICAgICAgICAvLyBAVE9ETzogU2hvdWxkIGxvd2VyY2FzZSBhbmQgd2hhdG5vdCB0aGluZ3MgaGVyZSBpbnN0ZWFkIG9mIGNvcHkuLi5cbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJvcnBoYW5cIiwgdGFnOiBnZXRUYWcoXCJvcnBoYW5cIiwgZXZlbnQpLCBmaWx0ZXI6IGNvcHkoZXZlbnQpIH07XG4gICAgfVxuICAgIGlmICgoX2V2ZW50LmFkZHJlc3MgfHwgX2V2ZW50LnRvcGljcykpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBfZXZlbnQ7XG4gICAgICAgIGNvbnN0IGZpbHRlciA9IHtcbiAgICAgICAgICAgIHRvcGljczogKChldmVudC50b3BpY3MgfHwgW10pLm1hcCgodCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25jaXNpZnkodC5tYXAoKHQpID0+IHQudG9Mb3dlckNhc2UoKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfSkpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChldmVudC5hZGRyZXNzKSB7XG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzZXMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICAgICAgICBjb25zdCBhZGRBZGRyZXNzID0gKGFkZHIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXNIZXhTdHJpbmcoYWRkcikpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzc2VzLnB1c2goYWRkcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzZXMucHVzaChhd2FpdCByZXNvbHZlQWRkcmVzcyhhZGRyLCBwcm92aWRlcikpO1xuICAgICAgICAgICAgICAgICAgICB9KSgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQuYWRkcmVzcykpIHtcbiAgICAgICAgICAgICAgICBldmVudC5hZGRyZXNzLmZvckVhY2goYWRkQWRkcmVzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRBZGRyZXNzKGV2ZW50LmFkZHJlc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbHRlci5hZGRyZXNzID0gY29uY2lzaWZ5KGFkZHJlc3Nlcy5tYXAoKGEpID0+IGEudG9Mb3dlckNhc2UoKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGZpbHRlciwgdGFnOiBnZXRUYWcoXCJldmVudFwiLCBmaWx0ZXIpLCB0eXBlOiBcImV2ZW50XCIgfTtcbiAgICB9XG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5rbm93biBQcm92aWRlckV2ZW50XCIsIFwiZXZlbnRcIiwgX2V2ZW50KTtcbn1cbmZ1bmN0aW9uIGdldFRpbWUoKSB7IHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpOyB9XG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBjYWNoZVRpbWVvdXQ6IDI1MCxcbiAgICBwb2xsaW5nSW50ZXJ2YWw6IDQwMDBcbn07XG4vKipcbiAqICBBbiAqKkFic3RyYWN0UHJvdmlkZXIqKiBwcm92aWRlcyBhIGJhc2UgY2xhc3MgZm9yIG90aGVyIHN1Yi1jbGFzc2VzIHRvXG4gKiAgaW1wbGVtZW50IHRoZSBbW1Byb3ZpZGVyXV0gQVBJIGJ5IG5vcm1hbGl6aW5nIGlucHV0IGFyZ3VtZW50cyBhbmRcbiAqICBmb3JtYXR0aW5nIG91dHB1dCByZXN1bHRzIGFzIHdlbGwgYXMgdHJhY2tpbmcgZXZlbnRzIGZvciBjb25zaXN0ZW50XG4gKiAgYmVoYXZpb3VyIG9uIGFuIGV2ZW50dWFsbHktY29uc2lzdGVudCBuZXR3b3JrLlxuICovXG5leHBvcnQgY2xhc3MgQWJzdHJhY3RQcm92aWRlciB7XG4gICAgI3N1YnM7XG4gICAgI3BsdWdpbnM7XG4gICAgLy8gbnVsbD11bnBhdXNlZCwgdHJ1ZT1wYXVzZWQrZHJvcFdoaWxlUGF1c2VkLCBmYWxzZT1wYXVzZWRcbiAgICAjcGF1c2VkU3RhdGU7XG4gICAgI2Rlc3Ryb3llZDtcbiAgICAjbmV0d29ya1Byb21pc2U7XG4gICAgI2FueU5ldHdvcms7XG4gICAgI3BlcmZvcm1DYWNoZTtcbiAgICAvLyBUaGUgbW9zdCByZWNlbnQgYmxvY2sgbnVtYmVyIGlmIHJ1bm5pbmcgYW4gZXZlbnQgb3IgLTEgaWYgbm8gXCJibG9ja1wiIGV2ZW50XG4gICAgI2xhc3RCbG9ja051bWJlcjtcbiAgICAjbmV4dFRpbWVyO1xuICAgICN0aW1lcnM7XG4gICAgI2Rpc2FibGVDY2lwUmVhZDtcbiAgICAjb3B0aW9ucztcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlIGEgbmV3ICoqQWJzdHJhY3RQcm92aWRlcioqIGNvbm5lY3RlZCB0byAlJW5ldHdvcmslJSwgb3JcbiAgICAgKiAgdXNlIHRoZSB2YXJpb3VzIG5ldHdvcmsgZGV0ZWN0aW9uIGNhcGFiaWxpdGllcyB0byBkaXNjb3ZlciB0aGVcbiAgICAgKiAgW1tOZXR3b3JrXV0gaWYgbmVjZXNzYXJ5LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKF9uZXR3b3JrLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuI29wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyB8fCB7fSk7XG4gICAgICAgIGlmIChfbmV0d29yayA9PT0gXCJhbnlcIikge1xuICAgICAgICAgICAgdGhpcy4jYW55TmV0d29yayA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiNuZXR3b3JrUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoX25ldHdvcmspIHtcbiAgICAgICAgICAgIGNvbnN0IG5ldHdvcmsgPSBOZXR3b3JrLmZyb20oX25ldHdvcmspO1xuICAgICAgICAgICAgdGhpcy4jYW55TmV0d29yayA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy4jbmV0d29ya1Byb21pc2UgPSBQcm9taXNlLnJlc29sdmUobmV0d29yayk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy5lbWl0KFwibmV0d29ya1wiLCBuZXR3b3JrLCBudWxsKTsgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLiNhbnlOZXR3b3JrID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLiNuZXR3b3JrUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jbGFzdEJsb2NrTnVtYmVyID0gLTE7XG4gICAgICAgIHRoaXMuI3BlcmZvcm1DYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy4jc3VicyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy4jcGx1Z2lucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy4jcGF1c2VkU3RhdGUgPSBudWxsO1xuICAgICAgICB0aGlzLiNkZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy4jbmV4dFRpbWVyID0gMTtcbiAgICAgICAgdGhpcy4jdGltZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLiNkaXNhYmxlQ2NpcFJlYWQgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0IHBvbGxpbmdJbnRlcnZhbCgpIHsgcmV0dXJuIHRoaXMuI29wdGlvbnMucG9sbGluZ0ludGVydmFsOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYGB0aGlzYGAsIHRvIGFsbG93IGFuICoqQWJzdHJhY3RQcm92aWRlcioqIHRvIGltcGxlbWVudFxuICAgICAqICB0aGUgW1tDb250cmFjdFJ1bm5lcl1dIGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBnZXQgcHJvdmlkZXIoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYWxsIHRoZSByZWdpc3RlcmVkIHBsdWctaW5zLlxuICAgICAqL1xuICAgIGdldCBwbHVnaW5zKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLiNwbHVnaW5zLnZhbHVlcygpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEF0dGFjaCBhIG5ldyBwbHVnLWluLlxuICAgICAqL1xuICAgIGF0dGFjaFBsdWdpbihwbHVnaW4pIHtcbiAgICAgICAgaWYgKHRoaXMuI3BsdWdpbnMuZ2V0KHBsdWdpbi5uYW1lKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcmVwbGFjZSBleGlzdGluZyBwbHVnaW46ICR7cGx1Z2luLm5hbWV9IGApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3BsdWdpbnMuc2V0KHBsdWdpbi5uYW1lLCBwbHVnaW4uY29ubmVjdCh0aGlzKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgR2V0IGEgcGx1Z2luIGJ5IG5hbWUuXG4gICAgICovXG4gICAgZ2V0UGx1Z2luKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLiNwbHVnaW5zLmdldChuYW1lKSkgfHwgbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFByZXZlbnQgYW55IENDSVAtcmVhZCBvcGVyYXRpb24sIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciByZXF1ZXN0ZWRcbiAgICAgKiAgaW4gYSBbW2NhbGxdXSB1c2luZyBgYGVuYWJsZUNjaXBSZWFkYGAuXG4gICAgICovXG4gICAgZ2V0IGRpc2FibGVDY2lwUmVhZCgpIHsgcmV0dXJuIHRoaXMuI2Rpc2FibGVDY2lwUmVhZDsgfVxuICAgIHNldCBkaXNhYmxlQ2NpcFJlYWQodmFsdWUpIHsgdGhpcy4jZGlzYWJsZUNjaXBSZWFkID0gISF2YWx1ZTsgfVxuICAgIC8vIFNoYXJlcyBtdWx0aXBsZSBpZGVudGljYWwgcmVxdWVzdHMgbWFkZSBkdXJpbmcgdGhlIHNhbWUgMjUwbXNcbiAgICBhc3luYyAjcGVyZm9ybShyZXEpIHtcbiAgICAgICAgY29uc3QgdGltZW91dCA9IHRoaXMuI29wdGlvbnMuY2FjaGVUaW1lb3V0O1xuICAgICAgICAvLyBDYWNoaW5nIGRpc2FibGVkXG4gICAgICAgIGlmICh0aW1lb3V0IDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3BlcmZvcm0ocmVxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDcmVhdGUgYSB0YWdcbiAgICAgICAgY29uc3QgdGFnID0gZ2V0VGFnKHJlcS5tZXRob2QsIHJlcSk7XG4gICAgICAgIGxldCBwZXJmb3JtID0gdGhpcy4jcGVyZm9ybUNhY2hlLmdldCh0YWcpO1xuICAgICAgICBpZiAoIXBlcmZvcm0pIHtcbiAgICAgICAgICAgIHBlcmZvcm0gPSB0aGlzLl9wZXJmb3JtKHJlcSk7XG4gICAgICAgICAgICB0aGlzLiNwZXJmb3JtQ2FjaGUuc2V0KHRhZywgcGVyZm9ybSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4jcGVyZm9ybUNhY2hlLmdldCh0YWcpID09PSBwZXJmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3BlcmZvcm1DYWNoZS5kZWxldGUodGFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgcGVyZm9ybTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmVzIHRvIHRoZSBkYXRhIGZvciBleGVjdXRpbmcgdGhlIENDSVAtcmVhZCBvcGVyYXRpb25zLlxuICAgICAqL1xuICAgIGFzeW5jIGNjaXBSZWFkRmV0Y2godHgsIGNhbGxkYXRhLCB1cmxzKSB7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVDY2lwUmVhZCB8fCB1cmxzLmxlbmd0aCA9PT0gMCB8fCB0eC50byA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZW5kZXIgPSB0eC50by50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCBkYXRhID0gY2FsbGRhdGEudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IHVybHNbaV07XG4gICAgICAgICAgICAvLyBVUkwgZXhwYW5zaW9uXG4gICAgICAgICAgICBjb25zdCBocmVmID0gdXJsLnJlcGxhY2UoXCJ7c2VuZGVyfVwiLCBzZW5kZXIpLnJlcGxhY2UoXCJ7ZGF0YX1cIiwgZGF0YSk7XG4gICAgICAgICAgICAvLyBJZiBubyB7ZGF0YX0gaXMgcHJlc2VudCwgdXNlIFBPU1Q7IG90aGVyd2lzZSBHRVRcbiAgICAgICAgICAgIC8vY29uc3QganNvbjogc3RyaW5nIHwgbnVsbCA9ICh1cmwuaW5kZXhPZihcIntkYXRhfVwiKSA+PSAwKSA/IG51bGw6IEpTT04uc3RyaW5naWZ5KHsgZGF0YSwgc2VuZGVyIH0pO1xuICAgICAgICAgICAgLy9jb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaEpzb24oeyB1cmw6IGhyZWYsIGVycm9yUGFzc1Rocm91Z2g6IHRydWUgfSwganNvbiwgKHZhbHVlLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgLy8gICAgdmFsdWUuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgICAgICAgICAgIC8vICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIC8vfSk7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IEZldGNoUmVxdWVzdChocmVmKTtcbiAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZihcIntkYXRhfVwiKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmJvZHkgPSB7IGRhdGEsIHNlbmRlciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwgeyBhY3Rpb246IFwic2VuZENjaXBSZWFkRmV0Y2hSZXF1ZXN0XCIsIHJlcXVlc3QsIGluZGV4OiBpLCB1cmxzIH0pO1xuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IFwidW5rbm93biBlcnJvclwiO1xuICAgICAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IHJlcXVlc3Quc2VuZCgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSByZXNwLmJvZHlKc29uO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJyZWNlaXZlQ2NpcFJlYWRGZXRjaFJlc3VsdFwiLCByZXF1ZXN0LCByZXN1bHQgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IHJlc3VsdC5tZXNzYWdlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJyZWNlaXZlQ2NpcFJlYWRGZXRjaEVycm9yXCIsIHJlcXVlc3QsIHJlc3VsdCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgICAgICAvLyA0eHggaW5kaWNhdGVzIHRoZSByZXN1bHQgaXMgbm90IHByZXNlbnQ7IHN0b3BcbiAgICAgICAgICAgIGFzc2VydChyZXNwLnN0YXR1c0NvZGUgPCA0MDAgfHwgcmVzcC5zdGF0dXNDb2RlID49IDUwMCwgYHJlc3BvbnNlIG5vdCBmb3VuZCBkdXJpbmcgQ0NJUCBmZXRjaDogJHtlcnJvck1lc3NhZ2V9YCwgXCJPRkZDSEFJTl9GQVVMVFwiLCB7IHJlYXNvbjogXCI0MDRfTUlTU0lOR19SRVNPVVJDRVwiLCB0cmFuc2FjdGlvbjogdHgsIGluZm86IHsgdXJsLCBlcnJvck1lc3NhZ2UgfSB9KTtcbiAgICAgICAgICAgIC8vIDV4eCBpbmRpY2F0ZXMgc2VydmVyIGlzc3VlOyB0cnkgdGhlIG5leHQgdXJsXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VzLnB1c2goZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnQoZmFsc2UsIGBlcnJvciBlbmNvdW50ZXJlZCBkdXJpbmcgQ0NJUCBmZXRjaDogJHtlcnJvck1lc3NhZ2VzLm1hcCgobSkgPT4gSlNPTi5zdHJpbmdpZnkobSkpLmpvaW4oXCIsIFwiKX1gLCBcIk9GRkNIQUlOX0ZBVUxUXCIsIHtcbiAgICAgICAgICAgIHJlYXNvbjogXCI1MDBfU0VSVkVSX0VSUk9SXCIsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbjogdHgsIGluZm86IHsgdXJscywgZXJyb3JNZXNzYWdlcyB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUHJvdmlkZXMgdGhlIG9wcG9ydHVuaXR5IGZvciBhIHN1Yi1jbGFzcyB0byB3cmFwIGEgYmxvY2sgYmVmb3JlXG4gICAgICogIHJldHVybmluZyBpdCwgdG8gYWRkIGFkZGl0aW9uYWwgcHJvcGVydGllcyBvciBhbiBhbHRlcm5hdGVcbiAgICAgKiAgc3ViLWNsYXNzIG9mIFtbQmxvY2tdXS5cbiAgICAgKi9cbiAgICBfd3JhcEJsb2NrKHZhbHVlLCBuZXR3b3JrKSB7XG4gICAgICAgIHJldHVybiBuZXcgQmxvY2soZm9ybWF0QmxvY2sodmFsdWUpLCB0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFByb3ZpZGVzIHRoZSBvcHBvcnR1bml0eSBmb3IgYSBzdWItY2xhc3MgdG8gd3JhcCBhIGxvZyBiZWZvcmVcbiAgICAgKiAgcmV0dXJuaW5nIGl0LCB0byBhZGQgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIG9yIGFuIGFsdGVybmF0ZVxuICAgICAqICBzdWItY2xhc3Mgb2YgW1tMb2ddXS5cbiAgICAgKi9cbiAgICBfd3JhcExvZyh2YWx1ZSwgbmV0d29yaykge1xuICAgICAgICByZXR1cm4gbmV3IExvZyhmb3JtYXRMb2codmFsdWUpLCB0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFByb3ZpZGVzIHRoZSBvcHBvcnR1bml0eSBmb3IgYSBzdWItY2xhc3MgdG8gd3JhcCBhIHRyYW5zYWN0aW9uXG4gICAgICogIHJlY2VpcHQgYmVmb3JlIHJldHVybmluZyBpdCwgdG8gYWRkIGFkZGl0aW9uYWwgcHJvcGVydGllcyBvciBhblxuICAgICAqICBhbHRlcm5hdGUgc3ViLWNsYXNzIG9mIFtbVHJhbnNhY3Rpb25SZWNlaXB0XV0uXG4gICAgICovXG4gICAgX3dyYXBUcmFuc2FjdGlvblJlY2VpcHQodmFsdWUsIG5ldHdvcmspIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvblJlY2VpcHQoZm9ybWF0VHJhbnNhY3Rpb25SZWNlaXB0KHZhbHVlKSwgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBQcm92aWRlcyB0aGUgb3Bwb3J0dW5pdHkgZm9yIGEgc3ViLWNsYXNzIHRvIHdyYXAgYSB0cmFuc2FjdGlvblxuICAgICAqICByZXNwb25zZSBiZWZvcmUgcmV0dXJuaW5nIGl0LCB0byBhZGQgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIG9yIGFuXG4gICAgICogIGFsdGVybmF0ZSBzdWItY2xhc3Mgb2YgW1tUcmFuc2FjdGlvblJlc3BvbnNlXV0uXG4gICAgICovXG4gICAgX3dyYXBUcmFuc2FjdGlvblJlc3BvbnNlKHR4LCBuZXR3b3JrKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb25SZXNwb25zZShmb3JtYXRUcmFuc2FjdGlvblJlc3BvbnNlKHR4KSwgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXNvbHZlcyB0byB0aGUgTmV0d29yaywgZm9yY2luZyBhIG5ldHdvcmsgZGV0ZWN0aW9uIHVzaW5nIHdoYXRldmVyXG4gICAgICogIHRlY2huaXF1ZSB0aGUgc3ViLWNsYXNzIHJlcXVpcmVzLlxuICAgICAqXG4gICAgICogIFN1Yi1jbGFzc2VzICoqbXVzdCoqIG92ZXJyaWRlIHRoaXMuXG4gICAgICovXG4gICAgX2RldGVjdE5ldHdvcmsoKSB7XG4gICAgICAgIGFzc2VydChmYWxzZSwgXCJzdWItY2xhc3NlcyBtdXN0IGltcGxlbWVudCB0aGlzXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJfZGV0ZWN0TmV0d29ya1wiXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgU3ViLWNsYXNzZXMgc2hvdWxkIHVzZSB0aGlzIHRvIHBlcmZvcm0gYWxsIGJ1aWx0LWluIG9wZXJhdGlvbnMuIEFsbFxuICAgICAqICBtZXRob2RzIHNhbml0aXplcyBhbmQgbm9ybWFsaXplcyB0aGUgdmFsdWVzIHBhc3NlZCBpbnRvIHRoaXMuXG4gICAgICpcbiAgICAgKiAgU3ViLWNsYXNzZXMgKiptdXN0Kiogb3ZlcnJpZGUgdGhpcy5cbiAgICAgKi9cbiAgICBhc3luYyBfcGVyZm9ybShyZXEpIHtcbiAgICAgICAgYXNzZXJ0KGZhbHNlLCBgdW5zdXBwb3J0ZWQgbWV0aG9kOiAke3JlcS5tZXRob2R9YCwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiByZXEubWV0aG9kLFxuICAgICAgICAgICAgaW5mbzogcmVxXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBTdGF0ZVxuICAgIGFzeW5jIGdldEJsb2NrTnVtYmVyKCkge1xuICAgICAgICBjb25zdCBibG9ja051bWJlciA9IGdldE51bWJlcihhd2FpdCB0aGlzLiNwZXJmb3JtKHsgbWV0aG9kOiBcImdldEJsb2NrTnVtYmVyXCIgfSksIFwiJXJlc3BvbnNlXCIpO1xuICAgICAgICBpZiAodGhpcy4jbGFzdEJsb2NrTnVtYmVyID49IDApIHtcbiAgICAgICAgICAgIHRoaXMuI2xhc3RCbG9ja051bWJlciA9IGJsb2NrTnVtYmVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBibG9ja051bWJlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgb3IgcmVzb2x2ZXMgdG8gdGhlIGFkZHJlc3MgZm9yICUlYWRkcmVzcyUlLCByZXNvbHZpbmcgRU5TXG4gICAgICogIG5hbWVzIGFuZCBbW0FkZHJlc3NhYmxlXV0gb2JqZWN0cyBhbmQgcmV0dXJuaW5nIGlmIGFscmVhZHkgYW5cbiAgICAgKiAgYWRkcmVzcy5cbiAgICAgKi9cbiAgICBfZ2V0QWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlQWRkcmVzcyhhZGRyZXNzLCB0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgb3IgcmVzb2x2ZXMgdG8gYSB2YWxpZCBibG9jayB0YWcgZm9yICUlYmxvY2tUYWclJSwgcmVzb2x2aW5nXG4gICAgICogIG5lZ2F0aXZlIHZhbHVlcyBhbmQgcmV0dXJuaW5nIGlmIGFscmVhZHkgYSB2YWxpZCBibG9jayB0YWcuXG4gICAgICovXG4gICAgX2dldEJsb2NrVGFnKGJsb2NrVGFnKSB7XG4gICAgICAgIGlmIChibG9ja1RhZyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJsYXRlc3RcIjtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGJsb2NrVGFnKSB7XG4gICAgICAgICAgICBjYXNlIFwiZWFybGllc3RcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIweDBcIjtcbiAgICAgICAgICAgIGNhc2UgXCJmaW5hbGl6ZWRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJsYXRlc3RcIjpcbiAgICAgICAgICAgIGNhc2UgXCJwZW5kaW5nXCI6XG4gICAgICAgICAgICBjYXNlIFwic2FmZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBibG9ja1RhZztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNIZXhTdHJpbmcoYmxvY2tUYWcpKSB7XG4gICAgICAgICAgICBpZiAoaXNIZXhTdHJpbmcoYmxvY2tUYWcsIDMyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBibG9ja1RhZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0b1F1YW50aXR5KGJsb2NrVGFnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChibG9ja1RhZykgPT09IFwiYmlnaW50XCIpIHtcbiAgICAgICAgICAgIGJsb2NrVGFnID0gZ2V0TnVtYmVyKGJsb2NrVGFnLCBcImJsb2NrVGFnXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKGJsb2NrVGFnKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgaWYgKGJsb2NrVGFnID49IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9RdWFudGl0eShibG9ja1RhZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy4jbGFzdEJsb2NrTnVtYmVyID49IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9RdWFudGl0eSh0aGlzLiNsYXN0QmxvY2tOdW1iZXIgKyBibG9ja1RhZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRCbG9ja051bWJlcigpLnRoZW4oKGIpID0+IHRvUXVhbnRpdHkoYiArIGJsb2NrVGFnKSk7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwiaW52YWxpZCBibG9ja1RhZ1wiLCBcImJsb2NrVGFnXCIsIGJsb2NrVGFnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgb3IgcmVzb2x2ZXMgdG8gYSBmaWx0ZXIgZm9yICUlZmlsdGVyJSUsIHJlc29sdmluZyBhbnkgRU5TXG4gICAgICogIG5hbWVzIG9yIFtbQWRkcmVzc2FibGVdXSBvYmplY3QgYW5kIHJldHVybmluZyBpZiBhbHJlYWR5IGEgdmFsaWRcbiAgICAgKiAgZmlsdGVyLlxuICAgICAqL1xuICAgIF9nZXRGaWx0ZXIoZmlsdGVyKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIGNhbm9uaWNhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgdG9waWNzXG4gICAgICAgIGNvbnN0IHRvcGljcyA9IChmaWx0ZXIudG9waWNzIHx8IFtdKS5tYXAoKHQpID0+IHtcbiAgICAgICAgICAgIGlmICh0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbmNpc2lmeSh0Lm1hcCgodCkgPT4gdC50b0xvd2VyQ2FzZSgpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYmxvY2tIYXNoID0gKFwiYmxvY2tIYXNoXCIgaW4gZmlsdGVyKSA/IGZpbHRlci5ibG9ja0hhc2ggOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHJlc29sdmUgPSAoX2FkZHJlc3MsIGZyb21CbG9jaywgdG9CbG9jaykgPT4ge1xuICAgICAgICAgICAgbGV0IGFkZHJlc3MgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBzd2l0Y2ggKF9hZGRyZXNzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzID0gX2FkZHJlc3NbMF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIF9hZGRyZXNzLnNvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyA9IF9hZGRyZXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJsb2NrSGFzaCkge1xuICAgICAgICAgICAgICAgIGlmIChmcm9tQmxvY2sgIT0gbnVsbCB8fCB0b0Jsb2NrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmaWx0ZXJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmlsdGVyID0ge307XG4gICAgICAgICAgICBpZiAoYWRkcmVzcykge1xuICAgICAgICAgICAgICAgIGZpbHRlci5hZGRyZXNzID0gYWRkcmVzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b3BpY3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyLnRvcGljcyA9IHRvcGljcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmcm9tQmxvY2spIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXIuZnJvbUJsb2NrID0gZnJvbUJsb2NrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvQmxvY2spIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXIudG9CbG9jayA9IHRvQmxvY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmxvY2tIYXNoKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyLmJsb2NrSGFzaCA9IGJsb2NrSGFzaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEFkZHJlc3NlcyBjb3VsZCBiZSBhc3luYyAoRU5TIG5hbWVzIG9yIEFkZHJlc3NhYmxlcylcbiAgICAgICAgbGV0IGFkZHJlc3MgPSBbXTtcbiAgICAgICAgaWYgKGZpbHRlci5hZGRyZXNzKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmaWx0ZXIuYWRkcmVzcykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFkZHIgb2YgZmlsdGVyLmFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzcy5wdXNoKHRoaXMuX2dldEFkZHJlc3MoYWRkcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZHJlc3MucHVzaCh0aGlzLl9nZXRBZGRyZXNzKGZpbHRlci5hZGRyZXNzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZyb21CbG9jayA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKFwiZnJvbUJsb2NrXCIgaW4gZmlsdGVyKSB7XG4gICAgICAgICAgICBmcm9tQmxvY2sgPSB0aGlzLl9nZXRCbG9ja1RhZyhmaWx0ZXIuZnJvbUJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdG9CbG9jayA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKFwidG9CbG9ja1wiIGluIGZpbHRlcikge1xuICAgICAgICAgICAgdG9CbG9jayA9IHRoaXMuX2dldEJsb2NrVGFnKGZpbHRlci50b0Jsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWRkcmVzcy5maWx0ZXIoKGEpID0+ICh0eXBlb2YgKGEpICE9PSBcInN0cmluZ1wiKSkubGVuZ3RoIHx8XG4gICAgICAgICAgICAoZnJvbUJsb2NrICE9IG51bGwgJiYgdHlwZW9mIChmcm9tQmxvY2spICE9PSBcInN0cmluZ1wiKSB8fFxuICAgICAgICAgICAgKHRvQmxvY2sgIT0gbnVsbCAmJiB0eXBlb2YgKHRvQmxvY2spICE9PSBcInN0cmluZ1wiKSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtQcm9taXNlLmFsbChhZGRyZXNzKSwgZnJvbUJsb2NrLCB0b0Jsb2NrXSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzdWx0WzBdLCByZXN1bHRbMV0sIHJlc3VsdFsyXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzb2x2ZShhZGRyZXNzLCBmcm9tQmxvY2ssIHRvQmxvY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBvciByZXNvdmxlcyB0byBhIHRyYW5zYWN0aW9uIGZvciAlJXJlcXVlc3QlJSwgcmVzb2x2aW5nXG4gICAgICogIGFueSBFTlMgbmFtZXMgb3IgW1tBZGRyZXNzYWJsZV1dIGFuZCByZXR1cm5pbmcgaWYgYWxyZWFkeSBhIHZhbGlkXG4gICAgICogIHRyYW5zYWN0aW9uLlxuICAgICAqL1xuICAgIF9nZXRUcmFuc2FjdGlvblJlcXVlc3QoX3JlcXVlc3QpIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IGNvcHlSZXF1ZXN0KF9yZXF1ZXN0KTtcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgW1widG9cIiwgXCJmcm9tXCJdLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKHJlcXVlc3Rba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYWRkciA9IHJlc29sdmVBZGRyZXNzKHJlcXVlc3Rba2V5XSwgdGhpcyk7XG4gICAgICAgICAgICBpZiAoaXNQcm9taXNlKGFkZHIpKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaCgoYXN5bmMgZnVuY3Rpb24gKCkgeyByZXF1ZXN0W2tleV0gPSBhd2FpdCBhZGRyOyB9KSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcXVlc3Rba2V5XSA9IGFkZHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVxdWVzdC5ibG9ja1RhZyAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBibG9ja1RhZyA9IHRoaXMuX2dldEJsb2NrVGFnKHJlcXVlc3QuYmxvY2tUYWcpO1xuICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShibG9ja1RhZykpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKChhc3luYyBmdW5jdGlvbiAoKSB7IHJlcXVlc3QuYmxvY2tUYWcgPSBhd2FpdCBibG9ja1RhZzsgfSkoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmJsb2NrVGFnID0gYmxvY2tUYWc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TmV0d29yaygpIHtcbiAgICAgICAgLy8gTm8gZXhwbGljaXQgbmV0d29yayB3YXMgc2V0IGFuZCB0aGlzIGlzIG91ciBmaXJzdCB0aW1lXG4gICAgICAgIGlmICh0aGlzLiNuZXR3b3JrUHJvbWlzZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBEZXRlY3QgdGhlIGN1cnJlbnQgbmV0d29yayAoc2hhcmVkIHdpdGggYWxsIGNhbGxzKVxuICAgICAgICAgICAgY29uc3QgZGV0ZWN0TmV0d29yayA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV0d29yayA9IGF3YWl0IHRoaXMuX2RldGVjdE5ldHdvcmsoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwibmV0d29ya1wiLCBuZXR3b3JrLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldHdvcms7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jbmV0d29ya1Byb21pc2UgPT09IGRldGVjdE5ldHdvcmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI25ldHdvcmtQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgdGhpcy4jbmV0d29ya1Byb21pc2UgPSBkZXRlY3ROZXR3b3JrO1xuICAgICAgICAgICAgcmV0dXJuIChhd2FpdCBkZXRlY3ROZXR3b3JrKS5jbG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ldHdvcmtQcm9taXNlID0gdGhpcy4jbmV0d29ya1Byb21pc2U7XG4gICAgICAgIGNvbnN0IFtleHBlY3RlZCwgYWN0dWFsXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIG5ldHdvcmtQcm9taXNlLFxuICAgICAgICAgICAgdGhpcy5fZGV0ZWN0TmV0d29yaygpIC8vIFRoZSBhY3R1YWwgY29ubmVjdGVkIG5ldHdvcmtcbiAgICAgICAgXSk7XG4gICAgICAgIGlmIChleHBlY3RlZC5jaGFpbklkICE9PSBhY3R1YWwuY2hhaW5JZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuI2FueU5ldHdvcmspIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgXCJhbnlcIiBuZXR3b3JrIGNhbiBjaGFuZ2UsIHNvIG5vdGlmeSBsaXN0ZW5lcnNcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJuZXR3b3JrXCIsIGFjdHVhbCwgZXhwZWN0ZWQpO1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgbmV0d29yayBpZiBzb21ldGhpbmcgZWxzZSBoYXNuJ3QgYWxyZWFkeSBjaGFuZ2VkIGl0XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI25ldHdvcmtQcm9taXNlID09PSBuZXR3b3JrUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNuZXR3b3JrUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShhY3R1YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UgZG8gbm90IGFsbG93IGNoYW5nZXMgdG8gdGhlIHVuZGVybHlpbmcgbmV0d29ya1xuICAgICAgICAgICAgICAgIGFzc2VydChmYWxzZSwgYG5ldHdvcmsgY2hhbmdlZDogJHtleHBlY3RlZC5jaGFpbklkfSA9PiAke2FjdHVhbC5jaGFpbklkfSBgLCBcIk5FVFdPUktfRVJST1JcIiwge1xuICAgICAgICAgICAgICAgICAgICBldmVudDogXCJjaGFuZ2VkXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXhwZWN0ZWQuY2xvbmUoKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0RmVlRGF0YSgpIHtcbiAgICAgICAgY29uc3QgbmV0d29yayA9IGF3YWl0IHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICBjb25zdCBnZXRGZWVEYXRhRnVuYyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgX2Jsb2NrLCBnYXNQcmljZSwgcHJpb3JpdHlGZWUgfSA9IGF3YWl0IHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgICAgICBfYmxvY2s6IHRoaXMuI2dldEJsb2NrKFwibGF0ZXN0XCIsIGZhbHNlKSxcbiAgICAgICAgICAgICAgICBnYXNQcmljZTogKChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHRoaXMuI3BlcmZvcm0oeyBtZXRob2Q6IFwiZ2V0R2FzUHJpY2VcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRCaWdJbnQodmFsdWUsIFwiJXJlc3BvbnNlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH0pKCkpLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5RmVlOiAoKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgdGhpcy4jcGVyZm9ybSh7IG1ldGhvZDogXCJnZXRQcmlvcml0eUZlZVwiIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEJpZ0ludCh2YWx1ZSwgXCIlcmVzcG9uc2VcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfSkoKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IG1heEZlZVBlckdhcyA9IG51bGw7XG4gICAgICAgICAgICBsZXQgbWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBudWxsO1xuICAgICAgICAgICAgLy8gVGhlc2UgYXJlIHRoZSByZWNvbW1lbmRlZCBFSVAtMTU1OSBoZXVyaXN0aWNzIGZvciBmZWUgZGF0YVxuICAgICAgICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLl93cmFwQmxvY2soX2Jsb2NrLCBuZXR3b3JrKTtcbiAgICAgICAgICAgIGlmIChibG9jayAmJiBibG9jay5iYXNlRmVlUGVyR2FzKSB7XG4gICAgICAgICAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXMgPSAocHJpb3JpdHlGZWUgIT0gbnVsbCkgPyBwcmlvcml0eUZlZSA6IEJpZ0ludChcIjEwMDAwMDAwMDBcIik7XG4gICAgICAgICAgICAgICAgbWF4RmVlUGVyR2FzID0gKGJsb2NrLmJhc2VGZWVQZXJHYXMgKiBCTl8yKSArIG1heFByaW9yaXR5RmVlUGVyR2FzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGZWVEYXRhKGdhc1ByaWNlLCBtYXhGZWVQZXJHYXMsIG1heFByaW9yaXR5RmVlUGVyR2FzKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGEgRmVlRGF0YU5ldFdvcmtQbHVnaW5cbiAgICAgICAgY29uc3QgcGx1Z2luID0gbmV0d29yay5nZXRQbHVnaW4oXCJvcmcuZXRoZXJzLnBsdWdpbnMubmV0d29yay5GZXRjaFVybEZlZURhdGFQbHVnaW5cIik7XG4gICAgICAgIGlmIChwbHVnaW4pIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcSA9IG5ldyBGZXRjaFJlcXVlc3QocGx1Z2luLnVybCk7XG4gICAgICAgICAgICBjb25zdCBmZWVEYXRhID0gYXdhaXQgcGx1Z2luLnByb2Nlc3NGdW5jKGdldEZlZURhdGFGdW5jLCB0aGlzLCByZXEpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGZWVEYXRhKGZlZURhdGEuZ2FzUHJpY2UsIGZlZURhdGEubWF4RmVlUGVyR2FzLCBmZWVEYXRhLm1heFByaW9yaXR5RmVlUGVyR2FzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgZ2V0RmVlRGF0YUZ1bmMoKTtcbiAgICB9XG4gICAgYXN5bmMgZXN0aW1hdGVHYXMoX3R4KSB7XG4gICAgICAgIGxldCB0eCA9IHRoaXMuX2dldFRyYW5zYWN0aW9uUmVxdWVzdChfdHgpO1xuICAgICAgICBpZiAoaXNQcm9taXNlKHR4KSkge1xuICAgICAgICAgICAgdHggPSBhd2FpdCB0eDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0QmlnSW50KGF3YWl0IHRoaXMuI3BlcmZvcm0oe1xuICAgICAgICAgICAgbWV0aG9kOiBcImVzdGltYXRlR2FzXCIsIHRyYW5zYWN0aW9uOiB0eFxuICAgICAgICB9KSwgXCIlcmVzcG9uc2VcIik7XG4gICAgfVxuICAgIGFzeW5jICNjYWxsKHR4LCBibG9ja1RhZywgYXR0ZW1wdCkge1xuICAgICAgICBhc3NlcnQoYXR0ZW1wdCA8IE1BWF9DQ0lQX1JFRElSRUNUUywgXCJDQ0lQIHJlYWQgZXhjZWVkZWQgbWF4aW11bSByZWRpcmVjdGlvbnNcIiwgXCJPRkZDSEFJTl9GQVVMVFwiLCB7XG4gICAgICAgICAgICByZWFzb246IFwiVE9PX01BTllfUkVESVJFQ1RTXCIsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbjogT2JqZWN0LmFzc2lnbih7fSwgdHgsIHsgYmxvY2tUYWcsIGVuYWJsZUNjaXBSZWFkOiB0cnVlIH0pXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUaGlzIGNhbWUgaW4gYXMgYSBQZXJmb3JtQWN0aW9uVHJhbnNhY3Rpb24sIHNvIHRvL2Zyb20gYXJlIHNhZmU7IHdlIGNhbiBjYXN0XG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gY29weVJlcXVlc3QodHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGhleGxpZnkoYXdhaXQgdGhpcy5fcGVyZm9ybSh7IG1ldGhvZDogXCJjYWxsXCIsIHRyYW5zYWN0aW9uLCBibG9ja1RhZyB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBDQ0lQIFJlYWQgT2ZmY2hhaW5Mb29rdXBcbiAgICAgICAgICAgIGlmICghdGhpcy5kaXNhYmxlQ2NpcFJlYWQgJiYgaXNDYWxsRXhjZXB0aW9uKGVycm9yKSAmJiBlcnJvci5kYXRhICYmIGF0dGVtcHQgPj0gMCAmJiBibG9ja1RhZyA9PT0gXCJsYXRlc3RcIiAmJiB0cmFuc2FjdGlvbi50byAhPSBudWxsICYmIGRhdGFTbGljZShlcnJvci5kYXRhLCAwLCA0KSA9PT0gXCIweDU1NmYxODMwXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gZXJyb3IuZGF0YTtcbiAgICAgICAgICAgICAgICBjb25zdCB0eFNlbmRlciA9IGF3YWl0IHJlc29sdmVBZGRyZXNzKHRyYW5zYWN0aW9uLnRvLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAvLyBQYXJzZSB0aGUgQ0NJUCBSZWFkIEFyZ3VtZW50c1xuICAgICAgICAgICAgICAgIGxldCBjY2lwQXJncztcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjY2lwQXJncyA9IHBhcnNlT2ZmY2hhaW5Mb29rdXAoZGF0YVNsaWNlKGVycm9yLmRhdGEsIDQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChmYWxzZSwgZXJyb3IubWVzc2FnZSwgXCJPRkZDSEFJTl9GQVVMVFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IFwiQkFEX0RBVEFcIiwgdHJhbnNhY3Rpb24sIGluZm86IHsgZGF0YSB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGUgc2VuZGVyIG9mIHRoZSBPZmZjaGFpbkxvb2t1cCBtYXRjaGVzIHRoZSB0cmFuc2FjdGlvblxuICAgICAgICAgICAgICAgIGFzc2VydChjY2lwQXJncy5zZW5kZXIudG9Mb3dlckNhc2UoKSA9PT0gdHhTZW5kZXIudG9Mb3dlckNhc2UoKSwgXCJDQ0lQIFJlYWQgc2VuZGVyIG1pc21hdGNoXCIsIFwiQ0FMTF9FWENFUFRJT05cIiwge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiY2FsbFwiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgICAgICByZWFzb246IFwiT2ZmY2hhaW5Mb29rdXBcIixcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBpbnZvY2F0aW9uOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICByZXZlcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogXCJPZmZjaGFpbkxvb2t1cChhZGRyZXNzLHN0cmluZ1tdLGJ5dGVzLGJ5dGVzNCxieXRlcylcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiT2ZmY2hhaW5Mb29rdXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IGNjaXBBcmdzLmVycm9yQXJnc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2NpcFJlc3VsdCA9IGF3YWl0IHRoaXMuY2NpcFJlYWRGZXRjaCh0cmFuc2FjdGlvbiwgY2NpcEFyZ3MuY2FsbGRhdGEsIGNjaXBBcmdzLnVybHMpO1xuICAgICAgICAgICAgICAgIGFzc2VydChjY2lwUmVzdWx0ICE9IG51bGwsIFwiQ0NJUCBSZWFkIGZhaWxlZCB0byBmZXRjaCBkYXRhXCIsIFwiT0ZGQ0hBSU5fRkFVTFRcIiwge1xuICAgICAgICAgICAgICAgICAgICByZWFzb246IFwiRkVUQ0hfRkFJTEVEXCIsIHRyYW5zYWN0aW9uLCBpbmZvOiB7IGRhdGE6IGVycm9yLmRhdGEsIGVycm9yQXJnczogY2NpcEFyZ3MuZXJyb3JBcmdzIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCB0eCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdG86IHR4U2VuZGVyLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjb25jYXQoW2NjaXBBcmdzLnNlbGVjdG9yLCBlbmNvZGVCeXRlcyhbY2NpcFJlc3VsdCwgY2NpcEFyZ3MuZXh0cmFEYXRhXSldKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwgeyBhY3Rpb246IFwic2VuZENjaXBSZWFkQ2FsbFwiLCB0cmFuc2FjdGlvbjogdHggfSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy4jY2FsbCh0eCwgYmxvY2tUYWcsIGF0dGVtcHQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwgeyBhY3Rpb246IFwicmVjZWl2ZUNjaXBSZWFkQ2FsbFJlc3VsdFwiLCB0cmFuc2FjdGlvbjogT2JqZWN0LmFzc2lnbih7fSwgdHgpLCByZXN1bHQgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJyZWNlaXZlQ2NpcFJlYWRDYWxsRXJyb3JcIiwgdHJhbnNhY3Rpb246IE9iamVjdC5hc3NpZ24oe30sIHR4KSwgZXJyb3IgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jICNjaGVja05ldHdvcmsocHJvbWlzZSkge1xuICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBhd2FpdCByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgICAgICBuZXR3b3JrOiB0aGlzLmdldE5ldHdvcmsoKSxcbiAgICAgICAgICAgIHZhbHVlOiBwcm9taXNlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGFzeW5jIGNhbGwoX3R4KSB7XG4gICAgICAgIGNvbnN0IHsgdHgsIGJsb2NrVGFnIH0gPSBhd2FpdCByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgICAgICB0eDogdGhpcy5fZ2V0VHJhbnNhY3Rpb25SZXF1ZXN0KF90eCksXG4gICAgICAgICAgICBibG9ja1RhZzogdGhpcy5fZ2V0QmxvY2tUYWcoX3R4LmJsb2NrVGFnKVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuI2NoZWNrTmV0d29yayh0aGlzLiNjYWxsKHR4LCBibG9ja1RhZywgX3R4LmVuYWJsZUNjaXBSZWFkID8gMCA6IC0xKSk7XG4gICAgfVxuICAgIC8vIEFjY291bnRcbiAgICBhc3luYyAjZ2V0QWNjb3VudFZhbHVlKHJlcXVlc3QsIF9hZGRyZXNzLCBfYmxvY2tUYWcpIHtcbiAgICAgICAgbGV0IGFkZHJlc3MgPSB0aGlzLl9nZXRBZGRyZXNzKF9hZGRyZXNzKTtcbiAgICAgICAgbGV0IGJsb2NrVGFnID0gdGhpcy5fZ2V0QmxvY2tUYWcoX2Jsb2NrVGFnKTtcbiAgICAgICAgaWYgKHR5cGVvZiAoYWRkcmVzcykgIT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIChibG9ja1RhZykgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIFthZGRyZXNzLCBibG9ja1RhZ10gPSBhd2FpdCBQcm9taXNlLmFsbChbYWRkcmVzcywgYmxvY2tUYWddKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy4jY2hlY2tOZXR3b3JrKHRoaXMuI3BlcmZvcm0oT2JqZWN0LmFzc2lnbihyZXF1ZXN0LCB7IGFkZHJlc3MsIGJsb2NrVGFnIH0pKSk7XG4gICAgfVxuICAgIGFzeW5jIGdldEJhbGFuY2UoYWRkcmVzcywgYmxvY2tUYWcpIHtcbiAgICAgICAgcmV0dXJuIGdldEJpZ0ludChhd2FpdCB0aGlzLiNnZXRBY2NvdW50VmFsdWUoeyBtZXRob2Q6IFwiZ2V0QmFsYW5jZVwiIH0sIGFkZHJlc3MsIGJsb2NrVGFnKSwgXCIlcmVzcG9uc2VcIik7XG4gICAgfVxuICAgIGFzeW5jIGdldFRyYW5zYWN0aW9uQ291bnQoYWRkcmVzcywgYmxvY2tUYWcpIHtcbiAgICAgICAgcmV0dXJuIGdldE51bWJlcihhd2FpdCB0aGlzLiNnZXRBY2NvdW50VmFsdWUoeyBtZXRob2Q6IFwiZ2V0VHJhbnNhY3Rpb25Db3VudFwiIH0sIGFkZHJlc3MsIGJsb2NrVGFnKSwgXCIlcmVzcG9uc2VcIik7XG4gICAgfVxuICAgIGFzeW5jIGdldENvZGUoYWRkcmVzcywgYmxvY2tUYWcpIHtcbiAgICAgICAgcmV0dXJuIGhleGxpZnkoYXdhaXQgdGhpcy4jZ2V0QWNjb3VudFZhbHVlKHsgbWV0aG9kOiBcImdldENvZGVcIiB9LCBhZGRyZXNzLCBibG9ja1RhZykpO1xuICAgIH1cbiAgICBhc3luYyBnZXRTdG9yYWdlKGFkZHJlc3MsIF9wb3NpdGlvbiwgYmxvY2tUYWcpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRCaWdJbnQoX3Bvc2l0aW9uLCBcInBvc2l0aW9uXCIpO1xuICAgICAgICByZXR1cm4gaGV4bGlmeShhd2FpdCB0aGlzLiNnZXRBY2NvdW50VmFsdWUoeyBtZXRob2Q6IFwiZ2V0U3RvcmFnZVwiLCBwb3NpdGlvbiB9LCBhZGRyZXNzLCBibG9ja1RhZykpO1xuICAgIH1cbiAgICAvLyBXcml0ZVxuICAgIGFzeW5jIGJyb2FkY2FzdFRyYW5zYWN0aW9uKHNpZ25lZFR4KSB7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tOdW1iZXIsIGhhc2gsIG5ldHdvcmsgfSA9IGF3YWl0IHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgIGJsb2NrTnVtYmVyOiB0aGlzLmdldEJsb2NrTnVtYmVyKCksXG4gICAgICAgICAgICBoYXNoOiB0aGlzLl9wZXJmb3JtKHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiYnJvYWRjYXN0VHJhbnNhY3Rpb25cIixcbiAgICAgICAgICAgICAgICBzaWduZWRUcmFuc2FjdGlvbjogc2lnbmVkVHhcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV0d29yazogdGhpcy5nZXROZXR3b3JrKClcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHR4ID0gVHJhbnNhY3Rpb24uZnJvbShzaWduZWRUeCk7XG4gICAgICAgIGlmICh0eC5oYXNoICE9PSBoYXNoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJAVE9ETzogdGhlIHJldHVybmVkIGhhc2ggZGlkIG5vdCBtYXRjaFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd3JhcFRyYW5zYWN0aW9uUmVzcG9uc2UodHgsIG5ldHdvcmspLnJlcGxhY2VhYmxlVHJhbnNhY3Rpb24oYmxvY2tOdW1iZXIpO1xuICAgIH1cbiAgICBhc3luYyAjZ2V0QmxvY2soYmxvY2ssIGluY2x1ZGVUcmFuc2FjdGlvbnMpIHtcbiAgICAgICAgLy8gQFRPRE86IEFkZCBDdXN0b21CbG9ja1BsdWdpbiBjaGVja1xuICAgICAgICBpZiAoaXNIZXhTdHJpbmcoYmxvY2ssIDMyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuI3BlcmZvcm0oe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJnZXRCbG9ja1wiLCBibG9ja0hhc2g6IGJsb2NrLCBpbmNsdWRlVHJhbnNhY3Rpb25zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYmxvY2tUYWcgPSB0aGlzLl9nZXRCbG9ja1RhZyhibG9jayk7XG4gICAgICAgIGlmICh0eXBlb2YgKGJsb2NrVGFnKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgYmxvY2tUYWcgPSBhd2FpdCBibG9ja1RhZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy4jcGVyZm9ybSh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiZ2V0QmxvY2tcIiwgYmxvY2tUYWcsIGluY2x1ZGVUcmFuc2FjdGlvbnNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFF1ZXJpZXNcbiAgICBhc3luYyBnZXRCbG9jayhibG9jaywgcHJlZmV0Y2hUeHMpIHtcbiAgICAgICAgY29uc3QgeyBuZXR3b3JrLCBwYXJhbXMgfSA9IGF3YWl0IHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgIG5ldHdvcms6IHRoaXMuZ2V0TmV0d29yaygpLFxuICAgICAgICAgICAgcGFyYW1zOiB0aGlzLiNnZXRCbG9jayhibG9jaywgISFwcmVmZXRjaFR4cylcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYXJhbXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBCbG9jayhwYXJhbXMsIG5ldHdvcmspO1xuICAgIH1cbiAgICBhc3luYyBnZXRUcmFuc2FjdGlvbihoYXNoKSB7XG4gICAgICAgIGNvbnN0IHsgbmV0d29yaywgcGFyYW1zIH0gPSBhd2FpdCByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgICAgICBuZXR3b3JrOiB0aGlzLmdldE5ldHdvcmsoKSxcbiAgICAgICAgICAgIHBhcmFtczogdGhpcy4jcGVyZm9ybSh7IG1ldGhvZDogXCJnZXRUcmFuc2FjdGlvblwiLCBoYXNoIH0pXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocGFyYW1zID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl93cmFwVHJhbnNhY3Rpb25SZXNwb25zZShwYXJhbXMsIG5ldHdvcmspO1xuICAgIH1cbiAgICBhc3luYyBnZXRUcmFuc2FjdGlvblJlY2VpcHQoaGFzaCkge1xuICAgICAgICBjb25zdCB7IG5ldHdvcmssIHBhcmFtcyB9ID0gYXdhaXQgcmVzb2x2ZVByb3BlcnRpZXMoe1xuICAgICAgICAgICAgbmV0d29yazogdGhpcy5nZXROZXR3b3JrKCksXG4gICAgICAgICAgICBwYXJhbXM6IHRoaXMuI3BlcmZvcm0oeyBtZXRob2Q6IFwiZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCIsIGhhc2ggfSlcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYXJhbXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29tZSBiYWNrZW5kcyBkaWQgbm90IGJhY2tmaWxsIHRoZSBlZmZlY3RpdmVHYXNQcmljZSBpbnRvIG9sZCB0cmFuc2FjdGlvbnNcbiAgICAgICAgLy8gaW4gdGhlIHJlY2VpcHQsIHNvIHdlIGxvb2sgaXQgdXAgbWFudWFsbHkgYW5kIGluamVjdCBpdC5cbiAgICAgICAgaWYgKHBhcmFtcy5nYXNQcmljZSA9PSBudWxsICYmIHBhcmFtcy5lZmZlY3RpdmVHYXNQcmljZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCB0eCA9IGF3YWl0IHRoaXMuI3BlcmZvcm0oeyBtZXRob2Q6IFwiZ2V0VHJhbnNhY3Rpb25cIiwgaGFzaCB9KTtcbiAgICAgICAgICAgIGlmICh0eCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVwb3J0IHRoaXM7IGNvdWxkIG5vdCBmaW5kIHR4IG9yIGVmZmVjdGl2ZUdhc1ByaWNlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyYW1zLmVmZmVjdGl2ZUdhc1ByaWNlID0gdHguZ2FzUHJpY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBUcmFuc2FjdGlvblJlY2VpcHQocGFyYW1zLCBuZXR3b3JrKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0VHJhbnNhY3Rpb25SZXN1bHQoaGFzaCkge1xuICAgICAgICBjb25zdCB7IHJlc3VsdCB9ID0gYXdhaXQgcmVzb2x2ZVByb3BlcnRpZXMoe1xuICAgICAgICAgICAgbmV0d29yazogdGhpcy5nZXROZXR3b3JrKCksXG4gICAgICAgICAgICByZXN1bHQ6IHRoaXMuI3BlcmZvcm0oeyBtZXRob2Q6IFwiZ2V0VHJhbnNhY3Rpb25SZXN1bHRcIiwgaGFzaCB9KVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGV4bGlmeShyZXN1bHQpO1xuICAgIH1cbiAgICAvLyBCbG9vbS1maWx0ZXIgUXVlcmllc1xuICAgIGFzeW5jIGdldExvZ3MoX2ZpbHRlcikge1xuICAgICAgICBsZXQgZmlsdGVyID0gdGhpcy5fZ2V0RmlsdGVyKF9maWx0ZXIpO1xuICAgICAgICBpZiAoaXNQcm9taXNlKGZpbHRlcikpIHtcbiAgICAgICAgICAgIGZpbHRlciA9IGF3YWl0IGZpbHRlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IG5ldHdvcmssIHBhcmFtcyB9ID0gYXdhaXQgcmVzb2x2ZVByb3BlcnRpZXMoe1xuICAgICAgICAgICAgbmV0d29yazogdGhpcy5nZXROZXR3b3JrKCksXG4gICAgICAgICAgICBwYXJhbXM6IHRoaXMuI3BlcmZvcm0oeyBtZXRob2Q6IFwiZ2V0TG9nc1wiLCBmaWx0ZXIgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXJhbXMubWFwKChwKSA9PiB0aGlzLl93cmFwTG9nKHAsIG5ldHdvcmspKTtcbiAgICB9XG4gICAgLy8gRU5TXG4gICAgX2dldFByb3ZpZGVyKGNoYWluSWQpIHtcbiAgICAgICAgYXNzZXJ0KGZhbHNlLCBcInByb3ZpZGVyIGNhbm5vdCBjb25uZWN0IHRvIHRhcmdldCBuZXR3b3JrXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJfZ2V0UHJvdmlkZXIoKVwiXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBnZXRSZXNvbHZlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBFbnNSZXNvbHZlci5mcm9tTmFtZSh0aGlzLCBuYW1lKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0QXZhdGFyKG5hbWUpIHtcbiAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBhd2FpdCB0aGlzLmdldFJlc29sdmVyKG5hbWUpO1xuICAgICAgICBpZiAocmVzb2x2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCByZXNvbHZlci5nZXRBdmF0YXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgcmVzb2x2ZU5hbWUobmFtZSkge1xuICAgICAgICBjb25zdCByZXNvbHZlciA9IGF3YWl0IHRoaXMuZ2V0UmVzb2x2ZXIobmFtZSk7XG4gICAgICAgIGlmIChyZXNvbHZlcikge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJlc29sdmVyLmdldEFkZHJlc3MoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgbG9va3VwQWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgICAgIGFkZHJlc3MgPSBnZXRBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICBjb25zdCBub2RlID0gbmFtZWhhc2goYWRkcmVzcy5zdWJzdHJpbmcoMikudG9Mb3dlckNhc2UoKSArIFwiLmFkZHIucmV2ZXJzZVwiKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGVuc0FkZHIgPSBhd2FpdCBFbnNSZXNvbHZlci5nZXRFbnNBZGRyZXNzKHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgZW5zQ29udHJhY3QgPSBuZXcgQ29udHJhY3QoZW5zQWRkciwgW1xuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb24gcmVzb2x2ZXIoYnl0ZXMzMikgdmlldyByZXR1cm5zIChhZGRyZXNzKVwiXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVyID0gYXdhaXQgZW5zQ29udHJhY3QucmVzb2x2ZXIobm9kZSk7XG4gICAgICAgICAgICBpZiAocmVzb2x2ZXIgPT0gbnVsbCB8fCByZXNvbHZlciA9PT0gWmVyb0FkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVyQ29udHJhY3QgPSBuZXcgQ29udHJhY3QocmVzb2x2ZXIsIFtcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uIG5hbWUoYnl0ZXMzMikgdmlldyByZXR1cm5zIChzdHJpbmcpXCJcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGF3YWl0IHJlc29sdmVyQ29udHJhY3QubmFtZShub2RlKTtcbiAgICAgICAgICAgIC8vIEZhaWxlZCBmb3J3YXJkIHJlc29sdXRpb25cbiAgICAgICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgdGhpcy5yZXNvbHZlTmFtZShuYW1lKTtcbiAgICAgICAgICAgIGlmIChjaGVjayAhPT0gYWRkcmVzcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBObyBkYXRhIHdhcyByZXR1cm5lZCBmcm9tIHRoZSByZXNvbHZlclxuICAgICAgICAgICAgaWYgKGlzRXJyb3IoZXJyb3IsIFwiQkFEX0RBVEFcIikgJiYgZXJyb3IudmFsdWUgPT09IFwiMHhcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU29tZXRoaW5nIHJlZXJ0ZWRcbiAgICAgICAgICAgIGlmIChpc0Vycm9yKGVycm9yLCBcIkNBTExfRVhDRVBUSU9OXCIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgd2FpdEZvclRyYW5zYWN0aW9uKGhhc2gsIF9jb25maXJtcywgdGltZW91dCkge1xuICAgICAgICBjb25zdCBjb25maXJtcyA9IChfY29uZmlybXMgIT0gbnVsbCkgPyBfY29uZmlybXMgOiAxO1xuICAgICAgICBpZiAoY29uZmlybXMgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFRyYW5zYWN0aW9uUmVjZWlwdChoYXNoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgbGV0IHRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKGFzeW5jIChibG9ja051bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCB0aGlzLmdldFRyYW5zYWN0aW9uUmVjZWlwdChoYXNoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY2VpcHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrTnVtYmVyIC0gcmVjZWlwdC5ibG9ja051bWJlciArIDEgPj0gY29uZmlybXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlY2VpcHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcy5vZmYoXCJibG9ja1wiLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVFRVwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMub25jZShcImJsb2NrXCIsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZihcImJsb2NrXCIsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG1ha2VFcnJvcihcInRpbWVvdXRcIiwgXCJUSU1FT1VUXCIsIHsgcmVhc29uOiBcInRpbWVvdXRcIiB9KSk7XG4gICAgICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaXN0ZW5lcihhd2FpdCB0aGlzLmdldEJsb2NrTnVtYmVyKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgd2FpdEZvckJsb2NrKGJsb2NrVGFnKSB7XG4gICAgICAgIGFzc2VydChmYWxzZSwgXCJub3QgaW1wbGVtZW50ZWQgeWV0XCIsIFwiTk9UX0lNUExFTUVOVEVEXCIsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJ3YWl0Rm9yQmxvY2tcIlxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIENsZWFyIGEgdGltZXIgY3JlYXRlZCB1c2luZyB0aGUgW1tfc2V0VGltZW91dF1dIG1ldGhvZC5cbiAgICAgKi9cbiAgICBfY2xlYXJUaW1lb3V0KHRpbWVySWQpIHtcbiAgICAgICAgY29uc3QgdGltZXIgPSB0aGlzLiN0aW1lcnMuZ2V0KHRpbWVySWQpO1xuICAgICAgICBpZiAoIXRpbWVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVyLnRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIudGltZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3RpbWVycy5kZWxldGUodGltZXJJZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDcmVhdGUgYSB0aW1lciB0aGF0IHdpbGwgZXhlY3V0ZSAlJWZ1bmMlJSBhZnRlciBhdCBsZWFzdCAlJXRpbWVvdXQlJVxuICAgICAqICAoaW4gbXMpLiBJZiAlJXRpbWVvdXQlJSBpcyB1bnNwZWNpZmllZCwgdGhlbiAlJWZ1bmMlJSB3aWxsIGV4ZWN1dGVcbiAgICAgKiAgaW4gdGhlIG5leHQgZXZlbnQgbG9vcC5cbiAgICAgKlxuICAgICAqICBbUGF1c2luZ10oQWJzdHJhY3RQcm92aWRlci1wYXVzZWQpIHRoZSBwcm92aWRlciB3aWxsIHBhdXNlIGFueVxuICAgICAqICBhc3NvY2lhdGVkIHRpbWVycy5cbiAgICAgKi9cbiAgICBfc2V0VGltZW91dChfZnVuYywgdGltZW91dCkge1xuICAgICAgICBpZiAodGltZW91dCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aW1lcklkID0gdGhpcy4jbmV4dFRpbWVyKys7XG4gICAgICAgIGNvbnN0IGZ1bmMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiN0aW1lcnMuZGVsZXRlKHRpbWVySWQpO1xuICAgICAgICAgICAgX2Z1bmMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMucGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLiN0aW1lcnMuc2V0KHRpbWVySWQsIHsgdGltZXI6IG51bGwsIGZ1bmMsIHRpbWU6IHRpbWVvdXQgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoZnVuYywgdGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLiN0aW1lcnMuc2V0KHRpbWVySWQsIHsgdGltZXIsIGZ1bmMsIHRpbWU6IGdldFRpbWUoKSB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGltZXJJZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFBlcmZvcm0gJSVmdW5jJSUgb24gZWFjaCBzdWJzY3JpYmVyLlxuICAgICAqL1xuICAgIF9mb3JFYWNoU3Vic2NyaWJlcihmdW5jKSB7XG4gICAgICAgIGZvciAoY29uc3Qgc3ViIG9mIHRoaXMuI3N1YnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGZ1bmMoc3ViLnN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBTdWItY2xhc3NlcyBtYXkgb3ZlcnJpZGUgdGhpcyB0byBjdXN0b21pemUgc3Vic2NyaXB0aW9uXG4gICAgICogIGltcGxlbWVudGF0aW9ucy5cbiAgICAgKi9cbiAgICBfZ2V0U3Vic2NyaWJlcihzdWIpIHtcbiAgICAgICAgc3dpdGNoIChzdWIudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImRlYnVnXCI6XG4gICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgIGNhc2UgXCJuZXR3b3JrXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVbm1hbmFnZWRTdWJzY3JpYmVyKHN1Yi50eXBlKTtcbiAgICAgICAgICAgIGNhc2UgXCJibG9ja1wiOiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3Vic2NyaWJlciA9IG5ldyBQb2xsaW5nQmxvY2tTdWJzY3JpYmVyKHRoaXMpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIucG9sbGluZ0ludGVydmFsID0gdGhpcy5wb2xsaW5nSW50ZXJ2YWw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwic2FmZVwiOlxuICAgICAgICAgICAgY2FzZSBcImZpbmFsaXplZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUG9sbGluZ0Jsb2NrVGFnU3Vic2NyaWJlcih0aGlzLCBzdWIudHlwZSk7XG4gICAgICAgICAgICBjYXNlIFwiZXZlbnRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBvbGxpbmdFdmVudFN1YnNjcmliZXIodGhpcywgc3ViLmZpbHRlcik7XG4gICAgICAgICAgICBjYXNlIFwidHJhbnNhY3Rpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBvbGxpbmdUcmFuc2FjdGlvblN1YnNjcmliZXIodGhpcywgc3ViLmhhc2gpO1xuICAgICAgICAgICAgY2FzZSBcIm9ycGhhblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUG9sbGluZ09ycGhhblN1YnNjcmliZXIodGhpcywgc3ViLmZpbHRlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBldmVudDogJHtzdWIudHlwZX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIElmIGEgW1tTdWJzY3JpYmVyXV0gZmFpbHMgYW5kIG5lZWRzIHRvIHJlcGxhY2UgaXRzZWxmLCB0aGlzXG4gICAgICogIG1ldGhvZCBtYXkgYmUgdXNlZC5cbiAgICAgKlxuICAgICAqICBGb3IgZXhhbXBsZSwgdGhpcyBpcyB1c2VkIGZvciBwcm92aWRlcnMgd2hlbiB1c2luZyB0aGVcbiAgICAgKiAgYGBldGhfZ2V0RmlsdGVyQ2hhbmdlc2BgIG1ldGhvZCwgd2hpY2ggY2FuIHJldHVybiBudWxsIGlmIHN0YXRlXG4gICAgICogIGZpbHRlcnMgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGJhY2tlbmQsIGFsbG93aW5nIHRoZSBTdWJzY3JpYmVyXG4gICAgICogIHRvIHN3YXAgaW4gYSBbW1BvbGxpbmdFdmVudFN1YnNjcmliZXJdXS5cbiAgICAgKi9cbiAgICBfcmVjb3ZlclN1YnNjcmliZXIob2xkU3ViLCBuZXdTdWIpIHtcbiAgICAgICAgZm9yIChjb25zdCBzdWIgb2YgdGhpcy4jc3Vicy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgaWYgKHN1Yi5zdWJzY3JpYmVyID09PSBvbGRTdWIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3ViLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViLnN1YnNjcmliZXIuc3RvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdWIuc3Vic2NyaWJlciA9IG5ld1N1YjtcbiAgICAgICAgICAgICAgICBpZiAoc3ViLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3U3ViLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLiNwYXVzZWRTdGF0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1N1Yi5wYXVzZSh0aGlzLiNwYXVzZWRTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jICNoYXNTdWIoZXZlbnQsIGVtaXRBcmdzKSB7XG4gICAgICAgIGxldCBzdWIgPSBhd2FpdCBnZXRTdWJzY3JpcHRpb24oZXZlbnQsIHRoaXMpO1xuICAgICAgICAvLyBUaGlzIGlzIGEgbG9nIHRoYXQgaXMgcmVtb3ZpbmcgYW4gZXhpc3RpbmcgbG9nOyB3ZSBhY3R1YWxseSB3YW50XG4gICAgICAgIC8vIHRvIGVtaXQgYW4gb3JwaGFuIGV2ZW50IGZvciB0aGUgcmVtb3ZlZCBsb2dcbiAgICAgICAgaWYgKHN1Yi50eXBlID09PSBcImV2ZW50XCIgJiYgZW1pdEFyZ3MgJiYgZW1pdEFyZ3MubGVuZ3RoID4gMCAmJiBlbWl0QXJnc1swXS5yZW1vdmVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdWIgPSBhd2FpdCBnZXRTdWJzY3JpcHRpb24oeyBvcnBoYW46IFwiZHJvcC1sb2dcIiwgbG9nOiBlbWl0QXJnc1swXSB9LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy4jc3Vicy5nZXQoc3ViLnRhZykgfHwgbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgI2dldFN1YihldmVudCkge1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBhd2FpdCBnZXRTdWJzY3JpcHRpb24oZXZlbnQsIHRoaXMpO1xuICAgICAgICAvLyBQcmV2ZW50IHRhbXBlcmluZyB3aXRoIG91ciB0YWcgaW4gYW55IHN1YmNsYXNzJyBfZ2V0U3Vic2NyaWJlclxuICAgICAgICBjb25zdCB0YWcgPSBzdWJzY3JpcHRpb24udGFnO1xuICAgICAgICBsZXQgc3ViID0gdGhpcy4jc3Vicy5nZXQodGFnKTtcbiAgICAgICAgaWYgKCFzdWIpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YnNjcmliZXIgPSB0aGlzLl9nZXRTdWJzY3JpYmVyKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzYWJsZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICAgICAgICBjb25zdCBuYW1lTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgc3ViID0geyBzdWJzY3JpYmVyLCB0YWcsIGFkZHJlc3NhYmxlTWFwLCBuYW1lTWFwLCBzdGFydGVkOiBmYWxzZSwgbGlzdGVuZXJzOiBbXSB9O1xuICAgICAgICAgICAgdGhpcy4jc3Vicy5zZXQodGFnLCBzdWIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWI7XG4gICAgfVxuICAgIGFzeW5jIG9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICBjb25zdCBzdWIgPSBhd2FpdCB0aGlzLiNnZXRTdWIoZXZlbnQpO1xuICAgICAgICBzdWIubGlzdGVuZXJzLnB1c2goeyBsaXN0ZW5lciwgb25jZTogZmFsc2UgfSk7XG4gICAgICAgIGlmICghc3ViLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHN1Yi5zdWJzY3JpYmVyLnN0YXJ0KCk7XG4gICAgICAgICAgICBzdWIuc3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy4jcGF1c2VkU3RhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHN1Yi5zdWJzY3JpYmVyLnBhdXNlKHRoaXMuI3BhdXNlZFN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYXN5bmMgb25jZShldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgY29uc3Qgc3ViID0gYXdhaXQgdGhpcy4jZ2V0U3ViKGV2ZW50KTtcbiAgICAgICAgc3ViLmxpc3RlbmVycy5wdXNoKHsgbGlzdGVuZXIsIG9uY2U6IHRydWUgfSk7XG4gICAgICAgIGlmICghc3ViLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHN1Yi5zdWJzY3JpYmVyLnN0YXJ0KCk7XG4gICAgICAgICAgICBzdWIuc3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy4jcGF1c2VkU3RhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHN1Yi5zdWJzY3JpYmVyLnBhdXNlKHRoaXMuI3BhdXNlZFN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYXN5bmMgZW1pdChldmVudCwgLi4uYXJncykge1xuICAgICAgICBjb25zdCBzdWIgPSBhd2FpdCB0aGlzLiNoYXNTdWIoZXZlbnQsIGFyZ3MpO1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBub3Qgc3Vic2NyaXB0aW9uIG9yIGlmIGEgcmVjZW50IGVtaXQgcmVtb3ZlZFxuICAgICAgICAvLyB0aGUgbGFzdCBvZiB0aGVtICh3aGljaCBhbHNvIGRlbGV0ZWQgdGhlIHN1YikgZG8gbm90aGluZ1xuICAgICAgICBpZiAoIXN1YiB8fCBzdWIubGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIDtcbiAgICAgICAgY29uc3QgY291bnQgPSBzdWIubGlzdGVuZXJzLmxlbmd0aDtcbiAgICAgICAgc3ViLmxpc3RlbmVycyA9IHN1Yi5saXN0ZW5lcnMuZmlsdGVyKCh7IGxpc3RlbmVyLCBvbmNlIH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBuZXcgRXZlbnRQYXlsb2FkKHRoaXMsIChvbmNlID8gbnVsbCA6IGxpc3RlbmVyKSwgZXZlbnQpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIC4uLmFyZ3MsIHBheWxvYWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgIHJldHVybiAhb25jZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzdWIubGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHN1Yi5zdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgc3ViLnN1YnNjcmliZXIuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy4jc3Vicy5kZWxldGUoc3ViLnRhZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChjb3VudCA+IDApO1xuICAgIH1cbiAgICBhc3luYyBsaXN0ZW5lckNvdW50KGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgY29uc3Qgc3ViID0gYXdhaXQgdGhpcy4jaGFzU3ViKGV2ZW50KTtcbiAgICAgICAgICAgIGlmICghc3ViKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3ViLmxpc3RlbmVycy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgZm9yIChjb25zdCB7IGxpc3RlbmVycyB9IG9mIHRoaXMuI3N1YnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHRvdGFsICs9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgIH1cbiAgICBhc3luYyBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBzdWIgPSBhd2FpdCB0aGlzLiNoYXNTdWIoZXZlbnQpO1xuICAgICAgICAgICAgaWYgKCFzdWIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3ViLmxpc3RlbmVycy5tYXAoKHsgbGlzdGVuZXIgfSkgPT4gbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCB7IGxpc3RlbmVycyB9IG9mIHRoaXMuI3N1YnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQobGlzdGVuZXJzLm1hcCgoeyBsaXN0ZW5lciB9KSA9PiBsaXN0ZW5lcikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGFzeW5jIG9mZihldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgY29uc3Qgc3ViID0gYXdhaXQgdGhpcy4jaGFzU3ViKGV2ZW50KTtcbiAgICAgICAgaWYgKCFzdWIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBzdWIubGlzdGVuZXJzLm1hcCgoeyBsaXN0ZW5lciB9KSA9PiBsaXN0ZW5lcikuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIHN1Yi5saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHN1Yi5saXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoc3ViLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICBzdWIuc3Vic2NyaWJlci5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLiNzdWJzLmRlbGV0ZShzdWIudGFnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYXN5bmMgcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgY29uc3QgeyB0YWcsIHN0YXJ0ZWQsIHN1YnNjcmliZXIgfSA9IGF3YWl0IHRoaXMuI2dldFN1YihldmVudCk7XG4gICAgICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy4jc3Vicy5kZWxldGUodGFnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW3RhZywgeyBzdGFydGVkLCBzdWJzY3JpYmVyIH1dIG9mIHRoaXMuI3N1YnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy4jc3Vicy5kZWxldGUodGFnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gQWxpYXMgZm9yIFwib25cIlxuICAgIGFzeW5jIGFkZExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICAvLyBBbGlhcyBmb3IgXCJvZmZcIlxuICAgIGFzeW5jIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gdGhpcy5vZmYoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIElmIHRoaXMgcHJvdmlkZXIgaGFzIGJlZW4gZGVzdHJveWVkIHVzaW5nIHRoZSBbW2Rlc3Ryb3ldXSBtZXRob2QuXG4gICAgICpcbiAgICAgKiAgT25jZSBkZXN0cm95ZWQsIGFsbCByZXNvdXJjZXMgYXJlIHJlY2xhaW1lZCwgaW50ZXJuYWwgZXZlbnQgbG9vcHNcbiAgICAgKiAgYW5kIHRpbWVycyBhcmUgY2xlYW5lZCB1cCBhbmQgbm8gZnVydGhlciByZXF1ZXN0cyBtYXkgYmUgc2VudCB0b1xuICAgICAqICB0aGUgcHJvdmlkZXIuXG4gICAgICovXG4gICAgZ2V0IGRlc3Ryb3llZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2Rlc3Ryb3llZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFN1Yi1jbGFzc2VzIG1heSB1c2UgdGhpcyB0byBzaHV0ZG93biBhbnkgc29ja2V0cyBvciByZWxlYXNlIHRoZWlyXG4gICAgICogIHJlc291cmNlcyBhbmQgcmVqZWN0IGFueSBwZW5kaW5nIHJlcXVlc3RzLlxuICAgICAqXG4gICAgICogIFN1Yi1jbGFzc2VzICoqbXVzdCoqIGNhbGwgYGBzdXBlci5kZXN0cm95KClgYC5cbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICAvLyBTdG9wIGFsbCBsaXN0ZW5lcnNcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgLy8gU2h1dCBkb3duIGFsbCB0aWVtcnNcbiAgICAgICAgZm9yIChjb25zdCB0aW1lcklkIG9mIHRoaXMuI3RpbWVycy5rZXlzKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNkZXN0cm95ZWQgPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgV2hldGhlciB0aGUgcHJvdmlkZXIgaXMgY3VycmVudGx5IHBhdXNlZC5cbiAgICAgKlxuICAgICAqICBBIHBhdXNlZCBwcm92aWRlciB3aWxsIG5vdCBlbWl0IGFueSBldmVudHMsIGFuZCBnZW5lcmFsbHkgc2hvdWxkXG4gICAgICogIG5vdCBtYWtlIGFueSByZXF1ZXN0cyB0byB0aGUgbmV0d29yaywgYnV0IHRoYXQgaXMgdXAgdG8gc3ViLWNsYXNzZXNcbiAgICAgKiAgdG8gbWFuYWdlLlxuICAgICAqXG4gICAgICogIFNldHRpbmcgYGBwYXVzZWQgPSB0cnVlYGAgaXMgaWRlbnRpY2FsIHRvIGNhbGxpbmcgYGAucGF1c2UoZmFsc2UpYGAsXG4gICAgICogIHdoaWNoIHdpbGwgYnVmZmVyIGFueSBldmVudHMgdGhhdCBvY2N1ciB3aGlsZSBwYXVzZWQgdW50aWwgdGhlXG4gICAgICogIHByb3ZpZGVyIGlzIHVucGF1c2VkLlxuICAgICAqL1xuICAgIGdldCBwYXVzZWQoKSB7IHJldHVybiAodGhpcy4jcGF1c2VkU3RhdGUgIT0gbnVsbCk7IH1cbiAgICBzZXQgcGF1c2VkKHBhdXNlKSB7XG4gICAgICAgIGlmICghIXBhdXNlID09PSB0aGlzLnBhdXNlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBhdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bWUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGF1c2UoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBQYXVzZSB0aGUgcHJvdmlkZXIuIElmICUlZHJvcFdoaWxlUGF1c2VkJSUsIGFueSBldmVudHMgdGhhdCBvY2N1clxuICAgICAqICB3aGlsZSBwYXVzZWQgYXJlIGRyb3BwZWQsIG90aGVyd2lzZSBhbGwgZXZlbnRzIHdpbGwgYmUgZW1pdHRlZCBvbmNlXG4gICAgICogIHRoZSBwcm92aWRlciBpcyB1bnBhdXNlZC5cbiAgICAgKi9cbiAgICBwYXVzZShkcm9wV2hpbGVQYXVzZWQpIHtcbiAgICAgICAgdGhpcy4jbGFzdEJsb2NrTnVtYmVyID0gLTE7XG4gICAgICAgIGlmICh0aGlzLiNwYXVzZWRTdGF0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy4jcGF1c2VkU3RhdGUgPT0gISFkcm9wV2hpbGVQYXVzZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3NlcnQoZmFsc2UsIFwiY2Fubm90IGNoYW5nZSBwYXVzZSB0eXBlOyByZXN1bWUgZmlyc3RcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJwYXVzZVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9mb3JFYWNoU3Vic2NyaWJlcigocykgPT4gcy5wYXVzZShkcm9wV2hpbGVQYXVzZWQpKTtcbiAgICAgICAgdGhpcy4jcGF1c2VkU3RhdGUgPSAhIWRyb3BXaGlsZVBhdXNlZDtcbiAgICAgICAgZm9yIChjb25zdCB0aW1lciBvZiB0aGlzLiN0aW1lcnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIC8vIENsZWFyIHRoZSB0aW1lclxuICAgICAgICAgICAgaWYgKHRpbWVyLnRpbWVyKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyLnRpbWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJlbWFpbmluZyB0aW1lIG5lZWRlZCBmb3Igd2hlbiB3ZSBiZWNvbWUgdW5wYXVzZWRcbiAgICAgICAgICAgIHRpbWVyLnRpbWUgPSBnZXRUaW1lKCkgLSB0aW1lci50aW1lO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXN1bWUgdGhlIHByb3ZpZGVyLlxuICAgICAqL1xuICAgIHJlc3VtZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3BhdXNlZFN0YXRlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9mb3JFYWNoU3Vic2NyaWJlcigocykgPT4gcy5yZXN1bWUoKSk7XG4gICAgICAgIHRoaXMuI3BhdXNlZFN0YXRlID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCB0aW1lciBvZiB0aGlzLiN0aW1lcnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIC8vIFJlbWFpbmluZyB0aW1lIHdoZW4gd2Ugd2VyZSBwYXVzZWRcbiAgICAgICAgICAgIGxldCB0aW1lb3V0ID0gdGltZXIudGltZTtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0IDwgMCkge1xuICAgICAgICAgICAgICAgIHRpbWVvdXQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU3RhcnQgdGltZSAoaW4gY2F1c2UgcGF1c2VkLCBzbyB3ZSBjb24gY29tcHV0ZSByZW1haW5pbmYgdGltZSlcbiAgICAgICAgICAgIHRpbWVyLnRpbWUgPSBnZXRUaW1lKCk7XG4gICAgICAgICAgICAvLyBTdGFydCB0aGUgdGltZXJcbiAgICAgICAgICAgIHNldFRpbWVvdXQodGltZXIuZnVuYywgdGltZW91dCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBfcGFyc2VTdHJpbmcocmVzdWx0LCBzdGFydCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gX3BhcnNlQnl0ZXMocmVzdWx0LCBzdGFydCk7XG4gICAgICAgIGlmIChieXRlcykge1xuICAgICAgICAgICAgcmV0dXJuIHRvVXRmOFN0cmluZyhieXRlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIF9wYXJzZUJ5dGVzKHJlc3VsdCwgc3RhcnQpIHtcbiAgICBpZiAocmVzdWx0ID09PSBcIjB4XCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGdldE51bWJlcihkYXRhU2xpY2UocmVzdWx0LCBzdGFydCwgc3RhcnQgKyAzMikpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBnZXROdW1iZXIoZGF0YVNsaWNlKHJlc3VsdCwgb2Zmc2V0LCBvZmZzZXQgKyAzMikpO1xuICAgICAgICByZXR1cm4gZGF0YVNsaWNlKHJlc3VsdCwgb2Zmc2V0ICsgMzIsIG9mZnNldCArIDMyICsgbGVuZ3RoKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIG51bVBhZCh2YWx1ZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRvQmVBcnJheSh2YWx1ZSk7XG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPiAzMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnRlcm5hbDsgc2hvdWxkIG5vdCBoYXBwZW5cIik7XG4gICAgfVxuICAgIGNvbnN0IHBhZGRlZCA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgICBwYWRkZWQuc2V0KHJlc3VsdCwgMzIgLSByZXN1bHQubGVuZ3RoKTtcbiAgICByZXR1cm4gcGFkZGVkO1xufVxuZnVuY3Rpb24gYnl0ZXNQYWQodmFsdWUpIHtcbiAgICBpZiAoKHZhbHVlLmxlbmd0aCAlIDMyKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KE1hdGguY2VpbCh2YWx1ZS5sZW5ndGggLyAzMikgKiAzMik7XG4gICAgcmVzdWx0LnNldCh2YWx1ZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IGVtcHR5ID0gbmV3IFVpbnQ4QXJyYXkoW10pO1xuLy8gQUJJIEVuY29kZXMgYSBzZXJpZXMgb2YgKGJ5dGVzLCBieXRlcywgLi4uKVxuZnVuY3Rpb24gZW5jb2RlQnl0ZXMoZGF0YXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgYnl0ZUNvdW50ID0gMDtcbiAgICAvLyBBZGQgcGxhY2UtaG9sZGVycyBmb3IgcG9pbnRlcnMgYXMgd2UgYWRkIGl0ZW1zXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhcy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQucHVzaChlbXB0eSk7XG4gICAgICAgIGJ5dGVDb3VudCArPSAzMjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBkYXRhID0gZ2V0Qnl0ZXMoZGF0YXNbaV0pO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIGJ5dGVzIG9mZnNldFxuICAgICAgICByZXN1bHRbaV0gPSBudW1QYWQoYnl0ZUNvdW50KTtcbiAgICAgICAgLy8gVGhlIGxlbmd0aCBhbmQgcGFkZGVkIHZhbHVlIG9mIGRhdGFcbiAgICAgICAgcmVzdWx0LnB1c2gobnVtUGFkKGRhdGEubGVuZ3RoKSk7XG4gICAgICAgIHJlc3VsdC5wdXNoKGJ5dGVzUGFkKGRhdGEpKTtcbiAgICAgICAgYnl0ZUNvdW50ICs9IDMyICsgTWF0aC5jZWlsKGRhdGEubGVuZ3RoIC8gMzIpICogMzI7XG4gICAgfVxuICAgIHJldHVybiBjb25jYXQocmVzdWx0KTtcbn1cbmNvbnN0IHplcm9zID0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtcbmZ1bmN0aW9uIHBhcnNlT2ZmY2hhaW5Mb29rdXAoZGF0YSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgc2VuZGVyOiBcIlwiLCB1cmxzOiBbXSwgY2FsbGRhdGE6IFwiXCIsIHNlbGVjdG9yOiBcIlwiLCBleHRyYURhdGE6IFwiXCIsIGVycm9yQXJnczogW11cbiAgICB9O1xuICAgIGFzc2VydChkYXRhTGVuZ3RoKGRhdGEpID49IDUgKiAzMiwgXCJpbnN1ZmZpY2llbnQgT2ZmY2hhaW5Mb29rdXAgZGF0YVwiLCBcIk9GRkNIQUlOX0ZBVUxUXCIsIHtcbiAgICAgICAgcmVhc29uOiBcImluc3VmZmljaWVudCBPZmZjaGFpbkxvb2t1cCBkYXRhXCJcbiAgICB9KTtcbiAgICBjb25zdCBzZW5kZXIgPSBkYXRhU2xpY2UoZGF0YSwgMCwgMzIpO1xuICAgIGFzc2VydChkYXRhU2xpY2Uoc2VuZGVyLCAwLCAxMikgPT09IGRhdGFTbGljZSh6ZXJvcywgMCwgMTIpLCBcImNvcnJ1cHQgT2ZmY2hhaW5Mb29rdXAgc2VuZGVyXCIsIFwiT0ZGQ0hBSU5fRkFVTFRcIiwge1xuICAgICAgICByZWFzb246IFwiY29ycnVwdCBPZmZjaGFpbkxvb2t1cCBzZW5kZXJcIlxuICAgIH0pO1xuICAgIHJlc3VsdC5zZW5kZXIgPSBkYXRhU2xpY2Uoc2VuZGVyLCAxMik7XG4gICAgLy8gUmVhZCB0aGUgVVJMcyBmcm9tIHRoZSByZXNwb25zZVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVybHMgPSBbXTtcbiAgICAgICAgY29uc3QgdXJsc09mZnNldCA9IGdldE51bWJlcihkYXRhU2xpY2UoZGF0YSwgMzIsIDY0KSk7XG4gICAgICAgIGNvbnN0IHVybHNMZW5ndGggPSBnZXROdW1iZXIoZGF0YVNsaWNlKGRhdGEsIHVybHNPZmZzZXQsIHVybHNPZmZzZXQgKyAzMikpO1xuICAgICAgICBjb25zdCB1cmxzRGF0YSA9IGRhdGFTbGljZShkYXRhLCB1cmxzT2Zmc2V0ICsgMzIpO1xuICAgICAgICBmb3IgKGxldCB1ID0gMDsgdSA8IHVybHNMZW5ndGg7IHUrKykge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gX3BhcnNlU3RyaW5nKHVybHNEYXRhLCB1ICogMzIpO1xuICAgICAgICAgICAgaWYgKHVybCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWJvcnRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cmxzLnB1c2godXJsKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQudXJscyA9IHVybHM7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBhc3NlcnQoZmFsc2UsIFwiY29ycnVwdCBPZmZjaGFpbkxvb2t1cCB1cmxzXCIsIFwiT0ZGQ0hBSU5fRkFVTFRcIiwge1xuICAgICAgICAgICAgcmVhc29uOiBcImNvcnJ1cHQgT2ZmY2hhaW5Mb29rdXAgdXJsc1wiXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBHZXQgdGhlIENDSVAgY2FsbGRhdGEgdG8gZm9yd2FyZFxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNhbGxkYXRhID0gX3BhcnNlQnl0ZXMoZGF0YSwgNjQpO1xuICAgICAgICBpZiAoY2FsbGRhdGEgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWJvcnRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LmNhbGxkYXRhID0gY2FsbGRhdGE7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBhc3NlcnQoZmFsc2UsIFwiY29ycnVwdCBPZmZjaGFpbkxvb2t1cCBjYWxsZGF0YVwiLCBcIk9GRkNIQUlOX0ZBVUxUXCIsIHtcbiAgICAgICAgICAgIHJlYXNvbjogXCJjb3JydXB0IE9mZmNoYWluTG9va3VwIGNhbGxkYXRhXCJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEdldCB0aGUgY2FsbGJhY2tTZWxlY3RvciAoYnl0ZXM0KVxuICAgIGFzc2VydChkYXRhU2xpY2UoZGF0YSwgMTAwLCAxMjgpID09PSBkYXRhU2xpY2UoemVyb3MsIDAsIDI4KSwgXCJjb3JydXB0IE9mZmNoYWluTG9va3VwIGNhbGxiYWFja1NlbGVjdG9yXCIsIFwiT0ZGQ0hBSU5fRkFVTFRcIiwge1xuICAgICAgICByZWFzb246IFwiY29ycnVwdCBPZmZjaGFpbkxvb2t1cCBjYWxsYmFhY2tTZWxlY3RvclwiXG4gICAgfSk7XG4gICAgcmVzdWx0LnNlbGVjdG9yID0gZGF0YVNsaWNlKGRhdGEsIDk2LCAxMDApO1xuICAgIC8vIEdldCB0aGUgZXh0cmEgZGF0YSB0byBzZW5kIGJhY2sgdG8gdGhlIGNvbnRyYWN0IGFzIGNvbnRleHRcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBleHRyYURhdGEgPSBfcGFyc2VCeXRlcyhkYXRhLCAxMjgpO1xuICAgICAgICBpZiAoZXh0cmFEYXRhID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFib3J0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5leHRyYURhdGEgPSBleHRyYURhdGE7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBhc3NlcnQoZmFsc2UsIFwiY29ycnVwdCBPZmZjaGFpbkxvb2t1cCBleHRyYURhdGFcIiwgXCJPRkZDSEFJTl9GQVVMVFwiLCB7XG4gICAgICAgICAgICByZWFzb246IFwiY29ycnVwdCBPZmZjaGFpbkxvb2t1cCBleHRyYURhdGFcIlxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVzdWx0LmVycm9yQXJncyA9IFwic2VuZGVyLHVybHMsY2FsbGRhdGEsc2VsZWN0b3IsZXh0cmFEYXRhXCIuc3BsaXQoLywvKS5tYXAoKGspID0+IHJlc3VsdFtrXSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFic3RyYWN0LXByb3ZpZGVyLmpzLm1hcCIsIi8qKlxuICogIEdlbmVyYWxseSB0aGUgW1tXYWxsZXRdXSBhbmQgW1tKc29uUnBjU2lnbmVyXV0gYW5kIHRoZWlyIHN1Yi1jbGFzc2VzXG4gKiAgYXJlIHN1ZmZpY2VudCBmb3IgbW9zdCBkZXZlbG9wZXJzLCBidXQgdGhpcyBpcyBwcm92aWRlZCB0b1xuICogIGZhc2NpbGl0YXRlIG1vcmUgY29tcGxleCBTaWduZXJzLlxuICpcbiAqICBAX3NlY3Rpb246IGFwaS9wcm92aWRlcnMvYWJzdHJhY3Qtc2lnbmVyOiBTdWJjbGFzc2luZyBTaWduZXIgW2Fic3RyYWN0LXNpZ25lcl1cbiAqL1xuaW1wb3J0IHsgcmVzb2x2ZUFkZHJlc3MgfSBmcm9tIFwiLi4vYWRkcmVzcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tIFwiLi4vdHJhbnNhY3Rpb24vaW5kZXguanNcIjtcbmltcG9ydCB7IGRlZmluZVByb3BlcnRpZXMsIGdldEJpZ0ludCwgcmVzb2x2ZVByb3BlcnRpZXMsIGFzc2VydCwgYXNzZXJ0QXJndW1lbnQgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGNvcHlSZXF1ZXN0IH0gZnJvbSBcIi4vcHJvdmlkZXIuanNcIjtcbmZ1bmN0aW9uIGNoZWNrUHJvdmlkZXIoc2lnbmVyLCBvcGVyYXRpb24pIHtcbiAgICBpZiAoc2lnbmVyLnByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBzaWduZXIucHJvdmlkZXI7XG4gICAgfVxuICAgIGFzc2VydChmYWxzZSwgXCJtaXNzaW5nIHByb3ZpZGVyXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHsgb3BlcmF0aW9uIH0pO1xufVxuYXN5bmMgZnVuY3Rpb24gcG9wdWxhdGUoc2lnbmVyLCB0eCkge1xuICAgIGxldCBwb3AgPSBjb3B5UmVxdWVzdCh0eCk7XG4gICAgaWYgKHBvcC50byAhPSBudWxsKSB7XG4gICAgICAgIHBvcC50byA9IHJlc29sdmVBZGRyZXNzKHBvcC50bywgc2lnbmVyKTtcbiAgICB9XG4gICAgaWYgKHBvcC5mcm9tICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgZnJvbSA9IHBvcC5mcm9tO1xuICAgICAgICBwb3AuZnJvbSA9IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHNpZ25lci5nZXRBZGRyZXNzKCksXG4gICAgICAgICAgICByZXNvbHZlQWRkcmVzcyhmcm9tLCBzaWduZXIpXG4gICAgICAgIF0pLnRoZW4oKFthZGRyZXNzLCBmcm9tXSkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoYWRkcmVzcy50b0xvd2VyQ2FzZSgpID09PSBmcm9tLnRvTG93ZXJDYXNlKCksIFwidHJhbnNhY3Rpb24gZnJvbSBtaXNtYXRjaFwiLCBcInR4LmZyb21cIiwgZnJvbSk7XG4gICAgICAgICAgICByZXR1cm4gYWRkcmVzcztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwb3AuZnJvbSA9IHNpZ25lci5nZXRBZGRyZXNzKCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCByZXNvbHZlUHJvcGVydGllcyhwb3ApO1xufVxuLyoqXG4gKiAgQW4gKipBYnN0cmFjdFNpZ25lcioqIGluY2x1ZGVzIG1vc3Qgb2YgdGVoIGZ1bmN0aW9uYWxpdHkgcmVxdWlyZWRcbiAqICB0byBnZXQgYSBbW1NpZ25lcl1dIHdvcmtpbmcgYXMgZXhwZWN0ZWQsIGJ1dCByZXF1aXJlcyBhIGZld1xuICogIFNpZ25lci1zcGVjaWZpYyBtZXRob2RzIGJlIG92ZXJyaWRkZW4uXG4gKlxuICovXG5leHBvcnQgY2xhc3MgQWJzdHJhY3RTaWduZXIge1xuICAgIC8qKlxuICAgICAqICBUaGUgcHJvdmlkZXIgdGhpcyBzaWduZXIgaXMgY29ubmVjdGVkIHRvLlxuICAgICAqL1xuICAgIHByb3ZpZGVyO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3IFNpZ25lciBjb25uZWN0ZWQgdG8gJSVwcm92aWRlciUlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBwcm92aWRlcjogKHByb3ZpZGVyIHx8IG51bGwpIH0pO1xuICAgIH1cbiAgICBhc3luYyBnZXROb25jZShibG9ja1RhZykge1xuICAgICAgICByZXR1cm4gY2hlY2tQcm92aWRlcih0aGlzLCBcImdldFRyYW5zYWN0aW9uQ291bnRcIikuZ2V0VHJhbnNhY3Rpb25Db3VudChhd2FpdCB0aGlzLmdldEFkZHJlc3MoKSwgYmxvY2tUYWcpO1xuICAgIH1cbiAgICBhc3luYyBwb3B1bGF0ZUNhbGwodHgpIHtcbiAgICAgICAgY29uc3QgcG9wID0gYXdhaXQgcG9wdWxhdGUodGhpcywgdHgpO1xuICAgICAgICByZXR1cm4gcG9wO1xuICAgIH1cbiAgICBhc3luYyBwb3B1bGF0ZVRyYW5zYWN0aW9uKHR4KSB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gY2hlY2tQcm92aWRlcih0aGlzLCBcInBvcHVsYXRlVHJhbnNhY3Rpb25cIik7XG4gICAgICAgIGNvbnN0IHBvcCA9IGF3YWl0IHBvcHVsYXRlKHRoaXMsIHR4KTtcbiAgICAgICAgaWYgKHBvcC5ub25jZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBwb3Aubm9uY2UgPSBhd2FpdCB0aGlzLmdldE5vbmNlKFwicGVuZGluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9wLmdhc0xpbWl0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHBvcC5nYXNMaW1pdCA9IGF3YWl0IHRoaXMuZXN0aW1hdGVHYXMocG9wKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQb3B1bGF0ZSB0aGUgY2hhaW4gSURcbiAgICAgICAgY29uc3QgbmV0d29yayA9IGF3YWl0ICh0aGlzLnByb3ZpZGVyKS5nZXROZXR3b3JrKCk7XG4gICAgICAgIGlmIChwb3AuY2hhaW5JZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFpbklkID0gZ2V0QmlnSW50KHBvcC5jaGFpbklkKTtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KGNoYWluSWQgPT09IG5ldHdvcmsuY2hhaW5JZCwgXCJ0cmFuc2FjdGlvbiBjaGFpbklkIG1pc21hdGNoXCIsIFwidHguY2hhaW5JZFwiLCB0eC5jaGFpbklkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBvcC5jaGFpbklkID0gbmV0d29yay5jaGFpbklkO1xuICAgICAgICB9XG4gICAgICAgIC8vIERvIG5vdCBhbGxvdyBtaXhpbmcgcHJlLWVpcC0xNTU5IGFuZCBlaXAtMTU1OSBwcm9wZXJ0aWVzXG4gICAgICAgIGNvbnN0IGhhc0VpcDE1NTkgPSAocG9wLm1heEZlZVBlckdhcyAhPSBudWxsIHx8IHBvcC5tYXhQcmlvcml0eUZlZVBlckdhcyAhPSBudWxsKTtcbiAgICAgICAgaWYgKHBvcC5nYXNQcmljZSAhPSBudWxsICYmIChwb3AudHlwZSA9PT0gMiB8fCBoYXNFaXAxNTU5KSkge1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwiZWlwLTE1NTkgdHJhbnNhY3Rpb24gZG8gbm90IHN1cHBvcnQgZ2FzUHJpY2VcIiwgXCJ0eFwiLCB0eCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHBvcC50eXBlID09PSAwIHx8IHBvcC50eXBlID09PSAxKSAmJiBoYXNFaXAxNTU5KSB7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChmYWxzZSwgXCJwcmUtZWlwLTE1NTkgdHJhbnNhY3Rpb24gZG8gbm90IHN1cHBvcnQgbWF4RmVlUGVyR2FzL21heFByaW9yaXR5RmVlUGVyR2FzXCIsIFwidHhcIiwgdHgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgocG9wLnR5cGUgPT09IDIgfHwgcG9wLnR5cGUgPT0gbnVsbCkgJiYgKHBvcC5tYXhGZWVQZXJHYXMgIT0gbnVsbCAmJiBwb3AubWF4UHJpb3JpdHlGZWVQZXJHYXMgIT0gbnVsbCkpIHtcbiAgICAgICAgICAgIC8vIEZ1bGx5LWZvcm1lZCBFSVAtMTU1OSB0cmFuc2FjdGlvbiAoc2tpcCBnZXRGZWVEYXRhKVxuICAgICAgICAgICAgcG9wLnR5cGUgPSAyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBvcC50eXBlID09PSAwIHx8IHBvcC50eXBlID09PSAxKSB7XG4gICAgICAgICAgICAvLyBFeHBsaWNpdCBMZWdhY3kgb3IgRUlQLTI5MzAgdHJhbnNhY3Rpb25cbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gZ2V0IGZlZSBkYXRhIHRvIGRldGVybWluZSB0aGluZ3NcbiAgICAgICAgICAgIGNvbnN0IGZlZURhdGEgPSBhd2FpdCBwcm92aWRlci5nZXRGZWVEYXRhKCk7XG4gICAgICAgICAgICBhc3NlcnQoZmVlRGF0YS5nYXNQcmljZSAhPSBudWxsLCBcIm5ldHdvcmsgZG9lcyBub3Qgc3VwcG9ydCBnYXNQcmljZVwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcImdldEdhc1ByaWNlXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gUG9wdWxhdGUgbWlzc2luZyBnYXNQcmljZVxuICAgICAgICAgICAgaWYgKHBvcC5nYXNQcmljZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcG9wLmdhc1ByaWNlID0gZmVlRGF0YS5nYXNQcmljZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gZ2V0IGZlZSBkYXRhIHRvIGRldGVybWluZSB0aGluZ3NcbiAgICAgICAgICAgIGNvbnN0IGZlZURhdGEgPSBhd2FpdCBwcm92aWRlci5nZXRGZWVEYXRhKCk7XG4gICAgICAgICAgICBpZiAocG9wLnR5cGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gYXV0by1kZXRlY3QgdGhlIGludGVuZGVkIHR5cGUgb2YgdGhpcyB0cmFuc2FjdGlvbi4uLlxuICAgICAgICAgICAgICAgIGlmIChmZWVEYXRhLm1heEZlZVBlckdhcyAhPSBudWxsICYmIGZlZURhdGEubWF4UHJpb3JpdHlGZWVQZXJHYXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbmV0d29yayBzdXBwb3J0cyBFSVAtMTU1OSFcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBncmFkZSB0cmFuc2FjdGlvbiBmcm9tIG51bGwgdG8gZWlwLTE1NTlcbiAgICAgICAgICAgICAgICAgICAgcG9wLnR5cGUgPSAyO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9wLmdhc1ByaWNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzaW5nIGxlZ2FjeSBnYXNQcmljZSBwcm9wZXJ0eSBvbiBhbiBlaXAtMTU1OSBuZXR3b3JrLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gdXNlIGdhc1ByaWNlIGFzIGJvdGggZmVlIHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdhc1ByaWNlID0gcG9wLmdhc1ByaWNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBvcC5nYXNQcmljZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5tYXhGZWVQZXJHYXMgPSBnYXNQcmljZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5tYXhQcmlvcml0eUZlZVBlckdhcyA9IGdhc1ByaWNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUG9wdWxhdGUgbWlzc2luZyBmZWUgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcC5tYXhGZWVQZXJHYXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5tYXhGZWVQZXJHYXMgPSBmZWVEYXRhLm1heEZlZVBlckdhcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3AubWF4UHJpb3JpdHlGZWVQZXJHYXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcC5tYXhQcmlvcml0eUZlZVBlckdhcyA9IGZlZURhdGEubWF4UHJpb3JpdHlGZWVQZXJHYXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZmVlRGF0YS5nYXNQcmljZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5ldHdvcmsgZG9lc24ndCBzdXBwb3J0IEVJUC0xNTU5Li4uXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uLmJ1dCB0aGV5IGFyZSB0cnlpbmcgdG8gdXNlIEVJUC0xNTU5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KCFoYXNFaXAxNTU5LCBcIm5ldHdvcmsgZG9lcyBub3Qgc3VwcG9ydCBFSVAtMTU1OVwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwicG9wdWxhdGVUcmFuc2FjdGlvblwiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBQb3B1bGF0ZSBtaXNzaW5nIGZlZSBkYXRhXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3AuZ2FzUHJpY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wLmdhc1ByaWNlID0gZmVlRGF0YS5nYXNQcmljZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBFeHBsaWNpdGx5IHNldCB1bnR5cGVkIHRyYW5zYWN0aW9uIHRvIGxlZ2FjeVxuICAgICAgICAgICAgICAgICAgICAvLyBAVE9ETzogTWF5YmUgdGhpcyBzaG9sZCBhbGxvdyB0eXBlIDE/XG4gICAgICAgICAgICAgICAgICAgIHBvcC50eXBlID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGdldEZlZURhdGEgaGFzIGZhaWxlZCB1cy5cbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBcImZhaWxlZCB0byBnZXQgY29uc2lzdGVudCBmZWUgZGF0YVwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwic2lnbmVyLmdldEZlZURhdGFcIlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwb3AudHlwZSA9PT0gMikge1xuICAgICAgICAgICAgICAgIC8vIEV4cGxpY2l0bHkgdXNpbmcgRUlQLTE1NTlcbiAgICAgICAgICAgICAgICAvLyBQb3B1bGF0ZSBtaXNzaW5nIGZlZSBkYXRhXG4gICAgICAgICAgICAgICAgaWYgKHBvcC5tYXhGZWVQZXJHYXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwb3AubWF4RmVlUGVyR2FzID0gZmVlRGF0YS5tYXhGZWVQZXJHYXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwb3AubWF4UHJpb3JpdHlGZWVQZXJHYXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwb3AubWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBmZWVEYXRhLm1heFByaW9yaXR5RmVlUGVyR2FzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvL0BUT09EOiBEb24ndCBhd2FpdCBhbGwgb3ZlciB0aGUgcGxhY2U7IHNhdmUgdGhlbSB1cCBmb3JcbiAgICAgICAgLy8gdGhlIGVuZCBmb3IgYmV0dGVyIGJhdGNoaW5nXG4gICAgICAgIHJldHVybiBhd2FpdCByZXNvbHZlUHJvcGVydGllcyhwb3ApO1xuICAgIH1cbiAgICBhc3luYyBlc3RpbWF0ZUdhcyh0eCkge1xuICAgICAgICByZXR1cm4gY2hlY2tQcm92aWRlcih0aGlzLCBcImVzdGltYXRlR2FzXCIpLmVzdGltYXRlR2FzKGF3YWl0IHRoaXMucG9wdWxhdGVDYWxsKHR4KSk7XG4gICAgfVxuICAgIGFzeW5jIGNhbGwodHgpIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrUHJvdmlkZXIodGhpcywgXCJjYWxsXCIpLmNhbGwoYXdhaXQgdGhpcy5wb3B1bGF0ZUNhbGwodHgpKTtcbiAgICB9XG4gICAgYXN5bmMgcmVzb2x2ZU5hbWUobmFtZSkge1xuICAgICAgICBjb25zdCBwcm92aWRlciA9IGNoZWNrUHJvdmlkZXIodGhpcywgXCJyZXNvbHZlTmFtZVwiKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLnJlc29sdmVOYW1lKG5hbWUpO1xuICAgIH1cbiAgICBhc3luYyBzZW5kVHJhbnNhY3Rpb24odHgpIHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBjaGVja1Byb3ZpZGVyKHRoaXMsIFwic2VuZFRyYW5zYWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBwb3AgPSBhd2FpdCB0aGlzLnBvcHVsYXRlVHJhbnNhY3Rpb24odHgpO1xuICAgICAgICBkZWxldGUgcG9wLmZyb207XG4gICAgICAgIGNvbnN0IHR4T2JqID0gVHJhbnNhY3Rpb24uZnJvbShwb3ApO1xuICAgICAgICByZXR1cm4gYXdhaXQgcHJvdmlkZXIuYnJvYWRjYXN0VHJhbnNhY3Rpb24oYXdhaXQgdGhpcy5zaWduVHJhbnNhY3Rpb24odHhPYmopKTtcbiAgICB9XG59XG4vKipcbiAqICBBICoqVm9pZFNpZ25lcioqIGlzIGEgY2xhc3MgZGVpc2duZWQgdG8gYWxsb3cgYW4gYWRkcmVzcyB0byBiZSB1c2VkXG4gKiAgaW4gYW55IEFQSSB3aGljaCBhY2NlcHRzIGEgU2lnbmVyLCBidXQgZm9yIHdoaWNoIHRoZXJlIGFyZSBub1xuICogIGNyZWRlbnRpYWxzIGF2YWlsYWJsZSB0byBwZXJmb3JtIGFueSBhY3R1YWwgc2lnbmluZy5cbiAqXG4gKiAgVGhpcyBmb3IgZXhhbXBsZSBhbGxvdyBpbXBlcnNvbmF0aW5nIGFuIGFjY291bnQgZm9yIHRoZSBwdXJwb3NlIG9mXG4gKiAgc3RhdGljIGNhbGxzIG9yIGVzdGltYXRpbmcgZ2FzLCBidXQgZG9lcyBub3QgYWxsb3cgc2VuZGluZyB0cmFuc2FjdGlvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBWb2lkU2lnbmVyIGV4dGVuZHMgQWJzdHJhY3RTaWduZXIge1xuICAgIC8qKlxuICAgICAqICBUaGUgc2lnbmVyIGFkZHJlc3MuXG4gICAgICovXG4gICAgYWRkcmVzcztcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKlZvaWRTaWduZXIqKiB3aXRoICUlYWRkcmVzcyUlIGF0dGFjaGVkIHRvXG4gICAgICogICUlcHJvdmlkZXIlJS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhZGRyZXNzLCBwcm92aWRlcikge1xuICAgICAgICBzdXBlcihwcm92aWRlcik7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBhZGRyZXNzIH0pO1xuICAgIH1cbiAgICBhc3luYyBnZXRBZGRyZXNzKCkgeyByZXR1cm4gdGhpcy5hZGRyZXNzOyB9XG4gICAgY29ubmVjdChwcm92aWRlcikge1xuICAgICAgICByZXR1cm4gbmV3IFZvaWRTaWduZXIodGhpcy5hZGRyZXNzLCBwcm92aWRlcik7XG4gICAgfVxuICAgICN0aHJvd1Vuc3VwcG9ydGVkKHN1ZmZpeCwgb3BlcmF0aW9uKSB7XG4gICAgICAgIGFzc2VydChmYWxzZSwgYFZvaWRTaWduZXIgY2Fubm90IHNpZ24gJHtzdWZmaXh9YCwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb24gfSk7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25UcmFuc2FjdGlvbih0eCkge1xuICAgICAgICB0aGlzLiN0aHJvd1Vuc3VwcG9ydGVkKFwidHJhbnNhY3Rpb25zXCIsIFwic2lnblRyYW5zYWN0aW9uXCIpO1xuICAgIH1cbiAgICBhc3luYyBzaWduTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIHRoaXMuI3Rocm93VW5zdXBwb3J0ZWQoXCJtZXNzYWdlc1wiLCBcInNpZ25NZXNzYWdlXCIpO1xuICAgIH1cbiAgICBhc3luYyBzaWduVHlwZWREYXRhKGRvbWFpbiwgdHlwZXMsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuI3Rocm93VW5zdXBwb3J0ZWQoXCJ0eXBlZC1kYXRhXCIsIFwic2lnblR5cGVkRGF0YVwiKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hYnN0cmFjdC1zaWduZXIuanMubWFwIiwiaW1wb3J0IHsgaXNFcnJvciB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgUG9sbGluZ0V2ZW50U3Vic2NyaWJlciB9IGZyb20gXCIuL3N1YnNjcmliZXItcG9sbGluZy5qc1wiO1xuZnVuY3Rpb24gY29weShvYmopIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcbn1cbi8qKlxuICogIFNvbWUgYmFja2VuZHMgc3VwcG9ydCBzdWJzY3JpYmluZyB0byBldmVudHMgdXNpbmcgYSBGaWx0ZXIgSUQuXG4gKlxuICogIFdoZW4gc3Vic2NyaWJpbmcgd2l0aCB0aGlzIHRlY2huaXF1ZSwgdGhlIG5vZGUgaXNzdWVzIGEgdW5pcXVlXG4gKiAgLy9GaWx0ZXIgSUQvLy4gQXQgdGhpcyBwb2ludCB0aGUgbm9kZSBkZWRpY2F0ZXMgcmVzb3VyY2VzIHRvXG4gKiAgdGhlIGZpbHRlciwgc28gdGhhdCBwZXJpb2RpYyBjYWxscyB0byBmb2xsb3cgdXAgb24gdGhlIC8vRmlsdGVyIElELy9cbiAqICB3aWxsIHJlY2VpdmUgYW55IGV2ZW50cyBzaW5jZSB0aGUgbGFzdCBjYWxsLlxuICpcbiAqICBAX2RvY2xvYzogYXBpL3Byb3ZpZGVycy9hYnN0cmFjdC1wcm92aWRlclxuICovXG5leHBvcnQgY2xhc3MgRmlsdGVySWRTdWJzY3JpYmVyIHtcbiAgICAjcHJvdmlkZXI7XG4gICAgI2ZpbHRlcklkUHJvbWlzZTtcbiAgICAjcG9sbGVyO1xuICAgICNydW5uaW5nO1xuICAgICNuZXR3b3JrO1xuICAgICNoYXVsdDtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKkZpbHRlcklkU3Vic2NyaWJlcioqIHdoaWNoIHdpbGwgdXNlZCBbW19zdWJzY3JpYmVdXVxuICAgICAqICBhbmQgW1tfZW1pdFJlc3VsdHNdXSB0byBzZXR1cCB0aGUgc3Vic2NyaXB0aW9uIGFuZCBwcm92aWRlIHRoZSBldmVudFxuICAgICAqICB0byB0aGUgJSVwcm92aWRlciUlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyKSB7XG4gICAgICAgIHRoaXMuI3Byb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgICAgIHRoaXMuI2ZpbHRlcklkUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIHRoaXMuI3BvbGxlciA9IHRoaXMuI3BvbGwuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy4jcnVubmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLiNuZXR3b3JrID0gbnVsbDtcbiAgICAgICAgdGhpcy4jaGF1bHQgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFN1Yi1jbGFzc2VzICoqbXVzdCoqIG92ZXJyaWRlIHRoaXMgdG8gYmVnaW4gdGhlIHN1YnNjcmlwdGlvbi5cbiAgICAgKi9cbiAgICBfc3Vic2NyaWJlKHByb3ZpZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInN1YmNsYXNzZXMgbXVzdCBvdmVycmlkZSB0aGlzXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgU3ViLWNsYXNzZXMgKiptdXN0Kiogb3ZlcnJpZGUgdGhpcyBoYW5kbGUgdGhlIGV2ZW50cy5cbiAgICAgKi9cbiAgICBfZW1pdFJlc3VsdHMocHJvdmlkZXIsIHJlc3VsdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzdWJjbGFzc2VzIG11c3Qgb3ZlcnJpZGUgdGhpc1wiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFN1Yi1jbGFzc2VzICoqbXVzdCoqIG92ZXJyaWRlIHRoaXMgaGFuZGxlIHJlY292ZXJ5IG9uIGVycm9ycy5cbiAgICAgKi9cbiAgICBfcmVjb3Zlcihwcm92aWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzdWJjbGFzc2VzIG11c3Qgb3ZlcnJpZGUgdGhpc1wiKTtcbiAgICB9XG4gICAgYXN5bmMgI3BvbGwoYmxvY2tOdW1iZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFN1YnNjcmliZSBpZiBuZWNlc3NhcnlcbiAgICAgICAgICAgIGlmICh0aGlzLiNmaWx0ZXJJZFByb21pc2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuI2ZpbHRlcklkUHJvbWlzZSA9IHRoaXMuX3N1YnNjcmliZSh0aGlzLiNwcm92aWRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBHZXQgdGhlIEZpbHRlciBJRFxuICAgICAgICAgICAgbGV0IGZpbHRlcklkID0gbnVsbDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZmlsdGVySWQgPSBhd2FpdCB0aGlzLiNmaWx0ZXJJZFByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzRXJyb3IoZXJyb3IsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIpIHx8IGVycm9yLm9wZXJhdGlvbiAhPT0gXCJldGhfbmV3RmlsdGVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhlIGJhY2tlbmQgZG9lcyBub3Qgc3VwcG9ydCBGaWx0ZXIgSUQ7IGRvd25ncmFkZSB0b1xuICAgICAgICAgICAgLy8gcG9sbGluZ1xuICAgICAgICAgICAgaWYgKGZpbHRlcklkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNmaWx0ZXJJZFByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuI3Byb3ZpZGVyLl9yZWNvdmVyU3Vic2NyaWJlcih0aGlzLCB0aGlzLl9yZWNvdmVyKHRoaXMuI3Byb3ZpZGVyKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmV0d29yayA9IGF3YWl0IHRoaXMuI3Byb3ZpZGVyLmdldE5ldHdvcmsoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy4jbmV0d29yaykge1xuICAgICAgICAgICAgICAgIHRoaXMuI25ldHdvcmsgPSBuZXR3b3JrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuI25ldHdvcmsuY2hhaW5JZCAhPT0gbmV0d29yay5jaGFpbklkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2hhaWQgY2hhbmdlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLiNoYXVsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuI3Byb3ZpZGVyLnNlbmQoXCJldGhfZ2V0RmlsdGVyQ2hhbmdlc1wiLCBbZmlsdGVySWRdKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2VtaXRSZXN1bHRzKHRoaXMuI3Byb3ZpZGVyLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJAVE9ET1wiLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jcHJvdmlkZXIub25jZShcImJsb2NrXCIsIHRoaXMuI3BvbGxlcik7XG4gICAgfVxuICAgICN0ZWFyZG93bigpIHtcbiAgICAgICAgY29uc3QgZmlsdGVySWRQcm9taXNlID0gdGhpcy4jZmlsdGVySWRQcm9taXNlO1xuICAgICAgICBpZiAoZmlsdGVySWRQcm9taXNlKSB7XG4gICAgICAgICAgICB0aGlzLiNmaWx0ZXJJZFByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgZmlsdGVySWRQcm9taXNlLnRoZW4oKGZpbHRlcklkKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4jcHJvdmlkZXIuc2VuZChcImV0aF91bmluc3RhbGxGaWx0ZXJcIiwgW2ZpbHRlcklkXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3J1bm5pbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy4jcG9sbCgtMik7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICghdGhpcy4jcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy4jaGF1bHQgPSB0cnVlO1xuICAgICAgICB0aGlzLiN0ZWFyZG93bigpO1xuICAgICAgICB0aGlzLiNwcm92aWRlci5vZmYoXCJibG9ja1wiLCB0aGlzLiNwb2xsZXIpO1xuICAgIH1cbiAgICBwYXVzZShkcm9wV2hpbGVQYXVzZWQpIHtcbiAgICAgICAgaWYgKGRyb3BXaGlsZVBhdXNlZCkge1xuICAgICAgICAgICAgdGhpcy4jdGVhcmRvd24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNwcm92aWRlci5vZmYoXCJibG9ja1wiLCB0aGlzLiNwb2xsZXIpO1xuICAgIH1cbiAgICByZXN1bWUoKSB7IHRoaXMuc3RhcnQoKTsgfVxufVxuLyoqXG4gKiAgQSAqKkZpbHRlcklkU3Vic2NyaWJlcioqIGZvciByZWNlaXZpbmcgY29udHJhY3QgZXZlbnRzLlxuICpcbiAqICBAX2RvY2xvYzogYXBpL3Byb3ZpZGVycy9hYnN0cmFjdC1wcm92aWRlclxuICovXG5leHBvcnQgY2xhc3MgRmlsdGVySWRFdmVudFN1YnNjcmliZXIgZXh0ZW5kcyBGaWx0ZXJJZFN1YnNjcmliZXIge1xuICAgICNldmVudDtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKkZpbHRlcklkRXZlbnRTdWJzY3JpYmVyKiogYXR0YWNoZWQgdG8gJSVwcm92aWRlciUlXG4gICAgICogIGxpc3RlbmluZyBmb3IgJSVmaWx0ZXIlJS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlciwgZmlsdGVyKSB7XG4gICAgICAgIHN1cGVyKHByb3ZpZGVyKTtcbiAgICAgICAgdGhpcy4jZXZlbnQgPSBjb3B5KGZpbHRlcik7XG4gICAgfVxuICAgIF9yZWNvdmVyKHByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9sbGluZ0V2ZW50U3Vic2NyaWJlcihwcm92aWRlciwgdGhpcy4jZXZlbnQpO1xuICAgIH1cbiAgICBhc3luYyBfc3Vic2NyaWJlKHByb3ZpZGVyKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcklkID0gYXdhaXQgcHJvdmlkZXIuc2VuZChcImV0aF9uZXdGaWx0ZXJcIiwgW3RoaXMuI2V2ZW50XSk7XG4gICAgICAgIHJldHVybiBmaWx0ZXJJZDtcbiAgICB9XG4gICAgYXN5bmMgX2VtaXRSZXN1bHRzKHByb3ZpZGVyLCByZXN1bHRzKSB7XG4gICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgICAgIHByb3ZpZGVyLmVtaXQodGhpcy4jZXZlbnQsIHByb3ZpZGVyLl93cmFwTG9nKHJlc3VsdCwgcHJvdmlkZXIuX25ldHdvcmspKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogIEEgKipGaWx0ZXJJZFN1YnNjcmliZXIqKiBmb3IgcmVjZWl2aW5nIHBlbmRpbmcgdHJhbnNhY3Rpb25zIGV2ZW50cy5cbiAqXG4gKiAgQF9kb2Nsb2M6IGFwaS9wcm92aWRlcnMvYWJzdHJhY3QtcHJvdmlkZXJcbiAqL1xuZXhwb3J0IGNsYXNzIEZpbHRlcklkUGVuZGluZ1N1YnNjcmliZXIgZXh0ZW5kcyBGaWx0ZXJJZFN1YnNjcmliZXIge1xuICAgIGFzeW5jIF9zdWJzY3JpYmUocHJvdmlkZXIpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLnNlbmQoXCJldGhfbmV3UGVuZGluZ1RyYW5zYWN0aW9uRmlsdGVyXCIsIFtdKTtcbiAgICB9XG4gICAgYXN5bmMgX2VtaXRSZXN1bHRzKHByb3ZpZGVyLCByZXN1bHRzKSB7XG4gICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgICAgIHByb3ZpZGVyLmVtaXQoXCJwZW5kaW5nXCIsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVyLWZpbHRlcmlkLmpzLm1hcCIsIi8qKlxuICogIE9uZSBvZiB0aGUgbW9zdCBjb21tb24gd2F5cyB0byBpbnRlcmFjdCB3aXRoIHRoZSBibG9ja2NoYWluIGlzXG4gKiAgYnkgYSBub2RlIHJ1bm5pbmcgYSBKU09OLVJQQyBpbnRlcmZhY2Ugd2hpY2ggY2FuIGJlIGNvbm5lY3RlZCB0byxcbiAqICBiYXNlZCBvbiB0aGUgdHJhbnNwb3J0LCB1c2luZzpcbiAqXG4gKiAgLSBIVFRQIG9yIEhUVFBTIC0gW1tKc29uUnBjUHJvdmlkZXJdXVxuICogIC0gV2ViU29ja2V0IC0gW1tXZWJTb2NrZXRQcm92aWRlcl1dXG4gKiAgLSBJUEMgLSBbW0lwY1NvY2tldFByb3ZpZGVyXV1cbiAqXG4gKiBAX3NlY3Rpb246IGFwaS9wcm92aWRlcnMvanNvbnJwYzpKU09OLVJQQyBQcm92aWRlciAgW2Fib3V0LWpzb25ycGNQcm92aWRlcl1cbiAqL1xuLy8gQFRPRE86XG4vLyAtIEFkZCB0aGUgYmF0Y2hpbmcgQVBJXG4vLyBodHRwczovL3BsYXlncm91bmQub3Blbi1ycGMub3JnLz9zY2hlbWFVcmw9aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2V0aGVyZXVtL2V0aDEuMC1hcGlzL2Fzc2VtYmxlZC1zcGVjL29wZW5ycGMuanNvbiZ1aVNjaGVtYSU1QmFwcEJhciU1RCU1QnVpOnNwbGl0VmlldyU1RD10cnVlJnVpU2NoZW1hJTVCYXBwQmFyJTVEJTVCdWk6aW5wdXQlNUQ9ZmFsc2UmdWlTY2hlbWElNUJhcHBCYXIlNUQlNUJ1aTpleGFtcGxlc0Ryb3Bkb3duJTVEPWZhbHNlXG5pbXBvcnQgeyBBYmlDb2RlciB9IGZyb20gXCIuLi9hYmkvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldEFkZHJlc3MsIHJlc29sdmVBZGRyZXNzIH0gZnJvbSBcIi4uL2FkZHJlc3MvaW5kZXguanNcIjtcbmltcG9ydCB7IFR5cGVkRGF0YUVuY29kZXIgfSBmcm9tIFwiLi4vaGFzaC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgYWNjZXNzTGlzdGlmeSB9IGZyb20gXCIuLi90cmFuc2FjdGlvbi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcywgZ2V0QmlnSW50LCBoZXhsaWZ5LCBpc0hleFN0cmluZywgdG9RdWFudGl0eSwgdG9VdGY4Qnl0ZXMsIGlzRXJyb3IsIG1ha2VFcnJvciwgYXNzZXJ0LCBhc3NlcnRBcmd1bWVudCwgRmV0Y2hSZXF1ZXN0LCByZXNvbHZlUHJvcGVydGllcyB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQWJzdHJhY3RQcm92aWRlciwgVW5tYW5hZ2VkU3Vic2NyaWJlciB9IGZyb20gXCIuL2Fic3RyYWN0LXByb3ZpZGVyLmpzXCI7XG5pbXBvcnQgeyBBYnN0cmFjdFNpZ25lciB9IGZyb20gXCIuL2Fic3RyYWN0LXNpZ25lci5qc1wiO1xuaW1wb3J0IHsgTmV0d29yayB9IGZyb20gXCIuL25ldHdvcmsuanNcIjtcbmltcG9ydCB7IEZpbHRlcklkRXZlbnRTdWJzY3JpYmVyLCBGaWx0ZXJJZFBlbmRpbmdTdWJzY3JpYmVyIH0gZnJvbSBcIi4vc3Vic2NyaWJlci1maWx0ZXJpZC5qc1wiO1xuaW1wb3J0IHsgUG9sbGluZ0V2ZW50U3Vic2NyaWJlciB9IGZyb20gXCIuL3N1YnNjcmliZXItcG9sbGluZy5qc1wiO1xuY29uc3QgUHJpbWl0aXZlID0gXCJiaWdpbnQsYm9vbGVhbixmdW5jdGlvbixudW1iZXIsc3RyaW5nLHN5bWJvbFwiLnNwbGl0KC8sL2cpO1xuLy9jb25zdCBNZXRob2RzID0gXCJnZXRBZGRyZXNzLHRoZW5cIi5zcGxpdCgvLC9nKTtcbmZ1bmN0aW9uIGRlZXBDb3B5KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgUHJpbWl0aXZlLmluZGV4T2YodHlwZW9mICh2YWx1ZSkpID49IDApIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvLyBLZWVwIGFueSBBZGRyZXNzYWJsZVxuICAgIGlmICh0eXBlb2YgKHZhbHVlLmdldEFkZHJlc3MpID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZS5tYXAoZGVlcENvcHkpKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkucmVkdWNlKChhY2N1bSwga2V5KSA9PiB7XG4gICAgICAgICAgICBhY2N1bVtrZXldID0gdmFsdWVba2V5XTtcbiAgICAgICAgICAgIHJldHVybiBhY2N1bTtcbiAgICAgICAgfSwge30pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYHNob3VsZCBub3QgaGFwcGVuOiAke3ZhbHVlfSAoJHt0eXBlb2YgKHZhbHVlKX0pYCk7XG59XG5mdW5jdGlvbiBzdGFsbChkdXJhdGlvbikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4geyBzZXRUaW1lb3V0KHJlc29sdmUsIGR1cmF0aW9uKTsgfSk7XG59XG5mdW5jdGlvbiBnZXRMb3dlckNhc2UodmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGlzUG9sbGFibGUodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiAodmFsdWUucG9sbGluZ0ludGVydmFsKSA9PT0gXCJudW1iZXJcIik7XG59XG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBwb2xsaW5nOiBmYWxzZSxcbiAgICBzdGF0aWNOZXR3b3JrOiBudWxsLFxuICAgIGJhdGNoU3RhbGxUaW1lOiAxMCxcbiAgICBiYXRjaE1heFNpemU6ICgxIDw8IDIwKSxcbiAgICBiYXRjaE1heENvdW50OiAxMDAsXG4gICAgY2FjaGVUaW1lb3V0OiAyNTAsXG4gICAgcG9sbGluZ0ludGVydmFsOiA0MDAwXG59O1xuLy8gQFRPRE86IFVuY2hlY2tlZCBTaWduZXJzXG5leHBvcnQgY2xhc3MgSnNvblJwY1NpZ25lciBleHRlbmRzIEFic3RyYWN0U2lnbmVyIHtcbiAgICBhZGRyZXNzO1xuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyLCBhZGRyZXNzKSB7XG4gICAgICAgIHN1cGVyKHByb3ZpZGVyKTtcbiAgICAgICAgYWRkcmVzcyA9IGdldEFkZHJlc3MoYWRkcmVzcyk7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBhZGRyZXNzIH0pO1xuICAgIH1cbiAgICBjb25uZWN0KHByb3ZpZGVyKSB7XG4gICAgICAgIGFzc2VydChmYWxzZSwgXCJjYW5ub3QgcmVjb25uZWN0IEpzb25ScGNTaWduZXJcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcInNpZ25lci5jb25uZWN0XCJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGdldEFkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZHJlc3M7XG4gICAgfVxuICAgIC8vIEpTT04tUlBDIHdpbGwgYXV0b21hdGlhbGx5IGZpbGwgaW4gbm9uY2UsIGV0Yy4gc28gd2UganVzdCBjaGVjayBmcm9tXG4gICAgYXN5bmMgcG9wdWxhdGVUcmFuc2FjdGlvbih0eCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wb3B1bGF0ZUNhbGwodHgpO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIGp1c3QgdGhlIGhhc2ggb2YgdGhlIHRyYW5zYWN0aW9uIGFmdGVyIHNlbnQsIHdoaWNoIGlzIHdoYXRcbiAgICAvLyB0aGUgYmFyZSBKU09OLVJQQyBBUEkgZG9lcztcbiAgICBhc3luYyBzZW5kVW5jaGVja2VkVHJhbnNhY3Rpb24oX3R4KSB7XG4gICAgICAgIGNvbnN0IHR4ID0gZGVlcENvcHkoX3R4KTtcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBmcm9tIG1hdGNoZXMgdGhlIHNlbmRlclxuICAgICAgICBpZiAodHguZnJvbSkge1xuICAgICAgICAgICAgY29uc3QgX2Zyb20gPSB0eC5mcm9tO1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZyb20gPSBhd2FpdCByZXNvbHZlQWRkcmVzcyhfZnJvbSwgdGhpcy5wcm92aWRlcik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoZnJvbSAhPSBudWxsICYmIGZyb20udG9Mb3dlckNhc2UoKSA9PT0gdGhpcy5hZGRyZXNzLnRvTG93ZXJDYXNlKCksIFwiZnJvbSBhZGRyZXNzIG1pc21hdGNoXCIsIFwidHJhbnNhY3Rpb25cIiwgX3R4KTtcbiAgICAgICAgICAgICAgICB0eC5mcm9tID0gZnJvbTtcbiAgICAgICAgICAgIH0pKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHguZnJvbSA9IHRoaXMuYWRkcmVzcztcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgSlNPTi1SUEMgZm9yIGV0aF9zZW5kVHJhbnNhY3Rpb24gdXNlcyA5MDAwMCBnYXM7IGlmIHRoZSB1c2VyXG4gICAgICAgIC8vIHdpc2hlcyB0byB1c2UgdGhpcywgaXQgaXMgZWFzeSB0byBzcGVjaWZ5IGV4cGxpY2l0bHksIG90aGVyd2lzZVxuICAgICAgICAvLyB3ZSBsb29rIGl0IHVwIGZvciB0aGVtLlxuICAgICAgICBpZiAodHguZ2FzTGltaXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHR4Lmdhc0xpbWl0ID0gYXdhaXQgdGhpcy5wcm92aWRlci5lc3RpbWF0ZUdhcyh7IC4uLnR4LCBmcm9tOiB0aGlzLmFkZHJlc3MgfSk7XG4gICAgICAgICAgICB9KSgpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgYWRkcmVzcyBtYXkgYmUgYW4gRU5TIG5hbWUgb3IgQWRkcmVzc2FibGVcbiAgICAgICAgaWYgKHR4LnRvICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IF90byA9IHR4LnRvO1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHR4LnRvID0gYXdhaXQgcmVzb2x2ZUFkZHJlc3MoX3RvLCB0aGlzLnByb3ZpZGVyKTtcbiAgICAgICAgICAgIH0pKCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdhaXQgdW50aWwgYWxsIG9mIG91ciBwcm9wZXJ0aWVzIGFyZSBmaWxsZWQgaW5cbiAgICAgICAgaWYgKHByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhleFR4ID0gdGhpcy5wcm92aWRlci5nZXRScGNUcmFuc2FjdGlvbih0eCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLnNlbmQoXCJldGhfc2VuZFRyYW5zYWN0aW9uXCIsIFtoZXhUeF0pO1xuICAgIH1cbiAgICBhc3luYyBzZW5kVHJhbnNhY3Rpb24odHgpIHtcbiAgICAgICAgLy8gVGhpcyBjYW5ub3QgYmUgbWluZWQgYW55IGVhcmxpZXIgdGhhbiBhbnkgcmVjZW50IGJsb2NrXG4gICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyID0gYXdhaXQgdGhpcy5wcm92aWRlci5nZXRCbG9ja051bWJlcigpO1xuICAgICAgICAvLyBTZW5kIHRoZSB0cmFuc2FjdGlvblxuICAgICAgICBjb25zdCBoYXNoID0gYXdhaXQgdGhpcy5zZW5kVW5jaGVja2VkVHJhbnNhY3Rpb24odHgpO1xuICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCBKU09OLVJQQyBvbmx5IHByb3ZpZGVzIGFuZCBvcGFxdWUgdHJhbnNhY3Rpb24gaGFzaFxuICAgICAgICAvLyBmb3IgYSByZXNwb25zZSwgYW5kIHdlIG5lZWQgdGhlIGFjdHVhbCB0cmFuc2FjdGlvbiwgc28gd2UgcG9sbFxuICAgICAgICAvLyBmb3IgaXQ7IGl0IHNob3VsZCBzaG93IHVwIHZlcnkgcXVpY2tseVxuICAgICAgICByZXR1cm4gYXdhaXQgKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXRzID0gWzEwMDAsIDEwMF07XG4gICAgICAgICAgICBsZXQgaW52YWxpZHMgPSAwO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tUeCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUcnkgZ2V0dGluZyB0aGUgdHJhbnNhY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHggPSBhd2FpdCB0aGlzLnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uKGhhc2gpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0eC5yZXBsYWNlYWJsZVRyYW5zYWN0aW9uKGJsb2NrTnVtYmVyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHdlcmUgY2FuY2VsbGVkOiBzdG9wIHBvbGxpbmcuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBkYXRhIGlzIGJhZDogdGhlIG5vZGUgcmV0dXJucyBiYWQgdHJhbnNhY3Rpb25zXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBuZXR3b3JrIGNoYW5nZWQ6IGNhbGxpbmcgYWdhaW4gd2lsbCBhbHNvIGZhaWxcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdW5zdXBwb3J0ZWQ6IGxpa2VseSBkZXN0cm95ZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRXJyb3IoZXJyb3IsIFwiQ0FOQ0VMTEVEXCIpIHx8IGlzRXJyb3IoZXJyb3IsIFwiQkFEX0RBVEFcIikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRXJyb3IoZXJyb3IsIFwiTkVUV09SS19FUlJPUlwiIHx8IGlzRXJyb3IoZXJyb3IsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLmluZm8gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLmluZm8gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLmluZm8uc2VuZFRyYW5zYWN0aW9uSGFzaCA9IGhhc2g7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3AtZ2FwIGZvciBtaXNiZWhhdmluZyBiYWNrZW5kczsgc2VlICM0NTEzXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0Vycm9yKGVycm9yLCBcIklOVkFMSURfQVJHVU1FTlRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWRzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuaW5mbyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IuaW5mbyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IuaW5mby5zZW5kVHJhbnNhY3Rpb25IYXNoID0gaGFzaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnZhbGlkcyA+IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gTm90aWZ5IGFueW9uZSB0aGF0IGNhcmVzOyBidXQgd2Ugd2lsbCB0cnkgYWdhaW4sIHNpbmNlXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0IGlzIGxpa2VseSBhbiBpbnRlcm1pdHRlbnQgc2VydmljZSBlcnJvclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3ZpZGVyLmVtaXQoXCJlcnJvclwiLCBtYWtlRXJyb3IoXCJmYWlsZWQgdG8gZmV0Y2ggdHJhbnNhdGlvbiBhZnRlciBzZW5kaW5nICh3aWxsIHRyeSBhZ2FpbilcIiwgXCJVTktOT1dOX0VSUk9SXCIsIHsgZXJyb3IgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBXYWl0IGFub3RoZXIgNCBzZWNvbmRzXG4gICAgICAgICAgICAgICAgdGhpcy5wcm92aWRlci5fc2V0VGltZW91dCgoKSA9PiB7IGNoZWNrVHgoKTsgfSwgdGltZW91dHMucG9wKCkgfHwgNDAwMCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2hlY2tUeCgpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25UcmFuc2FjdGlvbihfdHgpIHtcbiAgICAgICAgY29uc3QgdHggPSBkZWVwQ29weShfdHgpO1xuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGZyb20gbWF0Y2hlcyB0aGUgc2VuZGVyXG4gICAgICAgIGlmICh0eC5mcm9tKSB7XG4gICAgICAgICAgICBjb25zdCBmcm9tID0gYXdhaXQgcmVzb2x2ZUFkZHJlc3ModHguZnJvbSwgdGhpcy5wcm92aWRlcik7XG4gICAgICAgICAgICBhc3NlcnRBcmd1bWVudChmcm9tICE9IG51bGwgJiYgZnJvbS50b0xvd2VyQ2FzZSgpID09PSB0aGlzLmFkZHJlc3MudG9Mb3dlckNhc2UoKSwgXCJmcm9tIGFkZHJlc3MgbWlzbWF0Y2hcIiwgXCJ0cmFuc2FjdGlvblwiLCBfdHgpO1xuICAgICAgICAgICAgdHguZnJvbSA9IGZyb207XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0eC5mcm9tID0gdGhpcy5hZGRyZXNzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhleFR4ID0gdGhpcy5wcm92aWRlci5nZXRScGNUcmFuc2FjdGlvbih0eCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3ZpZGVyLnNlbmQoXCJldGhfc2lnblRyYW5zYWN0aW9uXCIsIFtoZXhUeF0pO1xuICAgIH1cbiAgICBhc3luYyBzaWduTWVzc2FnZShfbWVzc2FnZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gKCh0eXBlb2YgKF9tZXNzYWdlKSA9PT0gXCJzdHJpbmdcIikgPyB0b1V0ZjhCeXRlcyhfbWVzc2FnZSkgOiBfbWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3ZpZGVyLnNlbmQoXCJwZXJzb25hbF9zaWduXCIsIFtcbiAgICAgICAgICAgIGhleGxpZnkobWVzc2FnZSksIHRoaXMuYWRkcmVzcy50b0xvd2VyQ2FzZSgpXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBhc3luYyBzaWduVHlwZWREYXRhKGRvbWFpbiwgdHlwZXMsIF92YWx1ZSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGRlZXBDb3B5KF92YWx1ZSk7XG4gICAgICAgIC8vIFBvcHVsYXRlIGFueSBFTlMgbmFtZXMgKGluLXBsYWNlKVxuICAgICAgICBjb25zdCBwb3B1bGF0ZWQgPSBhd2FpdCBUeXBlZERhdGFFbmNvZGVyLnJlc29sdmVOYW1lcyhkb21haW4sIHR5cGVzLCB2YWx1ZSwgYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzID0gYXdhaXQgcmVzb2x2ZUFkZHJlc3ModmFsdWUpO1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQoYWRkcmVzcyAhPSBudWxsLCBcIlR5cGVkRGF0YSBkb2VzIG5vdCBzdXBwb3J0IG51bGwgYWRkcmVzc1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBhZGRyZXNzO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvdmlkZXIuc2VuZChcImV0aF9zaWduVHlwZWREYXRhX3Y0XCIsIFtcbiAgICAgICAgICAgIHRoaXMuYWRkcmVzcy50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoVHlwZWREYXRhRW5jb2Rlci5nZXRQYXlsb2FkKHBvcHVsYXRlZC5kb21haW4sIHR5cGVzLCBwb3B1bGF0ZWQudmFsdWUpKVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgYXN5bmMgdW5sb2NrKHBhc3N3b3JkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLnNlbmQoXCJwZXJzb25hbF91bmxvY2tBY2NvdW50XCIsIFtcbiAgICAgICAgICAgIHRoaXMuYWRkcmVzcy50b0xvd2VyQ2FzZSgpLCBwYXNzd29yZCwgbnVsbFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9KU09OLVJQQyNldGhfc2lnblxuICAgIGFzeW5jIF9sZWdhY3lTaWduTWVzc2FnZShfbWVzc2FnZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gKCh0eXBlb2YgKF9tZXNzYWdlKSA9PT0gXCJzdHJpbmdcIikgPyB0b1V0ZjhCeXRlcyhfbWVzc2FnZSkgOiBfbWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3ZpZGVyLnNlbmQoXCJldGhfc2lnblwiLCBbXG4gICAgICAgICAgICB0aGlzLmFkZHJlc3MudG9Mb3dlckNhc2UoKSwgaGV4bGlmeShtZXNzYWdlKVxuICAgICAgICBdKTtcbiAgICB9XG59XG4vKipcbiAqICBUaGUgSnNvblJwY0FwaVByb3ZpZGVyIGlzIGFuIGFic3RyYWN0IGNsYXNzIGFuZCAqKk1VU1QqKiBiZVxuICogIHN1Yi1jbGFzc2VkLlxuICpcbiAqICBJdCBwcm92aWRlcyB0aGUgYmFzZSBmb3IgYWxsIEpTT04tUlBDLWJhc2VkIFByb3ZpZGVyIGludGVyYWN0aW9uLlxuICpcbiAqICBTdWItY2xhc3NpbmcgTm90ZXM6XG4gKiAgLSBhIHN1Yi1jbGFzcyBNVVNUIG92ZXJyaWRlIF9zZW5kXG4gKiAgLSBhIHN1Yi1jbGFzcyBNVVNUIGNhbGwgdGhlIGBfc3RhcnQoKWAgbWV0aG9kIG9uY2UgY29ubmVjdGVkXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uUnBjQXBpUHJvdmlkZXIgZXh0ZW5kcyBBYnN0cmFjdFByb3ZpZGVyIHtcbiAgICAjb3B0aW9ucztcbiAgICAvLyBUaGUgbmV4dCBJRCB0byB1c2UgZm9yIHRoZSBKU09OLVJQQyBJRCBmaWVsZFxuICAgICNuZXh0SWQ7XG4gICAgLy8gUGF5bG9hZHMgYXJlIHF1ZXVlZCBhbmQgdHJpZ2dlcmVkIGluIGJhdGNoZXMgdXNpbmcgdGhlIGRyYWluVGltZXJcbiAgICAjcGF5bG9hZHM7XG4gICAgI2RyYWluVGltZXI7XG4gICAgI25vdFJlYWR5O1xuICAgICNuZXR3b3JrO1xuICAgICNwZW5kaW5nRGV0ZWN0TmV0d29yaztcbiAgICAjc2NoZWR1bGVEcmFpbigpIHtcbiAgICAgICAgaWYgKHRoaXMuI2RyYWluVGltZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBhcmVuJ3QgdXNpbmcgYmF0Y2hpbmcsIG5vIGhhcm0gaW4gc2VuZGluZyBpdCBpbW1lZGlhdGVseVxuICAgICAgICBjb25zdCBzdGFsbFRpbWUgPSAodGhpcy5fZ2V0T3B0aW9uKFwiYmF0Y2hNYXhDb3VudFwiKSA9PT0gMSkgPyAwIDogdGhpcy5fZ2V0T3B0aW9uKFwiYmF0Y2hTdGFsbFRpbWVcIik7XG4gICAgICAgIHRoaXMuI2RyYWluVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuI2RyYWluVGltZXIgPSBudWxsO1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZHMgPSB0aGlzLiNwYXlsb2FkcztcbiAgICAgICAgICAgIHRoaXMuI3BheWxvYWRzID0gW107XG4gICAgICAgICAgICB3aGlsZSAocGF5bG9hZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHBheWxvYWQgYmF0Y2hlcyB0aGF0IHNhdGlzZnkgb3VyIGJhdGNoIGNvbnN0cmFpbnRzXG4gICAgICAgICAgICAgICAgY29uc3QgYmF0Y2ggPSBbKHBheWxvYWRzLnNoaWZ0KCkpXTtcbiAgICAgICAgICAgICAgICB3aGlsZSAocGF5bG9hZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXRjaC5sZW5ndGggPT09IHRoaXMuI29wdGlvbnMuYmF0Y2hNYXhDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYmF0Y2gucHVzaCgocGF5bG9hZHMuc2hpZnQoKSkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBieXRlcyA9IEpTT04uc3RyaW5naWZ5KGJhdGNoLm1hcCgocCkgPT4gcC5wYXlsb2FkKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChieXRlcy5sZW5ndGggPiB0aGlzLiNvcHRpb25zLmJhdGNoTWF4U2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZHMudW5zaGlmdCgoYmF0Y2gucG9wKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgdGhlIHJlc3VsdCB0byBlYWNoIHBheWxvYWRcbiAgICAgICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gKChiYXRjaC5sZW5ndGggPT09IDEpID8gYmF0Y2hbMF0ucGF5bG9hZCA6IGJhdGNoLm1hcCgocCkgPT4gcC5wYXlsb2FkKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHsgYWN0aW9uOiBcInNlbmRScGNQYXlsb2FkXCIsIHBheWxvYWQgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl9zZW5kKHBheWxvYWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwgeyBhY3Rpb246IFwicmVjZWl2ZVJwY1Jlc3VsdFwiLCByZXN1bHQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIHJlc3VsdHMgaW4gYmF0Y2ggb3JkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgeyByZXNvbHZlLCByZWplY3QsIHBheWxvYWQgfSBvZiBiYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobWFrZUVycm9yKFwicHJvdmlkZXIgZGVzdHJveWVkOyBjYW5jZWxsZWQgcmVxdWVzdFwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogcGF5bG9hZC5tZXRob2QgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgbWF0Y2hpbmcgcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcCA9IHJlc3VsdC5maWx0ZXIoKHIpID0+IChyLmlkID09PSBwYXlsb2FkLmlkKSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gcmVzdWx0OyB0aGUgbm9kZSBmYWlsZWQgdXMgaW4gdW5leHBlY3RlZCB3YXlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3AgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG1ha2VFcnJvcihcIm1pc3NpbmcgcmVzcG9uc2UgZm9yIHJlcXVlc3RcIiwgXCJCQURfREFUQVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0LCBpbmZvOiB7IHBheWxvYWQgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlc3BvbnNlIGlzIGFuIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiZXJyb3JcIiBpbiByZXNwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCh0aGlzLmdldFJwY0Vycm9yKHBheWxvYWQsIHJlc3ApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbCBnb29kOyBzZW5kIHRoZSByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3AucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHsgYWN0aW9uOiBcInJlY2VpdmVScGNFcnJvclwiLCBlcnJvciB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgeyByZWplY3QgfSBvZiBiYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEBUT0RPOiBhdWdtZW50IHRoZSBlcnJvciB3aXRoIHRoZSBwYXlsb2FkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHN0YWxsVGltZSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG5ldHdvcmssIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobmV0d29yaywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuI25leHRJZCA9IDE7XG4gICAgICAgIHRoaXMuI29wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyB8fCB7fSk7XG4gICAgICAgIHRoaXMuI3BheWxvYWRzID0gW107XG4gICAgICAgIHRoaXMuI2RyYWluVGltZXIgPSBudWxsO1xuICAgICAgICB0aGlzLiNuZXR3b3JrID0gbnVsbDtcbiAgICAgICAgdGhpcy4jcGVuZGluZ0RldGVjdE5ldHdvcmsgPSBudWxsO1xuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgcmVzb2x2ZSA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKF9yZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSA9IF9yZXNvbHZlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLiNub3RSZWFkeSA9IHsgcHJvbWlzZSwgcmVzb2x2ZSB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXRpY05ldHdvcmsgPSB0aGlzLl9nZXRPcHRpb24oXCJzdGF0aWNOZXR3b3JrXCIpO1xuICAgICAgICBpZiAodHlwZW9mIChzdGF0aWNOZXR3b3JrKSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIGFzc2VydEFyZ3VtZW50KCFzdGF0aWNOZXR3b3JrIHx8IG5ldHdvcmsgIT09IFwiYW55XCIsIFwic3RhdGljTmV0d29yayBjYW5ub3QgYmUgdXNlZCBvbiBzcGVjaWFsIG5ldHdvcmsgJ2FueSdcIiwgXCJvcHRpb25zXCIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKHN0YXRpY05ldHdvcmsgJiYgbmV0d29yayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jbmV0d29yayA9IE5ldHdvcmsuZnJvbShuZXR3b3JrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0aWNOZXR3b3JrKSB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgYW55IHN0YXRpYyBuZXR3b3JrIGlzIGNvbXBhdGJpbGUgd2l0aCB0aGUgcHJvdmlkZWQgbmV0d3Jva1xuICAgICAgICAgICAgYXNzZXJ0QXJndW1lbnQobmV0d29yayA9PSBudWxsIHx8IHN0YXRpY05ldHdvcmsubWF0Y2hlcyhuZXR3b3JrKSwgXCJzdGF0aWNOZXR3b3JrIE1VU1QgbWF0Y2ggbmV0d29yayBvYmplY3RcIiwgXCJvcHRpb25zXCIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy4jbmV0d29yayA9IHN0YXRpY05ldHdvcms7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGUgb3B0aW9uICUla2V5JSUuXG4gICAgICpcbiAgICAgKiAgU3ViLWNsYXNzZXMgY2FuIHVzZSB0aGlzIHRvIGlucXVpcmUgYWJvdXQgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICAgICAqL1xuICAgIF9nZXRPcHRpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNvcHRpb25zW2tleV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBHZXRzIHRoZSBbW05ldHdvcmtdXSB0aGlzIHByb3ZpZGVyIGhhcyBjb21taXR0ZWQgdG8uIE9uIGVhY2ggY2FsbCwgdGhlIG5ldHdvcmtcbiAgICAgKiAgaXMgZGV0ZWN0ZWQsIGFuZCBpZiBpdCBoYXMgY2hhbmdlZCwgdGhlIGNhbGwgd2lsbCByZWplY3QuXG4gICAgICovXG4gICAgZ2V0IF9uZXR3b3JrKCkge1xuICAgICAgICBhc3NlcnQodGhpcy4jbmV0d29yaywgXCJuZXR3b3JrIGlzIG5vdCBhdmFpbGFibGUgeWV0XCIsIFwiTkVUV09SS19FUlJPUlwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuI25ldHdvcms7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXNvbHZlcyB0byB0aGUgbm9uLW5vcm1hbGl6ZWQgdmFsdWUgYnkgcGVyZm9ybWluZyAlJXJlcSUlLlxuICAgICAqXG4gICAgICogIFN1Yi1jbGFzc2VzIG1heSBvdmVycmlkZSB0aGlzIHRvIG1vZGlmeSBiZWhhdmlvciBvZiBhY3Rpb25zLFxuICAgICAqICBhbmQgc2hvdWxkIGdlbmVyYWxseSBjYWxsIGBgc3VwZXIuX3BlcmZvcm1gYCBhcyBhIGZhbGxiYWNrLlxuICAgICAqL1xuICAgIGFzeW5jIF9wZXJmb3JtKHJlcSkge1xuICAgICAgICAvLyBMZWdhY3kgbmV0d29ya3MgZG8gbm90IGxpa2UgdGhlIHR5cGUgZmllbGQgYmVpbmcgcGFzc2VkIGFsb25nICh3aGljaFxuICAgICAgICAvLyBpcyBmYWlyKSwgc28gd2UgZGVsZXRlIHR5cGUgaWYgaXQgaXMgMCBhbmQgYSBub24tRUlQLTE1NTkgbmV0d29ya1xuICAgICAgICBpZiAocmVxLm1ldGhvZCA9PT0gXCJjYWxsXCIgfHwgcmVxLm1ldGhvZCA9PT0gXCJlc3RpbWF0ZUdhc1wiKSB7XG4gICAgICAgICAgICBsZXQgdHggPSByZXEudHJhbnNhY3Rpb247XG4gICAgICAgICAgICBpZiAodHggJiYgdHgudHlwZSAhPSBudWxsICYmIGdldEJpZ0ludCh0eC50eXBlKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBFSVAtMTU1OSBwcm9wZXJ0aWVzLCBpdCBtaWdodCBiZSBub24tRUlQLWE1NTlcbiAgICAgICAgICAgICAgICBpZiAodHgubWF4RmVlUGVyR2FzID09IG51bGwgJiYgdHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWVEYXRhID0gYXdhaXQgdGhpcy5nZXRGZWVEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmZWVEYXRhLm1heEZlZVBlckdhcyA9PSBudWxsICYmIGZlZURhdGEubWF4UHJpb3JpdHlGZWVQZXJHYXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmV0d29yayBkb2Vzbid0IGtub3cgYWJvdXQgRUlQLTE1NTkgKGFuZCBoZW5jZSB0eXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxID0gT2JqZWN0LmFzc2lnbih7fSwgcmVxLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IE9iamVjdC5hc3NpZ24oe30sIHR4LCB7IHR5cGU6IHVuZGVmaW5lZCB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuZ2V0UnBjUmVxdWVzdChyZXEpO1xuICAgICAgICBpZiAocmVxdWVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5fcGVyZm9ybShyZXEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgU3ViLWNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXM7IGl0IGRldGVjdHMgdGhlICphY3R1YWwqIG5ldHdvcmsgdGhhdFxuICAgICAqICB3ZSBhcmUgKipjdXJyZW50bHkqKiBjb25uZWN0ZWQgdG8uXG4gICAgICpcbiAgICAgKiAgS2VlcCBpbiBtaW5kIHRoYXQgW1tzZW5kXV0gbWF5IG9ubHkgYmUgdXNlZCBvbmNlIFtbcmVhZHldXSwgb3RoZXJ3aXNlIHRoZVxuICAgICAqICBfc2VuZCBwcmltaXRpdmUgbXVzdCBiZSB1c2VkIGluc3RlYWQuXG4gICAgICovXG4gICAgYXN5bmMgX2RldGVjdE5ldHdvcmsoKSB7XG4gICAgICAgIGNvbnN0IG5ldHdvcmsgPSB0aGlzLl9nZXRPcHRpb24oXCJzdGF0aWNOZXR3b3JrXCIpO1xuICAgICAgICBpZiAobmV0d29yaykge1xuICAgICAgICAgICAgaWYgKG5ldHdvcmsgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4jbmV0d29yaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jbmV0d29yaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV0d29yaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy4jcGVuZGluZ0RldGVjdE5ldHdvcmspIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLiNwZW5kaW5nRGV0ZWN0TmV0d29yaztcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBhcmUgcmVhZHksIHVzZSBgYHNlbmRgYCwgd2hpY2ggZW5hYmxlZCByZXF1ZXN0cyB0byBiZSBiYXRjaGVkXG4gICAgICAgIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgICAgICAgICB0aGlzLiNwZW5kaW5nRGV0ZWN0TmV0d29yayA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gTmV0d29yay5mcm9tKGdldEJpZ0ludChhd2FpdCB0aGlzLnNlbmQoXCJldGhfY2hhaW5JZFwiLCBbXSkpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jcGVuZGluZ0RldGVjdE5ldHdvcmsgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jcGVuZGluZ0RldGVjdE5ldHdvcmsgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuI3BlbmRpbmdEZXRlY3ROZXR3b3JrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGFyZSBub3QgcmVhZHkgeWV0OyB1c2UgdGhlIHByaW1pdGl2ZSBfc2VuZFxuICAgICAgICB0aGlzLiNwZW5kaW5nRGV0ZWN0TmV0d29yayA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgICAgICAgICAgIGlkOiB0aGlzLiNuZXh0SWQrKywgbWV0aG9kOiBcImV0aF9jaGFpbklkXCIsIHBhcmFtczogW10sIGpzb25ycGM6IFwiMi4wXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJzZW5kUnBjUGF5bG9hZFwiLCBwYXlsb2FkIH0pO1xuICAgICAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gKGF3YWl0IHRoaXMuX3NlbmQocGF5bG9hZCkpWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMuI3BlbmRpbmdEZXRlY3ROZXR3b3JrID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuI3BlbmRpbmdEZXRlY3ROZXR3b3JrID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJyZWNlaXZlUnBjRXJyb3JcIiwgZXJyb3IgfSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJyZWNlaXZlUnBjUmVzdWx0XCIsIHJlc3VsdCB9KTtcbiAgICAgICAgICAgIGlmIChcInJlc3VsdFwiIGluIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBOZXR3b3JrLmZyb20oZ2V0QmlnSW50KHJlc3VsdC5yZXN1bHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IHRoaXMuZ2V0UnBjRXJyb3IocGF5bG9hZCwgcmVzdWx0KTtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuI3BlbmRpbmdEZXRlY3ROZXR3b3JrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgU3ViLWNsYXNzZXMgKipNVVNUKiogY2FsbCB0aGlzLiBVbnRpbCBbW19zdGFydF1dIGhhcyBiZWVuIGNhbGxlZCwgbm8gY2FsbHNcbiAgICAgKiAgd2lsbCBiZSBwYXNzZWQgdG8gW1tfc2VuZF1dIGZyb20gW1tzZW5kXV0uIElmIGl0IGlzIG92ZXJyaWRkZW4sIHRoZW5cbiAgICAgKiAgYGBzdXBlci5fc3RhcnQoKWBgICoqTVVTVCoqIGJlIGNhbGxlZC5cbiAgICAgKlxuICAgICAqICBDYWxsaW5nIGl0IG11bHRpcGxlIHRpbWVzIGlzIHNhZmUgYW5kIGhhcyBubyBlZmZlY3QuXG4gICAgICovXG4gICAgX3N0YXJ0KCkge1xuICAgICAgICBpZiAodGhpcy4jbm90UmVhZHkgPT0gbnVsbCB8fCB0aGlzLiNub3RSZWFkeS5yZXNvbHZlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNub3RSZWFkeS5yZXNvbHZlKCk7XG4gICAgICAgIHRoaXMuI25vdFJlYWR5ID0gbnVsbDtcbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIC8vIEJvb3RzdHJhcCB0aGUgbmV0d29ya1xuICAgICAgICAgICAgd2hpbGUgKHRoaXMuI25ldHdvcmsgPT0gbnVsbCAmJiAhdGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNuZXR3b3JrID0gYXdhaXQgdGhpcy5fZGV0ZWN0TmV0d29yaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkpzb25ScGNQcm92aWRlciBmYWlsZWQgdG8gZGV0ZWN0IG5ldHdvcmsgYW5kIGNhbm5vdCBzdGFydCB1cDsgcmV0cnkgaW4gMXMgKHBlcmhhcHMgdGhlIFVSTCBpcyB3cm9uZyBvciB0aGUgbm9kZSBpcyBub3Qgc3RhcnRlZClcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIG1ha2VFcnJvcihcImZhaWxlZCB0byBib290c3RyYXAgbmV0d29yayBkZXRlY3Rpb25cIiwgXCJORVRXT1JLX0VSUk9SXCIsIHsgZXZlbnQ6IFwiaW5pdGlhbC1uZXR3b3JrLWRpc2NvdmVyeVwiLCBpbmZvOiB7IGVycm9yIH0gfSkpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzdGFsbCgxMDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdGFydCBkaXNwYXRjaGluZyByZXF1ZXN0c1xuICAgICAgICAgICAgdGhpcy4jc2NoZWR1bGVEcmFpbigpO1xuICAgICAgICB9KSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb2x2ZXMgb25jZSB0aGUgW1tfc3RhcnRdXSBoYXMgYmVlbiBjYWxsZWQuIFRoaXMgY2FuIGJlIHVzZWQgaW5cbiAgICAgKiAgc3ViLWNsYXNzZXMgdG8gZGVmZXIgc2VuZGluZyBkYXRhIHVudGlsIHRoZSBjb25uZWN0aW9uIGhhcyBiZWVuXG4gICAgICogIGVzdGFibGlzaGVkLlxuICAgICAqL1xuICAgIGFzeW5jIF93YWl0VW50aWxSZWFkeSgpIHtcbiAgICAgICAgaWYgKHRoaXMuI25vdFJlYWR5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy4jbm90UmVhZHkucHJvbWlzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybiBhIFN1YnNjcmliZXIgdGhhdCB3aWxsIG1hbmFnZSB0aGUgJSVzdWIlJS5cbiAgICAgKlxuICAgICAqICBTdWItY2xhc3NlcyBtYXkgb3ZlcnJpZGUgdGhpcyB0byBtb2RpZnkgdGhlIGJlaGF2aW9yIG9mXG4gICAgICogIHN1YnNjcmlwdGlvbiBtYW5hZ2VtZW50LlxuICAgICAqL1xuICAgIF9nZXRTdWJzY3JpYmVyKHN1Yikge1xuICAgICAgICAvLyBQZW5kaW5nIEZpbHRlcnMgYXJlbid0IGF2YWlsYmxlIHZpYSBwb2xsaW5nXG4gICAgICAgIGlmIChzdWIudHlwZSA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRmlsdGVySWRQZW5kaW5nU3Vic2NyaWJlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3ViLnR5cGUgPT09IFwiZXZlbnRcIikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2dldE9wdGlvbihcInBvbGxpbmdcIikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBvbGxpbmdFdmVudFN1YnNjcmliZXIodGhpcywgc3ViLmZpbHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZpbHRlcklkRXZlbnRTdWJzY3JpYmVyKHRoaXMsIHN1Yi5maWx0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE9ycGhhbmVkIExvZ3MgYXJlIGhhbmRsZWQgYXV0b21hdGljYWxseSwgYnkgdGhlIGZpbHRlciwgc2luY2VcbiAgICAgICAgLy8gbG9ncyB3aXRoIHJlbW92ZWQgYXJlIGVtaXR0ZWQgYnkgaXRcbiAgICAgICAgaWYgKHN1Yi50eXBlID09PSBcIm9ycGhhblwiICYmIHN1Yi5maWx0ZXIub3JwaGFuID09PSBcImRyb3AtbG9nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVW5tYW5hZ2VkU3Vic2NyaWJlcihcIm9ycGhhblwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuX2dldFN1YnNjcmliZXIoc3ViKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdHJ1ZSBvbmx5IGlmIHRoZSBbW19zdGFydF1dIGhhcyBiZWVuIGNhbGxlZC5cbiAgICAgKi9cbiAgICBnZXQgcmVhZHkoKSB7IHJldHVybiB0aGlzLiNub3RSZWFkeSA9PSBudWxsOyB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgJSV0eCUlIGFzIGEgbm9ybWFsaXplZCBKU09OLVJQQyB0cmFuc2FjdGlvbiByZXF1ZXN0LFxuICAgICAqICB3aGljaCBoYXMgYWxsIHZhbHVlcyBoZXhsaWZpZWQgYW5kIGFueSBudW1lcmljIHZhbHVlcyBjb252ZXJ0ZWRcbiAgICAgKiAgdG8gUXVhbnRpdHkgdmFsdWVzLlxuICAgICAqL1xuICAgIGdldFJwY1RyYW5zYWN0aW9uKHR4KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICAvLyBKU09OLVJQQyBub3cgcmVxdWlyZXMgbnVtZXJpYyB2YWx1ZXMgdG8gYmUgXCJxdWFudGl0eVwiIHZhbHVlc1xuICAgICAgICBbXCJjaGFpbklkXCIsIFwiZ2FzTGltaXRcIiwgXCJnYXNQcmljZVwiLCBcInR5cGVcIiwgXCJtYXhGZWVQZXJHYXNcIiwgXCJtYXhQcmlvcml0eUZlZVBlckdhc1wiLCBcIm5vbmNlXCIsIFwidmFsdWVcIl0uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAodHhba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRzdEtleSA9IGtleTtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IFwiZ2FzTGltaXRcIikge1xuICAgICAgICAgICAgICAgIGRzdEtleSA9IFwiZ2FzXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRbZHN0S2V5XSA9IHRvUXVhbnRpdHkoZ2V0QmlnSW50KHR4W2tleV0sIGB0eC4ke2tleX1gKSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBNYWtlIHN1cmUgYWRkcmVzc2VzIGFuZCBkYXRhIGFyZSBsb3dlcmNhc2VcbiAgICAgICAgW1wiZnJvbVwiLCBcInRvXCIsIFwiZGF0YVwiXS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGlmICh0eFtrZXldID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IGhleGxpZnkodHhba2V5XSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBOb3JtYWxpemUgdGhlIGFjY2VzcyBsaXN0IG9iamVjdFxuICAgICAgICBpZiAodHguYWNjZXNzTGlzdCkge1xuICAgICAgICAgICAgcmVzdWx0W1wiYWNjZXNzTGlzdFwiXSA9IGFjY2Vzc0xpc3RpZnkodHguYWNjZXNzTGlzdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIHJlcXVlc3QgbWV0aG9kIGFuZCBhcmd1bWVudHMgcmVxdWlyZWQgdG8gcGVyZm9ybVxuICAgICAqICAlJXJlcSUlLlxuICAgICAqL1xuICAgIGdldFJwY1JlcXVlc3QocmVxKSB7XG4gICAgICAgIHN3aXRjaCAocmVxLm1ldGhvZCkge1xuICAgICAgICAgICAgY2FzZSBcImNoYWluSWRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4geyBtZXRob2Q6IFwiZXRoX2NoYWluSWRcIiwgYXJnczogW10gfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRCbG9ja051bWJlclwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IG1ldGhvZDogXCJldGhfYmxvY2tOdW1iZXJcIiwgYXJnczogW10gfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRHYXNQcmljZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IG1ldGhvZDogXCJldGhfZ2FzUHJpY2VcIiwgYXJnczogW10gfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRQcmlvcml0eUZlZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IG1ldGhvZDogXCJldGhfbWF4UHJpb3JpdHlGZWVQZXJHYXNcIiwgYXJnczogW10gfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRCYWxhbmNlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9nZXRCYWxhbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtnZXRMb3dlckNhc2UocmVxLmFkZHJlc3MpLCByZXEuYmxvY2tUYWddXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRUcmFuc2FjdGlvbkNvdW50XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9nZXRUcmFuc2FjdGlvbkNvdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtnZXRMb3dlckNhc2UocmVxLmFkZHJlc3MpLCByZXEuYmxvY2tUYWddXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRDb2RlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9nZXRDb2RlXCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtnZXRMb3dlckNhc2UocmVxLmFkZHJlc3MpLCByZXEuYmxvY2tUYWddXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRTdG9yYWdlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9nZXRTdG9yYWdlQXRcIixcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TG93ZXJDYXNlKHJlcS5hZGRyZXNzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChcIjB4XCIgKyByZXEucG9zaXRpb24udG9TdHJpbmcoMTYpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcS5ibG9ja1RhZ1xuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgXCJicm9hZGNhc3RUcmFuc2FjdGlvblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJldGhfc2VuZFJhd1RyYW5zYWN0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtyZXEuc2lnbmVkVHJhbnNhY3Rpb25dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRCbG9ja1wiOlxuICAgICAgICAgICAgICAgIGlmIChcImJsb2NrVGFnXCIgaW4gcmVxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZXRoX2dldEJsb2NrQnlOdW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtyZXEuYmxvY2tUYWcsICEhcmVxLmluY2x1ZGVUcmFuc2FjdGlvbnNdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFwiYmxvY2tIYXNoXCIgaW4gcmVxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZXRoX2dldEJsb2NrQnlIYXNoXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbcmVxLmJsb2NrSGFzaCwgISFyZXEuaW5jbHVkZVRyYW5zYWN0aW9uc11cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0VHJhbnNhY3Rpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZXRoX2dldFRyYW5zYWN0aW9uQnlIYXNoXCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtyZXEuaGFzaF1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uUmVjZWlwdFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJldGhfZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCIsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtyZXEuaGFzaF1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBcImNhbGxcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZXRoX2NhbGxcIixcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW3RoaXMuZ2V0UnBjVHJhbnNhY3Rpb24ocmVxLnRyYW5zYWN0aW9uKSwgcmVxLmJsb2NrVGFnXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlIFwiZXN0aW1hdGVHYXNcIjoge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJldGhfZXN0aW1hdGVHYXNcIixcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW3RoaXMuZ2V0UnBjVHJhbnNhY3Rpb24ocmVxLnRyYW5zYWN0aW9uKV1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImdldExvZ3NcIjpcbiAgICAgICAgICAgICAgICBpZiAocmVxLmZpbHRlciAmJiByZXEuZmlsdGVyLmFkZHJlc3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXEuZmlsdGVyLmFkZHJlc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXEuZmlsdGVyLmFkZHJlc3MgPSByZXEuZmlsdGVyLmFkZHJlc3MubWFwKGdldExvd2VyQ2FzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXEuZmlsdGVyLmFkZHJlc3MgPSBnZXRMb3dlckNhc2UocmVxLmZpbHRlci5hZGRyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBtZXRob2Q6IFwiZXRoX2dldExvZ3NcIiwgYXJnczogW3JlcS5maWx0ZXJdIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGFuIGV0aGVycy1zdHlsZSBFcnJvciBmb3IgdGhlIGdpdmVuIEpTT04tUlBDIGVycm9yXG4gICAgICogICUlcGF5bG9hZCUlLCBjb2FsZXNjaW5nIHRoZSB2YXJpb3VzIHN0cmluZ3MgYW5kIGVycm9yIHNoYXBlc1xuICAgICAqICB0aGF0IGRpZmZlcmVudCBub2RlcyByZXR1cm4sIGNvZXJjaW5nIHRoZW0gaW50byBhIG1hY2hpbmUtcmVhZGFibGVcbiAgICAgKiAgc3RhbmRhcmRpemVkIGVycm9yLlxuICAgICAqL1xuICAgIGdldFJwY0Vycm9yKHBheWxvYWQsIF9lcnJvcikge1xuICAgICAgICBjb25zdCB7IG1ldGhvZCB9ID0gcGF5bG9hZDtcbiAgICAgICAgY29uc3QgeyBlcnJvciB9ID0gX2Vycm9yO1xuICAgICAgICBpZiAobWV0aG9kID09PSBcImV0aF9lc3RpbWF0ZUdhc1wiICYmIGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICBpZiAoIW1zZy5tYXRjaCgvcmV2ZXJ0L2kpICYmIG1zZy5tYXRjaCgvaW5zdWZmaWNpZW50IGZ1bmRzL2kpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VFcnJvcihcImluc3VmZmljaWVudCBmdW5kc1wiLCBcIklOU1VGRklDSUVOVF9GVU5EU1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiAocGF5bG9hZC5wYXJhbXNbMF0pLFxuICAgICAgICAgICAgICAgICAgICBpbmZvOiB7IHBheWxvYWQsIGVycm9yIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0aG9kID09PSBcImV0aF9jYWxsXCIgfHwgbWV0aG9kID09PSBcImV0aF9lc3RpbWF0ZUdhc1wiKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBzcGVsdW5rRGF0YShlcnJvcik7XG4gICAgICAgICAgICBjb25zdCBlID0gQWJpQ29kZXIuZ2V0QnVpbHRpbkNhbGxFeGNlcHRpb24oKG1ldGhvZCA9PT0gXCJldGhfY2FsbFwiKSA/IFwiY2FsbFwiIDogXCJlc3RpbWF0ZUdhc1wiLCAocGF5bG9hZC5wYXJhbXNbMF0pLCAocmVzdWx0ID8gcmVzdWx0LmRhdGEgOiBudWxsKSk7XG4gICAgICAgICAgICBlLmluZm8gPSB7IGVycm9yLCBwYXlsb2FkIH07XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPbmx5IGVzdGltYXRlR2FzIGFuZCBjYWxsIGNhbiByZXR1cm4gYXJiaXRyYXJ5IGNvbnRyYWN0LWRlZmluZWQgdGV4dCwgc28gbm93IHdlXG4gICAgICAgIC8vIHdlIGNhbiBwcm9jZXNzIHRleHQgc2FmZWx5LlxuICAgICAgICBjb25zdCBtZXNzYWdlID0gSlNPTi5zdHJpbmdpZnkoc3BlbHVua01lc3NhZ2UoZXJyb3IpKTtcbiAgICAgICAgaWYgKHR5cGVvZiAoZXJyb3IubWVzc2FnZSkgPT09IFwic3RyaW5nXCIgJiYgZXJyb3IubWVzc2FnZS5tYXRjaCgvdXNlciBkZW5pZWR8ZXRoZXJzLXVzZXItZGVuaWVkL2kpKSB7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb25NYXAgPSB7XG4gICAgICAgICAgICAgICAgZXRoX3NpZ246IFwic2lnbk1lc3NhZ2VcIixcbiAgICAgICAgICAgICAgICBwZXJzb25hbF9zaWduOiBcInNpZ25NZXNzYWdlXCIsXG4gICAgICAgICAgICAgICAgZXRoX3NpZ25UeXBlZERhdGFfdjQ6IFwic2lnblR5cGVkRGF0YVwiLFxuICAgICAgICAgICAgICAgIGV0aF9zaWduVHJhbnNhY3Rpb246IFwic2lnblRyYW5zYWN0aW9uXCIsXG4gICAgICAgICAgICAgICAgZXRoX3NlbmRUcmFuc2FjdGlvbjogXCJzZW5kVHJhbnNhY3Rpb25cIixcbiAgICAgICAgICAgICAgICBldGhfcmVxdWVzdEFjY291bnRzOiBcInJlcXVlc3RBY2Nlc3NcIixcbiAgICAgICAgICAgICAgICB3YWxsZXRfcmVxdWVzdEFjY291bnRzOiBcInJlcXVlc3RBY2Nlc3NcIixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gbWFrZUVycm9yKGB1c2VyIHJlamVjdGVkIGFjdGlvbmAsIFwiQUNUSU9OX1JFSkVDVEVEXCIsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IChhY3Rpb25NYXBbbWV0aG9kXSB8fCBcInVua25vd25cIiksXG4gICAgICAgICAgICAgICAgcmVhc29uOiBcInJlamVjdGVkXCIsXG4gICAgICAgICAgICAgICAgaW5mbzogeyBwYXlsb2FkLCBlcnJvciB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0aG9kID09PSBcImV0aF9zZW5kUmF3VHJhbnNhY3Rpb25cIiB8fCBtZXRob2QgPT09IFwiZXRoX3NlbmRUcmFuc2FjdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IChwYXlsb2FkLnBhcmFtc1swXSk7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5tYXRjaCgvaW5zdWZmaWNpZW50IGZ1bmRzfGJhc2UgZmVlIGV4Y2VlZHMgZ2FzIGxpbWl0L2kpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VFcnJvcihcImluc3VmZmljaWVudCBmdW5kcyBmb3IgaW50cmluc2ljIHRyYW5zYWN0aW9uIGNvc3RcIiwgXCJJTlNVRkZJQ0lFTlRfRlVORFNcIiwge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbiwgaW5mbzogeyBlcnJvciB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5tYXRjaCgvbm9uY2UvaSkgJiYgbWVzc2FnZS5tYXRjaCgvdG9vIGxvdy9pKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlRXJyb3IoXCJub25jZSBoYXMgYWxyZWFkeSBiZWVuIHVzZWRcIiwgXCJOT05DRV9FWFBJUkVEXCIsIHsgdHJhbnNhY3Rpb24sIGluZm86IHsgZXJyb3IgfSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFwicmVwbGFjZW1lbnQgdHJhbnNhY3Rpb24gdW5kZXJwcmljZWRcIlxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UubWF0Y2goL3JlcGxhY2VtZW50IHRyYW5zYWN0aW9uL2kpICYmIG1lc3NhZ2UubWF0Y2goL3VuZGVycHJpY2VkL2kpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VFcnJvcihcInJlcGxhY2VtZW50IGZlZSB0b28gbG93XCIsIFwiUkVQTEFDRU1FTlRfVU5ERVJQUklDRURcIiwgeyB0cmFuc2FjdGlvbiwgaW5mbzogeyBlcnJvciB9IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UubWF0Y2goL29ubHkgcmVwbGF5LXByb3RlY3RlZC9pKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlRXJyb3IoXCJsZWdhY3kgcHJlLWVpcC0xNTUgdHJhbnNhY3Rpb25zIG5vdCBzdXBwb3J0ZWRcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IG1ldGhvZCwgaW5mbzogeyB0cmFuc2FjdGlvbiwgaW5mbzogeyBlcnJvciB9IH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgdW5zdXBwb3J0ZWQgPSAhIW1lc3NhZ2UubWF0Y2goL3RoZSBtZXRob2QgLiogZG9lcyBub3QgZXhpc3QvaSk7XG4gICAgICAgIGlmICghdW5zdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIGlmIChlcnJvciAmJiBlcnJvci5kZXRhaWxzICYmIGVycm9yLmRldGFpbHMuc3RhcnRzV2l0aChcIlVuYXV0aG9yaXplZCBtZXRob2Q6XCIpKSB7XG4gICAgICAgICAgICAgICAgdW5zdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh1bnN1cHBvcnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VFcnJvcihcInVuc3VwcG9ydGVkIG9wZXJhdGlvblwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBwYXlsb2FkLm1ldGhvZCwgaW5mbzogeyBlcnJvciwgcGF5bG9hZCB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFrZUVycm9yKFwiY291bGQgbm90IGNvYWxlc2NlIGVycm9yXCIsIFwiVU5LTk9XTl9FUlJPUlwiLCB7IGVycm9yLCBwYXlsb2FkIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVxdWVzdHMgdGhlICUlbWV0aG9kJSUgd2l0aCAlJXBhcmFtcyUlIHZpYSB0aGUgSlNPTi1SUEMgcHJvdG9jb2xcbiAgICAgKiAgb3ZlciB0aGUgdW5kZXJseWluZyBjaGFubmVsLiBUaGlzIGNhbiBiZSB1c2VkIHRvIGNhbGwgbWV0aG9kc1xuICAgICAqICBvbiB0aGUgYmFja2VuZCB0aGF0IGRvIG5vdCBoYXZlIGEgaGlnaC1sZXZlbCBBUEkgd2l0aGluIHRoZSBQcm92aWRlclxuICAgICAqICBBUEkuXG4gICAgICpcbiAgICAgKiAgVGhpcyBtZXRob2QgcXVldWVzIHJlcXVlc3RzIGFjY29yZGluZyB0byB0aGUgYmF0Y2ggY29uc3RyYWludHNcbiAgICAgKiAgaW4gdGhlIG9wdGlvbnMsIGFzc2lnbnMgdGhlIHJlcXVlc3QgYSB1bmlxdWUgSUQuXG4gICAgICpcbiAgICAgKiAgKipEbyBOT1Qgb3ZlcnJpZGUqKiB0aGlzIG1ldGhvZCBpbiBzdWItY2xhc3NlczsgaW5zdGVhZFxuICAgICAqICBvdmVycmlkZSBbW19zZW5kXV0gb3IgZm9yY2UgdGhlIG9wdGlvbnMgdmFsdWVzIGluIHRoZVxuICAgICAqICBjYWxsIHRvIHRoZSBjb25zdHJ1Y3RvciB0byBtb2RpZnkgdGhpcyBtZXRob2QncyBiZWhhdmlvci5cbiAgICAgKi9cbiAgICBzZW5kKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIC8vIEBUT0RPOiBjYWNoZSBjaGFpbklkPz8gcHVyZ2Ugb24gc3dpdGNoX25ldHdvcmtzXG4gICAgICAgIC8vIFdlIGhhdmUgYmVlbiBkZXN0cm95ZWQ7IG5vIG9wZXJhdGlvbnMgYXJlIHN1cHBvcnRlZCBhbnltb3JlXG4gICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG1ha2VFcnJvcihcInByb3ZpZGVyIGRlc3Ryb3llZDsgY2FuY2VsbGVkIHJlcXVlc3RcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IG1ldGhvZCB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLiNuZXh0SWQrKztcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuI3BheWxvYWRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHJlc29sdmUsIHJlamVjdCxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiB7IG1ldGhvZCwgcGFyYW1zLCBpZCwganNvbnJwYzogXCIyLjBcIiB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIG5vdCBhIHBlbmRpbmcgZHJhaW5UaW1lciwgc2V0IG9uZVxuICAgICAgICB0aGlzLiNzY2hlZHVsZURyYWluKCk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb2x2ZXMgdG8gdGhlIFtbU2lnbmVyXV0gYWNjb3VudCBmb3IgICUlYWRkcmVzcyUlIG1hbmFnZWQgYnlcbiAgICAgKiAgdGhlIGNsaWVudC5cbiAgICAgKlxuICAgICAqICBJZiB0aGUgJSVhZGRyZXNzJSUgaXMgYSBudW1iZXIsIGl0IGlzIHVzZWQgYXMgYW4gaW5kZXggaW4gdGhlXG4gICAgICogIHRoZSBhY2NvdW50cyBmcm9tIFtbbGlzdEFjY291bnRzXV0uXG4gICAgICpcbiAgICAgKiAgVGhpcyBjYW4gb25seSBiZSB1c2VkIG9uIGNsaWVudHMgd2hpY2ggbWFuYWdlIGFjY291bnRzIChzdWNoIGFzXG4gICAgICogIEdldGggd2l0aCBpbXBvcnRlZCBhY2NvdW50IG9yIE1ldGFNYXNrKS5cbiAgICAgKlxuICAgICAqICBUaHJvd3MgaWYgdGhlIGFjY291bnQgZG9lc24ndCBleGlzdC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRTaWduZXIoYWRkcmVzcykge1xuICAgICAgICBpZiAoYWRkcmVzcyA9PSBudWxsKSB7XG4gICAgICAgICAgICBhZGRyZXNzID0gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY2NvdW50c1Byb21pc2UgPSB0aGlzLnNlbmQoXCJldGhfYWNjb3VudHNcIiwgW10pO1xuICAgICAgICAvLyBBY2NvdW50IGluZGV4XG4gICAgICAgIGlmICh0eXBlb2YgKGFkZHJlc3MpID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBjb25zdCBhY2NvdW50cyA9IChhd2FpdCBhY2NvdW50c1Byb21pc2UpO1xuICAgICAgICAgICAgaWYgKGFkZHJlc3MgPj0gYWNjb3VudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8gc3VjaCBhY2NvdW50XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBKc29uUnBjU2lnbmVyKHRoaXMsIGFjY291bnRzW2FkZHJlc3NdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGFjY291bnRzIH0gPSBhd2FpdCByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgICAgICBuZXR3b3JrOiB0aGlzLmdldE5ldHdvcmsoKSxcbiAgICAgICAgICAgIGFjY291bnRzOiBhY2NvdW50c1Byb21pc2VcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEFjY291bnQgYWRkcmVzc1xuICAgICAgICBhZGRyZXNzID0gZ2V0QWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgZm9yIChjb25zdCBhY2NvdW50IG9mIGFjY291bnRzKSB7XG4gICAgICAgICAgICBpZiAoZ2V0QWRkcmVzcyhhY2NvdW50KSA9PT0gYWRkcmVzcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSnNvblJwY1NpZ25lcih0aGlzLCBhZGRyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGFjY291bnRcIik7XG4gICAgfVxuICAgIGFzeW5jIGxpc3RBY2NvdW50cygpIHtcbiAgICAgICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCB0aGlzLnNlbmQoXCJldGhfYWNjb3VudHNcIiwgW10pO1xuICAgICAgICByZXR1cm4gYWNjb3VudHMubWFwKChhKSA9PiBuZXcgSnNvblJwY1NpZ25lcih0aGlzLCBhKSk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIC8vIFN0b3AgcHJvY2Vzc2luZyByZXF1ZXN0c1xuICAgICAgICBpZiAodGhpcy4jZHJhaW5UaW1lcikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuI2RyYWluVGltZXIpO1xuICAgICAgICAgICAgdGhpcy4jZHJhaW5UaW1lciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2FuY2VsIGFsbCBwZW5kaW5nIHJlcXVlc3RzXG4gICAgICAgIGZvciAoY29uc3QgeyBwYXlsb2FkLCByZWplY3QgfSBvZiB0aGlzLiNwYXlsb2Fkcykge1xuICAgICAgICAgICAgcmVqZWN0KG1ha2VFcnJvcihcInByb3ZpZGVyIGRlc3Ryb3llZDsgY2FuY2VsbGVkIHJlcXVlc3RcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwgeyBvcGVyYXRpb246IHBheWxvYWQubWV0aG9kIH0pKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNwYXlsb2FkcyA9IFtdO1xuICAgICAgICAvLyBQYXJlbnQgY2xlYW4tdXBcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cbn1cbi8vIEBUT0RPOiByZW1vdmUgdGhpcyBpbiB2NywgaXQgaXMgbm90IGV4cG9ydGVkIGJlY2F1c2UgdGhpcyBmdW5jdGlvbmFsaXR5XG4vLyBpcyBleHBvc2VkIGluIHRoZSBKc29uUnBjQXBpUHJvdmlkZXIgYnkgc2V0dGluZyBwb2xsaW5nIHRvIHRydWUuIEl0IHNob3VsZFxuLy8gYmUgc2FmZSB0byByZW1vdmUgcmVnYXJkbGVzcywgYmVjYXVzZSBpdCBpc24ndCByZWFjaGFibGUsIGJ1dCBqdXN0IGluIGNhc2UuXG4vKipcbiAqICBAX2lnbm9yZTpcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25ScGNBcGlQb2xsaW5nUHJvdmlkZXIgZXh0ZW5kcyBKc29uUnBjQXBpUHJvdmlkZXIge1xuICAgICNwb2xsaW5nSW50ZXJ2YWw7XG4gICAgY29uc3RydWN0b3IobmV0d29yaywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihuZXR3b3JrLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy4jcG9sbGluZ0ludGVydmFsID0gNDAwMDtcbiAgICB9XG4gICAgX2dldFN1YnNjcmliZXIoc3ViKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmliZXIgPSBzdXBlci5fZ2V0U3Vic2NyaWJlcihzdWIpO1xuICAgICAgICBpZiAoaXNQb2xsYWJsZShzdWJzY3JpYmVyKSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5wb2xsaW5nSW50ZXJ2YWwgPSB0aGlzLiNwb2xsaW5nSW50ZXJ2YWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaGUgcG9sbGluZyBpbnRlcnZhbCAoZGVmYXVsdDogNDAwMCBtcylcbiAgICAgKi9cbiAgICBnZXQgcG9sbGluZ0ludGVydmFsKCkgeyByZXR1cm4gdGhpcy4jcG9sbGluZ0ludGVydmFsOyB9XG4gICAgc2V0IHBvbGxpbmdJbnRlcnZhbCh2YWx1ZSkge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIodmFsdWUpIHx8IHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBpbnRlcnZhbFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNwb2xsaW5nSW50ZXJ2YWwgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fZm9yRWFjaFN1YnNjcmliZXIoKHN1YikgPT4ge1xuICAgICAgICAgICAgaWYgKGlzUG9sbGFibGUoc3ViKSkge1xuICAgICAgICAgICAgICAgIHN1Yi5wb2xsaW5nSW50ZXJ2YWwgPSB0aGlzLiNwb2xsaW5nSW50ZXJ2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuICogIFRoZSBKc29uUnBjUHJvdmlkZXIgaXMgb25lIG9mIHRoZSBtb3N0IGNvbW1vbiBQcm92aWRlcnMsXG4gKiAgd2hpY2ggcGVyZm9ybXMgYWxsIG9wZXJhdGlvbnMgb3ZlciBIVFRQIChvciBIVFRQUykgcmVxdWVzdHMuXG4gKlxuICogIEV2ZW50cyBhcmUgcHJvY2Vzc2VkIGJ5IHBvbGxpbmcgdGhlIGJhY2tlbmQgZm9yIHRoZSBjdXJyZW50IGJsb2NrXG4gKiAgbnVtYmVyOyB3aGVuIGl0IGFkdmFuY2VzLCBhbGwgYmxvY2stYmFzZSBldmVudHMgYXJlIHRoZW4gY2hlY2tlZFxuICogIGZvciB1cGRhdGVzLlxuICovXG5leHBvcnQgY2xhc3MgSnNvblJwY1Byb3ZpZGVyIGV4dGVuZHMgSnNvblJwY0FwaVBvbGxpbmdQcm92aWRlciB7XG4gICAgI2Nvbm5lY3Q7XG4gICAgY29uc3RydWN0b3IodXJsLCBuZXR3b3JrLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICh1cmwgPT0gbnVsbCkge1xuICAgICAgICAgICAgdXJsID0gXCJodHRwOi9cXC9sb2NhbGhvc3Q6ODU0NVwiO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKG5ldHdvcmssIG9wdGlvbnMpO1xuICAgICAgICBpZiAodHlwZW9mICh1cmwpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aGlzLiNjb25uZWN0ID0gbmV3IEZldGNoUmVxdWVzdCh1cmwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4jY29ubmVjdCA9IHVybC5jbG9uZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9nZXRDb25uZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY29ubmVjdC5jbG9uZSgpO1xuICAgIH1cbiAgICBhc3luYyBzZW5kKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIC8vIEFsbCByZXF1ZXN0cyBhcmUgb3ZlciBIVFRQLCBzbyB3ZSBjYW4ganVzdCBzdGFydCBoYW5kbGluZyByZXF1ZXN0c1xuICAgICAgICAvLyBXZSBkbyB0aGlzIGhlcmUgcmF0aGVyIHRoYW4gdGhlIGNvbnN0cnVjdG9yIHNvIHRoYXQgd2UgZG9uJ3Qgc2VuZCBhbnlcbiAgICAgICAgLy8gcmVxdWVzdHMgdG8gdGhlIG5ldHdvcmsgKGkuZS4gZXRoX2NoYWluSWQpIHVudGlsIHdlIGFic29sdXRlbHkgaGF2ZSB0by5cbiAgICAgICAgYXdhaXQgdGhpcy5fc3RhcnQoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLnNlbmQobWV0aG9kLCBwYXJhbXMpO1xuICAgIH1cbiAgICBhc3luYyBfc2VuZChwYXlsb2FkKSB7XG4gICAgICAgIC8vIENvbmZpZ3VyZSBhIFBPU1QgY29ubmVjdGlvbiBmb3IgdGhlIHJlcXVlc3RlZCBtZXRob2RcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX2dldENvbm5lY3Rpb24oKTtcbiAgICAgICAgcmVxdWVzdC5ib2R5ID0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZCk7XG4gICAgICAgIHJlcXVlc3Quc2V0SGVhZGVyKFwiY29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0LnNlbmQoKTtcbiAgICAgICAgcmVzcG9uc2UuYXNzZXJ0T2soKTtcbiAgICAgICAgbGV0IHJlc3AgPSByZXNwb25zZS5ib2R5SnNvbjtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3ApKSB7XG4gICAgICAgICAgICByZXNwID0gW3Jlc3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNwZWx1bmtEYXRhKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIFRoZXNlICphcmUqIHRoZSBkcm9pZHMgd2UncmUgbG9va2luZyBmb3IuXG4gICAgaWYgKHR5cGVvZiAodmFsdWUubWVzc2FnZSkgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUubWVzc2FnZS5tYXRjaCgvcmV2ZXJ0L2kpICYmIGlzSGV4U3RyaW5nKHZhbHVlLmRhdGEpKSB7XG4gICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IHZhbHVlLm1lc3NhZ2UsIGRhdGE6IHZhbHVlLmRhdGEgfTtcbiAgICB9XG4gICAgLy8gU3BlbHVuayBmdXJ0aGVyLi4uXG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBzcGVsdW5rRGF0YSh2YWx1ZVtrZXldKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBNaWdodCBiZSBhIEpTT04gc3RyaW5nIHdlIGNhbiBmdXJ0aGVyIGRlc2NlbmQuLi5cbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBzcGVsdW5rRGF0YShKU09OLnBhcnNlKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBfc3BlbHVua01lc3NhZ2UodmFsdWUsIHJlc3VsdCkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gVGhlc2UgKmFyZSogdGhlIGRyb2lkcyB3ZSdyZSBsb29raW5nIGZvci5cbiAgICBpZiAodHlwZW9mICh2YWx1ZS5tZXNzYWdlKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXN1bHQucHVzaCh2YWx1ZS5tZXNzYWdlKTtcbiAgICB9XG4gICAgLy8gU3BlbHVuayBmdXJ0aGVyLi4uXG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICBfc3BlbHVua01lc3NhZ2UodmFsdWVba2V5XSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBNaWdodCBiZSBhIEpTT04gc3RyaW5nIHdlIGNhbiBmdXJ0aGVyIGRlc2NlbmQuLi5cbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBfc3BlbHVua01lc3NhZ2UoSlNPTi5wYXJzZSh2YWx1ZSksIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICB9XG59XG5mdW5jdGlvbiBzcGVsdW5rTWVzc2FnZSh2YWx1ZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIF9zcGVsdW5rTWVzc2FnZSh2YWx1ZSwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXItanNvbnJwYy5qcy5tYXAiLCJpbXBvcnQgeyBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgSnNvblJwY0FwaVBvbGxpbmdQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyLWpzb25ycGMuanNcIjtcbjtcbi8qKlxuICogIEEgKipCcm93c2VyUHJvdmlkZXIqKiBpcyBpbnRlbmRlZCB0byB3cmFwIGFuIGluamVjdGVkIHByb3ZpZGVyIHdoaWNoXG4gKiAgYWRoZXJlcyB0byB0aGUgW1tsaW5rLWVpcC0xMTkzXV0gc3RhbmRhcmQsIHdoaWNoIG1vc3QgKGlmIG5vdCBhbGwpXG4gKiAgY3VycmVudGx5IGRvLlxuICovXG5leHBvcnQgY2xhc3MgQnJvd3NlclByb3ZpZGVyIGV4dGVuZHMgSnNvblJwY0FwaVBvbGxpbmdQcm92aWRlciB7XG4gICAgI3JlcXVlc3Q7XG4gICAgLyoqXG4gICAgICogIENvbm5uZWN0IHRvIHRoZSAlJWV0aGVyZXVtJSUgcHJvdmlkZXIsIG9wdGlvbmFsbHkgZm9yY2luZyB0aGVcbiAgICAgKiAgJSVuZXR3b3JrJSUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZXRoZXJldW0sIG5ldHdvcmspIHtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoZXRoZXJldW0gJiYgZXRoZXJldW0ucmVxdWVzdCwgXCJpbnZhbGlkIEVJUC0xMTkzIHByb3ZpZGVyXCIsIFwiZXRoZXJldW1cIiwgZXRoZXJldW0pO1xuICAgICAgICBzdXBlcihuZXR3b3JrLCB7IGJhdGNoTWF4Q291bnQ6IDEgfSk7XG4gICAgICAgIHRoaXMuI3JlcXVlc3QgPSBhc3luYyAobWV0aG9kLCBwYXJhbXMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB7IG1ldGhvZCwgcGFyYW1zIH07XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJzZW5kRWlwMTE5M1JlcXVlc3RcIiwgcGF5bG9hZCB9KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXRoZXJldW0ucmVxdWVzdChwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJyZWNlaXZlRWlwMTE5M1Jlc3VsdFwiLCByZXN1bHQgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBlcnJvci5jb2RlID0gZS5jb2RlO1xuICAgICAgICAgICAgICAgIGVycm9yLmRhdGEgPSBlLmRhdGE7XG4gICAgICAgICAgICAgICAgZXJyb3IucGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwgeyBhY3Rpb246IFwicmVjZWl2ZUVpcDExOTNFcnJvclwiLCBlcnJvciB9KTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgc2VuZChtZXRob2QsIHBhcmFtcykge1xuICAgICAgICBhd2FpdCB0aGlzLl9zdGFydCgpO1xuICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIuc2VuZChtZXRob2QsIHBhcmFtcyk7XG4gICAgfVxuICAgIGFzeW5jIF9zZW5kKHBheWxvYWQpIHtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoIUFycmF5LmlzQXJyYXkocGF5bG9hZCksIFwiRUlQLTExOTMgZG9lcyBub3Qgc3VwcG9ydCBiYXRjaCByZXF1ZXN0XCIsIFwicGF5bG9hZFwiLCBwYXlsb2FkKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuI3JlcXVlc3QocGF5bG9hZC5tZXRob2QsIHBheWxvYWQucGFyYW1zIHx8IFtdKTtcbiAgICAgICAgICAgIHJldHVybiBbeyBpZDogcGF5bG9hZC5pZCwgcmVzdWx0IH1dO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gW3tcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHBheWxvYWQuaWQsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiB7IGNvZGU6IGUuY29kZSwgZGF0YTogZS5kYXRhLCBtZXNzYWdlOiBlLm1lc3NhZ2UgfVxuICAgICAgICAgICAgICAgIH1dO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFJwY0Vycm9yKHBheWxvYWQsIGVycm9yKSB7XG4gICAgICAgIGVycm9yID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlcnJvcikpO1xuICAgICAgICAvLyBFSVAtMTE5MyBnaXZlcyB1cyBzb21lIG1hY2hpbmUtcmVhZGFibGUgZXJyb3IgY29kZXMsIHNvIHJld3JpdGVcbiAgICAgICAgLy8gdGhlbSBpbnRvIFxuICAgICAgICBzd2l0Y2ggKGVycm9yLmVycm9yLmNvZGUgfHwgLTEpIHtcbiAgICAgICAgICAgIGNhc2UgNDAwMTpcbiAgICAgICAgICAgICAgICBlcnJvci5lcnJvci5tZXNzYWdlID0gYGV0aGVycy11c2VyLWRlbmllZDogJHtlcnJvci5lcnJvci5tZXNzYWdlfWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQyMDA6XG4gICAgICAgICAgICAgICAgZXJyb3IuZXJyb3IubWVzc2FnZSA9IGBldGhlcnMtdW5zdXBwb3J0ZWQ6ICR7ZXJyb3IuZXJyb3IubWVzc2FnZX1gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRScGNFcnJvcihwYXlsb2FkLCBlcnJvcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXNvbHZlcyB0byBgYHRydWVgYCBpZiB0aGUgcHJvdmlkZXIgbWFuYWdlcyB0aGUgJSVhZGRyZXNzJSUuXG4gICAgICovXG4gICAgYXN5bmMgaGFzU2lnbmVyKGFkZHJlc3MpIHtcbiAgICAgICAgaWYgKGFkZHJlc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgYWRkcmVzcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCB0aGlzLnNlbmQoXCJldGhfYWNjb3VudHNcIiwgW10pO1xuICAgICAgICBpZiAodHlwZW9mIChhZGRyZXNzKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIChhY2NvdW50cy5sZW5ndGggPiBhZGRyZXNzKTtcbiAgICAgICAgfVxuICAgICAgICBhZGRyZXNzID0gYWRkcmVzcy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gYWNjb3VudHMuZmlsdGVyKChhKSA9PiAoYS50b0xvd2VyQ2FzZSgpID09PSBhZGRyZXNzKSkubGVuZ3RoICE9PSAwO1xuICAgIH1cbiAgICBhc3luYyBnZXRTaWduZXIoYWRkcmVzcykge1xuICAgICAgICBpZiAoYWRkcmVzcyA9PSBudWxsKSB7XG4gICAgICAgICAgICBhZGRyZXNzID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShhd2FpdCB0aGlzLmhhc1NpZ25lcihhZGRyZXNzKSkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy9jb25zdCByZXNwID0gXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jcmVxdWVzdChcImV0aF9yZXF1ZXN0QWNjb3VudHNcIiwgW10pO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJSRVNQXCIsIHJlc3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IGVycm9yLnBheWxvYWQ7XG4gICAgICAgICAgICAgICAgdGhyb3cgdGhpcy5nZXRScGNFcnJvcihwYXlsb2FkLCB7IGlkOiBwYXlsb2FkLmlkLCBlcnJvciB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIuZ2V0U2lnbmVyKGFkZHJlc3MpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLWJyb3dzZXIuanMubWFwIiwiLyoqXG4gKiAgVGhlcmUgYXJlIG1hbnkgYXdlc29tZSBjb21tdW5pdHkgc2VydmljZXMgdGhhdCBwcm92aWRlIEV0aGVyZXVtXG4gKiAgbm9kZXMgYm90aCBmb3IgZGV2ZWxvcGVycyBqdXN0IHN0YXJ0aW5nIG91dCBhbmQgZm9yIGxhcmdlLXNjYWxlXG4gKiAgY29tbXVuaXRpZXMuXG4gKlxuICogIEBfc2VjdGlvbjogYXBpL3Byb3ZpZGVycy90aGlyZHBhcnR5OiBDb21tdW5pdHkgUHJvdmlkZXJzICBbdGhpcmRwYXJ0eV1cbiAqL1xuLy8gU2hvdyB0aGUgdGhyb3R0bGUgbWVzc2FnZSBvbmx5IG9uY2UgcGVyIHNlcnZpY2VcbmNvbnN0IHNob3duID0gbmV3IFNldCgpO1xuLyoqXG4gKiAgRGlzcGxheXMgYSB3YXJuaW5nIGluIHRodCBjb25zb2xlIHdoZW4gdGhlIGNvbW11bml0eSByZXNvdXJjZSBpc1xuICogIGJlaW5nIHVzZWQgdG9vIGhlYXZpbHkgYnkgdGhlIGFwcCwgcmVjb21tZW5kaW5nIHRoZSBkZXZlbG9wZXJcbiAqICBhY3F1aXJlIHRoZWlyIG93biBjcmVkZW50aWFscyBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBjb21tdW5pdHlcbiAqICBjcmVkZW50aWFscy5cbiAqXG4gKiAgVGhlIG5vdGlmaWNhdGlvbiB3aWxsIG9ubHkgb2NjdXIgb25jZSBwZXIgc2VydmljZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3dUaHJvdHRsZU1lc3NhZ2Uoc2VydmljZSkge1xuICAgIGlmIChzaG93bi5oYXMoc2VydmljZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzaG93bi5hZGQoc2VydmljZSk7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT0gTk9USUNFID09PT09PT09PVwiKTtcbiAgICBjb25zb2xlLmxvZyhgUmVxdWVzdC1SYXRlIEV4Y2VlZGVkIGZvciAke3NlcnZpY2V9ICh0aGlzIG1lc3NhZ2Ugd2lsbCBub3QgYmUgcmVwZWF0ZWQpYCk7XG4gICAgY29uc29sZS5sb2coXCJcIik7XG4gICAgY29uc29sZS5sb2coXCJUaGUgZGVmYXVsdCBBUEkga2V5cyBmb3IgZWFjaCBzZXJ2aWNlIGFyZSBwcm92aWRlZCBhcyBhIGhpZ2hseS10aHJvdHRsZWQsXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiY29tbXVuaXR5IHJlc291cmNlIGZvciBsb3ctdHJhZmZpYyBwcm9qZWN0cyBhbmQgZWFybHkgcHJvdG90eXBpbmcuXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiV2hpbGUgeW91ciBhcHBsaWNhdGlvbiB3aWxsIGNvbnRpbnVlIHRvIGZ1bmN0aW9uLCB3ZSBoaWdobHkgcmVjb21tZW5kZWRcIik7XG4gICAgY29uc29sZS5sb2coXCJzaWduaW5nIHVwIGZvciB5b3VyIG93biBBUEkga2V5cyB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLCBpbmNyZWFzZSB5b3VyXCIpO1xuICAgIGNvbnNvbGUubG9nKFwicmVxdWVzdCByYXRlL2xpbWl0IGFuZCBlbmFibGUgb3RoZXIgcGVya3MsIHN1Y2ggYXMgbWV0cmljcyBhbmQgYWR2YW5jZWQgQVBJcy5cIik7XG4gICAgY29uc29sZS5sb2coXCJcIik7XG4gICAgY29uc29sZS5sb2coXCJGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovXFwvZG9jcy5ldGhlcnMub3JnL2FwaS1rZXlzL1wiKTtcbiAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PT09PT09PT09PT09PT09PT09XCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbXVuaXR5LmpzLm1hcCIsIi8qKlxuICogIFtbbGluay1hbmtyXV0gcHJvdmlkZXMgYSB0aGlyZC1wYXJ0eSBzZXJ2aWNlIGZvciBjb25uZWN0aW5nIHRvXG4gKiAgdmFyaW91cyBibG9ja2NoYWlucyBvdmVyIEpTT04tUlBDLlxuICpcbiAqICAqKlN1cHBvcnRlZCBOZXR3b3JrcyoqXG4gKlxuICogIC0gRXRoZXJldW0gTWFpbm5ldCAoYGBtYWlubmV0YGApXG4gKiAgLSBHb2VybGkgVGVzdG5ldCAoYGBnb2VybGlgYClcbiAqICAtIFNlcG9saWEgVGVzdG5ldCAoYGBzZXBvbGlhYGApXG4gKiAgLSBBcmJpdHJ1bSAoYGBhcmJpdHJ1bWBgKVxuICogIC0gQmFzZSAoYGBiYXNlYGApXG4gKiAgLSBCYXNlIEdvZXJsaWEgVGVzdG5ldCAoYGBiYXNlLWdvZXJsaWBgKVxuICogIC0gQmFzZSBTZXBvbGlhIFRlc3RuZXQgKGBgYmFzZS1zZXBvbGlhYGApXG4gKiAgLSBCTkIgKGBgYm5iYGApXG4gKiAgLSBCTkIgVGVzdG5ldCAoYGBibmJ0YGApXG4gKiAgLSBPcHRpbWlzbSAoYGBvcHRpbWlzbWBgKVxuICogIC0gT3B0aW1pc20gR29lcmxpIFRlc3RuZXQgKGBgb3B0aW1pc20tZ29lcmxpYGApXG4gKiAgLSBPcHRpbWlzbSBTZXBvbGlhIFRlc3RuZXQgKGBgb3B0aW1pc20tc2Vwb2xpYWBgKVxuICogIC0gUG9seWdvbiAoYGBtYXRpY2BgKVxuICogIC0gUG9seWdvbiBNdW1iYWkgVGVzdG5ldCAoYGBtYXRpYy1tdW1iYWlgYClcbiAqXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvcHJvdmlkZXJzL3RoaXJkcGFydHk6QW5rciAgW3Byb3ZpZGVycy1hbmtyXVxuICovXG5pbXBvcnQgeyBkZWZpbmVQcm9wZXJ0aWVzLCBGZXRjaFJlcXVlc3QsIGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBzaG93VGhyb3R0bGVNZXNzYWdlIH0gZnJvbSBcIi4vY29tbXVuaXR5LmpzXCI7XG5pbXBvcnQgeyBOZXR3b3JrIH0gZnJvbSBcIi4vbmV0d29yay5qc1wiO1xuaW1wb3J0IHsgSnNvblJwY1Byb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItanNvbnJwYy5qc1wiO1xuY29uc3QgZGVmYXVsdEFwaUtleSA9IFwiOWY3ZDkyOWIwMThjZGZmYjMzODUxN2VmYTA2ZjU4MzU5ZTg2ZmYxZmZkMzUwYmM4ODk3Mzg1MjM2NTllNzk3MlwiO1xuZnVuY3Rpb24gZ2V0SG9zdChuYW1lKSB7XG4gICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgIGNhc2UgXCJtYWlubmV0XCI6XG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vZXRoXCI7XG4gICAgICAgIGNhc2UgXCJnb2VybGlcIjpcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9ldGhfZ29lcmxpXCI7XG4gICAgICAgIGNhc2UgXCJzZXBvbGlhXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vZXRoX3NlcG9saWFcIjtcbiAgICAgICAgY2FzZSBcImFyYml0cnVtXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vYXJiaXRydW1cIjtcbiAgICAgICAgY2FzZSBcImJhc2VcIjpcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9iYXNlXCI7XG4gICAgICAgIGNhc2UgXCJiYXNlLWdvZXJsaVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwicnBjLmFua3IuY29tL2Jhc2VfZ29lcmxpXCI7XG4gICAgICAgIGNhc2UgXCJiYXNlLXNlcG9saWFcIjpcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9iYXNlX3NlcG9saWFcIjtcbiAgICAgICAgY2FzZSBcImJuYlwiOlxuICAgICAgICAgICAgcmV0dXJuIFwicnBjLmFua3IuY29tL2JzY1wiO1xuICAgICAgICBjYXNlIFwiYm5idFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwicnBjLmFua3IuY29tL2JzY190ZXN0bmV0X2NoYXBlbFwiO1xuICAgICAgICBjYXNlIFwibWF0aWNcIjpcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9wb2x5Z29uXCI7XG4gICAgICAgIGNhc2UgXCJtYXRpYy1tdW1iYWlcIjpcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9wb2x5Z29uX211bWJhaVwiO1xuICAgICAgICBjYXNlIFwib3B0aW1pc21cIjpcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9vcHRpbWlzbVwiO1xuICAgICAgICBjYXNlIFwib3B0aW1pc20tZ29lcmxpXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vb3B0aW1pc21fdGVzdG5ldFwiO1xuICAgICAgICBjYXNlIFwib3B0aW1pc20tc2Vwb2xpYVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwicnBjLmFua3IuY29tL29wdGltaXNtX3NlcG9saWFcIjtcbiAgICB9XG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgbmFtZSk7XG59XG4vKipcbiAqICBUaGUgKipBbmtyUHJvdmlkZXIqKiBjb25uZWN0cyB0byB0aGUgW1tsaW5rLWFua3JdXVxuICogIEpTT04tUlBDIGVuZC1wb2ludHMuXG4gKlxuICogIEJ5IGRlZmF1bHQsIGEgaGlnaGx5LXRocm90dGxlZCBBUEkga2V5IGlzIHVzZWQsIHdoaWNoIGlzXG4gKiAgYXBwcm9wcmlhdGUgZm9yIHF1aWNrIHByb3RvdHlwZXMgYW5kIHNpbXBsZSBzY3JpcHRzLiBUb1xuICogIGdhaW4gYWNjZXNzIHRvIGFuIGluY3JlYXNlZCByYXRlLWxpbWl0LCBpdCBpcyBoaWdobHlcbiAqICByZWNvbW1lbmRlZCB0byBbc2lnbiB1cCBoZXJlXShsaW5rLWFua3Itc2lnbnVwKS5cbiAqL1xuZXhwb3J0IGNsYXNzIEFua3JQcm92aWRlciBleHRlbmRzIEpzb25ScGNQcm92aWRlciB7XG4gICAgLyoqXG4gICAgICogIFRoZSBBUEkga2V5IGZvciB0aGUgQW5rciBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIGFwaUtleTtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlIGEgbmV3ICoqQW5rclByb3ZpZGVyKiouXG4gICAgICpcbiAgICAgKiAgQnkgZGVmYXVsdCBjb25uZWN0aW5nIHRvIGBgbWFpbm5ldGBgIHdpdGggYSBoaWdobHkgdGhyb3R0bGVkXG4gICAgICogIEFQSSBrZXkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoX25ldHdvcmssIGFwaUtleSkge1xuICAgICAgICBpZiAoX25ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgX25ldHdvcmsgPSBcIm1haW5uZXRcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXR3b3JrID0gTmV0d29yay5mcm9tKF9uZXR3b3JrKTtcbiAgICAgICAgaWYgKGFwaUtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICBhcGlLZXkgPSBkZWZhdWx0QXBpS2V5O1xuICAgICAgICB9XG4gICAgICAgIC8vIEFua3IgZG9lcyBub3Qgc3VwcG9ydCBmaWx0ZXJJZCwgc28gd2UgZm9yY2UgcG9sbGluZ1xuICAgICAgICBjb25zdCBvcHRpb25zID0geyBwb2xsaW5nOiB0cnVlLCBzdGF0aWNOZXR3b3JrOiBuZXR3b3JrIH07XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBBbmtyUHJvdmlkZXIuZ2V0UmVxdWVzdChuZXR3b3JrLCBhcGlLZXkpO1xuICAgICAgICBzdXBlcihyZXF1ZXN0LCBuZXR3b3JrLCBvcHRpb25zKTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IGFwaUtleSB9KTtcbiAgICB9XG4gICAgX2dldFByb3ZpZGVyKGNoYWluSWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQW5rclByb3ZpZGVyKGNoYWluSWQsIHRoaXMuYXBpS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICByZXR1cm4gc3VwZXIuX2dldFByb3ZpZGVyKGNoYWluSWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyBhIHByZXBhcmVkIHJlcXVlc3QgZm9yIGNvbm5lY3RpbmcgdG8gJSVuZXR3b3JrJSUgd2l0aFxuICAgICAqICAlJWFwaUtleSUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRSZXF1ZXN0KG5ldHdvcmssIGFwaUtleSkge1xuICAgICAgICBpZiAoYXBpS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIGFwaUtleSA9IGRlZmF1bHRBcGlLZXk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBGZXRjaFJlcXVlc3QoYGh0dHBzOi9cXC8ke2dldEhvc3QobmV0d29yay5uYW1lKX0vJHthcGlLZXl9YCk7XG4gICAgICAgIHJlcXVlc3QuYWxsb3dHemlwID0gdHJ1ZTtcbiAgICAgICAgaWYgKGFwaUtleSA9PT0gZGVmYXVsdEFwaUtleSkge1xuICAgICAgICAgICAgcmVxdWVzdC5yZXRyeUZ1bmMgPSBhc3luYyAocmVxdWVzdCwgcmVzcG9uc2UsIGF0dGVtcHQpID0+IHtcbiAgICAgICAgICAgICAgICBzaG93VGhyb3R0bGVNZXNzYWdlKFwiQW5rclByb3ZpZGVyXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICB9XG4gICAgZ2V0UnBjRXJyb3IocGF5bG9hZCwgZXJyb3IpIHtcbiAgICAgICAgaWYgKHBheWxvYWQubWV0aG9kID09PSBcImV0aF9zZW5kUmF3VHJhbnNhY3Rpb25cIikge1xuICAgICAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLmVycm9yICYmIGVycm9yLmVycm9yLm1lc3NhZ2UgPT09IFwiSU5URVJOQUxfRVJST1I6IGNvdWxkIG5vdCByZXBsYWNlIGV4aXN0aW5nIHR4XCIpIHtcbiAgICAgICAgICAgICAgICBlcnJvci5lcnJvci5tZXNzYWdlID0gXCJyZXBsYWNlbWVudCB0cmFuc2FjdGlvbiB1bmRlcnByaWNlZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRScGNFcnJvcihwYXlsb2FkLCBlcnJvcik7XG4gICAgfVxuICAgIGlzQ29tbXVuaXR5UmVzb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5hcGlLZXkgPT09IGRlZmF1bHRBcGlLZXkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLWFua3IuanMubWFwIiwiLyoqXG4gKiAgW1tsaW5rLWFsY2hlbXldXSBwcm92aWRlcyBhIHRoaXJkLXBhcnR5IHNlcnZpY2UgZm9yIGNvbm5lY3RpbmcgdG9cbiAqICB2YXJpb3VzIGJsb2NrY2hhaW5zIG92ZXIgSlNPTi1SUEMuXG4gKlxuICogICoqU3VwcG9ydGVkIE5ldHdvcmtzKipcbiAqXG4gKiAgLSBFdGhlcmV1bSBNYWlubmV0IChgYG1haW5uZXRgYClcbiAqICAtIEdvZXJsaSBUZXN0bmV0IChgYGdvZXJsaWBgKVxuICogIC0gU2Vwb2xpYSBUZXN0bmV0IChgYHNlcG9saWFgYClcbiAqICAtIEFyYml0cnVtIChgYGFyYml0cnVtYGApXG4gKiAgLSBBcmJpdHJ1bSBHb2VybGkgVGVzdG5ldCAoYGBhcmJpdHJ1bS1nb2VybGlgYClcbiAqICAtIEFyYml0cnVtIFNlcG9saWEgVGVzdG5ldCAoYGBhcmJpdHJ1bS1zZXBvbGlhYGApXG4gKiAgLSBCYXNlIChgYGJhc2VgYClcbiAqICAtIEJhc2UgR29lcmxpYSBUZXN0bmV0IChgYGJhc2UtZ29lcmxpYGApXG4gKiAgLSBCYXNlIFNlcG9saWEgVGVzdG5ldCAoYGBiYXNlLXNlcG9saWFgYClcbiAqICAtIE9wdGltaXNtIChgYG9wdGltaXNtYGApXG4gKiAgLSBPcHRpbWlzbSBHb2VybGkgVGVzdG5ldCAoYGBvcHRpbWlzbS1nb2VybGlgYClcbiAqICAtIE9wdGltaXNtIFNlcG9saWEgVGVzdG5ldCAoYGBvcHRpbWlzbS1zZXBvbGlhYGApXG4gKiAgLSBQb2x5Z29uIChgYG1hdGljYGApXG4gKiAgLSBQb2x5Z29uIE11bWJhaSBUZXN0bmV0IChgYG1hdGljLW11bWJhaWBgKVxuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9wcm92aWRlcnMvdGhpcmRwYXJ0eTpBbGNoZW15ICBbcHJvdmlkZXJzLWFsY2hlbXldXG4gKi9cbmltcG9ydCB7IGRlZmluZVByb3BlcnRpZXMsIHJlc29sdmVQcm9wZXJ0aWVzLCBhc3NlcnQsIGFzc2VydEFyZ3VtZW50LCBGZXRjaFJlcXVlc3QgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IHNob3dUaHJvdHRsZU1lc3NhZ2UgfSBmcm9tIFwiLi9jb21tdW5pdHkuanNcIjtcbmltcG9ydCB7IE5ldHdvcmsgfSBmcm9tIFwiLi9uZXR3b3JrLmpzXCI7XG5pbXBvcnQgeyBKc29uUnBjUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci1qc29ucnBjLmpzXCI7XG5jb25zdCBkZWZhdWx0QXBpS2V5ID0gXCJfZ2c3d1NTaTBLTUJzZEtuR1ZmSER1ZXE2eE1COUVrQ1wiO1xuZnVuY3Rpb24gZ2V0SG9zdChuYW1lKSB7XG4gICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgIGNhc2UgXCJtYWlubmV0XCI6XG4gICAgICAgICAgICByZXR1cm4gXCJldGgtbWFpbm5ldC5hbGNoZW15YXBpLmlvXCI7XG4gICAgICAgIGNhc2UgXCJnb2VybGlcIjpcbiAgICAgICAgICAgIHJldHVybiBcImV0aC1nb2VybGkuZy5hbGNoZW15LmNvbVwiO1xuICAgICAgICBjYXNlIFwic2Vwb2xpYVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiZXRoLXNlcG9saWEuZy5hbGNoZW15LmNvbVwiO1xuICAgICAgICBjYXNlIFwiYXJiaXRydW1cIjpcbiAgICAgICAgICAgIHJldHVybiBcImFyYi1tYWlubmV0LmcuYWxjaGVteS5jb21cIjtcbiAgICAgICAgY2FzZSBcImFyYml0cnVtLWdvZXJsaVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYXJiLWdvZXJsaS5nLmFsY2hlbXkuY29tXCI7XG4gICAgICAgIGNhc2UgXCJhcmJpdHJ1bS1zZXBvbGlhXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJhcmItc2Vwb2xpYS5nLmFsY2hlbXkuY29tXCI7XG4gICAgICAgIGNhc2UgXCJiYXNlXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJiYXNlLW1haW5uZXQuZy5hbGNoZW15LmNvbVwiO1xuICAgICAgICBjYXNlIFwiYmFzZS1nb2VybGlcIjpcbiAgICAgICAgICAgIHJldHVybiBcImJhc2UtZ29lcmxpLmcuYWxjaGVteS5jb21cIjtcbiAgICAgICAgY2FzZSBcImJhc2Utc2Vwb2xpYVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYmFzZS1zZXBvbGlhLmcuYWxjaGVteS5jb21cIjtcbiAgICAgICAgY2FzZSBcIm1hdGljXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJwb2x5Z29uLW1haW5uZXQuZy5hbGNoZW15LmNvbVwiO1xuICAgICAgICBjYXNlIFwibWF0aWMtbXVtYmFpXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJwb2x5Z29uLW11bWJhaS5nLmFsY2hlbXkuY29tXCI7XG4gICAgICAgIGNhc2UgXCJvcHRpbWlzbVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwib3B0LW1haW5uZXQuZy5hbGNoZW15LmNvbVwiO1xuICAgICAgICBjYXNlIFwib3B0aW1pc20tZ29lcmxpXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJvcHQtZ29lcmxpLmcuYWxjaGVteS5jb21cIjtcbiAgICAgICAgY2FzZSBcIm9wdGltaXNtLXNlcG9saWFcIjpcbiAgICAgICAgICAgIHJldHVybiBcIm9wdC1zZXBvbGlhLmcuYWxjaGVteS5jb21cIjtcbiAgICB9XG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgbmFtZSk7XG59XG4vKipcbiAqICBUaGUgKipBbGNoZW15UHJvdmlkZXIqKiBjb25uZWN0cyB0byB0aGUgW1tsaW5rLWFsY2hlbXldXVxuICogIEpTT04tUlBDIGVuZC1wb2ludHMuXG4gKlxuICogIEJ5IGRlZmF1bHQsIGEgaGlnaGx5LXRocm90dGxlZCBBUEkga2V5IGlzIHVzZWQsIHdoaWNoIGlzXG4gKiAgYXBwcm9wcmlhdGUgZm9yIHF1aWNrIHByb3RvdHlwZXMgYW5kIHNpbXBsZSBzY3JpcHRzLiBUb1xuICogIGdhaW4gYWNjZXNzIHRvIGFuIGluY3JlYXNlZCByYXRlLWxpbWl0LCBpdCBpcyBoaWdobHlcbiAqICByZWNvbW1lbmRlZCB0byBbc2lnbiB1cCBoZXJlXShsaW5rLWFsY2hlbXktc2lnbnVwKS5cbiAqXG4gKiAgQF9kb2Nsb2M6IGFwaS9wcm92aWRlcnMvdGhpcmRwYXJ0eVxuICovXG5leHBvcnQgY2xhc3MgQWxjaGVteVByb3ZpZGVyIGV4dGVuZHMgSnNvblJwY1Byb3ZpZGVyIHtcbiAgICBhcGlLZXk7XG4gICAgY29uc3RydWN0b3IoX25ldHdvcmssIGFwaUtleSkge1xuICAgICAgICBpZiAoX25ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgX25ldHdvcmsgPSBcIm1haW5uZXRcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXR3b3JrID0gTmV0d29yay5mcm9tKF9uZXR3b3JrKTtcbiAgICAgICAgaWYgKGFwaUtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICBhcGlLZXkgPSBkZWZhdWx0QXBpS2V5O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBBbGNoZW15UHJvdmlkZXIuZ2V0UmVxdWVzdChuZXR3b3JrLCBhcGlLZXkpO1xuICAgICAgICBzdXBlcihyZXF1ZXN0LCBuZXR3b3JrLCB7IHN0YXRpY05ldHdvcms6IG5ldHdvcmsgfSk7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywgeyBhcGlLZXkgfSk7XG4gICAgfVxuICAgIF9nZXRQcm92aWRlcihjaGFpbklkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFsY2hlbXlQcm92aWRlcihjaGFpbklkLCB0aGlzLmFwaUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRQcm92aWRlcihjaGFpbklkKTtcbiAgICB9XG4gICAgYXN5bmMgX3BlcmZvcm0ocmVxKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZG9jcy5hbGNoZW15LmNvbS9yZWZlcmVuY2UvdHJhY2UtdHJhbnNhY3Rpb25cbiAgICAgICAgaWYgKHJlcS5tZXRob2QgPT09IFwiZ2V0VHJhbnNhY3Rpb25SZXN1bHRcIikge1xuICAgICAgICAgICAgY29uc3QgeyB0cmFjZSwgdHggfSA9IGF3YWl0IHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgICAgICB0cmFjZTogdGhpcy5zZW5kKFwidHJhY2VfdHJhbnNhY3Rpb25cIiwgW3JlcS5oYXNoXSksXG4gICAgICAgICAgICAgICAgdHg6IHRoaXMuZ2V0VHJhbnNhY3Rpb24ocmVxLmhhc2gpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0cmFjZSA9PSBudWxsIHx8IHR4ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBkYXRhO1xuICAgICAgICAgICAgbGV0IGVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSB0cmFjZVswXS5yZXN1bHQub3V0cHV0O1xuICAgICAgICAgICAgICAgIGVycm9yID0gKHRyYWNlWzBdLmVycm9yID09PSBcIlJldmVydGVkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KCFlcnJvciwgXCJhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgdHJhbnNhY3Rpb24gZXhlY3V0aW9uc1wiLCBcIkNBTExfRVhDRVBUSU9OXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImdldFRyYW5zYWN0aW9uUmVzdWx0XCIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHJlYXNvbjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHR4LFxuICAgICAgICAgICAgICAgICAgICBpbnZvY2F0aW9uOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICByZXZlcnQ6IG51bGwgLy8gQFRPRE9cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFzc2VydChmYWxzZSwgXCJjb3VsZCBub3QgcGFyc2UgdHJhY2UgcmVzdWx0XCIsIFwiQkFEX0RBVEFcIiwgeyB2YWx1ZTogdHJhY2UgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IHN1cGVyLl9wZXJmb3JtKHJlcSk7XG4gICAgfVxuICAgIGlzQ29tbXVuaXR5UmVzb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5hcGlLZXkgPT09IGRlZmF1bHRBcGlLZXkpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0UmVxdWVzdChuZXR3b3JrLCBhcGlLZXkpIHtcbiAgICAgICAgaWYgKGFwaUtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICBhcGlLZXkgPSBkZWZhdWx0QXBpS2V5O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgRmV0Y2hSZXF1ZXN0KGBodHRwczovXFwvJHtnZXRIb3N0KG5ldHdvcmsubmFtZSl9L3YyLyR7YXBpS2V5fWApO1xuICAgICAgICByZXF1ZXN0LmFsbG93R3ppcCA9IHRydWU7XG4gICAgICAgIGlmIChhcGlLZXkgPT09IGRlZmF1bHRBcGlLZXkpIHtcbiAgICAgICAgICAgIHJlcXVlc3QucmV0cnlGdW5jID0gYXN5bmMgKHJlcXVlc3QsIHJlc3BvbnNlLCBhdHRlbXB0KSA9PiB7XG4gICAgICAgICAgICAgICAgc2hvd1Rocm90dGxlTWVzc2FnZShcImFsY2hlbXlcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLWFsY2hlbXkuanMubWFwIiwiLyoqXG4gKiAgQWJvdXQgQ2xvdWRmbGFyZVxuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9wcm92aWRlcnMvdGhpcmRwYXJ0eTpDbG91ZGZsYXJlICBbcHJvdmlkZXJzLWNsb3VkZmxhcmVdXG4gKi9cbmltcG9ydCB7IGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBOZXR3b3JrIH0gZnJvbSBcIi4vbmV0d29yay5qc1wiO1xuaW1wb3J0IHsgSnNvblJwY1Byb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItanNvbnJwYy5qc1wiO1xuLyoqXG4gKiAgQWJvdXQgQ2xvdWRmbGFyZS4uLlxuICovXG5leHBvcnQgY2xhc3MgQ2xvdWRmbGFyZVByb3ZpZGVyIGV4dGVuZHMgSnNvblJwY1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihfbmV0d29yaykge1xuICAgICAgICBpZiAoX25ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgX25ldHdvcmsgPSBcIm1haW5uZXRcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXR3b3JrID0gTmV0d29yay5mcm9tKF9uZXR3b3JrKTtcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQobmV0d29yay5uYW1lID09PSBcIm1haW5uZXRcIiwgXCJ1bnN1cHBvcnRlZCBuZXR3b3JrXCIsIFwibmV0d29ya1wiLCBfbmV0d29yayk7XG4gICAgICAgIHN1cGVyKFwiaHR0cHM6L1xcL2Nsb3VkZmxhcmUtZXRoLmNvbS9cIiwgbmV0d29yaywgeyBzdGF0aWNOZXR3b3JrOiBuZXR3b3JrIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLWNsb3VkZmxhcmUuanMubWFwIiwiLyoqXG4gKiAgW1tsaW5rLWV0aGVyc2Nhbl1dIHByb3ZpZGVzIGEgdGhpcmQtcGFydHkgc2VydmljZSBmb3IgY29ubmVjdGluZyB0b1xuICogIHZhcmlvdXMgYmxvY2tjaGFpbnMgb3ZlciBhIGNvbWJpbmF0aW9uIG9mIEpTT04tUlBDIGFuZCBjdXN0b20gQVBJXG4gKiAgZW5kcG9pbnRzLlxuICpcbiAqICAqKlN1cHBvcnRlZCBOZXR3b3JrcyoqXG4gKlxuICogIC0gRXRoZXJldW0gTWFpbm5ldCAoYGBtYWlubmV0YGApXG4gKiAgLSBHb2VybGkgVGVzdG5ldCAoYGBnb2VybGlgYClcbiAqICAtIFNlcG9saWEgVGVzdG5ldCAoYGBzZXBvbGlhYGApXG4gKiAgLSBTZXBvbGlhIFRlc3RuZXQgKGBgaG9sZXNreWBgKVxuICogIC0gQXJiaXRydW0gKGBgYXJiaXRydW1gYClcbiAqICAtIEFyYml0cnVtIEdvZXJsaSBUZXN0bmV0IChgYGFyYml0cnVtLWdvZXJsaWBgKVxuICogIC0gQk5CIFNtYXJ0IENoYWluIE1haW5uZXQgKGBgYm5iYGApXG4gKiAgLSBCTkIgU21hcnQgQ2hhaW4gVGVzdG5ldCAoYGBibmJ0YGApXG4gKiAgLSBPcHRpbWlzbSAoYGBvcHRpbWlzbWBgKVxuICogIC0gT3B0aW1pc20gR29lcmxpIFRlc3RuZXQgKGBgb3B0aW1pc20tZ29lcmxpYGApXG4gKiAgLSBQb2x5Z29uIChgYG1hdGljYGApXG4gKiAgLSBQb2x5Z29uIE11bWJhaSBUZXN0bmV0IChgYG1hdGljLW11bWJhaWBgKVxuICpcbiAqICBAX3N1YnNlY3Rpb24gYXBpL3Byb3ZpZGVycy90aGlyZHBhcnR5OkV0aGVyc2NhbiAgW3Byb3ZpZGVycy1ldGhlcnNjYW5dXG4gKi9cbmltcG9ydCB7IEFiaUNvZGVyIH0gZnJvbSBcIi4uL2FiaS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQ29udHJhY3QgfSBmcm9tIFwiLi4vY29udHJhY3QvaW5kZXguanNcIjtcbmltcG9ydCB7IGFjY2Vzc0xpc3RpZnksIFRyYW5zYWN0aW9uIH0gZnJvbSBcIi4uL3RyYW5zYWN0aW9uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBkZWZpbmVQcm9wZXJ0aWVzLCBoZXhsaWZ5LCB0b1F1YW50aXR5LCBGZXRjaFJlcXVlc3QsIGFzc2VydCwgYXNzZXJ0QXJndW1lbnQsIGlzRXJyb3IsIFxuLy8gICAgcGFyc2VVbml0cyxcbnRvVXRmOFN0cmluZyB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQWJzdHJhY3RQcm92aWRlciB9IGZyb20gXCIuL2Fic3RyYWN0LXByb3ZpZGVyLmpzXCI7XG5pbXBvcnQgeyBOZXR3b3JrIH0gZnJvbSBcIi4vbmV0d29yay5qc1wiO1xuaW1wb3J0IHsgTmV0d29ya1BsdWdpbiB9IGZyb20gXCIuL3BsdWdpbnMtbmV0d29yay5qc1wiO1xuaW1wb3J0IHsgc2hvd1Rocm90dGxlTWVzc2FnZSB9IGZyb20gXCIuL2NvbW11bml0eS5qc1wiO1xuY29uc3QgVEhST1RUTEUgPSAyMDAwO1xuZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB0eXBlb2YgKHZhbHVlLnRoZW4pID09PSBcImZ1bmN0aW9uXCIpO1xufVxuY29uc3QgRXRoZXJzY2FuUGx1Z2luSWQgPSBcIm9yZy5ldGhlcnMucGx1Z2lucy5wcm92aWRlci5FdGhlcnNjYW5cIjtcbi8qKlxuICogIEEgTmV0d29yayBjYW4gaW5jbHVkZSBhbiAqKkV0aGVyc2NhblBsdWdpbioqIHRvIHByb3ZpZGVcbiAqICBhIGN1c3RvbSBiYXNlIFVSTC5cbiAqXG4gKiAgQF9kb2Nsb2M6IGFwaS9wcm92aWRlcnMvdGhpcmRwYXJ0eTpFdGhlcnNjYW5cbiAqL1xuZXhwb3J0IGNsYXNzIEV0aGVyc2NhblBsdWdpbiBleHRlbmRzIE5ldHdvcmtQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqICBUaGUgRXRoZXJzY2FuIEFQSSBiYXNlIFVSTC5cbiAgICAgKi9cbiAgICBiYXNlVXJsO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3ICoqRXRoZXJzY2FuUHJvdmlkZXIqKiB3aGljaCB3aWxsIHVzZVxuICAgICAqICAlJWJhc2VVcmwlJS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihiYXNlVXJsKSB7XG4gICAgICAgIHN1cGVyKEV0aGVyc2NhblBsdWdpbklkKTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IGJhc2VVcmwgfSk7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IEV0aGVyc2NhblBsdWdpbih0aGlzLmJhc2VVcmwpO1xuICAgIH1cbn1cbmNvbnN0IHNraXBLZXlzID0gW1wiZW5hYmxlQ2NpcFJlYWRcIl07XG5sZXQgbmV4dElkID0gMTtcbi8qKlxuICogIFRoZSAqKkV0aGVyc2NhbkJhc2VQcm92aWRlcioqIGlzIHRoZSBzdXBlci1jbGFzcyBvZlxuICogIFtbRXRoZXJzY2FuUHJvdmlkZXJdXSwgd2hpY2ggc2hvdWxkIGdlbmVyYWxseSBiZSB1c2VkIGluc3RlYWQuXG4gKlxuICogIFNpbmNlIHRoZSAqKkV0aGVyc2NhblByb3ZpZGVyKiogaW5jbHVkZXMgYWRkaXRpb25hbCBjb2RlIGZvclxuICogIFtbQ29udHJhY3RdXSBhY2Nlc3MsIGluIC8vcmFyZSBjYXNlcy8vIHRoYXQgY29udHJhY3RzIGFyZSBub3RcbiAqICB1c2VkLCB0aGlzIGNsYXNzIGNhbiByZWR1Y2UgY29kZSBzaXplLlxuICpcbiAqICBAX2RvY2xvYzogYXBpL3Byb3ZpZGVycy90aGlyZHBhcnR5OkV0aGVyc2NhblxuICovXG5leHBvcnQgY2xhc3MgRXRoZXJzY2FuUHJvdmlkZXIgZXh0ZW5kcyBBYnN0cmFjdFByb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIGNvbm5lY3RlZCBuZXR3b3JrLlxuICAgICAqL1xuICAgIG5ldHdvcms7XG4gICAgLyoqXG4gICAgICogIFRoZSBBUEkga2V5IG9yIG51bGwgaWYgdXNpbmcgdGhlIGNvbW11bml0eSBwcm92aWRlZCBiYW5kd2lkdGguXG4gICAgICovXG4gICAgYXBpS2V5O1xuICAgICNwbHVnaW47XG4gICAgLyoqXG4gICAgICogIENyZWF0ZXMgYSBuZXcgKipFdGhlcnNjYW5CYXNlUHJvdmlkZXIqKi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihfbmV0d29yaywgX2FwaUtleSkge1xuICAgICAgICBjb25zdCBhcGlLZXkgPSAoX2FwaUtleSAhPSBudWxsKSA/IF9hcGlLZXkgOiBudWxsO1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb25zdCBuZXR3b3JrID0gTmV0d29yay5mcm9tKF9uZXR3b3JrKTtcbiAgICAgICAgdGhpcy4jcGx1Z2luID0gbmV0d29yay5nZXRQbHVnaW4oRXRoZXJzY2FuUGx1Z2luSWQpO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHsgYXBpS2V5LCBuZXR3b3JrIH0pO1xuICAgICAgICAvLyBUZXN0IHRoYXQgdGhlIG5ldHdvcmsgaXMgc3VwcG9ydGVkIGJ5IEV0aGVyc2NhblxuICAgICAgICB0aGlzLmdldEJhc2VVcmwoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIGJhc2UgVVJMLlxuICAgICAqXG4gICAgICogIElmIGFuIFtbRXRoZXJzY2FuUGx1Z2luXV0gaXMgY29uZmlndXJlZCBvbiB0aGVcbiAgICAgKiAgW1tFdGhlcnNjYW5CYXNlUHJvdmlkZXJfbmV0d29ya11dLCByZXR1cm5zIHRoZSBwbHVnaW4nc1xuICAgICAqICBiYXNlVXJsLlxuICAgICAqL1xuICAgIGdldEJhc2VVcmwoKSB7XG4gICAgICAgIGlmICh0aGlzLiNwbHVnaW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiNwbHVnaW4uYmFzZVVybDtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMubmV0d29yay5uYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFwibWFpbm5ldFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi9cXC9hcGkuZXRoZXJzY2FuLmlvXCI7XG4gICAgICAgICAgICBjYXNlIFwiZ29lcmxpXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaHR0cHM6L1xcL2FwaS1nb2VybGkuZXRoZXJzY2FuLmlvXCI7XG4gICAgICAgICAgICBjYXNlIFwic2Vwb2xpYVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi9cXC9hcGktc2Vwb2xpYS5ldGhlcnNjYW4uaW9cIjtcbiAgICAgICAgICAgIGNhc2UgXCJob2xlc2t5XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaHR0cHM6L1xcL2FwaS1ob2xlc2t5LmV0aGVyc2Nhbi5pb1wiO1xuICAgICAgICAgICAgY2FzZSBcImFyYml0cnVtXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaHR0cHM6L1xcL2FwaS5hcmJpc2Nhbi5pb1wiO1xuICAgICAgICAgICAgY2FzZSBcImFyYml0cnVtLWdvZXJsaVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi9cXC9hcGktZ29lcmxpLmFyYmlzY2FuLmlvXCI7XG4gICAgICAgICAgICBjYXNlIFwiYm5iXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaHR0cHM6L1xcL2FwaS5ic2NzY2FuLmNvbVwiO1xuICAgICAgICAgICAgY2FzZSBcImJuYnRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJodHRwczovXFwvYXBpLXRlc3RuZXQuYnNjc2Nhbi5jb21cIjtcbiAgICAgICAgICAgIGNhc2UgXCJtYXRpY1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi9cXC9hcGkucG9seWdvbnNjYW4uY29tXCI7XG4gICAgICAgICAgICBjYXNlIFwibWF0aWMtbXVtYmFpXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaHR0cHM6L1xcL2FwaS10ZXN0bmV0LnBvbHlnb25zY2FuLmNvbVwiO1xuICAgICAgICAgICAgY2FzZSBcIm9wdGltaXNtXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaHR0cHM6L1xcL2FwaS1vcHRpbWlzdGljLmV0aGVyc2Nhbi5pb1wiO1xuICAgICAgICAgICAgY2FzZSBcIm9wdGltaXNtLWdvZXJsaVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi9cXC9hcGktZ29lcmxpLW9wdGltaXN0aWMuZXRoZXJzY2FuLmlvXCI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICB9XG4gICAgICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcInVuc3VwcG9ydGVkIG5ldHdvcmtcIiwgXCJuZXR3b3JrXCIsIHRoaXMubmV0d29yayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoZSBVUkwgZm9yIHRoZSAlJW1vZHVsZSUlIGFuZCAlJXBhcmFtcyUlLlxuICAgICAqL1xuICAgIGdldFVybChtb2R1bGUsIHBhcmFtcykge1xuICAgICAgICBjb25zdCBxdWVyeSA9IE9iamVjdC5rZXlzKHBhcmFtcykucmVkdWNlKChhY2N1bSwga2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhY2N1bSArPSBgJiR7a2V5fT0ke3ZhbHVlfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgICAgIH0sIFwiXCIpO1xuICAgICAgICBjb25zdCBhcGlLZXkgPSAoKHRoaXMuYXBpS2V5KSA/IGAmYXBpa2V5PSR7dGhpcy5hcGlLZXl9YCA6IFwiXCIpO1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5nZXRCYXNlVXJsKCl9L2FwaT9tb2R1bGU9JHttb2R1bGV9JHtxdWVyeX0ke2FwaUtleX1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB0aGUgVVJMIGZvciB1c2luZyBQT1NUIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIGdldFBvc3RVcmwoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmdldEJhc2VVcmwoKX0vYXBpYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgdGhlIHBhcmFtZXRlcnMgZm9yIHVzaW5nIFBPU1QgcmVxdWVzdHMuXG4gICAgICovXG4gICAgZ2V0UG9zdERhdGEobW9kdWxlLCBwYXJhbXMpIHtcbiAgICAgICAgcGFyYW1zLm1vZHVsZSA9IG1vZHVsZTtcbiAgICAgICAgcGFyYW1zLmFwaWtleSA9IHRoaXMuYXBpS2V5O1xuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH1cbiAgICBhc3luYyBkZXRlY3ROZXR3b3JrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXR3b3JrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVzb2x2ZXMgdG8gdGhlIHJlc3VsdCBvZiBjYWxsaW5nICUlbW9kdWxlJSUgd2l0aCAlJXBhcmFtcyUlLlxuICAgICAqXG4gICAgICogIElmICUlcG9zdCUlLCB0aGUgcmVxdWVzdCBpcyBtYWRlIGFzIGEgUE9TVCByZXF1ZXN0LlxuICAgICAqL1xuICAgIGFzeW5jIGZldGNoKG1vZHVsZSwgcGFyYW1zLCBwb3N0KSB7XG4gICAgICAgIGNvbnN0IGlkID0gbmV4dElkKys7XG4gICAgICAgIGNvbnN0IHVybCA9IChwb3N0ID8gdGhpcy5nZXRQb3N0VXJsKCkgOiB0aGlzLmdldFVybChtb2R1bGUsIHBhcmFtcykpO1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gKHBvc3QgPyB0aGlzLmdldFBvc3REYXRhKG1vZHVsZSwgcGFyYW1zKSA6IG51bGwpO1xuICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJzZW5kUmVxdWVzdFwiLCBpZCwgdXJsLCBwYXlsb2FkOiBwYXlsb2FkIH0pO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IEZldGNoUmVxdWVzdCh1cmwpO1xuICAgICAgICByZXF1ZXN0LnNldFRocm90dGxlUGFyYW1zKHsgc2xvdEludGVydmFsOiAxMDAwIH0pO1xuICAgICAgICByZXF1ZXN0LnJldHJ5RnVuYyA9IChyZXEsIHJlc3AsIGF0dGVtcHQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ29tbXVuaXR5UmVzb3VyY2UoKSkge1xuICAgICAgICAgICAgICAgIHNob3dUaHJvdHRsZU1lc3NhZ2UoXCJFdGhlcnNjYW5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICByZXF1ZXN0LnByb2Nlc3NGdW5jID0gYXN5bmMgKHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSByZXNwb25zZS5oYXNCb2R5KCkgPyBKU09OLnBhcnNlKHRvVXRmOFN0cmluZyhyZXNwb25zZS5ib2R5KSkgOiB7fTtcbiAgICAgICAgICAgIGNvbnN0IHRocm90dGxlID0gKCh0eXBlb2YgKHJlc3VsdC5yZXN1bHQpID09PSBcInN0cmluZ1wiKSA/IHJlc3VsdC5yZXN1bHQgOiBcIlwiKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJyYXRlIGxpbWl0XCIpID49IDA7XG4gICAgICAgICAgICBpZiAobW9kdWxlID09PSBcInByb3h5XCIpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIEpTT04gcmVzcG9uc2UgaW5kaWNhdGVzIHdlIGFyZSBiZWluZyB0aHJvdHRsZWRcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5zdGF0dXMgPT0gMCAmJiByZXN1bHQubWVzc2FnZSA9PSBcIk5PVE9LXCIgJiYgdGhyb3R0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwgeyBhY3Rpb246IFwicmVjZWl2ZUVycm9yXCIsIGlkLCByZWFzb246IFwicHJveHktTk9UT0tcIiwgZXJyb3I6IHJlc3VsdCB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UudGhyb3dUaHJvdHRsZUVycm9yKHJlc3VsdC5yZXN1bHQsIFRIUk9UVExFKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhyb3R0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwgeyBhY3Rpb246IFwicmVjZWl2ZUVycm9yXCIsIGlkLCByZWFzb246IFwibnVsbCByZXN1bHRcIiwgZXJyb3I6IHJlc3VsdC5yZXN1bHQgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnRocm93VGhyb3R0bGVFcnJvcihyZXN1bHQucmVzdWx0LCBUSFJPVFRMRSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9O1xuICAgICAgICBpZiAocGF5bG9hZCkge1xuICAgICAgICAgICAgcmVxdWVzdC5zZXRIZWFkZXIoXCJjb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIik7XG4gICAgICAgICAgICByZXF1ZXN0LmJvZHkgPSBPYmplY3Qua2V5cyhwYXlsb2FkKS5tYXAoKGspID0+IGAke2t9PSR7cGF5bG9hZFtrXX1gKS5qb2luKFwiJlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3Quc2VuZCgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzcG9uc2UuYXNzZXJ0T2soKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHsgYWN0aW9uOiBcInJlY2VpdmVFcnJvclwiLCBpZCwgZXJyb3IsIHJlYXNvbjogXCJhc3NlcnRPa1wiIH0pO1xuICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBcInJlc3BvbnNlIGVycm9yXCIsIFwiU0VSVkVSX0VSUk9SXCIsIHsgcmVxdWVzdCwgcmVzcG9uc2UgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXNwb25zZS5oYXNCb2R5KCkpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHsgYWN0aW9uOiBcInJlY2VpdmVFcnJvclwiLCBpZCwgZXJyb3I6IFwibWlzc2luZyBib2R5XCIsIHJlYXNvbjogXCJudWxsIGJvZHlcIiB9KTtcbiAgICAgICAgICAgIGFzc2VydChmYWxzZSwgXCJtaXNzaW5nIHJlc3BvbnNlXCIsIFwiU0VSVkVSX0VSUk9SXCIsIHsgcmVxdWVzdCwgcmVzcG9uc2UgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZSh0b1V0ZjhTdHJpbmcocmVzcG9uc2UuYm9keSkpO1xuICAgICAgICBpZiAobW9kdWxlID09PSBcInByb3h5XCIpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuanNvbnJwYyAhPSBcIjIuMFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwgeyBhY3Rpb246IFwicmVjZWl2ZUVycm9yXCIsIGlkLCByZXN1bHQsIHJlYXNvbjogXCJpbnZhbGlkIEpTT04tUlBDXCIgfSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBcImludmFsaWQgSlNPTi1SUEMgcmVzcG9uc2UgKG1pc3NpbmcganNvbnJwYz0nMi4wJylcIiwgXCJTRVJWRVJfRVJST1JcIiwgeyByZXF1ZXN0LCByZXNwb25zZSwgaW5mbzogeyByZXN1bHQgfSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJyZWNlaXZlRXJyb3JcIiwgaWQsIHJlc3VsdCwgcmVhc29uOiBcIkpTT04tUlBDIGVycm9yXCIgfSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBcImVycm9yIHJlc3BvbnNlXCIsIFwiU0VSVkVSX0VSUk9SXCIsIHsgcmVxdWVzdCwgcmVzcG9uc2UsIGluZm86IHsgcmVzdWx0IH0gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJyZWNlaXZlUmVxdWVzdFwiLCBpZCwgcmVzdWx0IH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBnZXRMb2dzLCBnZXRIaXN0b3J5IGhhdmUgd2VpcmQgc3VjY2VzcyByZXNwb25zZXNcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09IDAgJiYgKHJlc3VsdC5tZXNzYWdlID09PSBcIk5vIHJlY29yZHMgZm91bmRcIiB8fCByZXN1bHQubWVzc2FnZSA9PT0gXCJObyB0cmFuc2FjdGlvbnMgZm91bmRcIikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJyZWNlaXZlUmVxdWVzdFwiLCBpZCwgcmVzdWx0IH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQucmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgIT0gMSB8fCAodHlwZW9mIChyZXN1bHQubWVzc2FnZSkgPT09IFwic3RyaW5nXCIgJiYgIXJlc3VsdC5tZXNzYWdlLm1hdGNoKC9eT0svKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7IGFjdGlvbjogXCJyZWNlaXZlRXJyb3JcIiwgaWQsIHJlc3VsdCB9KTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZmFsc2UsIFwiZXJyb3IgcmVzcG9uc2VcIiwgXCJTRVJWRVJfRVJST1JcIiwgeyByZXF1ZXN0LCByZXNwb25zZSwgaW5mbzogeyByZXN1bHQgfSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHsgYWN0aW9uOiBcInJlY2VpdmVSZXF1ZXN0XCIsIGlkLCByZXN1bHQgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyAlJXRyYW5zYWN0aW9uJSUgbm9ybWFsaXplZCBmb3IgdGhlIEV0aGVyc2NhbiBBUEkuXG4gICAgICovXG4gICAgX2dldFRyYW5zYWN0aW9uUG9zdERhdGEodHJhbnNhY3Rpb24pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0cmFuc2FjdGlvbikge1xuICAgICAgICAgICAgaWYgKHNraXBLZXlzLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHJhbnNhY3Rpb25ba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB0cmFuc2FjdGlvbltrZXldO1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJ0eXBlXCIgJiYgdmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrZXkgPT09IFwiYmxvY2tUYWdcIiAmJiB2YWx1ZSA9PT0gXCJsYXRlc3RcIikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUXVhbnRpdHktdHlwZXMgcmVxdWlyZSBubyBsZWFkaW5nIHplcm8sIHVubGVzcyAwXG4gICAgICAgICAgICBpZiAoeyB0eXBlOiB0cnVlLCBnYXNMaW1pdDogdHJ1ZSwgZ2FzUHJpY2U6IHRydWUsIG1heEZlZVBlckdzOiB0cnVlLCBtYXhQcmlvcml0eUZlZVBlckdhczogdHJ1ZSwgbm9uY2U6IHRydWUsIHZhbHVlOiB0cnVlIH1ba2V5XSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9RdWFudGl0eSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiYWNjZXNzTGlzdFwiKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBcIltcIiArIGFjY2Vzc0xpc3RpZnkodmFsdWUpLm1hcCgoc2V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBge2FkZHJlc3M6XCIke3NldC5hZGRyZXNzfVwiLHN0b3JhZ2VLZXlzOltcIiR7c2V0LnN0b3JhZ2VLZXlzLmpvaW4oJ1wiLFwiJyl9XCJdfWA7XG4gICAgICAgICAgICAgICAgfSkuam9pbihcIixcIikgKyBcIl1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gaGV4bGlmeSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBUaHJvd3MgdGhlIG5vcm1hbGl6ZWQgRXRoZXJzY2FuIGVycm9yLlxuICAgICAqL1xuICAgIF9jaGVja0Vycm9yKHJlcSwgZXJyb3IsIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIC8vIFB1bGwgYW55IG1lc3NhZ2Ugb3V0IGlmLCBwb3NzaWJsZVxuICAgICAgICBsZXQgbWVzc2FnZSA9IFwiXCI7XG4gICAgICAgIGlmIChpc0Vycm9yKGVycm9yLCBcIlNFUlZFUl9FUlJPUlwiKSkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGFuIGVycm9yIGVtaXR0ZWQgYnkgYSBwcm94eSBjYWxsXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBlcnJvci5pbmZvLnJlc3VsdC5lcnJvci5tZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGVycm9yLmluZm8ubWVzc2FnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZXEubWV0aG9kID09PSBcImVzdGltYXRlR2FzXCIpIHtcbiAgICAgICAgICAgIGlmICghbWVzc2FnZS5tYXRjaCgvcmV2ZXJ0L2kpICYmIG1lc3NhZ2UubWF0Y2goL2luc3VmZmljaWVudCBmdW5kcy9pKSkge1xuICAgICAgICAgICAgICAgIGFzc2VydChmYWxzZSwgXCJpbnN1ZmZpY2llbnQgZnVuZHNcIiwgXCJJTlNVRkZJQ0lFTlRfRlVORFNcIiwge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogcmVxLnRyYW5zYWN0aW9uXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcS5tZXRob2QgPT09IFwiY2FsbFwiIHx8IHJlcS5tZXRob2QgPT09IFwiZXN0aW1hdGVHYXNcIikge1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UubWF0Y2goL2V4ZWN1dGlvbiByZXZlcnRlZC9pKSkge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhID0gXCJcIjtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gZXJyb3IuaW5mby5yZXN1bHQuZXJyb3IuZGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgICAgICBjb25zdCBlID0gQWJpQ29kZXIuZ2V0QnVpbHRpbkNhbGxFeGNlcHRpb24ocmVxLm1ldGhvZCwgcmVxLnRyYW5zYWN0aW9uLCBkYXRhKTtcbiAgICAgICAgICAgICAgICBlLmluZm8gPSB7IHJlcXVlc3Q6IHJlcSwgZXJyb3IgfTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAocmVxLm1ldGhvZCA9PT0gXCJicm9hZGNhc3RUcmFuc2FjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSBUcmFuc2FjdGlvbi5mcm9tKHJlcS5zaWduZWRUcmFuc2FjdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UubWF0Y2goL3JlcGxhY2VtZW50L2kpICYmIG1lc3NhZ2UubWF0Y2goL3VuZGVycHJpY2VkL2kpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChmYWxzZSwgXCJyZXBsYWNlbWVudCBmZWUgdG9vIGxvd1wiLCBcIlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VEXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5tYXRjaCgvaW5zdWZmaWNpZW50IGZ1bmRzLykpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBcImluc3VmZmljaWVudCBmdW5kcyBmb3IgaW50cmluc2ljIHRyYW5zYWN0aW9uIGNvc3RcIiwgXCJJTlNVRkZJQ0lFTlRfRlVORFNcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLm1hdGNoKC9zYW1lIGhhc2ggd2FzIGFscmVhZHkgaW1wb3J0ZWR8dHJhbnNhY3Rpb24gbm9uY2UgaXMgdG9vIGxvd3xub25jZSB0b28gbG93LykpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBcIm5vbmNlIGhhcyBhbHJlYWR5IGJlZW4gdXNlZFwiLCBcIk5PTkNFX0VYUElSRURcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFNvbWV0aGluZyB3ZSBjb3VsZCBub3QgcHJvY2Vzc1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgYXN5bmMgX2RldGVjdE5ldHdvcmsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5ldHdvcms7XG4gICAgfVxuICAgIGFzeW5jIF9wZXJmb3JtKHJlcSkge1xuICAgICAgICBzd2l0Y2ggKHJlcS5tZXRob2QpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGFpbklkXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV0d29yay5jaGFpbklkO1xuICAgICAgICAgICAgY2FzZSBcImdldEJsb2NrTnVtYmVyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goXCJwcm94eVwiLCB7IGFjdGlvbjogXCJldGhfYmxvY2tOdW1iZXJcIiB9KTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRHYXNQcmljZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoKFwicHJveHlcIiwgeyBhY3Rpb246IFwiZXRoX2dhc1ByaWNlXCIgfSk7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0UHJpb3JpdHlGZWVcIjpcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRlbXBvcmFyeSB1bnRpbCBFdGhlcnNjYW4gY29tcGxldGVzIHN1cHBvcnRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5uZXR3b3JrLm5hbWUgPT09IFwibWFpbm5ldFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIjEwMDAwMDAwMDBcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5uZXR3b3JrLm5hbWUgPT09IFwib3B0aW1pc21cIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIxMDAwMDAwXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmYWxsYmFjayBvbnRvIHRoZSBBYnN0cmFjdFByb3ZpZGVyIGRlZmF1bHRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogV29ya2luZyB3aXRoIEV0aGVyc2NhbiB0byBnZXQgdGhpcyBhZGRlZDpcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVzdCA9IGF3YWl0IHRoaXMuZmV0Y2goXCJwcm94eVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJldGhfbWF4UHJpb3JpdHlGZWVQZXJHYXNcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRlc3QpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0O1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiREVCVUdcIiwgZSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICAvKiBUaGlzIG1pZ2h0IGJlIHNhZmU7IGJ1dCBkdWUgdG8gcm91bmRpbmcgbmVpdGhlciBteXNlbGZcbiAgICAgICAgICAgICAgIG9yIEV0aGVyc2NhbiBhcmUgbmVjZXNzYXJpbHkgY29tZm9ydGFibGUgd2l0aCB0aGlzLiA6KVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmZldGNoKFwiZ2FzdHJhY2tlclwiLCB7IGFjdGlvbjogXCJnYXNvcmFjbGVcIiB9KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdhc1ByaWNlID0gcGFyc2VVbml0cyhyZXN1bHQuU2FmZUdhc1ByaWNlLCBcImd3ZWlcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZUZlZSA9IHBhcnNlVW5pdHMocmVzdWx0LnN1Z2dlc3RCYXNlRmVlLCBcImd3ZWlcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJpb3JpdHlGZWUgPSBnYXNQcmljZSAtIGJhc2VGZWU7XG4gICAgICAgICAgICAgICAgaWYgKHByaW9yaXR5RmVlIDwgMCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSBwcmlvcml0eSBmZWU7IGRlZmVyIHRvIGFic3RyYWN0IHByb3ZpZGVyIGRlZmF1bHRcIik7IH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJpb3JpdHlGZWU7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiREVCVUdcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNhc2UgXCJnZXRCYWxhbmNlXCI6XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJucyBiYXNlLTEwIHJlc3VsdFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoKFwiYWNjb3VudFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJiYWxhbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IHJlcS5hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICB0YWc6IHJlcS5ibG9ja1RhZ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uQ291bnRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcInByb3h5XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImV0aF9nZXRUcmFuc2FjdGlvbkNvdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IHJlcS5hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICB0YWc6IHJlcS5ibG9ja1RhZ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FzZSBcImdldENvZGVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcInByb3h5XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImV0aF9nZXRDb2RlXCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IHJlcS5hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICB0YWc6IHJlcS5ibG9ja1RhZ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FzZSBcImdldFN0b3JhZ2VcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcInByb3h5XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImV0aF9nZXRTdG9yYWdlQXRcIixcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogcmVxLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZXEucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIHRhZzogcmVxLmJsb2NrVGFnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjYXNlIFwiYnJvYWRjYXN0VHJhbnNhY3Rpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcInByb3h5XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImV0aF9zZW5kUmF3VHJhbnNhY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgaGV4OiByZXEuc2lnbmVkVHJhbnNhY3Rpb25cbiAgICAgICAgICAgICAgICB9LCB0cnVlKS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrRXJyb3IocmVxLCBlcnJvciwgcmVxLnNpZ25lZFRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRCbG9ja1wiOlxuICAgICAgICAgICAgICAgIGlmIChcImJsb2NrVGFnXCIgaW4gcmVxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoKFwicHJveHlcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImV0aF9nZXRCbG9ja0J5TnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWc6IHJlcS5ibG9ja1RhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2xlYW46IChyZXEuaW5jbHVkZVRyYW5zYWN0aW9ucyA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBcImdldEJsb2NrIGJ5IGJsb2NrSGFzaCBub3Qgc3VwcG9ydGVkIGJ5IEV0aGVyc2NhblwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJnZXRCbG9jayhibG9ja0hhc2gpXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRUcmFuc2FjdGlvblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoKFwicHJveHlcIiwge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZXRoX2dldFRyYW5zYWN0aW9uQnlIYXNoXCIsXG4gICAgICAgICAgICAgICAgICAgIHR4aGFzaDogcmVxLmhhc2hcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRUcmFuc2FjdGlvblJlY2VpcHRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcInByb3h5XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImV0aF9nZXRUcmFuc2FjdGlvblJlY2VpcHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHhoYXNoOiByZXEuaGFzaFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FzZSBcImNhbGxcIjoge1xuICAgICAgICAgICAgICAgIGlmIChyZXEuYmxvY2tUYWcgIT09IFwibGF0ZXN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXRoZXJzY2FuUHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCBibG9ja1RhZyBmb3IgY2FsbFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zdERhdGEgPSB0aGlzLl9nZXRUcmFuc2FjdGlvblBvc3REYXRhKHJlcS50cmFuc2FjdGlvbik7XG4gICAgICAgICAgICAgICAgcG9zdERhdGEubW9kdWxlID0gXCJwcm94eVwiO1xuICAgICAgICAgICAgICAgIHBvc3REYXRhLmFjdGlvbiA9IFwiZXRoX2NhbGxcIjtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5mZXRjaChcInByb3h5XCIsIHBvc3REYXRhLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGVja0Vycm9yKHJlcSwgZXJyb3IsIHJlcS50cmFuc2FjdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImVzdGltYXRlR2FzXCI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3N0RGF0YSA9IHRoaXMuX2dldFRyYW5zYWN0aW9uUG9zdERhdGEocmVxLnRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgICAgICBwb3N0RGF0YS5tb2R1bGUgPSBcInByb3h5XCI7XG4gICAgICAgICAgICAgICAgcG9zdERhdGEuYWN0aW9uID0gXCJldGhfZXN0aW1hdGVHYXNcIjtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5mZXRjaChcInByb3h5XCIsIHBvc3REYXRhLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGVja0Vycm9yKHJlcSwgZXJyb3IsIHJlcS50cmFuc2FjdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJnZXRMb2dzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWVkcyB0byBjb21wbGFpbiBpZiBtb3JlIHRoYW4gb25lIGFkZHJlc3MgaXMgcGFzc2VkIGluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJnczogUmVjb3JkPHN0cmluZywgYW55PiA9IHsgYWN0aW9uOiBcImdldExvZ3NcIiB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmZpbHRlci5mcm9tQmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5mcm9tQmxvY2sgPSBjaGVja0xvZ1RhZyhwYXJhbXMuZmlsdGVyLmZyb21CbG9jayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5maWx0ZXIudG9CbG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnRvQmxvY2sgPSBjaGVja0xvZ1RhZyhwYXJhbXMuZmlsdGVyLnRvQmxvY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZmlsdGVyLmFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5hZGRyZXNzID0gcGFyYW1zLmZpbHRlci5hZGRyZXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEBUT0RPOiBXZSBjYW4gaGFuZGxlIHNsaWdodGx5IG1vcmUgY29tcGxpY2F0ZWQgbG9ncyB1c2luZyB0aGUgbG9ncyBBUElcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmZpbHRlci50b3BpY3MgJiYgcGFyYW1zLmZpbHRlci50b3BpY3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmZpbHRlci50b3BpY3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ1bnN1cHBvcnRlZCB0b3BpYyBjb3VudFwiLCBMb2dnZXIuRXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwgeyB0b3BpY3M6IHBhcmFtcy5maWx0ZXIudG9waWNzIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZmlsdGVyLnRvcGljcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvcGljMCA9IHBhcmFtcy5maWx0ZXIudG9waWNzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZih0b3BpYzApICE9PSBcInN0cmluZ1wiIHx8IHRvcGljMC5sZW5ndGggIT09IDY2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ1bnN1cHBvcnRlZCB0b3BpYyBmb3JtYXRcIiwgTG9nZ2VyLkVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHsgdG9waWMwOiB0b3BpYzAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnRvcGljMCA9IHRvcGljMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvZ3M6IEFycmF5PGFueT4gPSBhd2FpdCB0aGlzLmZldGNoKFwibG9nc1wiLCBhcmdzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhY2hlIHR4SGFzaCA9PiBibG9ja0hhc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYmxvY2tzOiB7IFt0YWc6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgYW55IG1pc3NpbmcgYmxvY2tIYXNoIHRvIHRoZSBsb2dzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvZyA9IGxvZ3NbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2cuYmxvY2tIYXNoICE9IG51bGwpIHsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2Nrc1tsb2cuYmxvY2tOdW1iZXJdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gYXdhaXQgdGhpcy5nZXRCbG9jayhsb2cuYmxvY2tOdW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tzW2xvZy5ibG9ja051bWJlcl0gPSBibG9jay5oYXNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmJsb2NrSGFzaCA9IGJsb2Nrc1tsb2cuYmxvY2tOdW1iZXJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLl9wZXJmb3JtKHJlcSk7XG4gICAgfVxuICAgIGFzeW5jIGdldE5ldHdvcmsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5ldHdvcms7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXNvbHZlcyB0byB0aGUgY3VycmVudCBwcmljZSBvZiBldGhlci5cbiAgICAgKlxuICAgICAqICBUaGlzIHJldHVybnMgYGAwYGAgb24gYW55IG5ldHdvcmsgb3RoZXIgdGhhbiBgYG1haW5uZXRgYC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRFdGhlclByaWNlKCkge1xuICAgICAgICBpZiAodGhpcy5uZXR3b3JrLm5hbWUgIT09IFwibWFpbm5ldFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gMC4wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KChhd2FpdCB0aGlzLmZldGNoKFwic3RhdHNcIiwgeyBhY3Rpb246IFwiZXRocHJpY2VcIiB9KSkuZXRodXNkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlc29sdmVzIHRvIGEgW0NvbnRyYWN0XV0gZm9yICUlYWRkcmVzcyUlLCB1c2luZyB0aGVcbiAgICAgKiAgRXRoZXJzY2FuIEFQSSB0byByZXRyZWl2ZSB0aGUgQ29udHJhY3QgQUJJLlxuICAgICAqL1xuICAgIGFzeW5jIGdldENvbnRyYWN0KF9hZGRyZXNzKSB7XG4gICAgICAgIGxldCBhZGRyZXNzID0gdGhpcy5fZ2V0QWRkcmVzcyhfYWRkcmVzcyk7XG4gICAgICAgIGlmIChpc1Byb21pc2UoYWRkcmVzcykpIHtcbiAgICAgICAgICAgIGFkZHJlc3MgPSBhd2FpdCBhZGRyZXNzO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgdGhpcy5mZXRjaChcImNvbnRyYWN0XCIsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0YWJpXCIsIGFkZHJlc3NcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgYWJpID0gSlNPTi5wYXJzZShyZXNwKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29udHJhY3QoYWRkcmVzcywgYWJpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzQ29tbXVuaXR5UmVzb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5hcGlLZXkgPT0gbnVsbCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXItZXRoZXJzY2FuLmpzLm1hcCIsImZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcbiAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0Jyk7XG59XG47XG5jb25zdCBfV2ViU29ja2V0ID0gZ2V0R2xvYmFsKCkuV2ViU29ja2V0O1xuZXhwb3J0IHsgX1dlYlNvY2tldCBhcyBXZWJTb2NrZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdzLWJyb3dzZXIuanMubWFwIiwiLyoqXG4gKiAgR2VuZXJpYyBsb25nLWxpdmVkIHNvY2tldCBwcm92aWRlci5cbiAqXG4gKiAgU3ViLWNsYXNzaW5nIG5vdGVzXG4gKiAgLSBhIHN1Yi1jbGFzcyBNVVNUIGNhbGwgdGhlIGBfc3RhcnQoKWAgbWV0aG9kIG9uY2UgY29ubmVjdGVkXG4gKiAgLSBhIHN1Yi1jbGFzcyBNVVNUIG92ZXJyaWRlIHRoZSBgX3dyaXRlKHN0cmluZylgIG1ldGhvZFxuICogIC0gYSBzdWItY2xhc3MgTVVTVCBjYWxsIGBfcHJvY2Vzc01lc3NhZ2Uoc3RyaW5nKWAgZm9yIGVhY2ggbWVzc2FnZVxuICpcbiAqICBAX3N1YnNlY3Rpb246IGFwaS9wcm92aWRlcnMvYWJzdHJhY3QtcHJvdmlkZXI6U29ja2V0IFByb3ZpZGVycyAgW2Fib3V0LXNvY2tldFByb3ZpZGVyXVxuICovXG5pbXBvcnQgeyBVbm1hbmFnZWRTdWJzY3JpYmVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtcHJvdmlkZXIuanNcIjtcbmltcG9ydCB7IGFzc2VydCwgYXNzZXJ0QXJndW1lbnQsIG1ha2VFcnJvciB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgSnNvblJwY0FwaVByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItanNvbnJwYy5qc1wiO1xuLyoqXG4gKiAgQSAqKlNvY2tldFN1YnNjcmliZXIqKiB1c2VzIGEgc29ja2V0IHRyYW5zcG9ydCB0byBoYW5kbGUgZXZlbnRzIGFuZFxuICogIHNob3VsZCB1c2UgW1tfZW1pdF1dIHRvIG1hbmFnZSB0aGUgZXZlbnRzLlxuICovXG5leHBvcnQgY2xhc3MgU29ja2V0U3Vic2NyaWJlciB7XG4gICAgI3Byb3ZpZGVyO1xuICAgICNmaWx0ZXI7XG4gICAgLyoqXG4gICAgICogIFRoZSBmaWx0ZXIuXG4gICAgICovXG4gICAgZ2V0IGZpbHRlcigpIHsgcmV0dXJuIEpTT04ucGFyc2UodGhpcy4jZmlsdGVyKTsgfVxuICAgICNmaWx0ZXJJZDtcbiAgICAjcGF1c2VkO1xuICAgICNlbWl0UHJvbWlzZTtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKlNvY2tldFN1YnNjcmliZXIqKiBhdHRhY2hlZCB0byAlJXByb3ZpZGVyJSUgbGlzdGVuaW5nXG4gICAgICogIHRvICUlZmlsdGVyJSUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvdmlkZXIsIGZpbHRlcikge1xuICAgICAgICB0aGlzLiNwcm92aWRlciA9IHByb3ZpZGVyO1xuICAgICAgICB0aGlzLiNmaWx0ZXIgPSBKU09OLnN0cmluZ2lmeShmaWx0ZXIpO1xuICAgICAgICB0aGlzLiNmaWx0ZXJJZCA9IG51bGw7XG4gICAgICAgIHRoaXMuI3BhdXNlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuI2VtaXRQcm9taXNlID0gbnVsbDtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuI2ZpbHRlcklkID0gdGhpcy4jcHJvdmlkZXIuc2VuZChcImV0aF9zdWJzY3JpYmVcIiwgdGhpcy5maWx0ZXIpLnRoZW4oKGZpbHRlcklkKSA9PiB7XG4gICAgICAgICAgICA7XG4gICAgICAgICAgICB0aGlzLiNwcm92aWRlci5fcmVnaXN0ZXIoZmlsdGVySWQsIHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIGZpbHRlcklkO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgKHRoaXMuI2ZpbHRlcklkKS50aGVuKChmaWx0ZXJJZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jcHJvdmlkZXIuc2VuZChcImV0aF91bnN1YnNjcmliZVwiLCBbZmlsdGVySWRdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI2ZpbHRlcklkID0gbnVsbDtcbiAgICB9XG4gICAgLy8gQFRPRE86IHBhdXNlIHNob3VsZCB0cmFwIHRoZSBjdXJyZW50IGJsb2NrTnVtYmVyLCB1bnN1YiwgYW5kIG9uIHJlc3VtZSB1c2UgZ2V0TG9nc1xuICAgIC8vICAgICAgICBhbmQgcmVzdW1lXG4gICAgcGF1c2UoZHJvcFdoaWxlUGF1c2VkKSB7XG4gICAgICAgIGFzc2VydChkcm9wV2hpbGVQYXVzZWQsIFwicHJlc2VydmUgbG9ncyB3aGlsZSBwYXVzZWQgbm90IHN1cHBvcnRlZCBieSBTb2NrZXRTdWJzY3JpYmVyIHlldFwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJwYXVzZShmYWxzZSlcIiB9KTtcbiAgICAgICAgdGhpcy4jcGF1c2VkID0gISFkcm9wV2hpbGVQYXVzZWQ7XG4gICAgfVxuICAgIHJlc3VtZSgpIHtcbiAgICAgICAgdGhpcy4jcGF1c2VkID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEBfaWdub3JlOlxuICAgICAqL1xuICAgIF9oYW5kbGVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHRoaXMuI2ZpbHRlcklkID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy4jcGF1c2VkID09PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgZW1pdFByb21pc2UgPSB0aGlzLiNlbWl0UHJvbWlzZTtcbiAgICAgICAgICAgIGlmIChlbWl0UHJvbWlzZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZW1pdFByb21pc2UgPSB0aGlzLl9lbWl0KHRoaXMuI3Byb3ZpZGVyLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVtaXRQcm9taXNlID0gZW1pdFByb21pc2UudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX2VtaXQodGhpcy4jcHJvdmlkZXIsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy4jZW1pdFByb21pc2UgPSBlbWl0UHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4jZW1pdFByb21pc2UgPT09IGVtaXRQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2VtaXRQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiAgU3ViLWNsYXNzZXMgKiptdXN0Kiogb3ZlcnJpZGUgdGhpcyB0byBlbWl0IHRoZSBldmVudHMgb24gdGhlXG4gICAgICogIHByb3ZpZGVyLlxuICAgICAqL1xuICAgIGFzeW5jIF9lbWl0KHByb3ZpZGVyLCBtZXNzYWdlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInN1Yi1jbGFzc2VzIG11c3QgaW1wbGVtZW50ZSB0aGlzOyBfZW1pdFwiKTtcbiAgICB9XG59XG4vKipcbiAqICBBICoqU29ja2V0QmxvY2tTdWJzY3JpYmVyKiogbGlzdGVucyBmb3IgYGBuZXdIZWFkc2BgIGV2ZW50cyBhbmQgZW1pdHNcbiAqICBgYFwiYmxvY2tcImBgIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNvY2tldEJsb2NrU3Vic2NyaWJlciBleHRlbmRzIFNvY2tldFN1YnNjcmliZXIge1xuICAgIC8qKlxuICAgICAqICBAX2lnbm9yZTpcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlcikge1xuICAgICAgICBzdXBlcihwcm92aWRlciwgW1wibmV3SGVhZHNcIl0pO1xuICAgIH1cbiAgICBhc3luYyBfZW1pdChwcm92aWRlciwgbWVzc2FnZSkge1xuICAgICAgICBwcm92aWRlci5lbWl0KFwiYmxvY2tcIiwgcGFyc2VJbnQobWVzc2FnZS5udW1iZXIpKTtcbiAgICB9XG59XG4vKipcbiAqICBBICoqU29ja2V0UGVuZGluZ1N1YnNjcmliZXIqKiBsaXN0ZW5zIGZvciBwZW5kaW5nIHRyYW5zYWNpdG9ucyBhbmQgZW1pdHNcbiAqICBgYFwicGVuZGluZ1wiYGAgZXZlbnRzLlxuICovXG5leHBvcnQgY2xhc3MgU29ja2V0UGVuZGluZ1N1YnNjcmliZXIgZXh0ZW5kcyBTb2NrZXRTdWJzY3JpYmVyIHtcbiAgICAvKipcbiAgICAgKiAgQF9pZ25vcmU6XG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvdmlkZXIpIHtcbiAgICAgICAgc3VwZXIocHJvdmlkZXIsIFtcIm5ld1BlbmRpbmdUcmFuc2FjdGlvbnNcIl0pO1xuICAgIH1cbiAgICBhc3luYyBfZW1pdChwcm92aWRlciwgbWVzc2FnZSkge1xuICAgICAgICBwcm92aWRlci5lbWl0KFwicGVuZGluZ1wiLCBtZXNzYWdlKTtcbiAgICB9XG59XG4vKipcbiAqICBBICoqU29ja2V0RXZlbnRTdWJzY3JpYmVyKiogbGlzdGVucyBmb3IgZXZlbnQgbG9ncy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNvY2tldEV2ZW50U3Vic2NyaWJlciBleHRlbmRzIFNvY2tldFN1YnNjcmliZXIge1xuICAgICNsb2dGaWx0ZXI7XG4gICAgLyoqXG4gICAgICogIFRoZSBmaWx0ZXIuXG4gICAgICovXG4gICAgZ2V0IGxvZ0ZpbHRlcigpIHsgcmV0dXJuIEpTT04ucGFyc2UodGhpcy4jbG9nRmlsdGVyKTsgfVxuICAgIC8qKlxuICAgICAqICBAX2lnbm9yZTpcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlciwgZmlsdGVyKSB7XG4gICAgICAgIHN1cGVyKHByb3ZpZGVyLCBbXCJsb2dzXCIsIGZpbHRlcl0pO1xuICAgICAgICB0aGlzLiNsb2dGaWx0ZXIgPSBKU09OLnN0cmluZ2lmeShmaWx0ZXIpO1xuICAgIH1cbiAgICBhc3luYyBfZW1pdChwcm92aWRlciwgbWVzc2FnZSkge1xuICAgICAgICBwcm92aWRlci5lbWl0KHRoaXMubG9nRmlsdGVyLCBwcm92aWRlci5fd3JhcExvZyhtZXNzYWdlLCBwcm92aWRlci5fbmV0d29yaykpO1xuICAgIH1cbn1cbi8qKlxuICogIEEgKipTb2NrZXRQcm92aWRlcioqIGlzIGJhY2tlZCBieSBhIGxvbmctbGl2ZWQgY29ubmVjdGlvbiBvdmVyIGFcbiAqICBzb2NrZXQsIHdoaWNoIGNhbiBzdWJzY3JpYmUgYW5kIHJlY2VpdmUgcmVhbC10aW1lIG1lc3NhZ2VzIG92ZXJcbiAqICBpdHMgY29tbXVuaWNhdGlvbiBjaGFubmVsLlxuICovXG5leHBvcnQgY2xhc3MgU29ja2V0UHJvdmlkZXIgZXh0ZW5kcyBKc29uUnBjQXBpUHJvdmlkZXIge1xuICAgICNjYWxsYmFja3M7XG4gICAgLy8gTWFwcyBlYWNoIGZpbHRlcklkIHRvIGl0cyBzdWJzY3JpYmVyXG4gICAgI3N1YnM7XG4gICAgLy8gSWYgYW55IGV2ZW50cyBjb21lIGluIGJlZm9yZSBhIHN1YnNjcmliZXIgaGFzIGZpbmlzaGVkXG4gICAgLy8gcmVnaXN0ZXJpbmcsIHF1ZXVlIHRoZW1cbiAgICAjcGVuZGluZztcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKlNvY2tldFByb3ZpZGVyKiogY29ubmVjdGVkIHRvICUlbmV0d29yayUlLlxuICAgICAqXG4gICAgICogIElmIHVuc3BlY2lmaWVkLCB0aGUgbmV0d29yayB3aWxsIGJlIGRpc2NvdmVyZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmV0d29yaywgX29wdGlvbnMpIHtcbiAgICAgICAgLy8gQ29weSB0aGUgb3B0aW9uc1xuICAgICAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgKF9vcHRpb25zICE9IG51bGwpID8gX29wdGlvbnMgOiB7fSk7XG4gICAgICAgIC8vIFN1cHBvcnQgZm9yIGJhdGNoZXMgaXMgZ2VuZXJhbGx5IG5vdCBzdXBwb3J0ZWQgZm9yXG4gICAgICAgIC8vIGNvbm5lY3Rpb24tYmFzZSBwcm92aWRlcnM7IGlmIHRoaXMgY2hhbmdlcyBpbiB0aGUgZnV0dXJlXG4gICAgICAgIC8vIHRoZSBfc2VuZCBzaG91bGQgYmUgdXBkYXRlZCB0byByZWZsZWN0IHRoaXNcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQob3B0aW9ucy5iYXRjaE1heENvdW50ID09IG51bGwgfHwgb3B0aW9ucy5iYXRjaE1heENvdW50ID09PSAxLCBcInNvY2tldHMtYmFzZWQgcHJvdmlkZXJzIGRvIG5vdCBzdXBwb3J0IGJhdGNoZXNcIiwgXCJvcHRpb25zLmJhdGNoTWF4Q291bnRcIiwgX29wdGlvbnMpO1xuICAgICAgICBvcHRpb25zLmJhdGNoTWF4Q291bnQgPSAxO1xuICAgICAgICAvLyBTb2NrZXQtYmFzZWQgUHJvdmlkZXJzIChnZW5lcmFsbHkpIGNhbm5vdCBjaGFuZ2UgdGhlaXIgbmV0d29yayxcbiAgICAgICAgLy8gc2luY2UgdGhleSBoYXZlIGEgbG9uZy1saXZlZCBjb25uZWN0aW9uOyBidXQgbGV0IHBlb3BsZSBvdmVycmlkZVxuICAgICAgICAvLyB0aGlzIGlmIHRoZXkgaGF2ZSBqdXN0IGNhdXNlLlxuICAgICAgICBpZiAob3B0aW9ucy5zdGF0aWNOZXR3b3JrID09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc3RhdGljTmV0d29yayA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIobmV0d29yaywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuI2NhbGxiYWNrcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy4jc3VicyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy4jcGVuZGluZyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgLy8gVGhpcyB2YWx1ZSBpcyBvbmx5IHZhbGlkIGFmdGVyIF9zdGFydCBoYXMgYmVlbiBjYWxsZWRcbiAgICAvKlxuICAgIGdldCBfbmV0d29yaygpOiBOZXR3b3JrIHtcbiAgICAgICAgaWYgKHRoaXMuI25ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidGhpcyBzaG91bGRuJ3QgaGFwcGVuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLiNuZXR3b3JrLmNsb25lKCk7XG4gICAgfVxuICAgICovXG4gICAgX2dldFN1YnNjcmliZXIoc3ViKSB7XG4gICAgICAgIHN3aXRjaCAoc3ViLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjbG9zZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVW5tYW5hZ2VkU3Vic2NyaWJlcihcImNsb3NlXCIpO1xuICAgICAgICAgICAgY2FzZSBcImJsb2NrXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTb2NrZXRCbG9ja1N1YnNjcmliZXIodGhpcyk7XG4gICAgICAgICAgICBjYXNlIFwicGVuZGluZ1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU29ja2V0UGVuZGluZ1N1YnNjcmliZXIodGhpcyk7XG4gICAgICAgICAgICBjYXNlIFwiZXZlbnRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNvY2tldEV2ZW50U3Vic2NyaWJlcih0aGlzLCBzdWIuZmlsdGVyKTtcbiAgICAgICAgICAgIGNhc2UgXCJvcnBoYW5cIjpcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGVkIGF1dG8tbWF0aWNhbGx5IHdpdGhpbiBBYnN0cmFjdFByb3ZpZGVyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgbG9nLnJlbW92ZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgaWYgKHN1Yi5maWx0ZXIub3JwaGFuID09PSBcImRyb3AtbG9nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVbm1hbmFnZWRTdWJzY3JpYmVyKFwiZHJvcC1sb2dcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5fZ2V0U3Vic2NyaWJlcihzdWIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVnaXN0ZXIgYSBuZXcgc3Vic2NyaWJlci4gVGhpcyBpcyB1c2VkIGludGVybmFsbGVkIGJ5IFN1YnNjcmliZXJzXG4gICAgICogIGFuZCBnZW5lcmFsbHkgaXMgdW5lY2Vzc2FyeSB1bmxlc3MgZXh0ZW5kaW5nIGNhcGFiaWxpdGllcy5cbiAgICAgKi9cbiAgICBfcmVnaXN0ZXIoZmlsdGVySWQsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy4jc3Vicy5zZXQoZmlsdGVySWQsIHN1YnNjcmliZXIpO1xuICAgICAgICBjb25zdCBwZW5kaW5nID0gdGhpcy4jcGVuZGluZy5nZXQoZmlsdGVySWQpO1xuICAgICAgICBpZiAocGVuZGluZykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIHBlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLl9oYW5kbGVNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy4jcGVuZGluZy5kZWxldGUoZmlsdGVySWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9zZW5kKHBheWxvYWQpIHtcbiAgICAgICAgLy8gV2ViU29ja2V0IHByb3ZpZGVyIGRvZXNuJ3QgYWNjZXB0IGJhdGNoZXNcbiAgICAgICAgYXNzZXJ0QXJndW1lbnQoIUFycmF5LmlzQXJyYXkocGF5bG9hZCksIFwiV2ViU29ja2V0IGRvZXMgbm90IHN1cHBvcnQgYmF0Y2ggc2VuZFwiLCBcInBheWxvYWRcIiwgcGF5bG9hZCk7XG4gICAgICAgIC8vIEBUT0RPOiBzdHJpbmdpZnkgcGF5bG9hZHMgaGVyZSBhbmQgc3RvcmUgdG8gcHJldmVudCBtdXRhdGlvbnNcbiAgICAgICAgLy8gUHJlcGFyZSBhIHByb21pc2UgdG8gcmVzcG9uZCB0b1xuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jY2FsbGJhY2tzLnNldChwYXlsb2FkLmlkLCB7IHBheWxvYWQsIHJlc29sdmUsIHJlamVjdCB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFdhaXQgdW50aWwgdGhlIHNvY2tldCBpcyBjb25uZWN0ZWQgYmVmb3JlIHdyaXRpbmcgdG8gaXRcbiAgICAgICAgYXdhaXQgdGhpcy5fd2FpdFVudGlsUmVhZHkoKTtcbiAgICAgICAgLy8gV3JpdGUgdGhlIHJlcXVlc3QgdG8gdGhlIHNvY2tldFxuICAgICAgICBhd2FpdCB0aGlzLl93cml0ZShKU09OLnN0cmluZ2lmeShwYXlsb2FkKSk7XG4gICAgICAgIHJldHVybiBbYXdhaXQgcHJvbWlzZV07XG4gICAgfVxuICAgIC8vIFN1Yi1jbGFzc2VzIG11c3QgY2FsbCB0aGlzIG9uY2UgdGhleSBhcmUgY29ubmVjdGVkXG4gICAgLypcbiAgICBhc3luYyBfc3RhcnQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICh0aGlzLiNyZWFkeSkgeyByZXR1cm47IH1cblxuICAgICAgICBmb3IgKGNvbnN0IHsgcGF5bG9hZCB9IG9mIHRoaXMuI2NhbGxiYWNrcy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fd3JpdGUoSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4jcmVhZHkgPSAoYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhd2FpdCBzdXBlci5fc3RhcnQoKTtcbiAgICAgICAgfSkoKTtcbiAgICB9XG4gICAgKi9cbiAgICAvKipcbiAgICAgKiAgU3ViLWNsYXNzZXMgKiptdXN0KiogY2FsbCB0aGlzIHdpdGggbWVzc2FnZXMgcmVjZWl2ZWQgb3ZlciB0aGVpclxuICAgICAqICB0cmFuc3BvcnQgdG8gYmUgcHJvY2Vzc2VkIGFuZCBkaXNwYXRjaGVkLlxuICAgICAqL1xuICAgIGFzeW5jIF9wcm9jZXNzTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IChKU09OLnBhcnNlKG1lc3NhZ2UpKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiB0eXBlb2YgKHJlc3VsdCkgPT09IFwib2JqZWN0XCIgJiYgXCJpZFwiIGluIHJlc3VsdCkge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSB0aGlzLiNjYWxsYmFja3MuZ2V0KHJlc3VsdC5pZCk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIG1ha2VFcnJvcihcInJlY2VpdmVkIHJlc3VsdCBmb3IgdW5rbm93biBpZFwiLCBcIlVOS05PV05fRVJST1JcIiwge1xuICAgICAgICAgICAgICAgICAgICByZWFzb25Db2RlOiBcIlVOS05PV05fSURcIixcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuI2NhbGxiYWNrcy5kZWxldGUocmVzdWx0LmlkKTtcbiAgICAgICAgICAgIGNhbGxiYWNrLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXN1bHQgJiYgcmVzdWx0Lm1ldGhvZCA9PT0gXCJldGhfc3Vic2NyaXB0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlcklkID0gcmVzdWx0LnBhcmFtcy5zdWJzY3JpcHRpb247XG4gICAgICAgICAgICBjb25zdCBzdWJzY3JpYmVyID0gdGhpcy4jc3Vicy5nZXQoZmlsdGVySWQpO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLl9oYW5kbGVNZXNzYWdlKHJlc3VsdC5wYXJhbXMucmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBwZW5kaW5nID0gdGhpcy4jcGVuZGluZy5nZXQoZmlsdGVySWQpO1xuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNwZW5kaW5nLnNldChmaWx0ZXJJZCwgcGVuZGluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaChyZXN1bHQucGFyYW1zLnJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBtYWtlRXJyb3IoXCJyZWNlaXZlZCB1bmV4cGVjdGVkIG1lc3NhZ2VcIiwgXCJVTktOT1dOX0VSUk9SXCIsIHtcbiAgICAgICAgICAgICAgICByZWFzb25Db2RlOiBcIlVORVhQRUNURURfTUVTU0FHRVwiLFxuICAgICAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBTdWItY2xhc3NlcyAqKm11c3QqKiBvdmVycmlkZSB0aGlzIHRvIHNlbmQgJSVtZXNzYWdlJSUgb3ZlciB0aGVpclxuICAgICAqICB0cmFuc3BvcnQuXG4gICAgICovXG4gICAgYXN5bmMgX3dyaXRlKG1lc3NhZ2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic3ViLWNsYXNzZXMgbXVzdCBvdmVycmlkZSB0aGlzXCIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLXNvY2tldC5qcy5tYXAiLCJpbXBvcnQgeyBXZWJTb2NrZXQgYXMgX1dlYlNvY2tldCB9IGZyb20gXCIuL3dzLmpzXCI7IC8qLWJyb3dzZXIqL1xuaW1wb3J0IHsgU29ja2V0UHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci1zb2NrZXQuanNcIjtcbi8qKlxuICogIEEgSlNPTi1SUEMgcHJvdmlkZXIgd2hpY2ggaXMgYmFja2VkIGJ5IGEgV2ViU29ja2V0LlxuICpcbiAqICBXZWJTb2NrZXRzIGFyZSBvZnRlbiBwcmVmZXJyZWQgYmVjYXVzZSB0aGV5IHJldGFpbiBhIGxpdmUgY29ubmVjdGlvblxuICogIHRvIGEgc2VydmVyLCB3aGljaCBwZXJtaXRzIG1vcmUgaW5zdGFudCBhY2Nlc3MgdG8gZXZlbnRzLlxuICpcbiAqICBIb3dldmVyLCB0aGlzIGluY3VycyBoaWdoZXIgc2VydmVyIGluZnJhc3R1cnR1cmUgY29zdHMsIHNvIGFkZGl0aW9uYWxcbiAqICByZXNvdXJjZXMgbWF5IGJlIHJlcXVpcmVkIHRvIGhvc3QgeW91ciBvd24gV2ViU29ja2V0IG5vZGVzIGFuZCBtYW55XG4gKiAgdGhpcmQtcGFydHkgc2VydmljZXMgY2hhcmdlIGFkZGl0aW9uYWwgZmVlcyBmb3IgV2ViU29ja2V0IGVuZHBvaW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFdlYlNvY2tldFByb3ZpZGVyIGV4dGVuZHMgU29ja2V0UHJvdmlkZXIge1xuICAgICNjb25uZWN0O1xuICAgICN3ZWJzb2NrZXQ7XG4gICAgZ2V0IHdlYnNvY2tldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3dlYnNvY2tldCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3ZWJzb2NrZXQgY2xvc2VkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLiN3ZWJzb2NrZXQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHVybCwgbmV0d29yaywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihuZXR3b3JrLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHR5cGVvZiAodXJsKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhpcy4jY29ubmVjdCA9ICgpID0+IHsgcmV0dXJuIG5ldyBfV2ViU29ja2V0KHVybCk7IH07XG4gICAgICAgICAgICB0aGlzLiN3ZWJzb2NrZXQgPSB0aGlzLiNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mICh1cmwpID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMuI2Nvbm5lY3QgPSB1cmw7XG4gICAgICAgICAgICB0aGlzLiN3ZWJzb2NrZXQgPSB1cmwoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuI2Nvbm5lY3QgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy4jd2Vic29ja2V0ID0gdXJsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2Vic29ja2V0Lm9ub3BlbiA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc3RhcnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VtZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJmYWlsZWQgdG8gc3RhcnQgV2Vic29ja2V0UHJvdmlkZXJcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIC8vIEBUT0RPOiBub3cgd2hhdD8gQXR0ZW1wdCByZWNvbm5lY3Q/XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMud2Vic29ja2V0Lm9ubWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzTWVzc2FnZShtZXNzYWdlLmRhdGEpO1xuICAgICAgICB9O1xuICAgICAgICAvKlxuICAgICAgICAgICAgICAgIHRoaXMud2Vic29ja2V0Lm9uY2xvc2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQFRPRE86IFdoYXQgZXZlbnQuY29kZSBzaG91bGQgd2UgcmVjb25uZWN0IG9uP1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWNvbm5lY3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY29ubmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXVzZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiNjb25uZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jd2Vic29ja2V0ID0gdGhpcy4jY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI3dlYnNvY2tldC5vbm9wZW4gPSAuLi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBAVE9ETzogdGhpcyByZXF1aXJlcyB0aGUgc3VwZXIgY2xhc3MgdG8gcmVicm9hZGNhc3Q7IG1vdmUgaXQgdGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgKi9cbiAgICB9XG4gICAgYXN5bmMgX3dyaXRlKG1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy53ZWJzb2NrZXQuc2VuZChtZXNzYWdlKTtcbiAgICB9XG4gICAgYXN5bmMgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3dlYnNvY2tldCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLiN3ZWJzb2NrZXQuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuI3dlYnNvY2tldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLXdlYnNvY2tldC5qcy5tYXAiLCIvKipcbiAqICBbW2xpbmstaW5mdXJhXV0gcHJvdmlkZXMgYSB0aGlyZC1wYXJ0eSBzZXJ2aWNlIGZvciBjb25uZWN0aW5nIHRvXG4gKiAgdmFyaW91cyBibG9ja2NoYWlucyBvdmVyIEpTT04tUlBDLlxuICpcbiAqICAqKlN1cHBvcnRlZCBOZXR3b3JrcyoqXG4gKlxuICogIC0gRXRoZXJldW0gTWFpbm5ldCAoYGBtYWlubmV0YGApXG4gKiAgLSBHb2VybGkgVGVzdG5ldCAoYGBnb2VybGlgYClcbiAqICAtIFNlcG9saWEgVGVzdG5ldCAoYGBzZXBvbGlhYGApXG4gKiAgLSBBcmJpdHJ1bSAoYGBhcmJpdHJ1bWBgKVxuICogIC0gQXJiaXRydW0gR29lcmxpIFRlc3RuZXQgKGBgYXJiaXRydW0tZ29lcmxpYGApXG4gKiAgLSBBcmJpdHJ1bSBTZXBvbGlhIFRlc3RuZXQgKGBgYXJiaXRydW0tc2Vwb2xpYWBgKVxuICogIC0gQmFzZSAoYGBiYXNlYGApXG4gKiAgLSBCYXNlIEdvZXJsaWEgVGVzdG5ldCAoYGBiYXNlLWdvZXJsaWBgKVxuICogIC0gQmFzZSBTZXBvbGlhIFRlc3RuZXQgKGBgYmFzZS1zZXBvbGlhYGApXG4gKiAgLSBCTkIgU21hcnQgQ2hhaW4gTWFpbm5ldCAoYGBibmJgYClcbiAqICAtIEJOQiBTbWFydCBDaGFpbiBUZXN0bmV0IChgYGJuYnRgYClcbiAqICAtIExpbmVhIChgYGxpbmVhYGApXG4gKiAgLSBMaW5lYSBHb2VybGlhIFRlc3RuZXQgKGBgbGluZWEtZ29lcmxpYGApXG4gKiAgLSBPcHRpbWlzbSAoYGBvcHRpbWlzbWBgKVxuICogIC0gT3B0aW1pc20gR29lcmxpIFRlc3RuZXQgKGBgb3B0aW1pc20tZ29lcmxpYGApXG4gKiAgLSBPcHRpbWlzbSBTZXBvbGlhIFRlc3RuZXQgKGBgb3B0aW1pc20tc2Vwb2xpYWBgKVxuICogIC0gUG9seWdvbiAoYGBtYXRpY2BgKVxuICogIC0gUG9seWdvbiBNdW1iYWkgVGVzdG5ldCAoYGBtYXRpYy1tdW1iYWlgYClcbiAqXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvcHJvdmlkZXJzL3RoaXJkcGFydHk6SU5GVVJBICBbcHJvdmlkZXJzLWluZnVyYV1cbiAqL1xuaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcywgRmV0Y2hSZXF1ZXN0LCBhc3NlcnQsIGFzc2VydEFyZ3VtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBzaG93VGhyb3R0bGVNZXNzYWdlIH0gZnJvbSBcIi4vY29tbXVuaXR5LmpzXCI7XG5pbXBvcnQgeyBOZXR3b3JrIH0gZnJvbSBcIi4vbmV0d29yay5qc1wiO1xuaW1wb3J0IHsgSnNvblJwY1Byb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItanNvbnJwYy5qc1wiO1xuaW1wb3J0IHsgV2ViU29ja2V0UHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci13ZWJzb2NrZXQuanNcIjtcbmNvbnN0IGRlZmF1bHRQcm9qZWN0SWQgPSBcIjg0ODQyMDc4YjA5OTQ2NjM4YzAzMTU3ZjgzNDA1MjEzXCI7XG5mdW5jdGlvbiBnZXRIb3N0KG5hbWUpIHtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgY2FzZSBcIm1haW5uZXRcIjpcbiAgICAgICAgICAgIHJldHVybiBcIm1haW5uZXQuaW5mdXJhLmlvXCI7XG4gICAgICAgIGNhc2UgXCJnb2VybGlcIjpcbiAgICAgICAgICAgIHJldHVybiBcImdvZXJsaS5pbmZ1cmEuaW9cIjtcbiAgICAgICAgY2FzZSBcInNlcG9saWFcIjpcbiAgICAgICAgICAgIHJldHVybiBcInNlcG9saWEuaW5mdXJhLmlvXCI7XG4gICAgICAgIGNhc2UgXCJhcmJpdHJ1bVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYXJiaXRydW0tbWFpbm5ldC5pbmZ1cmEuaW9cIjtcbiAgICAgICAgY2FzZSBcImFyYml0cnVtLWdvZXJsaVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYXJiaXRydW0tZ29lcmxpLmluZnVyYS5pb1wiO1xuICAgICAgICBjYXNlIFwiYXJiaXRydW0tc2Vwb2xpYVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYXJiaXRydW0tc2Vwb2xpYS5pbmZ1cmEuaW9cIjtcbiAgICAgICAgY2FzZSBcImJhc2VcIjpcbiAgICAgICAgICAgIHJldHVybiBcImJhc2UtbWFpbm5ldC5pbmZ1cmEuaW9cIjtcbiAgICAgICAgY2FzZSBcImJhc2UtZ29lcmxpYVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYmFzZS1nb2VybGkuaW5mdXJhLmlvXCI7XG4gICAgICAgIGNhc2UgXCJiYXNlLXNlcG9saWFcIjpcbiAgICAgICAgICAgIHJldHVybiBcImJhc2Utc2Vwb2xpYS5pbmZ1cmEuaW9cIjtcbiAgICAgICAgY2FzZSBcImJuYlwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYm5ic21hcnRjaGFpbi1tYWlubmV0LmluZnVyYS5pb1wiO1xuICAgICAgICBjYXNlIFwiYm5idFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYm5ic21hcnRjaGFpbi10ZXN0bmV0LmluZnVyYS5pb1wiO1xuICAgICAgICBjYXNlIFwibGluZWFcIjpcbiAgICAgICAgICAgIHJldHVybiBcImxpbmVhLW1haW5uZXQuaW5mdXJhLmlvXCI7XG4gICAgICAgIGNhc2UgXCJsaW5lYS1nb2VybGlcIjpcbiAgICAgICAgICAgIHJldHVybiBcImxpbmVhLWdvZXJsaS5pbmZ1cmEuaW9cIjtcbiAgICAgICAgY2FzZSBcIm1hdGljXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJwb2x5Z29uLW1haW5uZXQuaW5mdXJhLmlvXCI7XG4gICAgICAgIGNhc2UgXCJtYXRpYy1tdW1iYWlcIjpcbiAgICAgICAgICAgIHJldHVybiBcInBvbHlnb24tbXVtYmFpLmluZnVyYS5pb1wiO1xuICAgICAgICBjYXNlIFwib3B0aW1pc21cIjpcbiAgICAgICAgICAgIHJldHVybiBcIm9wdGltaXNtLW1haW5uZXQuaW5mdXJhLmlvXCI7XG4gICAgICAgIGNhc2UgXCJvcHRpbWlzbS1nb2VybGlcIjpcbiAgICAgICAgICAgIHJldHVybiBcIm9wdGltaXNtLWdvZXJsaS5pbmZ1cmEuaW9cIjtcbiAgICAgICAgY2FzZSBcIm9wdGltaXNtLXNlcG9saWFcIjpcbiAgICAgICAgICAgIHJldHVybiBcIm9wdGltaXNtLXNlcG9saWEuaW5mdXJhLmlvXCI7XG4gICAgfVxuICAgIGFzc2VydEFyZ3VtZW50KGZhbHNlLCBcInVuc3VwcG9ydGVkIG5ldHdvcmtcIiwgXCJuZXR3b3JrXCIsIG5hbWUpO1xufVxuLyoqXG4gKiAgVGhlICoqSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIqKiBjb25uZWN0cyB0byB0aGUgW1tsaW5rLWluZnVyYV1dXG4gKiAgV2ViU29ja2V0IGVuZC1wb2ludHMuXG4gKlxuICogIEJ5IGRlZmF1bHQsIGEgaGlnaGx5LXRocm90dGxlZCBBUEkga2V5IGlzIHVzZWQsIHdoaWNoIGlzXG4gKiAgYXBwcm9wcmlhdGUgZm9yIHF1aWNrIHByb3RvdHlwZXMgYW5kIHNpbXBsZSBzY3JpcHRzLiBUb1xuICogIGdhaW4gYWNjZXNzIHRvIGFuIGluY3JlYXNlZCByYXRlLWxpbWl0LCBpdCBpcyBoaWdobHlcbiAqICByZWNvbW1lbmRlZCB0byBbc2lnbiB1cCBoZXJlXShsaW5rLWluZnVyYS1zaWdudXApLlxuICovXG5leHBvcnQgY2xhc3MgSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIgZXh0ZW5kcyBXZWJTb2NrZXRQcm92aWRlciB7XG4gICAgLyoqXG4gICAgICogIFRoZSBQcm9qZWN0IElEIGZvciB0aGUgSU5GVVJBIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgcHJvamVjdElkO1xuICAgIC8qKlxuICAgICAqICBUaGUgUHJvamVjdCBTZWNyZXQuXG4gICAgICpcbiAgICAgKiAgSWYgbnVsbCwgbm8gYXV0aGVudGljYXRlZCByZXF1ZXN0cyBhcmUgbWFkZS4gVGhpcyBzaG91bGQgbm90XG4gICAgICogIGJlIHVzZWQgb3V0c2lkZSBvZiBwcml2YXRlIGNvbnRleHRzLlxuICAgICAqL1xuICAgIHByb2plY3RTZWNyZXQ7XG4gICAgLyoqXG4gICAgICogIENyZWF0ZXMgYSBuZXcgKipJbmZ1cmFXZWJTb2NrZXRQcm92aWRlcioqLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5ldHdvcmssIHByb2plY3RJZCkge1xuICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBJbmZ1cmFQcm92aWRlcihuZXR3b3JrLCBwcm9qZWN0SWQpO1xuICAgICAgICBjb25zdCByZXEgPSBwcm92aWRlci5fZ2V0Q29ubmVjdGlvbigpO1xuICAgICAgICBhc3NlcnQoIXJlcS5jcmVkZW50aWFscywgXCJJTkZVUkEgV2ViU29ja2V0IHByb2plY3Qgc2VjcmV0cyB1bnN1cHBvcnRlZFwiLCBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiLCB7IG9wZXJhdGlvbjogXCJJbmZ1cmFQcm92aWRlci5nZXRXZWJTb2NrZXRQcm92aWRlcigpXCIgfSk7XG4gICAgICAgIGNvbnN0IHVybCA9IHJlcS51cmwucmVwbGFjZSgvXmh0dHAvaSwgXCJ3c1wiKS5yZXBsYWNlKFwiL3YzL1wiLCBcIi93cy92My9cIik7XG4gICAgICAgIHN1cGVyKHVybCwgbmV0d29yayk7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICAgICAgcHJvamVjdElkOiBwcm92aWRlci5wcm9qZWN0SWQsXG4gICAgICAgICAgICBwcm9qZWN0U2VjcmV0OiBwcm92aWRlci5wcm9qZWN0U2VjcmV0XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpc0NvbW11bml0eVJlc291cmNlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMucHJvamVjdElkID09PSBkZWZhdWx0UHJvamVjdElkKTtcbiAgICB9XG59XG4vKipcbiAqICBUaGUgKipJbmZ1cmFQcm92aWRlcioqIGNvbm5lY3RzIHRvIHRoZSBbW2xpbmstaW5mdXJhXV1cbiAqICBKU09OLVJQQyBlbmQtcG9pbnRzLlxuICpcbiAqICBCeSBkZWZhdWx0LCBhIGhpZ2hseS10aHJvdHRsZWQgQVBJIGtleSBpcyB1c2VkLCB3aGljaCBpc1xuICogIGFwcHJvcHJpYXRlIGZvciBxdWljayBwcm90b3R5cGVzIGFuZCBzaW1wbGUgc2NyaXB0cy4gVG9cbiAqICBnYWluIGFjY2VzcyB0byBhbiBpbmNyZWFzZWQgcmF0ZS1saW1pdCwgaXQgaXMgaGlnaGx5XG4gKiAgcmVjb21tZW5kZWQgdG8gW3NpZ24gdXAgaGVyZV0obGluay1pbmZ1cmEtc2lnbnVwKS5cbiAqL1xuZXhwb3J0IGNsYXNzIEluZnVyYVByb3ZpZGVyIGV4dGVuZHMgSnNvblJwY1Byb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiAgVGhlIFByb2plY3QgSUQgZm9yIHRoZSBJTkZVUkEgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBwcm9qZWN0SWQ7XG4gICAgLyoqXG4gICAgICogIFRoZSBQcm9qZWN0IFNlY3JldC5cbiAgICAgKlxuICAgICAqICBJZiBudWxsLCBubyBhdXRoZW50aWNhdGVkIHJlcXVlc3RzIGFyZSBtYWRlLiBUaGlzIHNob3VsZCBub3RcbiAgICAgKiAgYmUgdXNlZCBvdXRzaWRlIG9mIHByaXZhdGUgY29udGV4dHMuXG4gICAgICovXG4gICAgcHJvamVjdFNlY3JldDtcbiAgICAvKipcbiAgICAgKiAgQ3JlYXRlcyBhIG5ldyAqKkluZnVyYVByb3ZpZGVyKiouXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoX25ldHdvcmssIHByb2plY3RJZCwgcHJvamVjdFNlY3JldCkge1xuICAgICAgICBpZiAoX25ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgX25ldHdvcmsgPSBcIm1haW5uZXRcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXR3b3JrID0gTmV0d29yay5mcm9tKF9uZXR3b3JrKTtcbiAgICAgICAgaWYgKHByb2plY3RJZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBwcm9qZWN0SWQgPSBkZWZhdWx0UHJvamVjdElkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9qZWN0U2VjcmV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHByb2plY3RTZWNyZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBJbmZ1cmFQcm92aWRlci5nZXRSZXF1ZXN0KG5ldHdvcmssIHByb2plY3RJZCwgcHJvamVjdFNlY3JldCk7XG4gICAgICAgIHN1cGVyKHJlcXVlc3QsIG5ldHdvcmssIHsgc3RhdGljTmV0d29yazogbmV0d29yayB9KTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IHByb2plY3RJZCwgcHJvamVjdFNlY3JldCB9KTtcbiAgICB9XG4gICAgX2dldFByb3ZpZGVyKGNoYWluSWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW5mdXJhUHJvdmlkZXIoY2hhaW5JZCwgdGhpcy5wcm9qZWN0SWQsIHRoaXMucHJvamVjdFNlY3JldCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRQcm92aWRlcihjaGFpbklkKTtcbiAgICB9XG4gICAgaXNDb21tdW5pdHlSZXNvdXJjZSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnByb2plY3RJZCA9PT0gZGVmYXVsdFByb2plY3RJZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3ICoqSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIqKi5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0V2ViU29ja2V0UHJvdmlkZXIobmV0d29yaywgcHJvamVjdElkKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIobmV0d29yaywgcHJvamVjdElkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJldHVybnMgYSBwcmVwYXJlZCByZXF1ZXN0IGZvciBjb25uZWN0aW5nIHRvICUlbmV0d29yayUlXG4gICAgICogIHdpdGggJSVwcm9qZWN0SWQlJSBhbmQgJSVwcm9qZWN0U2VjcmV0JSUuXG4gICAgICovXG4gICAgc3RhdGljIGdldFJlcXVlc3QobmV0d29yaywgcHJvamVjdElkLCBwcm9qZWN0U2VjcmV0KSB7XG4gICAgICAgIGlmIChwcm9qZWN0SWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJvamVjdElkID0gZGVmYXVsdFByb2plY3RJZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvamVjdFNlY3JldCA9PSBudWxsKSB7XG4gICAgICAgICAgICBwcm9qZWN0U2VjcmV0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IEZldGNoUmVxdWVzdChgaHR0cHM6L1xcLyR7Z2V0SG9zdChuZXR3b3JrLm5hbWUpfS92My8ke3Byb2plY3RJZH1gKTtcbiAgICAgICAgcmVxdWVzdC5hbGxvd0d6aXAgPSB0cnVlO1xuICAgICAgICBpZiAocHJvamVjdFNlY3JldCkge1xuICAgICAgICAgICAgcmVxdWVzdC5zZXRDcmVkZW50aWFscyhcIlwiLCBwcm9qZWN0U2VjcmV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvamVjdElkID09PSBkZWZhdWx0UHJvamVjdElkKSB7XG4gICAgICAgICAgICByZXF1ZXN0LnJldHJ5RnVuYyA9IGFzeW5jIChyZXF1ZXN0LCByZXNwb25zZSwgYXR0ZW1wdCkgPT4ge1xuICAgICAgICAgICAgICAgIHNob3dUaHJvdHRsZU1lc3NhZ2UoXCJJbmZ1cmFQcm92aWRlclwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXItaW5mdXJhLmpzLm1hcCIsIi8qKlxuICogIFtbbGluay1xdWlja25vZGVdXSBwcm92aWRlcyBhIHRoaXJkLXBhcnR5IHNlcnZpY2UgZm9yIGNvbm5lY3RpbmcgdG9cbiAqICB2YXJpb3VzIGJsb2NrY2hhaW5zIG92ZXIgSlNPTi1SUEMuXG4gKlxuICogICoqU3VwcG9ydGVkIE5ldHdvcmtzKipcbiAqXG4gKiAgLSBFdGhlcmV1bSBNYWlubmV0IChgYG1haW5uZXRgYClcbiAqICAtIEdvZXJsaSBUZXN0bmV0IChgYGdvZXJsaWBgKVxuICogIC0gU2Vwb2xpYSBUZXN0bmV0IChgYHNlcG9saWFgYClcbiAqICAtIEhvbGVza3kgVGVzdG5ldCAoYGBob2xlc2t5YGApXG4gKiAgLSBBcmJpdHJ1bSAoYGBhcmJpdHJ1bWBgKVxuICogIC0gQXJiaXRydW0gR29lcmxpIFRlc3RuZXQgKGBgYXJiaXRydW0tZ29lcmxpYGApXG4gKiAgLSBBcmJpdHJ1bSBTZXBvbGlhIFRlc3RuZXQgKGBgYXJiaXRydW0tc2Vwb2xpYWBgKVxuICogIC0gQmFzZSBNYWlubmV0IChgYGJhc2VgYCk7XG4gKiAgLSBCYXNlIEdvZXJsaSBUZXN0bmV0IChgYGJhc2UtZ29lcmxpYGApO1xuICogIC0gQmFzZSBTZXBvbGlhIFRlc3RuZXQgKGBgYmFzZS1zZXBvbGlhYGApO1xuICogIC0gQk5CIFNtYXJ0IENoYWluIE1haW5uZXQgKGBgYm5iYGApXG4gKiAgLSBCTkIgU21hcnQgQ2hhaW4gVGVzdG5ldCAoYGBibmJ0YGApXG4gKiAgLSBPcHRpbWlzbSAoYGBvcHRpbWlzbWBgKVxuICogIC0gT3B0aW1pc20gR29lcmxpIFRlc3RuZXQgKGBgb3B0aW1pc20tZ29lcmxpYGApXG4gKiAgLSBPcHRpbWlzbSBTZXBvbGlhIFRlc3RuZXQgKGBgb3B0aW1pc20tc2Vwb2xpYWBgKVxuICogIC0gUG9seWdvbiAoYGBtYXRpY2BgKVxuICogIC0gUG9seWdvbiBNdW1iYWkgVGVzdG5ldCAoYGBtYXRpYy1tdW1iYWlgYClcbiAqXG4gKiAgQF9zdWJzZWN0aW9uOiBhcGkvcHJvdmlkZXJzL3RoaXJkcGFydHk6UXVpY2tOb2RlICBbcHJvdmlkZXJzLXF1aWNrbm9kZV1cbiAqL1xuaW1wb3J0IHsgZGVmaW5lUHJvcGVydGllcywgRmV0Y2hSZXF1ZXN0LCBhc3NlcnRBcmd1bWVudCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgc2hvd1Rocm90dGxlTWVzc2FnZSB9IGZyb20gXCIuL2NvbW11bml0eS5qc1wiO1xuaW1wb3J0IHsgTmV0d29yayB9IGZyb20gXCIuL25ldHdvcmsuanNcIjtcbmltcG9ydCB7IEpzb25ScGNQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyLWpzb25ycGMuanNcIjtcbmNvbnN0IGRlZmF1bHRUb2tlbiA9IFwiOTE5YjQxMmEwNTdiNWU5YzliNmRjZTE5M2M1YTYwMjQyZDZlZmFkYlwiO1xuZnVuY3Rpb24gZ2V0SG9zdChuYW1lKSB7XG4gICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgIGNhc2UgXCJtYWlubmV0XCI6XG4gICAgICAgICAgICByZXR1cm4gXCJldGhlcnMucXVpa25vZGUucHJvXCI7XG4gICAgICAgIGNhc2UgXCJnb2VybGlcIjpcbiAgICAgICAgICAgIHJldHVybiBcImV0aGVycy5ldGhlcmV1bS1nb2VybGkucXVpa25vZGUucHJvXCI7XG4gICAgICAgIGNhc2UgXCJzZXBvbGlhXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJldGhlcnMuZXRoZXJldW0tc2Vwb2xpYS5xdWlrbm9kZS5wcm9cIjtcbiAgICAgICAgY2FzZSBcImhvbGVza3lcIjpcbiAgICAgICAgICAgIHJldHVybiBcImV0aGVycy5ldGhlcmV1bS1ob2xlc2t5LnF1aWtub2RlLnByb1wiO1xuICAgICAgICBjYXNlIFwiYXJiaXRydW1cIjpcbiAgICAgICAgICAgIHJldHVybiBcImV0aGVycy5hcmJpdHJ1bS1tYWlubmV0LnF1aWtub2RlLnByb1wiO1xuICAgICAgICBjYXNlIFwiYXJiaXRydW0tZ29lcmxpXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJldGhlcnMuYXJiaXRydW0tZ29lcmxpLnF1aWtub2RlLnByb1wiO1xuICAgICAgICBjYXNlIFwiYXJiaXRydW0tc2Vwb2xpYVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiZXRoZXJzLmFyYml0cnVtLXNlcG9saWEucXVpa25vZGUucHJvXCI7XG4gICAgICAgIGNhc2UgXCJiYXNlXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJldGhlcnMuYmFzZS1tYWlubmV0LnF1aWtub2RlLnByb1wiO1xuICAgICAgICBjYXNlIFwiYmFzZS1nb2VybGlcIjpcbiAgICAgICAgICAgIHJldHVybiBcImV0aGVycy5iYXNlLWdvZXJsaS5xdWlrbm9kZS5wcm9cIjtcbiAgICAgICAgY2FzZSBcImJhc2Utc3BvbGlhXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJldGhlcnMuYmFzZS1zZXBvbGlhLnF1aWtub2RlLnByb1wiO1xuICAgICAgICBjYXNlIFwiYm5iXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJldGhlcnMuYnNjLnF1aWtub2RlLnByb1wiO1xuICAgICAgICBjYXNlIFwiYm5idFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiZXRoZXJzLmJzYy10ZXN0bmV0LnF1aWtub2RlLnByb1wiO1xuICAgICAgICBjYXNlIFwibWF0aWNcIjpcbiAgICAgICAgICAgIHJldHVybiBcImV0aGVycy5tYXRpYy5xdWlrbm9kZS5wcm9cIjtcbiAgICAgICAgY2FzZSBcIm1hdGljLW11bWJhaVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiZXRoZXJzLm1hdGljLXRlc3RuZXQucXVpa25vZGUucHJvXCI7XG4gICAgICAgIGNhc2UgXCJvcHRpbWlzbVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiZXRoZXJzLm9wdGltaXNtLnF1aWtub2RlLnByb1wiO1xuICAgICAgICBjYXNlIFwib3B0aW1pc20tZ29lcmxpXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJldGhlcnMub3B0aW1pc20tZ29lcmxpLnF1aWtub2RlLnByb1wiO1xuICAgICAgICBjYXNlIFwib3B0aW1pc20tc2Vwb2xpYVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiZXRoZXJzLm9wdGltaXNtLXNlcG9saWEucXVpa25vZGUucHJvXCI7XG4gICAgICAgIGNhc2UgXCJ4ZGFpXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJldGhlcnMueGRhaS5xdWlrbm9kZS5wcm9cIjtcbiAgICB9XG4gICAgYXNzZXJ0QXJndW1lbnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgbmFtZSk7XG59XG4vKlxuQFRPRE86XG4gIFRoZXNlIG5ldHdvcmtzIGFyZSBub3QgY3VycmVudGx5IHByZXNlbnQgaW4gdGhlIE5ldHdvcmtcbiAgZGVmYXVsdCBpbmNsdWRlZCBuZXR3b3Jrcy4gUmVzZWFyY2ggdGhlbSBhbmQgZW5zdXJlIHRoZXlcbiAgYXJlIEVWTSBjb21wYXRpYmxlIGFuZCB3b3JrIHdpdGggZXRoZXJzXG5cbiAgaHR0cDovL2V0aGVycy5tYXRpYy1hbW95LnF1aWtub2RlLnByb1xuXG4gIGh0dHA6Ly9ldGhlcnMuYXZhbGFuY2hlLW1haW5uZXQucXVpa25vZGUucHJvXG4gIGh0dHA6Ly9ldGhlcnMuYXZhbGFuY2hlLXRlc3RuZXQucXVpa25vZGUucHJvXG4gIGh0dHA6Ly9ldGhlcnMuYmxhc3Qtc2Vwb2xpYS5xdWlrbm9kZS5wcm9cbiAgaHR0cDovL2V0aGVycy5jZWxvLW1haW5uZXQucXVpa25vZGUucHJvXG4gIGh0dHA6Ly9ldGhlcnMuZmFudG9tLnF1aWtub2RlLnByb1xuICBodHRwOi8vZXRoZXJzLmlteC1kZW1vLnF1aWtub2RlLnByb1xuICBodHRwOi8vZXRoZXJzLmlteC1tYWlubmV0LnF1aWtub2RlLnByb1xuICBodHRwOi8vZXRoZXJzLmlteC10ZXN0bmV0LnF1aWtub2RlLnByb1xuICBodHRwOi8vZXRoZXJzLm5lYXItbWFpbm5ldC5xdWlrbm9kZS5wcm9cbiAgaHR0cDovL2V0aGVycy5uZWFyLXRlc3RuZXQucXVpa25vZGUucHJvXG4gIGh0dHA6Ly9ldGhlcnMubm92YS1tYWlubmV0LnF1aWtub2RlLnByb1xuICBodHRwOi8vZXRoZXJzLnNjcm9sbC1tYWlubmV0LnF1aWtub2RlLnByb1xuICBodHRwOi8vZXRoZXJzLnNjcm9sbC10ZXN0bmV0LnF1aWtub2RlLnByb1xuICBodHRwOi8vZXRoZXJzLnRyb24tbWFpbm5ldC5xdWlrbm9kZS5wcm9cbiAgaHR0cDovL2V0aGVycy56a2V2bS1tYWlubmV0LnF1aWtub2RlLnByb1xuICBodHRwOi8vZXRoZXJzLnprZXZtLXRlc3RuZXQucXVpa25vZGUucHJvXG4gIGh0dHA6Ly9ldGhlcnMuemtzeW5jLW1haW5uZXQucXVpa25vZGUucHJvXG4gIGh0dHA6Ly9ldGhlcnMuemtzeW5jLXRlc3RuZXQucXVpa25vZGUucHJvXG4qL1xuLyoqXG4gKiAgVGhlICoqUXVpY2tOb2RlUHJvdmlkZXIqKiBjb25uZWN0cyB0byB0aGUgW1tsaW5rLXF1aWNrbm9kZV1dXG4gKiAgSlNPTi1SUEMgZW5kLXBvaW50cy5cbiAqXG4gKiAgQnkgZGVmYXVsdCwgYSBoaWdobHktdGhyb3R0bGVkIEFQSSB0b2tlbiBpcyB1c2VkLCB3aGljaCBpc1xuICogIGFwcHJvcHJpYXRlIGZvciBxdWljayBwcm90b3R5cGVzIGFuZCBzaW1wbGUgc2NyaXB0cy4gVG9cbiAqICBnYWluIGFjY2VzcyB0byBhbiBpbmNyZWFzZWQgcmF0ZS1saW1pdCwgaXQgaXMgaGlnaGx5XG4gKiAgcmVjb21tZW5kZWQgdG8gW3NpZ24gdXAgaGVyZV0obGluay1xdWlja25vZGUpLlxuICovXG5leHBvcnQgY2xhc3MgUXVpY2tOb2RlUHJvdmlkZXIgZXh0ZW5kcyBKc29uUnBjUHJvdmlkZXIge1xuICAgIC8qKlxuICAgICAqICBUaGUgQVBJIHRva2VuLlxuICAgICAqL1xuICAgIHRva2VuO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3ICoqUXVpY2tOb2RlUHJvdmlkZXIqKi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihfbmV0d29yaywgdG9rZW4pIHtcbiAgICAgICAgaWYgKF9uZXR3b3JrID09IG51bGwpIHtcbiAgICAgICAgICAgIF9uZXR3b3JrID0gXCJtYWlubmV0XCI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV0d29yayA9IE5ldHdvcmsuZnJvbShfbmV0d29yayk7XG4gICAgICAgIGlmICh0b2tlbiA9PSBudWxsKSB7XG4gICAgICAgICAgICB0b2tlbiA9IGRlZmF1bHRUb2tlbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gUXVpY2tOb2RlUHJvdmlkZXIuZ2V0UmVxdWVzdChuZXR3b3JrLCB0b2tlbik7XG4gICAgICAgIHN1cGVyKHJlcXVlc3QsIG5ldHdvcmssIHsgc3RhdGljTmV0d29yazogbmV0d29yayB9KTtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7IHRva2VuIH0pO1xuICAgIH1cbiAgICBfZ2V0UHJvdmlkZXIoY2hhaW5JZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBRdWlja05vZGVQcm92aWRlcihjaGFpbklkLCB0aGlzLnRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICByZXR1cm4gc3VwZXIuX2dldFByb3ZpZGVyKGNoYWluSWQpO1xuICAgIH1cbiAgICBpc0NvbW11bml0eVJlc291cmNlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMudG9rZW4gPT09IGRlZmF1bHRUb2tlbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIGEgbmV3IHJlcXVlc3QgcHJlcGFyZWQgZm9yICUlbmV0d29yayUlIGFuZCB0aGVcbiAgICAgKiAgJSV0b2tlbiUlLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRSZXF1ZXN0KG5ldHdvcmssIHRva2VuKSB7XG4gICAgICAgIGlmICh0b2tlbiA9PSBudWxsKSB7XG4gICAgICAgICAgICB0b2tlbiA9IGRlZmF1bHRUb2tlbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IEZldGNoUmVxdWVzdChgaHR0cHM6L1xcLyR7Z2V0SG9zdChuZXR3b3JrLm5hbWUpfS8ke3Rva2VufWApO1xuICAgICAgICByZXF1ZXN0LmFsbG93R3ppcCA9IHRydWU7XG4gICAgICAgIC8vaWYgKHByb2plY3RTZWNyZXQpIHsgcmVxdWVzdC5zZXRDcmVkZW50aWFscyhcIlwiLCBwcm9qZWN0U2VjcmV0KTsgfVxuICAgICAgICBpZiAodG9rZW4gPT09IGRlZmF1bHRUb2tlbikge1xuICAgICAgICAgICAgcmVxdWVzdC5yZXRyeUZ1bmMgPSBhc3luYyAocmVxdWVzdCwgcmVzcG9uc2UsIGF0dGVtcHQpID0+IHtcbiAgICAgICAgICAgICAgICBzaG93VGhyb3R0bGVNZXNzYWdlKFwiUXVpY2tOb2RlUHJvdmlkZXJcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLXF1aWNrbm9kZS5qcy5tYXAiLCIvKipcbiAqICBBICoqRmFsbGJhY2tQcm92aWRlcioqIHByb3ZpZGVzIHJlc2lsaWVuY2UsIHNlY3VyaXR5IGFuZCBwZXJmb3JtYW5jZVxuICogIGluIGEgd2F5IHRoYXQgaXMgY3VzdG9taXphYmxlIGFuZCBjb25maWd1cmFibGUuXG4gKlxuICogIEBfc2VjdGlvbjogYXBpL3Byb3ZpZGVycy9mYWxsYmFjay1wcm92aWRlcjpGYWxsYmFjayBQcm92aWRlciBbYWJvdXQtZmFsbGJhY2stcHJvdmlkZXJdXG4gKi9cbmltcG9ydCB7IGFzc2VydCwgYXNzZXJ0QXJndW1lbnQsIGdldEJpZ0ludCwgZ2V0TnVtYmVyLCBpc0Vycm9yIH0gZnJvbSBcIi4uL3V0aWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBBYnN0cmFjdFByb3ZpZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtcHJvdmlkZXIuanNcIjtcbmltcG9ydCB7IE5ldHdvcmsgfSBmcm9tIFwiLi9uZXR3b3JrLmpzXCI7XG5jb25zdCBCTl8xID0gQmlnSW50KFwiMVwiKTtcbmNvbnN0IEJOXzIgPSBCaWdJbnQoXCIyXCIpO1xuZnVuY3Rpb24gc2h1ZmZsZShhcnJheSkge1xuICAgIGZvciAobGV0IGkgPSBhcnJheS5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaSArIDEpKTtcbiAgICAgICAgY29uc3QgdG1wID0gYXJyYXlbaV07XG4gICAgICAgIGFycmF5W2ldID0gYXJyYXlbal07XG4gICAgICAgIGFycmF5W2pdID0gdG1wO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN0YWxsKGR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7IHNldFRpbWVvdXQocmVzb2x2ZSwgZHVyYXRpb24pOyB9KTtcbn1cbmZ1bmN0aW9uIGdldFRpbWUoKSB7IHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpOyB9XG5mdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJiaWdpbnRcIiwgdmFsdWU6IHZhbHVlLnRvU3RyaW5nKCkgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG59XG47XG5jb25zdCBkZWZhdWx0Q29uZmlnID0geyBzdGFsbFRpbWVvdXQ6IDQwMCwgcHJpb3JpdHk6IDEsIHdlaWdodDogMSB9O1xuY29uc3QgZGVmYXVsdFN0YXRlID0ge1xuICAgIGJsb2NrTnVtYmVyOiAtMiwgcmVxdWVzdHM6IDAsIGxhdGVSZXNwb25zZXM6IDAsIGVycm9yUmVzcG9uc2VzOiAwLFxuICAgIG91dE9mU3luYzogLTEsIHVuc3VwcG9ydGVkRXZlbnRzOiAwLCByb2xsaW5nRHVyYXRpb246IDAsIHNjb3JlOiAwLFxuICAgIF9uZXR3b3JrOiBudWxsLCBfdXBkYXRlTnVtYmVyOiBudWxsLCBfdG90YWxUaW1lOiAwLFxuICAgIF9sYXN0RmF0YWxFcnJvcjogbnVsbCwgX2xhc3RGYXRhbEVycm9yVGltZXN0YW1wOiAwXG59O1xuYXN5bmMgZnVuY3Rpb24gd2FpdEZvclN5bmMoY29uZmlnLCBibG9ja051bWJlcikge1xuICAgIHdoaWxlIChjb25maWcuYmxvY2tOdW1iZXIgPCAwIHx8IGNvbmZpZy5ibG9ja051bWJlciA8IGJsb2NrTnVtYmVyKSB7XG4gICAgICAgIGlmICghY29uZmlnLl91cGRhdGVOdW1iZXIpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fdXBkYXRlTnVtYmVyID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBibG9ja051bWJlciA9IGF3YWl0IGNvbmZpZy5wcm92aWRlci5nZXRCbG9ja051bWJlcigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2tOdW1iZXIgPiBjb25maWcuYmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5ibG9ja051bWJlciA9IGJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuYmxvY2tOdW1iZXIgPSAtMjtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9sYXN0RmF0YWxFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2xhc3RGYXRhbEVycm9yVGltZXN0YW1wID0gZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25maWcuX3VwZGF0ZU51bWJlciA9IG51bGw7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGNvbmZpZy5fdXBkYXRlTnVtYmVyO1xuICAgICAgICBjb25maWcub3V0T2ZTeW5jKys7XG4gICAgICAgIGlmIChjb25maWcuX2xhc3RGYXRhbEVycm9yKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIF9ub3JtYWxpemUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXCJudWxsXCI7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gXCJbXCIgKyAodmFsdWUubWFwKF9ub3JtYWxpemUpKS5qb2luKFwiLFwiKSArIFwiXVwiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mICh2YWx1ZS50b0pTT04pID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIF9ub3JtYWxpemUodmFsdWUudG9KU09OKCkpO1xuICAgIH1cbiAgICBzd2l0Y2ggKHR5cGVvZiAodmFsdWUpKSB7XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIHJldHVybiBCaWdJbnQodmFsdWUpLnRvU3RyaW5nKCk7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJvYmplY3RcIjoge1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgICAgICAgICAgIGtleXMuc29ydCgpO1xuICAgICAgICAgICAgcmV0dXJuIFwie1wiICsga2V5cy5tYXAoKGspID0+IGAke0pTT04uc3RyaW5naWZ5KGspfToke19ub3JtYWxpemUodmFsdWVba10pfWApLmpvaW4oXCIsXCIpICsgXCJ9XCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJDb3VsZCBub3Qgc2VyaWFsaXplXCIsIHZhbHVlKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJIbW0uLi5cIik7XG59XG5mdW5jdGlvbiBub3JtYWxpemVSZXN1bHQodmFsdWUpIHtcbiAgICBpZiAoXCJlcnJvclwiIGluIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gdmFsdWUuZXJyb3I7XG4gICAgICAgIHJldHVybiB7IHRhZzogX25vcm1hbGl6ZShlcnJvciksIHZhbHVlOiBlcnJvciB9O1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB2YWx1ZS5yZXN1bHQ7XG4gICAgcmV0dXJuIHsgdGFnOiBfbm9ybWFsaXplKHJlc3VsdCksIHZhbHVlOiByZXN1bHQgfTtcbn1cbi8vIFRoaXMgc3RyYXRlZ3kgcGlja3MgdGhlIGhpZ2hlc3Qgd2VpZ2h0IHJlc3VsdCwgYXMgbG9uZyBhcyB0aGUgd2VpZ2h0IGlzXG4vLyBlcXVhbCB0byBvciBncmVhdGVyIHRoYW4gcXVvcnVtXG5mdW5jdGlvbiBjaGVja1F1b3J1bShxdW9ydW0sIHJlc3VsdHMpIHtcbiAgICBjb25zdCB0YWxseSA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IHsgdmFsdWUsIHRhZywgd2VpZ2h0IH0gb2YgcmVzdWx0cykge1xuICAgICAgICBjb25zdCB0ID0gdGFsbHkuZ2V0KHRhZykgfHwgeyB2YWx1ZSwgd2VpZ2h0OiAwIH07XG4gICAgICAgIHQud2VpZ2h0ICs9IHdlaWdodDtcbiAgICAgICAgdGFsbHkuc2V0KHRhZywgdCk7XG4gICAgfVxuICAgIGxldCBiZXN0ID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IHIgb2YgdGFsbHkudmFsdWVzKCkpIHtcbiAgICAgICAgaWYgKHIud2VpZ2h0ID49IHF1b3J1bSAmJiAoIWJlc3QgfHwgci53ZWlnaHQgPiBiZXN0LndlaWdodCkpIHtcbiAgICAgICAgICAgIGJlc3QgPSByO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChiZXN0KSB7XG4gICAgICAgIHJldHVybiBiZXN0LnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZ2V0TWVkaWFuKHF1b3J1bSwgcmVzdWx0cykge1xuICAgIGxldCByZXN1bHRXZWlnaHQgPSAwO1xuICAgIGNvbnN0IGVycm9yTWFwID0gbmV3IE1hcCgpO1xuICAgIGxldCBiZXN0RXJyb3IgPSBudWxsO1xuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgeyB2YWx1ZSwgdGFnLCB3ZWlnaHQgfSBvZiByZXN1bHRzKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBlID0gZXJyb3JNYXAuZ2V0KHRhZykgfHwgeyB2YWx1ZSwgd2VpZ2h0OiAwIH07XG4gICAgICAgICAgICBlLndlaWdodCArPSB3ZWlnaHQ7XG4gICAgICAgICAgICBlcnJvck1hcC5zZXQodGFnLCBlKTtcbiAgICAgICAgICAgIGlmIChiZXN0RXJyb3IgPT0gbnVsbCB8fCBlLndlaWdodCA+IGJlc3RFcnJvci53ZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBiZXN0RXJyb3IgPSBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goQmlnSW50KHZhbHVlKSk7XG4gICAgICAgICAgICByZXN1bHRXZWlnaHQgKz0gd2VpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyZXN1bHRXZWlnaHQgPCBxdW9ydW0pIHtcbiAgICAgICAgLy8gV2UgaGF2ZSBxdW9ydW0gZm9yIGFuIGVycm9yXG4gICAgICAgIGlmIChiZXN0RXJyb3IgJiYgYmVzdEVycm9yLndlaWdodCA+PSBxdW9ydW0pIHtcbiAgICAgICAgICAgIHJldHVybiBiZXN0RXJyb3IudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgZG8gbm90IGhhdmUgcXVvcnVtIGZvciBhIHJlc3VsdFxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBHZXQgdGhlIHNvcnRlZCB2YWx1ZXNcbiAgICB2YWx1ZXMuc29ydCgoYSwgYikgPT4gKChhIDwgYikgPyAtMSA6IChiID4gYSkgPyAxIDogMCkpO1xuICAgIGNvbnN0IG1pZCA9IE1hdGguZmxvb3IodmFsdWVzLmxlbmd0aCAvIDIpO1xuICAgIC8vIE9kZC1sZW5ndGg7IHRha2UgdGhlIG1pZGRsZSB2YWx1ZVxuICAgIGlmICh2YWx1ZXMubGVuZ3RoICUgMikge1xuICAgICAgICByZXR1cm4gdmFsdWVzW21pZF07XG4gICAgfVxuICAgIC8vIEV2ZW4gbGVuZ3RoOyB0YWtlIHRoZSBjZWlsaW5nIG9mIHRoZSBtZWFuIG9mIHRoZSBjZW50ZXIgdHdvIHZhbHVlc1xuICAgIHJldHVybiAodmFsdWVzW21pZCAtIDFdICsgdmFsdWVzW21pZF0gKyBCTl8xKSAvIEJOXzI7XG59XG5mdW5jdGlvbiBnZXRBbnlSZXN1bHQocXVvcnVtLCByZXN1bHRzKSB7XG4gICAgLy8gSWYgYW55IHZhbHVlIG9yIGVycm9yIG1lZXRzIHF1b3J1bSwgdGhhdCBpcyBvdXIgcHJlZmVycmVkIHJlc3VsdFxuICAgIGNvbnN0IHJlc3VsdCA9IGNoZWNrUXVvcnVtKHF1b3J1bSwgcmVzdWx0cyk7XG4gICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSwgZG8gd2UgaGF2ZSBhbnkgcmVzdWx0P1xuICAgIGZvciAoY29uc3QgciBvZiByZXN1bHRzKSB7XG4gICAgICAgIGlmIChyLnZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gci52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBOb3BlIVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBnZXRGdXp6eU1vZGUocXVvcnVtLCByZXN1bHRzKSB7XG4gICAgaWYgKHF1b3J1bSA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZ2V0TnVtYmVyKGdldE1lZGlhbihxdW9ydW0sIHJlc3VsdHMpLCBcIiVpbnRlcm5hbFwiKTtcbiAgICB9XG4gICAgY29uc3QgdGFsbHkgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgYWRkID0gKHJlc3VsdCwgd2VpZ2h0KSA9PiB7XG4gICAgICAgIGNvbnN0IHQgPSB0YWxseS5nZXQocmVzdWx0KSB8fCB7IHJlc3VsdCwgd2VpZ2h0OiAwIH07XG4gICAgICAgIHQud2VpZ2h0ICs9IHdlaWdodDtcbiAgICAgICAgdGFsbHkuc2V0KHJlc3VsdCwgdCk7XG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IHsgd2VpZ2h0LCB2YWx1ZSB9IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgY29uc3QgciA9IGdldE51bWJlcih2YWx1ZSk7XG4gICAgICAgIGFkZChyIC0gMSwgd2VpZ2h0KTtcbiAgICAgICAgYWRkKHIsIHdlaWdodCk7XG4gICAgICAgIGFkZChyICsgMSwgd2VpZ2h0KTtcbiAgICB9XG4gICAgbGV0IGJlc3RXZWlnaHQgPSAwO1xuICAgIGxldCBiZXN0UmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgIGZvciAoY29uc3QgeyB3ZWlnaHQsIHJlc3VsdCB9IG9mIHRhbGx5LnZhbHVlcygpKSB7XG4gICAgICAgIC8vIFVzZSB0aGlzIHJlc3VsdCwgaWYgdGhpcyByZXN1bHQgbWVldHMgcXVvcnVtIGFuZCBoYXMgZWl0aGVyOlxuICAgICAgICAvLyAtIGEgYmV0dGVyIHdlaWdodFxuICAgICAgICAvLyAtIG9yIGVxdWFsIHdlaWdodCwgYnV0IHRoZSByZXN1bHQgaXMgbGFyZ2VyXG4gICAgICAgIGlmICh3ZWlnaHQgPj0gcXVvcnVtICYmICh3ZWlnaHQgPiBiZXN0V2VpZ2h0IHx8IChiZXN0UmVzdWx0ICE9IG51bGwgJiYgd2VpZ2h0ID09PSBiZXN0V2VpZ2h0ICYmIHJlc3VsdCA+IGJlc3RSZXN1bHQpKSkge1xuICAgICAgICAgICAgYmVzdFdlaWdodCA9IHdlaWdodDtcbiAgICAgICAgICAgIGJlc3RSZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJlc3RSZXN1bHQ7XG59XG4vKipcbiAqICBBICoqRmFsbGJhY2tQcm92aWRlcioqIG1hbmFnZXMgc2V2ZXJhbCBbW1Byb3ZpZGVyc11dIHByb3ZpZGluZ1xuICogIHJlc2lsaWVuY2UgYnkgc3dpdGNoaW5nIGJldHdlZW4gc2xvdyBvciBtaXNiZWhhdmluZyBub2Rlcywgc2VjdXJpdHlcbiAqICBieSByZXF1aXJpbmcgbXVsdGlwbGUgYmFja2VuZHMgdG8gYWdncmVlIGFuZCBwZXJmb3JtYW5jZSBieSBhbGxvd2luZ1xuICogIGZhc3RlciBiYWNrZW5kcyB0byByZXNwb25kIGVhcmxpZXIuXG4gKlxuICovXG5leHBvcnQgY2xhc3MgRmFsbGJhY2tQcm92aWRlciBleHRlbmRzIEFic3RyYWN0UHJvdmlkZXIge1xuICAgIC8qKlxuICAgICAqICBUaGUgbnVtYmVyIG9mIGJhY2tlbmRzIHRoYXQgbXVzdCBhZ3JlZSBvbiBhIHZhbHVlIGJlZm9yZSBpdCBpc1xuICAgICAqICBhY2NwZXRlZC5cbiAgICAgKi9cbiAgICBxdW9ydW07XG4gICAgLyoqXG4gICAgICogIEBfaWdub3JlOlxuICAgICAqL1xuICAgIGV2ZW50UXVvcnVtO1xuICAgIC8qKlxuICAgICAqICBAX2lnbm9yZTpcbiAgICAgKi9cbiAgICBldmVudFdvcmtlcnM7XG4gICAgI2NvbmZpZ3M7XG4gICAgI2hlaWdodDtcbiAgICAjaW5pdGlhbFN5bmNQcm9taXNlO1xuICAgIC8qKlxuICAgICAqICBDcmVhdGVzIGEgbmV3ICoqRmFsbGJhY2tQcm92aWRlcioqIHdpdGggJSVwcm92aWRlcnMlJSBjb25uZWN0ZWQgdG9cbiAgICAgKiAgJSVuZXR3b3JrJSUuXG4gICAgICpcbiAgICAgKiAgSWYgYSBbW1Byb3ZpZGVyXV0gaXMgaW5jbHVkZWQgaW4gJSVwcm92aWRlcnMlJSwgZGVmYXVsdHMgYXJlIHVzZWRcbiAgICAgKiAgZm9yIHRoZSBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVycywgbmV0d29yaywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihuZXR3b3JrLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy4jY29uZmlncyA9IHByb3ZpZGVycy5tYXAoKHApID0+IHtcbiAgICAgICAgICAgIGlmIChwIGluc3RhbmNlb2YgQWJzdHJhY3RQcm92aWRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgcHJvdmlkZXI6IHAgfSwgZGVmYXVsdENvbmZpZywgZGVmYXVsdFN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0Q29uZmlnLCBwLCBkZWZhdWx0U3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jaGVpZ2h0ID0gLTI7XG4gICAgICAgIHRoaXMuI2luaXRpYWxTeW5jUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucXVvcnVtICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucXVvcnVtID0gb3B0aW9ucy5xdW9ydW07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnF1b3J1bSA9IE1hdGguY2VpbCh0aGlzLiNjb25maWdzLnJlZHVjZSgoYWNjdW0sIGNvbmZpZykgPT4ge1xuICAgICAgICAgICAgICAgIGFjY3VtICs9IGNvbmZpZy53ZWlnaHQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgICAgICAgICAgfSwgMCkgLyAyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmV2ZW50UXVvcnVtID0gMTtcbiAgICAgICAgdGhpcy5ldmVudFdvcmtlcnMgPSAxO1xuICAgICAgICBhc3NlcnRBcmd1bWVudCh0aGlzLnF1b3J1bSA8PSB0aGlzLiNjb25maWdzLnJlZHVjZSgoYSwgYykgPT4gKGEgKyBjLndlaWdodCksIDApLCBcInF1b3J1bSBleGNlZWQgcHJvdmlkZXIgd2llZ2h0XCIsIFwicXVvcnVtXCIsIHRoaXMucXVvcnVtKTtcbiAgICB9XG4gICAgZ2V0IHByb3ZpZGVyQ29uZmlncygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2NvbmZpZ3MubWFwKChjKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBjKTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmIChrZXlbMF0gPT09IFwiX1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXN1bHRba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgX2RldGVjdE5ldHdvcmsoKSB7XG4gICAgICAgIHJldHVybiBOZXR3b3JrLmZyb20oZ2V0QmlnSW50KGF3YWl0IHRoaXMuX3BlcmZvcm0oeyBtZXRob2Q6IFwiY2hhaW5JZFwiIH0pKSk7XG4gICAgfVxuICAgIC8vIEBUT0RPOiBBZGQgc3VwcG9ydCB0byBzZWxlY3QgcHJvdmlkZXJzIHRvIGJlIHRoZSBldmVudCBzdWJzY3JpYmVyXG4gICAgLy9fZ2V0U3Vic2NyaWJlcihzdWI6IFN1YnNjcmlwdGlvbik6IFN1YnNjcmliZXIge1xuICAgIC8vICAgIHRocm93IG5ldyBFcnJvcihcIkBUT0RPXCIpO1xuICAgIC8vfVxuICAgIC8qKlxuICAgICAqICBUcmFuc2Zvcm1zIGEgJSVyZXElJSBpbnRvIHRoZSBjb3JyZWN0IG1ldGhvZCBjYWxsIG9uICUlcHJvdmlkZXIlJS5cbiAgICAgKi9cbiAgICBhc3luYyBfdHJhbnNsYXRlUGVyZm9ybShwcm92aWRlciwgcmVxKSB7XG4gICAgICAgIHN3aXRjaCAocmVxLm1ldGhvZCkge1xuICAgICAgICAgICAgY2FzZSBcImJyb2FkY2FzdFRyYW5zYWN0aW9uXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLmJyb2FkY2FzdFRyYW5zYWN0aW9uKHJlcS5zaWduZWRUcmFuc2FjdGlvbik7XG4gICAgICAgICAgICBjYXNlIFwiY2FsbFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBwcm92aWRlci5jYWxsKE9iamVjdC5hc3NpZ24oe30sIHJlcS50cmFuc2FjdGlvbiwgeyBibG9ja1RhZzogcmVxLmJsb2NrVGFnIH0pKTtcbiAgICAgICAgICAgIGNhc2UgXCJjaGFpbklkXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhd2FpdCBwcm92aWRlci5nZXROZXR3b3JrKCkpLmNoYWluSWQ7XG4gICAgICAgICAgICBjYXNlIFwiZXN0aW1hdGVHYXNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgcHJvdmlkZXIuZXN0aW1hdGVHYXMocmVxLnRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRCYWxhbmNlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLmdldEJhbGFuY2UocmVxLmFkZHJlc3MsIHJlcS5ibG9ja1RhZyk7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0QmxvY2tcIjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gKFwiYmxvY2tIYXNoXCIgaW4gcmVxKSA/IHJlcS5ibG9ja0hhc2ggOiByZXEuYmxvY2tUYWc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLmdldEJsb2NrKGJsb2NrLCByZXEuaW5jbHVkZVRyYW5zYWN0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwiZ2V0QmxvY2tOdW1iZXJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgcHJvdmlkZXIuZ2V0QmxvY2tOdW1iZXIoKTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRDb2RlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLmdldENvZGUocmVxLmFkZHJlc3MsIHJlcS5ibG9ja1RhZyk7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0R2FzUHJpY2VcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gKGF3YWl0IHByb3ZpZGVyLmdldEZlZURhdGEoKSkuZ2FzUHJpY2U7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0UHJpb3JpdHlGZWVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gKGF3YWl0IHByb3ZpZGVyLmdldEZlZURhdGEoKSkubWF4UHJpb3JpdHlGZWVQZXJHYXM7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0TG9nc1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBwcm92aWRlci5nZXRMb2dzKHJlcS5maWx0ZXIpO1xuICAgICAgICAgICAgY2FzZSBcImdldFN0b3JhZ2VcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgcHJvdmlkZXIuZ2V0U3RvcmFnZShyZXEuYWRkcmVzcywgcmVxLnBvc2l0aW9uLCByZXEuYmxvY2tUYWcpO1xuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLmdldFRyYW5zYWN0aW9uKHJlcS5oYXNoKTtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRUcmFuc2FjdGlvbkNvdW50XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLmdldFRyYW5zYWN0aW9uQ291bnQocmVxLmFkZHJlc3MsIHJlcS5ibG9ja1RhZyk7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLmdldFRyYW5zYWN0aW9uUmVjZWlwdChyZXEuaGFzaCk7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0VHJhbnNhY3Rpb25SZXN1bHRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgcHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb25SZXN1bHQocmVxLmhhc2gpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEdyYWIgdGhlIG5leHQgKHJhbmRvbSkgY29uZmlnIHRoYXQgaXMgbm90IGFscmVhZHkgcGFydCBvZlxuICAgIC8vIHRoZSBydW5uaW5nIHNldFxuICAgICNnZXROZXh0Q29uZmlnKHJ1bm5pbmcpIHtcbiAgICAgICAgLy8gQFRPRE86IE1heWJlIGRvIGEgY2hlY2sgaGVyZSB0byBmYXZvdXIgKGhlYXZpbHkpIHByb3ZpZGVycyB0aGF0XG4gICAgICAgIC8vICAgICAgICBkbyBub3QgcmVxdWlyZSB3YWl0Rm9yU3luYyBhbmQgZGlzZmF2b3VyIHByb3ZpZGVycyB0aGF0XG4gICAgICAgIC8vICAgICAgICBzZWVtIGRvd24taXNoIG9yIGFyZSBiZWhhdmluZyBzbG93bHlcbiAgICAgICAgY29uc3QgY29uZmlncyA9IEFycmF5LmZyb20ocnVubmluZykubWFwKChyKSA9PiByLmNvbmZpZyk7XG4gICAgICAgIC8vIFNodWZmbGUgdGhlIHN0YXRlcywgc29ydGVkIGJ5IHByaW9yaXR5XG4gICAgICAgIGNvbnN0IGFsbENvbmZpZ3MgPSB0aGlzLiNjb25maWdzLnNsaWNlKCk7XG4gICAgICAgIHNodWZmbGUoYWxsQ29uZmlncyk7XG4gICAgICAgIGFsbENvbmZpZ3Muc29ydCgoYSwgYikgPT4gKGEucHJpb3JpdHkgLSBiLnByaW9yaXR5KSk7XG4gICAgICAgIGZvciAoY29uc3QgY29uZmlnIG9mIGFsbENvbmZpZ3MpIHtcbiAgICAgICAgICAgIGlmIChjb25maWcuX2xhc3RGYXRhbEVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlncy5pbmRleE9mKGNvbmZpZykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gQWRkcyBhIG5ldyBydW5uZXIgKGlmIGF2YWlsYWJsZSkgdG8gcnVubmluZy5cbiAgICAjYWRkUnVubmVyKHJ1bm5pbmcsIHJlcSkge1xuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLiNnZXROZXh0Q29uZmlnKHJ1bm5pbmcpO1xuICAgICAgICAvLyBObyBydW5uZXJzIGF2YWlsYWJsZVxuICAgICAgICBpZiAoY29uZmlnID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBydW5uZXJcbiAgICAgICAgY29uc3QgcnVubmVyID0ge1xuICAgICAgICAgICAgY29uZmlnLCByZXN1bHQ6IG51bGwsIGRpZEJ1bXA6IGZhbHNlLFxuICAgICAgICAgICAgcGVyZm9ybTogbnVsbCwgc3RhbGxlcjogbnVsbFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBub3cgPSBnZXRUaW1lKCk7XG4gICAgICAgIC8vIFN0YXJ0IHBlcmZvcm1pbmcgdGhpcyBvcGVyYXRpb25cbiAgICAgICAgcnVubmVyLnBlcmZvcm0gPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25maWcucmVxdWVzdHMrKztcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLl90cmFuc2xhdGVQZXJmb3JtKGNvbmZpZy5wcm92aWRlciwgcmVxKTtcbiAgICAgICAgICAgICAgICBydW5uZXIucmVzdWx0ID0geyByZXN1bHQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5lcnJvclJlc3BvbnNlcysrO1xuICAgICAgICAgICAgICAgIHJ1bm5lci5yZXN1bHQgPSB7IGVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkdCA9IChnZXRUaW1lKCkgLSBub3cpO1xuICAgICAgICAgICAgY29uZmlnLl90b3RhbFRpbWUgKz0gZHQ7XG4gICAgICAgICAgICBjb25maWcucm9sbGluZ0R1cmF0aW9uID0gMC45NSAqIGNvbmZpZy5yb2xsaW5nRHVyYXRpb24gKyAwLjA1ICogZHQ7XG4gICAgICAgICAgICBydW5uZXIucGVyZm9ybSA9IG51bGw7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIC8vIFN0YXJ0IGEgc3RhbGxlcjsgd2hlbiB0aGlzIHRpbWVzIG91dCwgaXQncyB0aW1lIHRvIGZvcmNlXG4gICAgICAgIC8vIGtpY2tpbmcgb2ZmIGFub3RoZXIgcnVubmVyIGJlY2F1c2Ugd2UgYXJlIHRha2luZyB0b28gbG9uZ1xuICAgICAgICBydW5uZXIuc3RhbGxlciA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCBzdGFsbChjb25maWcuc3RhbGxUaW1lb3V0KTtcbiAgICAgICAgICAgIHJ1bm5lci5zdGFsbGVyID0gbnVsbDtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgcnVubmluZy5hZGQocnVubmVyKTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICB9XG4gICAgLy8gSW5pdGlhbGl6ZXMgdGhlIGJsb2NrTnVtYmVyIGFuZCBuZXR3b3JrIGZvciBlYWNoIHJ1bm5lciBhbmRcbiAgICAvLyBibG9ja3MgdW50aWwgaW5pdGlhbGl6ZWRcbiAgICBhc3luYyAjaW5pdGlhbFN5bmMoKSB7XG4gICAgICAgIGxldCBpbml0aWFsU3luYyA9IHRoaXMuI2luaXRpYWxTeW5jUHJvbWlzZTtcbiAgICAgICAgaWYgKCFpbml0aWFsU3luYykge1xuICAgICAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuI2NvbmZpZ3MuZm9yRWFjaCgoY29uZmlnKSA9PiB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaCgoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB3YWl0Rm9yU3luYyhjb25maWcsIDApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbmZpZy5fbGFzdEZhdGFsRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5fbmV0d29yayA9IGF3YWl0IGNvbmZpZy5wcm92aWRlci5nZXROZXR3b3JrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy4jaW5pdGlhbFN5bmNQcm9taXNlID0gaW5pdGlhbFN5bmMgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFdhaXQgZm9yIGFsbCBwcm92aWRlcnMgdG8gaGF2ZSBhIGJsb2NrIG51bWJlciBhbmQgbmV0d29ya1xuICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBhbGwgdGhlIG5ldHdvcmtzIG1hdGNoXG4gICAgICAgICAgICAgICAgbGV0IGNoYWluSWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY29uZmlnIG9mIHRoaXMuI2NvbmZpZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5fbGFzdEZhdGFsRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ldHdvcmsgPSAoY29uZmlnLl9uZXR3b3JrKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYWluSWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhaW5JZCA9IG5ldHdvcmsuY2hhaW5JZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChuZXR3b3JrLmNoYWluSWQgIT09IGNoYWluSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydChmYWxzZSwgXCJjYW5ub3QgbWl4IHByb3ZpZGVycyBvbiBkaWZmZXJlbnQgbmV0d29ya3NcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJuZXcgRmFsbGJhY2tQcm92aWRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgaW5pdGlhbFN5bmM7XG4gICAgfVxuICAgIGFzeW5jICNjaGVja1F1b3J1bShydW5uaW5nLCByZXEpIHtcbiAgICAgICAgLy8gR2V0IGFsbCB0aGUgcmVzdWx0IG9iamVjdHNcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHJ1bm5lciBvZiBydW5uaW5nKSB7XG4gICAgICAgICAgICBpZiAocnVubmVyLnJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB0YWcsIHZhbHVlIH0gPSBub3JtYWxpemVSZXN1bHQocnVubmVyLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHsgdGFnLCB2YWx1ZSwgd2VpZ2h0OiBydW5uZXIuY29uZmlnLndlaWdodCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBcmUgdGhlcmUgZW5vdWdoIHJlc3VsdHMgdG8gZXZlbnQgbWVldCBxdW9ydW0/XG4gICAgICAgIGlmIChyZXN1bHRzLnJlZHVjZSgoYSwgcikgPT4gKGEgKyByLndlaWdodCksIDApIDwgdGhpcy5xdW9ydW0pIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChyZXEubWV0aG9kKSB7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0QmxvY2tOdW1iZXJcIjoge1xuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gZ2V0IHRoZSBib290c3RyYXAgYmxvY2sgaGVpZ2h0XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI2hlaWdodCA9PT0gLTIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jaGVpZ2h0ID0gTWF0aC5jZWlsKGdldE51bWJlcihnZXRNZWRpYW4odGhpcy5xdW9ydW0sIHRoaXMuI2NvbmZpZ3MuZmlsdGVyKChjKSA9PiAoIWMuX2xhc3RGYXRhbEVycm9yKSkubWFwKChjKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGMuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWc6IGdldE51bWJlcihjLmJsb2NrTnVtYmVyKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiBjLndlaWdodFxuICAgICAgICAgICAgICAgICAgICB9KSkpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIG1vZGUgYWNyb3NzIGFsbCB0aGUgcHJvdmlkZXJzLCBhbGxvd2luZyBmb3JcbiAgICAgICAgICAgICAgICAvLyBhIGxpdHRsZSBkcmlmdCBiZXR3ZWVuIGJsb2NrIGhlaWdodHNcbiAgICAgICAgICAgICAgICBjb25zdCBtb2RlID0gZ2V0RnV6enlNb2RlKHRoaXMucXVvcnVtLCByZXN1bHRzKTtcbiAgICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtb2RlID4gdGhpcy4jaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2hlaWdodCA9IG1vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiNoZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwiZ2V0R2FzUHJpY2VcIjpcbiAgICAgICAgICAgIGNhc2UgXCJnZXRQcmlvcml0eUZlZVwiOlxuICAgICAgICAgICAgY2FzZSBcImVzdGltYXRlR2FzXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE1lZGlhbih0aGlzLnF1b3J1bSwgcmVzdWx0cyk7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0QmxvY2tcIjpcbiAgICAgICAgICAgICAgICAvLyBQZW5kaW5nIGJsb2NrcyBhcmUgaW4gdGhlIG1lbXBvb2wgYW5kIGFscmVhZHlcbiAgICAgICAgICAgICAgICAvLyBxdWl0ZSB1bnRydXN0d29ydGh5OyBqdXN0IGdyYWIgYW55dGhpbmdcbiAgICAgICAgICAgICAgICBpZiAoXCJibG9ja1RhZ1wiIGluIHJlcSAmJiByZXEuYmxvY2tUYWcgPT09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRBbnlSZXN1bHQodGhpcy5xdW9ydW0sIHJlc3VsdHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2hlY2tRdW9ydW0odGhpcy5xdW9ydW0sIHJlc3VsdHMpO1xuICAgICAgICAgICAgY2FzZSBcImNhbGxcIjpcbiAgICAgICAgICAgIGNhc2UgXCJjaGFpbklkXCI6XG4gICAgICAgICAgICBjYXNlIFwiZ2V0QmFsYW5jZVwiOlxuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uQ291bnRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJnZXRDb2RlXCI6XG4gICAgICAgICAgICBjYXNlIFwiZ2V0U3RvcmFnZVwiOlxuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uXCI6XG4gICAgICAgICAgICBjYXNlIFwiZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCI6XG4gICAgICAgICAgICBjYXNlIFwiZ2V0TG9nc1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBjaGVja1F1b3J1bSh0aGlzLnF1b3J1bSwgcmVzdWx0cyk7XG4gICAgICAgICAgICBjYXNlIFwiYnJvYWRjYXN0VHJhbnNhY3Rpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QW55UmVzdWx0KHRoaXMucXVvcnVtLCByZXN1bHRzKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnQoZmFsc2UsIFwidW5zdXBwb3J0ZWQgbWV0aG9kXCIsIFwiVU5TVVBQT1JURURfT1BFUkFUSU9OXCIsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogYF9wZXJmb3JtKCR7c3RyaW5naWZ5KHJlcS5tZXRob2QpfSlgXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyAjd2FpdEZvclF1b3J1bShydW5uaW5nLCByZXEpIHtcbiAgICAgICAgaWYgKHJ1bm5pbmcuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8gcnVubmVycz8hXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFueSBwcm9taXNlcyB0aGF0IGFyZSBpbnRlcmVzdGluZyB0byB3YXRjaCBmb3I7IGFuIGV4cGlyZWQgc3RhbGxcbiAgICAgICAgLy8gb3IgYSBzdWNjZXNzZnVsIHBlcmZvcm1cbiAgICAgICAgY29uc3QgaW50ZXJlc3RpbmcgPSBbXTtcbiAgICAgICAgbGV0IG5ld1J1bm5lcnMgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IHJ1bm5lciBvZiBydW5uaW5nKSB7XG4gICAgICAgICAgICAvLyBObyByZXNwb25zZXMsIHlldDsga2VlcCBhbiBleWUgb24gaXRcbiAgICAgICAgICAgIGlmIChydW5uZXIucGVyZm9ybSkge1xuICAgICAgICAgICAgICAgIGludGVyZXN0aW5nLnB1c2gocnVubmVyLnBlcmZvcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU3RpbGwgc3RhbGxpbmcuLi5cbiAgICAgICAgICAgIGlmIChydW5uZXIuc3RhbGxlcikge1xuICAgICAgICAgICAgICAgIGludGVyZXN0aW5nLnB1c2gocnVubmVyLnN0YWxsZXIpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhpcyBydW5uZXIgaGFzIGFscmVhZHkgdHJpZ2dlcmVkIGFub3RoZXIgcnVubmVyXG4gICAgICAgICAgICBpZiAocnVubmVyLmRpZEJ1bXApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEdvdCBhIHJlc3BvbnNlIChyZXN1bHQgb3IgZXJyb3IpIG9yIHN0YWxsZWQ7IGtpY2sgb2ZmIGFub3RoZXIgcnVubmVyXG4gICAgICAgICAgICBydW5uZXIuZGlkQnVtcCA9IHRydWU7XG4gICAgICAgICAgICBuZXdSdW5uZXJzKys7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSByZWFjaGVkIHF1b3J1bSBvbiBhIHJlc3VsdCAob3IgZXJyb3IpXG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgdGhpcy4jY2hlY2tRdW9ydW0ocnVubmluZywgcmVxKTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIGFueSBuZXcgcnVubmVycywgYmVjYXVzZSBhIHN0YWxsZXIgdGltZWQgb3V0IG9yIGEgcmVzdWx0XG4gICAgICAgIC8vIG9yIGVycm9yIHJlc3BvbnNlIGNhbWUgaW4uXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3UnVubmVyczsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLiNhZGRSdW5uZXIocnVubmluZywgcmVxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbGwgcHJvdmlkZXJzIGhhdmUgcmV0dXJuZWQsIGFuZCB3ZSBoYXZlIG5vIHJlc3VsdFxuICAgICAgICBhc3NlcnQoaW50ZXJlc3RpbmcubGVuZ3RoID4gMCwgXCJxdW9ydW0gbm90IG1ldFwiLCBcIlNFUlZFUl9FUlJPUlwiLCB7XG4gICAgICAgICAgICByZXF1ZXN0OiBcIiVzdWItcmVxdWVzdHNcIixcbiAgICAgICAgICAgIGluZm86IHsgcmVxdWVzdDogcmVxLCByZXN1bHRzOiBBcnJheS5mcm9tKHJ1bm5pbmcpLm1hcCgocikgPT4gc3RyaW5naWZ5KHIucmVzdWx0KSkgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gV2FpdCBmb3Igc29tZW9uZSB0byBlaXRoZXIgY29tcGxldGUgaXRzIHBlcmZvcm0gb3Igc3RhbGwgb3V0XG4gICAgICAgIGF3YWl0IFByb21pc2UucmFjZShpbnRlcmVzdGluZyk7XG4gICAgICAgIC8vIFRoaXMgaXMgcmVjdXJzaXZlLCBidXQgYXQgd29yc3QgY2FzZSB0aGUgZGVwdGggaXMgMnggdGhlXG4gICAgICAgIC8vIG51bWJlciBvZiBwcm92aWRlcnMgKGVhY2ggaGFzIGEgcGVyZm9ybSBhbmQgYSBzdGFsbGVyKVxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy4jd2FpdEZvclF1b3J1bShydW5uaW5nLCByZXEpO1xuICAgIH1cbiAgICBhc3luYyBfcGVyZm9ybShyZXEpIHtcbiAgICAgICAgLy8gQnJvYWRjYXN0aW5nIGEgdHJhbnNhY3Rpb24gaXMgcmFyZSAoaXNoKSBhbmQgYWxyZWFkeSBpbmN1cnNcbiAgICAgICAgLy8gYSBjb3N0IG9uIHRoZSB1c2VyLCBzbyBzcGFtbWluZyBpcyBzYWZlLWlzaC4gSnVzdCBzZW5kIGl0IHRvXG4gICAgICAgIC8vIGV2ZXJ5IGJhY2tlbmQuXG4gICAgICAgIGlmIChyZXEubWV0aG9kID09PSBcImJyb2FkY2FzdFRyYW5zYWN0aW9uXCIpIHtcbiAgICAgICAgICAgIC8vIE9uY2UgYW55IGJyb2FkY2FzdCBwcm92aWRlcyBhIHBvc2l0aXZlIHJlc3VsdCwgdXNlIGl0LiBOb1xuICAgICAgICAgICAgLy8gbmVlZCB0byB3YWl0IGZvciBhbnlvbmUgZWxzZVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IHRoaXMuI2NvbmZpZ3MubWFwKChjKSA9PiBudWxsKTtcbiAgICAgICAgICAgIGNvbnN0IGJyb2FkY2FzdHMgPSB0aGlzLiNjb25maWdzLm1hcChhc3luYyAoeyBwcm92aWRlciwgd2VpZ2h0IH0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvdmlkZXIuX3BlcmZvcm0ocmVxKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1tpbmRleF0gPSBPYmplY3QuYXNzaWduKG5vcm1hbGl6ZVJlc3VsdCh7IHJlc3VsdCB9KSwgeyB3ZWlnaHQgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IE9iamVjdC5hc3NpZ24obm9ybWFsaXplUmVzdWx0KHsgZXJyb3IgfSksIHsgd2VpZ2h0IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gQXMgZWFjaCBwcm9taXNlIGZpbmlzaGVzLi4uXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBhIHZhbGlkIGJyb2FkY2FzdCByZXN1bHRcbiAgICAgICAgICAgICAgICBjb25zdCBkb25lID0gcmVzdWx0cy5maWx0ZXIoKHIpID0+IChyICE9IG51bGwpKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHsgdmFsdWUgfSBvZiBkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGEgbGVnaXQgYnJvYWRjYXN0IGVycm9yIChvbmUgd2hpY2ggd2UgY2Fubm90XG4gICAgICAgICAgICAgICAgLy8gcmVjb3ZlciBmcm9tOyBzb21lIG5vZGVzIG1heSByZXR1cm4gdGhlIGZvbGxvd2luZyByZWRcbiAgICAgICAgICAgICAgICAvLyBoZXJyaW5nIGV2ZW50czpcbiAgICAgICAgICAgICAgICAvLyAtIGFscmVkeSBzZWVuZCAoVU5LTk9XTl9FUlJPUilcbiAgICAgICAgICAgICAgICAvLyAtIE5PTkNFX0VYUElSRURcbiAgICAgICAgICAgICAgICAvLyAtIFJFUExBQ0VNRU5UX1VOREVSUFJJQ0VEXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2hlY2tRdW9ydW0odGhpcy5xdW9ydW0sIHJlc3VsdHMuZmlsdGVyKChyKSA9PiAociAhPSBudWxsKSkpO1xuICAgICAgICAgICAgICAgIGlmIChpc0Vycm9yKHJlc3VsdCwgXCJJTlNVRkZJQ0lFTlRfRlVORFNcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBLaWNrIG9mZiB0aGUgbmV4dCBwcm92aWRlciAoaWYgYW55KVxuICAgICAgICAgICAgICAgIGNvbnN0IHdhaXRpbmcgPSBicm9hZGNhc3RzLmZpbHRlcigoYiwgaSkgPT4gKHJlc3VsdHNbaV0gPT0gbnVsbCkpO1xuICAgICAgICAgICAgICAgIGlmICh3YWl0aW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5yYWNlKHdhaXRpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXNlIHN0YW5kYXJkIHF1b3J1bSByZXN1bHRzOyBhbnkgcmVzdWx0IHdhcyByZXR1cm5lZCBhYm92ZSxcbiAgICAgICAgICAgIC8vIHNvIHRoaXMgd2lsbCBmaW5kIGFueSBlcnJvciB0aGF0IG1ldCBxdW9ydW0gaWYgYW55XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBnZXRBbnlSZXN1bHQodGhpcy5xdW9ydW0sIHJlc3VsdHMpO1xuICAgICAgICAgICAgYXNzZXJ0KHJlc3VsdCAhPT0gdW5kZWZpbmVkLCBcInByb2JsZW0gbXVsdGktYnJvYWRjYXN0aW5nXCIsIFwiU0VSVkVSX0VSUk9SXCIsIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0OiBcIiVzdWItcmVxdWVzdHNcIixcbiAgICAgICAgICAgICAgICBpbmZvOiB7IHJlcXVlc3Q6IHJlcSwgcmVzdWx0czogcmVzdWx0cy5tYXAoc3RyaW5naWZ5KSB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy4jaW5pdGlhbFN5bmMoKTtcbiAgICAgICAgLy8gQm9vdHN0cmFwIGVub3VnaCBydW5uZXJzIHRvIG1lZXQgcXVvcnVtXG4gICAgICAgIGNvbnN0IHJ1bm5pbmcgPSBuZXcgU2V0KCk7XG4gICAgICAgIGxldCBpbmZsaWdodFF1b3J1bSA9IDA7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBydW5uZXIgPSB0aGlzLiNhZGRSdW5uZXIocnVubmluZywgcmVxKTtcbiAgICAgICAgICAgIGlmIChydW5uZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5mbGlnaHRRdW9ydW0gKz0gcnVubmVyLmNvbmZpZy53ZWlnaHQ7XG4gICAgICAgICAgICBpZiAoaW5mbGlnaHRRdW9ydW0gPj0gdGhpcy5xdW9ydW0pIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLiN3YWl0Rm9yUXVvcnVtKHJ1bm5pbmcsIHJlcSk7XG4gICAgICAgIC8vIFRyYWNrIHJlcXVlc3RzIHNlbnQgdG8gYSBwcm92aWRlciB0aGF0IGFyZSBzdGlsbFxuICAgICAgICAvLyBvdXRzdGFuZGluZyBhZnRlciBxdW9ydW0gaGFzIGJlZW4gb3RoZXJ3aXNlIGZvdW5kXG4gICAgICAgIGZvciAoY29uc3QgcnVubmVyIG9mIHJ1bm5pbmcpIHtcbiAgICAgICAgICAgIGlmIChydW5uZXIucGVyZm9ybSAmJiBydW5uZXIucmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBydW5uZXIuY29uZmlnLmxhdGVSZXNwb25zZXMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3luYyBkZXN0cm95KCkge1xuICAgICAgICBmb3IgKGNvbnN0IHsgcHJvdmlkZXIgfSBvZiB0aGlzLiNjb25maWdzKSB7XG4gICAgICAgICAgICBwcm92aWRlci5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLWZhbGxiYWNrLmpzLm1hcCIsImltcG9ydCB7IGFzc2VydCB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgQW5rclByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItYW5rci5qc1wiO1xuaW1wb3J0IHsgQWxjaGVteVByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItYWxjaGVteS5qc1wiO1xuaW1wb3J0IHsgQ2xvdWRmbGFyZVByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItY2xvdWRmbGFyZS5qc1wiO1xuaW1wb3J0IHsgRXRoZXJzY2FuUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci1ldGhlcnNjYW4uanNcIjtcbmltcG9ydCB7IEluZnVyYVByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItaW5mdXJhLmpzXCI7XG4vL2ltcG9ydCB7IFBvY2tldFByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXItcG9ja2V0LmpzXCI7XG5pbXBvcnQgeyBRdWlja05vZGVQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyLXF1aWNrbm9kZS5qc1wiO1xuaW1wb3J0IHsgRmFsbGJhY2tQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyLWZhbGxiYWNrLmpzXCI7XG5pbXBvcnQgeyBKc29uUnBjUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci1qc29ucnBjLmpzXCI7XG5pbXBvcnQgeyBOZXR3b3JrIH0gZnJvbSBcIi4vbmV0d29yay5qc1wiO1xuaW1wb3J0IHsgV2ViU29ja2V0UHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci13ZWJzb2NrZXQuanNcIjtcbmZ1bmN0aW9uIGlzV2ViU29ja2V0TGlrZSh2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdHlwZW9mICh2YWx1ZS5zZW5kKSA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgIHR5cGVvZiAodmFsdWUuY2xvc2UpID09PSBcImZ1bmN0aW9uXCIpO1xufVxuY29uc3QgVGVzdG5ldHMgPSBcImdvZXJsaSBrb3ZhbiBzZXBvbGlhIGNsYXNzaWNLb3R0aSBvcHRpbWlzbS1nb2VybGkgYXJiaXRydW0tZ29lcmxpIG1hdGljLW11bWJhaSBibmJ0XCIuc3BsaXQoXCIgXCIpO1xuLyoqXG4gKiAgUmV0dXJucyBhIGRlZmF1bHQgcHJvdmlkZXIgZm9yICUlbmV0d29yayUlLlxuICpcbiAqICBJZiAlJW5ldHdvcmslJSBpcyBhIFtbV2ViU29ja2V0TGlrZV1dIG9yIHN0cmluZyB0aGF0IGJlZ2lucyB3aXRoXG4gKiAgYGBcIndzOlwiYGAgb3IgYGBcIndzczpcImBgLCBhIFtbV2ViU29ja2V0UHJvdmlkZXJdXSBpcyByZXR1cm5lZCBiYWNrZWRcbiAqICBieSB0aGF0IFdlYlNvY2tldCBvciBVUkwuXG4gKlxuICogIElmICUlbmV0d29yayUlIGlzIGEgc3RyaW5nIHRoYXQgYmVnaW5zIHdpdGggYGBcIkhUVFA6XCJgYCBvciBgYFwiSFRUUFM6XCJgYCxcbiAqICBhIFtbSnNvblJwY1Byb3ZpZGVyXV0gaXMgcmV0dXJuZWQgY29ubmVjdGVkIHRvIHRoYXQgVVJMLlxuICpcbiAqICBPdGhlcndpc2UsIGEgZGVmYXVsdCBwcm92aWRlciBpcyBjcmVhdGVkIGJhY2tlZCBieSB3ZWxsLWtub3duIHB1YmxpY1xuICogIFdlYjMgYmFja2VuZHMgKHN1Y2ggYXMgW1tsaW5rLWluZnVyYV1dKSB1c2luZyBjb21tdW5pdHktcHJvdmlkZWQgQVBJXG4gKiAga2V5cy5cbiAqXG4gKiAgVGhlICUlb3B0aW9ucyUlIGFsbG93cyBzcGVjaWZ5aW5nIGN1c3RvbSBBUEkga2V5cyBwZXIgYmFja2VuZCAoc2V0dGluZ1xuICogIGFuIEFQSSBrZXkgdG8gYGBcIi1cImBgIHdpbGwgb21pdCB0aGF0IHByb3ZpZGVyKSBhbmQgYGBvcHRpb25zLmV4Y2x1c2l2ZWBgXG4gKiAgY2FuIGJlIHNldCB0byBlaXRoZXIgYSBiYWNrZW5kIG5hbWUgb3IgYW5kIGFycmF5IG9mIGJhY2tlbmQgbmFtZXMsIHdoaWNoXG4gKiAgd2lsbCB3aGl0ZWxpc3QgKipvbmx5KiogdGhvc2UgYmFja2VuZHMuXG4gKlxuICogIEN1cnJlbnQgYmFja2VuZCBzdHJpbmdzIHN1cHBvcnRlZCBhcmU6XG4gKiAgLSBgYFwiYWxjaGVteVwiYGBcbiAqICAtIGBgXCJhbmtyXCJgYFxuICogIC0gYGBcImNsb3VkZmxhcmVcImBgXG4gKiAgLSBgYFwiZXRoZXJzY2FuXCJgYFxuICogIC0gYGBcImluZnVyYVwiYGBcbiAqICAtIGBgXCJwdWJsaWNQb2x5Z29uXCJgYFxuICogIC0gYGBcInF1aWNrbm9kZVwiYGBcbiAqXG4gKiAgQGV4YW1wbGU6XG4gKiAgICAvLyBDb25uZWN0IHRvIGEgbG9jYWwgR2V0aCBub2RlXG4gKiAgICBwcm92aWRlciA9IGdldERlZmF1bHRQcm92aWRlcihcImh0dHA6Ly9sb2NhbGhvc3Q6ODU0NS9cIik7XG4gKlxuICogICAgLy8gQ29ubmVjdCB0byBFdGhlcmV1bSBtYWlubmV0IHdpdGggYW55IGN1cnJlbnQgYW5kIGZ1dHVyZVxuICogICAgLy8gdGhpcmQtcGFydHkgc2VydmljZXMgYXZhaWxhYmxlXG4gKiAgICBwcm92aWRlciA9IGdldERlZmF1bHRQcm92aWRlcihcIm1haW5uZXRcIik7XG4gKlxuICogICAgLy8gQ29ubmVjdCB0byBQb2x5Z29uLCBidXQgb25seSBhbGxvdyBFdGhlcnNjYW4gYW5kXG4gKiAgICAvLyBJTkZVUkEgYW5kIHVzZSBcIk1ZX0FQSV9LRVlcIiBpbiBjYWxscyB0byBFdGhlcnNjYW4uXG4gKiAgICBwcm92aWRlciA9IGdldERlZmF1bHRQcm92aWRlcihcIm1hdGljXCIsIHtcbiAqICAgICAgZXRoZXJzY2FuOiBcIk1ZX0FQSV9LRVlcIixcbiAqICAgICAgZXhjbHVzaXZlOiBbIFwiZXRoZXJzY2FuXCIsIFwiaW5mdXJhXCIgXVxuICogICAgfSk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0UHJvdmlkZXIobmV0d29yaywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBhbGxvd1NlcnZpY2UgPSAobmFtZSkgPT4ge1xuICAgICAgICBpZiAob3B0aW9uc1tuYW1lXSA9PT0gXCItXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChvcHRpb25zLmV4Y2x1c2l2ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiAobmFtZSA9PT0gb3B0aW9ucy5leGNsdXNpdmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMuZXhjbHVzaXZlKSkge1xuICAgICAgICAgICAgcmV0dXJuIChvcHRpb25zLmV4Y2x1c2l2ZS5pbmRleE9mKG5hbWUpICE9PSAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIChuZXR3b3JrKSA9PT0gXCJzdHJpbmdcIiAmJiBuZXR3b3JrLm1hdGNoKC9eaHR0cHM/Oi8pKSB7XG4gICAgICAgIHJldHVybiBuZXcgSnNvblJwY1Byb3ZpZGVyKG5ldHdvcmspO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChuZXR3b3JrKSA9PT0gXCJzdHJpbmdcIiAmJiBuZXR3b3JrLm1hdGNoKC9ed3NzPzovKSB8fCBpc1dlYlNvY2tldExpa2UobmV0d29yaykpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBXZWJTb2NrZXRQcm92aWRlcihuZXR3b3JrKTtcbiAgICB9XG4gICAgLy8gR2V0IHRoZSBuZXR3b3JrIGFuZCBuYW1lLCBpZiBwb3NzaWJsZVxuICAgIGxldCBzdGF0aWNOZXR3b3JrID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgICBzdGF0aWNOZXR3b3JrID0gTmV0d29yay5mcm9tKG5ldHdvcmspO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIGNvbnN0IHByb3ZpZGVycyA9IFtdO1xuICAgIGlmIChhbGxvd1NlcnZpY2UoXCJwdWJsaWNQb2x5Z29uXCIpICYmIHN0YXRpY05ldHdvcmspIHtcbiAgICAgICAgaWYgKHN0YXRpY05ldHdvcmsubmFtZSA9PT0gXCJtYXRpY1wiKSB7XG4gICAgICAgICAgICBwcm92aWRlcnMucHVzaChuZXcgSnNvblJwY1Byb3ZpZGVyKFwiaHR0cHM6L1xcL3BvbHlnb24tcnBjLmNvbS9cIiwgc3RhdGljTmV0d29yaywgeyBzdGF0aWNOZXR3b3JrIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWxsb3dTZXJ2aWNlKFwiYWxjaGVteVwiKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2gobmV3IEFsY2hlbXlQcm92aWRlcihuZXR3b3JrLCBvcHRpb25zLmFsY2hlbXkpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIH1cbiAgICBpZiAoYWxsb3dTZXJ2aWNlKFwiYW5rclwiKSAmJiBvcHRpb25zLmFua3IgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2gobmV3IEFua3JQcm92aWRlcihuZXR3b3JrLCBvcHRpb25zLmFua3IpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIH1cbiAgICBpZiAoYWxsb3dTZXJ2aWNlKFwiY2xvdWRmbGFyZVwiKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2gobmV3IENsb3VkZmxhcmVQcm92aWRlcihuZXR3b3JrKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICB9XG4gICAgaWYgKGFsbG93U2VydmljZShcImV0aGVyc2NhblwiKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2gobmV3IEV0aGVyc2NhblByb3ZpZGVyKG5ldHdvcmssIG9wdGlvbnMuZXRoZXJzY2FuKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICB9XG4gICAgaWYgKGFsbG93U2VydmljZShcImluZnVyYVwiKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHByb2plY3RJZCA9IG9wdGlvbnMuaW5mdXJhO1xuICAgICAgICAgICAgbGV0IHByb2plY3RTZWNyZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAodHlwZW9mIChwcm9qZWN0SWQpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgcHJvamVjdFNlY3JldCA9IHByb2plY3RJZC5wcm9qZWN0U2VjcmV0O1xuICAgICAgICAgICAgICAgIHByb2plY3RJZCA9IHByb2plY3RJZC5wcm9qZWN0SWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm92aWRlcnMucHVzaChuZXcgSW5mdXJhUHJvdmlkZXIobmV0d29yaywgcHJvamVjdElkLCBwcm9qZWN0U2VjcmV0KSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICB9XG4gICAgLypcbiAgICAgICAgaWYgKG9wdGlvbnMucG9ja2V0ICE9PSBcIi1cIikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgYXBwSWQgPSBvcHRpb25zLnBvY2tldDtcbiAgICAgICAgICAgICAgICBsZXQgc2VjcmV0S2V5OiB1bmRlZmluZWQgfCBzdHJpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgbGV0IGxvYWRCYWxhbmNlcjogdW5kZWZpbmVkIHwgYm9vbGVhbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGFwcElkKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgICAgICBsb2FkQmFsYW5jZXIgPSAhIWFwcElkLmxvYWRCYWxhbmNlcjtcbiAgICAgICAgICAgICAgICAgICAgc2VjcmV0S2V5ID0gYXBwSWQuc2VjcmV0S2V5O1xuICAgICAgICAgICAgICAgICAgICBhcHBJZCA9IGFwcElkLmFwcElkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm92aWRlcnMucHVzaChuZXcgUG9ja2V0UHJvdmlkZXIobmV0d29yaywgYXBwSWQsIHNlY3JldEtleSwgbG9hZEJhbGFuY2VyKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikgeyBjb25zb2xlLmxvZyhlcnJvcik7IH1cbiAgICAgICAgfVxuICAgICovXG4gICAgaWYgKGFsbG93U2VydmljZShcInF1aWNrbm9kZVwiKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHRva2VuID0gb3B0aW9ucy5xdWlja25vZGU7XG4gICAgICAgICAgICBwcm92aWRlcnMucHVzaChuZXcgUXVpY2tOb2RlUHJvdmlkZXIobmV0d29yaywgdG9rZW4pKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIH1cbiAgICBhc3NlcnQocHJvdmlkZXJzLmxlbmd0aCwgXCJ1bnN1cHBvcnRlZCBkZWZhdWx0IG5ldHdvcmtcIiwgXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIiwge1xuICAgICAgICBvcGVyYXRpb246IFwiZ2V0RGVmYXVsdFByb3ZpZGVyXCJcbiAgICB9KTtcbiAgICAvLyBObyBuZWVkIGZvciBhIEZhbGxiYWNrUHJvdmlkZXJcbiAgICBpZiAocHJvdmlkZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcHJvdmlkZXJzWzBdO1xuICAgIH1cbiAgICAvLyBXZSB1c2UgdGhlIGZsb29yIGJlY2F1c2UgcHVibGljIHRoaXJkLXBhcnR5IHByb3ZpZGVycyBjYW4gYmUgdW5yZWxpYWJsZSxcbiAgICAvLyBzbyBhIGxvdyBudW1iZXIgb2YgcHJvdmlkZXJzIHdpdGggYSBsYXJnZSBxdW9ydW0gd2lsbCBmYWlsIHRvbyBvZnRlblxuICAgIGxldCBxdW9ydW0gPSBNYXRoLmZsb29yKHByb3ZpZGVycy5sZW5ndGggLyAyKTtcbiAgICBpZiAocXVvcnVtID4gMikge1xuICAgICAgICBxdW9ydW0gPSAyO1xuICAgIH1cbiAgICAvLyBUZXN0bmV0cyBkb24ndCBuZWVkIGFzIHN0cm9uZyBhIHNlY3VyaXR5IGdhdXJhbnRlZSBhbmQgc3BlZWQgaXNcbiAgICAvLyBtb3JlIHVzZWZ1bCBkdXJpbmcgdGVzdGluZ1xuICAgIGlmIChzdGF0aWNOZXR3b3JrICYmIFRlc3RuZXRzLmluZGV4T2Yoc3RhdGljTmV0d29yay5uYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgcXVvcnVtID0gMTtcbiAgICB9XG4gICAgLy8gUHJvdmlkZWQgb3ZlcnJpZGUgcW9ydW0gdGFrZXMgcHJpb3JpdHlcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnF1b3J1bSkge1xuICAgICAgICBxdW9ydW0gPSBvcHRpb25zLnF1b3J1bTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBGYWxsYmFja1Byb3ZpZGVyKHByb3ZpZGVycywgdW5kZWZpbmVkLCB7IHF1b3J1bSB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHQtcHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgXG4gICAgQWJzdHJhY3RQcm92aWRlciwgQWRkcmVzc2FibGUsIENvbnRyYWN0LCBTaWduZXIsIGV0aGVycyBcbn0gZnJvbSBcImV0aGVyc1wiO1xuaW1wb3J0IHsgS2FuYWxvYUV0aGVycywgcmVxdWlyZUNvbm5lY3Rpb24gfSBmcm9tIFwiLi9rYW5hbG9hLWV0aGVyc1wiO1xuaW1wb3J0IEthbmFsb2FBZGRyZXNzQm9vayBmcm9tIFwia2FuYWxvYS1hZGRyZXNzLWJvb2suanNvblwiO1xuXG5jb25zdCBwcm9qZWN0RGF0YVN0cnVjdDogc3RyaW5nID0gXG4gICAgXCJhZGRyZXNzIHByb2plY3QsIGFkZHJlc3MgZGVwbG95ZXIsIHN0cmluZyBkZXNjcmlwdGlvblwiO1xuZXhwb3J0IGNvbnN0IFBST0pFQ1RfUkVHSVNUUllfQUREUkVTUzogc3RyaW5nID0gXG4gICAgS2FuYWxvYUFkZHJlc3NCb29rW1wiS2FuYWxvYVByb2plY3RSZWdpc3RyeVwiXTtcbmV4cG9ydCBjb25zdCBLQU5BX0FERFJFU1M6IHN0cmluZyA9IEthbmFsb2FBZGRyZXNzQm9va1tcIktBTkFcIl07XG5leHBvcnQgY29uc3QgUFJPSkVDVF9SRUdJU1RSWV9BQkkgPSBbXG4gICAgXCJmdW5jdGlvbiBuZXdQcm9qZWN0KFwiXG4gICAgICAgICsgXCJzdHJpbmcgcHJvamVjdE5hbWUsIHN0cmluZyBhYmJyZXZpYXRpb24sIFwiXG4gICAgICAgICsgXCJzdHJpbmcgZGVzY3JpcHRpb24sIGFkZHJlc3MgcGF5bWVudFwiXG4gICAgKyBcIikgcmV0dXJucyAoYWRkcmVzcylcIixcbiAgICBgZXZlbnQgUHJvamVjdERlcGxveWVkKCR7cHJvamVjdERhdGFTdHJ1Y3R9KWAsXG4gICAgYGZ1bmN0aW9uIGdldFByb2plY3Qoc3RyaW5nIG5hbWUpIHZpZXcgcmV0dXJucyAodHVwbGUoJHtwcm9qZWN0RGF0YVN0cnVjdH0pKWAsXG4gICAgYGZ1bmN0aW9uIG5ld0NvbnRyYWN0KGBcbiAgICAgICAgKyBgc3RyaW5nIG5hbWUsIHN0cmluZyBwcm9qZWN0LCBgXG4gICAgICAgICsgYHR1cGxlKGJ5dGVzMzIsIGJ5dGVzKVtdIGdlbmVzaXNNb2R1bGVzLCBhZGRyZXNzIHBheW1lbnRgXG4gICAgKyBgKSByZXR1cm5zIChhZGRyZXNzKWAsXG4gICAgYGZ1bmN0aW9uIG1vZGlmeUNvbnRyYWN0KGBcbiAgICAgICAgKyBgc3RyaW5nIHByb2plY3QsIGFkZHJlc3MgdGFyZ2V0LCBgXG4gICAgICAgICsgYHR1cGxlKHVpbnQ4LCB0dXBsZShieXRlczMyLCBieXRlcykpW10gbW9kdWxlT3BlcmF0aW9ucywgYFxuICAgICAgICArIGBhZGRyZXNzIHBheW1lbnRgXG4gICAgKyBgKWBcbl1cblxuXG5leHBvcnQgaW50ZXJmYWNlIFByb2plY3RDb25maWdQcm9wcyB7XG4gICAgcHJvamVjdE5hbWU6IHN0cmluZztcbiAgICBhYmJyZXZpYXRpb246IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb2plY3REYXRhIHtcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgcHJvamVjdDogc3RyaW5nO1xuICAgIGRlcGxveWVyOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gTW9kdWxlT3BzIHtcbiAgICBJTlNUQUxMID0gMCxcbiAgICBVTklOU1RBTEwgPSAxLFxuICAgIFVQR1JBREUgPSAyLFxuICAgIFJFSU5JVElBTElaRSA9IDNcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb2R1bGVQYXJhbWV0ZXJzIHtcbiAgICBtb2R1bGVTaWduYXR1cmU6IHN0cmluZyxcbiAgICBpbml0UGFyYW1zOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOZXdDb250cmFjdENvbmZpZ1Byb3BzIHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgcHJvamVjdDogc3RyaW5nLFxuICAgIGdlbmVzaXNNb2R1bGVzOiBNb2R1bGVQYXJhbWV0ZXJzW10sXG4gICAgcGF5bWVudDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kaWZ5Q29udHJhY3RQcm9wcyB7XG4gICAgcHJvamVjdDogc3RyaW5nLFxuICAgIHRhcmdldDogc3RyaW5nLFxuICAgIG1vZHVsZU9wZXJhdGlvbnM6IFtNb2R1bGVPcHMsIE1vZHVsZVBhcmFtZXRlcnNdW10sXG4gICAgcGF5bWVudDogc3RyaW5nXG59XG5cblxuZnVuY3Rpb24gZ2V0UmVnaXN0cnlDb250cmFjdChwcm92aWRlcjogU2lnbmVyIHwgQWJzdHJhY3RQcm92aWRlcik6IENvbnRyYWN0IHtcbiAgICByZXR1cm4gbmV3IENvbnRyYWN0KFxuICAgICAgICBQUk9KRUNUX1JFR0lTVFJZX0FERFJFU1MsXG4gICAgICAgIFBST0pFQ1RfUkVHSVNUUllfQUJJLCBcbiAgICAgICAgcHJvdmlkZXJcbiAgICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBuZXdQcm9qZWN0KFxuICAgIHBhcmFtczogUHJvamVjdENvbmZpZ1Byb3BzLCBzaWduZXI6IFNpZ25lclxuKTogUHJvbWlzZTxzdHJpbmcgfCBBZGRyZXNzYWJsZT4gIHtcbiAgICBjb25zdCBwcm9qZWN0UmVnaXN0cnkgPSBnZXRSZWdpc3RyeUNvbnRyYWN0KHNpZ25lcik7XG4gICAgY29uc3QgYWRkciA9IGF3YWl0IChcbiAgICAgICAgYXdhaXQgcHJvamVjdFJlZ2lzdHJ5Lm5ld1Byb2plY3QoXG4gICAgICAgICAgICBwYXJhbXMucHJvamVjdE5hbWUsXG4gICAgICAgICAgICBwYXJhbXMuYWJicmV2aWF0aW9uLFxuICAgICAgICAgICAgcGFyYW1zLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgS0FOQV9BRERSRVNTXG4gICAgICAgIClcbiAgICApLndhaXQoKS50aGVuKFxuICAgICAgICBhc3luYyAoKSA9PlxuICAgICAgICAgICAgKGF3YWl0IHByb2plY3RSZWdpc3RyeS5nZXRQcm9qZWN0KHBhcmFtcy5wcm9qZWN0TmFtZSkpLnByb2plY3RcbiAgICApO1xuXG4gICAgcmV0dXJuIGFkZHI7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBuZXdDb250cmFjdChcbiAgICBwYXJhbXM6IE5ld0NvbnRyYWN0Q29uZmlnUHJvcHMsXG4gICAgc2lnbmVyOiBTaWduZXJcbik6IFByb21pc2U8c3RyaW5nIHwgQWRkcmVzc2FibGU+IHtcbiAgICBjb25zdCBwcm9qZWN0UmVnaXN0cnkgPSBnZXRSZWdpc3RyeUNvbnRyYWN0KHNpZ25lcik7XG5cbiAgICBjb25zdCB0eCA9IGF3YWl0IChcbiAgICAgICAgYXdhaXQgcHJvamVjdFJlZ2lzdHJ5Lm5ld0NvbnRyYWN0KFxuICAgICAgICAgICAgcGFyYW1zLm5hbWUsXG4gICAgICAgICAgICBwYXJhbXMucHJvamVjdCxcbiAgICAgICAgICAgIHBhcmFtcy5nZW5lc2lzTW9kdWxlcy5tYXAoXG4gICAgICAgICAgICAgICAgKG0pID0+IFsgbS5tb2R1bGVTaWduYXR1cmUsIG0uaW5pdFBhcmFtcyBdXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgS2FuYWxvYUFkZHJlc3NCb29rLktBTkFcbiAgICAgICAgKVxuICAgICkud2FpdCgpO1xuXG4gICAgcmV0dXJuIHR4O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbW9kaWZ5Q29udHJhY3QoXG4gICAgcGFyYW1zOiBNb2RpZnlDb250cmFjdFByb3BzLFxuICAgIHNpZ25lcjogU2lnbmVyXG4pOiBQcm9taXNlPHN0cmluZyB8IEFkZHJlc3NhYmxlPiB7XG4gICAgY29uc3QgcHJvamVjdFJlZ2lzdHJ5ID0gZ2V0UmVnaXN0cnlDb250cmFjdChzaWduZXIpO1xuXG4gICAgY29uc3QgdHggPSBhd2FpdCAoXG4gICAgICAgIGF3YWl0IHByb2plY3RSZWdpc3RyeS5tb2RpZnlDb250cmFjdChcbiAgICAgICAgICAgIHBhcmFtcy5wcm9qZWN0LFxuICAgICAgICAgICAgcGFyYW1zLnRhcmdldCxcbiAgICAgICAgICAgIHBhcmFtcy5tb2R1bGVPcGVyYXRpb25zLm1hcChcbiAgICAgICAgICAgICAgICAobSkgPT4gW21bMF0sIFttWzFdLm1vZHVsZVNpZ25hdHVyZSwgbVsxXS5pbml0UGFyYW1zXV1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBLYW5hbG9hQWRkcmVzc0Jvb2suS0FOQVxuICAgICAgICApXG4gICAgKS53YWl0KCk7XG5cbiAgICByZXR1cm4gdHg7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQcm9qZWN0cyhcbiAgICBwcm92aWRlcjogQWJzdHJhY3RQcm92aWRlclxuKTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIGNvbnN0IGltcG9ydGVkUHJvamVjdHM6IFByb2plY3REYXRhW10gPSBcbiAgICAgICAgSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImthbmFsb2EuaW1wb3J0ZWRfcHJvamVjdHNcIikgfHwgXCJbXVwiKTtcblxuICAgIHJldHVybiBpbXBvcnRlZFByb2plY3RzO1xufVxuXG5leHBvcnQgY2xhc3MgUHJvamVjdFJlZ2lzdHJ5IHtcbiAgICBwYXJlbnQ6IEthbmFsb2FFdGhlcnM7XG4gICAgY29uc3RydWN0b3IocGFyZW50OiBLYW5hbG9hRXRoZXJzKSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIH1cblxuICAgIGFzeW5jIGdldFByb2plY3RzKCk6IFByb21pc2U8UHJvamVjdERhdGFbXT4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgZ2V0UHJvamVjdHModGhpcy5wYXJlbnQud2FsbGV0KTtcbiAgICB9XG5cbiAgICAvLyBSZXdvcmsgcmVxdWlyZWNvbm5lY3Rpb25cbiAgICAvL0ByZXF1aXJlQ29ubmVjdGlvblxuICAgIGFzeW5jIG5ld1Byb2plY3QocHJvamVjdFBhcmFtczogUHJvamVjdENvbmZpZ1Byb3BzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3Q6IHN0cmluZyB8IEFkZHJlc3NhYmxlID0gYXdhaXQgbmV3UHJvamVjdChcbiAgICAgICAgICAgIHByb2plY3RQYXJhbXMsIChhd2FpdCB0aGlzLnBhcmVudC5zaWduZXIpIVxuICAgICAgICApO1xuXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICAgICAgXCJrYW5hbG9hLmltcG9ydGVkX3Byb2plY3RzXCIsIFxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgWyBcbiAgICAgICAgICAgICAgICAgICAgLi4uKGF3YWl0IGdldFByb2plY3RzKHRoaXMucGFyZW50LndhbGxldCkpLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBwcm9qZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogcHJvamVjdFBhcmFtcy5wcm9qZWN0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcGxveWVyOiBhd2FpdCAoYXdhaXQgdGhpcy5wYXJlbnQuc2lnbmVyISk/LmdldEFkZHJlc3MoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9qZWN0UGFyYW1zLmRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgIH0gYXMgUHJvamVjdERhdGFcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHByb2plY3Q7XG4gICAgfVxuXG4gICAgYXN5bmMgbmV3Q29udHJhY3QoY29udHJhY3RQYXJhbXM6IE5ld0NvbnRyYWN0Q29uZmlnUHJvcHMpIHtcbiAgICAgICAgYXdhaXQgbmV3Q29udHJhY3QoY29udHJhY3RQYXJhbXMsIChhd2FpdCB0aGlzLnBhcmVudC5zaWduZXIpISk7XG4gICAgfVxuXG4gICAgYXN5bmMgbW9kaWZ5Q29udHJhY3QoY29udHJhY3RQYXJhbXM6IE1vZGlmeUNvbnRyYWN0UHJvcHMpIHtcbiAgICAgICAgYXdhaXQgbW9kaWZ5Q29udHJhY3QoY29udHJhY3RQYXJhbXMsIChhd2FpdCB0aGlzLnBhcmVudC5zaWduZXIpISk7XG4gICAgfVxufSIsImltcG9ydCB7IFxuICAgIEFic3RyYWN0UHJvdmlkZXIsIENvbnRyYWN0LCBTaWduZXIsIGV0aGVycyBcbn0gZnJvbSBcImV0aGVyc1wiO1xuaW1wb3J0IHsgS2FuYWxvYUV0aGVycywgcmVxdWlyZUNvbm5lY3Rpb24gfSBmcm9tIFwiLi9rYW5hbG9hLWV0aGVyc1wiO1xuaW1wb3J0IEthbmFsb2FBZGRyZXNzQm9vayBmcm9tIFwia2FuYWxvYS1hZGRyZXNzLWJvb2suanNvblwiO1xuaW1wb3J0IHsgTW9kdWxlT3BzLCBNb2R1bGVQYXJhbWV0ZXJzIH0gZnJvbSBcIi4va2FuYWxvYS1wcm9qZWN0LXJlZ2lzdHJ5XCI7XG5cbmV4cG9ydCBjb25zdCBQQVlNRU5UU19QUk9DRVNTT1JfQUREUkVTUzogc3RyaW5nID0gXG4gICAgS2FuYWxvYUFkZHJlc3NCb29rW1wiUGF5bWVudHNQcm9jZXNzb3JcIl07XG5leHBvcnQgY29uc3QgUEFZTUVOVFNfUFJPQ0VTU09SX0FCSSA9IFtcbiAgICBcImZ1bmN0aW9uIGdldE9wZXJhdGlvbkNvc3QoXCJcbiAgICAgICAgKyBcInVpbnQ4IG9wLCBhZGRyZXNzIHRhcmdldCwgYnl0ZXMzMiBpbmZvLCBhZGRyZXNzIHRva2VuLCBhZGRyZXNzIGNsaWVudFwiXG4gICAgKyBcIikgdmlldyByZXR1cm5zICh1aW50MjU2KVwiLFxuICAgIFwiZnVuY3Rpb24gY2FsY3VsYXRlTmV3Q29udHJhY3RJbnZvaWNlKFwiIFxuICAgICAgICArIFwiYWRkcmVzcyB0YXJnZXQsIHR1cGxlKGJ5dGVzMzIsIGJ5dGVzKVtdIGdlbmVzaXNNb2R1bGVzLCBcIlxuICAgICAgICArIFwiYWRkcmVzcyBwYXltZW50LCBhZGRyZXNzIGNsaWVudFwiIFxuICAgICsgXCIpIHZpZXcgcmV0dXJucyAodHVwbGUoYm9vbCwgdWludDI1NikpXCIsXG4gICAgXCJmdW5jdGlvbiBjYWxjdWxhdGVNb2RpZnlDb250cmFjdEludm9pY2UoXCIgXG4gICAgICAgICsgXCJhZGRyZXNzIHRhcmdldCwgdHVwbGUodWludDgsIHR1cGxlKGJ5dGVzMzIsIGJ5dGVzKSlbXSBtb2R1bGVPcGVyYXRpb25zLCBcIlxuICAgICAgICArIFwiYWRkcmVzcyBwYXltZW50LCBhZGRyZXNzIGNsaWVudFwiIFxuICAgICsgXCIpIHZpZXcgcmV0dXJucyAodHVwbGUoYm9vbCwgdWludDI1NikpXCIsXG5dXG5cbmV4cG9ydCBlbnVtIFRheGFibGVPcGVyYXRpb25zIHtcbiAgICBFTkFCTEVEID0gMCxcbiAgICBORVdfUFJPSkVDVCA9IDEsXG4gICAgTkVXX0NPTlRSQUNUID0gMixcbiAgICBORVdfTU9EVUxFID0gMyxcbiAgICBFRElUX0NPTlRSQUNUID0gNCxcbiAgICBFRElUX01PRFVMRSA9IDVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUYXhhYmxlUGF5bG9hZCB7XG4gICAgdGFyZ2V0Pzogc3RyaW5nLFxuICAgIHBheWxvYWQ/OiBNb2R1bGVQYXJhbWV0ZXJzW10gfCBbTW9kdWxlT3BzLCBNb2R1bGVQYXJhbWV0ZXJzXVtdLFxuICAgIHRva2VuOiBzdHJpbmcsXG4gICAgY2xpZW50OiBzdHJpbmdcbn1cblxuZnVuY3Rpb24gZ2V0UGF5bWVudHNQcm9jZXNzb3JDb250cmFjdChcbiAgICBwcm92aWRlcjogU2lnbmVyIHwgQWJzdHJhY3RQcm92aWRlclxuKTogQ29udHJhY3Qge1xuICAgIHJldHVybiBuZXcgQ29udHJhY3QoXG4gICAgICAgIFBBWU1FTlRTX1BST0NFU1NPUl9BRERSRVNTLFxuICAgICAgICBQQVlNRU5UU19QUk9DRVNTT1JfQUJJLCBcbiAgICAgICAgcHJvdmlkZXJcbiAgICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjYWxjdWxhdGVJbnZvaWNlKFxuICAgIG1vZGU6IFRheGFibGVPcGVyYXRpb25zLCBwYXJhbXM6IFRheGFibGVQYXlsb2FkLCB3YWxsZXQ6IEFic3RyYWN0UHJvdmlkZXJcbik6IFByb21pc2U8YmlnaW50IHwgdW5kZWZpbmVkPiAge1xuICAgIGNvbnN0IHBheW1lbnRzUHJvY2Vzc29yID0gZ2V0UGF5bWVudHNQcm9jZXNzb3JDb250cmFjdCh3YWxsZXQpO1xuICAgIGNvbnN0IHNlcmlhbGl6ZSA9IChtb2RlID09IFRheGFibGVPcGVyYXRpb25zLk5FV19DT05UUkFDVCkgP1xuICAgICAgICAocDogTW9kdWxlUGFyYW1ldGVycykgPT4gXG4gICAgICAgICAgICBbcC5tb2R1bGVTaWduYXR1cmUsIHAuaW5pdFBhcmFtc10gOlxuICAgICAgICAocDogW01vZHVsZU9wcywgTW9kdWxlUGFyYW1ldGVyc10pID0+IFxuICAgICAgICAgICAgW3BbMF0sIFtwWzFdLm1vZHVsZVNpZ25hdHVyZSwgcFsxXS5pbml0UGFyYW1zXV1cbiAgICBjb25zdCBbc3VjY2VzcywgY29zdF06IFtib29sZWFuLCBiaWdpbnRdID1cbiAgICAgICAgKG1vZGUgPT0gVGF4YWJsZU9wZXJhdGlvbnMuTkVXX1BST0pFQ1QpID9cbiAgICAgICAgICAgIFt0cnVlLCBhd2FpdCBwYXltZW50c1Byb2Nlc3Nvci5nZXRPcGVyYXRpb25Db3N0KFxuICAgICAgICAgICAgICAgIFRheGFibGVPcGVyYXRpb25zLk5FV19QUk9KRUNULCBcbiAgICAgICAgICAgICAgICBldGhlcnMuWmVyb0FkZHJlc3MsIGV0aGVycy5aZXJvSGFzaCxcbiAgICAgICAgICAgICAgICBwYXJhbXMudG9rZW4sIHBhcmFtcy5jbGllbnRcbiAgICAgICAgICAgICldIDogYXdhaXQgcGF5bWVudHNQcm9jZXNzb3JbXG4gICAgICAgICAgICAgICAgICAgIChtb2RlID09IFRheGFibGVPcGVyYXRpb25zLk5FV19DT05UUkFDVCkgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2FsY3VsYXRlTmV3Q29udHJhY3RJbnZvaWNlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJjYWxjdWxhdGVNb2RpZnlDb250cmFjdEludm9pY2VcIlxuICAgICAgICAgICAgXShcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy50YXJnZXQhLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnBheWxvYWQhLm1hcChzZXJpYWxpemUgYXMgYW55KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy50b2tlbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5jbGllbnRcbiAgICAgICAgICAgICk7XG5cbiAgICByZXR1cm4gKHN1Y2Nlc3MpID8gY29zdCA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNsYXNzIFBheW1lbnRzUHJvY2Vzc29yIHtcbiAgICBwYXJlbnQ6IEthbmFsb2FFdGhlcnM7XG4gICAgY29uc3RydWN0b3IocGFyZW50OiBLYW5hbG9hRXRoZXJzKSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIH1cblxuICAgIGFzeW5jIGNhbGN1bGF0ZUludm9pY2UoXG4gICAgICAgIG1vZGU6IFRheGFibGVPcGVyYXRpb25zLCBwYXJhbXM6IFRheGFibGVQYXlsb2FkXG4gICAgKTogUHJvbWlzZTxiaWdpbnQgfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGNhbGN1bGF0ZUludm9pY2UobW9kZSwgcGFyYW1zLCB0aGlzLnBhcmVudC53YWxsZXQpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlcXVlc3RBbGxvd2FuY2UoXG4gICAgICAgIGFtb3VudDogYmlnaW50LCBwYXltZW50OiBzdHJpbmcgPSBLYW5hbG9hQWRkcmVzc0Jvb2tbXCJLQU5BXCJdXG4gICAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IHRva2VuOiBDb250cmFjdCA9IG5ldyBDb250cmFjdChcbiAgICAgICAgICAgIHBheW1lbnQsIFsgXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyBvd25lciwgYWRkcmVzcyBzcGVuZGVyKSB2aWV3IHJldHVybnMgKHVpbnQyNTYpXCIsXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvbiBhcHByb3ZlKGFkZHJlc3Mgc3BlbmRlciwgdWludDI1NiBhbW91bnQpIHJldHVybnMgKGJvb2wpXCJcbiAgICAgICAgICAgIF0sIChhd2FpdCB0aGlzLnBhcmVudC5zaWduZXIpIVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGFsbG93YW5jZTogYmlnaW50ID0gXG4gICAgICAgICAgICBhd2FpdCB0b2tlbi5hbGxvd2FuY2UoXG4gICAgICAgICAgICAgICAgYXdhaXQgKGF3YWl0IHRoaXMucGFyZW50LnNpZ25lcikhLmdldEFkZHJlc3MoKSwgXG4gICAgICAgICAgICAgICAgUEFZTUVOVFNfUFJPQ0VTU09SX0FERFJFU1NcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgaWYgKGFsbG93YW5jZSA8IGFtb3VudCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCAoXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRva2VuLmFwcHJvdmUoUEFZTUVOVFNfUFJPQ0VTU09SX0FERFJFU1MsIGFtb3VudClcbiAgICAgICAgICAgICAgICApLndhaXQoKVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgXG4gICAgQWJzdHJhY3RQcm92aWRlciwgRWlwMTE5M1Byb3ZpZGVyLCBCcm93c2VyUHJvdmlkZXIsIFxuICAgIGV0aGVycywgU2lnbmVyLCBBZGRyZXNzTGlrZSwgRW5zUmVzb2x2ZXJcbn0gZnJvbSBcImV0aGVyc1wiO1xuaW1wb3J0IHsgQXZhdGFyUmVzdWx0IH0gZnJvbSBcImV0aGVycy9saWIuY29tbW9uanMvcHJvdmlkZXJzL2Vucy1yZXNvbHZlclwiO1xuaW1wb3J0IHsgTGl0RWxlbWVudCB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IFByb2plY3RSZWdpc3RyeSB9IGZyb20gXCIuL2thbmFsb2EtcHJvamVjdC1yZWdpc3RyeVwiO1xuaW1wb3J0IHsgUGF5bWVudHNQcm9jZXNzb3IgfSBmcm9tIFwiLi9wYXltZW50cy1wcm9jZXNzb3JcIjtcbmltcG9ydCBLYW5hbG9hQWRkcmVzc0Jvb2sgZnJvbSBcImthbmFsb2EtYWRkcmVzcy1ib29rLmpzb25cIjtcblxuZGVjbGFyZSBtb2R1bGUgd2luZG93IHtcbiAgICBleHBvcnQgY29uc3QgZXRoZXJldW06IEVpcDExOTNQcm92aWRlciB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVDb25uZWN0aW9uKFxuICAgIHRhcmdldDogYW55LFxuICAgIHByb3BlcnR5S2V5OiBzdHJpbmcsXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yXG4pOiBQcm9wZXJ0eURlc2NyaXB0b3Ige1xuICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgIT0gXCJmdW5jdGlvblwiXG4gICAgICAgIHx8IHRhcmdldC5yZWFkT25seVxuICAgICkge1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICB9XG5cblxuICAgIGxldCBvcmlnaW5hbCA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgZGVzY3JpcHRvci52YWx1ZSA9XG4gICAgICAgIGFzeW5jICguLi5hcmdzOiB1bmtub3duW10pOiBQcm9taXNlPHVua25vd24+ID0+IHtcbiAgICAgICAgICAgIGlmIChLYW5hbG9hQVBJLnNpZ25lciAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBhcmUgYWxyZWFkeSBjb25uZWN0ZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGFyZ2V0LCBhcmdzKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXZSBoYXZlIGEgQnJvd3NlclByb3ZpZGVyLCBidXQgdGhlIHdhbGxldCBpcyBub3QgXG4gICAgICAgICAgICAvLyBjb25uZWN0ZWQgeWV0LiBSZXF1ZXN0IHBlcm1pc3Npb24gZnJvbSB0aGUgdXNlclxuICAgICAgICAgICAgcmV0dXJuIEthbmFsb2FBUElcbiAgICAgICAgICAgICAgICAucmVxdWVzdFNpZ25lcigpXG4gICAgICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICgpID0+IG9yaWdpbmFsLmFwcGx5KHRhcmdldCwgYXJncylcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAvLyBUT0RPOiBjYXRjaCBhbmQgc2hvdyBzb21lIGVycm9yIG1lc3NhZ2UgdG8gdGhlIHVzZXJcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbn1cblxuY29uc3Qgd2FsbGV0Q2hhbmdlZEV2ZW50OiBDdXN0b21FdmVudCA9IFxuICAgIG5ldyBDdXN0b21FdmVudChcIndhbGxldC1jaGFuZ2VkXCIpO1xuXG5mdW5jdGlvbiByZXF1ZXN0VXBkYXRlU3Vic2NyaWJlcnMoZXY6IEV2ZW50KSB7XG4gICAgKGV2LnRhcmdldCBhcyBMaXRFbGVtZW50KS5yZXF1ZXN0VXBkYXRlKCk7XG59XG5cbmV4cG9ydCBjbGFzcyBLYW5hbG9hRXRoZXJzIHtcbiAgICBwcml2YXRlIHN1YnNjcmliZWRFbGVtZW50czogU2V0PExpdEVsZW1lbnQ+ID0gbmV3IFNldDxMaXRFbGVtZW50PigpO1xuXG4gICAgcmVhZG9ubHkgS0FOQV9UT0tFTiA9IEthbmFsb2FBZGRyZXNzQm9vay5LQU5BO1xuXG4gICAgcHJvamVjdFJlZ2lzdHJ5OiBQcm9qZWN0UmVnaXN0cnk7XG4gICAgcGF5bWVudHNQcm9jZXNzb3I6IFBheW1lbnRzUHJvY2Vzc29yO1xuXG4gICAgd2FsbGV0OiBCcm93c2VyUHJvdmlkZXIgfCBBYnN0cmFjdFByb3ZpZGVyO1xuICAgIHByaXZhdGUgX3NpZ25lcjogUHJvbWlzZTxTaWduZXIgfCB1bmRlZmluZWQ+O1xuICAgIGdldCBzaWduZXIoKTogUHJvbWlzZTxTaWduZXIgfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25lcjtcbiAgICB9XG4gICAgc2V0IHNpZ25lcih2YWx1ZTogUHJvbWlzZTxTaWduZXIgfCB1bmRlZmluZWQ+KSB7XG4gICAgICAgIHRoaXMuX3NpZ25lciA9IHZhbHVlO1xuXG4gICAgICAgIGlmICh2YWx1ZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbHVlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVkRWxlbWVudHMuZm9yRWFjaChcbiAgICAgICAgICAgICAgICAoZWxlbSkgPT4gZWxlbS5kaXNwYXRjaEV2ZW50KHdhbGxldENoYW5nZWRFdmVudClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pOyAgICAgICBcbiAgICB9XG5cbiAgICBfYXZhdGFyPzogQXZhdGFyUmVzdWx0O1xuICAgIGdldCBhdmF0YXIoKTogQXZhdGFyUmVzdWx0IHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F2YXRhcjtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0UmVnaXN0cnkgPSBuZXcgUHJvamVjdFJlZ2lzdHJ5KHRoaXMpO1xuICAgICAgICB0aGlzLnBheW1lbnRzUHJvY2Vzc29yID0gbmV3IFBheW1lbnRzUHJvY2Vzc29yKHRoaXMpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHdpbmRvdy5ldGhlcmV1bSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLndhbGxldCA9IG5ldyBldGhlcnMuQnJvd3NlclByb3ZpZGVyKHdpbmRvdy5ldGhlcmV1bSk7XG5cbiAgICAgICAgICAgIHRoaXMuX3NpZ25lciA9IFxuICAgICAgICAgICAgICAgICh0aGlzLndhbGxldCBhcyBCcm93c2VyUHJvdmlkZXIpXG4gICAgICAgICAgICAgICAgICAgIC5saXN0QWNjb3VudHMoKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgcmV0dXJucyByZXN1bHRzLCB3ZSBoYXZlIHBlcm1pc3Npb24gdG8gY29ubmVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy53YWxsZXQgYXMgQnJvd3NlclByb3ZpZGVyKS5nZXRTaWduZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApIGFzIFByb21pc2U8U2lnbmVyIHwgdW5kZWZpbmVkPjtcbiAgICAgICAgICAgIHRoaXMuc2lnbmVyID0gdGhpcy5fc2lnbmVyO1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBwZXJmb3JtIGV2ZW50IGhvb2tpbmcgaGVyZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRGVmYXVsdHMgdG8gY29ubmVjdGluZyB0byBFdGhlcmV1bSBtYWlubmV0IHZpYSBJTkZVUkEgb3JcbiAgICAgICAgICAgIC8vIHNvbWV0aGluZyBsaWtlIHRoYXQsIEkgZHVubm8uXG4gICAgICAgICAgICB0aGlzLndhbGxldCA9IGV0aGVycy5nZXREZWZhdWx0UHJvdmlkZXIoXCJtYWlubmV0XCIpO1xuICAgICAgICAgICAgdGhpcy5fc2lnbmVyID0gbmV3IFByb21pc2UoKHJlcykgPT4gcmVzKHVuZGVmaW5lZCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgcmVxdWVzdFNpZ25lcigpOiBQcm9taXNlPFNpZ25lcj4ge1xuICAgICAgICBpZiAodGhpcy5yZWFkT25seSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwiS2FuYWxvYUV0aGVyczogYXR0ZW1wdGluZyB0byBjb25uZWN0IHRvIHJlYWQtb25seSBwcm92aWRlclwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLndhbGxldCBhcyBCcm93c2VyUHJvdmlkZXIpXG4gICAgICAgICAgICAuZ2V0U2lnbmVyKDApXG4gICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgICAoYWNjOiBTaWduZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIHN1YnNjcmliZShlbGVtOiBMaXRFbGVtZW50KSB7XG4gICAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcih3YWxsZXRDaGFuZ2VkRXZlbnQudHlwZSwgcmVxdWVzdFVwZGF0ZVN1YnNjcmliZXJzKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVkRWxlbWVudHMuYWRkKGVsZW0pO1xuICAgIH1cblxuICAgIHVuc3Vic2NyaWJlKGVsZW06IExpdEVsZW1lbnQpIHtcbiAgICAgICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKHdhbGxldENoYW5nZWRFdmVudC50eXBlLCByZXF1ZXN0VXBkYXRlU3Vic2NyaWJlcnMpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZWRFbGVtZW50cy5kZWxldGUoZWxlbSk7XG4gICAgfVxuXG4gICAgZ2V0IHJlYWRPbmx5KCkge1xuICAgICAgICByZXR1cm4gISh0aGlzLndhbGxldCBpbnN0YW5jZW9mIEJyb3dzZXJQcm92aWRlcik7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgS2FuYWxvYUFQSSA9IG5ldyBLYW5hbG9hRXRoZXJzKCk7IiwiaW1wb3J0IHsgTGl0RWxlbWVudCwgY3NzIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgS2FuYUNhcmQgfSBmcm9tICdzcmMvY29tcG9uZW50cy9jYXJkJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0Q2FyZHNQYWdlIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgQHByb3BlcnR5KHsgdHlwZTogQXJyYXkgfSlcbiAgICBkZWNsYXJlIGl0ZW1zOiBLYW5hQ2FyZFtdO1xuXG4gICAgQHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiwgcmVmbGVjdDogdHJ1ZSB9KVxuICAgIGRlY2xhcmUgaXNMb2FkaW5nOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIGFic3RyYWN0IGZldGNoRGF0YSgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICBnYXA6IDJyZW07XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDFyZW07XG4gICAgICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaDEge1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDNyZW07XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAuY2FyZHMge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICAgICAgICAgICAgICAgIGdhcDogMXJlbTtcbiAgICAgICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBrYW5hLWJ1dHRvbiB7XG4gICAgICAgICAgICAgICAgICAgIG1pbi13aWR0aDogZml0LWNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS41cmVtO1xuICAgICAgICAgICAgICAgICAgICBtaW4taGVpZ2h0OiA0cmVtO1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzcmVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBhIHtcbiAgICAgICAgICAgICAgICAgICAgbWluLXdpZHRoOiBmaXQtY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYCxcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgICB9XG59XG4iLCJpbXBvcnR7XyRMSCBhcyBvfWZyb21cIi4vbGl0LWh0bWwuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NvbnN0e0k6bH09byxpPW89Pm51bGw9PT1vfHxcIm9iamVjdFwiIT10eXBlb2YgbyYmXCJmdW5jdGlvblwiIT10eXBlb2YgbyxuPXtIVE1MOjEsU1ZHOjJ9LHQ9KG8sbCk9PnZvaWQgMD09PWw/dm9pZCAwIT09KG51bGw9PW8/dm9pZCAwOm8uXyRsaXRUeXBlJCk6KG51bGw9PW8/dm9pZCAwOm8uXyRsaXRUeXBlJCk9PT1sLHY9bz0+e3ZhciBsO3JldHVybiBudWxsIT0obnVsbD09PShsPW51bGw9PW8/dm9pZCAwOm8uXyRsaXRUeXBlJCl8fHZvaWQgMD09PWw/dm9pZCAwOmwuaCl9LGQ9bz0+dm9pZCAwIT09KG51bGw9PW8/dm9pZCAwOm8uXyRsaXREaXJlY3RpdmUkKSx1PW89Pm51bGw9PW8/dm9pZCAwOm8uXyRsaXREaXJlY3RpdmUkLGU9bz0+dm9pZCAwPT09by5zdHJpbmdzLHI9KCk9PmRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIiksYz0obyxpLG4pPT57dmFyIHQ7Y29uc3Qgdj1vLl8kQUEucGFyZW50Tm9kZSxkPXZvaWQgMD09PWk/by5fJEFCOmkuXyRBQTtpZih2b2lkIDA9PT1uKXtjb25zdCBpPXYuaW5zZXJ0QmVmb3JlKHIoKSxkKSx0PXYuaW5zZXJ0QmVmb3JlKHIoKSxkKTtuPW5ldyBsKGksdCxvLG8ub3B0aW9ucyl9ZWxzZXtjb25zdCBsPW4uXyRBQi5uZXh0U2libGluZyxpPW4uXyRBTSx1PWkhPT1vO2lmKHUpe2xldCBsO251bGw9PT0odD1uLl8kQVEpfHx2b2lkIDA9PT10fHx0LmNhbGwobixvKSxuLl8kQU09byx2b2lkIDAhPT1uLl8kQVAmJihsPW8uXyRBVSkhPT1pLl8kQVUmJm4uXyRBUChsKX1pZihsIT09ZHx8dSl7bGV0IG89bi5fJEFBO2Zvcig7byE9PWw7KXtjb25zdCBsPW8ubmV4dFNpYmxpbmc7di5pbnNlcnRCZWZvcmUobyxkKSxvPWx9fX1yZXR1cm4gbn0sZj0obyxsLGk9byk9PihvLl8kQUkobCxpKSxvKSxzPXt9LGE9KG8sbD1zKT0+by5fJEFIPWwsbT1vPT5vLl8kQUgscD1vPT57dmFyIGw7bnVsbD09PShsPW8uXyRBUCl8fHZvaWQgMD09PWx8fGwuY2FsbChvLCExLCEwKTtsZXQgaT1vLl8kQUE7Y29uc3Qgbj1vLl8kQUIubmV4dFNpYmxpbmc7Zm9yKDtpIT09bjspe2NvbnN0IG89aS5uZXh0U2libGluZztpLnJlbW92ZSgpLGk9b319LGg9bz0+e28uXyRBUigpfTtleHBvcnR7biBhcyBUZW1wbGF0ZVJlc3VsdFR5cGUsaCBhcyBjbGVhclBhcnQsbSBhcyBnZXRDb21taXR0ZWRWYWx1ZSx1IGFzIGdldERpcmVjdGl2ZUNsYXNzLGMgYXMgaW5zZXJ0UGFydCx2IGFzIGlzQ29tcGlsZWRUZW1wbGF0ZVJlc3VsdCxkIGFzIGlzRGlyZWN0aXZlUmVzdWx0LGkgYXMgaXNQcmltaXRpdmUsZSBhcyBpc1NpbmdsZUV4cHJlc3Npb24sdCBhcyBpc1RlbXBsYXRlUmVzdWx0LHAgYXMgcmVtb3ZlUGFydCxmIGFzIHNldENoaWxkUGFydFZhbHVlLGEgYXMgc2V0Q29tbWl0dGVkVmFsdWV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlLWhlbHBlcnMuanMubWFwXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG5pbXBvcnQgeyBkZWR1cGVNaXhpbiB9IGZyb20gJ0BvcGVuLXdjL2RlZHVwZS1taXhpbic7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgaXNUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJ2xpdC9kaXJlY3RpdmUtaGVscGVycy5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMvU2xvdE1peGluVHlwZXMnKS5TbG90TWl4aW59IFNsb3RNaXhpblxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMvU2xvdE1peGluVHlwZXMnKS5TbG90c01hcH0gU2xvdHNNYXBcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2luZGV4JykuTGl0RWxlbWVudH0gTGl0RWxlbWVudFxuICovXG5cbi8qKlxuICogQHR5cGUge1Nsb3RNaXhpbn1cbiAqIEBwYXJhbSB7aW1wb3J0KCdAb3Blbi13Yy9kZWR1cGUtbWl4aW4nKS5Db25zdHJ1Y3RvcjxMaXRFbGVtZW50Pn0gc3VwZXJjbGFzc1xuICovXG5jb25zdCBTbG90TWl4aW5JbXBsZW1lbnRhdGlvbiA9IHN1cGVyY2xhc3MgPT5cbiAgLy8gQHRzLWlnbm9yZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzM2ODIxI2lzc3VlY29tbWVudC01ODgzNzUwNTFcbiAgY2xhc3MgU2xvdE1peGluIGV4dGVuZHMgc3VwZXJjbGFzcyB7XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U2xvdHNNYXB9XG4gICAgICovXG4gICAgZ2V0IHNsb3RzKCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgICAgdGhpcy5fX3ByaXZhdGVTbG90cyA9IG5ldyBTZXQobnVsbCk7XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgdGhpcy5fY29ubmVjdFNsb3RNaXhpbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJ0BsaW9uL2NvcmUnKS5UZW1wbGF0ZVJlc3VsdH0gdGVtcGxhdGVcbiAgICAgKi9cbiAgICBfX3JlbmRlckFzTm9kZXModGVtcGxhdGUpIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igd2FpdCBmb3IgYnJvd3NlciBzdXBwb3J0XG4gICAgICBjb25zdCBzdXBwb3J0c1Njb3BlZFJlZ2lzdHJ5ID0gISFTaGFkb3dSb290LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50O1xuICAgICAgY29uc3QgcmVnaXN0cnlSb290ID0gc3VwcG9ydHNTY29wZWRSZWdpc3RyeSA/IHRoaXMuc2hhZG93Um9vdCA6IGRvY3VtZW50O1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB3YWl0IGZvciBicm93c2VyIHN1cHBvcnRcbiAgICAgIGNvbnN0IHRlbXBSZW5kZXJUYXJnZXQgPSByZWdpc3RyeVJvb3QuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAvLyBQcm92aWRpbmcgYWxsIG9wdGlvbnMgYnJlYWtzIFNhZmFyaTsga2VlcCBob3N0IGFuZCBjcmVhdGlvblNjb3BlXG4gICAgICBjb25zdCB7IGNyZWF0aW9uU2NvcGUsIGhvc3QgfSA9IHRoaXMucmVuZGVyT3B0aW9ucztcbiAgICAgIHJlbmRlcih0ZW1wbGF0ZSwgdGVtcFJlbmRlclRhcmdldCwgeyBjcmVhdGlvblNjb3BlLCBob3N0IH0pO1xuICAgICAgcmV0dXJuIEFycmF5LmZyb20odGVtcFJlbmRlclRhcmdldC5jaGlsZE5vZGVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2Nvbm5lY3RTbG90TWl4aW4oKSB7XG4gICAgICBpZiAoIXRoaXMuX19pc0Nvbm5lY3RlZFNsb3RNaXhpbikge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnNsb3RzKS5mb3JFYWNoKHNsb3ROYW1lID0+IHtcbiAgICAgICAgICBjb25zdCBoYXNTbG90dGFibGVGcm9tVXNlciA9XG4gICAgICAgICAgICBzbG90TmFtZSA9PT0gJydcbiAgICAgICAgICAgICAgPyAvLyBmb3IgZGVmYXVsdCBzbG90ICgnJyksIHdlIGNhbid0IHVzZSBlbC5zbG90IGJlY2F1c2UgcG9seWZpbGwgZm9yIElFMTFcbiAgICAgICAgICAgICAgICAvLyB3aWxsIGRvIC5xdWVyeVNlbGVjdG9yKCdbc2xvdD1dJykgd2hpY2ggcHJvZHVjZXMgYSBmYXRhbCBlcnJvclxuICAgICAgICAgICAgICAgIC8vIHRoZXJlZm9yZSB3ZSBjaGVjayBpZiB0aGVyZSdzIGNoaWxkcmVuIHRoYXQgZG8gbm90IGhhdmUgYSBzbG90IGF0dHJcbiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKHRoaXMuY2hpbGRyZW4pLmZpbmQoZWwgPT4gIWVsLmhhc0F0dHJpYnV0ZSgnc2xvdCcpKVxuICAgICAgICAgICAgICA6IEFycmF5LmZyb20odGhpcy5jaGlsZHJlbikuZmluZChlbCA9PiBlbC5zbG90ID09PSBzbG90TmFtZSk7XG5cbiAgICAgICAgICBpZiAoIWhhc1Nsb3R0YWJsZUZyb21Vc2VyKSB7XG4gICAgICAgICAgICBjb25zdCBzbG90Q29udGVudCA9IHRoaXMuc2xvdHNbc2xvdE5hbWVdKCk7XG4gICAgICAgICAgICAvKiogQHR5cGUge05vZGVbXX0gKi9cbiAgICAgICAgICAgIGxldCBub2RlcyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAoaXNUZW1wbGF0ZVJlc3VsdChzbG90Q29udGVudCkpIHtcbiAgICAgICAgICAgICAgbm9kZXMgPSB0aGlzLl9fcmVuZGVyQXNOb2RlcyhzbG90Q29udGVudCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHNsb3RDb250ZW50KSkge1xuICAgICAgICAgICAgICBub2RlcyA9IFsvKiogQHR5cGUge05vZGV9ICovIChzbG90Q29udGVudCldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgICAgICAgICBpZiAoIShub2RlIGluc3RhbmNlb2YgTm9kZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50ICYmIHNsb3ROYW1lICE9PSAnJykge1xuICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdzbG90Jywgc2xvdE5hbWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICAgIHRoaXMuX19wcml2YXRlU2xvdHMuYWRkKHNsb3ROYW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX19pc0Nvbm5lY3RlZFNsb3RNaXhpbiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNsb3ROYW1lIE5hbWUgb2YgdGhlIHNsb3RcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIGdpdmVuIHNsb3QgbmFtZSBiZWVuIGNyZWF0ZWQgYnkgU2xvdE1peGluXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9pc1ByaXZhdGVTbG90KHNsb3ROYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3ByaXZhdGVTbG90cy5oYXMoc2xvdE5hbWUpO1xuICAgIH1cbiAgfTtcblxuZXhwb3J0IGNvbnN0IFNsb3RNaXhpbiA9IGRlZHVwZU1peGluKFNsb3RNaXhpbkltcGxlbWVudGF0aW9uKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cbmltcG9ydCB7IGJyb3dzZXJEZXRlY3Rpb24gfSBmcm9tICdAbGlvbi9jb3JlJztcblxuY29uc3QgbW92ZURvd25Db25kaXRpb25zID0gW1xuICBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElORyxcbiAgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlOUyxcbiAgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9DT05UQUlOUyB8IE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fUFJFQ0VESU5HLFxuXTtcblxuLyoqXG4gKiBAZGVzYyBMZXQgdGhlIG9yZGVyIG9mIGFkZGluZyBpZHMgdG8gYXJpYSBlbGVtZW50IGJ5IERPTSBvcmRlciwgc28gdGhhdCB0aGUgc2NyZWVuIHJlYWRlclxuICogcmVzcGVjdHMgdmlzdWFsIG9yZGVyIHdoZW4gcmVhZGluZzpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi9mdW5kYW1lbnRhbHMvYWNjZXNzaWJpbGl0eS9mb2N1cy9kb20tb3JkZXItbWF0dGVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudFtdfSBkZXNjcmlwdGlvbkVsZW1lbnRzIC0gaG9sZHMgcmVmZXJlbmNlcyB0byBkZXNjcmlwdGlvbiBvciBsYWJlbCBlbGVtZW50cyB3aG9zZVxuICogaWQgc2hvdWxkIGJlIHJldHVybmVkXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5yZXZlcnNlXVxuICogQHJldHVybnMge0hUTUxFbGVtZW50W119IHNvcnRlZCBzZXQgb2YgZWxlbWVudHMgYmFzZWQgb24gZG9tIG9yZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBcmlhRWxlbWVudHNJblJpZ2h0RG9tT3JkZXIoZGVzY3JpcHRpb25FbGVtZW50cywgeyByZXZlcnNlIH0gPSB7fSkge1xuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYVxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBiXG4gICAqIEByZXR1cm4gey0xfDF9XG4gICAqL1xuICBjb25zdCBwdXRQcmVjZWRpbmdTaWJsaW5nc0FuZExvY2FsUGFyZW50c0ZpcnN0ID0gKGEsIGIpID0+IHtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTm9kZS9jb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuICAgIGNvbnN0IHBvcyA9IGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYik7XG5cbiAgICAvLyBVbmZvcnR1bmF0ZWx5LCBmb3IgSUUsIHdlIGhhdmUgdG8gc3dpdGNoIHRoZSBvcmRlciAoPylcbiAgICBpZiAobW92ZURvd25Db25kaXRpb25zLmluY2x1ZGVzKHBvcykpIHtcbiAgICAgIHJldHVybiBicm93c2VyRGV0ZWN0aW9uLmlzSUUxMSA/IC0xIDogMTtcbiAgICB9XG4gICAgcmV0dXJuIGJyb3dzZXJEZXRlY3Rpb24uaXNJRTExID8gMSA6IC0xO1xuICB9O1xuXG4gIGNvbnN0IGRlc2NyaXB0aW9uRWxzID0gZGVzY3JpcHRpb25FbGVtZW50cy5maWx0ZXIoZWwgPT4gZWwpOyAvLyBmaWx0ZXIgb3V0IG51bGwgcmVmZXJlbmNlc1xuICBkZXNjcmlwdGlvbkVscy5zb3J0KHB1dFByZWNlZGluZ1NpYmxpbmdzQW5kTG9jYWxQYXJlbnRzRmlyc3QpO1xuICBpZiAocmV2ZXJzZSkge1xuICAgIGRlc2NyaXB0aW9uRWxzLnJldmVyc2UoKTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRpb25FbHM7XG59XG4iLCIvKipcbiAqIEEgbW9kZWxWYWx1ZSBjYW4gZGVtYW5kIGEgY2VydGFpbiB0eXBlIChEYXRlLCBOdW1iZXIsIEliYW4gZXRjLikuIEEgY29ycmVjdCB0eXBlIHdpbGwgYWx3YXlzIGJlXG4gKiB0cmFuc2xhdGFibGUgaW50byBhIFN0cmluZyByZXByZXNlbnRhdGlvbiAodGhlIHZhbHVlIHByZXNlbnRlZCB0byB0aGUgZW5kIHVzZXIpIHZpYSB0aGVcbiAqIGBmb3JtYXR0ZXJgLiBXaGVuIHRoZSB0eXBlIGlzIG5vdCB2YWxpZCAodXN1YWxseSBhcyBhIGNvbnNlcXVlbmNlIG9mIGEgdXNlciB0eXBpbmcgaW4gYW4gaW52YWxpZFxuICogb3IgaW5jb21wbGV0ZSB2aWV3VmFsdWUpLCB0aGUgY3VycmVudCB0cnV0aCBpcyBjYXB0dXJlZCBpbiB0aGUgYFVucGFyc2VhYmxlYCB0eXBlLlxuICogRm9yIGV4YW1wbGU6IGEgdmlld1ZhbHVlIGNhbid0IGJlIHBhcnNlZCAoZm9yIGluc3RhbmNlICdmb28nIHdoZW4gdGhlIHR5cGUgc2hvdWxkIGJlIE51bWJlcikuXG5cbiAqIFRoZSBtb2RlbCh2YWx1ZSkgY29uY2VwdCBhcyBpbXBsZW1lbnRlZCBpbiBsaW9uLXdlYiBpcyBjb25jZXB0dWFsbHkgY29tcGFyYWJsZSB0byB0aG9zZSBmb3VuZCBpblxuICogcG9wdWxhciBzeXN0ZW1zIGxpa2UgQW5ndWxhciBhbmQgVnVlLlxuXG4gKiBUaGUgVW5wYXJzZWFibGUgdHlwZSBpcyBhbiBhZGRpdGlvbiBvbiB0b3Agb2YgdGhpcyB0aGF0IG1haW5seSBpcyBhZGRlZCBmb3IgdGhlIGZvbGxvd2luZyB0d29cbiAqIHB1cnBvc2VzOlxuICogLSByZXN0b3JpbmcgdXNlciBzZXNzaW9uc1xuICogLSByZWFsdGltZSB1cGRhdGVkIHdpdGggYWxsIHZhbHVlIGNoYW5nZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFVucGFyc2VhYmxlIHtcbiAgLyoqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAqL1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIC8qKlxuICAgICAqIE1ldGEgaW5mbyBmb3IgcmVzdG9yaW5nIHNlcmlhbGl6ZWQgVW5wYXJzZWFibGUgdmFsdWVzXG4gICAgICogQHR5cGUgeyd1bnBhcnNlYWJsZSd9XG4gICAgICovXG4gICAgdGhpcy50eXBlID0gJ3VucGFyc2VhYmxlJztcbiAgICAvKipcbiAgICAgKiBTdG9yZXMgY3VycmVudCB2aWV3IHZhbHVlLiBGb3IgaW5zdGFuY2UsIHZhbHVlICcwOS0nIGlzIGFuIHVucGFyc2VhYmxlIERhdGUuXG4gICAgICogVGhpcyBpbmZvIGNhbiBiZSB1c2VkIHRvIHJlc3RvcmUgcHJldmlvdXMgZm9ybSBzdGF0ZXMuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnZpZXdWYWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgdHlwZTogdGhpcy50eXBlLCB2aWV3VmFsdWU6IHRoaXMudmlld1ZhbHVlIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBkZWR1cGVNaXhpbiB9IGZyb20gJ0BsaW9uL2NvcmUnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BsaW9uL2NvcmUnKS5MaXRFbGVtZW50fSBMaXRFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9Gb3JtQ29udHJvbE1peGluVHlwZXMnKS5Gb3JtQ29udHJvbEhvc3R9IEZvcm1Db250cm9sSG9zdFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvcmVnaXN0cmF0aW9uL0Zvcm1SZWdpc3RlcmluZ01peGluVHlwZXMnKS5Gb3JtUmVnaXN0ZXJpbmdNaXhpbn0gRm9ybVJlZ2lzdGVyaW5nTWl4aW5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL3JlZ2lzdHJhdGlvbi9Gb3JtUmVnaXN0ZXJpbmdNaXhpblR5cGVzJykuRm9ybVJlZ2lzdGVyaW5nSG9zdH0gRm9ybVJlZ2lzdGVyaW5nSG9zdFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvcmVnaXN0cmF0aW9uL0Zvcm1SZWdpc3RyYXJNaXhpblR5cGVzJykuRWxlbWVudFdpdGhQYXJlbnRGb3JtR3JvdXB9IEVsZW1lbnRXaXRoUGFyZW50Rm9ybUdyb3VwXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9yZWdpc3RyYXRpb24vRm9ybVJlZ2lzdHJhck1peGluVHlwZXMnKS5Gb3JtUmVnaXN0cmFySG9zdH0gRm9ybVJlZ2lzdHJhckhvc3RcbiAqL1xuXG4vKipcbiAqICNGb3JtUmVnaXN0ZXJpbmdNaXhpbjpcbiAqXG4gKiBUaGlzIE1peGluIHJlZ2lzdGVycyBhIGZvcm0gZWxlbWVudCB0byBhIFJlZ2lzdHJhclxuICpcbiAqIEB0eXBlIHtGb3JtUmVnaXN0ZXJpbmdNaXhpbn1cbiAqIEBwYXJhbSB7aW1wb3J0KCdAb3Blbi13Yy9kZWR1cGUtbWl4aW4nKS5Db25zdHJ1Y3RvcjxMaXRFbGVtZW50Pn0gc3VwZXJjbGFzc1xuICovXG5jb25zdCBGb3JtUmVnaXN0ZXJpbmdNaXhpbkltcGxlbWVudGF0aW9uID0gc3VwZXJjbGFzcyA9PlxuICAvLyBAdHMtaWdub3JlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzY4MjEjaXNzdWVjb21tZW50LTU4ODM3NTA1MVxuICBjbGFzcyBleHRlbmRzIHN1cGVyY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIHJlZ2lzdHJhciB0aGlzIEZvcm1Db250cm9sIHJlZ2lzdGVycyB0bywgVXN1YWxseSBhIGRlc2NlbmRhbnQgb2YgRm9ybUdyb3VwIG9yXG4gICAgICAgKiBDaG9pY2VHcm91cFxuICAgICAgICogQHR5cGUge0Zvcm1SZWdpc3RyYXJIb3N0IHwgdW5kZWZpbmVkfVxuICAgICAgICovXG4gICAgICB0aGlzLl9wYXJlbnRGb3JtR3JvdXAgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoJ2Zvcm0tZWxlbWVudC1yZWdpc3RlcicsIHtcbiAgICAgICAgICBkZXRhaWw6IHsgZWxlbWVudDogdGhpcyB9LFxuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICB0aGlzLl9fdW5yZWdpc3RlckZvcm1FbGVtZW50KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHV0dGluZyB0aGlzIGluIGEgc2VwYXJhdGUgbWV0aG9kIG1ha2VzIHRlc3RpbmcgZWFzaWVyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfX3VucmVnaXN0ZXJGb3JtRWxlbWVudCgpIHtcbiAgICAgIGlmICh0aGlzLl9wYXJlbnRGb3JtR3JvdXApIHtcbiAgICAgICAgdGhpcy5fcGFyZW50Rm9ybUdyb3VwLnJlbW92ZUZvcm1FbGVtZW50KC8qKiBAdHlwZSB7KiAmIEZvcm1SZWdpc3RlcmluZ0hvc3R9ICovICh0aGlzKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG5leHBvcnQgY29uc3QgRm9ybVJlZ2lzdGVyaW5nTWl4aW4gPSBkZWR1cGVNaXhpbihGb3JtUmVnaXN0ZXJpbmdNaXhpbkltcGxlbWVudGF0aW9uKTtcbiIsImltcG9ydCB7IGNzcywgZGVkdXBlTWl4aW4sIGh0bWwsIG5vdGhpbmcsIFNsb3RNaXhpbiwgRGlzYWJsZWRNaXhpbiwgdXVpZCB9IGZyb20gJ0BsaW9uL2NvcmUnO1xuaW1wb3J0IHsgZ2V0QXJpYUVsZW1lbnRzSW5SaWdodERvbU9yZGVyIH0gZnJvbSAnLi91dGlscy9nZXRBcmlhRWxlbWVudHNJblJpZ2h0RG9tT3JkZXIuanMnO1xuaW1wb3J0IHsgVW5wYXJzZWFibGUgfSBmcm9tICcuL3ZhbGlkYXRlL1VucGFyc2VhYmxlLmpzJztcbmltcG9ydCB7IEZvcm1SZWdpc3RlcmluZ01peGluIH0gZnJvbSAnLi9yZWdpc3RyYXRpb24vRm9ybVJlZ2lzdGVyaW5nTWl4aW4uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BsaW9uL2NvcmUnKS5UZW1wbGF0ZVJlc3VsdH0gVGVtcGxhdGVSZXN1bHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BsaW9uL2NvcmUnKS5DU1NSZXN1bHR9IENTU1Jlc3VsdFxuICogQHR5cGVkZWYge2ltcG9ydCgnQGxpb24vY29yZScpLkNTU1Jlc3VsdEFycmF5fSBDU1NSZXN1bHRBcnJheVxuICogQHR5cGVkZWYge2ltcG9ydCgnQGxpb24vY29yZS90eXBlcy9TbG90TWl4aW5UeXBlcycpLlNsb3RzTWFwfSBTbG90c01hcFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi92YWxpZGF0ZS9MaW9uVmFsaWRhdGlvbkZlZWRiYWNrJykuTGlvblZhbGlkYXRpb25GZWVkYmFja30gTGlvblZhbGlkYXRpb25GZWVkYmFja1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMvY2hvaWNlLWdyb3VwL0Nob2ljZUlucHV0TWl4aW5UeXBlcycpLkNob2ljZUlucHV0SG9zdH0gQ2hvaWNlSW5wdXRIb3N0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy9Gb3JtQ29udHJvbE1peGluVHlwZXMuanMnKS5Gb3JtQ29udHJvbEhvc3R9IEZvcm1Db250cm9sSG9zdFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMvRm9ybUNvbnRyb2xNaXhpblR5cGVzLmpzJykuSFRNTEVsZW1lbnRXaXRoVmFsdWV9IEhUTUxFbGVtZW50V2l0aFZhbHVlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy9Gb3JtQ29udHJvbE1peGluVHlwZXMuanMnKS5Gb3JtQ29udHJvbE1peGlufSBGb3JtQ29udHJvbE1peGluXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy9Gb3JtQ29udHJvbE1peGluVHlwZXMuanMnKS5Nb2RlbFZhbHVlRXZlbnREZXRhaWxzfSBNb2RlbFZhbHVlRXZlbnREZXRhaWxzXG4gKi9cblxuLyoqXG4gKiAjRm9ybUNvbnRyb2xNaXhpbiA6XG4gKlxuICogVGhpcyBNaXhpbiBpcyBhIHNoYXJlZCBmdW5kYW1lbnQgZm9yIGFsbCBmb3JtIGNvbXBvbmVudHMsIGl0J3MgYXBwbGllZCBvbjpcbiAqIC0gTGlvbkZpZWxkICh3aGljaCBpcyBleHRlbmRlZCB0byBMaW9uSW5wdXQsIExpb25UZXh0YXJlYSwgTGlvblNlbGVjdCBldGMuIGV0Yy4pXG4gKiAtIExpb25GaWVsZHNldCAod2hpY2ggaXMgZXh0ZW5kZWQgdG8gTGlvblJhZGlvR3JvdXAsIExpb25DaGVja2JveEdyb3VwLCBMaW9uRm9ybSlcbiAqIEBwYXJhbSB7aW1wb3J0KCdAb3Blbi13Yy9kZWR1cGUtbWl4aW4nKS5Db25zdHJ1Y3RvcjxpbXBvcnQoJ0BsaW9uL2NvcmUnKS5MaXRFbGVtZW50Pn0gc3VwZXJjbGFzc1xuICogQHR5cGUge0Zvcm1Db250cm9sTWl4aW59XG4gKi9cbmNvbnN0IEZvcm1Db250cm9sTWl4aW5JbXBsZW1lbnRhdGlvbiA9IHN1cGVyY2xhc3MgPT5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdywgbm8tdW51c2VkLXZhcnNcbiAgLy8gQHRzLWlnbm9yZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzM2ODIxI2lzc3VlY29tbWVudC01ODgzNzUwNTFcbiAgY2xhc3MgRm9ybUNvbnRyb2xNaXhpbiBleHRlbmRzIEZvcm1SZWdpc3RlcmluZ01peGluKERpc2FibGVkTWl4aW4oU2xvdE1peGluKHN1cGVyY2xhc3MpKSkge1xuICAgIC8qKiBAdHlwZSB7YW55fSAqL1xuICAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHsgdHlwZTogU3RyaW5nLCByZWZsZWN0OiB0cnVlIH0sXG4gICAgICAgIHJlYWRPbmx5OiB7IHR5cGU6IEJvb2xlYW4sIGF0dHJpYnV0ZTogJ3JlYWRvbmx5JywgcmVmbGVjdDogdHJ1ZSB9LFxuICAgICAgICBsYWJlbDogU3RyaW5nLCAvLyBGSVhNRTogeyBhdHRyaWJ1dGU6IGZhbHNlIH0gYnJlYWtzIGEgYnVuY2ggb2YgdGVzdHMsIGJ1dCBzaG91bGRuJ3QuLi5cbiAgICAgICAgbGFiZWxTck9ubHk6IHsgdHlwZTogQm9vbGVhbiwgYXR0cmlidXRlOiAnbGFiZWwtc3Itb25seScsIHJlZmxlY3Q6IHRydWUgfSxcbiAgICAgICAgaGVscFRleHQ6IHsgdHlwZTogU3RyaW5nLCBhdHRyaWJ1dGU6ICdoZWxwLXRleHQnIH0sXG4gICAgICAgIG1vZGVsVmFsdWU6IHsgYXR0cmlidXRlOiBmYWxzZSB9LFxuICAgICAgICBfYXJpYUxhYmVsbGVkTm9kZXM6IHsgYXR0cmlidXRlOiBmYWxzZSB9LFxuICAgICAgICBfYXJpYURlc2NyaWJlZE5vZGVzOiB7IGF0dHJpYnV0ZTogZmFsc2UgfSxcbiAgICAgICAgX3JlcHJvcGFnYXRpb25Sb2xlOiB7IGF0dHJpYnV0ZTogZmFsc2UgfSxcbiAgICAgICAgX2lzUmVwcm9wYWdhdGlvbkVuZHBvaW50OiB7IGF0dHJpYnV0ZTogZmFsc2UgfSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGxhYmVsIHRleHQgZm9yIHRoZSBpbnB1dCBub2RlLlxuICAgICAqIFdoZW4gbm8gbGlnaHQgZG9tIGRlZmluZWQgdmlhIFtzbG90PWxhYmVsXSwgdGhpcyB2YWx1ZSB3aWxsIGJlIHVzZWQuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXQgbGFiZWwoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2xhYmVsIHx8ICh0aGlzLl9sYWJlbE5vZGUgJiYgdGhpcy5fbGFiZWxOb2RlLnRleHRDb250ZW50KSB8fCAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3VmFsdWVcbiAgICAgKi9cbiAgICBzZXQgbGFiZWwobmV3VmFsdWUpIHtcbiAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5sYWJlbDtcbiAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgdGhpcy5fX2xhYmVsID0gbmV3VmFsdWU7XG4gICAgICB0aGlzLnJlcXVlc3RVcGRhdGUoJ2xhYmVsJywgb2xkVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBoZWxwdCB0ZXh0IGZvciB0aGUgaW5wdXQgbm9kZS5cbiAgICAgKiBXaGVuIG5vIGxpZ2h0IGRvbSBkZWZpbmVkIHZpYSBbc2xvdD1oZWxwLXRleHRdLCB0aGlzIHZhbHVlIHdpbGwgYmUgdXNlZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0IGhlbHBUZXh0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19oZWxwVGV4dCB8fCAodGhpcy5faGVscFRleHROb2RlICYmIHRoaXMuX2hlbHBUZXh0Tm9kZS50ZXh0Q29udGVudCkgfHwgJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1ZhbHVlXG4gICAgICovXG4gICAgc2V0IGhlbHBUZXh0KG5ld1ZhbHVlKSB7XG4gICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuaGVscFRleHQ7XG4gICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICAgIHRoaXMuX19oZWxwVGV4dCA9IG5ld1ZhbHVlO1xuICAgICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCdoZWxwVGV4dCcsIG9sZFZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaWxsIGJlIHVzZWQgaW4gdmFsaWRhdGlvbiBtZXNzYWdlcyB0byByZWZlciB0byB0aGUgY3VycmVudCBmaWVsZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0IGZpZWxkTmFtZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZmllbGROYW1lIHx8IHRoaXMubGFiZWwgfHwgdGhpcy5uYW1lIHx8ICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldCBmaWVsZE5hbWUodmFsdWUpIHtcbiAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgdGhpcy5fX2ZpZWxkTmFtZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBjb25maWd1cmUgU2xvdE1peGluXG4gICAgICovXG4gICAgZ2V0IHNsb3RzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3VwZXIuc2xvdHMsXG4gICAgICAgIGxhYmVsOiAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICAgIGxhYmVsLnRleHRDb250ZW50ID0gdGhpcy5sYWJlbDtcbiAgICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICAgIH0sXG4gICAgICAgICdoZWxwLXRleHQnOiAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgaGVscFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBoZWxwVGV4dC50ZXh0Q29udGVudCA9IHRoaXMuaGVscFRleHQ7XG4gICAgICAgICAgcmV0dXJuIGhlbHBUZXh0O1xuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW50ZXJhY3RpdmUgKGZvcm0pIGVsZW1lbnQuIENhbiBiZSBhIG5hdGl2ZSBlbGVtZW50IGxpa2UgaW5wdXQvdGV4dGFyZWEvc2VsZWN0IG9yXG4gICAgICogYW4gZWxlbWVudCB3aXRoIHRhYmluZGV4ID4gLTFcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgZ2V0IF9pbnB1dE5vZGUoKSB7XG4gICAgICByZXR1cm4gLyoqIEB0eXBlIHtIVE1MRWxlbWVudFdpdGhWYWx1ZX0gKi8gKHRoaXMuX19nZXREaXJlY3RTbG90Q2hpbGQoJ2lucHV0JykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVsZW1lbnQgd2hlcmUgbGFiZWwgd2lsbCBiZSByZW5kZXJlZCB0b1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBnZXQgX2xhYmVsTm9kZSgpIHtcbiAgICAgIHJldHVybiAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyAodGhpcy5fX2dldERpcmVjdFNsb3RDaGlsZCgnbGFiZWwnKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRWxlbWVudCB3aGVyZSBoZWxwIHRleHQgd2lsbCBiZSByZW5kZXJlZCB0b1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBnZXQgX2hlbHBUZXh0Tm9kZSgpIHtcbiAgICAgIHJldHVybiAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyAodGhpcy5fX2dldERpcmVjdFNsb3RDaGlsZCgnaGVscC10ZXh0JykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVsZW1lbnQgd2hlcmUgdmFsaWRhdGlvbiBmZWVkYmFjayB3aWxsIGJlIHJlbmRlcmVkIHRvXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGdldCBfZmVlZGJhY2tOb2RlKCkge1xuICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7TGlvblZhbGlkYXRpb25GZWVkYmFja30gKi8gKHRoaXMuX19nZXREaXJlY3RTbG90Q2hpbGQoJ2ZlZWRiYWNrJykpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbmFtZSB0aGUgZWxlbWVudCB3aWxsIGJlIHJlZ2lzdGVyZWQgd2l0aCB0byB0aGUgLmZvcm1FbGVtZW50cyBjb2xsZWN0aW9uXG4gICAgICAgKiBvZiB0aGUgcGFyZW50LiBBbHNvLCBpdCBzZXJ2ZXMgYXMgdGhlIGtleSBvZiBrZXkvdmFsdWUgcGFpcnMgaW5cbiAgICAgICAqICBtb2RlbFZhbHVlL3NlcmlhbGl6ZWRWYWx1ZSBvYmplY3RzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICB0aGlzLm5hbWUgPSAnJztcblxuICAgICAgLyoqXG4gICAgICAgKiBBIEJvb2xlYW4gYXR0cmlidXRlIHdoaWNoLCBpZiBwcmVzZW50LCBpbmRpY2F0ZXMgdGhhdCB0aGUgdXNlciBzaG91bGQgbm90IGJlIGFibGUgdG8gZWRpdFxuICAgICAgICogdGhlIHZhbHVlIG9mIHRoZSBpbnB1dC4gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBkaXNhYmxlZCBhbmQgcmVhZG9ubHkgaXMgdGhhdCByZWFkLW9ubHlcbiAgICAgICAqIGNvbnRyb2xzIGNhbiBzdGlsbCBmdW5jdGlvbiwgd2hlcmVhcyBkaXNhYmxlZCBjb250cm9scyBnZW5lcmFsbHkgZG8gbm90IGZ1bmN0aW9uIGFzXG4gICAgICAgKiBjb250cm9scyB1bnRpbCB0aGV5IGFyZSBlbmFibGVkLlxuICAgICAgICogKEZyb206IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNhdHRyLXJlYWRvbmx5KVxuICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgKi9cbiAgICAgIHRoaXMucmVhZE9ubHkgPSBmYWxzZTtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbGFiZWwgdGV4dCBmb3IgdGhlIGlucHV0IG5vZGUuXG4gICAgICAgKiBXaGVuIG5vIHZhbHVlIGlzIGRlZmluZWQsIHRleHRDb250ZW50IG9mIFtzbG90PWxhYmVsXSB3aWxsIGJlIHVzZWRcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgIHRoaXMubGFiZWwgPSAnJztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbGFiZWwgd2lsbCBvbmx5IGJlIHZpc2libGUgZm9yIHNyY2VlbiByZWFkZXJzIHdoZW4gdHJ1ZVxuICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgKi9cbiAgICAgIHRoaXMubGFiZWxTck9ubHkgPSBmYWxzZTtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgaGVscHQgdGV4dCBmb3IgdGhlIGlucHV0IG5vZGUuXG4gICAgICAgKiBXaGVuIG5vIHZhbHVlIGlzIGRlZmluZWQsIHRleHRDb250ZW50IG9mIFtzbG90PWhlbHAtdGV4dF0gd2lsbCBiZSB1c2VkXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICB0aGlzLmhlbHBUZXh0ID0gJyc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1vZGVsIHZhbHVlIGlzIHRoZSByZXN1bHQgb2YgdGhlIHBhcnNlciBmdW5jdGlvbih3aGVuIGF2YWlsYWJsZSkuXG4gICAgICAgKiBJdCBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyB0aGUgaW50ZXJuYWwgdmFsdWUgdXNlZCBmb3IgdmFsaWRhdGlvbiBhbmQgcmVhc29uaW5nL2xvZ2ljLlxuICAgICAgICogVGhlIG1vZGVsIHZhbHVlIGlzICdyZWFkeSBmb3IgY29uc3VtcHRpb24nIGJ5IHRoZSBvdXRzaWRlIHdvcmxkICh0aGluayBvZiBhIERhdGVcbiAgICAgICAqIG9iamVjdCBvciBhIGZsb2F0KS4gVGhlIG1vZGVsVmFsdWUgY2FuKGFuZCBpcyByZWNvbW1lbmRlZCB0bykgYmUgdXNlZCBhcyBib3RoIGlucHV0XG4gICAgICAgKiB2YWx1ZSBhbmQgb3V0cHV0IHZhbHVlIG9mIHRoZSBgTGlvbkZpZWxkYC5cbiAgICAgICAqXG4gICAgICAgKiBFeGFtcGxlczpcbiAgICAgICAqIC0gRm9yIGEgZGF0ZSBpbnB1dDogYSBTdHJpbmcgJzIwLzAxLzE5OTknIHdpbGwgYmUgY29udmVydGVkIHRvIG5ldyBEYXRlKCcxOTk5LzAxLzIwJylcbiAgICAgICAqIC0gRm9yIGEgbnVtYmVyIGlucHV0OiBhIGZvcm1hdHRlZCBTdHJpbmcgJzEuMjM0LDU2JyB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIE51bWJlcjpcbiAgICAgICAqICAgMTIzNC41NlxuICAgICAgICovXG4gICAgICAvLyBUT0RPOiB3ZSBjYW4gcHJvYmFibHkgc2V0IHRoaXMgdXAgcHJvcGVybHkgb25jZSBwcm9wZXJ0IGVmZmVjdHMgcnVuIGZyb20gZmlyc3RVcGRhdGVkXG4gICAgICAvLyB0aGlzLm1vZGVsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAvKipcbiAgICAgICAqIFVuaXF1ZSBpZCB0aGF0IGNhbiBiZSB1c2VkIGluIGFsbCBsaWdodCBkb21cbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuX2lucHV0SWQgPSB1dWlkKHRoaXMubG9jYWxOYW1lKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBDb250YWlucyBhbGwgZWxlbWVudHMgdGhhdCBzaG91bGQgZW5kIHVwIGluIGFyaWEtbGFiZWxsZWRieSBvZiBgLl9pbnB1dE5vZGVgXG4gICAgICAgKiBAdHlwZSB7SFRNTEVsZW1lbnRbXX1cbiAgICAgICAqL1xuICAgICAgdGhpcy5fYXJpYUxhYmVsbGVkTm9kZXMgPSBbXTtcblxuICAgICAgLyoqXG4gICAgICAgKiBDb250YWlucyBhbGwgZWxlbWVudHMgdGhhdCBzaG91bGQgZW5kIHVwIGluIGFyaWEtZGVzY3JpYmVkYnkgb2YgYC5faW5wdXROb2RlYFxuICAgICAgICogQHR5cGUge0hUTUxFbGVtZW50W119XG4gICAgICAgKi9cbiAgICAgIHRoaXMuX2FyaWFEZXNjcmliZWROb2RlcyA9IFtdO1xuXG4gICAgICAvKipcbiAgICAgICAqIEJhc2VkIG9uIHRoZSByb2xlLCBkZXRhaWxzIG9mIGhhbmRsaW5nIG1vZGVsLXZhbHVlLWNoYW5nZWQgcmVwcm9wYWdhdGlvbiBkaWZmZXIuXG4gICAgICAgKiBAdHlwZSB7J2NoaWxkJ3wnY2hvaWNlLWdyb3VwJ3wnZmllbGRzZXQnfVxuICAgICAgICovXG4gICAgICB0aGlzLl9yZXByb3BhZ2F0aW9uUm9sZSA9ICdjaGlsZCc7XG5cbiAgICAgIC8qKlxuICAgICAgICogQnkgZGVmYXVsdCwgYSBmaWVsZCB3aXRoIF9yZXByb3BhZ2F0aW9uUm9sZSAnY2hvaWNlLWdyb3VwJyB3aWxsIGFjdCBhcyBhblxuICAgICAgICogJ2VuZHBvaW50Jy4gVGhpcyBtZWFucyBpdCB3aWxsIGJlIGNvbnNpZGVyZWQgYXMgYW4gaW5kaXZpZHVhbCBmaWVsZDogZm9yXG4gICAgICAgKiBhIHNlbGVjdCwgaW5kaXZpZHVhbCBvcHRpb25zIHdpbGwgbm90IGJlIHBhcnQgb2YgdGhlIGZvcm1QYXRoLiBUaGV5XG4gICAgICAgKiB3aWxsLlxuICAgICAgICogU2ltaWxhcmx5LCBjb21wb25lbnRzIHRoYXQgKGExMXkgd2lzZSkgbmVlZCB0byBiZSBmaWVsZHNldHMsIGJ1dCAnaW50ZXJhY3Rpb24gd2lzZSdcbiAgICAgICAqIChmcm9tIEFwcGxpY2F0aW9uIERldmVsb3BlciBwZXJzcGVjdGl2ZSkgbmVlZCB0byBiZSBtb3JlIGxpa2UgZmllbGRzXG4gICAgICAgKiAodGhpbmsgb2YgYW4gYW1vdW50LWlucHV0IHdpdGggYSBjdXJyZW5jeSBzZWxlY3QgYm94IG5leHQgdG8gaXQpLCBjYW4gc2V0IHRoaXNcbiAgICAgICAqIHRvIHRydWUgdG8gaGlkZSBwcml2YXRlIGludGVybmFscyBpbiB0aGUgZm9ybVBhdGguXG4gICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgdGhpcy5faXNSZXByb3BhZ2F0aW9uRW5kcG9pbnQgPSBmYWxzZTtcblxuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAnbW9kZWwtdmFsdWUtY2hhbmdlZCcsXG4gICAgICAgIC8qKiBAdHlwZSB7RXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdH0gKi8gKHRoaXMuX19yZXByb3BhZ2F0ZUNoaWxkcmVuVmFsdWVzKSxcbiAgICAgICk7XG4gICAgICAvKiogQHR5cGUge0V2ZW50TGlzdGVuZXJ9ICovXG4gICAgICB0aGlzLl9vbkxhYmVsQ2xpY2sgPSB0aGlzLl9vbkxhYmVsQ2xpY2suYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICB0aGlzLl9lbmhhbmNlTGlnaHREb21DbGFzc2VzKCk7XG4gICAgICB0aGlzLl9lbmhhbmNlTGlnaHREb21BMTF5KCk7XG4gICAgICB0aGlzLl90cmlnZ2VySW5pdGlhbE1vZGVsVmFsdWVDaGFuZ2VkRXZlbnQoKTtcblxuICAgICAgaWYgKHRoaXMuX2xhYmVsTm9kZSkge1xuICAgICAgICB0aGlzLl9sYWJlbE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9vbkxhYmVsQ2xpY2spO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgIGlmICh0aGlzLl9sYWJlbE5vZGUpIHtcbiAgICAgICAgdGhpcy5fbGFiZWxOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25MYWJlbENsaWNrKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQHBhcmFtIHtpbXBvcnQoJ0BsaW9uL2NvcmUnKS5Qcm9wZXJ0eVZhbHVlcyB9IGNoYW5nZWRQcm9wZXJ0aWVzICovXG4gICAgdXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcykge1xuICAgICAgc3VwZXIudXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7XG5cbiAgICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ19hcmlhTGFiZWxsZWROb2RlcycpKSB7XG4gICAgICAgIHRoaXMuX19yZWZsZWN0QXJpYUF0dHIoXG4gICAgICAgICAgJ2FyaWEtbGFiZWxsZWRieScsXG4gICAgICAgICAgdGhpcy5fYXJpYUxhYmVsbGVkTm9kZXMsXG4gICAgICAgICAgdGhpcy5fX3Jlb3JkZXJBcmlhTGFiZWxsZWROb2RlcyxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnX2FyaWFEZXNjcmliZWROb2RlcycpKSB7XG4gICAgICAgIHRoaXMuX19yZWZsZWN0QXJpYUF0dHIoXG4gICAgICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknLFxuICAgICAgICAgIHRoaXMuX2FyaWFEZXNjcmliZWROb2RlcyxcbiAgICAgICAgICB0aGlzLl9fcmVvcmRlckFyaWFEZXNjcmliZWROb2RlcyxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnbGFiZWwnKSAmJiB0aGlzLl9sYWJlbE5vZGUpIHtcbiAgICAgICAgdGhpcy5fbGFiZWxOb2RlLnRleHRDb250ZW50ID0gdGhpcy5sYWJlbDtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnaGVscFRleHQnKSAmJiB0aGlzLl9oZWxwVGV4dE5vZGUpIHtcbiAgICAgICAgdGhpcy5faGVscFRleHROb2RlLnRleHRDb250ZW50ID0gdGhpcy5oZWxwVGV4dDtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnbmFtZScpKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAvKiogQHByaXZhdGVFdmVudCAqL1xuICAgICAgICAgIG5ldyBDdXN0b21FdmVudCgnZm9ybS1lbGVtZW50LW5hbWUtY2hhbmdlZCcsIHtcbiAgICAgICAgICAgIGRldGFpbDogeyBvbGROYW1lOiBjaGFuZ2VkUHJvcGVydGllcy5nZXQoJ25hbWUnKSwgbmV3TmFtZTogdGhpcy5uYW1lIH0sXG4gICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAcHJvdGVjdGVkICovXG4gICAgX3RyaWdnZXJJbml0aWFsTW9kZWxWYWx1ZUNoYW5nZWRFdmVudCgpIHtcbiAgICAgIHRoaXMuX2Rpc3BhdGNoSW5pdGlhbE1vZGVsVmFsdWVDaGFuZ2VkRXZlbnQoKTtcbiAgICB9XG5cbiAgICAvKiogQHByb3RlY3RlZCAqL1xuICAgIF9lbmhhbmNlTGlnaHREb21DbGFzc2VzKCkge1xuICAgICAgaWYgKHRoaXMuX2lucHV0Tm9kZSkge1xuICAgICAgICB0aGlzLl9pbnB1dE5vZGUuY2xhc3NMaXN0LmFkZCgnZm9ybS1jb250cm9sJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBwcm90ZWN0ZWQgKi9cbiAgICBfZW5oYW5jZUxpZ2h0RG9tQTExeSgpIHtcbiAgICAgIGNvbnN0IHsgX2lucHV0Tm9kZSwgX2xhYmVsTm9kZSwgX2hlbHBUZXh0Tm9kZSwgX2ZlZWRiYWNrTm9kZSB9ID0gdGhpcztcblxuICAgICAgaWYgKF9pbnB1dE5vZGUpIHtcbiAgICAgICAgX2lucHV0Tm9kZS5pZCA9IF9pbnB1dE5vZGUuaWQgfHwgdGhpcy5faW5wdXRJZDtcbiAgICAgIH1cbiAgICAgIGlmIChfbGFiZWxOb2RlKSB7XG4gICAgICAgIF9sYWJlbE5vZGUuc2V0QXR0cmlidXRlKCdmb3InLCB0aGlzLl9pbnB1dElkKTtcbiAgICAgICAgdGhpcy5hZGRUb0FyaWFMYWJlbGxlZEJ5KF9sYWJlbE5vZGUsIHsgaWRQcmVmaXg6ICdsYWJlbCcgfSk7XG4gICAgICB9XG4gICAgICBpZiAoX2hlbHBUZXh0Tm9kZSkge1xuICAgICAgICB0aGlzLmFkZFRvQXJpYURlc2NyaWJlZEJ5KF9oZWxwVGV4dE5vZGUsIHsgaWRQcmVmaXg6ICdoZWxwLXRleHQnIH0pO1xuICAgICAgfVxuICAgICAgaWYgKF9mZWVkYmFja05vZGUpIHtcbiAgICAgICAgLy8gR2VuZXJpYyBmb2N1cy9ibHVyIGhhbmRsaW5nIHRoYXQgd29ya3MgZm9yIGJvdGggRmllbGRzL0Zvcm1Hcm91cHNcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdmb2N1c2luJywgKCkgPT4ge1xuICAgICAgICAgIF9mZWVkYmFja05vZGUuc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAncG9saXRlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0JywgKCkgPT4ge1xuICAgICAgICAgIF9mZWVkYmFja05vZGUuc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAnYXNzZXJ0aXZlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkVG9BcmlhRGVzY3JpYmVkQnkoX2ZlZWRiYWNrTm9kZSwgeyBpZFByZWZpeDogJ2ZlZWRiYWNrJyB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2VuaGFuY2VMaWdodERvbUExMXlGb3JBZGRpdGlvbmFsU2xvdHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmhhbmNlcyBhZGRpdGlvbmFsIHNsb3RzKHByZWZpeCwgc3VmZml4LCBiZWZvcmUsIGFmdGVyKSBkZWZpbmVkIGJ5IGRldmVsb3Blci5cbiAgICAgKlxuICAgICAqIFdoZW4gYm9vbGVhbiBhdHRyaWJ1dGUgZGF0YS1sYWJlbCBvciBkYXRhLWRlc2NyaXB0aW9uIGlzIGZvdW5kLFxuICAgICAqIHRoZSBzbG90IGVsZW1lbnQgd2lsbCBiZSBjb25uZWN0ZWQgdG8gdGhlIGlucHV0IHZpYSBhcmlhLWxhYmVsbGVkYnkgb3IgYXJpYS1kZXNjcmliZWRieVxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IGFkZGl0aW9uYWxTbG90c1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfZW5oYW5jZUxpZ2h0RG9tQTExeUZvckFkZGl0aW9uYWxTbG90cyhcbiAgICAgIGFkZGl0aW9uYWxTbG90cyA9IFsncHJlZml4JywgJ3N1ZmZpeCcsICdiZWZvcmUnLCAnYWZ0ZXInXSxcbiAgICApIHtcbiAgICAgIGFkZGl0aW9uYWxTbG90cy5mb3JFYWNoKGFkZGl0aW9uYWxTbG90ID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX19nZXREaXJlY3RTbG90Q2hpbGQoYWRkaXRpb25hbFNsb3QpO1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGF0YS1sYWJlbCcpKSB7XG4gICAgICAgICAgICB0aGlzLmFkZFRvQXJpYUxhYmVsbGVkQnkoZWxlbWVudCwgeyBpZFByZWZpeDogYWRkaXRpb25hbFNsb3QgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGF0YS1kZXNjcmlwdGlvbicpKSB7XG4gICAgICAgICAgICB0aGlzLmFkZFRvQXJpYURlc2NyaWJlZEJ5KGVsZW1lbnQsIHsgaWRQcmVmaXg6IGFkZGl0aW9uYWxTbG90IH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2lsbCBoYW5kbGUgaGVscCB0ZXh0LCB2YWxpZGF0aW9uIGZlZWRiYWNrIGFuZCBjaGFyYWN0ZXIgY291bnRlcixcbiAgICAgKiBwcmVmaXgvc3VmZml4L2JlZm9yZS9hZnRlciAoaWYgdGhleSBjb250YWluIGRhdGEtZGVzY3JpcHRpb24gZmxhZyBhdHRyKS5cbiAgICAgKiBBbHNvLCBjb250ZW50cyBvZiBpZCByZWZlcmVuY2VzIHRoYXQgd2lsbCBiZSBwdXQgaW4gdGhlIDxsaW9uLWZpZWxkPi5fYXJpYURlc2NyaWJlZGJ5IHByb3BlcnR5XG4gICAgICogZnJvbSBhbiBleHRlcm5hbCBjb250ZXh0LCB3aWxsIGJlIHJlYWQgYnkgYSBzY3JlZW4gcmVhZGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyTmFtZVxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnRbXX0gbm9kZXNcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSByZW9yZGVyXG4gICAgICovXG4gICAgX19yZWZsZWN0QXJpYUF0dHIoYXR0ck5hbWUsIG5vZGVzLCByZW9yZGVyKSB7XG4gICAgICBpZiAodGhpcy5faW5wdXROb2RlKSB7XG4gICAgICAgIGlmIChyZW9yZGVyKSB7XG4gICAgICAgICAgY29uc3QgaW5zaWRlTm9kZXMgPSBub2Rlcy5maWx0ZXIobiA9PiB0aGlzLmNvbnRhaW5zKG4pKTtcbiAgICAgICAgICBjb25zdCBvdXRzaWRlTm9kZXMgPSBub2Rlcy5maWx0ZXIobiA9PiAhdGhpcy5jb250YWlucyhuKSk7XG5cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICBub2RlcyA9IFsuLi5nZXRBcmlhRWxlbWVudHNJblJpZ2h0RG9tT3JkZXIoaW5zaWRlTm9kZXMpLCAuLi5vdXRzaWRlTm9kZXNdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0cmluZyA9IG5vZGVzLm1hcChuID0+IG4uaWQpLmpvaW4oJyAnKTtcbiAgICAgICAgdGhpcy5faW5wdXROb2RlLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IFJlbmRlciBSZXN1bHQ6XG4gICAgICogPGRpdiBjbGFzcz1cImZvcm0tZmllbGRfX2dyb3VwLW9uZVwiPlxuICAgICAqICAgPGRpdiBjbGFzcz1cImZvcm0tZmllbGRfX2xhYmVsXCI+XG4gICAgICogICAgIDxzbG90IG5hbWU9XCJsYWJlbFwiPjwvc2xvdD5cbiAgICAgKiAgIDwvZGl2PlxuICAgICAqICAgPHNtYWxsIGNsYXNzPVwiZm9ybS1maWVsZF9faGVscC10ZXh0XCI+XG4gICAgICogICAgIDxzbG90IG5hbWU9XCJoZWxwLXRleHRcIj48L3Nsb3Q+XG4gICAgICogICA8L3NtYWxsPlxuICAgICAqIDwvZGl2PlxuICAgICAqIDxkaXYgY2xhc3M9XCJmb3JtLWZpZWxkX19ncm91cC10d29cIj5cbiAgICAgKiAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuICAgICAqICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBfX2JlZm9yZVwiPlxuICAgICAqICAgICAgIDxzbG90IG5hbWU9XCJiZWZvcmVcIj48L3Nsb3Q+XG4gICAgICogICAgIDwvZGl2PlxuICAgICAqICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBfX2NvbnRhaW5lclwiPlxuICAgICAqICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cF9fcHJlZml4XCI+XG4gICAgICogICAgICAgICA8c2xvdCBuYW1lPVwicHJlZml4XCI+PC9zbG90PlxuICAgICAqICAgICAgIDwvZGl2PlxuICAgICAqICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cF9faW5wdXRcIj5cbiAgICAgKiAgICAgICAgIDxzbG90IG5hbWU9XCJpbnB1dFwiPjwvc2xvdD5cbiAgICAgKiAgICAgICA8L2Rpdj5cbiAgICAgKiAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBfX3N1ZmZpeFwiPlxuICAgICAqICAgICAgICAgPHNsb3QgbmFtZT1cInN1ZmZpeFwiPjwvc2xvdD5cbiAgICAgKiAgICAgICA8L2Rpdj5cbiAgICAgKiAgICAgPC9kaXY+XG4gICAgICogICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cF9fYWZ0ZXJcIj5cbiAgICAgKiAgICAgICA8c2xvdCBuYW1lPVwiYWZ0ZXJcIj48L3Nsb3Q+XG4gICAgICogICAgIDwvZGl2PlxuICAgICAqICAgPC9kaXY+XG4gICAgICogICA8ZGl2IGNsYXNzPVwiZm9ybS1maWVsZF9fZmVlZGJhY2tcIj5cbiAgICAgKiAgICAgPHNsb3QgbmFtZT1cImZlZWRiYWNrXCI+PC9zbG90PlxuICAgICAqICAgPC9kaXY+XG4gICAgICogPC9kaXY+XG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWZpZWxkX19ncm91cC1vbmVcIj4ke3RoaXMuX2dyb3VwT25lVGVtcGxhdGUoKX08L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZmllbGRfX2dyb3VwLXR3b1wiPiR7dGhpcy5fZ3JvdXBUd29UZW1wbGF0ZSgpfTwvZGl2PlxuICAgICAgYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtUZW1wbGF0ZVJlc3VsdH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2dyb3VwT25lVGVtcGxhdGUoKSB7XG4gICAgICByZXR1cm4gaHRtbGAgJHt0aGlzLl9sYWJlbFRlbXBsYXRlKCl9ICR7dGhpcy5faGVscFRleHRUZW1wbGF0ZSgpfSBgO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1RlbXBsYXRlUmVzdWx0fVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfZ3JvdXBUd29UZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiBodG1sYCAke3RoaXMuX2lucHV0R3JvdXBUZW1wbGF0ZSgpfSAke3RoaXMuX2ZlZWRiYWNrVGVtcGxhdGUoKX0gYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtUZW1wbGF0ZVJlc3VsdH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBfbGFiZWxUZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiBodG1sYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1maWVsZF9fbGFiZWxcIj5cbiAgICAgICAgICA8c2xvdCBuYW1lPVwibGFiZWxcIj48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtUZW1wbGF0ZVJlc3VsdH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBfaGVscFRleHRUZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiBodG1sYFxuICAgICAgICA8c21hbGwgY2xhc3M9XCJmb3JtLWZpZWxkX19oZWxwLXRleHRcIj5cbiAgICAgICAgICA8c2xvdCBuYW1lPVwiaGVscC10ZXh0XCI+PC9zbG90PlxuICAgICAgICA8L3NtYWxsPlxuICAgICAgYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtUZW1wbGF0ZVJlc3VsdH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2lucHV0R3JvdXBUZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiBodG1sYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj5cbiAgICAgICAgICAke3RoaXMuX2lucHV0R3JvdXBCZWZvcmVUZW1wbGF0ZSgpfVxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cF9fY29udGFpbmVyXCI+XG4gICAgICAgICAgICAke3RoaXMuX2lucHV0R3JvdXBQcmVmaXhUZW1wbGF0ZSgpfSAke3RoaXMuX2lucHV0R3JvdXBJbnB1dFRlbXBsYXRlKCl9XG4gICAgICAgICAgICAke3RoaXMuX2lucHV0R3JvdXBTdWZmaXhUZW1wbGF0ZSgpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICR7dGhpcy5faW5wdXRHcm91cEFmdGVyVGVtcGxhdGUoKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICBgO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1RlbXBsYXRlUmVzdWx0fVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIF9pbnB1dEdyb3VwQmVmb3JlVGVtcGxhdGUoKSB7XG4gICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwX19iZWZvcmVcIj5cbiAgICAgICAgICA8c2xvdCBuYW1lPVwiYmVmb3JlXCI+PC9zbG90PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIGA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7VGVtcGxhdGVSZXN1bHQgfCBub3RoaW5nfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfaW5wdXRHcm91cFByZWZpeFRlbXBsYXRlKCkge1xuICAgICAgcmV0dXJuICFBcnJheS5mcm9tKHRoaXMuY2hpbGRyZW4pLmZpbmQoY2hpbGQgPT4gY2hpbGQuc2xvdCA9PT0gJ3ByZWZpeCcpXG4gICAgICAgID8gbm90aGluZ1xuICAgICAgICA6IGh0bWxgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBfX3ByZWZpeFwiPlxuICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwicHJlZml4XCI+PC9zbG90PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtUZW1wbGF0ZVJlc3VsdH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBfaW5wdXRHcm91cElucHV0VGVtcGxhdGUoKSB7XG4gICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwX19pbnB1dFwiPlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJpbnB1dFwiPjwvc2xvdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICBgO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1RlbXBsYXRlUmVzdWx0IHwgbm90aGluZ31cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2lucHV0R3JvdXBTdWZmaXhUZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiAhQXJyYXkuZnJvbSh0aGlzLmNoaWxkcmVuKS5maW5kKGNoaWxkID0+IGNoaWxkLnNsb3QgPT09ICdzdWZmaXgnKVxuICAgICAgICA/IG5vdGhpbmdcbiAgICAgICAgOiBodG1sYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwX19zdWZmaXhcIj5cbiAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cInN1ZmZpeFwiPjwvc2xvdD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIGA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7VGVtcGxhdGVSZXN1bHR9XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgX2lucHV0R3JvdXBBZnRlclRlbXBsYXRlKCkge1xuICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cF9fYWZ0ZXJcIj5cbiAgICAgICAgICA8c2xvdCBuYW1lPVwiYWZ0ZXJcIj48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtUZW1wbGF0ZVJlc3VsdH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBfZmVlZGJhY2tUZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiBodG1sYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1maWVsZF9fZmVlZGJhY2tcIj5cbiAgICAgICAgICA8c2xvdCBuYW1lPVwiZmVlZGJhY2tcIj48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGZvciBSZXF1aXJlZCB2YWxpZGF0aW9uIGFuZCBjb21wdXRhdGlvbiBvZiBpbnRlcmFjdGlvbiBzdGF0ZXNcbiAgICAgKiBAcGFyYW0ge2FueX0gbW9kZWxWYWx1ZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9pc0VtcHR5KG1vZGVsVmFsdWUgPSAvKiogQHR5cGUge2FueX0gKi8gKHRoaXMpLm1vZGVsVmFsdWUpIHtcbiAgICAgIGxldCB2YWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICBpZiAoLyoqIEB0eXBlIHthbnl9ICovICh0aGlzKS5tb2RlbFZhbHVlIGluc3RhbmNlb2YgVW5wYXJzZWFibGUpIHtcbiAgICAgICAgdmFsdWUgPSAvKiogQHR5cGUge2FueX0gKi8gKHRoaXMpLm1vZGVsVmFsdWUudmlld1ZhbHVlO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVja3MgZm9yIGVtcHR5IHBsYXRmb3JtIHR5cGVzOiBPYmplY3RzLCBBcnJheXMsIERhdGVzXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuICFPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbWl4ZWQtb3BlcmF0b3JzXG4gICAgICAvLyBDaGVja3MgZm9yIGVtcHR5IHBsYXRmb3JtIHR5cGVzOiBOdW1iZXJzLCBCb29sZWFuc1xuICAgICAgY29uc3QgaXNOdW1iZXJWYWx1ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgKHZhbHVlID09PSAwIHx8IE51bWJlci5pc05hTih2YWx1ZSkpO1xuICAgICAgY29uc3QgaXNCb29sZWFuVmFsdWUgPSB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyAmJiB2YWx1ZSA9PT0gZmFsc2U7XG5cbiAgICAgIHJldHVybiAhdmFsdWUgJiYgIWlzTnVtYmVyVmFsdWUgJiYgIWlzQm9vbGVhblZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFsbCBDU1MgYmVsb3cgaXMgd3JpdHRlbiBmcm9tIGEgZ2VuZXJpYyBtaW5kc2V0LCBmb2xsb3dpbmcgQkVNIGNvbnZlbnRpb25zOlxuICAgICAqIGh0dHBzOi8vZW4uYmVtLmluZm8vbWV0aG9kb2xvZ3kvXG4gICAgICogQWx0aG91Z2ggdGhlIENTUyBhbmQgSFRNTCBhcmUgaW1wbGVtZW50ZWQgYnkgdGhlIGNvbXBvbmVudCwgdGhleSBzaG91bGQgYmUgcmVnYXJkZWQgYXNcbiAgICAgKiB0b3RhbGx5IGRlY291cGxlZC5cbiAgICAgKlxuICAgICAqIE5vdCBvbmx5IGRvZXMgdGhpcyBmb3JjZSB1cyB0byB3cml0ZSBiZXR0ZXIgc3RydWN0dXJlZCBjc3MsIGl0IGFsc28gYWxsb3dzIGZvciBmdXR1cmVcbiAgICAgKiByZXVzYWJpbGl0eSBpbiBtYW55IGRpZmZlcmVudCB3YXlzIGxpa2U6XG4gICAgICogIC0gZGlzYWJsaW5nIHNoYWRvdyBET00gZm9yIGEgY29tcG9uZW50IChmb3Igd2F0ZXIgcHJvb2YgZW5jYXBzdWxhdGlvbiBjYW4gYmUgY29tYmluZWQgd2l0aFxuICAgICAqICAgIGEgYnVpbGQgc3RlcClcbiAgICAgKiAgLSBlYXNpZXIgdHJhbnNsYXRpb24gdG8gbW9yZSBmbGV4aWJsZSwgV2ViQ29tcG9uZW50cyBhZ25vc3RpYyBzb2x1dGlvbnMgbGlrZSBKU1NcbiAgICAgKiAgICAoYWxsb3dpbmcgZXh0ZW5kcywgbWl4aW5zLCByZWFzb25pbmcsIElERSBpbnRlZ3JhdGlvbiwgdHJlZSBzaGFraW5nIGV0Yy4pXG4gICAgICogIC0gZXhwb3J0IHRvIGEgQ1NTIG1vZHVsZSBmb3IgcmV1c2UgaW4gYW4gb3V0ZXIgY29udGV4dFxuICAgICAqXG4gICAgICpcbiAgICAgKiBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBIVE1MIHN0cnVjdHVyZSBpcyBwdXJwb3NlbHkgJ2xvb3NlJywgYWxsb3dpbmcgbXVsdGlwbGUgZGVzaWduIHN5c3RlbXNcbiAgICAgKiB0byBiZSBjb21wYXRpYmxlXG4gICAgICogd2l0aCB0aGUgQ1NTIGNvbXBvbmVudC5cbiAgICAgKiBOb3RlIHRoYXQgZXZlcnkgb2NjdXJlbmNlIG9mICc6OnNsb3R0ZWQoKiknIGNhbiBiZSByZXdyaXR0ZW4gdG8gJz4gKicgZm9yIHVzZSBpbiBhbiBvdGhlclxuICAgICAqIGNvbnRleHRcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIHtibG9ja30gLmZvcm0tZmllbGRcbiAgICAgKlxuICAgICAqIFN0cnVjdHVyZTpcbiAgICAgKiAtIHtlbGVtZW50fSAgLmZvcm0tZmllbGRfX2xhYmVsIDogYSB3cmFwcGVyIGVsZW1lbnQgYXJvdW5kIHRoZSBwcm9qZWN0ZWQgbGFiZWxcbiAgICAgKiAtIHtlbGVtZW50fSAgLmZvcm0tZmllbGRfX2hlbHAtdGV4dCAob3B0aW9uYWwpIDogYSB3cmFwcGVyIGVsZW1lbnQgYXJvdW5kIHRoZSBwcm9qZWN0ZWRcbiAgICAgKiAgICAgICAgICAgICAgIGhlbHAtdGV4dFxuICAgICAqIC0ge2Jsb2NrfSAgICAuaW5wdXQtZ3JvdXAgOiBhIGNvbnRhaW5lciBhcm91bmQgdGhlIGlucHV0IGVsZW1lbnQsIGluY2x1ZGluZyBwcmVmaXhlcyBhbmRcbiAgICAgKiAgICAgICAgICAgICAgIHN1ZmZpeGVzXG4gICAgICogLSB7ZWxlbWVudH0gIC5mb3JtLWZpZWxkX19mZWVkYmFjayAob3B0aW9uYWwpIDogYSB3cmFwcGVyIGVsZW1lbnQgYXJvdW5kIHRoZSBwcm9qZWN0ZWRcbiAgICAgKiAgICAgICAgICAgICAgICh2YWxpZGF0aW9uKSBmZWVkYmFjayBtZXNzYWdlXG4gICAgICpcbiAgICAgKiBNb2RpZmllcnM6XG4gICAgICogLSB7c3RhdGV9IFtkaXNhYmxlZF0gd2hlbiAuZm9ybS1jb250cm9sICg8aW5wdXQ+LCA8dGV4dGFyZWE+IGV0Yy4pIGhhcyBkaXNhYmxlZCBzZXRcbiAgICAgKiAgICAgICAgICAgIHRvIHRydWVcbiAgICAgKiAtIHtzdGF0ZX0gW2ZpbGxlZF0gd2hldGhlciA8aW5wdXQ+IGhhcyBhIHZhbHVlXG4gICAgICogLSB7c3RhdGV9IFt0b3VjaGVkXSB3aGV0aGVyIHRoZSB1c2VyIGhhZCBibHVycmVkIHRoZSBmaWVsZCBvbmNlXG4gICAgICogLSB7c3RhdGV9IFtkaXJ0eV0gd2hldGhlciB0aGUgdmFsdWUgaGFzIGNoYW5nZWQgc2luY2UgaW5pdGlhbCB2YWx1ZVxuICAgICAqXG4gICAgICogVE9ETzogdXBkYXRlIHN0YXRlcyBiZWxvd1xuICAgICAqIFRoZXNlIGNsYXNzZXMgYXJlIG5vdyBhdHRyaWJ1dGVzLiBDaGVjayB0aGVtIGFnYWlucyB0aGUgbmV3IGF0dHJpYnV0ZSBuYW1lcyBpbnNpZGUgVmFsaWRhdGVNaXhpblxuICAgICAqIGFuZCBJbnRlcmFjdGlvblN0YXRlTWl4aW4uIFNvbWUgc3RhdGVzIGdvdCByZW5hbWVkLiBNYWtlIHN1cmUgdG8gdXNlIHRoZSBjb3JyZWN0IG9uZXMhXG4gICAgICogLSB7c3RhdGV9IC5zdGF0ZS1mb2N1c2VkOiB3aGVuIC5mb3JtLWNvbnRyb2wgKDxpbnB1dD4sIDx0ZXh0YXJlYT4gZXRjLikgPGlucHV0PiBoYXMgZm9jdXNcbiAgICAgKiAtIHtzdGF0ZX0gLnN0YXRlLWludmFsaWQ6IHdoZW4gaW5wdXQgaGFzIGVycm9yKHMpIChyZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhleSBzaG91bGQgYmVcbiAgICAgKiAgICAgICAgICAgIHNob3duIHRvIHRoZSB1c2VyKVxuICAgICAqIC0ge3N0YXRlfSAuc3RhdGUtZXJyb3I6IHdoZW4gaW5wdXQgaGFzIGVycm9yKHMpIGFuZCB0aGlzL3RoZXNlIHNob3VsZCBiZSBzaG93biB0byB0aGUgdXNlclxuICAgICAqIC0ge3N0YXRlfSAuc3RhdGUtd2FybmluZzogd2hlbiBpbnB1dCBoYXMgd2FybmluZyhzKSBhbmQgdGhpcy90aGVzZSBzaG91bGQgYmUgc2hvd24gdG8gdGhlXG4gICAgICogICAgICAgICAgICB1c2VyXG4gICAgICogLSB7c3RhdGV9IC5zdGF0ZS1pbmZvOiB3aGVuIGlucHV0IGhhcyBpbmZvIGZlZWRiYWNrIG1lc3NhZ2UocykgYW5kIHRoaXMvdGhlc2Ugc2hvdWxkIGJlIHNob3duXG4gICAgICogICAgICAgICAgICB0byB0aGUgdXNlclxuICAgICAqIC0ge3N0YXRlfSAuc3RhdGUtc3VjY2Vzczogd2hlbiBpbnB1dCBoYXMgc3VjY2VzcyBmZWVkYmFjayBtZXNzYWdlKHMpIGFuZCB0aGlzL3RoZXNlIHNob3VsZCBiZVxuICAgICAqICAgICAgICAgICAgc2hvd24gdG8gdGhlIHVzZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIHtibG9ja30gLmlucHV0LWdyb3VwXG4gICAgICpcbiAgICAgKiBTdHJ1Y3R1cmU6XG4gICAgICogLSB7ZWxlbWVudH0gLmlucHV0LWdyb3VwX19iZWZvcmUgKG9wdGlvbmFsKSA6IGEgcHJlZml4IHRoYXQgcmVzaWRlcyBvdXRzaWRlIHRoZSBjb250YWluZXJcbiAgICAgKiAtIHtlbGVtZW50fSAuaW5wdXQtZ3JvdXBfX2NvbnRhaW5lciA6IGFuIGlubmVyIGNvbnRhaW5lcjogdGhpcyBlbGVtZW50IGNvbnRhaW5zIGFsbCBzdHlsaW5nXG4gICAgICogIC0ge2VsZW1lbnR9IC5pbnB1dC1ncm91cF9fcHJlZml4IChvcHRpb25hbCkgOiBhIHByZWZpeCB0aGF0IHJlc2lkZXMgaW4gdGhlIGNvbnRhaW5lcixcbiAgICAgKiAgICAgICAgICAgICAgIGFsbG93aW5nIGl0IHRvIGJlIGRldGVjdGFibGUgYXMgYSA6Zmlyc3QtY2hpbGRcbiAgICAgKiAgLSB7ZWxlbWVudH0gLmlucHV0LWdyb3VwX19pbnB1dCA6IGEgd3JhcHBlciBhcm91bmQgdGhlIGZvcm0tY29udHJvbCBjb21wb25lbnRcbiAgICAgKiAgIC0ge2Jsb2NrfSAuZm9ybS1jb250cm9sIDogdGhlIGFjdHVhbCBpbnB1dCBlbGVtZW50IChpbnB1dC9zZWxlY3QvdGV4dGFyZWEpXG4gICAgICogIC0ge2VsZW1lbnR9IC5pbnB1dC1ncm91cF9fc3VmZml4IChvcHRpb25hbCkgOiBhIHN1ZmZpeCB0aGF0IHJlc2lkZXMgaW5zaWRlIHRoZSBjb250YWluZXIsXG4gICAgICogICAgICAgICAgICAgICBhbGxvd2luZyBpdCB0byBiZSBkZXRlY3RhYmxlIGFzIGEgOmxhc3QtY2hpbGRcbiAgICAgKiAgLSB7ZWxlbWVudH0gLmlucHV0LWdyb3VwX19ib3R0b20gKG9wdGlvbmFsKSA6IHBsYWNlaG9sZGVyIGVsZW1lbnQgZm9yIGFkZGl0aW9uYWwgc3R5bGluZ1xuICAgICAqICAgICAgICAgICAgICAgKGxpa2UgYW4gYW5pbWF0ZWQgbGluZSBmb3IgbWF0ZXJpYWwgZGVzaWduIGlucHV0KVxuICAgICAqIC0ge2VsZW1lbnR9IC5pbnB1dC1ncm91cF9fYWZ0ZXIgKG9wdGlvbmFsKSA6ICBhIHN1ZmZpeCB0aGF0IHJlc2lkZXMgb3V0c2lkZSB0aGUgY29udGFpbmVyXG4gICAgICovXG4gICAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBjc3NgXG4gICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgICAgIHtibG9ja30gLmZvcm0tZmllbGRcbiAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICA6aG9zdChbaGlkZGVuXSkge1xuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICA6aG9zdChbZGlzYWJsZWRdKSB7XG4gICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICA6aG9zdChbZGlzYWJsZWRdKSAuZm9ybS1maWVsZF9fbGFiZWwgOjpzbG90dGVkKCopLFxuICAgICAgICAgIDpob3N0KFtkaXNhYmxlZF0pIC5mb3JtLWZpZWxkX19oZWxwLXRleHQgOjpzbG90dGVkKCopIHtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1kaXNhYmxlZC10ZXh0LWNvbG9yLCAjNzY3Njc2KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICA6aG9zdChbbGFiZWwtc3Itb25seV0pIC5mb3JtLWZpZWxkX19sYWJlbCB7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgICB3aWR0aDogMXB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAxcHg7XG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgY2xpcC1wYXRoOiBpbnNldCgxMDAlKTtcbiAgICAgICAgICAgIGNsaXA6IHJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KTtcbiAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgICAgICBib3JkZXI6IDA7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgICAgICAge2Jsb2NrfSAuaW5wdXQtZ3JvdXBcbiAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgICAgICAgLmlucHV0LWdyb3VwX19jb250YWluZXIge1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuaW5wdXQtZ3JvdXBfX2lucHV0IHtcbiAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8qKioqKiB7c3RhdGV9IDpkaXNhYmxlZCAqKioqKi9cbiAgICAgICAgICA6aG9zdChbZGlzYWJsZWRdKSAuaW5wdXQtZ3JvdXAgOjpzbG90dGVkKFtzbG90PSdpbnB1dCddKSB7XG4gICAgICAgICAgICBjb2xvcjogdmFyKC0tZGlzYWJsZWQtdGV4dC1jb2xvciwgIzc2NzY3Nik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICAgICAgICB7YmxvY2t9IC5mb3JtLWNvbnRyb2xcbiAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgICAgICAgIC5pbnB1dC1ncm91cF9fY29udGFpbmVyID4gLmlucHV0LWdyb3VwX19pbnB1dCA6OnNsb3R0ZWQoLmZvcm0tY29udHJvbCkge1xuICAgICAgICAgICAgZmxleDogMSAxIGF1dG87XG4gICAgICAgICAgICBtYXJnaW46IDA7IC8qIHJlbW92ZSBpbnB1dCBtYXJnaW4gaW4gU2FmYXJpICovXG4gICAgICAgICAgICBmb250LXNpemU6IDEwMCU7IC8qIG5vcm1hbGl6ZSBkZWZhdWx0IGlucHV0IGZvbnQtc2l6ZSAqL1xuICAgICAgICAgIH1cbiAgICAgICAgYCxcbiAgICAgIF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBleHBvc2VzIGRlc2NyaXBpb24gZWxlbWVudHMgdGhhdCBhIEZvcm1Hcm91cCBzaG91bGQgZXhwb3NlIHRvIGl0c1xuICAgICAqIGNoaWxkcmVuLiBTZWUgRm9ybUdyb3VwTWl4aW4uX19nZXRBbGxEZXNjcmlwdGlvbkVsZW1lbnRzSW5QYXJlbnRDaGFpbigpXG4gICAgICogQHJldHVybiB7QXJyYXkuPEhUTUxFbGVtZW50Pn1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgLy8gUmV0dXJucyBkb20gcmVmZXJlbmNlcyB0byBhbGwgZWxlbWVudHMgdGhhdCBzaG91bGQgYmUgcmVmZXJyZWQgdG8gYnkgZmllbGQocylcbiAgICBfZ2V0QXJpYURlc2NyaXB0aW9uRWxlbWVudHMoKSB7XG4gICAgICByZXR1cm4gW3RoaXMuX2hlbHBUZXh0Tm9kZSwgdGhpcy5fZmVlZGJhY2tOb2RlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gYWRkIGV4dHJhIGVsZW1lbnQgcmVmZXJlbmNlcyB0byBhcmlhLWxhYmVsbGVkYnkgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge3tpZFByZWZpeD86c3RyaW5nOyByZW9yZGVyPzogYm9vbGVhbn19IGN1c3RvbUNvbmZpZ1xuICAgICAqL1xuICAgIGFkZFRvQXJpYUxhYmVsbGVkQnkoZWxlbWVudCwgeyBpZFByZWZpeCA9ICcnLCByZW9yZGVyID0gdHJ1ZSB9ID0ge30pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgZWxlbWVudC5pZCA9IGVsZW1lbnQuaWQgfHwgYCR7aWRQcmVmaXh9LSR7dGhpcy5faW5wdXRJZH1gO1xuICAgICAgaWYgKCF0aGlzLl9hcmlhTGFiZWxsZWROb2Rlcy5pbmNsdWRlcyhlbGVtZW50KSkge1xuICAgICAgICB0aGlzLl9hcmlhTGFiZWxsZWROb2RlcyA9IFsuLi50aGlzLl9hcmlhTGFiZWxsZWROb2RlcywgZWxlbWVudF07XG4gICAgICAgIC8vIFRoaXMgdmFsdWUgd2lsbCBiZSByZWFkIHdoZW4gd2UgbmVlZCB0byByZWZsZWN0IHRvIGF0dHJcbiAgICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgICB0aGlzLl9fcmVvcmRlckFyaWFMYWJlbGxlZE5vZGVzID0gQm9vbGVhbihyZW9yZGVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gcmVtb3ZlIGVsZW1lbnQgcmVmZXJlbmNlcyBmcm9tIGFyaWEtbGFiZWxsZWRieSBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgICAqL1xuICAgIHJlbW92ZUZyb21BcmlhTGFiZWxsZWRCeShlbGVtZW50KSB7XG4gICAgICBpZiAodGhpcy5fYXJpYUxhYmVsbGVkTm9kZXMuaW5jbHVkZXMoZWxlbWVudCkpIHtcbiAgICAgICAgdGhpcy5fYXJpYUxhYmVsbGVkTm9kZXMuc3BsaWNlKHRoaXMuX2FyaWFMYWJlbGxlZE5vZGVzLmluZGV4T2YoZWxlbWVudCksIDEpO1xuICAgICAgICB0aGlzLl9hcmlhTGFiZWxsZWROb2RlcyA9IFsuLi50aGlzLl9hcmlhTGFiZWxsZWROb2Rlc107XG4gICAgICAgIC8vIFRoaXMgdmFsdWUgd2lsbCBiZSByZWFkIHdoZW4gd2UgbmVlZCB0byByZWZsZWN0IHRvIGF0dHJcbiAgICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgICB0aGlzLl9fcmVvcmRlckFyaWFMYWJlbGxlZE5vZGVzID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRvIGFkZCBlbGVtZW50IHJlZmVyZW5jZXMgdG8gYXJpYS1kZXNjcmliZWRieSBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7e2lkUHJlZml4PzpzdHJpbmc7IHJlb3JkZXI/OiBib29sZWFufX0gY3VzdG9tQ29uZmlnXG4gICAgICovXG4gICAgYWRkVG9BcmlhRGVzY3JpYmVkQnkoZWxlbWVudCwgeyBpZFByZWZpeCA9ICcnLCByZW9yZGVyID0gdHJ1ZSB9ID0ge30pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgZWxlbWVudC5pZCA9IGVsZW1lbnQuaWQgfHwgYCR7aWRQcmVmaXh9LSR7dGhpcy5faW5wdXRJZH1gO1xuICAgICAgaWYgKCF0aGlzLl9hcmlhRGVzY3JpYmVkTm9kZXMuaW5jbHVkZXMoZWxlbWVudCkpIHtcbiAgICAgICAgdGhpcy5fYXJpYURlc2NyaWJlZE5vZGVzID0gWy4uLnRoaXMuX2FyaWFEZXNjcmliZWROb2RlcywgZWxlbWVudF07XG4gICAgICAgIC8vIFRoaXMgdmFsdWUgd2lsbCBiZSByZWFkIHdoZW4gd2UgbmVlZCB0byByZWZsZWN0IHRvIGF0dHJcbiAgICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgICB0aGlzLl9fcmVvcmRlckFyaWFEZXNjcmliZWROb2RlcyA9IEJvb2xlYW4ocmVvcmRlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRvIHJlbW92ZSBlbGVtZW50IHJlZmVyZW5jZXMgZnJvbSBhcmlhLWRlc2NyaWJlZGJ5IGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAgICovXG4gICAgcmVtb3ZlRnJvbUFyaWFEZXNjcmliZWRCeShlbGVtZW50KSB7XG4gICAgICBpZiAodGhpcy5fYXJpYURlc2NyaWJlZE5vZGVzLmluY2x1ZGVzKGVsZW1lbnQpKSB7XG4gICAgICAgIHRoaXMuX2FyaWFEZXNjcmliZWROb2Rlcy5zcGxpY2UodGhpcy5fYXJpYURlc2NyaWJlZE5vZGVzLmluZGV4T2YoZWxlbWVudCksIDEpO1xuICAgICAgICB0aGlzLl9hcmlhRGVzY3JpYmVkTm9kZXMgPSBbLi4udGhpcy5fYXJpYURlc2NyaWJlZE5vZGVzXTtcbiAgICAgICAgLy8gVGhpcyB2YWx1ZSB3aWxsIGJlIHJlYWQgd2hlbiB3ZSBuZWVkIHRvIHJlZmxlY3QgdG8gYXR0clxuICAgICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICAgIHRoaXMuX19yZW9yZGVyQXJpYUxhYmVsbGVkTm9kZXMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2xvdE5hbWVcbiAgICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudCB8IHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBfX2dldERpcmVjdFNsb3RDaGlsZChzbG90TmFtZSkge1xuICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7SFRNTEVsZW1lbnRbXX0gKi8gKEFycmF5LmZyb20odGhpcy5jaGlsZHJlbikpLmZpbmQoXG4gICAgICAgIGVsID0+IGVsLnNsb3QgPT09IHNsb3ROYW1lLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBfZGlzcGF0Y2hJbml0aWFsTW9kZWxWYWx1ZUNoYW5nZWRFdmVudCgpIHtcbiAgICAgIC8vIFdoZW4gd2UgYXJlIG5vdCBhIGZpZWxkc2V0IC8gY2hvaWNlLWdyb3VwLCB3ZSBkb24ndCBuZWVkIHRvIHdhaXQgZm9yIG91ciBjaGlsZHJlblxuICAgICAgLy8gdG8gc2VuZCBhIHVuaWZpZWQgZXZlbnRcbiAgICAgIGlmICh0aGlzLl9yZXByb3BhZ2F0aW9uUm9sZSA9PT0gJ2NoaWxkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEluaXRpYWxseSB3ZSBkb24ndCByZXByb3BhZ2F0ZSBtb2RlbC12YWx1ZS1jaGFuZ2VkIGV2ZW50cyBjb21pbmdcbiAgICAgIC8vIGZyb20gY2hpbGRyZW4uIE9uIGZpcnN0VXBkYXRlZCB3ZSByZS1kaXNwYXRjaCB0aGlzIGV2ZW50IHRvIG1haW50YWluXG4gICAgICAvLyAnY291bnQgY29uc2lzdGVuY3knICh0byBub3QgY29uZnVzZSB0aGUgYXBwbGljYXRpb24gZGV2ZWxvcGVyIHdpdGggYVxuICAgICAgLy8gbGFyZ2UgbnVtYmVyIG9mIGluaXRpYWwgZXZlbnRzKS4gSW5pdGlhbGx5IHRoZSBzb3VyY2UgZmllbGQgd2lsbCBub3RcbiAgICAgIC8vIGJlIHBhcnQgb2YgdGhlIGZvcm1QYXRoIGJ1dCBhZnRlcndhcmRzIGl0IHdpbGwuXG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICB0aGlzLl9fcmVwcm9wYWdhdGVDaGlsZHJlbkluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KCdtb2RlbC12YWx1ZS1jaGFuZ2VkJywge1xuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgZGV0YWlsOiAvKiogQHR5cGUge01vZGVsVmFsdWVFdmVudERldGFpbHN9ICovICh7XG4gICAgICAgICAgICBmb3JtUGF0aDogW3RoaXNdLFxuICAgICAgICAgICAgaW5pdGlhbGl6ZTogdHJ1ZSxcbiAgICAgICAgICAgIGlzVHJpZ2dlcmVkQnlVc2VyOiBmYWxzZSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhvb2sgZm9yIFN1YmNsYXNzZXJzIHRvIGFkZCBsb2dpYyBiZWZvcmUgcmVwcm9wYWdhdGlvblxuICAgICAqIEBjb25maWd1cmFibGVcbiAgICAgKiBAcGFyYW0ge0N1c3RvbUV2ZW50fSBldlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcywgbm8tdW51c2VkLXZhcnNcbiAgICBfb25CZWZvcmVSZXByb3BhZ2F0ZUNoaWxkcmVuVmFsdWVzKGV2KSB7fVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtDdXN0b21FdmVudH0gZXZcbiAgICAgKi9cbiAgICBfX3JlcHJvcGFnYXRlQ2hpbGRyZW5WYWx1ZXMoZXYpIHtcbiAgICAgIC8vIEFsbG93cyBzdWIgY2xhc3NlcyB0byBpbnRlcm5hbGx5IGxpc3RlbiB0byB0aGUgY2hpbGRyZW4gY2hhbmdlIGV2ZW50c1xuICAgICAgLy8gKGJlZm9yZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gaXMgY2FsbGVkIGJlbG93KS5cbiAgICAgIHRoaXMuX29uQmVmb3JlUmVwcm9wYWdhdGVDaGlsZHJlblZhbHVlcyhldik7XG4gICAgICAvLyBOb3JtYWxpemUgdGFyZ2V0LCB3ZSBhbHNvIG1pZ2h0IGdldCBpdCBmcm9tICdwb3J0YWxzJyAocmljaCBzZWxlY3QpXG4gICAgICBjb25zdCB0YXJnZXQgPSAoZXYuZGV0YWlsICYmIGV2LmRldGFpbC5lbGVtZW50KSB8fCBldi50YXJnZXQ7XG4gICAgICBjb25zdCBpc0VuZHBvaW50ID1cbiAgICAgICAgdGhpcy5faXNSZXByb3BhZ2F0aW9uRW5kcG9pbnQgfHwgdGhpcy5fcmVwcm9wYWdhdGlvblJvbGUgPT09ICdjaG9pY2UtZ3JvdXAnO1xuXG4gICAgICAvLyBQcmV2ZW50IGV0ZXJuYWwgbG9vcHMgYWZ0ZXIgd2Ugc2VudCB0aGUgZXZlbnQgYmVsb3cuXG4gICAgICBpZiAodGFyZ2V0ID09PSB0aGlzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gQS4gU3RvcCBzaWJsaW5nIGhhbmRsZXJzXG4gICAgICAvL1xuICAgICAgLy8gTWFrZSBzdXJlIG91ciBzaWJsaW5nIGV2ZW50IGxpc3RlbmVycyAoYWRkZWQgYnkgQXBwbGljYXRpb24gZGV2ZWxvcGVycykgd2lsbCBub3QgZ2V0XG4gICAgICAvLyB0aGUgY2hpbGQgbW9kZWwtdmFsdWUtY2hhbmdlZCBldmVudCwgYnV0IHRoZSByZXByb3BhZ2F0ZWQgb25lIGF0IHRoZSBib3R0b20gb2YgdGhpc1xuICAgICAgLy8gbWV0aG9kXG4gICAgICBldi5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblxuICAgICAgLy8gQjEuIEFyZSB3ZSBzdGlsbCBpbml0aWFsaXppbmc/IElmIHNvLCBoYWx0Li4uXG4gICAgICAvL1xuICAgICAgLy8gU3RvcCByZXByb3BhZ2F0aW5nIGNoaWxkcmVuIGV2ZW50cyBiZWZvcmUgZmlyc3RVcGRhdGVkIGFuZCBtYWtlIHN1cmUgd2UgZGUgbm90XG4gICAgICAvLyByZXByb3BhZ2F0ZSBpbml0IGV2ZW50cyBvZiBvdXIgY2hpbGRyZW4gKHdlIGFscmVhZHkgc2VudCBvdXIgb3duXG4gICAgICAvLyBpbml0aWFsIG1vZGVsLXZhbHVlLWNoYW5nZSBldmVudCBpbiBmaXJzdFVwZGF0ZWQpXG4gICAgICBjb25zdCBpc0dyb3VwID0gdGhpcy5fcmVwcm9wYWdhdGlvblJvbGUgIT09ICdjaGlsZCc7IC8vID0+IGZpZWxkc2V0IG9yIGNob2ljZS1ncm91cFxuICAgICAgY29uc3QgaXNTZWxmSW5pdGlhbGl6aW5nID0gaXNHcm91cCAmJiAhdGhpcy5fX3JlcHJvcGFnYXRlQ2hpbGRyZW5Jbml0aWFsaXplZDtcbiAgICAgIGNvbnN0IGlzQ2hpbGRHcm91cEluaXRpYWxpemluZyA9IGV2LmRldGFpbCAmJiBldi5kZXRhaWwuaW5pdGlhbGl6ZTtcbiAgICAgIGlmIChpc1NlbGZJbml0aWFsaXppbmcgfHwgaXNDaGlsZEdyb3VwSW5pdGlhbGl6aW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gQjIuIEFyZSB3ZSBhIHNpbmdsZSBjaG9pY2UgY2hvaWNlLWdyb3VwPyBJZiBzbywgaGFsdCB3aGVuIHRhcmdldCB1bmNoZWNrZWRcbiAgICAgIC8vIGFuZCBzb21ldGhpbmcgZWxzZSBpcyBjaGVja2VkLCBtZWFuaW5nIHdlIHdpbGwgZ2V0XG4gICAgICAvLyBhbm90aGVyIG1vZGVsLXZhbHVlLWNoYW5nZWQgZGlzcGF0Y2ggZm9yIHRoZSBjaGVja2VkIHRhcmdldFxuICAgICAgLy9cbiAgICAgIC8vIFdlIG9ubHkgc2VuZCB0aGUgY2hlY2tlZCBjaGFuZ2VkIHVwIChub3QgdGhlIHVuY2hlY2tlZCkuIEluIHRoaXMgd2F5IGEgY2hvaWNlIGdyb3VwXG4gICAgICAvLyAocmFkaW8tZ3JvdXAsIGNoZWNrYm94LWdyb3VwLCBzZWxlY3QvbGlzdGJveCkgYWN0cyBhcyBhbiAnZW5kcG9pbnQnIChhIHNpbmdsZSBGaWVsZClcbiAgICAgIC8vIGp1c3QgbGlrZSB0aGUgbmF0aXZlIDxzZWxlY3Q+XG4gICAgICBpZiAoIXRoaXMuX3JlcHJvcGFnYXRpb25Db25kaXRpb24odGFyZ2V0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEMxLiBXZSBhcmUgcmVhZHkgdG8gZGlzcGF0Y2guIENyZWF0ZSBhIGZvcm1QYXRoXG4gICAgICAvL1xuICAgICAgLy8gQ29tcHV0ZSB0aGUgZm9ybVBhdGguIENob2ljZSBncm91cHMgYXJlIHJlZ2FyZGVkICdlbmQgcG9pbnRzJ1xuICAgICAgbGV0IHBhcmVudEZvcm1QYXRoID0gW107XG4gICAgICBpZiAoIWlzRW5kcG9pbnQpIHtcbiAgICAgICAgcGFyZW50Rm9ybVBhdGggPSAoZXYuZGV0YWlsICYmIGV2LmRldGFpbC5mb3JtUGF0aCkgfHwgW3RhcmdldF07XG4gICAgICB9XG4gICAgICBjb25zdCBmb3JtUGF0aCA9IFsuLi5wYXJlbnRGb3JtUGF0aCwgdGhpc107XG5cbiAgICAgIC8vIEMyLiBGaW5hbGx5LCByZWRpc3BhdGNoIGEgZnJlc2ggbW9kZWwtdmFsdWUtY2hhbmdlZCBldmVudCBmcm9tIG91ciBob3N0LCBjb25zdW1hYmxlXG4gICAgICAvLyBmb3IgYW4gQXBwbGljYXRpb24gRGV2ZWxvcGVyXG4gICAgICAvL1xuICAgICAgLy8gU2luY2UgZm9yIGExMXkgZXZlcnl0aGluZyBuZWVkcyB0byBiZSBpbiBsaWdodGRvbSwgd2UgZG9uJ3QgYWRkICdjb21wb3NlZDp0cnVlJ1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoJ21vZGVsLXZhbHVlLWNoYW5nZWQnLCB7XG4gICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICBkZXRhaWw6IC8qKiBAdHlwZSB7TW9kZWxWYWx1ZUV2ZW50RGV0YWlsc30gKi8gKHtcbiAgICAgICAgICAgIGZvcm1QYXRoLFxuICAgICAgICAgICAgaXNUcmlnZ2VyZWRCeVVzZXI6IEJvb2xlYW4oZXYuZGV0YWlsPy5pc1RyaWdnZXJlZEJ5VXNlciksXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCYXNlZCBvbiBwcm92aWRlZCB0YXJnZXQsIHRoaXMgY29uZGl0aW9uIGRldGVybWluZXMgd2hldGhlciByZWNlaXZlZCBtb2RlbC12YWx1ZS1jaGFuZ2VkXG4gICAgICogZXZlbnQgc2hvdWxkIGJlIHJlcHJvcGFnYXRlZFxuICAgICAqIEBwYXJhbSB7Rm9ybUNvbnRyb2xIb3N0fSB0YXJnZXRcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQG92ZXJyaWRhYmxlXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBfcmVwcm9wYWdhdGlvbkNvbmRpdGlvbih0YXJnZXQpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKHRhcmdldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG92ZXJyaWRhYmxlXG4gICAgICogQSBTdWJjbGFzc2VyIHNob3VsZCBvbmx5IG92ZXJyaWRlIHRoaXMgbWV0aG9kIGlmIHRoZSBpbnRlcmFjdGl2ZSBlbGVtZW50XG4gICAgICogKFtzbG90PWlucHV0XSkgaXMgbm90IGEgbmF0aXZlIGVsZW1lbnQobGlrZSBpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdClcbiAgICAgKiB0aGF0IGFscmVhZHkgcmVjZWl2ZXMgZm9jdXMgb24gbGFiZWwgY2xpY2suXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIF9vbkxhYmVsQ2xpY2soKSB7XG4gICAgICogICB0aGlzLl9pbnZva2VyTm9kZS5mb2N1cygpO1xuICAgICAqIH1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBfb25MYWJlbENsaWNrKCkge31cbiAgfTtcblxuZXhwb3J0IGNvbnN0IEZvcm1Db250cm9sTWl4aW4gPSBkZWR1cGVNaXhpbihGb3JtQ29udHJvbE1peGluSW1wbGVtZW50YXRpb24pO1xuIiwiLyoqXG4gKiBHZW5lcmF0ZXMgcmFuZG9tIHVuaXF1ZSBpZGVudGlmaWVyIChmb3IgZG9tIGVsZW1lbnRzKVxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeFxuICogQHJldHVybiB7c3RyaW5nfSB1bmlxdWUgaWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHV1aWQocHJlZml4ID0gJycpIHtcbiAgY29uc3QgZWxlbWVudE5hbWUgPSBwcmVmaXgubGVuZ3RoID4gMCA/IGAke3ByZWZpeH0tYCA6ICcnO1xuICByZXR1cm4gYCR7ZWxlbWVudE5hbWV9JHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgMTApfWA7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgY2xvc2VseSBtaW1pY3MgdGhlIG5hdGl2ZWx5XG4gKiBzdXBwb3J0ZWQgSFRNTEZvcm1Db250cm9sc0NvbGxlY3Rpb24uIEl0IGNhbiBiZSBhY2Nlc3NlZFxuICogYm90aCBsaWtlIGFuIGFycmF5IGFuZCBhbiBvYmplY3QgKGJhc2VkIG9uIGNvbnRyb2wvZWxlbWVudCBuYW1lcykuXG4gKiBAZXhhbXBsZVxuICogLy8gVGhpcyBpcyBob3cgYSBuYXRpdmUgZm9ybSB3b3JrczpcbiAqIDxmb3JtPlxuICogICA8aW5wdXQgaWQ9XCJhXCIgbmFtZT1cImFcIj5cbiAqICAgPGZpZWxkc2V0PlxuICogICAgICA8aW5wdXQgaWQ9XCJiMVwiIG5hbWU9XCJiW11cIj5cbiAqICAgICAgPGlucHV0IGlkPVwiYjJcIiBuYW1lPVwiYltdXCI+XG4gKiAgICAgIDxpbnB1dCBpZD1cImNcIiBuYW1lPVwiY1wiPlxuICogICA8L2ZpZWxkc2V0PlxuICogICA8c2VsZWN0IGlkPVwiZFwiIG5hbWU9XCJkXCI+XG4gKiAgICAgPG9wdGlvbj48L29wdGlvbj5cbiAqICAgPC9zZWxlY3Q+XG4gKiAgIDxmaWVsZHNldD5cbiAqICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgaWQ9XCJlMVwiIG5hbWU9XCJlXCI+XG4gKiAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIGlkPVwiZTJcIiBuYW1lPVwiZVwiPlxuICogICA8L2ZpZWxkc2V0PlxuICogICA8c2VsZWN0IGlkPVwiZlwiIG5hbWU9XCJmXCIgbXVsdGlwbGU+XG4gKiAgICAgPG9wdGlvbj48L29wdGlvbj5cbiAqICAgPC9zZWxlY3Q+XG4gKiAgIDxmaWVsZHNldD5cbiAqICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJnMVwiIG5hbWU9XCJnXCI+XG4gKiAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiZzJcIiBuYW1lPVwiZ1wiPlxuICogICA8L2ZpZWxkc2V0PlxuICogPC9mb3JtPlxuICpcbiAqIGZvcm0uZWxlbWVudHNbMF07IC8vIEVsZW1lbnQgaW5wdXQjYVxuICogZm9ybS5lbGVtZW50c1sxXTsgLy8gRWxlbWVudCBpbnB1dCNiMVxuICogZm9ybS5lbGVtZW50c1syXTsgLy8gRWxlbWVudCBpbnB1dCNiMlxuICogZm9ybS5lbGVtZW50c1szXTsgLy8gRWxlbWVudCBpbnB1dCNjXG4gKiBmb3JtLmVsZW1lbnRzLmE7ICAvLyBFbGVtZW50IGlucHV0I2FcbiAqIGZvcm0uZWxlbWVudHMuYjsgIC8vIFJhZGlvTm9kZUxpc3Q8RWxlbWVudD4gW2lucHV0I2IxLCBpbnB1dCNiMl1cbiAqIGZvcm0uZWxlbWVudHMuYzsgIC8vIGlucHV0I2NcbiAqXG4gKiAvLyBUaGlzIGlzIGhvdyBhIExpb24gZm9ybSB3b3JrcyAoZm9yIHNpbXBsaWNpdHkgTGlvbiBjb21wb25lbnRzIGhhdmUgdGhlICdsJy1wcmVmaXgpOlxuICogPGwtZm9ybT5cbiAqICA8Zm9ybT5cbiAqXG4gKiAgICA8IS0tIGZpZWxkcyAtLT5cbiAqXG4gKiAgICA8bC1pbnB1dCBpZD1cImFcIiBuYW1lPVwiYVwiPjwvbC1pbnB1dD5cbiAqXG4gKlxuICogICAgPCEtLSBmaWVsZCBzZXRzICgnc3ViIGZvcm1zJykgLS0+XG4gKlxuICogICAgPGwtZmllbGRzZXQ+XG4gKiAgICAgIDxsLWlucHV0IGlkPVwiYjFcIiBuYW1lPVwiYlwiPC9sLWlucHV0PlxuICogICAgICA8bC1pbnB1dCBpZD1cImIyXCIgbmFtZT1cImJcIj48L2wtaW5wdXQ+XG4gKiAgICAgIDxsLWlucHV0IGlkPVwiY1wiIG5hbWU9XCJjXCI+PC9sLWlucHV0PlxuICogICAgPC9sLWZpZWxkc2V0PlxuICpcbiAqXG4gKiAgICA8IS0tIGNob2ljZSBncm91cHMgKGNoaWxkcmVuIGFyZSAnZW5kIHBvaW50cycpIC0tPlxuICpcbiAqICAgIDwhLS0gc2luZ2xlIHNlbGVjdGlvbiBjaG9pY2UgZ3JvdXBzIC0tPlxuICogICAgPGwtc2VsZWN0IGlkPVwiZFwiIG5hbWU9XCJkXCI+XG4gKiAgICAgIDxsLW9wdGlvbj48L2wtb3B0aW9uPlxuICogICAgPC9sLXNlbGVjdD5cbiAqICAgIDxsLXJhZGlvLWdyb3VwIGlkPVwiZVwiIG5hbWU9XCJlXCI+XG4gKiAgICAgIDxsLXJhZGlvPjwvbC1yYWRpbz5cbiAqICAgICAgPGwtcmFkaW8+PC9sLXJhZGlvPlxuICogICAgPC9sLXJhZGlvLWdyb3VwPlxuICpcbiAqICAgIDwhLS0gbXVsdGkgc2VsZWN0aW9uIGNob2ljZSBncm91cHMgLS0+XG4gKiAgICA8bC1zZWxlY3QgaWQ9XCJmXCIgbmFtZT1cImZcIiBtdWx0aXBsZT5cbiAqICAgICAgPGwtb3B0aW9uPjwvbC1vcHRpb24+XG4gKiAgICA8L2wtc2VsZWN0PlxuICogICAgPGwtY2hlY2tib3gtZ3JvdXAgaWQ9XCJnXCIgbmFtZT1cImdcIj5cbiAqICAgICAgPGwtY2hlY2tib3g+PC9sLWNoZWNrYm94PlxuICogICAgICA8bC1jaGVja2JveD48L2wtY2hlY2tib3g+XG4gKiAgICA8L2wtY2hlY2tib3gtZ3JvdXA+XG4gKlxuICogIDwvZm9ybT5cbiAqIDwvbC1mb3JtPlxuICpcbiAqIGxpb25Gb3JtLmZvcm1FbGVtZW50c1swXTsgICAgICAgICAgICAgICAgICAvLyBFbGVtZW50IGwtaW5wdXQjYVxuICogbGlvbkZvcm0uZm9ybUVsZW1lbnRzWzFdOyAgICAgICAgICAgICAgICAgIC8vIEVsZW1lbnQgbC1pbnB1dCNiMVxuICogbGlvbkZvcm0uZm9ybUVsZW1lbnRzWzJdOyAgICAgICAgICAgICAgICAgIC8vIEVsZW1lbnQgbC1pbnB1dCNiMlxuICogbGlvbkZvcm0uZm9ybUVsZW1lbnRzLmE7ICAgICAgICAgICAgICAgICAgIC8vIEVsZW1lbnQgbC1pbnB1dCNhXG4gKiBsaW9uRm9ybS5mb3JtRWxlbWVudHNbJ2JbXSddOyAgICAgICAgICAgICAgLy8gQXJyYXk8RWxlbWVudD4gW2wtaW5wdXQjYjEsIGwtaW5wdXQjYjJdXG4gKiBsaW9uRm9ybS5mb3JtRWxlbWVudHMuYzsgICAgICAgICAgICAgICAgICAgLy8gRWxlbWVudCBsLWlucHV0I2NcbiAqXG4gKiBsaW9uRm9ybS5mb3JtRWxlbWVudHNbZC1nXS5mb3JtRWxlbWVudHM7IC8vIEFycmF5PEVsZW1lbnQ+XG4gKlxuICogbGlvbkZvcm0uZm9ybUVsZW1lbnRzW2QtZV0udmFsdWU7ICAgICAgICAgIC8vIFN0cmluZ1xuICogbGlvbkZvcm0uZm9ybUVsZW1lbnRzW2YtZ10udmFsdWU7ICAgICAgICAgIC8vIEFycmF5PFN0cmluZz5cbiAqL1xuZXhwb3J0IGNsYXNzIEZvcm1Db250cm9sc0NvbGxlY3Rpb24gZXh0ZW5kcyBBcnJheSB7XG4gIC8qKlxuICAgKiBAZGVzYyBHaXZlcyBiYWNrIHRoZSBuYW1lZCBrZXlzIGFuZCBmaWx0ZXJzIG91dCBhcnJheSBpbmRleGVzXG4gICAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfa2V5cygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcykuZmlsdGVyKGsgPT4gTnVtYmVyLmlzTmFOKE51bWJlcihrKSkpO1xuICB9XG59XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWNsYXNzZXMtcGVyLWZpbGVcbmltcG9ydCB7IGRlZHVwZU1peGluIH0gZnJvbSAnQGxpb24vY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbHNDb2xsZWN0aW9uIH0gZnJvbSAnLi9Gb3JtQ29udHJvbHNDb2xsZWN0aW9uLmpzJztcbmltcG9ydCB7IEZvcm1SZWdpc3RlcmluZ01peGluIH0gZnJvbSAnLi9Gb3JtUmVnaXN0ZXJpbmdNaXhpbi5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvRm9ybUNvbnRyb2xNaXhpblR5cGVzJykuRm9ybUNvbnRyb2xIb3N0fSBGb3JtQ29udHJvbEhvc3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL3JlZ2lzdHJhdGlvbi9Gb3JtUmVnaXN0cmFyTWl4aW5UeXBlcycpLkZvcm1SZWdpc3RyYXJNaXhpbn0gRm9ybVJlZ2lzdHJhck1peGluXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9yZWdpc3RyYXRpb24vRm9ybVJlZ2lzdHJhck1peGluVHlwZXMnKS5Gb3JtUmVnaXN0cmFySG9zdH0gRm9ybVJlZ2lzdHJhckhvc3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL3JlZ2lzdHJhdGlvbi9Gb3JtUmVnaXN0cmFyTWl4aW5UeXBlcycpLkVsZW1lbnRXaXRoUGFyZW50Rm9ybUdyb3VwfSBFbGVtZW50V2l0aFBhcmVudEZvcm1Hcm91cFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvcmVnaXN0cmF0aW9uL0Zvcm1SZWdpc3RlcmluZ01peGluVHlwZXMnKS5Gb3JtUmVnaXN0ZXJpbmdIb3N0fSBGb3JtUmVnaXN0ZXJpbmdIb3N0XG4gKiBAdHlwZWRlZiB7Rm9ybUNvbnRyb2xIb3N0ICYgSFRNTEVsZW1lbnQgJiB7X3BhcmVudEZvcm1Hcm91cD86SFRNTEVsZW1lbnQsIGNoZWNrZWQ/OmJvb2xlYW59fSBGb3JtQ29udHJvbFxuICovXG5cbi8qKlxuICogQGRlc2MgVGhpcyBhbGxvd3MgYW4gZWxlbWVudCB0byBiZWNvbWUgdGhlIG1hbmFnZXIgb2YgYSByZWdpc3Rlci5cbiAqIEl0IGJhc2ljYWxseSBrZWVwcyB0cmFjayBvZiBhIEZvcm1Db250cm9sc0NvbGxlY3Rpb24gdGhhdCBpdCBzdG9yZXMgaW4gLmZvcm1FbGVtZW50c1xuICogVGhpcyB3aWxsIGFsd2F5cyBiZSBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHMuXG4gKiBJbiBjYXNlIG9mIGEgZm9ybSBvciBmaWVsZHNldChzdWIgZm9ybSksIGl0IHdpbGwgYWxzbyBhY3QgYXMgYSBrZXkgYmFzZWQgb2JqZWN0IHdpdGggRm9ybUNvbnRyb2xcbiAqIChmaWVsZHMsIGNob2ljZSBncm91cHMgb3IgZmllbGRzZXRzKWFzIGtleXMuXG4gKiBGb3IgY2hvaWNlIGdyb3VwcywgdGhlIHZhbHVlIHdpbGwgb25seSBzdGF5IGFuIGFycmF5LlxuICogU2VlIEZvcm1Db250cm9sc0NvbGxlY3Rpb24gZm9yIG1vcmUgaW5mb3JtYXRpb25cbiAqIEB0eXBlIHtGb3JtUmVnaXN0cmFyTWl4aW59XG4gKiBAcGFyYW0ge2ltcG9ydCgnQG9wZW4td2MvZGVkdXBlLW1peGluJykuQ29uc3RydWN0b3I8aW1wb3J0KCdAbGlvbi9jb3JlJykuTGl0RWxlbWVudD59IHN1cGVyY2xhc3NcbiAqL1xuY29uc3QgRm9ybVJlZ2lzdHJhck1peGluSW1wbGVtZW50YXRpb24gPSBzdXBlcmNsYXNzID0+XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3csIG5vLXVudXNlZC12YXJzXG4gIC8vIEB0cy1pZ25vcmUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zNjgyMSNpc3N1ZWNvbW1lbnQtNTg4Mzc1MDUxXG4gIGNsYXNzIGV4dGVuZHMgRm9ybVJlZ2lzdGVyaW5nTWl4aW4oc3VwZXJjbGFzcykge1xuICAgIC8qKiBAdHlwZSB7YW55fSAqL1xuICAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIF9pc0Zvcm1PckZpZWxkc2V0OiB7IHR5cGU6IEJvb2xlYW4gfSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuXG4gICAgICAvKipcbiAgICAgICAqIENsb3NlbHkgbWltaWNzIHRoZSBuYXRpdmVseSBzdXBwb3J0ZWQgSFRNTEZvcm1Db250cm9sc0NvbGxlY3Rpb24uIEl0IGNhbiBiZSBhY2Nlc3NlZFxuICAgICAgICogYm90aCBsaWtlIGFuIGFycmF5IGFuZCBhbiBvYmplY3QgKGJhc2VkIG9uIGNvbnRyb2wvZWxlbWVudCBuYW1lcykuXG4gICAgICAgKiBAdHlwZSB7Rm9ybUNvbnRyb2xzQ29sbGVjdGlvbn1cbiAgICAgICAqL1xuICAgICAgdGhpcy5mb3JtRWxlbWVudHMgPSBuZXcgRm9ybUNvbnRyb2xzQ29sbGVjdGlvbigpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEZsYWcgdGhhdCBkZXRlcm1pbmVzIGhvdyBcIi5mb3JtRWxlbWVudHNcIiBzaG91bGQgYmVoYXZlLlxuICAgICAgICogRm9yIGEgcmVndWxhciBmaWVsZHNldCAoc2VlIExpb25GaWVsZHNldCkgd2UgZXhwZWN0IFwiLmZvcm1FbGVtZW50c1wiXG4gICAgICAgKiB0byBiZSBhY2Nlc3NpYmxlIGFzIGFuIG9iamVjdC5cbiAgICAgICAqIEluIGNhc2Ugb2YgYSByYWRpby1ncm91cCwgYSBjaGVja2JveC1ncm91cCBvciBhIHNlbGVjdC9saXN0Ym94LFxuICAgICAgICogaXQgc2hvdWxkIGFjdCBsaWtlIGFuIGFycmF5IChzZWUgQ2hvaWNlR3JvdXBNaXhpbikuXG4gICAgICAgKiBVc3VhbGx5LCB3aGVuIGZhbHNlLCB3ZSBkZWFsIHdpdGggYSBjaG9pY2UtZ3JvdXAgKHJhZGlvLWdyb3VwLCBjaGVja2JveC1ncm91cCxcbiAgICAgICAqIChtdWx0aSlzZWxlY3QpXG4gICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgdGhpcy5faXNGb3JtT3JGaWVsZHNldCA9IGZhbHNlO1xuXG4gICAgICB0aGlzLl9vblJlcXVlc3RUb0FkZEZvcm1FbGVtZW50ID0gdGhpcy5fb25SZXF1ZXN0VG9BZGRGb3JtRWxlbWVudC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25SZXF1ZXN0VG9DaGFuZ2VGb3JtRWxlbWVudE5hbWUgPSB0aGlzLl9vblJlcXVlc3RUb0NoYW5nZUZvcm1FbGVtZW50TmFtZS5iaW5kKHRoaXMpO1xuXG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICdmb3JtLWVsZW1lbnQtcmVnaXN0ZXInLFxuICAgICAgICAvKiogQHR5cGUge0V2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3R9ICovICh0aGlzLl9vblJlcXVlc3RUb0FkZEZvcm1FbGVtZW50KSxcbiAgICAgICk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICdmb3JtLWVsZW1lbnQtbmFtZS1jaGFuZ2VkJyxcbiAgICAgICAgLyoqIEB0eXBlIHtFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0fSAqLyAodGhpcy5fb25SZXF1ZXN0VG9DaGFuZ2VGb3JtRWxlbWVudE5hbWUpLFxuICAgICAgKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBpbml0Q29tcGxldGUgcmVzb2x2ZXMgYWZ0ZXIgYWxsIHBlbmRpbmcgaW5pdGlhbGl6YXRpb24gbG9naWNcbiAgICAgICAqIChmb3IgaW5zdGFuY2UgYDxmb3JtLWdyb3VwIC5zZXJpYWxpemVkVmFsdWU9JHt7IGNoaWxkMTogJ2EnLCBjaGlsZDI6ICdiJyB9fT5gKVxuICAgICAgICogaXMgZXhlY3V0ZWRcbiAgICAgICAqIEB0eXBlIHtQcm9taXNlPGFueT59XG4gICAgICAgKi9cbiAgICAgIHRoaXMuaW5pdENvbXBsZXRlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0aGlzLl9fcmVzb2x2ZUluaXRDb21wbGV0ZSA9IHJlc29sdmU7XG4gICAgICAgIHRoaXMuX19yZWplY3RJbml0Q29tcGxldGUgPSByZWplY3Q7XG4gICAgICB9KTtcblxuICAgICAgLyoqXG4gICAgICAgKiByZWdpc3RyYXRpb25Db21wbGV0ZSB3YWl0cyBmb3IgYWxsIGNoaWxkcmVuIGZvcm1FbGVtZW50cyB0byBoYXZlIHJlZ2lzdGVyZWRcbiAgICAgICAqIEB0eXBlIHtQcm9taXNlPGFueT4gJiB7ZG9uZT86Ym9vbGVhbn19XG4gICAgICAgKi9cbiAgICAgIHRoaXMucmVnaXN0cmF0aW9uQ29tcGxldGUgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRoaXMuX19yZXNvbHZlUmVnaXN0cmF0aW9uQ29tcGxldGUgPSByZXNvbHZlO1xuICAgICAgICB0aGlzLl9fcmVqZWN0UmVnaXN0cmF0aW9uQ29tcGxldGUgPSByZWplY3Q7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucmVnaXN0cmF0aW9uQ29tcGxldGUuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5yZWdpc3RyYXRpb25Db21wbGV0ZS50aGVuKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZWdpc3RyYXRpb25Db21wbGV0ZS5kb25lID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLl9fcmVzb2x2ZUluaXRDb21wbGV0ZSh1bmRlZmluZWQpO1xuICAgICAgICB9LFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZWdpc3RyYXRpb25Db21wbGV0ZS5kb25lID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLl9fcmVqZWN0SW5pdENvbXBsZXRlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ1JlZ2lzdHJhdGlvbiBjb3VsZCBub3QgZmluaXNoLiBQbGVhc2UgdXNlIGF3YWl0IGVsLnJlZ2lzdHJhdGlvbkNvbXBsZXRlOycsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgdGhpcy5fY29tcGxldGVSZWdpc3RyYXRpb24oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlcyB0aGUgcmVnaXN0cmF0aW9uQ29tcGxldGUgcHJvbWlzZS4gU3ViY2xhc3NlcnMgY2FuIGRlbGF5IGlmIG5lZWRlZFxuICAgICAqIEBvdmVycmlkYWJsZVxuICAgICAqL1xuICAgIF9jb21wbGV0ZVJlZ2lzdHJhdGlvbigpIHtcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gdGhpcy5fX3Jlc29sdmVSZWdpc3RyYXRpb25Db21wbGV0ZSh1bmRlZmluZWQpKTtcbiAgICB9XG5cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG5cbiAgICAgIGlmICh0aGlzLnJlZ2lzdHJhdGlvbkNvbXBsZXRlLmRvbmUgPT09IGZhbHNlKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fX3JlamVjdFJlZ2lzdHJhdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbGVtZW50V2l0aFBhcmVudEZvcm1Hcm91cH0gZWxcbiAgICAgKi9cbiAgICBpc1JlZ2lzdGVyZWRGb3JtRWxlbWVudChlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9ybUVsZW1lbnRzLnNvbWUoZXhpdGluZ0VsID0+IGV4aXRpbmdFbCA9PT0gZWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Rm9ybUNvbnRyb2x9IGNoaWxkIHRoZSBjaGlsZCBlbGVtZW50IChmaWVsZClcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhUb0luc2VydEF0IGluZGV4IHRvIGluc2VydCB0aGUgZm9ybSBlbGVtZW50IGF0XG4gICAgICovXG4gICAgYWRkRm9ybUVsZW1lbnQoY2hpbGQsIGluZGV4VG9JbnNlcnRBdCkge1xuICAgICAgLy8gVGhpcyBpcyBhIHdheSB0byBsZXQgdGhlIGNoaWxkIGVsZW1lbnQgKGEgbGlvbi1maWVsZHNldCBvciBsaW9uLWZpZWxkKSBrbm93LCBhYm91dCBpdHMgcGFyZW50XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIGNoaWxkLl9wYXJlbnRGb3JtR3JvdXAgPSAvKiogQHR5cGUgeyogJiBGb3JtUmVnaXN0cmFySG9zdH0gKi8gKHRoaXMpO1xuXG4gICAgICAvLyAxLiBBZGQgY2hpbGRyZW4gYXMgYXJyYXkgZWxlbWVudFxuICAgICAgaWYgKGluZGV4VG9JbnNlcnRBdCA+PSAwKSB7XG4gICAgICAgIHRoaXMuZm9ybUVsZW1lbnRzLnNwbGljZShpbmRleFRvSW5zZXJ0QXQsIDAsIGNoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZm9ybUVsZW1lbnRzLnB1c2goY2hpbGQpO1xuICAgICAgfVxuXG4gICAgICAvLyAyLiBBZGQgY2hpbGRyZW4gYXMgb2JqZWN0IGtleVxuICAgICAgaWYgKHRoaXMuX2lzRm9ybU9yRmllbGRzZXQpIHtcbiAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBjaGlsZDtcbiAgICAgICAgaWYgKG5hbWUgPT09IHRoaXMubmFtZSkge1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnRXJyb3IgTm9kZTonLCBjaGlsZCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFlvdSBjYW4gbm90IGhhdmUgdGhlIHNhbWUgbmFtZSBcIiR7bmFtZX1cIiBhcyB5b3VyIHBhcmVudGApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5hbWUuc3Vic3RyKC0yKSA9PT0gJ1tdJykge1xuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLmZvcm1FbGVtZW50c1tuYW1lXSkpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybUVsZW1lbnRzW25hbWVdID0gbmV3IEZvcm1Db250cm9sc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZGV4VG9JbnNlcnRBdCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybUVsZW1lbnRzW25hbWVdLnNwbGljZShpbmRleFRvSW5zZXJ0QXQsIDAsIGNoaWxkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mb3JtRWxlbWVudHNbbmFtZV0ucHVzaChjaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmZvcm1FbGVtZW50c1tuYW1lXSkge1xuICAgICAgICAgIHRoaXMuZm9ybUVsZW1lbnRzW25hbWVdID0gY2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCdFcnJvciBOb2RlOicsIGNoaWxkKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgIGBOYW1lIFwiJHtuYW1lfVwiIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCAtIGlmIHlvdSB3YW50IGFuIGFycmF5IGFkZCBbXSB0byB0aGUgZW5kYCxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtGb3JtQ29udHJvbEhvc3R9IGNoaWxkIHRoZSBjaGlsZCBlbGVtZW50IChmaWVsZClcbiAgICAgKi9cbiAgICByZW1vdmVGb3JtRWxlbWVudChjaGlsZCkge1xuICAgICAgLy8gMS4gSGFuZGxlIGFycmF5IGJhc2VkIGNoaWxkcmVuXG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMuZm9ybUVsZW1lbnRzLmluZGV4T2YoY2hpbGQpO1xuICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgdGhpcy5mb3JtRWxlbWVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cblxuICAgICAgLy8gMi4gSGFuZGxlIG5hbWUgYmFzZWQgb2JqZWN0IGtleXNcbiAgICAgIGlmICh0aGlzLl9pc0Zvcm1PckZpZWxkc2V0KSB7XG4gICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gY2hpbGQ7IC8vIEZJWE1FOiA8LS0gRWxlbWVudFdpdGhQYXJlbnRGb3JtR3JvdXAgc2hvdWxkIGJlY29tZSBMaW9uRmllbGRXaXRoUGFyZW50Rm9ybUdyb3VwIHNvIHRoYXQgXCJuYW1lXCIgZXhpc3RzXG4gICAgICAgIGlmIChuYW1lLnN1YnN0cigtMikgPT09ICdbXScgJiYgdGhpcy5mb3JtRWxlbWVudHNbbmFtZV0pIHtcbiAgICAgICAgICBjb25zdCBpZHggPSB0aGlzLmZvcm1FbGVtZW50c1tuYW1lXS5pbmRleE9mKGNoaWxkKTtcbiAgICAgICAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybUVsZW1lbnRzW25hbWVdLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZvcm1FbGVtZW50c1tuYW1lXSkge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLmZvcm1FbGVtZW50c1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhvb2sgZm9yIFN1YmNsYXNzZXJzIHRvIHBlcmZvcm0gbG9naWMgYmVmb3JlIGFuIGVsZW1lbnQgaXMgYWRkZWRcbiAgICAgKiBAcGFyYW0ge0N1c3RvbUV2ZW50fSBldlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfb25SZXF1ZXN0VG9BZGRGb3JtRWxlbWVudChldikge1xuICAgICAgY29uc3QgY2hpbGQgPSBldi5kZXRhaWwuZWxlbWVudDtcbiAgICAgIGlmIChjaGlsZCA9PT0gdGhpcykge1xuICAgICAgICAvLyBhcyB3ZSBmaXJlIGFuZCBsaXN0ZW4gLSBkb24ndCBhZGQgb3Vyc2VsdmVzXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzUmVnaXN0ZXJlZEZvcm1FbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAvLyBkbyBub3QgcmVhZGQgYWxyZWFkeSBleGlzdGluZyBlbGVtZW50c1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgLy8gQ2hlY2sgZm9yIERPTSBvcmRlciB0byBkZXRlcm1pbmUgdGhlIHJpZ2h0IG9yZGVyIHRvIGluc2VydCBpbnRvIGZvcm1FbGVtZW50c1xuICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gb3RoZXIgZWxlbWVudCwgaW5kZXggaXMgLTEgKGUuZy4gYWRkIGl0IHRvIHRoZSBlbmQpXG4gICAgICBsZXQgaW5kZXhUb0luc2VydEF0ID0gLTE7XG4gICAgICBpZiAodGhpcy5mb3JtRWxlbWVudHMgJiYgQXJyYXkuaXNBcnJheSh0aGlzLmZvcm1FbGVtZW50cykpIHtcbiAgICAgICAgLy8gd2Ugc3RhcnQgY29tcGFyaW5nIGZyb20gdGhlIGVuZCBvZiB0aGUgYXJyYXkgYXMgaXQncyB0aGUgbW9zdCBsaWtlbHkgcG9zaXRpb24gd2hlcmUgdGhlIGVsZW1lbnQgd2lsbCBiZSBhZGRlZFxuICAgICAgICBmb3IgKGNvbnN0IFtpLCBmb3JtRWxlbWVudF0gb2YgdGhpcy5mb3JtRWxlbWVudHMuZW50cmllcygpKSB7XG4gICAgICAgICAgLy8gY29tcGFyZURvY3VtZW50UG9zaXRpb24gcmV0dXJucyBhIGJpdG1hc2tcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgICAgIGlmIChmb3JtRWxlbWVudC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihjaGlsZCkgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORykge1xuICAgICAgICAgICAgLy8gbm90aGluZyBhcyBjaGlsZCBpcyBhZnRlciBmb3JtRWxlbWVudCBpbiBET01cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZmlyc3QgdGltZSBjaGlsZCBpcyBOT1QgYWZ0ZXIgZm9ybUVsZW1lbnQgaW4gRE9NIHdlIGluc2VydCBpdFxuICAgICAgICAgICAgaW5kZXhUb0luc2VydEF0ID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5hZGRGb3JtRWxlbWVudChjaGlsZCwgaW5kZXhUb0luc2VydEF0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0N1c3RvbUV2ZW50fSBldlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfb25SZXF1ZXN0VG9DaGFuZ2VGb3JtRWxlbWVudE5hbWUoZXYpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmZvcm1FbGVtZW50c1tldi5kZXRhaWwub2xkTmFtZV07XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICB0aGlzLmZvcm1FbGVtZW50c1tldi5kZXRhaWwubmV3TmFtZV0gPSBlbGVtZW50O1xuICAgICAgICBkZWxldGUgdGhpcy5mb3JtRWxlbWVudHNbZXYuZGV0YWlsLm9sZE5hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Q3VzdG9tRXZlbnR9IGV2XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9vblJlcXVlc3RUb1JlbW92ZUZvcm1FbGVtZW50KGV2KSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGV2LmRldGFpbC5lbGVtZW50O1xuICAgICAgaWYgKGNoaWxkID09PSB0aGlzKSB7XG4gICAgICAgIC8vIGFzIHdlIGZpcmUgYW5kIGxpc3RlbiAtIGRvbid0IHJlbW92ZSBvdXJzZWx2ZXNcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmlzUmVnaXN0ZXJlZEZvcm1FbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAvLyBkbyBub3QgcmVtb3ZlIG5vbiBleGlzdGluZyBlbGVtZW50c1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgdGhpcy5yZW1vdmVGb3JtRWxlbWVudChjaGlsZCk7XG4gICAgfVxuICB9O1xuXG5leHBvcnQgY29uc3QgRm9ybVJlZ2lzdHJhck1peGluID0gZGVkdXBlTWl4aW4oRm9ybVJlZ2lzdHJhck1peGluSW1wbGVtZW50YXRpb24pO1xuIiwiaW1wb3J0IHsgZGVkdXBlTWl4aW4gfSBmcm9tICdAb3Blbi13Yy9kZWR1cGUtbWl4aW4nO1xuaW1wb3J0IHsgYWRvcHRTdHlsZXMgfSBmcm9tICdAbGl0L3JlYWN0aXZlLWVsZW1lbnQvY3NzLXRhZy5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi90eXBlcycpLlJlbmRlck9wdGlvbnN9IFJlbmRlck9wdGlvbnNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5TY29wZWRFbGVtZW50c01peGlufSBTY29wZWRFbGVtZW50c01peGluXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuU2NvcGVkRWxlbWVudHNIb3N0fSBTY29wZWRFbGVtZW50c0hvc3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5TY29wZWRFbGVtZW50c01hcH0gU2NvcGVkRWxlbWVudHNNYXBcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BsaXQvcmVhY3RpdmUtZWxlbWVudCcpLkNTU1Jlc3VsdE9yTmF0aXZlfSBDU1NSZXN1bHRPck5hdGl2ZVxuICovXG5cbmNvbnN0IHZlcnNpb24gPSAnMi4yLjInO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRvdC1ub3RhdGlvblxuY29uc3QgdmVyc2lvbnMgPSB3aW5kb3dbJ3Njb3BlZEVsZW1lbnRzVmVyc2lvbnMnXSB8fCAod2luZG93WydzY29wZWRFbGVtZW50c1ZlcnNpb25zJ10gPSBbXSk7XG5pZiAoIXZlcnNpb25zLmluY2x1ZGVzKHZlcnNpb24pKSB7XG4gIHZlcnNpb25zLnB1c2godmVyc2lvbik7XG59XG5cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IHN1cHBvcnRzU2NvcGVkUmVnaXN0cnkgPSAhIVNoYWRvd1Jvb3QucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQ7XG5cbi8qKlxuICogQHRlbXBsYXRlIHtpbXBvcnQoJy4vdHlwZXMnKS5Db25zdHJ1Y3RvcjxIVE1MRWxlbWVudD59IFRcbiAqIEBwYXJhbSB7VH0gc3VwZXJjbGFzc1xuICogQHJldHVybiB7VCAmIGltcG9ydCgnLi90eXBlcycpLkNvbnN0cnVjdG9yPFNjb3BlZEVsZW1lbnRzSG9zdD59XG4gKi9cbmNvbnN0IFNjb3BlZEVsZW1lbnRzTWl4aW5JbXBsZW1lbnRhdGlvbiA9IHN1cGVyY2xhc3MgPT5cbiAgLyoqIEB0eXBlIHtTY29wZWRFbGVtZW50c0hvc3R9ICovXG4gIGNsYXNzIFNjb3BlZEVsZW1lbnRzSG9zdCBleHRlbmRzIHN1cGVyY2xhc3Mge1xuICAgIC8qKlxuICAgICAqIE9idGFpbnMgdGhlIHNjb3BlZCBlbGVtZW50cyBkZWZpbml0aW9ucyBtYXAgaWYgc3BlY2lmaWVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Njb3BlZEVsZW1lbnRzTWFwfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgc2NvcGVkRWxlbWVudHMoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBzY29wZWRFbGVtZW50c1ZlcnNpb24oKSB7XG4gICAgICByZXR1cm4gdmVyc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPYnRhaW5zIHRoZSBTaGFkb3dSb290IG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U2hhZG93Um9vdEluaXR9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBzaGFkb3dSb290T3B0aW9ucygpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fc2hhZG93Um9vdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBzaGFkb3dSb290IG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1NoYWRvd1Jvb3RJbml0fSB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBzZXQgc2hhZG93Um9vdE9wdGlvbnModmFsdWUpIHtcbiAgICAgIHRoaXMuX19zaGFkb3dSb290T3B0aW9ucyA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9idGFpbnMgdGhlIGVsZW1lbnQgc3R5bGVzLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0NTU1Jlc3VsdE9yTmF0aXZlW119XG4gICAgICovXG4gICAgc3RhdGljIGdldCBlbGVtZW50U3R5bGVzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19lbGVtZW50U3R5bGVzO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXQgZWxlbWVudFN0eWxlcyhzdHlsZXMpIHtcbiAgICAgIHRoaXMuX19lbGVtZW50U3R5bGVzID0gc3R5bGVzO1xuICAgIH1cblxuICAgIC8vIGVpdGhlciBUUyBvciBFU0xpbnQgd2lsbCBjb21wbGFpbiBoZXJlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgY29uc3RydWN0b3IoLi4uX2FyZ3MpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICAvKiogQHR5cGUge1JlbmRlck9wdGlvbnN9ICovXG4gICAgICB0aGlzLnJlbmRlck9wdGlvbnMgPSB0aGlzLnJlbmRlck9wdGlvbnMgfHwgdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9idGFpbnMgdGhlIEN1c3RvbUVsZW1lbnRSZWdpc3RyeSBhc3NvY2lhdGVkIHRvIHRoZSBTaGFkb3dSb290LlxuICAgICAqXG4gICAgICogQHJldHVybnMge0N1c3RvbUVsZW1lbnRSZWdpc3RyeX1cbiAgICAgKi9cbiAgICBnZXQgcmVnaXN0cnkoKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5fX3JlZ2lzdHJ5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5IGFzc29jaWF0ZWQgdG8gdGhlIFNoYWRvd1Jvb3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fSByZWdpc3RyeVxuICAgICAqL1xuICAgIHNldCByZWdpc3RyeShyZWdpc3RyeSkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5fX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7XG4gICAgfVxuXG4gICAgY3JlYXRlUmVuZGVyUm9vdCgpIHtcbiAgICAgIGNvbnN0IHsgc2NvcGVkRWxlbWVudHMsIHNoYWRvd1Jvb3RPcHRpb25zLCBlbGVtZW50U3R5bGVzIH0gPVxuICAgICAgICAvKiogQHR5cGUge3R5cGVvZiBTY29wZWRFbGVtZW50c0hvc3R9ICovICh0aGlzLmNvbnN0cnVjdG9yKTtcblxuICAgICAgY29uc3Qgc2hvdWxkQ3JlYXRlUmVnaXN0cnkgPVxuICAgICAgICAhdGhpcy5yZWdpc3RyeSB8fFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICh0aGlzLnJlZ2lzdHJ5ID09PSB0aGlzLmNvbnN0cnVjdG9yLl9fcmVnaXN0cnkgJiZcbiAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuY29uc3RydWN0b3IsICdfX3JlZ2lzdHJ5JykpO1xuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBhIG5ldyByZWdpc3RyeSBpZjpcbiAgICAgICAqIC0gdGhlIHJlZ2lzdHJ5IGlzIG5vdCBkZWZpbmVkXG4gICAgICAgKiAtIHRoaXMgY2xhc3MgZG9lc24ndCBoYXZlIGl0cyBvd24gcmVnaXN0cnkgKkFORCogaGFzIG5vIHNoYXJlZCByZWdpc3RyeVxuICAgICAgICovXG4gICAgICBpZiAoc2hvdWxkQ3JlYXRlUmVnaXN0cnkpIHtcbiAgICAgICAgdGhpcy5yZWdpc3RyeSA9IHN1cHBvcnRzU2NvcGVkUmVnaXN0cnkgPyBuZXcgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5KCkgOiBjdXN0b21FbGVtZW50cztcbiAgICAgICAgZm9yIChjb25zdCBbdGFnTmFtZSwga2xhc3NdIG9mIE9iamVjdC5lbnRyaWVzKHNjb3BlZEVsZW1lbnRzKSkge1xuICAgICAgICAgIHRoaXMuZGVmaW5lU2NvcGVkRWxlbWVudCh0YWdOYW1lLCBrbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqIEB0eXBlIHtTaGFkb3dSb290SW5pdH0gKi9cbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIG1vZGU6ICdvcGVuJyxcbiAgICAgICAgLi4uc2hhZG93Um9vdE9wdGlvbnMsXG4gICAgICAgIGN1c3RvbUVsZW1lbnRzOiB0aGlzLnJlZ2lzdHJ5LFxuICAgICAgICByZWdpc3RyeTogdGhpcy5yZWdpc3RyeSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGNyZWF0ZWRSb290ID0gdGhpcy5hdHRhY2hTaGFkb3cob3B0aW9ucyk7XG4gICAgICBpZiAoc3VwcG9ydHNTY29wZWRSZWdpc3RyeSkge1xuICAgICAgICB0aGlzLnJlbmRlck9wdGlvbnMuY3JlYXRpb25TY29wZSA9IGNyZWF0ZWRSb290O1xuICAgICAgfVxuXG4gICAgICBpZiAoY3JlYXRlZFJvb3QgaW5zdGFuY2VvZiBTaGFkb3dSb290KSB7XG4gICAgICAgIGFkb3B0U3R5bGVzKGNyZWF0ZWRSb290LCBlbGVtZW50U3R5bGVzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJPcHRpb25zLnJlbmRlckJlZm9yZSA9IHRoaXMucmVuZGVyT3B0aW9ucy5yZW5kZXJCZWZvcmUgfHwgY3JlYXRlZFJvb3QuZmlyc3RDaGlsZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNyZWF0ZWRSb290O1xuICAgIH1cblxuICAgIGNyZWF0ZVNjb3BlZEVsZW1lbnQodGFnTmFtZSkge1xuICAgICAgY29uc3Qgcm9vdCA9IHN1cHBvcnRzU2NvcGVkUmVnaXN0cnkgPyB0aGlzLnNoYWRvd1Jvb3QgOiBkb2N1bWVudDtcbiAgICAgIC8vIEB0cy1pZ25vcmUgcG9seWZpbGwgdG8gc3VwcG9ydCBjcmVhdGVFbGVtZW50IG9uIHNoYWRvd1Jvb3QgaXMgbG9hZGVkXG4gICAgICByZXR1cm4gcm9vdC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBzY29wZWQgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gICAgICogQHBhcmFtIHt0eXBlb2YgSFRNTEVsZW1lbnR9IGtsYXNzXG4gICAgICovXG4gICAgZGVmaW5lU2NvcGVkRWxlbWVudCh0YWdOYW1lLCBrbGFzcykge1xuICAgICAgY29uc3QgcmVnaXN0ZXJlZENsYXNzID0gdGhpcy5yZWdpc3RyeS5nZXQodGFnTmFtZSk7XG4gICAgICBpZiAocmVnaXN0ZXJlZENsYXNzICYmIHN1cHBvcnRzU2NvcGVkUmVnaXN0cnkgPT09IGZhbHNlICYmIHJlZ2lzdGVyZWRDbGFzcyAhPT0ga2xhc3MpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBbXG4gICAgICAgICAgICBgWW91IGFyZSB0cnlpbmcgdG8gcmUtcmVnaXN0ZXIgdGhlIFwiJHt0YWdOYW1lfVwiIGN1c3RvbSBlbGVtZW50IHdpdGggYSBkaWZmZXJlbnQgY2xhc3MgdmlhIFNjb3BlZEVsZW1lbnRzTWl4aW4uYCxcbiAgICAgICAgICAgICdUaGlzIGlzIG9ubHkgcG9zc2libGUgd2l0aCBhIEN1c3RvbUVsZW1lbnRSZWdpc3RyeS4nLFxuICAgICAgICAgICAgJ1lvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoaXMgZmVhdHVyZSBzbyB5b3Ugd2lsbCBuZWVkIHRvIGxvYWQgYSBwb2x5ZmlsbCBmb3IgaXQuJyxcbiAgICAgICAgICAgICdMb2FkIFwiQHdlYmNvbXBvbmVudHMvc2NvcGVkLWN1c3RvbS1lbGVtZW50LXJlZ2lzdHJ5XCIgYmVmb3JlIHlvdSByZWdpc3RlciBBTlkgd2ViIGNvbXBvbmVudCB0byB0aGUgZ2xvYmFsIGN1c3RvbUVsZW1lbnRzIHJlZ2lzdHJ5LicsXG4gICAgICAgICAgICAnZS5nLiBhZGQgXCI8c2NyaXB0IHNyYz1cIi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2NvcGVkLWN1c3RvbS1lbGVtZW50LXJlZ2lzdHJ5L3Njb3BlZC1jdXN0b20tZWxlbWVudC1yZWdpc3RyeS5taW4uanNcIj48L3NjcmlwdD5cIiBhcyB5b3VyIGZpcnN0IHNjcmlwdCB0YWcuJyxcbiAgICAgICAgICAgICdGb3IgbW9yZSBkZXRhaWxzIHlvdSBjYW4gdmlzaXQgaHR0cHM6Ly9vcGVuLXdjLm9yZy9kb2NzL2RldmVsb3BtZW50L3Njb3BlZC1lbGVtZW50cy8nLFxuICAgICAgICAgIF0uam9pbignXFxuJyksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoIXJlZ2lzdGVyZWRDbGFzcykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5kZWZpbmUodGFnTmFtZSwga2xhc3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkuZ2V0KHRhZ05hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHVzZSB0aGUgbmF0aXZlIGVsLnRhZ05hbWUgaW5zdGVhZFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgdGFnIG5hbWVcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIGdldFNjb3BlZFRhZ05hbWUodGFnTmFtZSkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuZ2V0U2NvcGVkVGFnTmFtZSh0YWdOYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCB1c2UgdGhlIG5hdGl2ZSBlbC50YWdOYW1lIGluc3RlYWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHRhZyBuYW1lXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBzdGF0aWMgZ2V0U2NvcGVkVGFnTmFtZSh0YWdOYW1lKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICByZXR1cm4gdGhpcy5fX3JlZ2lzdHJ5LmdldCh0YWdOYW1lKSA/IHRhZ05hbWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG5leHBvcnQgY29uc3QgU2NvcGVkRWxlbWVudHNNaXhpbiA9IGRlZHVwZU1peGluKFNjb3BlZEVsZW1lbnRzTWl4aW5JbXBsZW1lbnRhdGlvbik7XG4iLCJjb25zdCBzeW0gPSBTeW1ib2wuZm9yKCdsaW9uOjpTaW5nbGV0b25NYW5hZ2VyQ2xhc3NTdG9yYWdlJyk7XG5cbi8qKlxuICogQWxsb3cgY29tcGF0aWJpbGl0eSB3aXRoIG5vZGUtanMgKGZvciBzc3IpLlxuICogSW4gdGhlIGZ1dHVyZSwgd2UgY2FuIGp1c3QgdXNlIGdsb2JhbFRoaXMgZGlyZWN0bHlcbiAqIChmb3Igbm93LCB3ZSdyZSBiYWNrd2FyZHMgY29tcGF0aWJsZSB3aXRoIGJyb3dzZXJzIHRoYXQgc3RpbGwgb25seSB1c2Ugd2luZG93LCBzaW5jZSB3ZSBkb24ndCBrbm93IGFsbCBjb250ZXh0cyBzaW5nbGV0b24tbWFuYWdlciBpcyB1c2VkIGluKS5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5jb25zdCBnbG9iYWxUaGlzT3JXaW5kb3cgPSBnbG9iYWxUaGlzIHx8IHdpbmRvdztcbmV4cG9ydCBjbGFzcyBTaW5nbGV0b25NYW5hZ2VyQ2xhc3Mge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKiogQHByb3RlY3RlZCAqL1xuICAgIHRoaXMuX21hcCA9IGdsb2JhbFRoaXNPcldpbmRvd1tzeW1dXG4gICAgICA/IGdsb2JhbFRoaXNPcldpbmRvd1tzeW1dXG4gICAgICA6IChnbG9iYWxUaGlzT3JXaW5kb3dbc3ltXSA9IG5ldyBNYXAoKSk7XG4gIH1cblxuICAvKipcbiAgICogSWdub3JlcyBhbHJlYWR5IGV4aXN0aW5nIGtleXMgKGUuZy4gaXQgd2lsbCBub3Qgb3ZlcnJpZGUpXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlXG4gICAqL1xuICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIGlmICghdGhpcy5oYXMoa2V5KSkge1xuICAgICAgdGhpcy5fbWFwLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgZ2V0KGtleSkge1xuICAgIHJldHVybiB0aGlzLl9tYXAuZ2V0KGtleSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKi9cbiAgaGFzKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKGtleSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFNpbmdsZXRvbk1hbmFnZXJDbGFzcyB9IGZyb20gJy4vU2luZ2xldG9uTWFuYWdlckNsYXNzLmpzJztcblxuZXhwb3J0IHsgU2luZ2xldG9uTWFuYWdlckNsYXNzIH07XG5leHBvcnQgY29uc3Qgc2luZ2xldG9uTWFuYWdlciA9IG5ldyBTaW5nbGV0b25NYW5hZ2VyQ2xhc3MoKTtcbiIsImZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBAZmxvd1xudmFyIExPTkcgPSAnbG9uZyc7XG52YXIgU0hPUlQgPSAnc2hvcnQnO1xudmFyIE5BUlJPVyA9ICduYXJyb3cnO1xudmFyIE5VTUVSSUMgPSAnbnVtZXJpYyc7XG52YXIgVFdPRElHSVQgPSAnMi1kaWdpdCc7XG5cbi8qKlxuICogZm9ybWF0dGluZyBpbmZvcm1hdGlvblxuICoqL1xudmFyIGZvcm1hdE1lc3NhZ2VGb3JtYXRzID0ge1xuICBudW1iZXI6IHtcbiAgICBkZWNpbWFsOiB7XG4gICAgICBzdHlsZTogJ2RlY2ltYWwnXG4gICAgfSxcbiAgICBpbnRlZ2VyOiB7XG4gICAgICBzdHlsZTogJ2RlY2ltYWwnLFxuICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiAwXG4gICAgfSxcbiAgICBjdXJyZW5jeToge1xuICAgICAgc3R5bGU6ICdjdXJyZW5jeScsXG4gICAgICBjdXJyZW5jeTogJ1VTRCdcbiAgICB9LFxuICAgIHBlcmNlbnQ6IHtcbiAgICAgIHN0eWxlOiAncGVyY2VudCdcbiAgICB9LFxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHN0eWxlOiAnZGVjaW1hbCdcbiAgICB9XG4gIH0sXG4gIGRhdGU6IHtcbiAgICBzaG9ydDoge1xuICAgICAgbW9udGg6IE5VTUVSSUMsXG4gICAgICBkYXk6IE5VTUVSSUMsXG4gICAgICB5ZWFyOiBUV09ESUdJVFxuICAgIH0sXG4gICAgbWVkaXVtOiB7XG4gICAgICBtb250aDogU0hPUlQsXG4gICAgICBkYXk6IE5VTUVSSUMsXG4gICAgICB5ZWFyOiBOVU1FUklDXG4gICAgfSxcbiAgICBsb25nOiB7XG4gICAgICBtb250aDogTE9ORyxcbiAgICAgIGRheTogTlVNRVJJQyxcbiAgICAgIHllYXI6IE5VTUVSSUNcbiAgICB9LFxuICAgIGZ1bGw6IHtcbiAgICAgIG1vbnRoOiBMT05HLFxuICAgICAgZGF5OiBOVU1FUklDLFxuICAgICAgeWVhcjogTlVNRVJJQyxcbiAgICAgIHdlZWtkYXk6IExPTkdcbiAgICB9LFxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIG1vbnRoOiBTSE9SVCxcbiAgICAgIGRheTogTlVNRVJJQyxcbiAgICAgIHllYXI6IE5VTUVSSUNcbiAgICB9XG4gIH0sXG4gIHRpbWU6IHtcbiAgICBzaG9ydDoge1xuICAgICAgaG91cjogTlVNRVJJQyxcbiAgICAgIG1pbnV0ZTogTlVNRVJJQ1xuICAgIH0sXG4gICAgbWVkaXVtOiB7XG4gICAgICBob3VyOiBOVU1FUklDLFxuICAgICAgbWludXRlOiBOVU1FUklDLFxuICAgICAgc2Vjb25kOiBOVU1FUklDXG4gICAgfSxcbiAgICBsb25nOiB7XG4gICAgICBob3VyOiBOVU1FUklDLFxuICAgICAgbWludXRlOiBOVU1FUklDLFxuICAgICAgc2Vjb25kOiBOVU1FUklDLFxuICAgICAgdGltZVpvbmVOYW1lOiBTSE9SVFxuICAgIH0sXG4gICAgZnVsbDoge1xuICAgICAgaG91cjogTlVNRVJJQyxcbiAgICAgIG1pbnV0ZTogTlVNRVJJQyxcbiAgICAgIHNlY29uZDogTlVNRVJJQyxcbiAgICAgIHRpbWVab25lTmFtZTogU0hPUlRcbiAgICB9LFxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGhvdXI6IE5VTUVSSUMsXG4gICAgICBtaW51dGU6IE5VTUVSSUMsXG4gICAgICBzZWNvbmQ6IE5VTUVSSUNcbiAgICB9XG4gIH0sXG4gIGR1cmF0aW9uOiB7XG4gICAgZGVmYXVsdDoge1xuICAgICAgaG91cnM6IHtcbiAgICAgICAgbWluaW11bUludGVnZXJEaWdpdHM6IDEsXG4gICAgICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMFxuICAgICAgfSxcbiAgICAgIG1pbnV0ZXM6IHtcbiAgICAgICAgbWluaW11bUludGVnZXJEaWdpdHM6IDIsXG4gICAgICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMFxuICAgICAgfSxcbiAgICAgIHNlY29uZHM6IHtcbiAgICAgICAgbWluaW11bUludGVnZXJEaWdpdHM6IDIsXG4gICAgICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogM1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcGFyc2VOdW1iZXJQYXR0ZXJuOiBmdW5jdGlvbiAocGF0dGVybi8qOiA/c3RyaW5nICovKSB7XG4gICAgaWYgKCFwYXR0ZXJuKSByZXR1cm5cbiAgICB2YXIgb3B0aW9ucyA9IHt9O1xuICAgIHZhciBjdXJyZW5jeSA9IHBhdHRlcm4ubWF0Y2goL1xcYltBLVpdezN9XFxiL2kpO1xuICAgIHZhciBzeW1zID0gcGF0dGVybi5yZXBsYWNlKC9bXsKkXS9nLCAnJykubGVuZ3RoO1xuICAgIGlmICghc3ltcyAmJiBjdXJyZW5jeSkgc3ltcyA9IDE7XG4gICAgaWYgKHN5bXMpIHtcbiAgICAgIG9wdGlvbnMuc3R5bGUgPSAnY3VycmVuY3knO1xuICAgICAgb3B0aW9ucy5jdXJyZW5jeURpc3BsYXkgPSBzeW1zID09PSAxID8gJ3N5bWJvbCcgOiBzeW1zID09PSAyID8gJ2NvZGUnIDogJ25hbWUnO1xuICAgICAgb3B0aW9ucy5jdXJyZW5jeSA9IGN1cnJlbmN5ID8gY3VycmVuY3lbMF0udG9VcHBlckNhc2UoKSA6ICdVU0QnO1xuICAgIH0gZWxzZSBpZiAocGF0dGVybi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgb3B0aW9ucy5zdHlsZSA9ICdwZXJjZW50JztcbiAgICB9XG4gICAgaWYgKCEvW0AjMF0vLnRlc3QocGF0dGVybikpIHJldHVybiBvcHRpb25zLnN0eWxlID8gb3B0aW9ucyA6IHVuZGVmaW5lZFxuICAgIG9wdGlvbnMudXNlR3JvdXBpbmcgPSBwYXR0ZXJuLmluZGV4T2YoJywnKSA+PSAwO1xuICAgIGlmICgvRVxcKz9bQCMwXSsvaS50ZXN0KHBhdHRlcm4pIHx8IHBhdHRlcm4uaW5kZXhPZignQCcpID49IDApIHtcbiAgICAgIHZhciBzaXplID0gcGF0dGVybi5yZXBsYWNlKC9FXFwrP1tAIzBdK3xbXkAjMF0vZ2ksICcnKTtcbiAgICAgIG9wdGlvbnMubWluaW11bVNpZ25pZmljYW50RGlnaXRzID0gTWF0aC5taW4oTWF0aC5tYXgoc2l6ZS5yZXBsYWNlKC9bXkAwXS9nLCAnJykubGVuZ3RoLCAxKSwgMjEpO1xuICAgICAgb3B0aW9ucy5tYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMgPSBNYXRoLm1pbihNYXRoLm1heChzaXplLmxlbmd0aCwgMSksIDIxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnRzID0gcGF0dGVybi5yZXBsYWNlKC9bXiMwLl0vZywgJycpLnNwbGl0KCcuJyk7XG4gICAgICB2YXIgaW50ZWdlciA9IHBhcnRzWzBdO1xuICAgICAgdmFyIG4gPSBpbnRlZ2VyLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaW50ZWdlcltuXSA9PT0gJzAnKSAtLW47XG4gICAgICBvcHRpb25zLm1pbmltdW1JbnRlZ2VyRGlnaXRzID0gTWF0aC5taW4oTWF0aC5tYXgoaW50ZWdlci5sZW5ndGggLSAxIC0gbiwgMSksIDIxKTtcbiAgICAgIHZhciBmcmFjdGlvbiA9IHBhcnRzWzFdIHx8ICcnO1xuICAgICAgbiA9IDA7XG4gICAgICB3aGlsZSAoZnJhY3Rpb25bbl0gPT09ICcwJykgKytuO1xuICAgICAgb3B0aW9ucy5taW5pbXVtRnJhY3Rpb25EaWdpdHMgPSBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgMjApO1xuICAgICAgd2hpbGUgKGZyYWN0aW9uW25dID09PSAnIycpICsrbjtcbiAgICAgIG9wdGlvbnMubWF4aW11bUZyYWN0aW9uRGlnaXRzID0gTWF0aC5taW4oTWF0aC5tYXgobiwgMCksIDIwKTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfSxcbiAgcGFyc2VEYXRlUGF0dGVybjogZnVuY3Rpb24gKHBhdHRlcm4vKjogP3N0cmluZyAqLykge1xuICAgIGlmICghcGF0dGVybikgcmV0dXJuXG4gICAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdHRlcm4ubGVuZ3RoOykge1xuICAgICAgdmFyIGN1cnJlbnQgPSBwYXR0ZXJuW2ldO1xuICAgICAgdmFyIG4gPSAxO1xuICAgICAgd2hpbGUgKHBhdHRlcm5bKytpXSA9PT0gY3VycmVudCkgKytuO1xuICAgICAgc3dpdGNoIChjdXJyZW50KSB7XG4gICAgICAgIGNhc2UgJ0cnOlxuICAgICAgICAgIG9wdGlvbnMuZXJhID0gbiA9PT0gNSA/IE5BUlJPVyA6IG4gPT09IDQgPyBMT05HIDogU0hPUlQ7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAneSc6XG4gICAgICAgIGNhc2UgJ1knOlxuICAgICAgICAgIG9wdGlvbnMueWVhciA9IG4gPT09IDIgPyBUV09ESUdJVCA6IE5VTUVSSUM7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgIGNhc2UgJ0wnOlxuICAgICAgICAgIG4gPSBNYXRoLm1pbihNYXRoLm1heChuIC0gMSwgMCksIDQpO1xuICAgICAgICAgIG9wdGlvbnMubW9udGggPSBbIE5VTUVSSUMsIFRXT0RJR0lULCBTSE9SVCwgTE9ORywgTkFSUk9XIF1bbl07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgIGNhc2UgJ2UnOlxuICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICBvcHRpb25zLndlZWtkYXkgPSBuID09PSA1ID8gTkFSUk9XIDogbiA9PT0gNCA/IExPTkcgOiBTSE9SVDtcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgb3B0aW9ucy5kYXkgPSBuID09PSAyID8gVFdPRElHSVQgOiBOVU1FUklDO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICBjYXNlICdLJzpcbiAgICAgICAgICBvcHRpb25zLmhvdXIxMiA9IHRydWU7XG4gICAgICAgICAgb3B0aW9ucy5ob3VyID0gbiA9PT0gMiA/IFRXT0RJR0lUIDogTlVNRVJJQztcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdIJzpcbiAgICAgICAgY2FzZSAnayc6XG4gICAgICAgICAgb3B0aW9ucy5ob3VyMTIgPSBmYWxzZTtcbiAgICAgICAgICBvcHRpb25zLmhvdXIgPSBuID09PSAyID8gVFdPRElHSVQgOiBOVU1FUklDO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgIG9wdGlvbnMubWludXRlID0gbiA9PT0gMiA/IFRXT0RJR0lUIDogTlVNRVJJQztcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgY2FzZSAnUyc6XG4gICAgICAgICAgb3B0aW9ucy5zZWNvbmQgPSBuID09PSAyID8gVFdPRElHSVQgOiBOVU1FUklDO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3onOlxuICAgICAgICBjYXNlICdaJzpcbiAgICAgICAgY2FzZSAndic6XG4gICAgICAgIGNhc2UgJ1YnOlxuICAgICAgICAgIG9wdGlvbnMudGltZVpvbmVOYW1lID0gbiA9PT0gMSA/IFNIT1JUIDogTE9ORztcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID8gb3B0aW9ucyA6IHVuZGVmaW5lZFxuICB9XG59O1xuXG4vLyBAZmxvd1xuLy8gXCJsb29rdXBcIiBhbGdvcml0aG0gaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNDY0NyNzZWN0aW9uLTMuNFxuLy8gYXNzdW1lcyBub3JtYWxpemVkIGxhbmd1YWdlIHRhZ3MsIGFuZCBtYXRjaGVzIGluIGEgY2FzZSBzZW5zaXRpdmUgbWFubmVyXG52YXIgbG9va3VwQ2xvc2VzdExvY2FsZSA9IGZ1bmN0aW9uIGxvb2t1cENsb3Nlc3RMb2NhbGUgKGxvY2FsZS8qOiBzdHJpbmcgfCBzdHJpbmdbXSB8IHZvaWQgKi8sIGF2YWlsYWJsZS8qOiB7IFtzdHJpbmddOiBhbnkgfSAqLykvKjogP3N0cmluZyAqLyB7XG4gIGlmICh0eXBlb2YgbG9jYWxlID09PSAnc3RyaW5nJyAmJiBhdmFpbGFibGVbbG9jYWxlXSkgcmV0dXJuIGxvY2FsZVxuICB2YXIgbG9jYWxlcyA9IFtdLmNvbmNhdChsb2NhbGUgfHwgW10pO1xuICBmb3IgKHZhciBsID0gMCwgbGwgPSBsb2NhbGVzLmxlbmd0aDsgbCA8IGxsOyArK2wpIHtcbiAgICB2YXIgY3VycmVudCA9IGxvY2FsZXNbbF0uc3BsaXQoJy0nKTtcbiAgICB3aGlsZSAoY3VycmVudC5sZW5ndGgpIHtcbiAgICAgIHZhciBjYW5kaWRhdGUgPSBjdXJyZW50LmpvaW4oJy0nKTtcbiAgICAgIGlmIChhdmFpbGFibGVbY2FuZGlkYXRlXSkgcmV0dXJuIGNhbmRpZGF0ZVxuICAgICAgY3VycmVudC5wb3AoKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIEBmbG93XG5cbi8qOjogZXhwb3J0IHR5cGUgUnVsZSA9ICd6ZXJvJyB8ICdvbmUnIHwgJ3R3bycgfCAnZmV3JyB8ICdtYW55JyB8ICdvdGhlcicgKi9cbnZhciB6ZXJvID0gJ3plcm8nLCBvbmUgPSAnb25lJywgdHdvID0gJ3R3bycsIGZldyA9ICdmZXcnLCBtYW55ID0gJ21hbnknLCBvdGhlciA9ICdvdGhlcic7XG52YXIgZiA9IFtcbiAgZnVuY3Rpb24gKHMvKjogc3RyaW5nIHwgbnVtYmVyICovKS8qOiBSdWxlICovIHtcbiAgICB2YXIgbiA9ICtzO1xuICAgIHJldHVybiBuID09PSAxID8gb25lXG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIG4gPSArcztcbiAgICByZXR1cm4gMCA8PSBuICYmIG4gPD0gMSA/IG9uZVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcihNYXRoLmFicygrcykpO1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIGkgPT09IDAgfHwgbiA9PT0gMSA/IG9uZVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIG4gPT09IDAgPyB6ZXJvXG4gICAgICA6IG4gPT09IDEgPyBvbmVcbiAgICAgIDogbiA9PT0gMiA/IHR3b1xuICAgICAgOiAzIDw9IG4gJSAxMDAgJiYgbiAlIDEwMCA8PSAxMCA/IGZld1xuICAgICAgOiAxMSA8PSBuICUgMTAwICYmIG4gJSAxMDAgPD0gOTkgPyBtYW55XG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKE1hdGguYWJzKCtzKSk7XG4gICAgdmFyIHYgPSAocyArICcuJykuc3BsaXQoJy4nKVsxXS5sZW5ndGg7XG4gICAgcmV0dXJuIGkgPT09IDEgJiYgdiA9PT0gMCA/IG9uZVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIG4gJSAxMCA9PT0gMSAmJiBuICUgMTAwICE9PSAxMSA/IG9uZVxuICAgICAgOiAoMiA8PSBuICUgMTAgJiYgbiAlIDEwIDw9IDQpICYmIChuICUgMTAwIDwgMTIgfHwgMTQgPCBuICUgMTAwKSA/IGZld1xuICAgICAgOiBuICUgMTAgPT09IDAgfHwgKDUgPD0gbiAlIDEwICYmIG4gJSAxMCA8PSA5KSB8fCAoMTEgPD0gbiAlIDEwMCAmJiBuICUgMTAwIDw9IDE0KSA/IG1hbnlcbiAgICAgIDogb3RoZXJcbiAgfSxcbiAgZnVuY3Rpb24gKHMvKjogc3RyaW5nIHwgbnVtYmVyICovKS8qOiBSdWxlICovIHtcbiAgICB2YXIgbiA9ICtzO1xuICAgIHJldHVybiBuICUgMTAgPT09IDEgJiYgKG4gJSAxMDAgIT09IDExICYmIG4gJSAxMDAgIT09IDcxICYmIG4gJSAxMDAgIT09IDkxKSA/IG9uZVxuICAgICAgOiBuICUgMTAgPT09IDIgJiYgKG4gJSAxMDAgIT09IDEyICYmIG4gJSAxMDAgIT09IDcyICYmIG4gJSAxMDAgIT09IDkyKSA/IHR3b1xuICAgICAgOiAoKDMgPD0gbiAlIDEwICYmIG4gJSAxMCA8PSA0KSB8fCBuICUgMTAgPT09IDkpICYmICgobiAlIDEwMCA8IDEwIHx8IDE5IDwgbiAlIDEwMCkgJiYgKG4gJSAxMDAgPCA3MCB8fCA3OSA8IG4gJSAxMDApICYmIChuICUgMTAwIDwgOTAgfHwgOTkgPCBuICUgMTAwKSkgPyBmZXdcbiAgICAgIDogbiAhPT0gMCAmJiBuICUgMTAwMDAwMCA9PT0gMCA/IG1hbnlcbiAgICAgIDogb3RoZXJcbiAgfSxcbiAgZnVuY3Rpb24gKHMvKjogc3RyaW5nIHwgbnVtYmVyICovKS8qOiBSdWxlICovIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoTWF0aC5hYnMoK3MpKTtcbiAgICB2YXIgdiA9IChzICsgJy4nKS5zcGxpdCgnLicpWzFdLmxlbmd0aDtcbiAgICB2YXIgZiA9ICsocyArICcuJykuc3BsaXQoJy4nKVsxXTtcbiAgICByZXR1cm4gdiA9PT0gMCAmJiBpICUgMTAgPT09IDEgJiYgaSAlIDEwMCAhPT0gMTEgfHwgZiAlIDEwID09PSAxICYmIGYgJSAxMDAgIT09IDExID8gb25lXG4gICAgICA6IHYgPT09IDAgJiYgKDIgPD0gaSAlIDEwICYmIGkgJSAxMCA8PSA0KSAmJiAoaSAlIDEwMCA8IDEyIHx8IDE0IDwgaSAlIDEwMCkgfHwgKDIgPD0gZiAlIDEwICYmIGYgJSAxMCA8PSA0KSAmJiAoZiAlIDEwMCA8IDEyIHx8IDE0IDwgZiAlIDEwMCkgPyBmZXdcbiAgICAgIDogb3RoZXJcbiAgfSxcbiAgZnVuY3Rpb24gKHMvKjogc3RyaW5nIHwgbnVtYmVyICovKS8qOiBSdWxlICovIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoTWF0aC5hYnMoK3MpKTtcbiAgICB2YXIgdiA9IChzICsgJy4nKS5zcGxpdCgnLicpWzFdLmxlbmd0aDtcbiAgICByZXR1cm4gaSA9PT0gMSAmJiB2ID09PSAwID8gb25lXG4gICAgICA6ICgyIDw9IGkgJiYgaSA8PSA0KSAmJiB2ID09PSAwID8gZmV3XG4gICAgICA6IHYgIT09IDAgPyBtYW55XG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIG4gPSArcztcbiAgICByZXR1cm4gbiA9PT0gMCA/IHplcm9cbiAgICAgIDogbiA9PT0gMSA/IG9uZVxuICAgICAgOiBuID09PSAyID8gdHdvXG4gICAgICA6IG4gPT09IDMgPyBmZXdcbiAgICAgIDogbiA9PT0gNiA/IG1hbnlcbiAgICAgIDogb3RoZXJcbiAgfSxcbiAgZnVuY3Rpb24gKHMvKjogc3RyaW5nIHwgbnVtYmVyICovKS8qOiBSdWxlICovIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoTWF0aC5hYnMoK3MpKTtcbiAgICB2YXIgdCA9ICsoJycgKyBzKS5yZXBsYWNlKC9eW14uXSouP3wwKyQvZywgJycpO1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIG4gPT09IDEgfHwgdCAhPT0gMCAmJiAoaSA9PT0gMCB8fCBpID09PSAxKSA/IG9uZVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcihNYXRoLmFicygrcykpO1xuICAgIHZhciB2ID0gKHMgKyAnLicpLnNwbGl0KCcuJylbMV0ubGVuZ3RoO1xuICAgIHZhciBmID0gKyhzICsgJy4nKS5zcGxpdCgnLicpWzFdO1xuICAgIHJldHVybiB2ID09PSAwICYmIGkgJSAxMDAgPT09IDEgfHwgZiAlIDEwMCA9PT0gMSA/IG9uZVxuICAgICAgOiB2ID09PSAwICYmIGkgJSAxMDAgPT09IDIgfHwgZiAlIDEwMCA9PT0gMiA/IHR3b1xuICAgICAgOiB2ID09PSAwICYmICgzIDw9IGkgJSAxMDAgJiYgaSAlIDEwMCA8PSA0KSB8fCAoMyA8PSBmICUgMTAwICYmIGYgJSAxMDAgPD0gNCkgPyBmZXdcbiAgICAgIDogb3RoZXJcbiAgfSxcbiAgZnVuY3Rpb24gKHMvKjogc3RyaW5nIHwgbnVtYmVyICovKS8qOiBSdWxlICovIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoTWF0aC5hYnMoK3MpKTtcbiAgICByZXR1cm4gaSA9PT0gMCB8fCBpID09PSAxID8gb25lXG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKE1hdGguYWJzKCtzKSk7XG4gICAgdmFyIHYgPSAocyArICcuJykuc3BsaXQoJy4nKVsxXS5sZW5ndGg7XG4gICAgdmFyIGYgPSArKHMgKyAnLicpLnNwbGl0KCcuJylbMV07XG4gICAgcmV0dXJuIHYgPT09IDAgJiYgKGkgPT09IDEgfHwgaSA9PT0gMiB8fCBpID09PSAzKSB8fCB2ID09PSAwICYmIChpICUgMTAgIT09IDQgJiYgaSAlIDEwICE9PSA2ICYmIGkgJSAxMCAhPT0gOSkgfHwgdiAhPT0gMCAmJiAoZiAlIDEwICE9PSA0ICYmIGYgJSAxMCAhPT0gNiAmJiBmICUgMTAgIT09IDkpID8gb25lXG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIG4gPSArcztcbiAgICByZXR1cm4gbiA9PT0gMSA/IG9uZVxuICAgICAgOiBuID09PSAyID8gdHdvXG4gICAgICA6IDMgPD0gbiAmJiBuIDw9IDYgPyBmZXdcbiAgICAgIDogNyA8PSBuICYmIG4gPD0gMTAgPyBtYW55XG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIG4gPSArcztcbiAgICByZXR1cm4gbiA9PT0gMSB8fCBuID09PSAxMSA/IG9uZVxuICAgICAgOiBuID09PSAyIHx8IG4gPT09IDEyID8gdHdvXG4gICAgICA6ICgoMyA8PSBuICYmIG4gPD0gMTApIHx8ICgxMyA8PSBuICYmIG4gPD0gMTkpKSA/IGZld1xuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcihNYXRoLmFicygrcykpO1xuICAgIHZhciB2ID0gKHMgKyAnLicpLnNwbGl0KCcuJylbMV0ubGVuZ3RoO1xuICAgIHJldHVybiB2ID09PSAwICYmIGkgJSAxMCA9PT0gMSA/IG9uZVxuICAgICAgOiB2ID09PSAwICYmIGkgJSAxMCA9PT0gMiA/IHR3b1xuICAgICAgOiB2ID09PSAwICYmIChpICUgMTAwID09PSAwIHx8IGkgJSAxMDAgPT09IDIwIHx8IGkgJSAxMDAgPT09IDQwIHx8IGkgJSAxMDAgPT09IDYwIHx8IGkgJSAxMDAgPT09IDgwKSA/IGZld1xuICAgICAgOiB2ICE9PSAwID8gbWFueVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcihNYXRoLmFicygrcykpO1xuICAgIHZhciB2ID0gKHMgKyAnLicpLnNwbGl0KCcuJylbMV0ubGVuZ3RoO1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIGkgPT09IDEgJiYgdiA9PT0gMCA/IG9uZVxuICAgICAgOiBpID09PSAyICYmIHYgPT09IDAgPyB0d29cbiAgICAgIDogdiA9PT0gMCAmJiAobiA8IDAgfHwgMTAgPCBuKSAmJiBuICUgMTAgPT09IDAgPyBtYW55XG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKE1hdGguYWJzKCtzKSk7XG4gICAgdmFyIHQgPSArKCcnICsgcykucmVwbGFjZSgvXlteLl0qLj98MCskL2csICcnKTtcbiAgICByZXR1cm4gdCA9PT0gMCAmJiBpICUgMTAgPT09IDEgJiYgaSAlIDEwMCAhPT0gMTEgfHwgdCAhPT0gMCA/IG9uZVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIG4gPT09IDEgPyBvbmVcbiAgICAgIDogbiA9PT0gMiA/IHR3b1xuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIG4gPT09IDAgPyB6ZXJvXG4gICAgICA6IG4gPT09IDEgPyBvbmVcbiAgICAgIDogb3RoZXJcbiAgfSxcbiAgZnVuY3Rpb24gKHMvKjogc3RyaW5nIHwgbnVtYmVyICovKS8qOiBSdWxlICovIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoTWF0aC5hYnMoK3MpKTtcbiAgICB2YXIgbiA9ICtzO1xuICAgIHJldHVybiBuID09PSAwID8gemVyb1xuICAgICAgOiAoaSA9PT0gMCB8fCBpID09PSAxKSAmJiBuICE9PSAwID8gb25lXG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIGYgPSArKHMgKyAnLicpLnNwbGl0KCcuJylbMV07XG4gICAgdmFyIG4gPSArcztcbiAgICByZXR1cm4gbiAlIDEwID09PSAxICYmIChuICUgMTAwIDwgMTEgfHwgMTkgPCBuICUgMTAwKSA/IG9uZVxuICAgICAgOiAoMiA8PSBuICUgMTAgJiYgbiAlIDEwIDw9IDkpICYmIChuICUgMTAwIDwgMTEgfHwgMTkgPCBuICUgMTAwKSA/IGZld1xuICAgICAgOiBmICE9PSAwID8gbWFueVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciB2ID0gKHMgKyAnLicpLnNwbGl0KCcuJylbMV0ubGVuZ3RoO1xuICAgIHZhciBmID0gKyhzICsgJy4nKS5zcGxpdCgnLicpWzFdO1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIG4gJSAxMCA9PT0gMCB8fCAoMTEgPD0gbiAlIDEwMCAmJiBuICUgMTAwIDw9IDE5KSB8fCB2ID09PSAyICYmICgxMSA8PSBmICUgMTAwICYmIGYgJSAxMDAgPD0gMTkpID8gemVyb1xuICAgICAgOiBuICUgMTAgPT09IDEgJiYgbiAlIDEwMCAhPT0gMTEgfHwgdiA9PT0gMiAmJiBmICUgMTAgPT09IDEgJiYgZiAlIDEwMCAhPT0gMTEgfHwgdiAhPT0gMiAmJiBmICUgMTAgPT09IDEgPyBvbmVcbiAgICAgIDogb3RoZXJcbiAgfSxcbiAgZnVuY3Rpb24gKHMvKjogc3RyaW5nIHwgbnVtYmVyICovKS8qOiBSdWxlICovIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoTWF0aC5hYnMoK3MpKTtcbiAgICB2YXIgdiA9IChzICsgJy4nKS5zcGxpdCgnLicpWzFdLmxlbmd0aDtcbiAgICB2YXIgZiA9ICsocyArICcuJykuc3BsaXQoJy4nKVsxXTtcbiAgICByZXR1cm4gdiA9PT0gMCAmJiBpICUgMTAgPT09IDEgJiYgaSAlIDEwMCAhPT0gMTEgfHwgZiAlIDEwID09PSAxICYmIGYgJSAxMDAgIT09IDExID8gb25lXG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKE1hdGguYWJzKCtzKSk7XG4gICAgdmFyIHYgPSAocyArICcuJykuc3BsaXQoJy4nKVsxXS5sZW5ndGg7XG4gICAgdmFyIG4gPSArcztcbiAgICByZXR1cm4gaSA9PT0gMSAmJiB2ID09PSAwID8gb25lXG4gICAgICA6IHYgIT09IDAgfHwgbiA9PT0gMCB8fCBuICE9PSAxICYmICgxIDw9IG4gJSAxMDAgJiYgbiAlIDEwMCA8PSAxOSkgPyBmZXdcbiAgICAgIDogb3RoZXJcbiAgfSxcbiAgZnVuY3Rpb24gKHMvKjogc3RyaW5nIHwgbnVtYmVyICovKS8qOiBSdWxlICovIHtcbiAgICB2YXIgbiA9ICtzO1xuICAgIHJldHVybiBuID09PSAxID8gb25lXG4gICAgICA6IG4gPT09IDAgfHwgKDIgPD0gbiAlIDEwMCAmJiBuICUgMTAwIDw9IDEwKSA/IGZld1xuICAgICAgOiAxMSA8PSBuICUgMTAwICYmIG4gJSAxMDAgPD0gMTkgPyBtYW55XG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKE1hdGguYWJzKCtzKSk7XG4gICAgdmFyIHYgPSAocyArICcuJykuc3BsaXQoJy4nKVsxXS5sZW5ndGg7XG4gICAgcmV0dXJuIGkgPT09IDEgJiYgdiA9PT0gMCA/IG9uZVxuICAgICAgOiB2ID09PSAwICYmICgyIDw9IGkgJSAxMCAmJiBpICUgMTAgPD0gNCkgJiYgKGkgJSAxMDAgPCAxMiB8fCAxNCA8IGkgJSAxMDApID8gZmV3XG4gICAgICA6IHYgPT09IDAgJiYgaSAhPT0gMSAmJiAoMCA8PSBpICUgMTAgJiYgaSAlIDEwIDw9IDEpIHx8IHYgPT09IDAgJiYgKDUgPD0gaSAlIDEwICYmIGkgJSAxMCA8PSA5KSB8fCB2ID09PSAwICYmICgxMiA8PSBpICUgMTAwICYmIGkgJSAxMDAgPD0gMTQpID8gbWFueVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcihNYXRoLmFicygrcykpO1xuICAgIHJldHVybiAwIDw9IGkgJiYgaSA8PSAxID8gb25lXG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKE1hdGguYWJzKCtzKSk7XG4gICAgdmFyIHYgPSAocyArICcuJykuc3BsaXQoJy4nKVsxXS5sZW5ndGg7XG4gICAgcmV0dXJuIHYgPT09IDAgJiYgaSAlIDEwID09PSAxICYmIGkgJSAxMDAgIT09IDExID8gb25lXG4gICAgICA6IHYgPT09IDAgJiYgKDIgPD0gaSAlIDEwICYmIGkgJSAxMCA8PSA0KSAmJiAoaSAlIDEwMCA8IDEyIHx8IDE0IDwgaSAlIDEwMCkgPyBmZXdcbiAgICAgIDogdiA9PT0gMCAmJiBpICUgMTAgPT09IDAgfHwgdiA9PT0gMCAmJiAoNSA8PSBpICUgMTAgJiYgaSAlIDEwIDw9IDkpIHx8IHYgPT09IDAgJiYgKDExIDw9IGkgJSAxMDAgJiYgaSAlIDEwMCA8PSAxNCkgPyBtYW55XG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKE1hdGguYWJzKCtzKSk7XG4gICAgdmFyIG4gPSArcztcbiAgICByZXR1cm4gaSA9PT0gMCB8fCBuID09PSAxID8gb25lXG4gICAgICA6IDIgPD0gbiAmJiBuIDw9IDEwID8gZmV3XG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKE1hdGguYWJzKCtzKSk7XG4gICAgdmFyIGYgPSArKHMgKyAnLicpLnNwbGl0KCcuJylbMV07XG4gICAgdmFyIG4gPSArcztcbiAgICByZXR1cm4gKG4gPT09IDAgfHwgbiA9PT0gMSkgfHwgaSA9PT0gMCAmJiBmID09PSAxID8gb25lXG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKE1hdGguYWJzKCtzKSk7XG4gICAgdmFyIHYgPSAocyArICcuJykuc3BsaXQoJy4nKVsxXS5sZW5ndGg7XG4gICAgcmV0dXJuIHYgPT09IDAgJiYgaSAlIDEwMCA9PT0gMSA/IG9uZVxuICAgICAgOiB2ID09PSAwICYmIGkgJSAxMDAgPT09IDIgPyB0d29cbiAgICAgIDogdiA9PT0gMCAmJiAoMyA8PSBpICUgMTAwICYmIGkgJSAxMDAgPD0gNCkgfHwgdiAhPT0gMCA/IGZld1xuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuICgwIDw9IG4gJiYgbiA8PSAxKSB8fCAoMTEgPD0gbiAmJiBuIDw9IDk5KSA/IG9uZVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIG4gPT09IDEgfHwgbiA9PT0gNSB8fCBuID09PSA3IHx8IG4gPT09IDggfHwgbiA9PT0gOSB8fCBuID09PSAxMCA/IG9uZVxuICAgICAgOiBuID09PSAyIHx8IG4gPT09IDMgPyB0d29cbiAgICAgIDogbiA9PT0gNCA/IGZld1xuICAgICAgOiBuID09PSA2ID8gbWFueVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcihNYXRoLmFicygrcykpO1xuICAgIHJldHVybiAoaSAlIDEwID09PSAxIHx8IGkgJSAxMCA9PT0gMiB8fCBpICUgMTAgPT09IDUgfHwgaSAlIDEwID09PSA3IHx8IGkgJSAxMCA9PT0gOCkgfHwgKGkgJSAxMDAgPT09IDIwIHx8IGkgJSAxMDAgPT09IDUwIHx8IGkgJSAxMDAgPT09IDcwIHx8IGkgJSAxMDAgPT09IDgwKSA/IG9uZVxuICAgICAgOiAoaSAlIDEwID09PSAzIHx8IGkgJSAxMCA9PT0gNCkgfHwgKGkgJSAxMDAwID09PSAxMDAgfHwgaSAlIDEwMDAgPT09IDIwMCB8fCBpICUgMTAwMCA9PT0gMzAwIHx8IGkgJSAxMDAwID09PSA0MDAgfHwgaSAlIDEwMDAgPT09IDUwMCB8fCBpICUgMTAwMCA9PT0gNjAwIHx8IGkgJSAxMDAwID09PSA3MDAgfHwgaSAlIDEwMDAgPT09IDgwMCB8fCBpICUgMTAwMCA9PT0gOTAwKSA/IGZld1xuICAgICAgOiBpID09PSAwIHx8IGkgJSAxMCA9PT0gNiB8fCAoaSAlIDEwMCA9PT0gNDAgfHwgaSAlIDEwMCA9PT0gNjAgfHwgaSAlIDEwMCA9PT0gOTApID8gbWFueVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIChuICUgMTAgPT09IDIgfHwgbiAlIDEwID09PSAzKSAmJiAobiAlIDEwMCAhPT0gMTIgJiYgbiAlIDEwMCAhPT0gMTMpID8gZmV3XG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIG4gPSArcztcbiAgICByZXR1cm4gbiA9PT0gMSB8fCBuID09PSAzID8gb25lXG4gICAgICA6IG4gPT09IDIgPyB0d29cbiAgICAgIDogbiA9PT0gNCA/IGZld1xuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIG4gPT09IDAgfHwgbiA9PT0gNyB8fCBuID09PSA4IHx8IG4gPT09IDkgPyB6ZXJvXG4gICAgICA6IG4gPT09IDEgPyBvbmVcbiAgICAgIDogbiA9PT0gMiA/IHR3b1xuICAgICAgOiBuID09PSAzIHx8IG4gPT09IDQgPyBmZXdcbiAgICAgIDogbiA9PT0gNSB8fCBuID09PSA2ID8gbWFueVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIG4gJSAxMCA9PT0gMSAmJiBuICUgMTAwICE9PSAxMSA/IG9uZVxuICAgICAgOiBuICUgMTAgPT09IDIgJiYgbiAlIDEwMCAhPT0gMTIgPyB0d29cbiAgICAgIDogbiAlIDEwID09PSAzICYmIG4gJSAxMDAgIT09IDEzID8gZmV3XG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIG4gPSArcztcbiAgICByZXR1cm4gbiA9PT0gMSA/IG9uZVxuICAgICAgOiBuID09PSAyIHx8IG4gPT09IDMgPyB0d29cbiAgICAgIDogbiA9PT0gNCA/IGZld1xuICAgICAgOiBuID09PSA2ID8gbWFueVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIG4gPT09IDEgfHwgbiA9PT0gNSA/IG9uZVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIG4gPT09IDExIHx8IG4gPT09IDggfHwgbiA9PT0gODAgfHwgbiA9PT0gODAwID8gbWFueVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcihNYXRoLmFicygrcykpO1xuICAgIHJldHVybiBpID09PSAxID8gb25lXG4gICAgICA6IGkgPT09IDAgfHwgKCgyIDw9IGkgJSAxMDAgJiYgaSAlIDEwMCA8PSAyMCkgfHwgaSAlIDEwMCA9PT0gNDAgfHwgaSAlIDEwMCA9PT0gNjAgfHwgaSAlIDEwMCA9PT0gODApID8gbWFueVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIG4gJSAxMCA9PT0gNiB8fCBuICUgMTAgPT09IDkgfHwgbiAlIDEwID09PSAwICYmIG4gIT09IDAgPyBtYW55XG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKE1hdGguYWJzKCtzKSk7XG4gICAgcmV0dXJuIGkgJSAxMCA9PT0gMSAmJiBpICUgMTAwICE9PSAxMSA/IG9uZVxuICAgICAgOiBpICUgMTAgPT09IDIgJiYgaSAlIDEwMCAhPT0gMTIgPyB0d29cbiAgICAgIDogKGkgJSAxMCA9PT0gNyB8fCBpICUgMTAgPT09IDgpICYmIChpICUgMTAwICE9PSAxNyAmJiBpICUgMTAwICE9PSAxOCkgPyBtYW55XG4gICAgICA6IG90aGVyXG4gIH0sXG4gIGZ1bmN0aW9uIChzLyo6IHN0cmluZyB8IG51bWJlciAqLykvKjogUnVsZSAqLyB7XG4gICAgdmFyIG4gPSArcztcbiAgICByZXR1cm4gbiA9PT0gMSA/IG9uZVxuICAgICAgOiBuID09PSAyIHx8IG4gPT09IDMgPyB0d29cbiAgICAgIDogbiA9PT0gNCA/IGZld1xuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIDEgPD0gbiAmJiBuIDw9IDQgPyBvbmVcbiAgICAgIDogb3RoZXJcbiAgfSxcbiAgZnVuY3Rpb24gKHMvKjogc3RyaW5nIHwgbnVtYmVyICovKS8qOiBSdWxlICovIHtcbiAgICB2YXIgbiA9ICtzO1xuICAgIHJldHVybiAobiA9PT0gMSB8fCBuID09PSA1IHx8ICg3IDw9IG4gJiYgbiA8PSA5KSkgPyBvbmVcbiAgICAgIDogbiA9PT0gMiB8fCBuID09PSAzID8gdHdvXG4gICAgICA6IG4gPT09IDQgPyBmZXdcbiAgICAgIDogbiA9PT0gNiA/IG1hbnlcbiAgICAgIDogb3RoZXJcbiAgfSxcbiAgZnVuY3Rpb24gKHMvKjogc3RyaW5nIHwgbnVtYmVyICovKS8qOiBSdWxlICovIHtcbiAgICB2YXIgbiA9ICtzO1xuICAgIHJldHVybiBuID09PSAxID8gb25lXG4gICAgICA6IG4gJSAxMCA9PT0gNCAmJiBuICUgMTAwICE9PSAxNCA/IG1hbnlcbiAgICAgIDogb3RoZXJcbiAgfSxcbiAgZnVuY3Rpb24gKHMvKjogc3RyaW5nIHwgbnVtYmVyICovKS8qOiBSdWxlICovIHtcbiAgICB2YXIgbiA9ICtzO1xuICAgIHJldHVybiAobiAlIDEwID09PSAxIHx8IG4gJSAxMCA9PT0gMikgJiYgKG4gJSAxMDAgIT09IDExICYmIG4gJSAxMDAgIT09IDEyKSA/IG9uZVxuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIChuICUgMTAgPT09IDYgfHwgbiAlIDEwID09PSA5KSB8fCBuID09PSAxMCA/IGZld1xuICAgICAgOiBvdGhlclxuICB9LFxuICBmdW5jdGlvbiAocy8qOiBzdHJpbmcgfCBudW1iZXIgKi8pLyo6IFJ1bGUgKi8ge1xuICAgIHZhciBuID0gK3M7XG4gICAgcmV0dXJuIG4gJSAxMCA9PT0gMyAmJiBuICUgMTAwICE9PSAxMyA/IGZld1xuICAgICAgOiBvdGhlclxuICB9XG5dO1xuXG52YXIgcGx1cmFscyA9IHtcbiAgYWY6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgYWs6IHsgY2FyZGluYWw6IGZbMV0gfSxcbiAgYW06IHsgY2FyZGluYWw6IGZbMl0gfSxcbiAgYXI6IHsgY2FyZGluYWw6IGZbM10gfSxcbiAgYXJzOiB7IGNhcmRpbmFsOiBmWzNdIH0sXG4gIGFzOiB7IGNhcmRpbmFsOiBmWzJdLCBvcmRpbmFsOiBmWzM0XSB9LFxuICBhc2E6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgYXN0OiB7IGNhcmRpbmFsOiBmWzRdIH0sXG4gIGF6OiB7IGNhcmRpbmFsOiBmWzBdLCBvcmRpbmFsOiBmWzM1XSB9LFxuICBiZTogeyBjYXJkaW5hbDogZls1XSwgb3JkaW5hbDogZlszNl0gfSxcbiAgYmVtOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIGJlejogeyBjYXJkaW5hbDogZlswXSB9LFxuICBiZzogeyBjYXJkaW5hbDogZlswXSB9LFxuICBiaDogeyBjYXJkaW5hbDogZlsxXSB9LFxuICBibjogeyBjYXJkaW5hbDogZlsyXSwgb3JkaW5hbDogZlszNF0gfSxcbiAgYnI6IHsgY2FyZGluYWw6IGZbNl0gfSxcbiAgYnJ4OiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIGJzOiB7IGNhcmRpbmFsOiBmWzddIH0sXG4gIGNhOiB7IGNhcmRpbmFsOiBmWzRdLCBvcmRpbmFsOiBmWzM3XSB9LFxuICBjZTogeyBjYXJkaW5hbDogZlswXSB9LFxuICBjZ2c6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgY2hyOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIGNrYjogeyBjYXJkaW5hbDogZlswXSB9LFxuICBjczogeyBjYXJkaW5hbDogZls4XSB9LFxuICBjeTogeyBjYXJkaW5hbDogZls5XSwgb3JkaW5hbDogZlszOF0gfSxcbiAgZGE6IHsgY2FyZGluYWw6IGZbMTBdIH0sXG4gIGRlOiB7IGNhcmRpbmFsOiBmWzRdIH0sXG4gIGRzYjogeyBjYXJkaW5hbDogZlsxMV0gfSxcbiAgZHY6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgZWU6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgZWw6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgZW46IHsgY2FyZGluYWw6IGZbNF0sIG9yZGluYWw6IGZbMzldIH0sXG4gIGVvOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIGVzOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIGV0OiB7IGNhcmRpbmFsOiBmWzRdIH0sXG4gIGV1OiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIGZhOiB7IGNhcmRpbmFsOiBmWzJdIH0sXG4gIGZmOiB7IGNhcmRpbmFsOiBmWzEyXSB9LFxuICBmaTogeyBjYXJkaW5hbDogZls0XSB9LFxuICBmaWw6IHsgY2FyZGluYWw6IGZbMTNdLCBvcmRpbmFsOiBmWzBdIH0sXG4gIGZvOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIGZyOiB7IGNhcmRpbmFsOiBmWzEyXSwgb3JkaW5hbDogZlswXSB9LFxuICBmdXI6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgZnk6IHsgY2FyZGluYWw6IGZbNF0gfSxcbiAgZ2E6IHsgY2FyZGluYWw6IGZbMTRdLCBvcmRpbmFsOiBmWzBdIH0sXG4gIGdkOiB7IGNhcmRpbmFsOiBmWzE1XSB9LFxuICBnbDogeyBjYXJkaW5hbDogZls0XSB9LFxuICBnc3c6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgZ3U6IHsgY2FyZGluYWw6IGZbMl0sIG9yZGluYWw6IGZbNDBdIH0sXG4gIGd1dzogeyBjYXJkaW5hbDogZlsxXSB9LFxuICBndjogeyBjYXJkaW5hbDogZlsxNl0gfSxcbiAgaGE6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgaGF3OiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIGhlOiB7IGNhcmRpbmFsOiBmWzE3XSB9LFxuICBoaTogeyBjYXJkaW5hbDogZlsyXSwgb3JkaW5hbDogZls0MF0gfSxcbiAgaHI6IHsgY2FyZGluYWw6IGZbN10gfSxcbiAgaHNiOiB7IGNhcmRpbmFsOiBmWzExXSB9LFxuICBodTogeyBjYXJkaW5hbDogZlswXSwgb3JkaW5hbDogZls0MV0gfSxcbiAgaHk6IHsgY2FyZGluYWw6IGZbMTJdLCBvcmRpbmFsOiBmWzBdIH0sXG4gIGlvOiB7IGNhcmRpbmFsOiBmWzRdIH0sXG4gIGlzOiB7IGNhcmRpbmFsOiBmWzE4XSB9LFxuICBpdDogeyBjYXJkaW5hbDogZls0XSwgb3JkaW5hbDogZls0Ml0gfSxcbiAgaXU6IHsgY2FyZGluYWw6IGZbMTldIH0sXG4gIGl3OiB7IGNhcmRpbmFsOiBmWzE3XSB9LFxuICBqZ286IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgamk6IHsgY2FyZGluYWw6IGZbNF0gfSxcbiAgam1jOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIGthOiB7IGNhcmRpbmFsOiBmWzBdLCBvcmRpbmFsOiBmWzQzXSB9LFxuICBrYWI6IHsgY2FyZGluYWw6IGZbMTJdIH0sXG4gIGthajogeyBjYXJkaW5hbDogZlswXSB9LFxuICBrY2c6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAga2s6IHsgY2FyZGluYWw6IGZbMF0sIG9yZGluYWw6IGZbNDRdIH0sXG4gIGtrajogeyBjYXJkaW5hbDogZlswXSB9LFxuICBrbDogeyBjYXJkaW5hbDogZlswXSB9LFxuICBrbjogeyBjYXJkaW5hbDogZlsyXSB9LFxuICBrczogeyBjYXJkaW5hbDogZlswXSB9LFxuICBrc2I6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAga3NoOiB7IGNhcmRpbmFsOiBmWzIwXSB9LFxuICBrdTogeyBjYXJkaW5hbDogZlswXSB9LFxuICBrdzogeyBjYXJkaW5hbDogZlsxOV0gfSxcbiAga3k6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgbGFnOiB7IGNhcmRpbmFsOiBmWzIxXSB9LFxuICBsYjogeyBjYXJkaW5hbDogZlswXSB9LFxuICBsZzogeyBjYXJkaW5hbDogZlswXSB9LFxuICBsbjogeyBjYXJkaW5hbDogZlsxXSB9LFxuICBsdDogeyBjYXJkaW5hbDogZlsyMl0gfSxcbiAgbHY6IHsgY2FyZGluYWw6IGZbMjNdIH0sXG4gIG1hczogeyBjYXJkaW5hbDogZlswXSB9LFxuICBtZzogeyBjYXJkaW5hbDogZlsxXSB9LFxuICBtZ286IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgbWs6IHsgY2FyZGluYWw6IGZbMjRdLCBvcmRpbmFsOiBmWzQ1XSB9LFxuICBtbDogeyBjYXJkaW5hbDogZlswXSB9LFxuICBtbjogeyBjYXJkaW5hbDogZlswXSB9LFxuICBtbzogeyBjYXJkaW5hbDogZlsyNV0sIG9yZGluYWw6IGZbMF0gfSxcbiAgbXI6IHsgY2FyZGluYWw6IGZbMl0sIG9yZGluYWw6IGZbNDZdIH0sXG4gIG10OiB7IGNhcmRpbmFsOiBmWzI2XSB9LFxuICBuYWg6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgbmFxOiB7IGNhcmRpbmFsOiBmWzE5XSB9LFxuICBuYjogeyBjYXJkaW5hbDogZlswXSB9LFxuICBuZDogeyBjYXJkaW5hbDogZlswXSB9LFxuICBuZTogeyBjYXJkaW5hbDogZlswXSwgb3JkaW5hbDogZls0N10gfSxcbiAgbmw6IHsgY2FyZGluYWw6IGZbNF0gfSxcbiAgbm46IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgbm5oOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIG5vOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIG5yOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIG5zbzogeyBjYXJkaW5hbDogZlsxXSB9LFxuICBueTogeyBjYXJkaW5hbDogZlswXSB9LFxuICBueW46IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgb206IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgb3I6IHsgY2FyZGluYWw6IGZbMF0sIG9yZGluYWw6IGZbNDhdIH0sXG4gIG9zOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIHBhOiB7IGNhcmRpbmFsOiBmWzFdIH0sXG4gIHBhcDogeyBjYXJkaW5hbDogZlswXSB9LFxuICBwbDogeyBjYXJkaW5hbDogZlsyN10gfSxcbiAgcHJnOiB7IGNhcmRpbmFsOiBmWzIzXSB9LFxuICBwczogeyBjYXJkaW5hbDogZlswXSB9LFxuICBwdDogeyBjYXJkaW5hbDogZlsyOF0gfSxcbiAgJ3B0LVBUJzogeyBjYXJkaW5hbDogZls0XSB9LFxuICBybTogeyBjYXJkaW5hbDogZlswXSB9LFxuICBybzogeyBjYXJkaW5hbDogZlsyNV0sIG9yZGluYWw6IGZbMF0gfSxcbiAgcm9mOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIHJ1OiB7IGNhcmRpbmFsOiBmWzI5XSB9LFxuICByd2s6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgc2FxOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIHNjbjogeyBjYXJkaW5hbDogZls0XSwgb3JkaW5hbDogZls0Ml0gfSxcbiAgc2Q6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgc2RoOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIHNlOiB7IGNhcmRpbmFsOiBmWzE5XSB9LFxuICBzZWg6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgc2g6IHsgY2FyZGluYWw6IGZbN10gfSxcbiAgc2hpOiB7IGNhcmRpbmFsOiBmWzMwXSB9LFxuICBzaTogeyBjYXJkaW5hbDogZlszMV0gfSxcbiAgc2s6IHsgY2FyZGluYWw6IGZbOF0gfSxcbiAgc2w6IHsgY2FyZGluYWw6IGZbMzJdIH0sXG4gIHNtYTogeyBjYXJkaW5hbDogZlsxOV0gfSxcbiAgc21pOiB7IGNhcmRpbmFsOiBmWzE5XSB9LFxuICBzbWo6IHsgY2FyZGluYWw6IGZbMTldIH0sXG4gIHNtbjogeyBjYXJkaW5hbDogZlsxOV0gfSxcbiAgc21zOiB7IGNhcmRpbmFsOiBmWzE5XSB9LFxuICBzbjogeyBjYXJkaW5hbDogZlswXSB9LFxuICBzbzogeyBjYXJkaW5hbDogZlswXSB9LFxuICBzcTogeyBjYXJkaW5hbDogZlswXSwgb3JkaW5hbDogZls0OV0gfSxcbiAgc3I6IHsgY2FyZGluYWw6IGZbN10gfSxcbiAgc3M6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgc3N5OiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIHN0OiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIHN2OiB7IGNhcmRpbmFsOiBmWzRdLCBvcmRpbmFsOiBmWzUwXSB9LFxuICBzdzogeyBjYXJkaW5hbDogZls0XSB9LFxuICBzeXI6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgdGE6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgdGU6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgdGVvOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIHRpOiB7IGNhcmRpbmFsOiBmWzFdIH0sXG4gIHRpZzogeyBjYXJkaW5hbDogZlswXSB9LFxuICB0azogeyBjYXJkaW5hbDogZlswXSwgb3JkaW5hbDogZls1MV0gfSxcbiAgdGw6IHsgY2FyZGluYWw6IGZbMTNdLCBvcmRpbmFsOiBmWzBdIH0sXG4gIHRuOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIHRyOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIHRzOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIHR6bTogeyBjYXJkaW5hbDogZlszM10gfSxcbiAgdWc6IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgdWs6IHsgY2FyZGluYWw6IGZbMjldLCBvcmRpbmFsOiBmWzUyXSB9LFxuICB1cjogeyBjYXJkaW5hbDogZls0XSB9LFxuICB1ejogeyBjYXJkaW5hbDogZlswXSB9LFxuICB2ZTogeyBjYXJkaW5hbDogZlswXSB9LFxuICB2bzogeyBjYXJkaW5hbDogZlswXSB9LFxuICB2dW46IHsgY2FyZGluYWw6IGZbMF0gfSxcbiAgd2E6IHsgY2FyZGluYWw6IGZbMV0gfSxcbiAgd2FlOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIHhoOiB7IGNhcmRpbmFsOiBmWzBdIH0sXG4gIHhvZzogeyBjYXJkaW5hbDogZlswXSB9LFxuICB5aTogeyBjYXJkaW5hbDogZls0XSB9LFxuICB6dTogeyBjYXJkaW5hbDogZlsyXSB9LFxuICBsbzogeyBvcmRpbmFsOiBmWzBdIH0sXG4gIG1zOiB7IG9yZGluYWw6IGZbMF0gfSxcbiAgdmk6IHsgb3JkaW5hbDogZlswXSB9XG59O1xuXG52YXIgZm9ybWF0TWVzc2FnZUludGVycHJldCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuXG5cblxuLyo6OlxuaW1wb3J0IHR5cGUge1xuICBBU1QsXG4gIFN1Yk1lc3NhZ2VzXG59IGZyb20gJy4uL2Zvcm1hdC1tZXNzYWdlLXBhcnNlJ1xudHlwZSBMb2NhbGUgPSBzdHJpbmdcbnR5cGUgTG9jYWxlcyA9IExvY2FsZSB8IExvY2FsZVtdXG50eXBlIFBsYWNlaG9sZGVyID0gYW55W10gLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzQwNTBcbmV4cG9ydCB0eXBlIFR5cGUgPSAoUGxhY2Vob2xkZXIsIExvY2FsZXMpID0+IChhbnksID9PYmplY3QpID0+IGFueVxuZXhwb3J0IHR5cGUgVHlwZXMgPSB7IFtzdHJpbmddOiBUeXBlIH1cbiovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGludGVycHJldCAoXG4gIGFzdC8qOiBBU1QgKi8sXG4gIGxvY2FsZS8qOjogPzogTG9jYWxlcyAqLyxcbiAgdHlwZXMvKjo6ID86IFR5cGVzICovXG4pLyo6IChhcmdzPzogT2JqZWN0KSA9PiBzdHJpbmcgKi8ge1xuICByZXR1cm4gaW50ZXJwcmV0QVNUKGFzdCwgbnVsbCwgbG9jYWxlIHx8ICdlbicsIHR5cGVzIHx8IHt9LCB0cnVlKVxufTtcblxuZXhwb3J0cy50b1BhcnRzID0gZnVuY3Rpb24gdG9QYXJ0cyAoXG4gIGFzdC8qOiBBU1QgKi8sXG4gIGxvY2FsZS8qOjogPzogTG9jYWxlcyAqLyxcbiAgdHlwZXMvKjo6ID86IFR5cGVzICovXG4pLyo6IChhcmdzPzogT2JqZWN0KSA9PiBhbnlbXSAqLyB7XG4gIHJldHVybiBpbnRlcnByZXRBU1QoYXN0LCBudWxsLCBsb2NhbGUgfHwgJ2VuJywgdHlwZXMgfHwge30sIGZhbHNlKVxufTtcblxuZnVuY3Rpb24gaW50ZXJwcmV0QVNUIChcbiAgZWxlbWVudHMvKjogYW55W10gKi8sXG4gIHBhcmVudC8qOiA/UGxhY2Vob2xkZXIgKi8sXG4gIGxvY2FsZS8qOiBMb2NhbGVzICovLFxuICB0eXBlcy8qOiBUeXBlcyAqLyxcbiAgam9pbi8qOiBib29sZWFuICovXG4pLyo6IEZ1bmN0aW9uICovIHtcbiAgdmFyIHBhcnRzID0gZWxlbWVudHMubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGludGVycHJldEVsZW1lbnQoZWxlbWVudCwgcGFyZW50LCBsb2NhbGUsIHR5cGVzLCBqb2luKVxuICB9KTtcblxuICBpZiAoIWpvaW4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZm9ybWF0IChhcmdzKSB7XG4gICAgICByZXR1cm4gcGFydHMucmVkdWNlKGZ1bmN0aW9uIChwYXJ0cywgcGFydCkge1xuICAgICAgICByZXR1cm4gcGFydHMuY29uY2F0KHBhcnQoYXJncykpXG4gICAgICB9LCBbXSlcbiAgICB9XG4gIH1cblxuICBpZiAocGFydHMubGVuZ3RoID09PSAxKSByZXR1cm4gcGFydHNbMF1cbiAgcmV0dXJuIGZ1bmN0aW9uIGZvcm1hdCAoYXJncykge1xuICAgIHZhciBtZXNzYWdlID0gJyc7XG4gICAgZm9yICh2YXIgZSA9IDA7IGUgPCBwYXJ0cy5sZW5ndGg7ICsrZSkge1xuICAgICAgbWVzc2FnZSArPSBwYXJ0c1tlXShhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnRlcnByZXRFbGVtZW50IChcbiAgZWxlbWVudC8qOiBQbGFjZWhvbGRlciAqLyxcbiAgcGFyZW50Lyo6ID9QbGFjZWhvbGRlciAqLyxcbiAgbG9jYWxlLyo6IExvY2FsZXMgKi8sXG4gIHR5cGVzLyo6IFR5cGVzICovLFxuICBqb2luLyo6IGJvb2xlYW4gKi9cbikvKjogRnVuY3Rpb24gKi8ge1xuICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHZhbHVlLyo6IHN0cmluZyAqLyA9IGVsZW1lbnQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZvcm1hdCAoKSB7IHJldHVybiB2YWx1ZSB9XG4gIH1cblxuICB2YXIgaWQgPSBlbGVtZW50WzBdO1xuICB2YXIgdHlwZSA9IGVsZW1lbnRbMV07XG5cbiAgaWYgKHBhcmVudCAmJiBlbGVtZW50WzBdID09PSAnIycpIHtcbiAgICBpZCA9IHBhcmVudFswXTtcbiAgICB2YXIgb2Zmc2V0ID0gcGFyZW50WzJdO1xuICAgIHZhciBmb3JtYXR0ZXIgPSAodHlwZXMubnVtYmVyIHx8IGRlZmF1bHRzLm51bWJlcikoWyBpZCwgJ251bWJlcicgXSwgbG9jYWxlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gZm9ybWF0IChhcmdzKSB7XG4gICAgICByZXR1cm4gZm9ybWF0dGVyKGdldEFyZyhpZCwgYXJncykgLSBvZmZzZXQsIGFyZ3MpXG4gICAgfVxuICB9XG5cbiAgLy8gcHJlLXByb2Nlc3MgY2hpbGRyZW5cbiAgdmFyIGNoaWxkcmVuO1xuICBpZiAodHlwZSA9PT0gJ3BsdXJhbCcgfHwgdHlwZSA9PT0gJ3NlbGVjdG9yZGluYWwnKSB7XG4gICAgY2hpbGRyZW4gPSB7fTtcbiAgICBPYmplY3Qua2V5cyhlbGVtZW50WzNdKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBpbnRlcnByZXRBU1QoZWxlbWVudFszXVtrZXldLCBlbGVtZW50LCBsb2NhbGUsIHR5cGVzLCBqb2luKTtcbiAgICB9KTtcbiAgICBlbGVtZW50ID0gWyBlbGVtZW50WzBdLCBlbGVtZW50WzFdLCBlbGVtZW50WzJdLCBjaGlsZHJlbiBdO1xuICB9IGVsc2UgaWYgKGVsZW1lbnRbMl0gJiYgdHlwZW9mIGVsZW1lbnRbMl0gPT09ICdvYmplY3QnKSB7XG4gICAgY2hpbGRyZW4gPSB7fTtcbiAgICBPYmplY3Qua2V5cyhlbGVtZW50WzJdKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBpbnRlcnByZXRBU1QoZWxlbWVudFsyXVtrZXldLCBlbGVtZW50LCBsb2NhbGUsIHR5cGVzLCBqb2luKTtcbiAgICB9KTtcbiAgICBlbGVtZW50ID0gWyBlbGVtZW50WzBdLCBlbGVtZW50WzFdLCBjaGlsZHJlbiBdO1xuICB9XG5cbiAgdmFyIGdldEZybXQgPSB0eXBlICYmICh0eXBlc1t0eXBlXSB8fCBkZWZhdWx0c1t0eXBlXSk7XG4gIGlmIChnZXRGcm10KSB7XG4gICAgdmFyIGZybXQgPSBnZXRGcm10KGVsZW1lbnQsIGxvY2FsZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZvcm1hdCAoYXJncykge1xuICAgICAgcmV0dXJuIGZybXQoZ2V0QXJnKGlkLCBhcmdzKSwgYXJncylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gam9pblxuICAgID8gZnVuY3Rpb24gZm9ybWF0IChhcmdzKSB7IHJldHVybiBTdHJpbmcoZ2V0QXJnKGlkLCBhcmdzKSkgfVxuICAgIDogZnVuY3Rpb24gZm9ybWF0IChhcmdzKSB7IHJldHVybiBnZXRBcmcoaWQsIGFyZ3MpIH1cbn1cblxuZnVuY3Rpb24gZ2V0QXJnIChpZC8qOiBzdHJpbmcgKi8sIGFyZ3MvKjogP09iamVjdCAqLykvKjogYW55ICovIHtcbiAgaWYgKGFyZ3MgJiYgKGlkIGluIGFyZ3MpKSByZXR1cm4gYXJnc1tpZF1cbiAgdmFyIHBhcnRzID0gaWQuc3BsaXQoJy4nKTtcbiAgdmFyIGEgPSBhcmdzO1xuICBmb3IgKHZhciBpID0gMCwgaWkgPSBwYXJ0cy5sZW5ndGg7IGEgJiYgaSA8IGlpOyArK2kpIHtcbiAgICBhID0gYVtwYXJ0c1tpXV07XG4gIH1cbiAgcmV0dXJuIGFcbn1cblxuZnVuY3Rpb24gaW50ZXJwcmV0TnVtYmVyIChlbGVtZW50Lyo6IFBsYWNlaG9sZGVyICovLCBsb2NhbGVzLyo6IExvY2FsZXMgKi8pIHtcbiAgdmFyIHN0eWxlID0gZWxlbWVudFsyXTtcbiAgdmFyIG9wdGlvbnMgPSBmb3JtYXRNZXNzYWdlRm9ybWF0cy5udW1iZXJbc3R5bGVdIHx8IGZvcm1hdE1lc3NhZ2VGb3JtYXRzLnBhcnNlTnVtYmVyUGF0dGVybihzdHlsZSkgfHwgZm9ybWF0TWVzc2FnZUZvcm1hdHMubnVtYmVyLmRlZmF1bHQ7XG4gIHJldHVybiBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jYWxlcywgb3B0aW9ucykuZm9ybWF0XG59XG5cbmZ1bmN0aW9uIGludGVycHJldER1cmF0aW9uIChlbGVtZW50Lyo6IFBsYWNlaG9sZGVyICovLCBsb2NhbGVzLyo6IExvY2FsZXMgKi8pIHtcbiAgdmFyIHN0eWxlID0gZWxlbWVudFsyXTtcbiAgdmFyIG9wdGlvbnMgPSBmb3JtYXRNZXNzYWdlRm9ybWF0cy5kdXJhdGlvbltzdHlsZV0gfHwgZm9ybWF0TWVzc2FnZUZvcm1hdHMuZHVyYXRpb24uZGVmYXVsdDtcbiAgdmFyIGZzID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZXMsIG9wdGlvbnMuc2Vjb25kcykuZm9ybWF0O1xuICB2YXIgZm0gPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jYWxlcywgb3B0aW9ucy5taW51dGVzKS5mb3JtYXQ7XG4gIHZhciBmaCA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGVzLCBvcHRpb25zLmhvdXJzKS5mb3JtYXQ7XG4gIHZhciBzZXAgPSAvXmZpJHxeZmktfF5kYS8udGVzdChTdHJpbmcobG9jYWxlcykpID8gJy4nIDogJzonO1xuXG4gIHJldHVybiBmdW5jdGlvbiAocywgYXJncykge1xuICAgIHMgPSArcztcbiAgICBpZiAoIWlzRmluaXRlKHMpKSByZXR1cm4gZnMocylcbiAgICB2YXIgaCA9IH5+KHMgLyA2MCAvIDYwKTsgLy8gfn4gYWN0cyBtdWNoIGxpa2UgTWF0aC50cnVuY1xuICAgIHZhciBtID0gfn4ocyAvIDYwICUgNjApO1xuICAgIHZhciBkdXIgPSAoaCA/IChmaChNYXRoLmFicyhoKSkgKyBzZXApIDogJycpICtcbiAgICAgIGZtKE1hdGguYWJzKG0pKSArIHNlcCArIGZzKE1hdGguYWJzKHMgJSA2MCkpO1xuICAgIHJldHVybiBzIDwgMCA/IGZoKC0xKS5yZXBsYWNlKGZoKDEpLCBkdXIpIDogZHVyXG4gIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJwcmV0RGF0ZVRpbWUgKGVsZW1lbnQvKjogUGxhY2Vob2xkZXIgKi8sIGxvY2FsZXMvKjogTG9jYWxlcyAqLykge1xuICB2YXIgdHlwZSA9IGVsZW1lbnRbMV07XG4gIHZhciBzdHlsZSA9IGVsZW1lbnRbMl07XG4gIHZhciBvcHRpb25zID0gZm9ybWF0TWVzc2FnZUZvcm1hdHNbdHlwZV1bc3R5bGVdIHx8IGZvcm1hdE1lc3NhZ2VGb3JtYXRzLnBhcnNlRGF0ZVBhdHRlcm4oc3R5bGUpIHx8IGZvcm1hdE1lc3NhZ2VGb3JtYXRzW3R5cGVdLmRlZmF1bHQ7XG4gIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGVzLCBvcHRpb25zKS5mb3JtYXRcbn1cblxuZnVuY3Rpb24gaW50ZXJwcmV0UGx1cmFsIChlbGVtZW50Lyo6IFBsYWNlaG9sZGVyICovLCBsb2NhbGVzLyo6IExvY2FsZXMgKi8pIHtcbiAgdmFyIHR5cGUgPSBlbGVtZW50WzFdO1xuICB2YXIgcGx1cmFsVHlwZSA9IHR5cGUgPT09ICdzZWxlY3RvcmRpbmFsJyA/ICdvcmRpbmFsJyA6ICdjYXJkaW5hbCc7XG4gIHZhciBvZmZzZXQgPSBlbGVtZW50WzJdO1xuICB2YXIgY2hpbGRyZW4gPSBlbGVtZW50WzNdO1xuICB2YXIgcGx1cmFsUnVsZXM7XG4gIGlmIChJbnRsLlBsdXJhbFJ1bGVzICYmIEludGwuUGx1cmFsUnVsZXMuc3VwcG9ydGVkTG9jYWxlc09mKGxvY2FsZXMpLmxlbmd0aCA+IDApIHtcbiAgICBwbHVyYWxSdWxlcyA9IG5ldyBJbnRsLlBsdXJhbFJ1bGVzKGxvY2FsZXMsIHsgdHlwZTogcGx1cmFsVHlwZSB9KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbG9jYWxlID0gbG9va3VwQ2xvc2VzdExvY2FsZShsb2NhbGVzLCBwbHVyYWxzKTtcbiAgICB2YXIgc2VsZWN0ID0gKGxvY2FsZSAmJiBwbHVyYWxzW2xvY2FsZV1bcGx1cmFsVHlwZV0pIHx8IHJldHVybk90aGVyO1xuICAgIHBsdXJhbFJ1bGVzID0geyBzZWxlY3Q6IHNlbGVjdCB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSwgYXJncykge1xuICAgIHZhciBjbGF1c2UgPVxuICAgICAgY2hpbGRyZW5bJz0nICsgK3ZhbHVlXSB8fFxuICAgICAgY2hpbGRyZW5bcGx1cmFsUnVsZXMuc2VsZWN0KHZhbHVlIC0gb2Zmc2V0KV0gfHxcbiAgICAgIGNoaWxkcmVuLm90aGVyO1xuICAgIHJldHVybiBjbGF1c2UoYXJncylcbiAgfVxufVxuXG5mdW5jdGlvbiByZXR1cm5PdGhlciAoLyo6OiBuOm51bWJlciAqLykgeyByZXR1cm4gJ290aGVyJyB9XG5cbmZ1bmN0aW9uIGludGVycHJldFNlbGVjdCAoZWxlbWVudC8qOiBQbGFjZWhvbGRlciAqLywgbG9jYWxlcy8qOiBMb2NhbGVzICovKSB7XG4gIHZhciBjaGlsZHJlbiA9IGVsZW1lbnRbMl07XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUsIGFyZ3MpIHtcbiAgICB2YXIgY2xhdXNlID0gY2hpbGRyZW5bdmFsdWVdIHx8IGNoaWxkcmVuLm90aGVyO1xuICAgIHJldHVybiBjbGF1c2UoYXJncylcbiAgfVxufVxuXG52YXIgZGVmYXVsdHMvKjogVHlwZXMgKi8gPSB7XG4gIG51bWJlcjogaW50ZXJwcmV0TnVtYmVyLFxuICBvcmRpbmFsOiBpbnRlcnByZXROdW1iZXIsIC8vIFRPRE86IHN1cHBvcnQgcmJuZlxuICBzcGVsbG91dDogaW50ZXJwcmV0TnVtYmVyLCAvLyBUT0RPOiBzdXBwb3J0IHJibmZcbiAgZHVyYXRpb246IGludGVycHJldER1cmF0aW9uLFxuICBkYXRlOiBpbnRlcnByZXREYXRlVGltZSxcbiAgdGltZTogaW50ZXJwcmV0RGF0ZVRpbWUsXG4gIHBsdXJhbDogaW50ZXJwcmV0UGx1cmFsLFxuICBzZWxlY3RvcmRpbmFsOiBpbnRlcnByZXRQbHVyYWwsXG4gIHNlbGVjdDogaW50ZXJwcmV0U2VsZWN0XG59O1xuZXhwb3J0cy50eXBlcyA9IGRlZmF1bHRzO1xufSk7XG52YXIgZm9ybWF0TWVzc2FnZUludGVycHJldF8xID0gZm9ybWF0TWVzc2FnZUludGVycHJldC50b1BhcnRzO1xudmFyIGZvcm1hdE1lc3NhZ2VJbnRlcnByZXRfMiA9IGZvcm1hdE1lc3NhZ2VJbnRlcnByZXQudHlwZXM7XG5cbnZhciBmb3JtYXRNZXNzYWdlUGFyc2UgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbi8qOjpcbmV4cG9ydCB0eXBlIEFTVCA9IEVsZW1lbnRbXVxuZXhwb3J0IHR5cGUgRWxlbWVudCA9IHN0cmluZyB8IFBsYWNlaG9sZGVyXG5leHBvcnQgdHlwZSBQbGFjZWhvbGRlciA9IFBsdXJhbCB8IFN0eWxlZCB8IFR5cGVkIHwgU2ltcGxlXG5leHBvcnQgdHlwZSBQbHVyYWwgPSBbIHN0cmluZywgJ3BsdXJhbCcgfCAnc2VsZWN0b3JkaW5hbCcsIG51bWJlciwgU3ViTWVzc2FnZXMgXVxuZXhwb3J0IHR5cGUgU3R5bGVkID0gWyBzdHJpbmcsIHN0cmluZywgc3RyaW5nIHwgU3ViTWVzc2FnZXMgXVxuZXhwb3J0IHR5cGUgVHlwZWQgPSBbIHN0cmluZywgc3RyaW5nIF1cbmV4cG9ydCB0eXBlIFNpbXBsZSA9IFsgc3RyaW5nIF1cbmV4cG9ydCB0eXBlIFN1Yk1lc3NhZ2VzID0geyBbc3RyaW5nXTogQVNUIH1cbmV4cG9ydCB0eXBlIFRva2VuID0gWyBUb2tlblR5cGUsIHN0cmluZyBdXG5leHBvcnQgdHlwZSBUb2tlblR5cGUgPSAndGV4dCcgfCAnc3BhY2UnIHwgJ2lkJyB8ICd0eXBlJyB8ICdzdHlsZScgfCAnb2Zmc2V0JyB8ICdudW1iZXInIHwgJ3NlbGVjdG9yJyB8ICdzeW50YXgnXG50eXBlIENvbnRleHQgPSB7fFxuICBwYXR0ZXJuOiBzdHJpbmcsXG4gIGluZGV4OiBudW1iZXIsXG4gIHRhZ3NUeXBlOiA/c3RyaW5nLFxuICB0b2tlbnM6ID9Ub2tlbltdXG58fVxuKi9cblxudmFyIEFSR19PUE4gPSAneyc7XG52YXIgQVJHX0NMUyA9ICd9JztcbnZhciBBUkdfU0VQID0gJywnO1xudmFyIE5VTV9BUkcgPSAnIyc7XG52YXIgVEFHX09QTiA9ICc8JztcbnZhciBUQUdfQ0xTID0gJz4nO1xudmFyIFRBR19FTkQgPSAnPC8nO1xudmFyIFRBR19TRUxGX0NMUyA9ICcvPic7XG52YXIgRVNDID0gJ1xcJyc7XG52YXIgT0ZGU0VUID0gJ29mZnNldDonO1xudmFyIHNpbXBsZVR5cGVzID0gW1xuICAnbnVtYmVyJyxcbiAgJ2RhdGUnLFxuICAndGltZScsXG4gICdvcmRpbmFsJyxcbiAgJ2R1cmF0aW9uJyxcbiAgJ3NwZWxsb3V0J1xuXTtcbnZhciBzdWJtVHlwZXMgPSBbXG4gICdwbHVyYWwnLFxuICAnc2VsZWN0JyxcbiAgJ3NlbGVjdG9yZGluYWwnXG5dO1xuXG4vKipcbiAqIHBhcnNlXG4gKlxuICogVHVybnMgdGhpczpcbiAqICBgWW91IGhhdmUgeyBudW1CYW5hbmFzLCBwbHVyYWwsXG4gKiAgICAgICA9MCB7bm8gYmFuYW5hc31cbiAqICAgICAgb25lIHthIGJhbmFuYX1cbiAqICAgIG90aGVyIHsjIGJhbmFuYXN9XG4gKiAgfSBmb3Igc2FsZWBcbiAqXG4gKiBpbnRvIHRoaXM6XG4gKiAgWyBcIllvdSBoYXZlIFwiLCBbIFwibnVtQmFuYW5hc1wiLCBcInBsdXJhbFwiLCAwLCB7XG4gKiAgICAgICBcIj0wXCI6IFsgXCJubyBiYW5hbmFzXCIgXSxcbiAqICAgICAgXCJvbmVcIjogWyBcImEgYmFuYW5hXCIgXSxcbiAqICAgIFwib3RoZXJcIjogWyBbICcjJyBdLCBcIiBiYW5hbmFzXCIgXVxuICogIH0gXSwgXCIgZm9yIHNhbGUuXCIgXVxuICpcbiAqIHRva2VuczpcbiAqICBbXG4gKiAgICBbIFwidGV4dFwiLCBcIllvdSBoYXZlIFwiIF0sXG4gKiAgICBbIFwic3ludGF4XCIsIFwie1wiIF0sXG4gKiAgICBbIFwic3BhY2VcIiwgXCIgXCIgXSxcbiAqICAgIFsgXCJpZFwiLCBcIm51bUJhbmFuYXNcIiBdLFxuICogICAgWyBcInN5bnRheFwiLCBcIiwgXCIgXSxcbiAqICAgIFsgXCJzcGFjZVwiLCBcIiBcIiBdLFxuICogICAgWyBcInR5cGVcIiwgXCJwbHVyYWxcIiBdLFxuICogICAgWyBcInN5bnRheFwiLCBcIixcIiBdLFxuICogICAgWyBcInNwYWNlXCIsIFwiXFxuICAgICBcIiBdLFxuICogICAgWyBcInNlbGVjdG9yXCIsIFwiPTBcIiBdLFxuICogICAgWyBcInNwYWNlXCIsIFwiIFwiIF0sXG4gKiAgICBbIFwic3ludGF4XCIsIFwie1wiIF0sXG4gKiAgICBbIFwidGV4dFwiLCBcIm5vIGJhbmFuYXNcIiBdLFxuICogICAgWyBcInN5bnRheFwiLCBcIn1cIiBdLFxuICogICAgWyBcInNwYWNlXCIsIFwiXFxuICAgIFwiIF0sXG4gKiAgICBbIFwic2VsZWN0b3JcIiwgXCJvbmVcIiBdLFxuICogICAgWyBcInNwYWNlXCIsIFwiIFwiIF0sXG4gKiAgICBbIFwic3ludGF4XCIsIFwie1wiIF0sXG4gKiAgICBbIFwidGV4dFwiLCBcImEgYmFuYW5hXCIgXSxcbiAqICAgIFsgXCJzeW50YXhcIiwgXCJ9XCIgXSxcbiAqICAgIFsgXCJzcGFjZVwiLCBcIlxcbiAgXCIgXSxcbiAqICAgIFsgXCJzZWxlY3RvclwiLCBcIm90aGVyXCIgXSxcbiAqICAgIFsgXCJzcGFjZVwiLCBcIiBcIiBdLFxuICogICAgWyBcInN5bnRheFwiLCBcIntcIiBdLFxuICogICAgWyBcInN5bnRheFwiLCBcIiNcIiBdLFxuICogICAgWyBcInRleHRcIiwgXCIgYmFuYW5hc1wiIF0sXG4gKiAgICBbIFwic3ludGF4XCIsIFwifVwiIF0sXG4gKiAgICBbIFwic3BhY2VcIiwgXCJcXG5cIiBdLFxuICogICAgWyBcInN5bnRheFwiLCBcIn1cIiBdLFxuICogICAgWyBcInRleHRcIiwgXCIgZm9yIHNhbGUuXCIgXVxuICogIF1cbiAqKi9cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlIChcbiAgcGF0dGVybi8qOiBzdHJpbmcgKi8sXG4gIG9wdGlvbnMvKjo6ID86IHsgdGFnc1R5cGU/OiBzdHJpbmcsIHRva2Vucz86IFRva2VuW10gfSAqL1xuKS8qOiBBU1QgKi8ge1xuICByZXR1cm4gcGFyc2VBU1Qoe1xuICAgIHBhdHRlcm46IFN0cmluZyhwYXR0ZXJuKSxcbiAgICBpbmRleDogMCxcbiAgICB0YWdzVHlwZTogKG9wdGlvbnMgJiYgb3B0aW9ucy50YWdzVHlwZSkgfHwgbnVsbCxcbiAgICB0b2tlbnM6IChvcHRpb25zICYmIG9wdGlvbnMudG9rZW5zKSB8fCBudWxsXG4gIH0sICcnKVxufTtcblxuZnVuY3Rpb24gcGFyc2VBU1QgKGN1cnJlbnQvKjogQ29udGV4dCAqLywgcGFyZW50VHlwZS8qOiBzdHJpbmcgKi8pLyo6IEFTVCAqLyB7XG4gIHZhciBwYXR0ZXJuID0gY3VycmVudC5wYXR0ZXJuO1xuICB2YXIgbGVuZ3RoID0gcGF0dGVybi5sZW5ndGg7XG4gIHZhciBlbGVtZW50cy8qOiBBU1QgKi8gPSBbXTtcbiAgdmFyIHN0YXJ0ID0gY3VycmVudC5pbmRleDtcbiAgdmFyIHRleHQgPSBwYXJzZVRleHQoY3VycmVudCwgcGFyZW50VHlwZSk7XG4gIGlmICh0ZXh0KSBlbGVtZW50cy5wdXNoKHRleHQpO1xuICBpZiAodGV4dCAmJiBjdXJyZW50LnRva2VucykgY3VycmVudC50b2tlbnMucHVzaChbICd0ZXh0JywgcGF0dGVybi5zbGljZShzdGFydCwgY3VycmVudC5pbmRleCkgXSk7XG4gIHdoaWxlIChjdXJyZW50LmluZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHBhdHRlcm5bY3VycmVudC5pbmRleF0gPT09IEFSR19DTFMpIHtcbiAgICAgIGlmICghcGFyZW50VHlwZSkgdGhyb3cgZXhwZWN0ZWQoY3VycmVudClcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChwYXJlbnRUeXBlICYmIGN1cnJlbnQudGFnc1R5cGUgJiYgcGF0dGVybi5zbGljZShjdXJyZW50LmluZGV4LCBjdXJyZW50LmluZGV4ICsgVEFHX0VORC5sZW5ndGgpID09PSBUQUdfRU5EKSBicmVha1xuICAgIGVsZW1lbnRzLnB1c2gocGFyc2VQbGFjZWhvbGRlcihjdXJyZW50KSk7XG4gICAgc3RhcnQgPSBjdXJyZW50LmluZGV4O1xuICAgIHRleHQgPSBwYXJzZVRleHQoY3VycmVudCwgcGFyZW50VHlwZSk7XG4gICAgaWYgKHRleHQpIGVsZW1lbnRzLnB1c2godGV4dCk7XG4gICAgaWYgKHRleHQgJiYgY3VycmVudC50b2tlbnMpIGN1cnJlbnQudG9rZW5zLnB1c2goWyAndGV4dCcsIHBhdHRlcm4uc2xpY2Uoc3RhcnQsIGN1cnJlbnQuaW5kZXgpIF0pO1xuICB9XG4gIHJldHVybiBlbGVtZW50c1xufVxuXG5mdW5jdGlvbiBwYXJzZVRleHQgKGN1cnJlbnQvKjogQ29udGV4dCAqLywgcGFyZW50VHlwZS8qOiBzdHJpbmcgKi8pLyo6IHN0cmluZyAqLyB7XG4gIHZhciBwYXR0ZXJuID0gY3VycmVudC5wYXR0ZXJuO1xuICB2YXIgbGVuZ3RoID0gcGF0dGVybi5sZW5ndGg7XG4gIHZhciBpc0hhc2hTcGVjaWFsID0gKHBhcmVudFR5cGUgPT09ICdwbHVyYWwnIHx8IHBhcmVudFR5cGUgPT09ICdzZWxlY3RvcmRpbmFsJyk7XG4gIHZhciBpc0FuZ2xlU3BlY2lhbCA9ICEhY3VycmVudC50YWdzVHlwZTtcbiAgdmFyIGlzQXJnU3R5bGUgPSAocGFyZW50VHlwZSA9PT0gJ3tzdHlsZX0nKTtcbiAgdmFyIHRleHQgPSAnJztcbiAgd2hpbGUgKGN1cnJlbnQuaW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgY2hhciA9IHBhdHRlcm5bY3VycmVudC5pbmRleF07XG4gICAgaWYgKFxuICAgICAgY2hhciA9PT0gQVJHX09QTiB8fCBjaGFyID09PSBBUkdfQ0xTIHx8XG4gICAgICAoaXNIYXNoU3BlY2lhbCAmJiBjaGFyID09PSBOVU1fQVJHKSB8fFxuICAgICAgKGlzQW5nbGVTcGVjaWFsICYmIGNoYXIgPT09IFRBR19PUE4pIHx8XG4gICAgICAoaXNBcmdTdHlsZSAmJiBpc1doaXRlc3BhY2UoY2hhci5jaGFyQ29kZUF0KDApKSlcbiAgICApIHtcbiAgICAgIGJyZWFrXG4gICAgfSBlbHNlIGlmIChjaGFyID09PSBFU0MpIHtcbiAgICAgIGNoYXIgPSBwYXR0ZXJuWysrY3VycmVudC5pbmRleF07XG4gICAgICBpZiAoY2hhciA9PT0gRVNDKSB7IC8vIGRvdWJsZSBpcyBhbHdheXMgMSAnXG4gICAgICAgIHRleHQgKz0gY2hhcjtcbiAgICAgICAgKytjdXJyZW50LmluZGV4O1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgLy8gb25seSB3aGVuIG5lY2Vzc2FyeVxuICAgICAgICBjaGFyID09PSBBUkdfT1BOIHx8IGNoYXIgPT09IEFSR19DTFMgfHxcbiAgICAgICAgKGlzSGFzaFNwZWNpYWwgJiYgY2hhciA9PT0gTlVNX0FSRykgfHxcbiAgICAgICAgKGlzQW5nbGVTcGVjaWFsICYmIGNoYXIgPT09IFRBR19PUE4pIHx8XG4gICAgICAgIGlzQXJnU3R5bGVcbiAgICAgICkge1xuICAgICAgICB0ZXh0ICs9IGNoYXI7XG4gICAgICAgIHdoaWxlICgrK2N1cnJlbnQuaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBjaGFyID0gcGF0dGVybltjdXJyZW50LmluZGV4XTtcbiAgICAgICAgICBpZiAoY2hhciA9PT0gRVNDICYmIHBhdHRlcm5bY3VycmVudC5pbmRleCArIDFdID09PSBFU0MpIHsgLy8gZG91YmxlIGlzIGFsd2F5cyAxICdcbiAgICAgICAgICAgIHRleHQgKz0gRVNDO1xuICAgICAgICAgICAgKytjdXJyZW50LmluZGV4O1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gRVNDKSB7IC8vIGVuZCBvZiBxdW90ZWRcbiAgICAgICAgICAgICsrY3VycmVudC5pbmRleDtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHQgKz0gY2hhcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7IC8vIGxvbmUgJyBpcyBqdXN0IGEgJ1xuICAgICAgICB0ZXh0ICs9IEVTQztcbiAgICAgICAgLy8gYWxyZWFkeSBpbmNyZW1lbnRlZFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0ZXh0ICs9IGNoYXI7XG4gICAgICArK2N1cnJlbnQuaW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiB0ZXh0XG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAoY29kZS8qOiBudW1iZXIgKi8pLyo6IGJvb2xlYW4gKi8ge1xuICByZXR1cm4gKFxuICAgIChjb2RlID49IDB4MDkgJiYgY29kZSA8PSAweDBEKSB8fFxuICAgIGNvZGUgPT09IDB4MjAgfHwgY29kZSA9PT0gMHg4NSB8fCBjb2RlID09PSAweEEwIHx8IGNvZGUgPT09IDB4MTgwRSB8fFxuICAgIChjb2RlID49IDB4MjAwMCAmJiBjb2RlIDw9IDB4MjAwRCkgfHxcbiAgICBjb2RlID09PSAweDIwMjggfHwgY29kZSA9PT0gMHgyMDI5IHx8IGNvZGUgPT09IDB4MjAyRiB8fCBjb2RlID09PSAweDIwNUYgfHxcbiAgICBjb2RlID09PSAweDIwNjAgfHwgY29kZSA9PT0gMHgzMDAwIHx8IGNvZGUgPT09IDB4RkVGRlxuICApXG59XG5cbmZ1bmN0aW9uIHNraXBXaGl0ZXNwYWNlIChjdXJyZW50Lyo6IENvbnRleHQgKi8pLyo6IHZvaWQgKi8ge1xuICB2YXIgcGF0dGVybiA9IGN1cnJlbnQucGF0dGVybjtcbiAgdmFyIGxlbmd0aCA9IHBhdHRlcm4ubGVuZ3RoO1xuICB2YXIgc3RhcnQgPSBjdXJyZW50LmluZGV4O1xuICB3aGlsZSAoY3VycmVudC5pbmRleCA8IGxlbmd0aCAmJiBpc1doaXRlc3BhY2UocGF0dGVybi5jaGFyQ29kZUF0KGN1cnJlbnQuaW5kZXgpKSkge1xuICAgICsrY3VycmVudC5pbmRleDtcbiAgfVxuICBpZiAoc3RhcnQgPCBjdXJyZW50LmluZGV4ICYmIGN1cnJlbnQudG9rZW5zKSB7XG4gICAgY3VycmVudC50b2tlbnMucHVzaChbICdzcGFjZScsIGN1cnJlbnQucGF0dGVybi5zbGljZShzdGFydCwgY3VycmVudC5pbmRleCkgXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VQbGFjZWhvbGRlciAoY3VycmVudC8qOiBDb250ZXh0ICovKS8qOiBQbGFjZWhvbGRlciAqLyB7XG4gIHZhciBwYXR0ZXJuID0gY3VycmVudC5wYXR0ZXJuO1xuICBpZiAocGF0dGVybltjdXJyZW50LmluZGV4XSA9PT0gTlVNX0FSRykge1xuICAgIGlmIChjdXJyZW50LnRva2VucykgY3VycmVudC50b2tlbnMucHVzaChbICdzeW50YXgnLCBOVU1fQVJHIF0pO1xuICAgICsrY3VycmVudC5pbmRleDsgLy8gbW92ZSBwYXNzZWQgI1xuICAgIHJldHVybiBbIE5VTV9BUkcgXVxuICB9XG5cbiAgdmFyIHRhZyA9IHBhcnNlVGFnKGN1cnJlbnQpO1xuICBpZiAodGFnKSByZXR1cm4gdGFnXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIHNob3VsZCBiZSB1bnJlYWNoYWJsZSBpZiBwYXJzZUFTVCBhbmQgcGFyc2VUZXh0IGFyZSByaWdodCAqL1xuICBpZiAocGF0dGVybltjdXJyZW50LmluZGV4XSAhPT0gQVJHX09QTikgdGhyb3cgZXhwZWN0ZWQoY3VycmVudCwgQVJHX09QTilcbiAgaWYgKGN1cnJlbnQudG9rZW5zKSBjdXJyZW50LnRva2Vucy5wdXNoKFsgJ3N5bnRheCcsIEFSR19PUE4gXSk7XG4gICsrY3VycmVudC5pbmRleDsgLy8gbW92ZSBwYXNzZWQge1xuICBza2lwV2hpdGVzcGFjZShjdXJyZW50KTtcblxuICB2YXIgaWQgPSBwYXJzZUlkKGN1cnJlbnQpO1xuICBpZiAoIWlkKSB0aHJvdyBleHBlY3RlZChjdXJyZW50LCAncGxhY2Vob2xkZXIgaWQnKVxuICBpZiAoY3VycmVudC50b2tlbnMpIGN1cnJlbnQudG9rZW5zLnB1c2goWyAnaWQnLCBpZCBdKTtcbiAgc2tpcFdoaXRlc3BhY2UoY3VycmVudCk7XG5cbiAgdmFyIGNoYXIgPSBwYXR0ZXJuW2N1cnJlbnQuaW5kZXhdO1xuICBpZiAoY2hhciA9PT0gQVJHX0NMUykgeyAvLyBlbmQgcGxhY2Vob2xkZXJcbiAgICBpZiAoY3VycmVudC50b2tlbnMpIGN1cnJlbnQudG9rZW5zLnB1c2goWyAnc3ludGF4JywgQVJHX0NMUyBdKTtcbiAgICArK2N1cnJlbnQuaW5kZXg7IC8vIG1vdmUgcGFzc2VkIH1cbiAgICByZXR1cm4gWyBpZCBdXG4gIH1cblxuICBpZiAoY2hhciAhPT0gQVJHX1NFUCkgdGhyb3cgZXhwZWN0ZWQoY3VycmVudCwgQVJHX1NFUCArICcgb3IgJyArIEFSR19DTFMpXG4gIGlmIChjdXJyZW50LnRva2VucykgY3VycmVudC50b2tlbnMucHVzaChbICdzeW50YXgnLCBBUkdfU0VQIF0pO1xuICArK2N1cnJlbnQuaW5kZXg7IC8vIG1vdmUgcGFzc2VkICxcbiAgc2tpcFdoaXRlc3BhY2UoY3VycmVudCk7XG5cbiAgdmFyIHR5cGUgPSBwYXJzZUlkKGN1cnJlbnQpO1xuICBpZiAoIXR5cGUpIHRocm93IGV4cGVjdGVkKGN1cnJlbnQsICdwbGFjZWhvbGRlciB0eXBlJylcbiAgaWYgKGN1cnJlbnQudG9rZW5zKSBjdXJyZW50LnRva2Vucy5wdXNoKFsgJ3R5cGUnLCB0eXBlIF0pO1xuICBza2lwV2hpdGVzcGFjZShjdXJyZW50KTtcbiAgY2hhciA9IHBhdHRlcm5bY3VycmVudC5pbmRleF07XG4gIGlmIChjaGFyID09PSBBUkdfQ0xTKSB7IC8vIGVuZCBwbGFjZWhvbGRlclxuICAgIGlmIChjdXJyZW50LnRva2VucykgY3VycmVudC50b2tlbnMucHVzaChbICdzeW50YXgnLCBBUkdfQ0xTIF0pO1xuICAgIGlmICh0eXBlID09PSAncGx1cmFsJyB8fCB0eXBlID09PSAnc2VsZWN0b3JkaW5hbCcgfHwgdHlwZSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHRocm93IGV4cGVjdGVkKGN1cnJlbnQsIHR5cGUgKyAnIHN1Yi1tZXNzYWdlcycpXG4gICAgfVxuICAgICsrY3VycmVudC5pbmRleDsgLy8gbW92ZSBwYXNzZWQgfVxuICAgIHJldHVybiBbIGlkLCB0eXBlIF1cbiAgfVxuXG4gIGlmIChjaGFyICE9PSBBUkdfU0VQKSB0aHJvdyBleHBlY3RlZChjdXJyZW50LCBBUkdfU0VQICsgJyBvciAnICsgQVJHX0NMUylcbiAgaWYgKGN1cnJlbnQudG9rZW5zKSBjdXJyZW50LnRva2Vucy5wdXNoKFsgJ3N5bnRheCcsIEFSR19TRVAgXSk7XG4gICsrY3VycmVudC5pbmRleDsgLy8gbW92ZSBwYXNzZWQgLFxuICBza2lwV2hpdGVzcGFjZShjdXJyZW50KTtcblxuICB2YXIgYXJnO1xuICBpZiAodHlwZSA9PT0gJ3BsdXJhbCcgfHwgdHlwZSA9PT0gJ3NlbGVjdG9yZGluYWwnKSB7XG4gICAgdmFyIG9mZnNldCA9IHBhcnNlUGx1cmFsT2Zmc2V0KGN1cnJlbnQpO1xuICAgIHNraXBXaGl0ZXNwYWNlKGN1cnJlbnQpO1xuICAgIGFyZyA9IFsgaWQsIHR5cGUsIG9mZnNldCwgcGFyc2VTdWJNZXNzYWdlcyhjdXJyZW50LCB0eXBlKSBdO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzZWxlY3QnKSB7XG4gICAgYXJnID0gWyBpZCwgdHlwZSwgcGFyc2VTdWJNZXNzYWdlcyhjdXJyZW50LCB0eXBlKSBdO1xuICB9IGVsc2UgaWYgKHNpbXBsZVR5cGVzLmluZGV4T2YodHlwZSkgPj0gMCkge1xuICAgIGFyZyA9IFsgaWQsIHR5cGUsIHBhcnNlU2ltcGxlRm9ybWF0KGN1cnJlbnQpIF07XG4gIH0gZWxzZSB7IC8vIGN1c3RvbSBwbGFjZWhvbGRlciB0eXBlXG4gICAgdmFyIGluZGV4ID0gY3VycmVudC5pbmRleDtcbiAgICB2YXIgZm9ybWF0Lyo6IHN0cmluZyB8IFN1Yk1lc3NhZ2VzICovID0gcGFyc2VTaW1wbGVGb3JtYXQoY3VycmVudCk7XG4gICAgc2tpcFdoaXRlc3BhY2UoY3VycmVudCk7XG4gICAgaWYgKHBhdHRlcm5bY3VycmVudC5pbmRleF0gPT09IEFSR19PUE4pIHtcbiAgICAgIGN1cnJlbnQuaW5kZXggPSBpbmRleDsgLy8gcmV3aW5kLCBzaW5jZSBzaG91bGQgaGF2ZSBiZWVuIHN1Ym1lc3NhZ2VzXG4gICAgICBmb3JtYXQgPSBwYXJzZVN1Yk1lc3NhZ2VzKGN1cnJlbnQsIHR5cGUpO1xuICAgIH1cbiAgICBhcmcgPSBbIGlkLCB0eXBlLCBmb3JtYXQgXTtcbiAgfVxuXG4gIHNraXBXaGl0ZXNwYWNlKGN1cnJlbnQpO1xuICBpZiAocGF0dGVybltjdXJyZW50LmluZGV4XSAhPT0gQVJHX0NMUykgdGhyb3cgZXhwZWN0ZWQoY3VycmVudCwgQVJHX0NMUylcbiAgaWYgKGN1cnJlbnQudG9rZW5zKSBjdXJyZW50LnRva2Vucy5wdXNoKFsgJ3N5bnRheCcsIEFSR19DTFMgXSk7XG4gICsrY3VycmVudC5pbmRleDsgLy8gbW92ZSBwYXNzZWQgfVxuICByZXR1cm4gYXJnXG59XG5cbmZ1bmN0aW9uIHBhcnNlVGFnIChjdXJyZW50Lyo6IENvbnRleHQgKi8pLyo6ID9QbGFjZWhvbGRlciAqLyB7XG4gIHZhciB0YWdzVHlwZSA9IGN1cnJlbnQudGFnc1R5cGU7XG4gIGlmICghdGFnc1R5cGUgfHwgY3VycmVudC5wYXR0ZXJuW2N1cnJlbnQuaW5kZXhdICE9PSBUQUdfT1BOKSByZXR1cm5cblxuICBpZiAoY3VycmVudC5wYXR0ZXJuLnNsaWNlKGN1cnJlbnQuaW5kZXgsIGN1cnJlbnQuaW5kZXggKyBUQUdfRU5ELmxlbmd0aCkgPT09IFRBR19FTkQpIHtcbiAgICB0aHJvdyBleHBlY3RlZChjdXJyZW50LCBudWxsLCAnY2xvc2luZyB0YWcgd2l0aG91dCBtYXRjaGluZyBvcGVuaW5nIHRhZycpXG4gIH1cbiAgaWYgKGN1cnJlbnQudG9rZW5zKSBjdXJyZW50LnRva2Vucy5wdXNoKFsgJ3N5bnRheCcsIFRBR19PUE4gXSk7XG4gICsrY3VycmVudC5pbmRleDsgLy8gbW92ZSBwYXNzZWQgPFxuXG4gIHZhciBpZCA9IHBhcnNlSWQoY3VycmVudCwgdHJ1ZSk7XG4gIGlmICghaWQpIHRocm93IGV4cGVjdGVkKGN1cnJlbnQsICdwbGFjZWhvbGRlciBpZCcpXG4gIGlmIChjdXJyZW50LnRva2VucykgY3VycmVudC50b2tlbnMucHVzaChbICdpZCcsIGlkIF0pO1xuICBza2lwV2hpdGVzcGFjZShjdXJyZW50KTtcblxuICBpZiAoY3VycmVudC5wYXR0ZXJuLnNsaWNlKGN1cnJlbnQuaW5kZXgsIGN1cnJlbnQuaW5kZXggKyBUQUdfU0VMRl9DTFMubGVuZ3RoKSA9PT0gVEFHX1NFTEZfQ0xTKSB7XG4gICAgaWYgKGN1cnJlbnQudG9rZW5zKSBjdXJyZW50LnRva2Vucy5wdXNoKFsgJ3N5bnRheCcsIFRBR19TRUxGX0NMUyBdKTtcbiAgICBjdXJyZW50LmluZGV4ICs9IFRBR19TRUxGX0NMUy5sZW5ndGg7XG4gICAgcmV0dXJuIFsgaWQsIHRhZ3NUeXBlIF1cbiAgfVxuICBpZiAoY3VycmVudC5wYXR0ZXJuW2N1cnJlbnQuaW5kZXhdICE9PSBUQUdfQ0xTKSB0aHJvdyBleHBlY3RlZChjdXJyZW50LCBUQUdfQ0xTKVxuICBpZiAoY3VycmVudC50b2tlbnMpIGN1cnJlbnQudG9rZW5zLnB1c2goWyAnc3ludGF4JywgVEFHX0NMUyBdKTtcbiAgKytjdXJyZW50LmluZGV4OyAvLyBtb3ZlIHBhc3NlZCA+XG5cbiAgdmFyIGNoaWxkcmVuID0gcGFyc2VBU1QoY3VycmVudCwgdGFnc1R5cGUpO1xuXG4gIHZhciBlbmQgPSBjdXJyZW50LmluZGV4O1xuICBpZiAoY3VycmVudC5wYXR0ZXJuLnNsaWNlKGN1cnJlbnQuaW5kZXgsIGN1cnJlbnQuaW5kZXggKyBUQUdfRU5ELmxlbmd0aCkgIT09IFRBR19FTkQpIHRocm93IGV4cGVjdGVkKGN1cnJlbnQsIFRBR19FTkQgKyBpZCArIFRBR19DTFMpXG4gIGlmIChjdXJyZW50LnRva2VucykgY3VycmVudC50b2tlbnMucHVzaChbICdzeW50YXgnLCBUQUdfRU5EIF0pO1xuICBjdXJyZW50LmluZGV4ICs9IFRBR19FTkQubGVuZ3RoO1xuICB2YXIgY2xvc2VJZCA9IHBhcnNlSWQoY3VycmVudCwgdHJ1ZSk7XG4gIGlmIChjbG9zZUlkICYmIGN1cnJlbnQudG9rZW5zKSBjdXJyZW50LnRva2Vucy5wdXNoKFsgJ2lkJywgY2xvc2VJZCBdKTtcbiAgaWYgKGlkICE9PSBjbG9zZUlkKSB7XG4gICAgY3VycmVudC5pbmRleCA9IGVuZDsgLy8gcmV3aW5kIGZvciBiZXR0ZXIgZXJyb3IgbWVzc2FnZVxuICAgIHRocm93IGV4cGVjdGVkKGN1cnJlbnQsIFRBR19FTkQgKyBpZCArIFRBR19DTFMsIFRBR19FTkQgKyBjbG9zZUlkICsgVEFHX0NMUylcbiAgfVxuICBza2lwV2hpdGVzcGFjZShjdXJyZW50KTtcbiAgaWYgKGN1cnJlbnQucGF0dGVybltjdXJyZW50LmluZGV4XSAhPT0gVEFHX0NMUykgdGhyb3cgZXhwZWN0ZWQoY3VycmVudCwgVEFHX0NMUylcbiAgaWYgKGN1cnJlbnQudG9rZW5zKSBjdXJyZW50LnRva2Vucy5wdXNoKFsgJ3N5bnRheCcsIFRBR19DTFMgXSk7XG4gICsrY3VycmVudC5pbmRleDsgLy8gbW92ZSBwYXNzZWQgPlxuXG4gIHJldHVybiBbIGlkLCB0YWdzVHlwZSwgeyBjaGlsZHJlbjogY2hpbGRyZW4gfSBdXG59XG5cbmZ1bmN0aW9uIHBhcnNlSWQgKGN1cnJlbnQvKjogQ29udGV4dCAqLywgaXNUYWcvKjo6ID86IGJvb2xlYW4gKi8pLyo6IHN0cmluZyAqLyB7XG4gIHZhciBwYXR0ZXJuID0gY3VycmVudC5wYXR0ZXJuO1xuICB2YXIgbGVuZ3RoID0gcGF0dGVybi5sZW5ndGg7XG4gIHZhciBpZCA9ICcnO1xuICB3aGlsZSAoY3VycmVudC5pbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBjaGFyID0gcGF0dGVybltjdXJyZW50LmluZGV4XTtcbiAgICBpZiAoXG4gICAgICBjaGFyID09PSBBUkdfT1BOIHx8IGNoYXIgPT09IEFSR19DTFMgfHwgY2hhciA9PT0gQVJHX1NFUCB8fFxuICAgICAgY2hhciA9PT0gTlVNX0FSRyB8fCBjaGFyID09PSBFU0MgfHwgaXNXaGl0ZXNwYWNlKGNoYXIuY2hhckNvZGVBdCgwKSkgfHxcbiAgICAgIChpc1RhZyAmJiAoY2hhciA9PT0gVEFHX09QTiB8fCBjaGFyID09PSBUQUdfQ0xTIHx8IGNoYXIgPT09ICcvJykpXG4gICAgKSBicmVha1xuICAgIGlkICs9IGNoYXI7XG4gICAgKytjdXJyZW50LmluZGV4O1xuICB9XG4gIHJldHVybiBpZFxufVxuXG5mdW5jdGlvbiBwYXJzZVNpbXBsZUZvcm1hdCAoY3VycmVudC8qOiBDb250ZXh0ICovKS8qOiBzdHJpbmcgKi8ge1xuICB2YXIgc3RhcnQgPSBjdXJyZW50LmluZGV4O1xuICB2YXIgc3R5bGUgPSBwYXJzZVRleHQoY3VycmVudCwgJ3tzdHlsZX0nKTtcbiAgaWYgKCFzdHlsZSkgdGhyb3cgZXhwZWN0ZWQoY3VycmVudCwgJ3BsYWNlaG9sZGVyIHN0eWxlIG5hbWUnKVxuICBpZiAoY3VycmVudC50b2tlbnMpIGN1cnJlbnQudG9rZW5zLnB1c2goWyAnc3R5bGUnLCBjdXJyZW50LnBhdHRlcm4uc2xpY2Uoc3RhcnQsIGN1cnJlbnQuaW5kZXgpIF0pO1xuICByZXR1cm4gc3R5bGVcbn1cblxuZnVuY3Rpb24gcGFyc2VQbHVyYWxPZmZzZXQgKGN1cnJlbnQvKjogQ29udGV4dCAqLykvKjogbnVtYmVyICovIHtcbiAgdmFyIHBhdHRlcm4gPSBjdXJyZW50LnBhdHRlcm47XG4gIHZhciBsZW5ndGggPSBwYXR0ZXJuLmxlbmd0aDtcbiAgdmFyIG9mZnNldCA9IDA7XG4gIGlmIChwYXR0ZXJuLnNsaWNlKGN1cnJlbnQuaW5kZXgsIGN1cnJlbnQuaW5kZXggKyBPRkZTRVQubGVuZ3RoKSA9PT0gT0ZGU0VUKSB7XG4gICAgaWYgKGN1cnJlbnQudG9rZW5zKSBjdXJyZW50LnRva2Vucy5wdXNoKFsgJ29mZnNldCcsICdvZmZzZXQnIF0sIFsgJ3N5bnRheCcsICc6JyBdKTtcbiAgICBjdXJyZW50LmluZGV4ICs9IE9GRlNFVC5sZW5ndGg7IC8vIG1vdmUgcGFzc2VkIG9mZnNldDpcbiAgICBza2lwV2hpdGVzcGFjZShjdXJyZW50KTtcbiAgICB2YXIgc3RhcnQgPSBjdXJyZW50LmluZGV4O1xuICAgIHdoaWxlIChjdXJyZW50LmluZGV4IDwgbGVuZ3RoICYmIGlzRGlnaXQocGF0dGVybi5jaGFyQ29kZUF0KGN1cnJlbnQuaW5kZXgpKSkge1xuICAgICAgKytjdXJyZW50LmluZGV4O1xuICAgIH1cbiAgICBpZiAoc3RhcnQgPT09IGN1cnJlbnQuaW5kZXgpIHRocm93IGV4cGVjdGVkKGN1cnJlbnQsICdvZmZzZXQgbnVtYmVyJylcbiAgICBpZiAoY3VycmVudC50b2tlbnMpIGN1cnJlbnQudG9rZW5zLnB1c2goWyAnbnVtYmVyJywgcGF0dGVybi5zbGljZShzdGFydCwgY3VycmVudC5pbmRleCkgXSk7XG4gICAgb2Zmc2V0ID0gK3BhdHRlcm4uc2xpY2Uoc3RhcnQsIGN1cnJlbnQuaW5kZXgpO1xuICB9XG4gIHJldHVybiBvZmZzZXRcbn1cblxuZnVuY3Rpb24gaXNEaWdpdCAoY29kZS8qOiBudW1iZXIgKi8pLyo6IGJvb2xlYW4gKi8ge1xuICByZXR1cm4gKGNvZGUgPj0gMHgzMCAmJiBjb2RlIDw9IDB4MzkpXG59XG5cbmZ1bmN0aW9uIHBhcnNlU3ViTWVzc2FnZXMgKGN1cnJlbnQvKjogQ29udGV4dCAqLywgcGFyZW50VHlwZS8qOiBzdHJpbmcgKi8pLyo6IFN1Yk1lc3NhZ2VzICovIHtcbiAgdmFyIHBhdHRlcm4gPSBjdXJyZW50LnBhdHRlcm47XG4gIHZhciBsZW5ndGggPSBwYXR0ZXJuLmxlbmd0aDtcbiAgdmFyIG9wdGlvbnMvKjogU3ViTWVzc2FnZXMgKi8gPSB7fTtcbiAgd2hpbGUgKGN1cnJlbnQuaW5kZXggPCBsZW5ndGggJiYgcGF0dGVybltjdXJyZW50LmluZGV4XSAhPT0gQVJHX0NMUykge1xuICAgIHZhciBzZWxlY3RvciA9IHBhcnNlSWQoY3VycmVudCk7XG4gICAgaWYgKCFzZWxlY3RvcikgdGhyb3cgZXhwZWN0ZWQoY3VycmVudCwgJ3N1Yi1tZXNzYWdlIHNlbGVjdG9yJylcbiAgICBpZiAoY3VycmVudC50b2tlbnMpIGN1cnJlbnQudG9rZW5zLnB1c2goWyAnc2VsZWN0b3InLCBzZWxlY3RvciBdKTtcbiAgICBza2lwV2hpdGVzcGFjZShjdXJyZW50KTtcbiAgICBvcHRpb25zW3NlbGVjdG9yXSA9IHBhcnNlU3ViTWVzc2FnZShjdXJyZW50LCBwYXJlbnRUeXBlKTtcbiAgICBza2lwV2hpdGVzcGFjZShjdXJyZW50KTtcbiAgfVxuICBpZiAoIW9wdGlvbnMub3RoZXIgJiYgc3VibVR5cGVzLmluZGV4T2YocGFyZW50VHlwZSkgPj0gMCkge1xuICAgIHRocm93IGV4cGVjdGVkKGN1cnJlbnQsIG51bGwsIG51bGwsICdcIm90aGVyXCIgc3ViLW1lc3NhZ2UgbXVzdCBiZSBzcGVjaWZpZWQgaW4gJyArIHBhcmVudFR5cGUpXG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuZnVuY3Rpb24gcGFyc2VTdWJNZXNzYWdlIChjdXJyZW50Lyo6IENvbnRleHQgKi8sIHBhcmVudFR5cGUvKjogc3RyaW5nICovKS8qOiBBU1QgKi8ge1xuICBpZiAoY3VycmVudC5wYXR0ZXJuW2N1cnJlbnQuaW5kZXhdICE9PSBBUkdfT1BOKSB0aHJvdyBleHBlY3RlZChjdXJyZW50LCBBUkdfT1BOICsgJyB0byBzdGFydCBzdWItbWVzc2FnZScpXG4gIGlmIChjdXJyZW50LnRva2VucykgY3VycmVudC50b2tlbnMucHVzaChbICdzeW50YXgnLCBBUkdfT1BOIF0pO1xuICArK2N1cnJlbnQuaW5kZXg7IC8vIG1vdmUgcGFzc2VkIHtcbiAgdmFyIG1lc3NhZ2UgPSBwYXJzZUFTVChjdXJyZW50LCBwYXJlbnRUeXBlKTtcbiAgaWYgKGN1cnJlbnQucGF0dGVybltjdXJyZW50LmluZGV4XSAhPT0gQVJHX0NMUykgdGhyb3cgZXhwZWN0ZWQoY3VycmVudCwgQVJHX0NMUyArICcgdG8gZW5kIHN1Yi1tZXNzYWdlJylcbiAgaWYgKGN1cnJlbnQudG9rZW5zKSBjdXJyZW50LnRva2Vucy5wdXNoKFsgJ3N5bnRheCcsIEFSR19DTFMgXSk7XG4gICsrY3VycmVudC5pbmRleDsgLy8gbW92ZSBwYXNzZWQgfVxuICByZXR1cm4gbWVzc2FnZVxufVxuXG5mdW5jdGlvbiBleHBlY3RlZCAoY3VycmVudC8qOiBDb250ZXh0ICovLCBleHBlY3RlZC8qOjogPzogP3N0cmluZyAqLywgZm91bmQvKjo6ID86ID9zdHJpbmcgKi8sIG1lc3NhZ2UvKjo6ID86IHN0cmluZyAqLykge1xuICB2YXIgcGF0dGVybiA9IGN1cnJlbnQucGF0dGVybjtcbiAgdmFyIGxpbmVzID0gcGF0dGVybi5zbGljZSgwLCBjdXJyZW50LmluZGV4KS5zcGxpdCgvXFxyP1xcbi8pO1xuICB2YXIgb2Zmc2V0ID0gY3VycmVudC5pbmRleDtcbiAgdmFyIGxpbmUgPSBsaW5lcy5sZW5ndGg7XG4gIHZhciBjb2x1bW4gPSBsaW5lcy5zbGljZSgtMSlbMF0ubGVuZ3RoO1xuICBmb3VuZCA9IGZvdW5kIHx8IChcbiAgICAoY3VycmVudC5pbmRleCA+PSBwYXR0ZXJuLmxlbmd0aCkgPyAnZW5kIG9mIG1lc3NhZ2UgcGF0dGVybidcbiAgICAgIDogKHBhcnNlSWQoY3VycmVudCkgfHwgcGF0dGVybltjdXJyZW50LmluZGV4XSlcbiAgKTtcbiAgaWYgKCFtZXNzYWdlKSBtZXNzYWdlID0gZXJyb3JNZXNzYWdlKGV4cGVjdGVkLCBmb3VuZCk7XG4gIG1lc3NhZ2UgKz0gJyBpbiAnICsgcGF0dGVybi5yZXBsYWNlKC9cXHI/XFxuL2csICdcXG4nKTtcbiAgcmV0dXJuIG5ldyBTeW50YXhFcnJvcihtZXNzYWdlLCBleHBlY3RlZCwgZm91bmQsIG9mZnNldCwgbGluZSwgY29sdW1uKVxufVxuXG5mdW5jdGlvbiBlcnJvck1lc3NhZ2UgKGV4cGVjdGVkLyo6ID9zdHJpbmcgKi8sIGZvdW5kLyogc3RyaW5nICovKSB7XG4gIGlmICghZXhwZWN0ZWQpIHJldHVybiAnVW5leHBlY3RlZCAnICsgZm91bmQgKyAnIGZvdW5kJ1xuICByZXR1cm4gJ0V4cGVjdGVkICcgKyBleHBlY3RlZCArICcgYnV0IGZvdW5kICcgKyBmb3VuZFxufVxuXG4vKipcbiAqIFN5bnRheEVycm9yXG4gKiAgSG9sZHMgaW5mb3JtYXRpb24gYWJvdXQgYmFkIHN5bnRheCBmb3VuZCBpbiBhIG1lc3NhZ2UgcGF0dGVyblxuICoqL1xuZnVuY3Rpb24gU3ludGF4RXJyb3IgKG1lc3NhZ2UvKjogc3RyaW5nICovLCBleHBlY3RlZC8qOiA/c3RyaW5nICovLCBmb3VuZC8qOiA/c3RyaW5nICovLCBvZmZzZXQvKjogbnVtYmVyICovLCBsaW5lLyo6IG51bWJlciAqLywgY29sdW1uLyo6IG51bWJlciAqLykge1xuICBFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuICB0aGlzLm5hbWUgPSAnU3ludGF4RXJyb3InO1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLmV4cGVjdGVkID0gZXhwZWN0ZWQ7XG4gIHRoaXMuZm91bmQgPSBmb3VuZDtcbiAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gIHRoaXMubGluZSA9IGxpbmU7XG4gIHRoaXMuY29sdW1uID0gY29sdW1uO1xufVxuU3ludGF4RXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuZXhwb3J0cy5TeW50YXhFcnJvciA9IFN5bnRheEVycm9yO1xufSk7XG52YXIgZm9ybWF0TWVzc2FnZVBhcnNlXzEgPSBmb3JtYXRNZXNzYWdlUGFyc2UuU3ludGF4RXJyb3I7XG5cbnZhciBzdXBwb3J0ZWRFeHAgPSBuZXcgUmVnRXhwKFxuICAnXignICsgT2JqZWN0LmtleXMocGx1cmFscykuam9pbignfCcpICsgJylcXFxcYidcbik7XG5cbi8qOjpcbmltcG9ydCB0eXBlIHsgVHlwZXMgfSBmcm9tICdmb3JtYXQtbWVzc2FnZS1pbnRlcnByZXQnXG5pbXBvcnQgdHlwZSB7IEFTVCB9IGZyb20gJ2Zvcm1hdC1tZXNzYWdlLXBhcnNlJ1xudHlwZSBPcHRpb25zID0ge1xuICB0eXBlczogVHlwZXNcbn1cbnR5cGUgSW50ZXJuYWxzID0ge1xuICBhc3Q6IEFTVCxcbiAgZm9ybWF0OiAoYXJncz86IE9iamVjdCkgPT4gc3RyaW5nLFxuICBsb2NhbGU6IHN0cmluZyxcbiAgbG9jYWxlcz86IHN0cmluZyB8IHN0cmluZ1tdLFxuICB0b1BhcnRzPzogKGFyZ3M/OiBPYmplY3QpID0+IGFueVtdLFxuICBvcHRpb25zPzogT3B0aW9uc1xufVxuKi9cblxudmFyIGludGVybmFscy8qOiBXZWFrTWFwPE1lc3NhZ2VGb3JtYXQsIEludGVybmFscz4gKi8gPSBuZXcgV2Vha01hcCgpO1xuXG4vKiFcbiAqIEludGwuTWVzc2FnZUZvcm1hdCBwcm9sbHlmaWxsXG4gKiBDb3B5cmlnaHQoYykgMjAxNSBBbmR5IFZhbldhZ29uZXJcbiAqIE1JVCBsaWNlbnNlZFxuICoqL1xuZnVuY3Rpb24gTWVzc2FnZUZvcm1hdCAoXG4gIHBhdHRlcm4vKjogc3RyaW5nICovLFxuICBsb2NhbGVzLyo6OiA/OiBzdHJpbmcgfCBzdHJpbmdbXSAqLyxcbiAgb3B0aW9ucy8qOjogPzogT3B0aW9ucyAqL1xuKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNZXNzYWdlRm9ybWF0KSB8fCBpbnRlcm5hbHMuaGFzKHRoaXMpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2FsbGluZyBNZXNzYWdlRm9ybWF0IGNvbnN0cnVjdG9yIHdpdGhvdXQgbmV3IGlzIGludmFsaWQnKVxuICB9XG4gIHZhciBhc3QgPSBmb3JtYXRNZXNzYWdlUGFyc2UocGF0dGVybik7XG4gIGludGVybmFscy5zZXQodGhpcywge1xuICAgIGFzdDogYXN0LFxuICAgIGZvcm1hdDogZm9ybWF0TWVzc2FnZUludGVycHJldChhc3QsIGxvY2FsZXMsIG9wdGlvbnMgJiYgb3B0aW9ucy50eXBlcyksXG4gICAgbG9jYWxlOiBNZXNzYWdlRm9ybWF0LnN1cHBvcnRlZExvY2FsZXNPZihsb2NhbGVzKVswXSB8fCAnZW4nLFxuICAgIGxvY2FsZXM6IGxvY2FsZXMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9KTtcbn1cbnZhciBtZXNzYWdlRm9ybWF0ID0gTWVzc2FnZUZvcm1hdDtcblxuLy8gJEZsb3dGaXhNZSBJdCB0aGlua3MgYHZhbHVlYCBuZWVkcyB0byBiZSBkZWZpbmVkIGZvciBmb3JtYXRcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE1lc3NhZ2VGb3JtYXQucHJvdG90eXBlLCB7XG4gIGZvcm1hdDoge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGZvcm1hdCAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gaW50ZXJuYWxzLmdldCh0aGlzKTtcbiAgICAgIGlmICghdmFsdWVzKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXNzYWdlRm9ybWF0LnByb3RvdHlwZS5mb3JtYXQgY2FsbGVkIG9uIHZhbHVlIHRoYXRcXCdzIG5vdCBhbiBvYmplY3QgaW5pdGlhbGl6ZWQgYXMgYSBNZXNzYWdlRm9ybWF0JylcbiAgICAgIHJldHVybiB2YWx1ZXMuZm9ybWF0XG4gICAgfVxuICB9LFxuICBmb3JtYXRUb1BhcnRzOiB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRUb1BhcnRzIChhcmdzLyo6OiA/OiBPYmplY3QgKi8pIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBpbnRlcm5hbHMuZ2V0KHRoaXMpO1xuICAgICAgaWYgKCF2YWx1ZXMpIHRocm93IG5ldyBUeXBlRXJyb3IoJ01lc3NhZ2VGb3JtYXQucHJvdG90eXBlLmZvcm1hdFRvUGFydHMgY2FsbGVkIG9uIHZhbHVlIHRoYXRcXCdzIG5vdCBhbiBvYmplY3QgaW5pdGlhbGl6ZWQgYXMgYSBNZXNzYWdlRm9ybWF0JylcbiAgICAgIHZhciBmcm10ID0gdmFsdWVzLnRvUGFydHMgfHwgKHZhbHVlcy50b1BhcnRzID0gZm9ybWF0TWVzc2FnZUludGVycHJldC50b1BhcnRzKFxuICAgICAgICB2YWx1ZXMuYXN0LFxuICAgICAgICB2YWx1ZXMubG9jYWxlcyxcbiAgICAgICAgdmFsdWVzLm9wdGlvbnMgJiYgdmFsdWVzLm9wdGlvbnMudHlwZXNcbiAgICAgICkpO1xuICAgICAgcmV0dXJuIGZybXQoYXJncylcbiAgICB9XG4gIH0sXG4gIHJlc29sdmVkT3B0aW9uczoge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzb2x2ZWRPcHRpb25zICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBpbnRlcm5hbHMuZ2V0KHRoaXMpO1xuICAgICAgaWYgKCF2YWx1ZXMpIHRocm93IG5ldyBUeXBlRXJyb3IoJ01lc3NhZ2VGb3JtYXQucHJvdG90eXBlLnJlc29sdmVkT3B0aW9ucyBjYWxsZWQgb24gdmFsdWUgdGhhdFxcJ3Mgbm90IGFuIG9iamVjdCBpbml0aWFsaXplZCBhcyBhIE1lc3NhZ2VGb3JtYXQnKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbG9jYWxlOiB2YWx1ZXMubG9jYWxlXG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbmlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVzc2FnZUZvcm1hdC5wcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ09iamVjdCcgfSk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE1lc3NhZ2VGb3JtYXQsIHtcbiAgc3VwcG9ydGVkTG9jYWxlc09mOiB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdXBwb3J0ZWRMb2NhbGVzT2YgKHJlcXVlc3RlZExvY2FsZXMvKjo6ID86IHN0cmluZyB8IHN0cmluZ1tdICovKSB7XG4gICAgICByZXR1cm4gW10uY29uY2F0KFxuICAgICAgICBJbnRsLk51bWJlckZvcm1hdC5zdXBwb3J0ZWRMb2NhbGVzT2YocmVxdWVzdGVkTG9jYWxlcyksXG4gICAgICAgIEludGwuRGF0ZVRpbWVGb3JtYXQuc3VwcG9ydGVkTG9jYWxlc09mKHJlcXVlc3RlZExvY2FsZXMpLFxuICAgICAgICBJbnRsLlBsdXJhbFJ1bGVzID8gSW50bC5QbHVyYWxSdWxlcy5zdXBwb3J0ZWRMb2NhbGVzT2YocmVxdWVzdGVkTG9jYWxlcykgOiBbXSxcbiAgICAgICAgW10uY29uY2F0KHJlcXVlc3RlZExvY2FsZXMgfHwgW10pLmZpbHRlcihmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgICAgICAgcmV0dXJuIHN1cHBvcnRlZEV4cC50ZXN0KGxvY2FsZSlcbiAgICAgICAgfSlcbiAgICAgICkuZmlsdGVyKGZ1bmN0aW9uICh2LCBpLCBhKSB7IHJldHVybiBhLmluZGV4T2YodikgPT09IGkgfSlcbiAgICB9XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtZXNzYWdlRm9ybWF0O1xuIiwiaW1wb3J0IHsgc2luZ2xldG9uTWFuYWdlciB9IGZyb20gJ3NpbmdsZXRvbi1tYW5hZ2VyJztcbmltcG9ydCB7IExvY2FsaXplTWFuYWdlciB9IGZyb20gJy4vTG9jYWxpemVNYW5hZ2VyLmpzJztcblxuLyoqIEB0eXBlIHtMb2NhbGl6ZU1hbmFnZXJ9ICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW11dGFibGUtZXhwb3J0c1xuZXhwb3J0IGxldCBsb2NhbGl6ZSA9XG4gIHNpbmdsZXRvbk1hbmFnZXIuZ2V0KCdAbGlvbi9sb2NhbGl6ZTo6bG9jYWxpemU6OjAuMTAueCcpIHx8XG4gIG5ldyBMb2NhbGl6ZU1hbmFnZXIoe1xuICAgIGF1dG9Mb2FkT25Mb2NhbGVDaGFuZ2U6IHRydWUsXG4gICAgZmFsbGJhY2tMb2NhbGU6ICdlbi1HQicsXG4gIH0pO1xuXG4vKipcbiAqIEBwYXJhbSB7TG9jYWxpemVNYW5hZ2VyfSBuZXdMb2NhbGl6ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TG9jYWxpemUobmV3TG9jYWxpemUpIHtcbiAgbG9jYWxpemUudGVhcmRvd24oKTtcbiAgbG9jYWxpemUgPSBuZXdMb2NhbGl6ZTtcbn1cbiIsIi8vIEB0cy1leHBlY3QtZXJyb3IgW2V4dGVybmFsXTogbm8gdHlwZXMgZm9yIHRoaXMgcGFja2FnZVxuaW1wb3J0IE1lc3NhZ2VGb3JtYXQgZnJvbSAnQGJ1bmRsZWQtZXMtbW9kdWxlcy9tZXNzYWdlLWZvcm1hdC9NZXNzYWdlRm9ybWF0LmpzJztcbmltcG9ydCBpc0xvY2FsaXplRVNNb2R1bGUgZnJvbSAnLi9pc0xvY2FsaXplRVNNb2R1bGUuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzL0xvY2FsaXplTWl4aW5UeXBlcycpLk5hbWVzcGFjZU9iamVjdH0gTmFtZXNwYWNlT2JqZWN0XG4gKi9cblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzL0xvY2FsaXplTWl4aW5UeXBlcycpLkRhdGVQb3N0UHJvY2Vzc29yfSBEYXRlUG9zdFByb2Nlc3NvciAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzL0xvY2FsaXplTWl4aW5UeXBlcycpLk51bWJlclBvc3RQcm9jZXNzb3J9IE51bWJlclBvc3RQcm9jZXNzb3IgKi9cblxuLyoqXG4gKiBgTG9jYWxpemVNYW5hZ2VyYCBtYW5hZ2VzIHlvdXIgdHJhbnNsYXRpb25zIChpbmNsdWRlcyBsb2FkaW5nKVxuICovXG5leHBvcnQgY2xhc3MgTG9jYWxpemVNYW5hZ2VyIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgYXV0b0xvYWRPbkxvY2FsZUNoYW5nZSA9IGZhbHNlLFxuICAgIGZhbGxiYWNrTG9jYWxlID0gJycsXG4gICAgc2hvd0tleUFzRmFsbGJhY2sgPSBmYWxzZSxcbiAgfSA9IHt9KSB7XG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fX2RlbGVnYXRpb25UYXJnZXQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgLyoqIEBwcm90ZWN0ZWQgKi9cbiAgICB0aGlzLl9hdXRvTG9hZE9uTG9jYWxlQ2hhbmdlID0gISFhdXRvTG9hZE9uTG9jYWxlQ2hhbmdlO1xuICAgIC8qKiBAcHJvdGVjdGVkICovXG4gICAgdGhpcy5fZmFsbGJhY2tMb2NhbGUgPSBmYWxsYmFja0xvY2FsZTtcbiAgICAvKiogQHByb3RlY3RlZCAqL1xuICAgIHRoaXMuX3Nob3dLZXlBc0ZhbGxiYWNrID0gc2hvd0tleUFzRmFsbGJhY2s7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIE9iamVjdC48c3RyaW5nLCBPYmplY3Q+Pn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX19zdG9yYWdlID0ge307XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwLjxSZWdFeHB8c3RyaW5nLCBmdW5jdGlvbj59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9fbmFtZXNwYWNlUGF0dGVybnNNYXAgPSBuZXcgTWFwKCk7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9ufG51bGw+fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fX25hbWVzcGFjZUxvYWRlcnNDYWNoZSA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge09iamVjdC48c3RyaW5nLCBPYmplY3QuPHN0cmluZywgUHJvbWlzZS48T2JqZWN0fHZvaWQ+Pj59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9fbmFtZXNwYWNlTG9hZGVyUHJvbWlzZXNDYWNoZSA9IHt9O1xuXG4gICAgdGhpcy5mb3JtYXROdW1iZXJPcHRpb25zID0ge1xuICAgICAgcmV0dXJuSWZOYU46ICcnLFxuICAgICAgLyoqIEB0eXBlIHtNYXA8c3RyaW5nLERhdGVQb3N0UHJvY2Vzc29yPn0gKi9cbiAgICAgIHBvc3RQcm9jZXNzb3JzOiBuZXcgTWFwKCksXG4gICAgfTtcblxuICAgIHRoaXMuZm9ybWF0RGF0ZU9wdGlvbnMgPSB7XG4gICAgICAvKiogQHR5cGUge01hcDxzdHJpbmcsRGF0ZVBvc3RQcm9jZXNzb3I+fSAqL1xuICAgICAgcG9zdFByb2Nlc3NvcnM6IG5ldyBNYXAoKSxcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVmlhIGh0bWxbZGF0YS1sb2NhbGl6ZS1sYW5nXSwgZGV2ZWxvcGVycyBhcmUgYWxsb3dlZCB0byBzZXQgdGhlIGluaXRpYWwgbG9jYWxlLCB3aXRob3V0XG4gICAgICogaGF2aW5nIHRvIHdvcnJ5IGFib3V0IHdoZXRoZXIgbG9jYWxlIGlzIGluaXRpYWxpemVkIGJlZm9yZSAzcmQgcGFydGllcyBsaWtlIEdvb2dsZSBUcmFuc2xhdGUuXG4gICAgICogV2hlbiB0aGlzIHZhbHVlIGRpZmZlcnMgZnJvbSBodG1sW2xhbmddLCB3ZSBhc3N1bWUgdGhlIDNyZCBwYXJ0eSB0b29rXG4gICAgICogY29udHJvbCBvdmVyIHRoZSBwYWdlIGxhbmd1YWdlIGFuZCB3ZSBzZXQgdGhpcy5fbGFuZ0F0dHJTZXRCeVRyYW5zbGF0aW9uVG9vbCB0byBodG1sW2xhbmddXG4gICAgICovXG4gICAgY29uc3QgaW5pdGlhbExvY2FsZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbG9jYWxpemUtbGFuZycpO1xuXG4gICAgLyoqIEBwcm90ZWN0ZWQgKi9cbiAgICB0aGlzLl9zdXBwb3J0RXh0ZXJuYWxUcmFuc2xhdGlvblRvb2xzID0gQm9vbGVhbihpbml0aWFsTG9jYWxlKTtcblxuICAgIGlmICh0aGlzLl9zdXBwb3J0RXh0ZXJuYWxUcmFuc2xhdGlvblRvb2xzKSB7XG4gICAgICB0aGlzLmxvY2FsZSA9IGluaXRpYWxMb2NhbGUgfHwgJ2VuLUdCJztcbiAgICAgIHRoaXMuX3NldHVwVHJhbnNsYXRpb25Ub29sU3VwcG9ydCgpO1xuICAgIH1cblxuICAgIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcpIHtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nID0gdGhpcy5sb2NhbGUgfHwgJ2VuLUdCJztcbiAgICB9XG5cbiAgICAvKiogQHByb3RlY3RlZCAqL1xuICAgIHRoaXMuX3NldHVwSHRtbExhbmdBdHRyaWJ1dGVPYnNlcnZlcigpO1xuICB9XG5cbiAgLyoqIEBwcm90ZWN0ZWQgKi9cbiAgX3NldHVwVHJhbnNsYXRpb25Ub29sU3VwcG9ydCgpIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIHZhbHVlIGFsbG93cyBmb3Igc3VwcG9ydCBmb3IgR29vZ2xlIFRyYW5zbGF0ZSAob3Igb3RoZXIgM3JkIHBhcnRpZXMgdGFraW5nIGNvbnRyb2xcbiAgICAgKiBvZiB0aGUgaHRtbFtsYW5nXSBhdHRyaWJ1dGUpLlxuICAgICAqXG4gICAgICogSGF2ZSB0aGUgZm9sbG93aW5nIHNjZW5hcmlvIGluIG1pbmQ6XG4gICAgICogMS4gbG9jYWxlIGlzIGluaXRpYWxpemVkIGJ5IGRldmVsb3BlciB2aWEgaHRtbFtkYXRhLWxvY2FsaXplLWxhbmc9XCJlbi1VU1wiXSBhbmRcbiAgICAgKiBodG1sW2xhbmc9XCJlbi1VU1wiXS4gV2hlbiBsb2NhbGl6ZSBpcyBsb2FkZWQgKG5vdGUgdGhhdCB0aGlzIGFsc28gY2FuIGJlIGFmdGVyIHN0ZXAgMiBiZWxvdyksXG4gICAgICogaXQgd2lsbCBzeW5jIGl0cyBpbml0aWFsIHN0YXRlIGZyb20gaHRtbFtkYXRhLWxvY2FsaXplLWxhbmddXG4gICAgICogMi4gR29vZ2xlIFRyYW5zbGF0ZSBraWNrcyBpbiBmb3IgdGhlIEZyZW5jaCBsYW5ndWFnZS4gSXQgd2lsbCBzZXQgaHRtbFtsYW5nPVwiZnJcIl0uXG4gICAgICogVGhpcyBuZXcgbGFuZ3VhZ2UgaXMgbm90IG9uZSBrbm93biBieSB1cywgc28gd2UgbW9zdCBsaWtlbHkgZG9uJ3QgaGF2ZSB0cmFuc2xhdGlvbnMgZm9yXG4gICAgICogdGhpcyBmaWxlLiBUaGVyZWZvcmUsIHdlIGRvIE5PVCBzeW5jIHRoaXMgdmFsdWUgdG8gTG9jYWxpemVNYW5hZ2VyLiBUaGUgbWFuYWdlciBzaG91bGRcbiAgICAgKiBzdGlsbCBhc2sgZm9yIGtub3duIHJlc291cmNlcyAoaW4gdGhpcyBjYXNlIGZvciBsb2NhbGUgJ2VuLVVTJylcbiAgICAgKiAzLiBsb2NhbGUgaXMgY2hhbmdlZCAodGhpbmsgb2YgYSBsYW5ndWFnZSBkcm9wZG93bilcbiAgICAgKiBJdCdzIGEgYml0IG9mIGEgd2VpcmQgY2FzZSwgYmVjYXVzZSB3ZSB3b3VsZCBub3QgZXhwZWN0IGFuIGVuZCB1c2VyIHRvIGRvIHRoaXMuIElmIGhlL3NoZVxuICAgICAqIGRvZXMsIG1ha2Ugc3VyZSB0aGF0IHdlIGRvIG5vdCBnbyBhZ2FpbnN0IEdvb2dsZSBUcmFuc2xhdGUsIHNvIHdlIG1haW50YWluIGFjY2Vzc2liaWxpdHlcbiAgICAgKiAoYnkgbm90IGFsdGVyaW5nIGh0bWxbbGFuZ10pLiBXZSBkZXRlY3QgdGhpcyBieSByZWFkaW5nIF9sYW5nQXR0clNldEJ5VHJhbnNsYXRpb25Ub29sOlxuICAgICAqIHdoZW4gaXRzIHZhbHVlIGlzIG51bGwsIHdlIGNvbnNpZGVyIEdvb2dsZSB0cmFuc2xhdGUgJ25vdCBhY3RpdmUnLlxuICAgICAqXG4gICAgICogV2hlbiBHb29nbGUgVHJhbnNsYXRlIGlzIHR1cm5lZCBvZmYgYnkgdGhlIHVzZXIgKGh0bWxbbGFuZz1hdXRvXSksXG4gICAgICogYGxvY2FsaXplLmxvY2FsZWAgd2lsbCBiZSBzeW5jZWQgdG8gaHRtbFtsYW5nXSBhZ2FpblxuICAgICAqXG4gICAgICogS2VlcCBpbiBtaW5kIHRoYXQgYWxsIG9mIHRoZSBhYm92ZSBhbHNvIHdvcmtzIHdpdGggb3RoZXIgdG9vbHMgdGhhbiBHb29nbGUgVHJhbnNsYXRlLFxuICAgICAqIGJ1dCB0aGlzIGlzIHRoZSBtb3N0IHdpZGVseSB1c2VkIHRvb2wgYW5kIHRoZXJlZm9yZSB1c2VkIGFzIGFuIGV4YW1wbGUuXG4gICAgICovXG4gICAgdGhpcy5fbGFuZ0F0dHJTZXRCeVRyYW5zbGF0aW9uVG9vbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nIHx8IG51bGw7XG4gIH1cblxuICB0ZWFyZG93bigpIHtcbiAgICB0aGlzLl90ZWFyZG93bkh0bWxMYW5nQXR0cmlidXRlT2JzZXJ2ZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IGxvY2FsZSgpIHtcbiAgICBpZiAodGhpcy5fc3VwcG9ydEV4dGVybmFsVHJhbnNsYXRpb25Ub29scykge1xuICAgICAgcmV0dXJuIHRoaXMuX19sb2NhbGUgfHwgJyc7XG4gICAgfVxuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICovXG4gIHNldCBsb2NhbGUodmFsdWUpIHtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICBsZXQgb2xkTG9jYWxlO1xuICAgIGlmICh0aGlzLl9zdXBwb3J0RXh0ZXJuYWxUcmFuc2xhdGlvblRvb2xzKSB7XG4gICAgICBvbGRMb2NhbGUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHRoaXMuX19sb2NhbGUpO1xuICAgICAgdGhpcy5fX2xvY2FsZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMuX2xhbmdBdHRyU2V0QnlUcmFuc2xhdGlvblRvb2wgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fc2V0SHRtbExhbmdBdHRyaWJ1dGUodmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvbGRMb2NhbGUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZztcbiAgICAgIHRoaXMuX3NldEh0bWxMYW5nQXR0cmlidXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoIXZhbHVlLmluY2x1ZGVzKCctJykpIHtcbiAgICAgIHRoaXMuX19oYW5kbGVMYW5ndWFnZU9ubHkodmFsdWUpO1xuICAgIH1cblxuICAgIHRoaXMuX29uTG9jYWxlQ2hhbmdlZCh2YWx1ZSwgb2xkTG9jYWxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxlXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9zZXRIdG1sTGFuZ0F0dHJpYnV0ZShsb2NhbGUpIHtcbiAgICB0aGlzLl90ZWFyZG93bkh0bWxMYW5nQXR0cmlidXRlT2JzZXJ2ZXIoKTtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZyA9IGxvY2FsZTtcbiAgICB0aGlzLl9zZXR1cEh0bWxMYW5nQXR0cmlidXRlT2JzZXJ2ZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogQHRocm93cyB7RXJyb3J9IExhbmd1YWdlIG9ubHkgbG9jYWxlcyBhcmUgbm90IGFsbG93ZWQoVXNlICdlbi1HQicgaW5zdGVhZCBvZiAnZW4nKVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgX19oYW5kbGVMYW5ndWFnZU9ubHkodmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFxuICAgICAgTG9jYWxlIHdhcyBzZXQgdG8gJHt2YWx1ZX0uXG4gICAgICBMYW5ndWFnZSBvbmx5IGxvY2FsZXMgYXJlIG5vdCBhbGxvd2VkLCBwbGVhc2UgdXNlIHRoZSBmdWxsIGxhbmd1YWdlIGxvY2FsZSBlLmcuICdlbi1HQicgaW5zdGVhZCBvZiAnZW4nLlxuICAgICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmctYmFuay9saW9uL2lzc3Vlcy8xODcgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgYCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1Byb21pc2UuPE9iamVjdHx2b2lkPn1cbiAgICovXG4gIGdldCBsb2FkaW5nQ29tcGxldGUoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9fbmFtZXNwYWNlTG9hZGVyUHJvbWlzZXNDYWNoZVt0aGlzLmxvY2FsZV0gPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LnZhbHVlcyh0aGlzLl9fbmFtZXNwYWNlTG9hZGVyUHJvbWlzZXNDYWNoZVt0aGlzLmxvY2FsZV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5fX3N0b3JhZ2UgPSB7fTtcbiAgICB0aGlzLl9fbmFtZXNwYWNlUGF0dGVybnNNYXAgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fX25hbWVzcGFjZUxvYWRlcnNDYWNoZSA9IHt9O1xuICAgIHRoaXMuX19uYW1lc3BhY2VMb2FkZXJQcm9taXNlc0NhY2hlID0ge307XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBOYW1lc3BhY2UgY2FuIGJlIGFkZGVkIG9ubHkgb25jZSwgZm9yIGEgZ2l2ZW4gbG9jYWxlXG4gICAqL1xuICBhZGREYXRhKGxvY2FsZSwgbmFtZXNwYWNlLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMuX2lzTmFtZXNwYWNlSW5DYWNoZShsb2NhbGUsIG5hbWVzcGFjZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYE5hbWVzcGFjZSBcIiR7bmFtZXNwYWNlfVwiIGhhcyBiZWVuIGFscmVhZHkgYWRkZWQgZm9yIHRoZSBsb2NhbGUgXCIke2xvY2FsZX1cIi5gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLl9fc3RvcmFnZVtsb2NhbGVdID0gdGhpcy5fX3N0b3JhZ2VbbG9jYWxlXSB8fCB7fTtcbiAgICB0aGlzLl9fc3RvcmFnZVtsb2NhbGVdW25hbWVzcGFjZV0gPSBkYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gcGF0dGVyblxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsb2FkZXJcbiAgICovXG4gIHNldHVwTmFtZXNwYWNlTG9hZGVyKHBhdHRlcm4sIGxvYWRlcikge1xuICAgIHRoaXMuX19uYW1lc3BhY2VQYXR0ZXJuc01hcC5zZXQocGF0dGVybiwgbG9hZGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge05hbWVzcGFjZU9iamVjdFtdfSBuYW1lc3BhY2VzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvY2FsZV1cbiAgICogQHJldHVybnMge1Byb21pc2UuPE9iamVjdD59XG4gICAqL1xuICBsb2FkTmFtZXNwYWNlcyhuYW1lc3BhY2VzLCB7IGxvY2FsZSB9ID0ge30pIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICBuYW1lc3BhY2VzLm1hcChcbiAgICAgICAgLyoqIEBwYXJhbSB7TmFtZXNwYWNlT2JqZWN0fSBuYW1lc3BhY2UgKi9cbiAgICAgICAgbmFtZXNwYWNlID0+IHRoaXMubG9hZE5hbWVzcGFjZShuYW1lc3BhY2UsIHsgbG9jYWxlIH0pLFxuICAgICAgKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TmFtZXNwYWNlT2JqZWN0fSBuYW1lc3BhY2VPYmpcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxlXVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48T2JqZWN0fHZvaWQ+fVxuICAgKi9cbiAgbG9hZE5hbWVzcGFjZShuYW1lc3BhY2VPYmosIHsgbG9jYWxlID0gdGhpcy5sb2NhbGUgfSA9IHsgbG9jYWxlOiB0aGlzLmxvY2FsZSB9KSB7XG4gICAgY29uc3QgaXNEeW5hbWljSW1wb3J0ID0gdHlwZW9mIG5hbWVzcGFjZU9iaiA9PT0gJ29iamVjdCc7XG5cbiAgICBjb25zdCBuYW1lc3BhY2UgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKFxuICAgICAgaXNEeW5hbWljSW1wb3J0ID8gT2JqZWN0LmtleXMobmFtZXNwYWNlT2JqKVswXSA6IG5hbWVzcGFjZU9ialxuICAgICk7XG5cbiAgICBpZiAodGhpcy5faXNOYW1lc3BhY2VJbkNhY2hlKGxvY2FsZSwgbmFtZXNwYWNlKSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IGV4aXN0aW5nTG9hZGVyUHJvbWlzZSA9IHRoaXMuX2dldENhY2hlZE5hbWVzcGFjZUxvYWRlclByb21pc2UobG9jYWxlLCBuYW1lc3BhY2UpO1xuICAgIGlmIChleGlzdGluZ0xvYWRlclByb21pc2UpIHtcbiAgICAgIHJldHVybiBleGlzdGluZ0xvYWRlclByb21pc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2xvYWROYW1lc3BhY2VEYXRhKGxvY2FsZSwgbmFtZXNwYWNlT2JqLCBpc0R5bmFtaWNJbXBvcnQsIG5hbWVzcGFjZSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBzdHJpbmdbXX0ga2V5c1xuICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLD8+fSBbdmFyc11cbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlXVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgbXNnKGtleXMsIHZhcnMsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IGxvY2FsZSA9IG9wdHMubG9jYWxlID8gb3B0cy5sb2NhbGUgOiB0aGlzLmxvY2FsZTtcbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5fZ2V0TWVzc2FnZUZvcktleXMoa2V5cywgbG9jYWxlKTtcbiAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgY29uc3QgZm9ybWF0dGVyID0gbmV3IE1lc3NhZ2VGb3JtYXQobWVzc2FnZSwgbG9jYWxlKTtcbiAgICByZXR1cm4gZm9ybWF0dGVyLmZvcm1hdCh2YXJzKTtcbiAgfVxuXG4gIC8qKiBAcHJvdGVjdGVkICovXG4gIF9zZXR1cEh0bWxMYW5nQXR0cmlidXRlT2JzZXJ2ZXIoKSB7XG4gICAgaWYgKCF0aGlzLl9odG1sTGFuZ0F0dHJpYnV0ZU9ic2VydmVyKSB7XG4gICAgICB0aGlzLl9odG1sTGFuZ0F0dHJpYnV0ZU9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobXV0YXRpb25zID0+IHtcbiAgICAgICAgbXV0YXRpb25zLmZvckVhY2gobXV0YXRpb24gPT4ge1xuICAgICAgICAgIGlmICh0aGlzLl9zdXBwb3J0RXh0ZXJuYWxUcmFuc2xhdGlvblRvb2xzKSB7XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgICAvLyBHb29nbGUgVHJhbnNsYXRlIGlzIHN3aXRjaGVkIG9mZlxuICAgICAgICAgICAgICB0aGlzLl9sYW5nQXR0clNldEJ5VHJhbnNsYXRpb25Ub29sID0gbnVsbDtcbiAgICAgICAgICAgICAgdGhpcy5fc2V0SHRtbExhbmdBdHRyaWJ1dGUodGhpcy5sb2NhbGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5fbGFuZ0F0dHJTZXRCeVRyYW5zbGF0aW9uVG9vbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9vbkxvY2FsZUNoYW5nZWQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcsIG11dGF0aW9uLm9sZFZhbHVlIHx8ICcnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuX2h0bWxMYW5nQXR0cmlidXRlT2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICBhdHRyaWJ1dGVGaWx0ZXI6IFsnbGFuZyddLFxuICAgICAgYXR0cmlidXRlT2xkVmFsdWU6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICAvKiogQHByb3RlY3RlZCAqL1xuICBfdGVhcmRvd25IdG1sTGFuZ0F0dHJpYnV0ZU9ic2VydmVyKCkge1xuICAgIGlmICh0aGlzLl9odG1sTGFuZ0F0dHJpYnV0ZU9ic2VydmVyKSB7XG4gICAgICB0aGlzLl9odG1sTGFuZ0F0dHJpYnV0ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9pc05hbWVzcGFjZUluQ2FjaGUobG9jYWxlLCBuYW1lc3BhY2UpIHtcbiAgICByZXR1cm4gISEodGhpcy5fX3N0b3JhZ2VbbG9jYWxlXSAmJiB0aGlzLl9fc3RvcmFnZVtsb2NhbGVdW25hbWVzcGFjZV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVzcGFjZVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfZ2V0Q2FjaGVkTmFtZXNwYWNlTG9hZGVyUHJvbWlzZShsb2NhbGUsIG5hbWVzcGFjZSkge1xuICAgIGlmICh0aGlzLl9fbmFtZXNwYWNlTG9hZGVyUHJvbWlzZXNDYWNoZVtsb2NhbGVdKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX25hbWVzcGFjZUxvYWRlclByb21pc2VzQ2FjaGVbbG9jYWxlXVtuYW1lc3BhY2VdO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxlXG4gICAqIEBwYXJhbSB7TmFtZXNwYWNlT2JqZWN0fSBuYW1lc3BhY2VPYmpcbiAgICogQHBhcmFtIHtib29sZWFufSBpc0R5bmFtaWNJbXBvcnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVzcGFjZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48T2JqZWN0fHZvaWQ+fVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfbG9hZE5hbWVzcGFjZURhdGEobG9jYWxlLCBuYW1lc3BhY2VPYmosIGlzRHluYW1pY0ltcG9ydCwgbmFtZXNwYWNlKSB7XG4gICAgY29uc3QgbG9hZGVyID0gdGhpcy5fZ2V0TmFtZXNwYWNlTG9hZGVyKG5hbWVzcGFjZU9iaiwgaXNEeW5hbWljSW1wb3J0LCBuYW1lc3BhY2UpO1xuICAgIGNvbnN0IGxvYWRlclByb21pc2UgPSB0aGlzLl9nZXROYW1lc3BhY2VMb2FkZXJQcm9taXNlKGxvYWRlciwgbG9jYWxlLCBuYW1lc3BhY2UpO1xuICAgIHRoaXMuX2NhY2hlTmFtZXNwYWNlTG9hZGVyUHJvbWlzZShsb2NhbGUsIG5hbWVzcGFjZSwgbG9hZGVyUHJvbWlzZSk7XG4gICAgcmV0dXJuIGxvYWRlclByb21pc2UudGhlbihcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9iai5kZWZhdWx0XG4gICAgICAgKi9cbiAgICAgIG9iaiA9PiB7XG4gICAgICAgIC8vIGFkZCBkYXRhIG9ubHkgaWYgd2UgaGF2ZSB0aGUgcHJvbWlzZSBpbiBjYWNoZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5fX25hbWVzcGFjZUxvYWRlclByb21pc2VzQ2FjaGVbbG9jYWxlXSAmJlxuICAgICAgICAgIHRoaXMuX19uYW1lc3BhY2VMb2FkZXJQcm9taXNlc0NhY2hlW2xvY2FsZV1bbmFtZXNwYWNlXSA9PT0gbG9hZGVyUHJvbWlzZVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gaXNMb2NhbGl6ZUVTTW9kdWxlKG9iaikgPyBvYmouZGVmYXVsdCA6IG9iajtcbiAgICAgICAgICB0aGlzLmFkZERhdGEobG9jYWxlLCBuYW1lc3BhY2UsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtOYW1lc3BhY2VPYmplY3R9IG5hbWVzcGFjZU9ialxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzRHluYW1pY0ltcG9ydFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBOYW1lc3BhY2Ugc2hhbGwgc2V0dXAgcHJvcGVybHkuIENoZWNrIGxvYWRlciFcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX2dldE5hbWVzcGFjZUxvYWRlcihuYW1lc3BhY2VPYmosIGlzRHluYW1pY0ltcG9ydCwgbmFtZXNwYWNlKSB7XG4gICAgbGV0IGxvYWRlciA9IHRoaXMuX19uYW1lc3BhY2VMb2FkZXJzQ2FjaGVbbmFtZXNwYWNlXTtcbiAgICBpZiAoIWxvYWRlcikge1xuICAgICAgaWYgKGlzRHluYW1pY0ltcG9ydCkge1xuICAgICAgICBjb25zdCBfbmFtZXNwYWNlT2JqID0gLyoqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxmdW5jdGlvbj59ICovIChuYW1lc3BhY2VPYmopO1xuICAgICAgICBsb2FkZXIgPSBfbmFtZXNwYWNlT2JqW25hbWVzcGFjZV07XG4gICAgICAgIHRoaXMuX19uYW1lc3BhY2VMb2FkZXJzQ2FjaGVbbmFtZXNwYWNlXSA9IGxvYWRlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRlciA9IHRoaXMuX2xvb2t1cE5hbWVzcGFjZUxvYWRlcihuYW1lc3BhY2UpO1xuICAgICAgICB0aGlzLl9fbmFtZXNwYWNlTG9hZGVyc0NhY2hlW25hbWVzcGFjZV0gPSBsb2FkZXI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFsb2FkZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTmFtZXNwYWNlIFwiJHtuYW1lc3BhY2V9XCIgd2FzIG5vdCBwcm9wZXJseSBzZXR1cC5gKTtcbiAgICB9XG5cbiAgICB0aGlzLl9fbmFtZXNwYWNlTG9hZGVyc0NhY2hlW25hbWVzcGFjZV0gPSBsb2FkZXI7XG5cbiAgICByZXR1cm4gbG9hZGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxvYWRlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtmYWxsYmFja0xvY2FsZV1cbiAgICogQHJldHVybnMge1Byb21pc2UuPGFueT59XG4gICAqIEB0aHJvd3Mge0Vycm9yfSBEYXRhIGZvciBuYW1lc3BhY2UgYW5kIChsb2NhbGUgb3IgZmFsbGJhY2sgbG9jYWxlKSBjb3VsZCBub3QgYmUgbG9hZGVkLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfZ2V0TmFtZXNwYWNlTG9hZGVyUHJvbWlzZShsb2FkZXIsIGxvY2FsZSwgbmFtZXNwYWNlLCBmYWxsYmFja0xvY2FsZSA9IHRoaXMuX2ZhbGxiYWNrTG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvYWRlcihsb2NhbGUsIG5hbWVzcGFjZSkuY2F0Y2goKCkgPT4ge1xuICAgICAgY29uc3QgbGFuZyA9IHRoaXMuX2dldExhbmdGcm9tTG9jYWxlKGxvY2FsZSk7XG4gICAgICByZXR1cm4gbG9hZGVyKGxhbmcsIG5hbWVzcGFjZSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICBpZiAoZmFsbGJhY2tMb2NhbGUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TmFtZXNwYWNlTG9hZGVyUHJvbWlzZShsb2FkZXIsIGZhbGxiYWNrTG9jYWxlLCBuYW1lc3BhY2UsICcnKS5jYXRjaChcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZmFsbGJhY2tMYW5nID0gdGhpcy5fZ2V0TGFuZ0Zyb21Mb2NhbGUoZmFsbGJhY2tMb2NhbGUpO1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgYERhdGEgZm9yIG5hbWVzcGFjZSBcIiR7bmFtZXNwYWNlfVwiIGFuZCBjdXJyZW50IGxvY2FsZSBcIiR7bG9jYWxlfVwiIG9yIGZhbGxiYWNrIGxvY2FsZSBcIiR7ZmFsbGJhY2tMb2NhbGV9XCIgY291bGQgbm90IGJlIGxvYWRlZC4gYCArXG4gICAgICAgICAgICAgICAgICBgTWFrZSBzdXJlIHlvdSBoYXZlIGRhdGEgZWl0aGVyIGZvciBsb2NhbGUgXCIke2xvY2FsZX1cIiAoYW5kL29yIGdlbmVyaWMgbGFuZ3VhZ2UgXCIke2xhbmd9XCIpIG9yIGZvciBmYWxsYmFjayBcIiR7ZmFsbGJhY2tMb2NhbGV9XCIgKGFuZC9vciBcIiR7ZmFsbGJhY2tMYW5nfVwiKS5gLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgRGF0YSBmb3IgbmFtZXNwYWNlIFwiJHtuYW1lc3BhY2V9XCIgYW5kIGxvY2FsZSBcIiR7bG9jYWxlfVwiIGNvdWxkIG5vdCBiZSBsb2FkZWQuIGAgK1xuICAgICAgICAgICAgYE1ha2Ugc3VyZSB5b3UgaGF2ZSBkYXRhIGZvciBsb2NhbGUgXCIke2xvY2FsZX1cIiAoYW5kL29yIGdlbmVyaWMgbGFuZ3VhZ2UgXCIke2xhbmd9XCIpLmAsXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2VcbiAgICogQHBhcmFtIHtQcm9taXNlLjxPYmplY3R8dm9pZD59IHByb21pc2VcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX2NhY2hlTmFtZXNwYWNlTG9hZGVyUHJvbWlzZShsb2NhbGUsIG5hbWVzcGFjZSwgcHJvbWlzZSkge1xuICAgIGlmICghdGhpcy5fX25hbWVzcGFjZUxvYWRlclByb21pc2VzQ2FjaGVbbG9jYWxlXSkge1xuICAgICAgdGhpcy5fX25hbWVzcGFjZUxvYWRlclByb21pc2VzQ2FjaGVbbG9jYWxlXSA9IHt9O1xuICAgIH1cbiAgICB0aGlzLl9fbmFtZXNwYWNlTG9hZGVyUHJvbWlzZXNDYWNoZVtsb2NhbGVdW25hbWVzcGFjZV0gPSBwcm9taXNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2VcbiAgICogQHJldHVybnMge2Z1bmN0aW9ufG51bGx9XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9sb29rdXBOYW1lc3BhY2VMb2FkZXIobmFtZXNwYWNlKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0aGlzLl9fbmFtZXNwYWNlUGF0dGVybnNNYXApIHtcbiAgICAgIGNvbnN0IGlzTWF0Y2hpbmdTdHJpbmcgPSB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkgPT09IG5hbWVzcGFjZTtcbiAgICAgIGNvbnN0IGlzTWF0Y2hpbmdSZWdleHAgPVxuICAgICAgICB0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyAmJiBrZXkuY29uc3RydWN0b3IubmFtZSA9PT0gJ1JlZ0V4cCcgJiYga2V5LnRlc3QobmFtZXNwYWNlKTtcbiAgICAgIGlmIChpc01hdGNoaW5nU3RyaW5nIHx8IGlzTWF0Y2hpbmdSZWdleHApIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICBfZ2V0TGFuZ0Zyb21Mb2NhbGUobG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5zdWJzdHJpbmcoMCwgMik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogQHBhcmFtIHtFdmVudExpc3RlbmVyfSBsaXN0ZW5lclxuICAgKiBAcGFyYW0gey4uLk9iamVjdH0gb3B0aW9uc1xuICAgKi9cbiAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgLi4ub3B0aW9ucykge1xuICAgIHRoaXMuX19kZWxlZ2F0aW9uVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIC4uLm9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqIEBwYXJhbSB7RXZlbnRMaXN0ZW5lcn0gbGlzdGVuZXJcbiAgICogQHBhcmFtIHsuLi5PYmplY3R9IG9wdGlvbnNcbiAgICovXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIC4uLm9wdGlvbnMpIHtcbiAgICB0aGlzLl9fZGVsZWdhdGlvblRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCAuLi5vcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAgQHBhcmFtIHtDdXN0b21FdmVudH0gZXZlbnRcbiAgICovXG4gIGRpc3BhdGNoRXZlbnQoZXZlbnQpIHtcbiAgICB0aGlzLl9fZGVsZWdhdGlvblRhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3TG9jYWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvbGRMb2NhbGVcbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX29uTG9jYWxlQ2hhbmdlZChuZXdMb2NhbGUsIG9sZExvY2FsZSkge1xuICAgIC8vIEV2ZW50IGZpcmluZyBpbW1lZGlhdGVseSwgZG9lcyBub3Qgd2FpdCBmb3IgbG9hZGluZyB0aGUgdHJhbnNsYXRpb25zXG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnX19sb2NhbGVDaGFuZ2luZycpKTtcbiAgICBpZiAobmV3TG9jYWxlID09PSBvbGRMb2NhbGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2F1dG9Mb2FkT25Mb2NhbGVDaGFuZ2UpIHtcbiAgICAgIHRoaXMuX2xvYWRBbGxNaXNzaW5nKG5ld0xvY2FsZSwgb2xkTG9jYWxlKTtcbiAgICAgIHRoaXMubG9hZGluZ0NvbXBsZXRlLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdsb2NhbGVDaGFuZ2VkJywgeyBkZXRhaWw6IHsgbmV3TG9jYWxlLCBvbGRMb2NhbGUgfSB9KSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnbG9jYWxlQ2hhbmdlZCcsIHsgZGV0YWlsOiB7IG5ld0xvY2FsZSwgb2xkTG9jYWxlIH0gfSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3TG9jYWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvbGRMb2NhbGVcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX2xvYWRBbGxNaXNzaW5nKG5ld0xvY2FsZSwgb2xkTG9jYWxlKSB7XG4gICAgY29uc3Qgb2xkTG9jYWxlTmFtZXNwYWNlcyA9IHRoaXMuX19zdG9yYWdlW29sZExvY2FsZV0gfHwge307XG4gICAgY29uc3QgbmV3TG9jYWxlTmFtZXNwYWNlcyA9IHRoaXMuX19zdG9yYWdlW25ld0xvY2FsZV0gfHwge307XG4gICAgT2JqZWN0LmtleXMob2xkTG9jYWxlTmFtZXNwYWNlcykuZm9yRWFjaChuYW1lc3BhY2UgPT4ge1xuICAgICAgY29uc3QgbmV3TmFtZXNwYWNlRGF0YSA9IG5ld0xvY2FsZU5hbWVzcGFjZXNbbmFtZXNwYWNlXTtcbiAgICAgIGlmICghbmV3TmFtZXNwYWNlRGF0YSkge1xuICAgICAgICB0aGlzLmxvYWROYW1lc3BhY2UobmFtZXNwYWNlLCB7XG4gICAgICAgICAgbG9jYWxlOiBuZXdMb2NhbGUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgc3RyaW5nW119IGtleXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nIHwgdW5kZWZpbmVkfVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfZ2V0TWVzc2FnZUZvcktleXMoa2V5cywgbG9jYWxlKSB7XG4gICAgaWYgKHR5cGVvZiBrZXlzID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2dldE1lc3NhZ2VGb3JLZXkoa2V5cywgbG9jYWxlKTtcbiAgICB9XG4gICAgY29uc3QgcmV2ZXJzZWRLZXlzID0gQXJyYXkuZnJvbShrZXlzKS5yZXZlcnNlKCk7IC8vIEFycmF5LmZyb20gcHJldmVudHMgbXV0YXRpb24gb2YgYXJndW1lbnRcbiAgICBsZXQga2V5O1xuICAgIGxldCBtZXNzYWdlO1xuICAgIHdoaWxlIChyZXZlcnNlZEtleXMubGVuZ3RoKSB7XG4gICAgICBrZXkgPSByZXZlcnNlZEtleXMucG9wKCk7XG4gICAgICBtZXNzYWdlID0gdGhpcy5fZ2V0TWVzc2FnZUZvcktleShrZXksIGxvY2FsZSk7XG4gICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IHVuZGVmaW5lZH0ga2V5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbGVcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQHRocm93cyB7RXJyb3J9IGBrZXlgaXMgbWlzc2luZyBuYW1lc3BhY2UuIFRoZSBmb3JtYXQgZm9yIGBrZXlgIGlzIFwibmFtZXNwYWNlOm5hbWVcIlxuICAgKiBAcHJvdGVjdGVkXG4gICAqXG4gICAqL1xuICBfZ2V0TWVzc2FnZUZvcktleShrZXksIGxvY2FsZSkge1xuICAgIGlmICgha2V5IHx8IGtleS5pbmRleE9mKCc6JykgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBOYW1lc3BhY2UgaXMgbWlzc2luZyBpbiB0aGUga2V5IFwiJHtrZXl9XCIuIFRoZSBmb3JtYXQgZm9yIGtleXMgaXMgXCJuYW1lc3BhY2U6bmFtZVwiLmAsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBbbnMsIG5hbWVzU3RyaW5nXSA9IGtleS5zcGxpdCgnOicpO1xuICAgIGNvbnN0IG5hbWVzcGFjZXMgPSB0aGlzLl9fc3RvcmFnZVtsb2NhbGVdO1xuICAgIGNvbnN0IG1lc3NhZ2VzID0gbmFtZXNwYWNlcyA/IG5hbWVzcGFjZXNbbnNdIDoge307XG4gICAgY29uc3QgbmFtZXMgPSBuYW1lc1N0cmluZy5zcGxpdCgnLicpO1xuICAgIGNvbnN0IHJlc3VsdCA9IG5hbWVzLnJlZHVjZShcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgYW55PiB8IHN0cmluZ30gbWVzc2FnZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgIChtZXNzYWdlLCBuYW1lKSA9PiAodHlwZW9mIG1lc3NhZ2UgPT09ICdvYmplY3QnID8gbWVzc2FnZVtuYW1lXSA6IG1lc3NhZ2UpLFxuICAgICAgbWVzc2FnZXMsXG4gICAgKTtcblxuICAgIHJldHVybiBTdHJpbmcocmVzdWx0IHx8ICh0aGlzLl9zaG93S2V5QXNGYWxsYmFjayA/IGtleSA6ICcnKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHt7bG9jYWxlOnN0cmluZywgcG9zdFByb2Nlc3NvcjpEYXRlUG9zdFByb2Nlc3Nvcn19IG9wdGlvbnNcbiAgICovXG4gIHNldERhdGVQb3N0UHJvY2Vzc29yRm9yTG9jYWxlKHsgbG9jYWxlLCBwb3N0UHJvY2Vzc29yIH0pIHtcbiAgICB0aGlzLmZvcm1hdERhdGVPcHRpb25zLnBvc3RQcm9jZXNzb3JzLnNldChsb2NhbGUsIHBvc3RQcm9jZXNzb3IpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7e2xvY2FsZTpzdHJpbmcsIHBvc3RQcm9jZXNzb3I6TnVtYmVyUG9zdFByb2Nlc3Nvcn19IG9wdGlvbnNcbiAgICovXG4gIHNldE51bWJlclBvc3RQcm9jZXNzb3JGb3JMb2NhbGUoeyBsb2NhbGUsIHBvc3RQcm9jZXNzb3IgfSkge1xuICAgIHRoaXMuZm9ybWF0TnVtYmVyT3B0aW9ucy5wb3N0UHJvY2Vzc29ycy5zZXQobG9jYWxlLCBwb3N0UHJvY2Vzc29yKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBPYmplY3Q+fSBvYmpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0xvY2FsaXplRVNNb2R1bGUob2JqKSB7XG4gIHJldHVybiAhIShvYmogJiYgb2JqLmRlZmF1bHQgJiYgdHlwZW9mIG9iai5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMSk7XG59XG4iLCIvLyBUT0RPOiBzdGlsbCBuZWVkZWQ/IEl0IGNhbiBiZSBzb2x2ZWQgd2l0aCB3aGlsZSBsb29wIGFzIHdlbGxcblxuLyoqXG4gKiBVc2UgdGhlIGAuYWRkYCBtZXRob2QgdG8gYWRkIGFzeW5jIGZ1bmN0aW9ucyB0byB0aGUgcXVldWVcbiAqIEF3YWl0IHRoZSBgLmNvbXBsZXRlYCBpZiB5b3Ugd2FudCB0byBlbnN1cmUgdGhlIHF1ZXVlIGlzIGVtcHR5IGF0IGFueSBwb2ludFxuICogYGNvbXBsZXRlYCByZXNvbHZlcyB3aGVuZXZlciBubyBtb3JlIHRhc2tzIGFyZSBydW5uaW5nLlxuICogSW1wb3J0YW50IG5vdGU6IEN1cnJlbnRseSBydW5zIHRhc2tzIDEgYnkgMSwgdGhlcmUgaXMgbm8gY29uY3VycmVuY3kgb3B0aW9uIGF0IHRoZSBtb21lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEFzeW5jUXVldWUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9fcnVubmluZyA9IGZhbHNlO1xuICAgIC8qKiBAdHlwZSB7ZnVuY3Rpb25bXX0gKi9cbiAgICB0aGlzLl9fcXVldWUgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0YXNrXG4gICAqL1xuICBhZGQodGFzaykge1xuICAgIHRoaXMuX19xdWV1ZS5wdXNoKHRhc2spO1xuICAgIGlmICghdGhpcy5fX3J1bm5pbmcpIHtcbiAgICAgIC8vIFdlIGhhdmUgYSBuZXcgcXVldWUsIGJlY2F1c2UgYmVmb3JlIHRoZXJlIHdhcyBub3RoaW5nIGluIHRoZSBxdWV1ZVxuICAgICAgdGhpcy5jb21wbGV0ZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAvKiogQHR5cGUge2Z1bmN0aW9ufSAqL1xuICAgICAgICB0aGlzLl9fY2FsbENvbXBsZXRlID0gcmVzb2x2ZTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fX3J1bigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBhc3luYyBfX3J1bigpIHtcbiAgICB0aGlzLl9fcnVubmluZyA9IHRydWU7XG4gICAgYXdhaXQgdGhpcy5fX3F1ZXVlWzBdKCk7XG4gICAgdGhpcy5fX3F1ZXVlLnNoaWZ0KCk7XG4gICAgaWYgKHRoaXMuX19xdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLl9fcnVuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX19ydW5uaW5nID0gZmFsc2U7XG4gICAgICBpZiAodGhpcy5fX2NhbGxDb21wbGV0ZSkge1xuICAgICAgICB0aGlzLl9fY2FsbENvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBkZWR1cGVNaXhpbiB9IGZyb20gJ0BsaW9uL2NvcmUnO1xuXG4vLyBUT0RPOiB3aWxsIGJlIG1vdmVkIHRvIEBMaW9uL2NvcmUgbGF0ZXI/XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvdXRpbHMvU3luY1VwZGF0YWJsZU1peGluVHlwZXMnKS5TeW5jVXBkYXRhYmxlTWl4aW59IFN5bmNVcGRhdGFibGVNaXhpblxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvdXRpbHMvU3luY1VwZGF0YWJsZU1peGluVHlwZXMnKS5TeW5jVXBkYXRhYmxlTmFtZXNwYWNlfSBTeW5jVXBkYXRhYmxlTmFtZXNwYWNlXG4gKi9cblxuLyoqXG4gKiBXaHkgdGhpcyBtaXhpbj9cbiAqIC0gaXQgYWRoZXJlcyB0byB0aGUgXCJNZW1iZXIgT3JkZXIgSW5kZXBlbmRlbmNlXCIgd2ViIGNvbXBvbmVudHMgc3RhbmRhcmQ6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vd2ViY29tcG9uZW50cy9nb2xkLXN0YW5kYXJkL3dpa2kvTWVtYmVyLU9yZGVyLUluZGVwZW5kZW5jZVxuICogLSBzeW5jIG9ic2VydmVycyBjYW4gYmUgZGVwZW5kZW50IG9uIHRoZSBvdXRjb21lIG9mIHRoZSByZW5kZXIgZnVuY3Rpb24gKG9yLCBtb3JlIGdlbmVyaWNhbGx5XG4gKiBzcGVha2luZywgdGhlIGxpZ2h0IGFuZCBzaGFkb3cgZG9tKS4gVGhpcyBhbGlnbnMgd2l0aCB0aGUgJ3VwZGF0ZWQnIGNhbGxiYWNrIHRoYXQgaXMgc3VwcG9ydGVkXG4gKiBvdXQgb2YgdGhlIGJveCBieSBMaXRFbGVtZW50LCB3aGljaCBydW5zIGFmdGVyIGNvbm5lY3RlZENhbGxiYWNrIGFzIHdlbGwuXG4gKiAtIG1ha2VzIHRoZSBwcm9wZXJ0eUFjY2Vzc29yLmBoYXNDaGFuZ2VkYCBjb21wYXRpYmxlIGluIHN5bmNocm9ub3VzIHVwZGF0ZXM6XG4gKiBgdXBkYXRlU3luY2Agd2lsbCBvbmx5IGJlIGNhbGxlZCB3aGVuIG5ldyB2YWx1ZSBkaWZmZXJzIGZyb20gb2xkIHZhbHVlLlxuICogU2VlOiBodHRwczovL2xpdC1lbGVtZW50LnBvbHltZXItcHJvamVjdC5vcmcvZ3VpZGUvbGlmZWN5Y2xlI2hhc2NoYW5nZWRcbiAqIC0gaXQgaXMgYSBzdGFibGUgYWJzdHJhY3Rpb24gb24gdG9wIG9mIGEgcHJvdGVjdGVkL25vbiBvZmZpY2lhbCBsaWZlY3ljbGUgTGl0RWxlbWVudCBhcGkuXG4gKiBXaGVuZXZlciB0aGUgaW1wbGVtZW50YXRpb24gb2YgYHJlcXVlc3RVcGRhdGVgIGNoYW5nZXMgKHRoaXMgaGFwcGVuZWQgaW4gdGhlIHBhc3QgZm9yXG4gKiBgcmVxdWVzdFVwZGF0ZWApIHdlIG9ubHkgaGF2ZSB0byBjaGFuZ2Ugb3VyIGFic3RyYWN0aW9uIGluc3RlYWQgb2YgYWxsIG91ciBjb21wb25lbnRzXG4gKiBAdHlwZSB7U3luY1VwZGF0YWJsZU1peGlufVxuICogQHBhcmFtIHtpbXBvcnQoJ0BvcGVuLXdjL2RlZHVwZS1taXhpbicpLkNvbnN0cnVjdG9yPGltcG9ydCgnQGxpb24vY29yZScpLkxpdEVsZW1lbnQ+fSBzdXBlcmNsYXNzXG4gKi9cbmNvbnN0IFN5bmNVcGRhdGFibGVNaXhpbkltcGxlbWVudGF0aW9uID0gc3VwZXJjbGFzcyA9PlxuICAvLyBAdHMtaWdub3JlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzY4MjEjaXNzdWVjb21tZW50LTU4ODM3NTA1MVxuICBjbGFzcyBleHRlbmRzIHN1cGVyY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBOYW1lc3BhY2UgZm9yIHRoaXMgbWl4aW4gdGhhdCBndWFyYW50ZWVzIG5hbWluZyBjbGFzaGVzIHdpbGwgbm90IG9jY3VyLi4uXG4gICAgICAgKiBAdHlwZSB7U3luY1VwZGF0YWJsZU5hbWVzcGFjZX1cbiAgICAgICAqL1xuICAgICAgdGhpcy5fX1N5bmNVcGRhdGFibGVOYW1lc3BhY2UgPSB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbXB0eSBwZW5kaW5nIHF1ZXVlIGluIG9yZGVyIHRvIGd1YXJhbnRlZSBvcmRlciBpbmRlcGVuZGVuY2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCdsaXQtZWxlbWVudCcpLlByb3BlcnR5VmFsdWVzIH0gY2hhbmdlZFByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBmaXJzdFVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpIHtcbiAgICAgIHN1cGVyLmZpcnN0VXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgICB0aGlzLl9fc3luY1VwZGF0YWJsZUluaXRpYWxpemUoKTtcbiAgICB9XG5cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICB0aGlzLl9fU3luY1VwZGF0YWJsZU5hbWVzcGFjZS5jb25uZWN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgIHRoaXMuX19TeW5jVXBkYXRhYmxlTmFtZXNwYWNlLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ha2VzIHRoZSBwcm9wZXJ0eUFjY2Vzc29yLmBoYXNDaGFuZ2VkYCBjb21wYXRpYmxlIGluIHN5bmNocm9ub3VzIHVwZGF0ZXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7Kn0gbmV3VmFsdWVcbiAgICAgKiBAcGFyYW0geyp9IG9sZFZhbHVlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzdGF0aWMgX19zeW5jVXBkYXRhYmxlSGFzQ2hhbmdlZChuYW1lLCBuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgW2V4dGVybmFsXTogYWNjZXNzaW5nIHByaXZhdGUgbGl0IHByb3BlcnR5XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5lbGVtZW50UHJvcGVydGllcztcbiAgICAgIGlmIChwcm9wZXJ0aWVzLmdldChuYW1lKSAmJiBwcm9wZXJ0aWVzLmdldChuYW1lKS5oYXNDaGFuZ2VkKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0aWVzLmdldChuYW1lKS5oYXNDaGFuZ2VkKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3VmFsdWUgIT09IG9sZFZhbHVlO1xuICAgIH1cblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIF9fc3luY1VwZGF0YWJsZUluaXRpYWxpemUoKSB7XG4gICAgICBjb25zdCBucyA9IHRoaXMuX19TeW5jVXBkYXRhYmxlTmFtZXNwYWNlO1xuICAgICAgY29uc3QgY3RvciA9XG4gICAgICAgIC8qKiBAdHlwZSB7dHlwZW9mIFN5bmNVcGRhdGFibGVNaXhpbiAmIHR5cGVvZiBpbXBvcnQoJy4uLy4uL3R5cGVzL3V0aWxzL1N5bmNVcGRhdGFibGVNaXhpblR5cGVzJykuU3luY1VwZGF0YWJsZUhvc3R9ICovIChcbiAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yXG4gICAgICAgICk7XG5cbiAgICAgIG5zLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIC8vIEVtcHR5IHF1ZXVlLi4uXG4gICAgICBpZiAobnMucXVldWUpIHtcbiAgICAgICAgQXJyYXkuZnJvbShucy5xdWV1ZSkuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlIFthbGxvdy1wcml2YXRlXSBpbiB0ZXN0XG4gICAgICAgICAgaWYgKGN0b3IuX19zeW5jVXBkYXRhYmxlSGFzQ2hhbmdlZChuYW1lLCB0aGlzW25hbWVdLCB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN5bmMobmFtZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHsqfSBvbGRWYWx1ZVxuICAgICAqL1xuICAgIHJlcXVlc3RVcGRhdGUobmFtZSwgb2xkVmFsdWUpIHtcbiAgICAgIHN1cGVyLnJlcXVlc3RVcGRhdGUobmFtZSwgb2xkVmFsdWUpO1xuXG4gICAgICB0aGlzLl9fU3luY1VwZGF0YWJsZU5hbWVzcGFjZSA9IHRoaXMuX19TeW5jVXBkYXRhYmxlTmFtZXNwYWNlIHx8IHt9O1xuICAgICAgY29uc3QgbnMgPSB0aGlzLl9fU3luY1VwZGF0YWJsZU5hbWVzcGFjZTtcblxuICAgICAgY29uc3QgY3RvciA9XG4gICAgICAgIC8qKiBAdHlwZSB7dHlwZW9mIFN5bmNVcGRhdGFibGVNaXhpbiAmIHR5cGVvZiBpbXBvcnQoJy4uLy4uL3R5cGVzL3V0aWxzL1N5bmNVcGRhdGFibGVNaXhpblR5cGVzJykuU3luY1VwZGF0YWJsZUhvc3R9ICovIChcbiAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yXG4gICAgICAgICk7XG4gICAgICAvLyBCZWZvcmUgY29ubmVjdGVkQ2FsbGJhY2s6IHF1ZXVlXG4gICAgICBpZiAoIW5zLmluaXRpYWxpemVkKSB7XG4gICAgICAgIG5zLnF1ZXVlID0gbnMucXVldWUgfHwgbmV3IFNldCgpO1xuICAgICAgICAvLyBNYWtlcyBzdXJlIHRoYXQgd2Ugb25seSBpbml0aWFsaXplIG9uZSB0aW1lLCB3aXRoIG1vc3QgdXAgdG8gZGF0ZSB2YWx1ZVxuICAgICAgICBucy5xdWV1ZS5hZGQobmFtZSk7XG4gICAgICB9IC8vIEFmdGVyIGNvbm5lY3RlZENhbGxiYWNrOiBndWFyZGVkIHByb3h5IHRvIHVwZGF0ZVN5bmNcbiAgICAgIC8vIEB0cy1pZ25vcmUgW2FsbG93LXByaXZhdGVdIGluIHRlc3RcbiAgICAgIGVsc2UgaWYgKGN0b3IuX19zeW5jVXBkYXRhYmxlSGFzQ2hhbmdlZChuYW1lLCB0aGlzW25hbWVdLCBvbGRWYWx1ZSkpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTeW5jKG5hbWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBhYnN0cmFjdGlvbiB0aGF0IGhhcyB0aGUgZXhhY3Qgc2FtZSBhcGkgYXMgYHJlcXVlc3RVcGRhdGVgLCBidXQgdGFraW5nXG4gICAgICogaW50byBhY2NvdW50OlxuICAgICAqIC0gW21lbWJlciBvcmRlciBpbmRlcGVuZGVuY2VdKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL2dvbGQtc3RhbmRhcmQvd2lraS9NZW1iZXItT3JkZXItSW5kZXBlbmRlbmNlKVxuICAgICAqIC0gcHJvcGVydHkgZWZmZWN0cyBzdGFydCB3aGVuIGFsbCAobGlnaHQpIGRvbSBoYXMgaW5pdGlhbGl6ZWQgKG9uIGZpcnN0VXBkYXRlZClcbiAgICAgKiAtIHByb3BlcnR5IGVmZmVjdHMgZG9uJ3QgaW50ZXJydXB0IHRoZSBmaXJzdCBtZWFuaW5nZnVsIHBhaW50XG4gICAgICogLSBjb21wYXRpYmxlIHdpdGggcHJvcGVydHlBY2Nlc3Nvci5gaGFzQ2hhbmdlZGA6IG5vIG1hbnVhbCBjaGVja3MgbmVlZGVkIG9yIGFjY2lkZW50YWxseVxuICAgICAqIHJ1biBwcm9wZXJ0eSBlZmZlY3RzIC8gZXZlbnRzIHdoZW4gbm8gY2hhbmdlIGhhcHBlbmVkXG4gICAgICogZWZmZWN0cyB3aGVuIHZhbHVlcyBkaWRuJ3QgY2hhbmdlXG4gICAgICogQWxsIGNvZGUgcHJldmlvdXNseSBwcmVzZW50IGluIHJlcXVlc3RVcGRhdGUgY2FuIGJlIHBsYWNlZCBpbiB0aGlzIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsdWVcbiAgICAgKi9cbiAgICB1cGRhdGVTeW5jKG5hbWUsIG9sZFZhbHVlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMsIG5vLXVudXNlZC12YXJzXG4gIH07XG5cbmV4cG9ydCBjb25zdCBTeW5jVXBkYXRhYmxlTWl4aW4gPSBkZWR1cGVNaXhpbihTeW5jVXBkYXRhYmxlTWl4aW5JbXBsZW1lbnRhdGlvbik7XG4iLCJpbXBvcnQgeyBodG1sLCBMaXRFbGVtZW50IH0gZnJvbSAnQGxpb24vY29yZSc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdmFsaWRhdGUvVmFsaWRhdG9yJykuVmFsaWRhdG9yfSBWYWxpZGF0b3JcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BsaW9uL2NvcmUnKS5UZW1wbGF0ZVJlc3VsdH0gVGVtcGxhdGVSZXN1bHRcbiAqIEB0eXBlZGVmIHtPYmplY3R9IG1lc3NhZ2VNYXBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nIHwgTm9kZX0gbWVzc2FnZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGVcbiAqIEBwcm9wZXJ0eSB7VmFsaWRhdG9yfSBbdmFsaWRhdG9yXVxuICovXG5cbi8qKlxuICogQGRlc2MgVGFrZXMgY2FyZSBvZiBhY2Nlc3NpYmxlIHJlbmRlcmluZyBvZiBlcnJvciBtZXNzYWdlc1xuICogU2hvdWxkIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBGb3JtQ29udHJvbCBoYXZpbmcgVmFsaWRhdGVNaXhpbiBhcHBsaWVkXG4gKi9cbmV4cG9ydCBjbGFzcyBMaW9uVmFsaWRhdGlvbkZlZWRiYWNrIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmVlZGJhY2tEYXRhOiB7IGF0dHJpYnV0ZTogZmFsc2UgfSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkYWJsZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgKiBAcGFyYW0ge3N0cmluZyB8IE5vZGUgfCBUZW1wbGF0ZVJlc3VsdCB9IG9wdHMubWVzc2FnZSBtZXNzYWdlIG9yIGZlZWRiYWNrIG5vZGUgb3IgVGVtcGxhdGVSZXN1bHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLnR5cGVdXG4gICAqIEBwYXJhbSB7VmFsaWRhdG9yfSBbb3B0cy52YWxpZGF0b3JdXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gIF9tZXNzYWdlVGVtcGxhdGUoeyBtZXNzYWdlIH0pIHtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2ltcG9ydCgnQGxpb24vY29yZScpLlByb3BlcnR5VmFsdWVzIH0gY2hhbmdlZFByb3BlcnRpZXNcbiAgICovXG4gIHVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpIHtcbiAgICBzdXBlci51cGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICBpZiAodGhpcy5mZWVkYmFja0RhdGEgJiYgdGhpcy5mZWVkYmFja0RhdGFbMF0pIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCd0eXBlJywgdGhpcy5mZWVkYmFja0RhdGFbMF0udHlwZSk7XG4gICAgICB0aGlzLmN1cnJlbnRUeXBlID0gdGhpcy5mZWVkYmFja0RhdGFbMF0udHlwZTtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5yZW1vdmVNZXNzYWdlKTtcbiAgICAgIC8vIFRPRE86IHRoaXMgbG9naWMgc2hvdWxkIGJlIGluIFZhbGlkYXRlTWl4aW4sIHNvIHRoYXQgW3Nob3ctZmVlZGJhY2stZm9yXSBpcyBpbiBzeW5jLFxuICAgICAgLy8gcGx1cyBkdXJhdGlvbiBzaG91bGQgYmUgY29uZmlndXJhYmxlXG4gICAgICBpZiAodGhpcy5jdXJyZW50VHlwZSA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTWVzc2FnZSA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgndHlwZScpO1xuICAgICAgICAgIC8qKiBAdHlwZSB7bWVzc2FnZU1hcFtdfSAqL1xuICAgICAgICAgIHRoaXMuZmVlZGJhY2tEYXRhID0gW107XG4gICAgICAgIH0sIDMwMDApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50VHlwZSAhPT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgndHlwZScpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgICR7dGhpcy5mZWVkYmFja0RhdGEgJiZcbiAgICAgIHRoaXMuZmVlZGJhY2tEYXRhLm1hcChcbiAgICAgICAgKHsgbWVzc2FnZSwgdHlwZSwgdmFsaWRhdG9yIH0pID0+IGh0bWxgXG4gICAgICAgICAgJHt0aGlzLl9tZXNzYWdlVGVtcGxhdGUoeyBtZXNzYWdlLCB0eXBlLCB2YWxpZGF0b3IgfSl9XG4gICAgICAgIGAsXG4gICAgICApfVxuICAgIGA7XG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvdmFsaWRhdGUnKS5GZWVkYmFja01lc3NhZ2VEYXRhfSBGZWVkYmFja01lc3NhZ2VEYXRhXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy92YWxpZGF0ZScpLlZhbGlkYXRvclBhcmFtfSBWYWxpZGF0b3JQYXJhbVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvdmFsaWRhdGUnKS5WYWxpZGF0b3JDb25maWd9IFZhbGlkYXRvckNvbmZpZ1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvdmFsaWRhdGUnKS5WYWxpZGF0b3JPdXRjb21lfSBWYWxpZGF0b3JPdXRjb21lXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy92YWxpZGF0ZScpLlZhbGlkYXRvck5hbWV9IFZhbGlkYXRvck5hbWVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL3ZhbGlkYXRlJykuVmFsaWRhdGlvblR5cGV9IFZhbGlkYXRpb25UeXBlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9Gb3JtQ29udHJvbE1peGluJykuRm9ybUNvbnRyb2xIb3N0fSBGb3JtQ29udHJvbEhvc3RcbiAqL1xuXG4vLyBUT0RPOiBzdXBwb3J0IGF0dHJpYnV0ZSB2YWxpZGF0b3JzIGxpa2UgPG15LWVsIG15LXZhbGlkYXRvcj0ke2R5bmFtaWNQYXJhbX0+PC9teS1lbD4gPT5cbi8vIHJlZ2lzdGVyIGluIGEgVmFsaWRhdGVTZXJ2aWNlIHRoYXQgaXMgcmVhZCBieSBWYWxpZGF0b3IgYW5kIGFkZHMgdGhlc2UgYXR0cnMgaW4gcHJvcGVydGllc1xuLy8gb2JqZWN0LlxuLy8gVGhleSB3b3VsZCBiZWNvbWUgbGlrZSBjb25maWd1cmFibGVcbi8vIFtnbG9iYWwgYXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcylcbi8vIGZvciBGb3JtQ29udHJvbHMuXG5cbmV4cG9ydCBjbGFzcyBWYWxpZGF0b3IgZXh0ZW5kcyBFdmVudFRhcmdldCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1ZhbGlkYXRvclBhcmFtfSBbcGFyYW1dXG4gICAqIEBwYXJhbSB7VmFsaWRhdG9yQ29uZmlnfSBbY29uZmlnXVxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW0sIGNvbmZpZykge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKiogQHR5cGUge1ZhbGlkYXRvclBhcmFtfSAqL1xuICAgIHRoaXMuX19wYXJhbSA9IHBhcmFtO1xuICAgIC8qKiBAdHlwZSB7VmFsaWRhdG9yQ29uZmlnfSAqL1xuICAgIHRoaXMuX19jb25maWcgPSBjb25maWcgfHwge307XG4gICAgLyoqIEB0eXBlIHtWYWxpZGF0aW9uVHlwZX0gKi9cbiAgICB0aGlzLnR5cGUgPSBjb25maWc/LnR5cGUgfHwgJ2Vycm9yJzsgLy8gRGVmYXVsdCB0eXBlIHN1cHBvcnRlZCBieSBWYWxpZGF0ZU1peGluXG4gIH1cblxuICAvKipcbiAgICogVGhlIG5hbWUgdW5kZXIgd2hpY2ggdmFsaWRhdGlvbiByZXN1bHRzIGdldCByZWdpc3RlcmVkLiBGb3IgY29udmllbmNlIGFuZCBwcmVkaWN0YWJpbGl0eSwgdGhpc1xuICAgKiBzaG91bGQgYWx3YXlzIGJlIHRoZSBzYW1lIGFzIHRoZSBjb25zdHJ1Y3RvciBuYW1lIChzaW5jZSBpdCB3aWxsIGJlIG9iZnVzY2F0ZWQgaW4ganMgYnVpbGRzLFxuICAgKiB3ZSBuZWVkIHRvIHByb3ZpZGUgaXQgc2VwYXJhdGVseSkuXG4gICAqIEB0eXBlIHtWYWxpZGF0b3JOYW1lfVxuICAgKi9cbiAgc3RhdGljIHZhbGlkYXRvck5hbWUgPSAnJztcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgdmFsaWRhdG9yIGlzIGFzeW5jaHJvbm91cyBvciBub3QuIFdoZW4gdHJ1ZS4sIHRoaXMgbWVhbnMgZXhlY3V0ZSBmdW5jdGlvbiByZXR1cm5zXG4gICAqIGEgUHJvbWlzZS4gVGhpcyBjYW4gYmUgaGFuZHkgZm9yOlxuICAgKiAtIHNlcnZlciBzaWRlIGNhbGxzXG4gICAqIC0gdmFsaWRhdGlvbnMgdGhhdCBhcmUgZGVwZW5kZW50IG9uIGxhenkgbG9hZGVkIHJlc291cmNlcyAodGhleSBjYW4gYmUgYXN5bmMgdW50aWwgdGhlIGRlcGVuZGVuY3lcbiAgICogaXMgbG9hZGVkKVxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBhc3luYyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgdmFsaWRpdHkgb3V0Y29tZS4gV2hlbiB3ZSBuZWVkIHRvIHNob3cgZmVlZGJhY2ssXG4gICAqIGl0IHNob3VsZCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIGZhbHNlLiBTbyB3aGVuIGFuIGVycm9yXFxpbmZvfHdhcm5pbmd8c3VjY2VzcyBtZXNzYWdlXG4gICAqIG5lZWRzIHRvIGJlIHNob3duLCByZXR1cm4gdHJ1ZS4gRm9yIGFzeW5jIFZhbGlkYXRvcnMsIHRoZSBmdW5jdGlvbiBjYW4gcmV0dXJuIGEgUHJvbWlzZS5cbiAgICogSXQncyBhbHNvIHBvc3NpYmxlIHRvIHJldHVybiBhbiBlbnVtLiBMZXQncyBzYXkgdGhhdCBhIHBob25lIG51bWJlciBjYW4gaGF2ZSBtdWx0aXBsZVxuICAgKiBzdGF0ZXM6ICdpbnZhbGlkLWNvdW50cnktY29kZScgfCAndG9vLWxvbmcnIHwgJ3Rvby1zaG9ydCdcbiAgICogVGhvc2Ugc3RhdGVzIGNhbiBiZSByZXRyaWV2ZWQgaW4gdGhlIGdldE1lc3NhZ2VcbiAgICogQHBhcmFtIHthbnl9IG1vZGVsVmFsdWVcbiAgICogQHBhcmFtIHtWYWxpZGF0b3JQYXJhbX0gW3BhcmFtXVxuICAgKiBAcGFyYW0ge1ZhbGlkYXRvckNvbmZpZ30gW2NvbmZpZ11cbiAgICogQHJldHVybnMge1ZhbGlkYXRvck91dGNvbWV8UHJvbWlzZTxWYWxpZGF0b3JPdXRjb21lPn1cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycywgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICBleGVjdXRlKG1vZGVsVmFsdWUsIHBhcmFtLCBjb25maWcpIHtcbiAgICBjb25zdCBjdG9yID0gLyoqIEB0eXBlIHt0eXBlb2YgVmFsaWRhdG9yfSAqLyAodGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgaWYgKCFjdG9yLnZhbGlkYXRvck5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0EgdmFsaWRhdG9yIG5lZWRzIHRvIGhhdmUgYSBuYW1lISBQbGVhc2Ugc2V0IGl0IHZpYSBcInN0YXRpYyBnZXQgdmFsaWRhdG9yTmFtZSgpIHsgcmV0dXJuIFxcJ0lzQ2F0XFwnOyB9XCInLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBjb25zdHJ1Y3RvciwgZm9yIGluc3RhbmNlIDMgaW4gYG5ldyBNaW5MZW5ndGgoMylgLiBXaWxsXG4gICAqIGJlIHN0b3JlZCBvbiBWYWxpZGF0b3IgaW5zdGFuY2UgYW5kIHBhc3NlZCB0byBgZXhlY3V0ZWAgZnVuY3Rpb25cbiAgICogQGV4YW1wbGVcbiAgICogYGBganNcbiAgICogIC8vIFN0b3JlIHJlZmVyZW5jZSB0byBWYWxpZGF0b3IgaW5zdGFuY2VcbiAgICogIGNvbnN0IG15VmFsaWRhdG9ySW5zdGFuY2UgPSBuZXcgTXlWYWxpZGF0b3IoMSk7XG4gICAqICAvLyBVc2UgdGhpcyBpbnN0YW5jZSBpbml0aWFsbHkgb24gYSBGb3JtQ29udHJvbCAodGhhdCB1c2VzIFZhbGlkYXRlTWl4aW4pXG4gICAqICByZW5kZXIoaHRtbGA8dmFsaWRhdGFibGUtZWxlbWVudCAudmFsaWRhdG9ycz1cIiR7W215VmFsaWRhdG9ySW5zdGFuY2VdfVwiPjwvdmFsaWRhdGFibGUtZWxlbWVudD5gLCBkb2N1bWVudC5ib2R5KTtcbiAgICogIC8vIEJhc2VkIG9uIHNvbWUgZXZlbnQsIHdlIG5lZWQgdG8gY2hhbmdlIHRoZSBwYXJhbVxuICAgKiAgbXlWYWxpZGF0b3JJbnN0YW5jZS5wYXJhbSA9IDI7XG4gICAqIGBgYFxuICAgKiBAcHJvcGVydHkge1ZhbGlkYXRvclBhcmFtfVxuICAgKi9cbiAgc2V0IHBhcmFtKHApIHtcbiAgICB0aGlzLl9fcGFyYW0gPSBwO1xuICAgIC8qKlxuICAgICAqIFRoaXMgZXZlbnQgaXMgbGlzdGVuZWQgZm9yIGJ5IFZhbGlkYXRlTWl4aW4uIFdoZW5ldmVyIHRoZSB2YWxpZGF0aW9uIHBhcmFtZXRlciBoYXNcbiAgICAgKiBjaGFuZ2VkLCB0aGUgRm9ybUNvbnRyb2wgd2lsbCByZXZhbGlkYXRlIGl0c2VsZlxuICAgICAqL1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3BhcmFtLWNoYW5nZWQnKSk7XG4gIH1cblxuICBnZXQgcGFyYW0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX19wYXJhbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgc2Vjb25kIGFyZ3VtZW50IG9mIHRoZSBjb25zdHJ1Y3RvciwgZm9yIGluc3RhbmNlXG4gICAqIGBuZXcgTWluTGVuZ3RoKDMsIHtnZXRGZWVkTWVzc2FnZTogYXN5bmMgKCkgPT4gJ3RvbyBsb25nJ30pYC5cbiAgICogV2lsbCBiZSBzdG9yZWQgb24gVmFsaWRhdG9yIGluc3RhbmNlIGFuZCBwYXNzZWQgdG8gYGV4ZWN1dGVgIGZ1bmN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqc1xuICAgKiAgLy8gU3RvcmUgcmVmZXJlbmNlIHRvIFZhbGlkYXRvciBpbnN0YW5jZVxuICAgKiAgY29uc3QgbXlWYWxpZGF0b3JJbnN0YW5jZSA9IG5ldyBNeVZhbGlkYXRvcigxLCB7Z2V0TWVzc2FnZSgpID0+ICd4J30pO1xuICAgKiAgLy8gVXNlIHRoaXMgaW5zdGFuY2UgaW5pdGlhbGx5IG9uIGEgRm9ybUNvbnRyb2wgKHRoYXQgdXNlcyBWYWxpZGF0ZU1peGluKVxuICAgKiAgcmVuZGVyKGh0bWxgPHZhbGlkYXRhYmxlLWVsZW1lbnQgLnZhbGlkYXRvcnM9XCIke1tteVZhbGlkYXRvckluc3RhbmNlXX1cIj48L3ZhbGlkYXRhYmxlLWVsZW1lbnQ+YCwgZG9jdW1lbnQuYm9keSk7XG4gICAqICAvLyBCYXNlZCBvbiBzb21lIGV2ZW50LCB3ZSBuZWVkIHRvIGNoYW5nZSB0aGUgcGFyYW1cbiAgICogIG15VmFsaWRhdG9ySW5zdGFuY2UuY29uZmlnID0ge2dldE1lc3NhZ2UoKSA9PiAneSd9O1xuICAgKiBgYGBcbiAgICogQHByb3BlcnR5IHtWYWxpZGF0b3JDb25maWd9XG4gICAqL1xuICBzZXQgY29uZmlnKGMpIHtcbiAgICB0aGlzLl9fY29uZmlnID0gYztcbiAgICAvKipcbiAgICAgKiBUaGlzIGV2ZW50IGlzIGxpc3RlbmVkIGZvciBieSBWYWxpZGF0ZU1peGluLiBXaGVuZXZlciB0aGUgdmFsaWRhdGlvbiBjb25maWcgaGFzXG4gICAgICogY2hhbmdlZCwgdGhlIEZvcm1Db250cm9sIHdpbGwgcmV2YWxpZGF0ZSBpdHNlbGZcbiAgICAgKi9cbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjb25maWctY2hhbmdlZCcpKTtcbiAgfVxuXG4gIGdldCBjb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19jb25maWc7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyBhIHByb3RlY3RlZCBtZXRob2QgdGhhdCB1c3VhbGx5IHNob3VsZCBub3QgYmUgb3ZlcnJpZGRlbi4gSXQgaXMgY2FsbGVkIGJ5IFZhbGlkYXRlTWl4aW5cbiAgICogYW5kIGl0IGdhdGhlcnMgZGF0YSB0byBiZSBwYXNzZWQgdG8gZ2V0TWVzc2FnZSBmdW5jdGlvbnMgZm91bmQ6XG4gICAqIC0gYHRoaXMuY29uZmlnLmdldE1lc3NhZ2VgLCBsb2NhbGx5IHByb3ZpZGVkIGJ5IGNvbnN1bWVycyBvZiB0aGUgVmFsaWRhdG9yIChvdmVycmlkZXMgZ2xvYmFsIGdldE1lc3NhZ2UpXG4gICAqIC0gYE15VmFsaWRhdG9yLmdldE1lc3NhZ2VgLCBnbG9iYWxseSBwcm92aWRlZCBieSBjcmVhdG9ycyBvciBjb25zdW1lcnMgb2YgdGhlIFZhbGlkYXRvclxuICAgKlxuICAgKiBDb25mdXNpb24gY2FuIGFyaXNlIGJlY2F1c2Ugb2Ygc2ltaWxhcml0aWVzIHdpdGggZm9ybWVyIG1lbnRpb25lZCBtZXRob2RzLiBJbiB0aGF0IHJlZ2FyZCwgYVxuICAgKiBiZXR0ZXIgbmFtZSBmb3IgdGhpcyBmdW5jdGlvbiB3b3VsZCBoYXZlIGJlZW4gX3BlcGFyZURhdGFBbmRDYWxsSGlnaGVzdFByaW9HZXRNZXNzYWdlLlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqc1xuICAgKiBjbGFzcyBNeVZhbGlkYXRvciBleHRlbmRzIFZhbGlkYXRvciB7XG4gICAqICAgLy8gLi4uXG4gICAqICAgLy8gMS4gZ2xvYmFsbHkgZGVmaW5lZFxuICAgKiAgIHN0YXRpYyBhc3luYyBnZXRNZXNzYWdlKCkge1xuICAgKiAgICAgcmV0dXJuICdsb3dlc3QgcHJpbywgZGVmaW5lZCBnbG9iYWxseSBieSBWYWxpZGF0b3IgYXV0aG9yJ1xuICAgKiAgIH1cbiAgICogfVxuICAgKiAvLyAyLiBnbG9iYWxseSBvdmVycmlkZGVuXG4gICAqIE15VmFsaWRhdG9yLmdldE1lc3NhZ2UgPSBhc3luYygpID0+ICdvdmVycmlkZXMgYWxyZWFkeSBjb25maWd1cmVkIG1lc3NhZ2UnO1xuICAgKiAvLyAzLiBsb2NhbGx5IG92ZXJyaWRkZW5cbiAgICogbmV3IE15VmFsaWRhdG9yKG15UGFyYW0sIHsgZ2V0TWVzc2FnZTogYXN5bmMoKSA9PiAnbG9jYWxseSBkZWZpbmVkLCBhbHdheXMgd2lucycgfSk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0ge1BhcnRpYWw8RmVlZGJhY2tNZXNzYWdlRGF0YT59IFtkYXRhXVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmd8RWxlbWVudD59XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGFzeW5jIF9nZXRNZXNzYWdlKGRhdGEpIHtcbiAgICBjb25zdCBjdG9yID0gLyoqIEB0eXBlIHt0eXBlb2YgVmFsaWRhdG9yfSAqLyAodGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgY29uc3QgY29tcG9zZWREYXRhID0ge1xuICAgICAgbmFtZTogY3Rvci52YWxpZGF0b3JOYW1lLFxuICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgcGFyYW1zOiB0aGlzLnBhcmFtLFxuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIC4uLmRhdGEsXG4gICAgfTtcbiAgICBpZiAodGhpcy5jb25maWcuZ2V0TWVzc2FnZSkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZy5nZXRNZXNzYWdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5nZXRNZXNzYWdlKGNvbXBvc2VkRGF0YSk7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBZb3UgbXVzdCBwcm92aWRlIGEgdmFsdWUgZm9yIGdldE1lc3NhZ2Ugb2YgdHlwZSAnZnVuY3Rpb24nLCB5b3UgcHJvdmlkZWQgYSB2YWx1ZSBvZiB0eXBlOiAke3R5cGVvZiB0aGlzXG4gICAgICAgICAgLmNvbmZpZy5nZXRNZXNzYWdlfWAsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY3Rvci5nZXRNZXNzYWdlKGNvbXBvc2VkRGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIGluc2lkZSBWYWxpZGF0b3IucHJvdG90eXBlLl9nZXRNZXNzYWdlIChzZWUgZXhwbGFuYXRpb24pLlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqc1xuICAgKiBjbGFzcyBNeVZhbGlkYXRvciBleHRlbmRzIFZhbGlkYXRvciB7XG4gICAqICAgc3RhdGljIGFzeW5jIGdldE1lc3NhZ2UoKSB7XG4gICAqICAgICByZXR1cm4gJ2xvd2VzdCBwcmlvLCBkZWZpbmVkIGdsb2JhbGx5IGJ5IFZhbGlkYXRvciBhdXRob3InXG4gICAqICAgfVxuICAgKiB9XG4gICAqIC8vIGdsb2JhbGx5IG92ZXJyaWRkZW5cbiAgICogTXlWYWxpZGF0b3IuZ2V0TWVzc2FnZSA9IGFzeW5jKCkgPT4gJ292ZXJyaWRlcyBhbHJlYWR5IGNvbmZpZ3VyZWQgbWVzc2FnZSc7XG4gICAqIGBgYFxuICAgKiBAb3ZlcnJpZGFibGVcbiAgICogQHBhcmFtIHtQYXJ0aWFsPEZlZWRiYWNrTWVzc2FnZURhdGE+fSBbZGF0YV1cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nfEVsZW1lbnQ+fVxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHN0YXRpYyBhc3luYyBnZXRNZXNzYWdlKGRhdGEpIHtcbiAgICByZXR1cm4gYFBsZWFzZSBjb25maWd1cmUgYW4gZXJyb3IgbWVzc2FnZSBmb3IgXCIke3RoaXMubmFtZX1cIiBieSBvdmVycmlkaW5nIFwic3RhdGljIGFzeW5jIGdldE1lc3NhZ2UoKVwiYDtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0b3JzIGFyZSBhbGxvd2VkIHRvIGhhdmUga25vd2xlZGdlIGFib3V0IEZvcm1Db250cm9scy5cbiAgICogSW4gc29tZSBjYXNlcyAoaW4gY2FzZSBvZiB0aGUgUmVxdWlyZWQgVmFsaWRhdG9yKSB3ZSB3YW50ZWQgdG8gZW5oYW5jZSBhY2Nlc3NpYmlsaXR5IGJ5XG4gICAqIGFkZGluZyBbYXJpYS1yZXF1aXJlZF0uIEFsc28sIGl0IHdvdWxkIGJlIHBvc3NpYmxlIHRvIHdyaXRlIGFuIGFkdmFuY2VkIE1pbkxlbmd0aFxuICAgKiBWYWxpZGF0b3IgdGhhdCBhZGRzIGEgLnByZXByb2Nlc3NvciB0aGF0IHJlc3RyaWN0cyBmcm9tIHR5cGluZyB0b28gbWFueSBjaGFyYWN0ZXJzXG4gICAqIChsaWtlIHRoZSBuYXRpdmUgW21pbmxlbmd0aF0gdmFsaWRhdG9yKS5cbiAgICogV2lsbCBiZSBjYWxsZWQgd2hlbiBWYWxpZGF0b3IgaXMgYWRkZWQgdG8gRm9ybUNvbnRyb2wudmFsaWRhdG9ycy5cbiAgICogQGV4YW1wbGVcbiAgICogYGBganNcbiAgICogb25Gb3JtQ29udHJvbENvbm5lY3QoZm9ybUNvbnRyb2wpIHtcbiAgICogICBpZihmb3JtQ29udHJvbC5pbnB1dE5vZGUpIHtcbiAgICogICAgIGlucHV0Tm9kZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtcmVxdWlyZWQnLCAndHJ1ZScpO1xuICAgKiAgIH1cbiAgICogfVxuICAgKlxuICAgKiBgYGBcbiAgICogQGNvbmZpZ3VyYWJsZVxuICAgKiBAcGFyYW0ge0Zvcm1Db250cm9sSG9zdH0gZm9ybUNvbnRyb2xcbiAgICovXG4gIG9uRm9ybUNvbnRyb2xDb25uZWN0KGZvcm1Db250cm9sKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgLyoqXG4gICAqIEFsc28gc2VlIGBvbkZvcm1Db250cm9sQ29ubmVjdGAuXG4gICAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gVmFsaWRhdG9yIGlzIHJlbW92ZWQgZnJvbSBGb3JtQ29udHJvbC52YWxpZGF0b3JzLlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqc1xuICAgKiBvbkZvcm1Db250cm9sRGlzY29ubmVjdChmb3JtQ29udHJvbCkge1xuICAgKiAgIGlmKGZvcm1Db250cm9sLmlucHV0Tm9kZSkge1xuICAgKiAgICAgaW5wdXROb2RlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1yZXF1aXJlZCcpO1xuICAgKiAgIH1cbiAgICogfVxuICAgKiBAY29uZmlndXJhYmxlXG4gICAqIEBwYXJhbSB7Rm9ybUNvbnRyb2xIb3N0fSBmb3JtQ29udHJvbFxuICAgKi9cbiAgb25Gb3JtQ29udHJvbERpc2Nvbm5lY3QoZm9ybUNvbnRyb2wpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAvKipcbiAgICogQGRlc2MgVXNlZCBvbiBhc3luYyBWYWxpZGF0b3JzLCBtYWtlcyBpdCBhYmxlIHRvIGRvIHBlcmYgb3B0aW1pemF0aW9ucyB3aGVuIHRoZXJlIGFyZVxuICAgKiBwZW5kaW5nIFwiZXhlY3V0ZVwiIGNhbGxzIHdpdGggb3V0ZGF0ZWQgdmFsdWVzLlxuICAgKiBWYWxpZGF0ZU1peGluIGNhbGxzIFZhbGlkYXRvci5hYm9ydEV4ZWN1dGlvbigpIGFuIGFzeW5jIFZhbGlkYXRvciBjYW4gYWN0IGFjY29yZGluZ2x5LFxuICAgKiBkZXBlbmRpbmcgb24gaXRzIGltcGxlbWVudGF0aW9uIG9mIHRoZSBcImV4ZWN1dGVcIiBmdW5jdGlvbi5cbiAgICogLSBGb3IgaW5zdGFuY2UsIHdoZW4gZmV0Y2ggd2FzIGNhbGxlZDpcbiAgICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzEwNjE4MzgvaG93LWRvLWktY2FuY2VsLWFuLWh0dHAtZmV0Y2gtcmVxdWVzdFxuICAgKiAtIE9yLCB3aGVuIGEgd2Vid29ya2VyIHdhcyBzdGFydGVkLCBpdHMgcHJvY2VzcyBjb3VsZCBiZSBhYm9ydGVkIGFuZCB0aGVuIHJlc3RhcnRlZC5cbiAgICovXG4gIGFib3J0RXhlY3V0aW9uKCkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZVxufVxuXG4vLyBGb3Igc2ltcGxpY2l0eSwgYSBkZWZhdWx0IHZhbGlkYXRvciBvbmx5IGhhbmRsZXMgb25lIHN0YXRlOlxuLy8gaXQgY2FuIGVpdGhlciBiZSB0cnVlIG9yIGZhbHNlIGFuIGl0IHdpbGwgb25seSBoYXZlIG9uZSBtZXNzYWdlLlxuLy8gSW4gbW9yZSBhZHZhbmNlZCBjYXNlcyAodGhpbmsgb2YgdGhlIGZlZWRiYWNrIG1lY2hhbmlzbSBmb3IgdGhlIG1heGltdW0gbnVtYmVyIG9mXG4vLyBjaGFyYWN0ZXJzIGluIFR3aXR0ZXIpLCBtb3JlIHN0YXRlcyBhcmUgbmVlZGVkLiBUaGUgYWx0ZXJuYXRpdmUgb2Zcbi8vIGhhdmluZyBtdWx0aXBsZSBkaXN0aW5jdCB2YWxpZGF0b3JzIHdvdWxkIGJlIGN1bWJlcnNvbWUgdG8gY3JlYXRlIGFuZCBtYWludGFpbixcbi8vIGFsc28gYmVjYXVzZSB0aGUgdmFsaWRhdGlvbnMgd291bGQgdGllIHRvbyBtdWNoIGludG8gZWFjaCBvdGhlcnMgbG9naWMuXG4iLCJpbXBvcnQgeyBWYWxpZGF0b3IgfSBmcm9tICcuL1ZhbGlkYXRvci5qcyc7XG5cbi8qKlxuICogQGRlc2MgSW5zdGVhZCBvZiBldmFsdWF0aW5nIHRoZSByZXN1bHQgb2YgYSByZWd1bGFyIHZhbGlkYXRvciwgYSBSZXN1bHRWYWxpZGF0b3IgbG9va3NcbiAqIGF0IHRoZSB0b3RhbCByZXN1bHQgb2YgcmVndWxhciBWYWxpZGF0b3JzLiBJbnN0ZWFkIG9mIGFuIGV4ZWN1dGUgZnVuY3Rpb24sIGl0IHVzZXMgYVxuICogJ2V4ZWN1dGVPblJlc3VsdHMnIFZhbGlkYXRvci5cbiAqIFJlc3VsdFZhbGlkYXRvcnMgY2Fubm90IGJlIGFzeW5jLCBhbmQgc2hvdWxkIG5vdCBjb250YWluIGFuIGV4ZWN1dGUgbWV0aG9kLlxuICovXG5leHBvcnQgY2xhc3MgUmVzdWx0VmFsaWRhdG9yIGV4dGVuZHMgVmFsaWRhdG9yIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gICAqIEBwYXJhbSB7VmFsaWRhdG9yW119IGNvbnRleHQucmVndWxhclZhbGlkYXRpb25SZXN1bHRcbiAgICogQHBhcmFtIHtWYWxpZGF0b3JbXX0gY29udGV4dC5wcmV2VmFsaWRhdGlvblJlc3VsdFxuICAgKiBAcGFyYW0ge1ZhbGlkYXRvcltdfSBjb250ZXh0LnByZXZTaG93blZhbGlkYXRpb25SZXN1bHRcbiAgICogQHBhcmFtIHtWYWxpZGF0b3JbXX0gW2NvbnRleHQudmFsaWRhdG9yc11cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICBleGVjdXRlT25SZXN1bHRzKHtcbiAgICByZWd1bGFyVmFsaWRhdGlvblJlc3VsdCxcbiAgICBwcmV2VmFsaWRhdGlvblJlc3VsdCxcbiAgICBwcmV2U2hvd25WYWxpZGF0aW9uUmVzdWx0LFxuICAgIHZhbGlkYXRvcnMsXG4gIH0pIHtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbiIsImltcG9ydCB7IFZhbGlkYXRvciB9IGZyb20gJy4uL1ZhbGlkYXRvci5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vdHlwZXMvRm9ybUNvbnRyb2xNaXhpblR5cGVzLmpzJykuRm9ybUNvbnRyb2xIb3N0fSBGb3JtQ29udHJvbEhvc3RcbiAqL1xuXG5leHBvcnQgY2xhc3MgUmVxdWlyZWQgZXh0ZW5kcyBWYWxpZGF0b3Ige1xuICBzdGF0aWMgZ2V0IHZhbGlkYXRvck5hbWUoKSB7XG4gICAgcmV0dXJuICdSZXF1aXJlZCc7XG4gIH1cblxuICAvKipcbiAgICogSW4gb3JkZXIgdG8gcHJldmVudCBhY2Nlc3NpYmlsaXR5IHZpb2xhdGlvbnMsIHRoZSBhcmlhLXJlcXVpcmVkIGF0dHJpYnV0ZSB3aWxsXG4gICAqIGJlIGNvbWJpbmVkIHdpdGggY29tcGF0aWJsZSBhcmlhIHJvbGVzOiBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEvI2FyaWEtcmVxdWlyZWRcbiAgICovXG4gIHN0YXRpYyBnZXQgX2NvbXBhdGlibGVSb2xlcygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ2NvbWJvYm94JyxcbiAgICAgICdncmlkY2VsbCcsXG4gICAgICAnaW5wdXQnLFxuICAgICAgJ2xpc3Rib3gnLFxuICAgICAgJ3JhZGlvZ3JvdXAnLFxuICAgICAgJ3NlbGVjdCcsXG4gICAgICAnc3BpbmJ1dHRvbicsXG4gICAgICAndGV4dGFyZWEnLFxuICAgICAgJ3RleHRib3gnLFxuICAgICAgJ3RyZWUnLFxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogSW4gb3JkZXIgdG8gcHJldmVudCBhY2Nlc3NpYmlsaXR5IHZpb2xhdGlvbnMsIHRoZSBhcmlhLXJlcXVpcmVkIGF0dHJpYnV0ZSB3aWxsXG4gICAqIGJlIGNvbWJpbmVkIHdpdGggY29tcGF0aWJsZSBwbGF0Zm9ybSBpbnB1dCBlbGVtZW50c1xuICAgKi9cbiAgc3RhdGljIGdldCBfY29tcGF0aWJsZVRhZ3MoKSB7XG4gICAgcmV0dXJuIFsnaW5wdXQnLCAnc2VsZWN0JywgJ3RleHRhcmVhJ107XG4gIH1cblxuICAvKipcbiAgICogV2UgZG9uJ3QgaGF2ZSBhbiBleGVjdXRlIGZ1bmN0aW9uLCBzaW5jZSB0aGUgUmVxdWlyZWQgdmFsaWRhdG9yIGlzICdzcGVjaWFsJy5cbiAgICogVGhlIG91dGNvbWUgZGVwZW5kcyBvbiB0aGUgbW9kZWxWYWx1ZSBvZiB0aGUgRm9ybUNvbnRyb2wgYW5kXG4gICAqIEZvcm1Db250cm9sLl9faXNFbXB0eSAvIEZvcm1Db250cm9sLl9pc0VtcHR5LlxuICAgKi9cblxuICAvKipcbiAgICogQHBhcmFtIHtGb3JtQ29udHJvbEhvc3QgJiBIVE1MRWxlbWVudH0gZm9ybUNvbnRyb2xcbiAgICovXG4gIC8vIEB0cy1pZ25vcmUgW2FsbG93LXByb3RlY3RlZF0gd2UgYXJlIGFsbG93ZWQgdG8ga25vdyBGb3JtQ29udHJvbCBwcm90Y2VjdGVkIHByb3BzIGluIGZvcm0tY29yZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICBvbkZvcm1Db250cm9sQ29ubmVjdCh7IF9pbnB1dE5vZGU6IGlucHV0Tm9kZSB9KSB7XG4gICAgaWYgKGlucHV0Tm9kZSkge1xuICAgICAgY29uc3Qgcm9sZSA9IGlucHV0Tm9kZS5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSB8fCAnJztcbiAgICAgIGNvbnN0IGVsZW1lbnRUYWdOYW1lID0gaW5wdXROb2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNvbnN0IGN0b3IgPSAvKiogQHR5cGUge3R5cGVvZiBSZXF1aXJlZH0gKi8gKHRoaXMuY29uc3RydWN0b3IpO1xuICAgICAgaWYgKGN0b3IuX2NvbXBhdGlibGVSb2xlcy5pbmNsdWRlcyhyb2xlKSB8fCBjdG9yLl9jb21wYXRpYmxlVGFncy5pbmNsdWRlcyhlbGVtZW50VGFnTmFtZSkpIHtcbiAgICAgICAgaW5wdXROb2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1yZXF1aXJlZCcsICd0cnVlJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Rm9ybUNvbnRyb2xIb3N0ICYgSFRNTEVsZW1lbnR9IGZvcm1Db250cm9sXG4gICAqL1xuICAvLyBAdHMtaWdub3JlIFthbGxvdy1wcm90ZWN0ZWRdIHdlIGFyZSBhbGxvd2VkIHRvIGtub3cgRm9ybUNvbnRyb2wgcHJvdGNlY3RlZCBwcm9wcyBpbiBmb3JtLWNvcmVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgb25Gb3JtQ29udHJvbERpc2Nvbm5lY3QoeyBfaW5wdXROb2RlOiBpbnB1dE5vZGUgfSkge1xuICAgIGlmIChpbnB1dE5vZGUpIHtcbiAgICAgIGlucHV0Tm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtcmVxdWlyZWQnKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMsIGNhbWVsY2FzZSwgbm8tcGFyYW0tcmVhc3NpZ24sIG1heC1jbGFzc2VzLXBlci1maWxlICovXG5pbXBvcnQgeyBkZWR1cGVNaXhpbiwgU2NvcGVkRWxlbWVudHNNaXhpbiwgU2xvdE1peGluLCBEaXNhYmxlZE1peGluIH0gZnJvbSAnQGxpb24vY29yZSc7XG4vLyBUT0RPOiBtYWtlIGZvcm0tY29yZSBpbmRlcGVuZGVudCBmcm9tIGxvY2FsaXplXG5pbXBvcnQgeyBsb2NhbGl6ZSB9IGZyb20gJ0BsaW9uL2xvY2FsaXplJztcbmltcG9ydCB7IEFzeW5jUXVldWUgfSBmcm9tICcuLi91dGlscy9Bc3luY1F1ZXVlLmpzJztcbmltcG9ydCB7IHBhc2NhbENhc2UgfSBmcm9tICcuLi91dGlscy9wYXNjYWxDYXNlLmpzJztcbmltcG9ydCB7IFN5bmNVcGRhdGFibGVNaXhpbiB9IGZyb20gJy4uL3V0aWxzL1N5bmNVcGRhdGFibGVNaXhpbi5qcyc7XG5pbXBvcnQgeyBMaW9uVmFsaWRhdGlvbkZlZWRiYWNrIH0gZnJvbSAnLi9MaW9uVmFsaWRhdGlvbkZlZWRiYWNrLmpzJztcbmltcG9ydCB7IFJlc3VsdFZhbGlkYXRvciB9IGZyb20gJy4vUmVzdWx0VmFsaWRhdG9yLmpzJztcbmltcG9ydCB7IFVucGFyc2VhYmxlIH0gZnJvbSAnLi9VbnBhcnNlYWJsZS5qcyc7XG5pbXBvcnQgeyBWYWxpZGF0b3IgfSBmcm9tICcuL1ZhbGlkYXRvci5qcyc7XG5pbXBvcnQgeyBSZXF1aXJlZCB9IGZyb20gJy4vdmFsaWRhdG9ycy9SZXF1aXJlZC5qcyc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbE1peGluIH0gZnJvbSAnLi4vRm9ybUNvbnRyb2xNaXhpbi5qcyc7XG5cbi8vIFRPRE86IFt2MV0gbWFrZSBhbGwgQHJlYWRPbmx5ID0+IEByZWFkb25seSBhbmQgYWN0dWFsbHkgbWFrZSBzdXJlIHRob3NlIHZhbHVlcyBjYW5ub3QgYmUgc2V0XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvdmFsaWRhdGUvVmFsaWRhdGVNaXhpblR5cGVzJykuVmFsaWRhdGVNaXhpbn0gVmFsaWRhdGVNaXhpblxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvdmFsaWRhdGUvVmFsaWRhdGVNaXhpblR5cGVzJykuVmFsaWRhdGlvblR5cGV9IFZhbGlkYXRpb25UeXBlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy92YWxpZGF0ZS9WYWxpZGF0ZU1peGluVHlwZXMnKS5WYWxpZGF0ZUhvc3R9IFZhbGlkYXRlSG9zdFxuICogQHR5cGVkZWYge3R5cGVvZiBpbXBvcnQoJy4uLy4uL3R5cGVzL3ZhbGlkYXRlL1ZhbGlkYXRlTWl4aW5UeXBlcycpLlZhbGlkYXRlSG9zdH0gVmFsaWRhdGVIb3N0Q29uc3RydWN0b3JcbiAqIEB0eXBlZGVmIHt7dmFsaWRhdG9yOlZhbGlkYXRvcjsgb3V0Y29tZTpib29sZWFufHN0cmluZ319IFZhbGlkYXRpb25SZXN1bHRFbnRyeVxuICogQHR5cGVkZWYge3tbdHlwZTpzdHJpbmddOiB7W3ZhbGlkYXRvck5hbWU6c3RyaW5nXTpib29sZWFufHN0cmluZ319fSBWYWxpZGF0aW9uU3RhdGVzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge2FueVtdfSBhcnJheTFcbiAqIEBwYXJhbSB7YW55W119IGFycmF5MlxuICovXG5mdW5jdGlvbiBhcnJheURpZmYoYXJyYXkxID0gW10sIGFycmF5MiA9IFtdKSB7XG4gIHJldHVybiBhcnJheTEuZmlsdGVyKHggPT4gIWFycmF5Mi5pbmNsdWRlcyh4KSkuY29uY2F0KGFycmF5Mi5maWx0ZXIoeCA9PiAhYXJyYXkxLmluY2x1ZGVzKHgpKSk7XG59XG5cbi8qKlxuICogSGFuZGxlcyBhbGwgdmFsaWRhdGlvbiwgYmFzZWQgb24gbW9kZWxWYWx1ZSBjaGFuZ2VzLiBJdCBoYXMgbm8ga25vd2xlZGdlIGFib3V0IGRvbSBhbmRcbiAqIFVJLiBBbGwgZXJyb3IgdmlzaWJpbGl0eSwgZG9tIGludGVyYWN0aW9uIGFuZCBhY2Nlc3NpYmlsaXR5IGFyZSBoYW5kbGVkIGluIEZlZWRiYWNrTWl4aW4uXG4gKlxuICogQHR5cGUge1ZhbGlkYXRlTWl4aW59XG4gKiBAcGFyYW0ge2ltcG9ydCgnQG9wZW4td2MvZGVkdXBlLW1peGluJykuQ29uc3RydWN0b3I8aW1wb3J0KCdAbGlvbi9jb3JlJykuTGl0RWxlbWVudD59IHN1cGVyY2xhc3NcbiAqL1xuZXhwb3J0IGNvbnN0IFZhbGlkYXRlTWl4aW5JbXBsZW1lbnRhdGlvbiA9IHN1cGVyY2xhc3MgPT5cbiAgLy8gQHRzLWlnbm9yZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzM2ODIxI2lzc3VlY29tbWVudC01ODgzNzUwNTFcbiAgY2xhc3MgZXh0ZW5kcyBGb3JtQ29udHJvbE1peGluKFxuICAgIFN5bmNVcGRhdGFibGVNaXhpbihEaXNhYmxlZE1peGluKFNsb3RNaXhpbihTY29wZWRFbGVtZW50c01peGluKHN1cGVyY2xhc3MpKSkpLFxuICApIHtcbiAgICBzdGF0aWMgZ2V0IHNjb3BlZEVsZW1lbnRzKCkge1xuICAgICAgY29uc3Qgc2NvcGVkRWxlbWVudHNDdG9yID1cbiAgICAgICAgLyoqIEB0eXBlIHt0eXBlb2YgaW1wb3J0KCdAb3Blbi13Yy9zY29wZWQtZWxlbWVudHMvc3JjL3R5cGVzJykuU2NvcGVkRWxlbWVudHNIb3N0fSAqLyAoXG4gICAgICAgICAgc3VwZXIuY29uc3RydWN0b3JcbiAgICAgICAgKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnNjb3BlZEVsZW1lbnRzQ3Rvci5zY29wZWRFbGVtZW50cyxcbiAgICAgICAgJ2xpb24tdmFsaWRhdGlvbi1mZWVkYmFjayc6IExpb25WYWxpZGF0aW9uRmVlZGJhY2ssXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7YW55fSAqL1xuICAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbGlkYXRvcnM6IHsgYXR0cmlidXRlOiBmYWxzZSB9LFxuICAgICAgICBoYXNGZWVkYmFja0ZvcjogeyBhdHRyaWJ1dGU6IGZhbHNlIH0sXG4gICAgICAgIHNob3VsZFNob3dGZWVkYmFja0ZvcjogeyBhdHRyaWJ1dGU6IGZhbHNlIH0sXG4gICAgICAgIHNob3dzRmVlZGJhY2tGb3I6IHtcbiAgICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgICBhdHRyaWJ1dGU6ICdzaG93cy1mZWVkYmFjay1mb3InLFxuICAgICAgICAgIHJlZmxlY3Q6IHRydWUsXG4gICAgICAgICAgY29udmVydGVyOiB7XG4gICAgICAgICAgICBmcm9tQXR0cmlidXRlOiAvKiogQHBhcmFtIHtzdHJpbmd9IHZhbHVlICovIHZhbHVlID0+IHZhbHVlLnNwbGl0KCcsJyksXG4gICAgICAgICAgICB0b0F0dHJpYnV0ZTogLyoqIEBwYXJhbSB7W119IHZhbHVlICovIHZhbHVlID0+IHZhbHVlLmpvaW4oJywnKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0aW9uU3RhdGVzOiB7IGF0dHJpYnV0ZTogZmFsc2UgfSxcbiAgICAgICAgaXNQZW5kaW5nOiB7XG4gICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICBhdHRyaWJ1dGU6ICdpcy1wZW5kaW5nJyxcbiAgICAgICAgICByZWZsZWN0OiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0VmFsaWRhdG9yczogeyBhdHRyaWJ1dGU6IGZhbHNlIH0sXG4gICAgICAgIF92aXNpYmxlTWVzc2FnZXNBbW91bnQ6IHsgYXR0cmlidXRlOiBmYWxzZSB9LFxuICAgICAgICBfX2NoaWxkTW9kZWxWYWx1ZUNoYW5nZWQ6IHsgYXR0cmlidXRlOiBmYWxzZSB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUeXBlcyBvZiB2YWxpZGF0aW9uIHN1cHBvcnRlZCBieSB0aGlzIEZvcm1Db250cm9sIChmb3IgaW5zdGFuY2UgJ2Vycm9yJ3wnd2FybmluZyd8J2luZm8nKVxuICAgICAqIEBvdmVycmlkYWJsZVxuICAgICAqIEB0eXBlIHtWYWxpZGF0aW9uVHlwZVtdfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgdmFsaWRhdGlvblR5cGVzKCkge1xuICAgICAgcmV0dXJuIFsnZXJyb3InXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAb3ZlcnJpZGFibGVcbiAgICAgKiBBZGRzIFwiLl9mZWVkYmFja05vZGVcIiBhcyBkZXNjcmliZWQgYmVsb3dcbiAgICAgKi9cbiAgICBnZXQgc2xvdHMoKSB7XG4gICAgICAvKipcbiAgICAgICAqIEZJWE1FOiBVZ2x5IHdvcmthcm91bmQgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy80MDExMFxuICAgICAgICogQGNhbGxiYWNrIGdldFNjb3BlZFRhZ05hbWVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAgICpcbiAgICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFNjb3BlZEVsZW1lbnRzT2JqXG4gICAgICAgKiBAcHJvcGVydHkge2dldFNjb3BlZFRhZ05hbWV9IGdldFNjb3BlZFRhZ05hbWVcbiAgICAgICAqL1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3VwZXIuc2xvdHMsXG4gICAgICAgIGZlZWRiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgZmVlZGJhY2tFbCA9IHRoaXMuY3JlYXRlU2NvcGVkRWxlbWVudCgnbGlvbi12YWxpZGF0aW9uLWZlZWRiYWNrJyk7XG4gICAgICAgICAgZmVlZGJhY2tFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFnLW5hbWUnLCAnbGlvbi12YWxpZGF0aW9uLWZlZWRiYWNrJyk7XG4gICAgICAgICAgcmV0dXJuIGZlZWRiYWNrRWw7XG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbWJpbmF0aW9uIG9mIHZhbGlkYXRvcnMgcHJvdmlkZWQgYnkgQXBwbGljYXRpb24gRGV2ZWxvcGVyIGFuZCB0aGUgZGVmYXVsdCB2YWxpZGF0b3JzXG4gICAgICogQHR5cGUge1ZhbGlkYXRvcltdfVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBnZXQgX2FsbFZhbGlkYXRvcnMoKSB7XG4gICAgICByZXR1cm4gWy4uLnRoaXMudmFsaWRhdG9ycywgLi4udGhpcy5kZWZhdWx0VmFsaWRhdG9yc107XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEFzIHNvb24gYXMgdmFsaWRhdGlvbiBoYXBwZW5zIChhZnRlciBtb2RlbFZhbHVlL3ZhbGlkYXRvcnMvdmFsaWRhdG9yIHBhcmFtIGNoYW5nZSksIHRoaXNcbiAgICAgICAqIGFycmF5IGlzIHVwZGF0ZWQgd2l0aCB0aGUgYWN0aXZlIFZhbGlkYXRpb25UeXBlcyAoJ2Vycm9yJ3wnd2FybmluZyd8J3N1Y2Nlc3MnfCdpbmZvJyBldGMuKS5cbiAgICAgICAqIE5vdGljZSB0aGUgZGlmZmVyZW5jZSB3aXRoIGAuc2hvd3NGZWVkYmFja0ZvcmAsIHdoaWNoIGZpbHRlcnMgYC5oYXNGZWVkYmFja0ZvcmAgYmFzZWQgb25cbiAgICAgICAqIGAuZmVlZGJhY2tDb25kaXRpb24oKWAuXG4gICAgICAgKlxuICAgICAgICogRm9yIHN0eWxpbmcgcHVycG9zZXMsIHdpbGwgYmUgcmVmbGVjdGVkIHRvIFtoYXMtZmVlZGJhY2stZm9yPVwiZXJyb3Igd2FybmluZ1wiXS4gVGhpcyBjYW5cbiAgICAgICAqIGJlIHVzZWZ1bCBmb3Igc3VidGxlIHZpc3VhbCBmZWVkYmFjayBvbiBrZXl1cCwgbGlrZSBhIHJlZC9ncmVlbiBib3JkZXIgYXJvdW5kIGFuIGlucHV0LlxuICAgICAgICpcbiAgICAgICAqIEBleGFtcGxlXG4gICAgICAgKiBgYGBjc3NcbiAgICAgICAqIDpob3N0KFtoYXMtZmVlZGJhY2stZm9yfj1cImVycm9yXCJdKSAuaW5wdXQtZ3JvdXBfX2NvbnRhaW5lciB7XG4gICAgICAgKiAgIGJvcmRlcjogMXB4IHNvbGlkIHJlZDtcbiAgICAgICAqIH1cbiAgICAgICAqIGBgYFxuICAgICAgICogQHR5cGUge1ZhbGlkYXRpb25UeXBlW119XG4gICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAqL1xuICAgICAgdGhpcy5oYXNGZWVkYmFja0ZvciA9IFtdO1xuXG4gICAgICAvKipcbiAgICAgICAqIEJhc2VkIG9uIG91dGNvbWUgb2YgZmVlZGJhY2tDb25kaXRpb24sIHRoaXMgYXJyYXkgZGVjaWRlcyB3aGF0IFZhbGlkYXRpb25UeXBlcyBzaG91bGQgYmVcbiAgICAgICAqIHNob3duIGluIHZhbGlkYXRpb25GZWVkYmFjaywgYmFzZWQgb24gbWV0YSBkYXRhIGxpa2UgaW50ZXJhY3Rpb24gc3RhdGVzLlxuICAgICAgICpcbiAgICAgICAqIEZvciBzdHlsaW5nIHB1cnBvc2VzLCBpdCByZWZsZWN0cyBpdCBgW3Nob3dzLWZlZWRiYWNrLWZvcj1cImVycm9yIHdhcm5pbmdcIl1gXG4gICAgICAgKiBAdHlwZSB7VmFsaWRhdGlvblR5cGVbXX1cbiAgICAgICAqIEByZWFkT25seVxuICAgICAgICogQGV4YW1wbGVcbiAgICAgICAqIGBgYGNzc1xuICAgICAgICogOmhvc3QoW3Nob3dzLWZlZWRiYWNrLWZvcn49XCJzdWNjZXNzXCJdKSAuZm9ybS1maWVsZF9fZmVlZGJhY2sge1xuICAgICAgICogICB0cmFuc2Zvcm06IHNjYWxlWSgxKTtcbiAgICAgICAqIH1cbiAgICAgICAqIGBgYFxuICAgICAgICovXG4gICAgICB0aGlzLnNob3dzRmVlZGJhY2tGb3IgPSBbXTtcblxuICAgICAgLy8gVE9ETzogW3YxXSBtYWtlIHRoaXMgZnVsbHkgcHJpdmF0ZSAocHJlZml4IF9fKT9cbiAgICAgIC8qKlxuICAgICAgICogQSB0ZW1wb3Jhcnkgc3RvcmFnZSB0byB0cmFuc2l0aW9uIGZyb20gaGFzRmVlZGJhY2tGb3IgdG8gc2hvd3NGZWVkYmFja0ZvclxuICAgICAgICogQHR5cGUge1ZhbGlkYXRpb25UeXBlW119XG4gICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKi9cbiAgICAgIHRoaXMuc2hvdWxkU2hvd0ZlZWRiYWNrRm9yID0gW107XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG91dGNvbWUgb2YgYSB2YWxpZGF0aW9uICdyb3VuZCcuIEtleWVkIGJ5IFZhbGlkYXRpb25UeXBlIGFuZCBWYWxpZGF0b3IgbmFtZVxuICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgKiBAdHlwZSB7VmFsaWRhdGlvblN0YXRlc31cbiAgICAgICAqL1xuICAgICAgdGhpcy52YWxpZGF0aW9uU3RhdGVzID0ge307XG5cbiAgICAgIC8qKlxuICAgICAgICogRmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgYXN5bmMgdmFsaWRhdGlvbiBpcyBwZW5kaW5nLlxuICAgICAgICogQ3JlYXRlcyBhdHRyaWJ1dGUgW2lzLXBlbmRpbmddIGFzIGEgc3R5bGluZyBob29rXG4gICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgdGhpcy5pc1BlbmRpbmcgPSBmYWxzZTtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIGJ5IEFwcGxpY2F0aW9uIERldmVsb3BlcnMgdG8gYWRkIFZhbGlkYXRvcnMgdG8gYSBGb3JtQ29udHJvbC5cbiAgICAgICAqIEBleGFtcGxlXG4gICAgICAgKiBgYGBodG1sXG4gICAgICAgKiA8Zm9ybS1jb250cm9sIC52YWxpZGF0b3JzPVwiJHtbbmV3IFJlcXVpcmVkKCksIG5ldyBNaW5MZW5ndGgoNCwge3R5cGU6ICd3YXJuaW5nJ30pXX1cIj5cbiAgICAgICAqIDwvZm9ybS1jb250cm9sPlxuICAgICAgICogYGBgXG4gICAgICAgKiBAdHlwZSB7VmFsaWRhdG9yW119XG4gICAgICAgKi9cbiAgICAgIHRoaXMudmFsaWRhdG9ycyA9IFtdO1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgYnkgU3ViY2xhc3NlcnMgdG8gYWRkIGRlZmF1bHQgVmFsaWRhdG9ycyB0byBhIHBhcnRpY3VsYXIgRm9ybUNvbnRyb2wuXG4gICAgICAgKiBBIGRhdGUgaW5wdXQgZm9yIGluc3RhbmNlLCBhbHdheXMgbmVlZHMgdGhlIGlzRGF0ZSB2YWxpZGF0b3IuXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAqIHRoaXMuZGVmYXVsdFZhbGlkYXRvcnMucHVzaChuZXcgSXNEYXRlKCkpO1xuICAgICAgICogYGBgXG4gICAgICAgKiBAdHlwZSB7VmFsaWRhdG9yW119XG4gICAgICAgKi9cbiAgICAgIHRoaXMuZGVmYXVsdFZhbGlkYXRvcnMgPSBbXTtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgYW1vdW50IG9mIGZlZWRiYWNrIG1lc3NhZ2VzIHRoYXQgd2lsbCB2aXNpYmxlIGluIExpb25WYWxpZGF0aW9uRmVlZGJhY2tcbiAgICAgICAqIEBjb25maWd1cmFibGVcbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgdGhpcy5fdmlzaWJsZU1lc3NhZ2VzQW1vdW50ID0gMTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7VmFsaWRhdGlvblJlc3VsdEVudHJ5W119XG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICovXG4gICAgICB0aGlzLl9fc3luY1ZhbGlkYXRpb25SZXN1bHQgPSBbXTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7VmFsaWRhdGlvblJlc3VsdEVudHJ5W119XG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICovXG4gICAgICB0aGlzLl9fYXN5bmNWYWxpZGF0aW9uUmVzdWx0ID0gW107XG5cbiAgICAgIC8qKlxuICAgICAgICogQWdncmVnYXRlZCByZXN1bHQgZnJvbSBzeW5jIFZhbGlkYXRvcnMsIGFzeW5jIFZhbGlkYXRvcnMgYW5kIFJlc3VsdFZhbGlkYXRvcnNcbiAgICAgICAqIEB0eXBlIHtWYWxpZGF0aW9uUmVzdWx0RW50cnlbXX1cbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKi9cbiAgICAgIHRoaXMuX192YWxpZGF0aW9uUmVzdWx0ID0gW107XG5cbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge1ZhbGlkYXRpb25SZXN1bHRFbnRyeVtdfVxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqL1xuICAgICAgdGhpcy5fX3ByZXZWYWxpZGF0aW9uUmVzdWx0ID0gW107XG5cbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge1ZhbGlkYXRpb25SZXN1bHRFbnRyeVtdfVxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqL1xuICAgICAgdGhpcy5fX3ByZXZTaG93blZhbGlkYXRpb25SZXN1bHQgPSBbXTtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdXBkYXRlZCBjaGlsZHJlbiB2YWxpZGl0eSBhZmZlY3RzIHRoZSB2YWxpZGl0eSBvZiB0aGUgcGFyZW50LiBIZWxwZXIgdG8gcmVjb21wdXRlXG4gICAgICAgKiB2YWxpZGl0eSBvZiBwYXJlbnQgRm9ybUdyb3VwXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICovXG4gICAgICB0aGlzLl9fY2hpbGRNb2RlbFZhbHVlQ2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICAvKiogQHByb3RlY3RlZCAqL1xuICAgICAgdGhpcy5fb25WYWxpZGF0b3JVcGRhdGVkID0gdGhpcy5fb25WYWxpZGF0b3JVcGRhdGVkLmJpbmQodGhpcyk7XG4gICAgICAvKiogQHByb3RlY3RlZCAqL1xuICAgICAgdGhpcy5fdXBkYXRlRmVlZGJhY2tDb21wb25lbnQgPSB0aGlzLl91cGRhdGVGZWVkYmFja0NvbXBvbmVudC5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgIGxvY2FsaXplLmFkZEV2ZW50TGlzdGVuZXIoJ2xvY2FsZUNoYW5nZWQnLCB0aGlzLl91cGRhdGVGZWVkYmFja0NvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgbG9jYWxpemUucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9jYWxlQ2hhbmdlZCcsIHRoaXMuX3VwZGF0ZUZlZWRiYWNrQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnQGxpb24vY29yZScpLlByb3BlcnR5VmFsdWVzfSBjaGFuZ2VkUHJvcGVydGllc1xuICAgICAqL1xuICAgIGZpcnN0VXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcykge1xuICAgICAgc3VwZXIuZmlyc3RVcGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICAgIHRoaXMuX192YWxpZGF0ZUluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIHRoaXMudmFsaWRhdGUoKTtcbiAgICAgIGlmICh0aGlzLl9yZXByb3BhZ2F0aW9uUm9sZSAhPT0gJ2NoaWxkJykge1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ21vZGVsLXZhbHVlLWNoYW5nZWQnLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fX2NoaWxkTW9kZWxWYWx1ZUNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gb2xkVmFsdWVcbiAgICAgKi9cbiAgICB1cGRhdGVTeW5jKG5hbWUsIG9sZFZhbHVlKSB7XG4gICAgICBzdXBlci51cGRhdGVTeW5jKG5hbWUsIG9sZFZhbHVlKTtcbiAgICAgIGlmIChuYW1lID09PSAndmFsaWRhdG9ycycpIHtcbiAgICAgICAgLy8gdHJpZ2dlciB2YWxpZGF0aW9uIChpZGVhbGx5IG9ubHkgZm9yIHRoZSBuZXcgb3IgY2hhbmdlZCB2YWxpZGF0b3IpXG4gICAgICAgIHRoaXMuX19zZXR1cFZhbGlkYXRvcnMoKTtcbiAgICAgICAgdGhpcy52YWxpZGF0ZSh7IGNsZWFyQ3VycmVudFJlc3VsdDogdHJ1ZSB9KTtcbiAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ21vZGVsVmFsdWUnKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGUoeyBjbGVhckN1cnJlbnRSZXN1bHQ6IHRydWUgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgW1xuICAgICAgICAgICd0b3VjaGVkJyxcbiAgICAgICAgICAnZGlydHknLFxuICAgICAgICAgICdwcmVmaWxsZWQnLFxuICAgICAgICAgICdmb2N1c2VkJyxcbiAgICAgICAgICAnc3VibWl0dGVkJyxcbiAgICAgICAgICAnaGFzRmVlZGJhY2tGb3InLFxuICAgICAgICAgICdmaWxsZWQnLFxuICAgICAgICBdLmluY2x1ZGVzKG5hbWUpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2hvdWxkU2hvd0ZlZWRiYWNrRm9yKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lID09PSAnc2hvd3NGZWVkYmFja0ZvcicpIHtcbiAgICAgICAgLy8gVGhpcyBjYW4ndCBiZSByZWZsZWN0ZWQgYXN5bmNocm9ub3VzbHkgaW4gU2FmYXJpXG4gICAgICAgIC8vIFNjcmVlbiByZWFkZXIgb3V0cHV0IHNob3VsZCBiZSBpbiBzeW5jIHdpdGggdmlzaWJpbGl0eSBvZiBlcnJvciBtZXNzYWdlc1xuICAgICAgICBpZiAodGhpcy5faW5wdXROb2RlKSB7XG4gICAgICAgICAgdGhpcy5faW5wdXROb2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1pbnZhbGlkJywgYCR7dGhpcy5faGFzRmVlZGJhY2tWaXNpYmxlRm9yKCdlcnJvcicpfWApO1xuICAgICAgICAgIC8vIHRoaXMuX2lucHV0Tm9kZS5zZXRDdXN0b21WYWxpZGl0eSh0aGlzLl92YWxpZGF0aW9uTWVzc2FnZSB8fCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkaWZmID0gYXJyYXlEaWZmKHRoaXMuc2hvd3NGZWVkYmFja0Zvciwgb2xkVmFsdWUpO1xuICAgICAgICBpZiAoZGlmZi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChgc2hvd3NGZWVkYmFja0ZvckNoYW5nZWRgLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGRpZmYuZm9yRWFjaCh0eXBlID0+IHtcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICBuZXcgRXZlbnQoYHNob3dzRmVlZGJhY2tGb3Ike3Bhc2NhbENhc2UodHlwZSl9Q2hhbmdlZGAsIHsgYnViYmxlczogdHJ1ZSB9KSxcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5hbWUgPT09ICdzaG91bGRTaG93RmVlZGJhY2tGb3InKSB7XG4gICAgICAgIGNvbnN0IGRpZmYgPSBhcnJheURpZmYodGhpcy5zaG91bGRTaG93RmVlZGJhY2tGb3IsIG9sZFZhbHVlKTtcbiAgICAgICAgaWYgKGRpZmYubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoYHNob3VsZFNob3dGZWVkYmFja0ZvckNoYW5nZWRgLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGJ5OlxuICAgICAqICAtIG1vZGVsVmFsdWUgY2hhbmdlXG4gICAgICogIC0gY2hhbmdlIGluIHRoZSAndmFsaWRhdG9ycycgYXJyYXlcbiAgICAgKiAgLSBjaGFuZ2UgaW4gdGhlIGNvbmZpZyBvZiBhbiBpbmRpdmlkdWFsIFZhbGlkYXRvclxuICAgICAqXG4gICAgICogVGhyZWUgc2l0dWF0aW9ucyBhcmUgaGFuZGxlZDpcbiAgICAgKiAtIGExKSB0aGUgRm9ybUNvbnRyb2wgaXMgZW1wdHk6IGZ1cnRoZXIgZXhlY3V0aW9uIGlzIGhhbHRlZC4gV2hlbiB0aGUgUmVxdWlyZWQgVmFsaWRhdG9yXG4gICAgICogKGJlaW5nIG11dHVhbGx5IGV4Y2x1c2l2ZSB0byB0aGUgb3RoZXIgVmFsaWRhdG9ycykgaXMgYXBwbGllZCwgaXQgd2lsbCBlbmQgdXAgaW4gdGhlXG4gICAgICogdmFsaWRhdGlvbiByZXN1bHQgKGFzIHRoZSBvbmx5IFZhbGlkYXRvciwgc2luY2UgZnVydGhlciBleGVjdXRpb24gd2FzIGhhbHRlZCkuXG4gICAgICogLSBhMikgdGhlcmUgYXJlIHN5bmNocm9ub3VzIFZhbGlkYXRvcnM6IHRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGZsb3cuIFdoZW4gbW9kZWxWYWx1ZSBoYXNuJ3RcbiAgICAgKiBjaGFuZ2VkIHNpbmNlIGxhc3QgYXN5bmMgcmVzdWx0cyB3ZXJlIGdlbmVyYXRlZCwgJ3N5bmMgcmVzdWx0cycgYXJlIG1lcmdlZCB3aXRoIHRoZVxuICAgICAqICdhc3luYyByZXN1bHRzJy5cbiAgICAgKiAtIGEzKSB0aGVyZSBhcmUgYXN5bmNocm9ub3VzIFZhbGlkYXRvcnM6IGZvciBpbnN0YW5jZSB3aGVuIHNlcnZlciBzaWRlIGV2YWx1YXRpb24gaXMgbmVlZGVkLlxuICAgICAqIEV4ZWN1dGlvbnMgYXJlIHNjaGVkdWxlZCBhbmQgYXdhaXRlZCBhbmQgdGhlICdhc3luYyByZXN1bHRzJyBhcmUgbWVyZ2VkIHdpdGggdGhlXG4gICAgICogJ3N5bmMgcmVzdWx0cycuXG4gICAgICpcbiAgICAgKiAtIGIpIHRoZXJlIGFyZSBSZXN1bHRWYWxpZGF0b3JzLiBBZnRlciBzdGVwcyBhMSwgYTIsIG9yIGEzIGFyZSBmaW5pc2hlZCwgdGhlIGhvbGlzdGljXG4gICAgICogUmVzdWx0VmFsaWRhdG9ycyAoZXZhbHVhdGluZyB0aGUgdG90YWwgcmVzdWx0IG9mIHRoZSAncmVndWxhcicgKGExLCBhMiBhbmQgYTMpIHZhbGlkYXRvcnMpXG4gICAgICogd2lsbCBiZSBydW4uLi5cbiAgICAgKlxuICAgICAqIFNpdHVhdGlvbnMgYTIgYW5kIGEzIGFyZSBub3QgbXV0dWFsbHkgZXhjbHVzaXZlIGFuZCBjYW4gYmUgdHJpZ2dlcmVkIHdpdGhpbiBvbmUgYHZhbGlkYXRlKClgXG4gICAgICogY2FsbC4gU2l0dWF0aW9uIGIgd2lsbCBvY2N1ciBhZnRlciBldmVyeSBjYWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHt7IGNsZWFyQ3VycmVudFJlc3VsdD86IGJvb2xlYW4gfX0gW29wdHNdXG4gICAgICovXG4gICAgYXN5bmMgdmFsaWRhdGUoeyBjbGVhckN1cnJlbnRSZXN1bHQgfSA9IHt9KSB7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICB0aGlzLl9fY2xlYXJWYWxpZGF0aW9uUmVzdWx0cygpO1xuICAgICAgICB0aGlzLl9fZmluaXNoVmFsaWRhdGlvbih7IHNvdXJjZTogJ3N5bmMnLCBoYXNBc3luYzogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5fdXBkYXRlRmVlZGJhY2tDb21wb25lbnQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLl9fdmFsaWRhdGVJbml0aWFsaXplZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX19wcmV2VmFsaWRhdGlvblJlc3VsdCA9IHRoaXMuX192YWxpZGF0aW9uUmVzdWx0O1xuICAgICAgaWYgKGNsZWFyQ3VycmVudFJlc3VsdCkge1xuICAgICAgICAvLyBDbGVhciAoJ2ludmFsaWRhdGUnKSBhbGwgcGVuZGluZyBhbmQgZXhpc3RpbmcgdmFsaWRhdGlvbiByZXN1bHRzLlxuICAgICAgICAvLyBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHdlIGhhdmUgYXN5bmMgKHBlbmRpbmcpIHZhbGlkYXRvcnMgd2hvc2UgcmVzdWx0c1xuICAgICAgICAvLyBuZWVkIHRvIGJlIG1lcmdlZCB3aXRoIHRob3NlIG9mIHN5bmMgdmFsaWRhdG9ycyBhbmQgdmljZSB2ZXJzYS5cbiAgICAgICAgdGhpcy5fX2NsZWFyVmFsaWRhdGlvblJlc3VsdHMoKTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMuX19leGVjdXRlVmFsaWRhdG9ycygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBkZXNjIHN0ZXAgYTEtMyArIGIgKGFzIGV4cGxhaW5lZCBpbiBgdmFsaWRhdGUoKWApXG4gICAgICovXG4gICAgYXN5bmMgX19leGVjdXRlVmFsaWRhdG9ycygpIHtcbiAgICAgIC8qKlxuICAgICAgICogQWxsb3dzIEFwcGxpY2F0aW9uIERldmVsb3BlciB0byB3YWl0IGZvciAoYXN5bmMpIHZhbGlkYXRpb25cbiAgICAgICAqIEBleGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogYXdhaXQgZWwudmFsaWRhdGVDb21wbGV0ZTtcbiAgICAgICAqIGBgYFxuICAgICAgICogQHR5cGUge1Byb21pc2U8Ym9vbGVhbj59XG4gICAgICAgKi9cbiAgICAgIHRoaXMudmFsaWRhdGVDb21wbGV0ZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0aGlzLl9fdmFsaWRhdGVDb21wbGV0ZVJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFdoZW4gdGhlIG1vZGVsVmFsdWUgY2FuJ3QgYmUgY3JlYXRlZCBieSBGb3JtYXRNaXhpbi5wYXJzZXIsIHN0aWxsIGFsbG93IGFsbCB2YWxpZGF0b3JzXG4gICAgICAvLyB0byBnaXZlIHZhbHVhYmxlIGZlZWRiYWNrIHRvIHRoZSB1c2VyIGJhc2VkIG9uIHRoZSBjdXJyZW50IHZpZXdWYWx1ZS5cbiAgICAgIGNvbnN0IHZhbHVlID1cbiAgICAgICAgdGhpcy5tb2RlbFZhbHVlIGluc3RhbmNlb2YgVW5wYXJzZWFibGUgPyB0aGlzLm1vZGVsVmFsdWUudmlld1ZhbHVlIDogdGhpcy5tb2RlbFZhbHVlO1xuXG4gICAgICAvKiogQHR5cGUge1ZhbGlkYXRvciB8IHVuZGVmaW5lZH0gKi9cbiAgICAgIGNvbnN0IHJlcXVpcmVkVmFsaWRhdG9yID0gdGhpcy5fYWxsVmFsaWRhdG9ycy5maW5kKHYgPT4gdiBpbnN0YW5jZW9mIFJlcXVpcmVkKTtcblxuICAgICAgLyoqXG4gICAgICAgKiAxLiBIYW5kbGUgdGhlICdleGNlcHRpb25hbCcgUmVxdWlyZWQgdmFsaWRhdG9yOlxuICAgICAgICogLSB0aGUgdmFsaWRhdGl0eSBpcyBkZXBlbmRlbnQgb24gdGhlIGZvcm1Db250cm9sIHR5cGUgYW5kIHRoZXJlZm9yZSBkZXRlcm1pbmVkXG4gICAgICAgKiBieSB0aGUgZm9ybUNvbnRyb2wuX19pc0VtcHR5IG1ldGhvZC4gQmFzaWNhbGx5LCB0aGUgUmVxdWlyZWQgVmFsaWRhdG9yIGlzIGEgbWVhbnNcbiAgICAgICAqIHRvIHRyaWdnZXIgZm9ybUNvbnRyb2wuX19pc0VtcHR5LlxuICAgICAgICogLSB3aGVuIF9faXNFbXB0eSByZXR1cm5zIHRydWUsIHRoZSBpbnB1dCB3YXMgZW1wdHkuIFRoaXMgbWVhbnMgd2UgbmVlZCB0byBzdG9wXG4gICAgICAgKiB2YWxpZGF0aW9uIGhlcmUsIGJlY2F1c2UgYWxsIG90aGVyIFZhbGlkYXRvcnMnIGV4ZWN1dGUgZnVuY3Rpb25zIGFzc3VtZSB0aGVcbiAgICAgICAqIHZhbHVlIGlzIG5vdCBlbXB0eSAodGhlcmUgd291bGQgYmUgbm90aGluZyB0byB2YWxpZGF0ZSkuXG4gICAgICAgKi9cbiAgICAgIC8vIFRPRE86IFRyeSB0byByZW1vdmUgdGhpcyB3aGVuIHdlIGhhdmUgYSBzaW5nbGUgbGlvbiBmb3JtIGNvcmUgcGFja2FnZSwgYmVjYXVzZSB0aGVuIHdlIGNhblxuICAgICAgLy8gZGVwZW5kIG9uIEZvcm1Db250cm9sTWl4aW4gZGlyZWN0bHksIGFuZCBfaXNFbXB0eSB3aWxsIGFsd2F5cyBiZSBhbiBleGlzdGluZyBtZXRob2Qgb24gdGhlIHByb3RvdHlwZSB0aGVuXG4gICAgICBjb25zdCBpc0VtcHR5ID0gdGhpcy5fX2lzRW1wdHkodmFsdWUpO1xuICAgICAgaWYgKGlzRW1wdHkpIHtcbiAgICAgICAgaWYgKHJlcXVpcmVkVmFsaWRhdG9yKSB7XG4gICAgICAgICAgdGhpcy5fX3N5bmNWYWxpZGF0aW9uUmVzdWx0ID0gW3sgdmFsaWRhdG9yOiByZXF1aXJlZFZhbGlkYXRvciwgb3V0Y29tZTogdHJ1ZSB9XTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9fZmluaXNoVmFsaWRhdGlvbih7IHNvdXJjZTogJ3N5bmMnIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFNlcGFyYXRlIFZhbGlkYXRvcnMgaW4gc3luYyBhbmQgYXN5bmNcbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7VmFsaWRhdG9yW119ICovIGZpbHRlcmVkVmFsaWRhdG9ycyA9IHRoaXMuX2FsbFZhbGlkYXRvcnMuZmlsdGVyKFxuICAgICAgICAgIHYgPT4gISh2IGluc3RhbmNlb2YgUmVzdWx0VmFsaWRhdG9yKSAmJiAhKHYgaW5zdGFuY2VvZiBSZXF1aXJlZCksXG4gICAgICAgICk7XG4gICAgICBjb25zdCAvKiogQHR5cGUge1ZhbGlkYXRvcltdfSAqLyBzeW5jVmFsaWRhdG9ycyA9IGZpbHRlcmVkVmFsaWRhdG9ycy5maWx0ZXIodiA9PiB7XG4gICAgICAgICAgY29uc3QgdkN0b3IgPSAvKiogQHR5cGUge3R5cGVvZiBWYWxpZGF0b3J9ICovICh2LmNvbnN0cnVjdG9yKTtcbiAgICAgICAgICByZXR1cm4gIXZDdG9yLmFzeW5jO1xuICAgICAgICB9KTtcbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7VmFsaWRhdG9yW119ICovIGFzeW5jVmFsaWRhdG9ycyA9IGZpbHRlcmVkVmFsaWRhdG9ycy5maWx0ZXIodiA9PiB7XG4gICAgICAgICAgY29uc3QgdkN0b3IgPSAvKiogQHR5cGUge3R5cGVvZiBWYWxpZGF0b3J9ICovICh2LmNvbnN0cnVjdG9yKTtcbiAgICAgICAgICByZXR1cm4gdkN0b3IuYXN5bmM7XG4gICAgICAgIH0pO1xuXG4gICAgICAvKipcbiAgICAgICAqIDIuIFN5bmNocm9ub3VzIHZhbGlkYXRvcnNcbiAgICAgICAqL1xuICAgICAgdGhpcy5fX2V4ZWN1dGVTeW5jVmFsaWRhdG9ycyhzeW5jVmFsaWRhdG9ycywgdmFsdWUsIHtcbiAgICAgICAgaGFzQXN5bmM6IEJvb2xlYW4oYXN5bmNWYWxpZGF0b3JzLmxlbmd0aCksXG4gICAgICB9KTtcblxuICAgICAgLyoqXG4gICAgICAgKiAzLiBBc3luY2hyb25vdXMgdmFsaWRhdG9yc1xuICAgICAgICovXG4gICAgICBhd2FpdCB0aGlzLl9fZXhlY3V0ZUFzeW5jVmFsaWRhdG9ycyhhc3luY1ZhbGlkYXRvcnMsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzdGVwIGEyIChhcyBleHBsYWluZWQgaW4gYHZhbGlkYXRlKClgKTogY2FsbHMgYF9fZmluaXNoVmFsaWRhdGlvbmBcbiAgICAgKiBAcGFyYW0ge1ZhbGlkYXRvcltdfSBzeW5jVmFsaWRhdG9yc1xuICAgICAqIEBwYXJhbSB7dW5rbm93bn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge3sgaGFzQXN5bmM6IGJvb2xlYW4gfX0gb3B0c1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX19leGVjdXRlU3luY1ZhbGlkYXRvcnMoc3luY1ZhbGlkYXRvcnMsIHZhbHVlLCB7IGhhc0FzeW5jIH0pIHtcbiAgICAgIGlmIChzeW5jVmFsaWRhdG9ycy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fX3N5bmNWYWxpZGF0aW9uUmVzdWx0ID0gc3luY1ZhbGlkYXRvcnNcbiAgICAgICAgICAubWFwKHYgPT4gKHtcbiAgICAgICAgICAgIHZhbGlkYXRvcjogdixcbiAgICAgICAgICAgIG91dGNvbWU6IC8qKiBAdHlwZSB7Ym9vbGVhbnxzdHJpbmd9ICovICh2LmV4ZWN1dGUodmFsdWUsIHYucGFyYW0sIHsgbm9kZTogdGhpcyB9KSksXG4gICAgICAgICAgfSkpXG4gICAgICAgICAgLmZpbHRlcih2ID0+IEJvb2xlYW4odi5vdXRjb21lKSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9fZmluaXNoVmFsaWRhdGlvbih7IHNvdXJjZTogJ3N5bmMnLCBoYXNBc3luYyB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzdGVwIGEzIChhcyBleHBsYWluZWQgaW4gYHZhbGlkYXRlKClgKSwgY2FsbHMgX19maW5pc2hWYWxpZGF0aW9uXG4gICAgICogQHBhcmFtIHtWYWxpZGF0b3JbXX0gYXN5bmNWYWxpZGF0b3JzIGFsbCBWYWxpZGF0b3JzIGV4Y2VwdCByZXF1aXJlZCBhbmQgUmVzdWx0VmFsaWRhdG9yc1xuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGFzeW5jIF9fZXhlY3V0ZUFzeW5jVmFsaWRhdG9ycyhhc3luY1ZhbGlkYXRvcnMsIHZhbHVlKSB7XG4gICAgICBpZiAoYXN5bmNWYWxpZGF0b3JzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmlzUGVuZGluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IHJlc3VsdFByb21pc2VzID0gYXN5bmNWYWxpZGF0b3JzLm1hcCh2ID0+IHYuZXhlY3V0ZSh2YWx1ZSwgdi5wYXJhbSwgeyBub2RlOiB0aGlzIH0pKTtcbiAgICAgICAgY29uc3QgYXN5bmNFeGVjdXRpb25SZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwocmVzdWx0UHJvbWlzZXMpO1xuXG4gICAgICAgIHRoaXMuX19hc3luY1ZhbGlkYXRpb25SZXN1bHQgPSBhc3luY0V4ZWN1dGlvblJlc3VsdHNcbiAgICAgICAgICAubWFwKChyLCBpKSA9PiAoe1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBhc3luY1ZhbGlkYXRvcnNbaV0sXG4gICAgICAgICAgICBvdXRjb21lOiAvKiogQHR5cGUge2Jvb2xlYW58c3RyaW5nfSAqLyAoYXN5bmNFeGVjdXRpb25SZXN1bHRzW2ldKSxcbiAgICAgICAgICB9KSlcbiAgICAgICAgICAuZmlsdGVyKHYgPT4gQm9vbGVhbih2Lm91dGNvbWUpKTtcblxuICAgICAgICB0aGlzLl9fZmluaXNoVmFsaWRhdGlvbih7IHNvdXJjZTogJ2FzeW5jJyB9KTtcbiAgICAgICAgdGhpcy5pc1BlbmRpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzdGVwIGIgKGFzIGV4cGxhaW5lZCBpbiBgdmFsaWRhdGUoKWApLCBjYWxsZWQgYnkgX19maW5pc2hWYWxpZGF0aW9uXG4gICAgICogQHBhcmFtIHt7dmFsaWRhdG9yOiBWYWxpZGF0b3I7b3V0Y29tZTogYm9vbGVhbiB8IHN0cmluZzt9W119IHJlZ3VsYXJWYWxpZGF0aW9uUmVzdWx0IHJlc3VsdCBvZiBzdGVwcyAxLTNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9fZXhlY3V0ZVJlc3VsdFZhbGlkYXRvcnMocmVndWxhclZhbGlkYXRpb25SZXN1bHQpIHtcbiAgICAgIGNvbnN0IHJlc3VsdFZhbGlkYXRvcnMgPSAvKiogQHR5cGUge1Jlc3VsdFZhbGlkYXRvcltdfSAqLyAoXG4gICAgICAgIHRoaXMuX2FsbFZhbGlkYXRvcnMuZmlsdGVyKHYgPT4ge1xuICAgICAgICAgIGNvbnN0IHZDdG9yID0gLyoqIEB0eXBlIHt0eXBlb2YgVmFsaWRhdG9yfSAqLyAodi5jb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgcmV0dXJuICF2Q3Rvci5hc3luYyAmJiB2IGluc3RhbmNlb2YgUmVzdWx0VmFsaWRhdG9yO1xuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgaWYgKCFyZXN1bHRWYWxpZGF0b3JzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGVtcHR5LCBkbyBub3Qgc2hvdyB0aGUgUmVzdWxWYWxpZGF0aW9uIG1lc3NhZ2UgKGUuZy4gQ29ycmVjdCEpXG4gICAgICBpZiAodGhpcy5faXNFbXB0eSh0aGlzLm1vZGVsVmFsdWUpKSB7XG4gICAgICAgIHRoaXMuX19wcmV2U2hvd25WYWxpZGF0aW9uUmVzdWx0ID0gW107XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgLy8gTWFwIGV2ZXJ5dGhpbmcgdG8gVmFsaWRhdG9yW10gZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgICByZXR1cm4gcmVzdWx0VmFsaWRhdG9yc1xuICAgICAgICAubWFwKHYgPT4gKHtcbiAgICAgICAgICB2YWxpZGF0b3I6IHYsXG4gICAgICAgICAgb3V0Y29tZTogLyoqIEB0eXBlIHtib29sZWFufHN0cmluZ30gKi8gKFxuICAgICAgICAgICAgdi5leGVjdXRlT25SZXN1bHRzKHtcbiAgICAgICAgICAgICAgcmVndWxhclZhbGlkYXRpb25SZXN1bHQ6IHJlZ3VsYXJWYWxpZGF0aW9uUmVzdWx0Lm1hcChlbnRyeSA9PiBlbnRyeS52YWxpZGF0b3IpLFxuICAgICAgICAgICAgICBwcmV2VmFsaWRhdGlvblJlc3VsdDogdGhpcy5fX3ByZXZWYWxpZGF0aW9uUmVzdWx0Lm1hcChlbnRyeSA9PiBlbnRyeS52YWxpZGF0b3IpLFxuICAgICAgICAgICAgICBwcmV2U2hvd25WYWxpZGF0aW9uUmVzdWx0OiB0aGlzLl9fcHJldlNob3duVmFsaWRhdGlvblJlc3VsdC5tYXAoXG4gICAgICAgICAgICAgICAgZW50cnkgPT4gZW50cnkudmFsaWRhdG9yLFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApLFxuICAgICAgICB9KSlcbiAgICAgICAgLmZpbHRlcih2ID0+IEJvb2xlYW4odi5vdXRjb21lKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0geydzeW5jJ3wnYXN5bmMnfSBvcHRpb25zLnNvdXJjZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaGFzQXN5bmNdIHdoZXRoZXIgYXN5bmMgdmFsaWRhdG9ycyBhcmUgY29uZmlndXJlZCBpbiB0aGlzIHJ1bi5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIElmIG5vdCwgd2UgaGF2ZSBub3RoaW5nIGxlZnQgdG8gd2FpdCBmb3IuXG4gICAgICovXG4gICAgX19maW5pc2hWYWxpZGF0aW9uKHsgc291cmNlLCBoYXNBc3luYyB9KSB7XG4gICAgICBjb25zdCBzeW5jQW5kQXN5bmNPdXRjb21lID0gWy4uLnRoaXMuX19zeW5jVmFsaWRhdGlvblJlc3VsdCwgLi4udGhpcy5fX2FzeW5jVmFsaWRhdGlvblJlc3VsdF07XG4gICAgICAvLyBpZiB3ZSBoYXZlIGFueSBSZXN1bHRWYWxpZGF0b3JzIGxlZnQsIG5vdyBpcyB0aGUgdGltZSB0byBydW4gdGhlbS4uLlxuICAgICAgY29uc3QgcmVzdWx0T3V0Q29tZSA9IC8qKiBAdHlwZSB7VmFsaWRhdGlvblJlc3VsdEVudHJ5W119ICovIChcbiAgICAgICAgdGhpcy5fX2V4ZWN1dGVSZXN1bHRWYWxpZGF0b3JzKHN5bmNBbmRBc3luY091dGNvbWUpXG4gICAgICApO1xuICAgICAgdGhpcy5fX3ZhbGlkYXRpb25SZXN1bHQgPSBbLi4ucmVzdWx0T3V0Q29tZSwgLi4uc3luY0FuZEFzeW5jT3V0Y29tZV07XG5cbiAgICAgIGNvbnN0IGN0b3IgPSAvKiogQHR5cGUge1ZhbGlkYXRlSG9zdENvbnN0cnVjdG9yfSAqLyAodGhpcy5jb25zdHJ1Y3Rvcik7XG5cbiAgICAgIC8qKiBAdHlwZSB7VmFsaWRhdGlvblN0YXRlc30gKi9cbiAgICAgIGNvbnN0IHZhbGlkYXRpb25TdGF0ZXMgPSBjdG9yLnZhbGlkYXRpb25UeXBlcy5yZWR1Y2UoXG4gICAgICAgIChhY2MsIHR5cGUpID0+ICh7IC4uLmFjYywgW3R5cGVdOiB7fSB9KSxcbiAgICAgICAge30sXG4gICAgICApO1xuICAgICAgdGhpcy5fX3ZhbGlkYXRpb25SZXN1bHQuZm9yRWFjaCgoeyB2YWxpZGF0b3IsIG91dGNvbWUgfSkgPT4ge1xuICAgICAgICBpZiAoIXZhbGlkYXRpb25TdGF0ZXNbdmFsaWRhdG9yLnR5cGVdKSB7XG4gICAgICAgICAgdmFsaWRhdGlvblN0YXRlc1t2YWxpZGF0b3IudHlwZV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2Q3RvciA9IC8qKiBAdHlwZSB7dHlwZW9mIFZhbGlkYXRvcn0gKi8gKHZhbGlkYXRvci5jb25zdHJ1Y3Rvcik7XG4gICAgICAgIHZhbGlkYXRpb25TdGF0ZXNbdmFsaWRhdG9yLnR5cGVdW3ZDdG9yLnZhbGlkYXRvck5hbWVdID0gb3V0Y29tZTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy52YWxpZGF0aW9uU3RhdGVzID0gdmFsaWRhdGlvblN0YXRlcztcblxuICAgICAgdGhpcy5oYXNGZWVkYmFja0ZvciA9IFtcbiAgICAgICAgLi4ubmV3IFNldCh0aGlzLl9fdmFsaWRhdGlvblJlc3VsdC5tYXAoKHsgdmFsaWRhdG9yIH0pID0+IHZhbGlkYXRvci50eXBlKSksXG4gICAgICBdO1xuICAgICAgLyoqIHByaXZhdGUgZXZlbnQgdGhhdCBzaG91bGQgYmUgbGlzdGVuZWQgdG8gYnkgTGlvbkZpZWxkU2V0ICovXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCd2YWxpZGF0ZS1wZXJmb3JtZWQnLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xuICAgICAgaWYgKHNvdXJjZSA9PT0gJ2FzeW5jJyB8fCAhaGFzQXN5bmMpIHtcbiAgICAgICAgaWYgKHRoaXMuX192YWxpZGF0ZUNvbXBsZXRlUmVzb2x2ZSkge1xuICAgICAgICAgIHRoaXMuX192YWxpZGF0ZUNvbXBsZXRlUmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX19jbGVhclZhbGlkYXRpb25SZXN1bHRzKCkge1xuICAgICAgdGhpcy5fX3N5bmNWYWxpZGF0aW9uUmVzdWx0ID0gW107XG4gICAgICB0aGlzLl9fYXN5bmNWYWxpZGF0aW9uUmVzdWx0ID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFdmVudHxDdXN0b21FdmVudH0gZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfb25WYWxpZGF0b3JVcGRhdGVkKGUpIHtcbiAgICAgIGlmIChlLnR5cGUgPT09ICdwYXJhbS1jaGFuZ2VkJyB8fCBlLnR5cGUgPT09ICdjb25maWctY2hhbmdlZCcpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX19zZXR1cFZhbGlkYXRvcnMoKSB7XG4gICAgICBjb25zdCBldmVudHMgPSBbJ3BhcmFtLWNoYW5nZWQnLCAnY29uZmlnLWNoYW5nZWQnXTtcbiAgICAgIGlmICh0aGlzLl9fcHJldlZhbGlkYXRvcnMpIHtcbiAgICAgICAgdGhpcy5fX3ByZXZWYWxpZGF0b3JzLmZvckVhY2godiA9PiB7XG4gICAgICAgICAgZXZlbnRzLmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgICBpZiAodi5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHYucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLCB0aGlzLl9vblZhbGlkYXRvclVwZGF0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHYub25Gb3JtQ29udHJvbERpc2Nvbm5lY3QodGhpcyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWxsVmFsaWRhdG9ycy5mb3JFYWNoKHYgPT4ge1xuICAgICAgICBpZiAoISh2IGluc3RhbmNlb2YgVmFsaWRhdG9yKSkge1xuICAgICAgICAgIC8vIHRocm93cyBpbiBjb25zdHJ1Y3RvciBhcmUgbm90IHZpc2libGUgdG8gZW5kIHVzZXIgc28gd2UgZG8gYm90aFxuICAgICAgICAgIGNvbnN0IGVycm9yVHlwZSA9IEFycmF5LmlzQXJyYXkodikgPyAnYXJyYXknIDogdHlwZW9mIHY7XG4gICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYFZhbGlkYXRvcnMgYXJyYXkgb25seSBhY2NlcHRzIGNsYXNzIGluc3RhbmNlcyBvZiBWYWxpZGF0b3IuIFR5cGUgXCIke2Vycm9yVHlwZX1cIiBmb3VuZC4gVGhpcyBtYXkgYmUgY2F1c2VkIGJ5IGhhdmluZyBtdWx0aXBsZSBpbnN0YWxsYXRpb25zIG9mIEBsaW9uL2Zvcm0tY29yZS5gO1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvck1lc3NhZ2UsIHRoaXMpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN0b3IgPSAvKiogQHR5cGUge1ZhbGlkYXRlSG9zdENvbnN0cnVjdG9yfSAqLyAodGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgICAgIGlmIChjdG9yLnZhbGlkYXRpb25UeXBlcy5pbmRleE9mKHYudHlwZSkgPT09IC0xKSB7XG4gICAgICAgICAgY29uc3QgdkN0b3IgPSAvKiogQHR5cGUge3R5cGVvZiBWYWxpZGF0b3J9ICovICh2LmNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAvLyB0aHJvd3MgaW4gY29uc3RydWN0b3IgYXJlIG5vdCB2aXNpYmxlIHRvIGVuZCB1c2VyIHNvIHdlIGRvIGJvdGhcbiAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgVGhpcyBjb21wb25lbnQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgdmFsaWRhdG9yIHR5cGUgXCIke3YudHlwZX1cIiB1c2VkIGluIFwiJHt2Q3Rvci52YWxpZGF0b3JOYW1lfVwiLiBZb3UgbWF5IGNoYW5nZSB5b3VyIHZhbGlkYXRvcnMgdHlwZSBvciBhZGQgaXQgdG8gdGhlIGNvbXBvbmVudHMgXCJzdGF0aWMgZ2V0IHZhbGlkYXRpb25UeXBlcygpIHt9XCIuYDtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JNZXNzYWdlLCB0aGlzKTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICAvKiogVXBkYXRlZCB0aGUgY29kZSB0byBmaXggaXNzdWUgIzE2MDcgdG8gc3luYyB0aGUgY2FsZW5kYXIgZGF0ZSB3aXRoIHZhbGlkYXRvcnMgcGFyYW1zXG4gICAgICAgICAqICBIZXJlIF9vblZhbGlkYXRvclVwZGF0ZWQgaXMgcmVzcG9uc2libGUgZm9yIHJlc3BvbmRpbmcgdG8gdGhlIGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBldmVudHMuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgICAgIGlmICh2LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHYuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGUgPT4ge1xuICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIGZvciBtYWtpbmcgdmFsaWRhdG9yIHBhcmFtIGR5bmFtaWNcbiAgICAgICAgICAgICAgdGhpcy5fb25WYWxpZGF0b3JVcGRhdGVkKGUsIHsgdmFsaWRhdG9yOiB2IH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdi5vbkZvcm1Db250cm9sQ29ubmVjdCh0aGlzKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fX3ByZXZWYWxpZGF0b3JzID0gdGhpcy5fYWxsVmFsaWRhdG9ycztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgbWV0aG9kIGZvciB0aGUgbXV0dWFsbHkgZXhjbHVzaXZlIFJlcXVpcmVkIFZhbGlkYXRvclxuICAgICAqIEBwYXJhbSB7P30gdlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX19pc0VtcHR5KHYpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5faXNFbXB0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNFbXB0eSh2KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMubW9kZWxWYWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdGhpcy5tb2RlbFZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLm1vZGVsVmFsdWUgPT09ICcnXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIC0tIEZlZWRiYWNrIHNwZWNpZmljcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge29iamVjdH0gRmVlZGJhY2tNZXNzYWdlXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmcgfCBOb2RlfSBtZXNzYWdlIHRoaXNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSB3aWxsIGJlICdlcnJvcicgZm9yIG1lc3NhZ2VzIGZyb20gZGVmYXVsdCBWYWxpZGF0b3JzLiBDb3VsZCBiZVxuICAgICAqICd3YXJuaW5nJywgJ2luZm8nIGV0Yy4gZm9yIFZhbGlkYXRvcnMgd2l0aCBjdXN0b20gdHlwZXMuIE5lZWRlZCBhcyBhIGRpcmVjdGl2ZSBmb3JcbiAgICAgKiBmZWVkYmFja05vZGUgaG93IHRvIHJlbmRlciBhIG1lc3NhZ2Ugb2YgYSBjZXJ0YWluIHR5cGVcbiAgICAgKiBAcHJvcGVydHkge1ZhbGlkYXRvcn0gW3ZhbGlkYXRvcl0gd2hlbiB0aGUgbWVzc2FnZSBpcyBkaXJlY3RseSBjb3VwbGVkIHRvIGEgVmFsaWRhdG9yXG4gICAgICogKGluIG1vc3QgY2FzZXMpLCB0aGlzIHByb3BlcnR5IGlzIGZpbGxlZC4gV2hlbiBhIG1lc3NhZ2UgaXMgbm90IGNvdXBsZWQgdG8gYSBWYWxpZGF0b3JcbiAgICAgKiAoaW4gY2FzZSBvZiBzdWNjZXNzIGZlZWRiYWNrIHdoaWNoIGlzIGJhc2VkIG9uIGEgZGlmZiBvciBjdXJyZW50IGFuZCBwcmV2aW91cyB2YWxpZGF0aW9uXG4gICAgICogcmVzdWx0cyksIHRoaXMgcHJvcGVydHkgY2FuIGJlIGxlZnQgZW1wdHkuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1ZhbGlkYXRpb25SZXN1bHRFbnRyeVtdfSB2YWxpZGF0aW9uUmVzdWx0cyBsaXN0IG9mIG9iamVjdHMgaGF2aW5nIGEgLmdldE1lc3NhZ2UgbWV0aG9kXG4gICAgICogQHJldHVybiB7UHJvbWlzZS48RmVlZGJhY2tNZXNzYWdlW10+fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYXN5bmMgX19nZXRGZWVkYmFja01lc3NhZ2VzKHZhbGlkYXRpb25SZXN1bHRzKSB7XG4gICAgICBsZXQgZmllbGROYW1lID0gYXdhaXQgdGhpcy5maWVsZE5hbWU7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgIHZhbGlkYXRpb25SZXN1bHRzLm1hcChhc3luYyAoeyB2YWxpZGF0b3IsIG91dGNvbWUgfSkgPT4ge1xuICAgICAgICAgIGlmICh2YWxpZGF0b3IuY29uZmlnLmZpZWxkTmFtZSkge1xuICAgICAgICAgICAgZmllbGROYW1lID0gYXdhaXQgdmFsaWRhdG9yLmNvbmZpZy5maWVsZE5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEB0cy1pZ25vcmUgW2FsbG93LXByb3RlY3RlZF1cbiAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYXdhaXQgdmFsaWRhdG9yLl9nZXRNZXNzYWdlKHtcbiAgICAgICAgICAgIG1vZGVsVmFsdWU6IHRoaXMubW9kZWxWYWx1ZSxcbiAgICAgICAgICAgIGZvcm1Db250cm9sOiB0aGlzLFxuICAgICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgICAgb3V0Y29tZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4geyBtZXNzYWdlLCB0eXBlOiB2YWxpZGF0b3IudHlwZSwgdmFsaWRhdG9yIH07XG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNwb25zaWJsZSBmb3IgcmV0cmlldmluZyBtZXNzYWdlcyBmcm9tIFZhbGlkYXRvcnMgYW5kXG4gICAgICogKGRlbGVnYXRpb24gb2YpIHJlbmRlcmluZyB0aGVtLlxuICAgICAqXG4gICAgICogRm9yIGAuX2ZlZWRiYWNrTm9kZWAgKGV4dGVuc2lvbiBvZiBMaW9uVmFsaWRhdGlvbkZlZWRiYWNrKTpcbiAgICAgKiAtIHJldHJpZXZlIG1lc3NhZ2VzIGZyb20gaGlnaGVzdCBwcmlvIFZhbGlkYXRvcnNcbiAgICAgKiAtIHByb3ZpZGUgdGhlIHJlc3VsdCB0byBjdXN0b20gZmVlZGJhY2sgbm9kZSBhbmQgbGV0IHRoZVxuICAgICAqIGN1c3RvbSBub2RlIGRlY2lkZSBvbiB0aGVpciByZW5kZXJpbmdzXG4gICAgICpcbiAgICAgKiBJbiBib3RoIGNhc2VzOlxuICAgICAqIC0gd2UgY29tcHV0ZSB0aGUgJ3Nob3cnIGZsYWcgKGxpa2UgJ2hhc0Vycm9yVmlzaWJsZScpIGZvciBhbGwgdHlwZXNcbiAgICAgKiAtIHdlIHNldCB0aGUgY3VzdG9tVmFsaWRpdHkgbWVzc2FnZSBvZiB0aGUgaGlnaGVzdCBwcmlvIFZhbGlkYXRvclxuICAgICAqIC0gd2Ugc2V0IGFyaWEtaW52YWxpZD1cInRydWVcIiBpbiBjYXNlIGhhc0Vycm9yVmlzaWJsZSBpcyB0cnVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF91cGRhdGVGZWVkYmFja0NvbXBvbmVudCgpIHtcbiAgICAgIGNvbnN0IHsgX2ZlZWRiYWNrTm9kZSB9ID0gdGhpcztcbiAgICAgIGlmICghX2ZlZWRiYWNrTm9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5fX2ZlZWRiYWNrUXVldWUpIHtcbiAgICAgICAgdGhpcy5fX2ZlZWRiYWNrUXVldWUgPSBuZXcgQXN5bmNRdWV1ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zaG93c0ZlZWRiYWNrRm9yLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5fX2ZlZWRiYWNrUXVldWUuYWRkKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAvKiogQHR5cGUge1ZhbGlkYXRvcltdfSAqL1xuICAgICAgICAgIGNvbnN0IHByaW9yaXRpemVkVmFsaWRhdG9ycyA9IHRoaXMuX3ByaW9yaXRpemVBbmRGaWx0ZXJGZWVkYmFjayh7XG4gICAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0OiB0aGlzLl9fdmFsaWRhdGlvblJlc3VsdC5tYXAoZW50cnkgPT4gZW50cnkudmFsaWRhdG9yKSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRoaXMuX19wcmlvcml0aXplZFJlc3VsdCA9IHByaW9yaXRpemVkVmFsaWRhdG9yc1xuICAgICAgICAgICAgLm1hcCh2ID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZm91bmQgPSAvKiogQHR5cGUge1ZhbGlkYXRpb25SZXN1bHRFbnRyeX0gKi8gKFxuICAgICAgICAgICAgICAgIHRoaXMuX192YWxpZGF0aW9uUmVzdWx0LmZpbmQociA9PiB2ID09PSByLnZhbGlkYXRvcilcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICAgICAgICBpZiAodGhpcy5fX3ByaW9yaXRpemVkUmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX19wcmV2U2hvd25WYWxpZGF0aW9uUmVzdWx0ID0gdGhpcy5fX3ByaW9yaXRpemVkUmVzdWx0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IG1lc3NhZ2VNYXAgPSBhd2FpdCB0aGlzLl9fZ2V0RmVlZGJhY2tNZXNzYWdlcyh0aGlzLl9fcHJpb3JpdGl6ZWRSZXN1bHQpO1xuICAgICAgICAgIF9mZWVkYmFja05vZGUuZmVlZGJhY2tEYXRhID0gbWVzc2FnZU1hcC5sZW5ndGggPyBtZXNzYWdlTWFwIDogW107XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX2ZlZWRiYWNrUXVldWUuYWRkKGFzeW5jICgpID0+IHtcbiAgICAgICAgICBfZmVlZGJhY2tOb2RlLmZlZWRiYWNrRGF0YSA9IFtdO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZmVlZGJhY2tDb21wbGV0ZSA9IHRoaXMuX19mZWVkYmFja1F1ZXVlLmNvbXBsZXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgZmVlZGJhY2tDb25kaXRpb24gY29uZGl0aW9uLCB1c2VkIGJ5IFN1YmNsYXNzZXJzLCB0aGF0IHdpbGwgYmUgdXNlZCB3aGVuXG4gICAgICogYGZlZWRiYWNrQ29uZGl0aW9uKClgIGlzIG5vdCBvdmVycmlkZGVuIGJ5IEFwcGxpY2F0aW9uIERldmVsb3Blci5cbiAgICAgKiBTaG93IHRoZSB2YWxpZGl0eSBmZWVkYmFjayB3aGVuIHJldHVybmluZyB0cnVlLCBkb24ndCBzaG93IHdoZW4gZmFsc2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBjb3VsZCBiZSAnZXJyb3InLCAnd2FybmluZycsICdpbmZvJywgJ3N1Y2Nlc3MnIG9yIGFueSBvdGhlciBjdXN0b21cbiAgICAgKiBWYWxpZGF0b3IgdHlwZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhIG1ldGEgaW5mbyAoaW50ZXJhY3Rpb24gc3RhdGVzIGV0YylcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgX3Nob3dGZWVkYmFja0NvbmRpdGlvbkZvcih0eXBlLCBtZXRhKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgU3ViY2xhc3NlcnMgdG8gYWRkIG1ldGEgaW5mbyBmb3IgZmVlZGJhY2tDb25kaXRpb25cbiAgICAgKiBAY29uZmlndXJhYmxlXG4gICAgICovXG4gICAgZ2V0IF9mZWVkYmFja0NvbmRpdGlvbk1ldGEoKSB7XG4gICAgICByZXR1cm4geyBtb2RlbFZhbHVlOiB0aGlzLm1vZGVsVmFsdWUsIGVsOiB0aGlzIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRoZSBBcHBsaWNhdGlvbiBEZXZlbG9wZXIgdG8gc3BlY2lmeSB3aGVuIGEgZmVlZGJhY2sgbWVzc2FnZSBzaG91bGQgYmUgc2hvd25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGpzXG4gICAgICogZmVlZGJhY2tDb25kaXRpb24odHlwZSwgbWV0YSwgZGVmYXVsdENvbmRpdGlvbikge1xuICAgICAqICAgaWYgKHR5cGUgPT09ICdpbmZvJykge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3ByZWZpbGxlZE9ubHknKSB7XG4gICAgICogICAgIHJldHVybiBtZXRhLnByZWZpbGxlZDtcbiAgICAgKiAgIH1cbiAgICAgKiAgIHJldHVybiBkZWZhdWx0Q29uZGl0aW9uKHR5cGUsIG1ldGEpO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiBAb3ZlcnJpZGFibGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBjb3VsZCBiZSAnZXJyb3InLCAnd2FybmluZycsICdpbmZvJywgJ3N1Y2Nlc3MnIG9yIGFueSBvdGhlciBjdXN0b21cbiAgICAgKiBWYWxpZGF0b3IgdHlwZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhIG1ldGEgaW5mbyAoaW50ZXJhY3Rpb24gc3RhdGVzIGV0YylcbiAgICAgKiBAcGFyYW0geygodHlwZTogc3RyaW5nLCBtZXRhOiBvYmplY3QpID0+IGJvb2xlYW4pfSBjdXJyZW50Q29uZGl0aW9uIHRoaXMgaXMgdGhlIF9zaG93RmVlZGJhY2tDb25kaXRpb25Gb3JcbiAgICAgKiB0aGF0IGNhbiBiZSB1c2VkIGlmIGEgZGV2ZWxvcGVyIHdhbnRzIHRvIG92ZXJyaWRlIGZvciBhIGNlcnRhaW4gdHlwZSwgYnV0IHdhbnRzIHRvIGZhbGxiYWNrXG4gICAgICogZm9yIG90aGVyIHR5cGVzXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZmVlZGJhY2tDb25kaXRpb24oXG4gICAgICB0eXBlLFxuICAgICAgbWV0YSA9IHRoaXMuX2ZlZWRiYWNrQ29uZGl0aW9uTWV0YSxcbiAgICAgIGN1cnJlbnRDb25kaXRpb24gPSB0aGlzLl9zaG93RmVlZGJhY2tDb25kaXRpb25Gb3IuYmluZCh0aGlzKSxcbiAgICApIHtcbiAgICAgIHJldHVybiBjdXJyZW50Q29uZGl0aW9uKHR5cGUsIG1ldGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdHJhbnNsYXRlIGAuaGFzRmVlZGJhY2tGb3JgIGFuZCBgLnNob3VsZFNob3dGZWVkYmFja0ZvcmAgdG8gYC5zaG93c0ZlZWRiYWNrRm9yYFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9oYXNGZWVkYmFja1Zpc2libGVGb3IodHlwZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5oYXNGZWVkYmFja0ZvciAmJlxuICAgICAgICB0aGlzLmhhc0ZlZWRiYWNrRm9yLmluY2x1ZGVzKHR5cGUpICYmXG4gICAgICAgIHRoaXMuc2hvdWxkU2hvd0ZlZWRiYWNrRm9yICYmXG4gICAgICAgIHRoaXMuc2hvdWxkU2hvd0ZlZWRiYWNrRm9yLmluY2x1ZGVzKHR5cGUpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCdAbGlvbi9jb3JlJykuUHJvcGVydHlWYWx1ZXN9IGNoYW5nZWRQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgdXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcykge1xuICAgICAgc3VwZXIudXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgY2hhbmdlZFByb3BlcnRpZXMuaGFzKCdzaG91bGRTaG93RmVlZGJhY2tGb3InKSB8fFxuICAgICAgICBjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ2hhc0ZlZWRiYWNrRm9yJylcbiAgICAgICkge1xuICAgICAgICBjb25zdCBjdG9yID0gLyoqIEB0eXBlIHtWYWxpZGF0ZUhvc3RDb25zdHJ1Y3Rvcn0gKi8gKHRoaXMuY29uc3RydWN0b3IpO1xuICAgICAgICAvLyBOZWNlc3NhcnkgdHlwZWNhc3QgYmVjYXVzZSB0eXBlcyBhcmVuJ3Qgc21hcnQgZW5vdWdoIHRvIHVuZGVyc3RhbmQgdGhhdCB3ZSBmaWx0ZXIgb3V0IHVuZGVmaW5lZFxuICAgICAgICB0aGlzLnNob3dzRmVlZGJhY2tGb3IgPSAvKiogQHR5cGUge3N0cmluZ1tdfSAqLyAoXG4gICAgICAgICAgY3Rvci52YWxpZGF0aW9uVHlwZXNcbiAgICAgICAgICAgIC5tYXAodHlwZSA9PiAodGhpcy5faGFzRmVlZGJhY2tWaXNpYmxlRm9yKHR5cGUpID8gdHlwZSA6IHVuZGVmaW5lZCkpXG4gICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUZlZWRiYWNrQ29tcG9uZW50KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ19fY2hpbGRNb2RlbFZhbHVlQ2hhbmdlZCcpICYmIHRoaXMuX19jaGlsZE1vZGVsVmFsdWVDaGFuZ2VkKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGUoeyBjbGVhckN1cnJlbnRSZXN1bHQ6IHRydWUgfSk7XG4gICAgICAgIHRoaXMuX19jaGlsZE1vZGVsVmFsdWVDaGFuZ2VkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ3ZhbGlkYXRpb25TdGF0ZXMnKSkge1xuICAgICAgICBjb25zdCBwcmV2U3RhdGVzID0gLyoqIEB0eXBlIHt7W2tleTogc3RyaW5nXTogb2JqZWN0O319ICovIChcbiAgICAgICAgICBjaGFuZ2VkUHJvcGVydGllcy5nZXQoJ3ZhbGlkYXRpb25TdGF0ZXMnKVxuICAgICAgICApO1xuICAgICAgICBpZiAocHJldlN0YXRlcykge1xuICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMudmFsaWRhdGlvblN0YXRlcykuZm9yRWFjaCgoW3R5cGUsIGZlZWRiYWNrT2JqXSkgPT4ge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBwcmV2U3RhdGVzW3R5cGVdICYmXG4gICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGZlZWRiYWNrT2JqKSAhPT0gSlNPTi5zdHJpbmdpZnkocHJldlN0YXRlc1t0eXBlXSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGAke3R5cGV9U3RhdGVDaGFuZ2VkYCwgeyBkZXRhaWw6IGZlZWRiYWNrT2JqIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfdXBkYXRlU2hvdWxkU2hvd0ZlZWRiYWNrRm9yKCkge1xuICAgICAgY29uc3QgY3RvciA9IC8qKiBAdHlwZSB7VmFsaWRhdGVIb3N0Q29uc3RydWN0b3J9ICovICh0aGlzLmNvbnN0cnVjdG9yKTtcblxuICAgICAgLy8gTmVjZXNzYXJ5IHR5cGVjYXN0IGJlY2F1c2UgdHlwZXMgYXJlbid0IHNtYXJ0IGVub3VnaCB0byB1bmRlcnN0YW5kIHRoYXQgd2UgZmlsdGVyIG91dCB1bmRlZmluZWRcbiAgICAgIGNvbnN0IG5ld1Nob3VsZFNob3dGZWVkYmFja0ZvciA9IC8qKiBAdHlwZSB7c3RyaW5nW119ICovIChcbiAgICAgICAgY3Rvci52YWxpZGF0aW9uVHlwZXNcbiAgICAgICAgICAubWFwKHR5cGUgPT5cbiAgICAgICAgICAgIHRoaXMuZmVlZGJhY2tDb25kaXRpb24oXG4gICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgIHRoaXMuX2ZlZWRiYWNrQ29uZGl0aW9uTWV0YSxcbiAgICAgICAgICAgICAgdGhpcy5fc2hvd0ZlZWRiYWNrQ29uZGl0aW9uRm9yLmJpbmQodGhpcyksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgID8gdHlwZVxuICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICApXG4gICAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgKTtcblxuICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KHRoaXMuc2hvdWxkU2hvd0ZlZWRiYWNrRm9yKSAhPT0gSlNPTi5zdHJpbmdpZnkobmV3U2hvdWxkU2hvd0ZlZWRiYWNrRm9yKSkge1xuICAgICAgICB0aGlzLnNob3VsZFNob3dGZWVkYmFja0ZvciA9IG5ld1Nob3VsZFNob3dGZWVkYmFja0ZvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcmRlcnMgYWxsIGFjdGl2ZSB2YWxpZGF0b3JzIGluIHRoaXMuX192YWxpZGF0aW9uUmVzdWx0LlxuICAgICAqIENhbiBhbHNvIGZpbHRlciBvdXQgb2NjdXJyZW5jZXMgKGJhc2VkIG9uIGludGVyYWN0aW9uIHN0YXRlcylcbiAgICAgKiBAb3ZlcnJpZGFibGVcbiAgICAgKiBAcGFyYW0ge3sgdmFsaWRhdGlvblJlc3VsdDogVmFsaWRhdG9yW10gfX0gb3B0c1xuICAgICAqIEByZXR1cm4ge1ZhbGlkYXRvcltdfSBvcmRlcmVkIGxpc3Qgb2YgVmFsaWRhdG9ycyB3aXRoIGZlZWRiYWNrIG1lc3NhZ2VzIHZpc2libGUgdG8gdGhlIGVuZCB1c2VyXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9wcmlvcml0aXplQW5kRmlsdGVyRmVlZGJhY2soeyB2YWxpZGF0aW9uUmVzdWx0IH0pIHtcbiAgICAgIGNvbnN0IGN0b3IgPSAvKiogQHR5cGUge1ZhbGlkYXRlSG9zdENvbnN0cnVjdG9yfSAqLyAodGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgICBjb25zdCB0eXBlcyA9IGN0b3IudmFsaWRhdGlvblR5cGVzO1xuICAgICAgLy8gU29ydCBhbGwgdmFsaWRhdG9ycyBiYXNlZCBvbiB0aGUgdHlwZSBwcm92aWRlZC5cbiAgICAgIGNvbnN0IHJlcyA9IHZhbGlkYXRpb25SZXN1bHRcbiAgICAgICAgLmZpbHRlcih2ID0+XG4gICAgICAgICAgdGhpcy5mZWVkYmFja0NvbmRpdGlvbihcbiAgICAgICAgICAgIHYudHlwZSxcbiAgICAgICAgICAgIHRoaXMuX2ZlZWRiYWNrQ29uZGl0aW9uTWV0YSxcbiAgICAgICAgICAgIHRoaXMuX3Nob3dGZWVkYmFja0NvbmRpdGlvbkZvci5iaW5kKHRoaXMpLFxuICAgICAgICAgICksXG4gICAgICAgIClcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IHR5cGVzLmluZGV4T2YoYS50eXBlKSAtIHR5cGVzLmluZGV4T2YoYi50eXBlKSk7XG4gICAgICByZXR1cm4gcmVzLnNsaWNlKDAsIHRoaXMuX3Zpc2libGVNZXNzYWdlc0Ftb3VudCk7XG4gICAgfVxuICB9O1xuXG5leHBvcnQgY29uc3QgVmFsaWRhdGVNaXhpbiA9IGRlZHVwZU1peGluKFZhbGlkYXRlTWl4aW5JbXBsZW1lbnRhdGlvbik7XG4iLCIvKipcbiAqIFJldHVybiBQYXNjYWxDYXNlZCB2ZXJzaW9uIG9mIHRoZSBjYW1lbENhc2VkIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhc2NhbENhc2Uoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG4iLCJpbXBvcnQgeyBWYWxpZGF0b3IgfSBmcm9tICcuLi92YWxpZGF0ZS9WYWxpZGF0b3IuanMnO1xuXG5leHBvcnQgY2xhc3MgRm9ybUVsZW1lbnRzSGF2ZU5vRXJyb3IgZXh0ZW5kcyBWYWxpZGF0b3Ige1xuICBzdGF0aWMgZ2V0IHZhbGlkYXRvck5hbWUoKSB7XG4gICAgcmV0dXJuICdGb3JtRWxlbWVudHNIYXZlTm9FcnJvcic7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHt1bmtub3dufSBbdmFsdWVdXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAgICogQHBhcmFtIHt7IG5vZGU6IGFueSB9fSBbY29uZmlnXVxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgZXhlY3V0ZSh2YWx1ZSwgb3B0aW9ucywgY29uZmlnKSB7XG4gICAgY29uc3QgaGFzRXJyb3IgPSBjb25maWc/Lm5vZGUuX2FueUZvcm1FbGVtZW50SGFzRmVlZGJhY2tGb3IoJ2Vycm9yJyk7XG4gICAgcmV0dXJuIGhhc0Vycm9yO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGdldE1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG4iLCJpbXBvcnQgeyBkZWR1cGVNaXhpbiwgaHRtbCwgU2xvdE1peGluLCBEaXNhYmxlZE1peGluIH0gZnJvbSAnQGxpb24vY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbE1peGluIH0gZnJvbSAnLi4vRm9ybUNvbnRyb2xNaXhpbi5qcyc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbHNDb2xsZWN0aW9uIH0gZnJvbSAnLi4vcmVnaXN0cmF0aW9uL0Zvcm1Db250cm9sc0NvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHsgRm9ybVJlZ2lzdHJhck1peGluIH0gZnJvbSAnLi4vcmVnaXN0cmF0aW9uL0Zvcm1SZWdpc3RyYXJNaXhpbi5qcyc7XG5pbXBvcnQgeyBWYWxpZGF0ZU1peGluIH0gZnJvbSAnLi4vdmFsaWRhdGUvVmFsaWRhdGVNaXhpbi5qcyc7XG5pbXBvcnQgeyBnZXRBcmlhRWxlbWVudHNJblJpZ2h0RG9tT3JkZXIgfSBmcm9tICcuLi91dGlscy9nZXRBcmlhRWxlbWVudHNJblJpZ2h0RG9tT3JkZXIuanMnO1xuaW1wb3J0IHsgRm9ybUVsZW1lbnRzSGF2ZU5vRXJyb3IgfSBmcm9tICcuL0Zvcm1FbGVtZW50c0hhdmVOb0Vycm9yLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9mb3JtLWdyb3VwL0Zvcm1Hcm91cE1peGluVHlwZXMnKS5Gb3JtR3JvdXBNaXhpbn0gRm9ybUdyb3VwTWl4aW5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL2Zvcm0tZ3JvdXAvRm9ybUdyb3VwTWl4aW5UeXBlcycpLkZvcm1Hcm91cEhvc3R9IEZvcm1Hcm91cEhvc3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL2Zvcm0tZ3JvdXAvRm9ybUdyb3VwTWl4aW5UeXBlcycpLkZvcm1Db250cm9sfSBGb3JtQ29udHJvbFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvRm9ybUNvbnRyb2xNaXhpblR5cGVzJykuRm9ybUNvbnRyb2xIb3N0fSBGb3JtQ29udHJvbEhvc3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL3JlZ2lzdHJhdGlvbi9Gb3JtUmVnaXN0ZXJpbmdNaXhpblR5cGVzJykuRm9ybVJlZ2lzdGVyaW5nSG9zdH0gRm9ybVJlZ2lzdGVyaW5nSG9zdFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvcmVnaXN0cmF0aW9uL0Zvcm1SZWdpc3RyYXJNaXhpblR5cGVzJykuRWxlbWVudFdpdGhQYXJlbnRGb3JtR3JvdXB9IEVsZW1lbnRXaXRoUGFyZW50Rm9ybUdyb3VwXG4gKi9cblxuLyoqXG4gKiBAZGVzYyBGb3JtIGdyb3VwIG1peGluIHNlcnZlcyBhcyB0aGUgYmFzaXMgZm9yIChzdWIpIGZvcm1zLiBEZXNpZ25lZCB0byBiZSBwdXQgb25cbiAqIGVsZW1lbnRzIHdpdGggW3JvbGU9XCJncm91cHxyYWRpb2dyb3VwXCJdICh0aGluayBvZiBjaGVja2JveC1ncm91cCwgcmFkaW8tZ3JvdXAsIGZpZWxkc2V0KS5cbiAqIEl0IGJyaWRnZXMgYWxsIHRoZSBmdW5jdGlvbmFsaXR5IG9mIHRoZSBjaGlsZCBmb3JtIGNvbnRyb2xzOlxuICogVmFsaWRhdGVNaXhpbiwgSW50ZXJhY3Rpb25TdGF0ZU1peGluLCBGb3JtYXRNaXhpbiwgRm9ybUNvbnRyb2xNaXhpbiBldGMuXG4gKiBJdCBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIG9uIHRvcCBvZiBGb3JtUmVnaXN0cmFyTWl4aW4gYW5kIENob2ljZUdyb3VwTWl4aW4uXG4gKiBBbHNvLCBpdCBpcyB0aCBiYXNpcyBvZiB0aGUgTGlvbkZpZWxkc2V0IGVsZW1lbnQgKHdoaWNoIHN1cHBvcnRzIG5hbWUgYmFzZWQgcmV0cmlldmFsIG9mXG4gKiBjaGlsZHJlbiB2aWEgZm9ybUVsZW1lbnRzIGFuZCB0aGUgYXV0b21hdGljIGdyb3VwaW5nIG9mIGZvcm1FbGVtZW50cyB2aWEgJ1tdJykuXG4gKlxuICogQHR5cGUge0Zvcm1Hcm91cE1peGlufVxuICogQHBhcmFtIHtpbXBvcnQoJ0BvcGVuLXdjL2RlZHVwZS1taXhpbicpLkNvbnN0cnVjdG9yPGltcG9ydCgnQGxpb24vY29yZScpLkxpdEVsZW1lbnQ+fSBzdXBlcmNsYXNzXG4gKi9cbmNvbnN0IEZvcm1Hcm91cE1peGluSW1wbGVtZW50YXRpb24gPSBzdXBlcmNsYXNzID0+XG4gIC8vIEB0cy1pZ25vcmUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zNjgyMSNpc3N1ZWNvbW1lbnQtNTg4Mzc1MDUxXG4gIGNsYXNzIEZvcm1Hcm91cE1peGluIGV4dGVuZHMgRm9ybVJlZ2lzdHJhck1peGluKFxuICAgIEZvcm1Db250cm9sTWl4aW4oVmFsaWRhdGVNaXhpbihEaXNhYmxlZE1peGluKFNsb3RNaXhpbihzdXBlcmNsYXNzKSkpKSxcbiAgKSB7XG4gICAgLyoqIEB0eXBlIHthbnl9ICovXG4gICAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VibWl0dGVkOiB7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUgfSxcbiAgICAgICAgZm9jdXNlZDogeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0sXG4gICAgICAgIGRpcnR5OiB7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUgfSxcbiAgICAgICAgdG91Y2hlZDogeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0sXG4gICAgICAgIHByZWZpbGxlZDogeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBob3N0IGVsZW1lbnQgd2l0aCByb2xlIGdyb3VwIChvciByYWRpZ3JvdXAgb3IgZm9ybSkgY29udGFpbmluZyBuZWNjZXNzYXJ5IGFyaWEgYXR0cmlidXRlc1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBnZXQgX2lucHV0Tm9kZSgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9iamVjdCBrZXllZCBieSBmb3JtRWxlbWVudHMgbmFtZXMsIGNvbnRhaW5pbmcgZm9ybUVsZW1lbnRzJyBtb2RlbFZhbHVlc1xuICAgICAqL1xuICAgIGdldCBtb2RlbFZhbHVlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2dldEZyb21BbGxGb3JtRWxlbWVudHMoJ21vZGVsVmFsdWUnKTtcbiAgICB9XG5cbiAgICBzZXQgbW9kZWxWYWx1ZSh2YWx1ZXMpIHtcbiAgICAgIGlmICh0aGlzLl9faXNJbml0aWFsTW9kZWxWYWx1ZSkge1xuICAgICAgICB0aGlzLl9faXNJbml0aWFsTW9kZWxWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlZ2lzdHJhdGlvbkNvbXBsZXRlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX3NldFZhbHVlTWFwRm9yQWxsRm9ybUVsZW1lbnRzKCdtb2RlbFZhbHVlJywgdmFsdWVzKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZXRWYWx1ZU1hcEZvckFsbEZvcm1FbGVtZW50cygnbW9kZWxWYWx1ZScsIHZhbHVlcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT2JqZWN0IGtleWVkIGJ5IGZvcm1FbGVtZW50cyBuYW1lcywgY29udGFpbmluZyBmb3JtRWxlbWVudHMnIHNlcmlhbGl6ZWRWYWx1ZXNcbiAgICAgKi9cbiAgICBnZXQgc2VyaWFsaXplZFZhbHVlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2dldEZyb21BbGxGb3JtRWxlbWVudHMoJ3NlcmlhbGl6ZWRWYWx1ZScpO1xuICAgIH1cblxuICAgIHNldCBzZXJpYWxpemVkVmFsdWUodmFsdWVzKSB7XG4gICAgICBpZiAodGhpcy5fX2lzSW5pdGlhbFNlcmlhbGl6ZWRWYWx1ZSkge1xuICAgICAgICB0aGlzLl9faXNJbml0aWFsU2VyaWFsaXplZFZhbHVlID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVnaXN0cmF0aW9uQ29tcGxldGUudGhlbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fc2V0VmFsdWVNYXBGb3JBbGxGb3JtRWxlbWVudHMoJ3NlcmlhbGl6ZWRWYWx1ZScsIHZhbHVlcyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2V0VmFsdWVNYXBGb3JBbGxGb3JtRWxlbWVudHMoJ3NlcmlhbGl6ZWRWYWx1ZScsIHZhbHVlcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT2JqZWN0IGtleWVkIGJ5IGZvcm1FbGVtZW50cyBuYW1lcywgY29udGFpbmluZyBmb3JtRWxlbWVudHMnIGZvcm1hdHRlZFZhbHVlc1xuICAgICAqL1xuICAgIGdldCBmb3JtYXR0ZWRWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXRGcm9tQWxsRm9ybUVsZW1lbnRzKCdmb3JtYXR0ZWRWYWx1ZScpO1xuICAgIH1cblxuICAgIHNldCBmb3JtYXR0ZWRWYWx1ZSh2YWx1ZXMpIHtcbiAgICAgIHRoaXMuX3NldFZhbHVlTWFwRm9yQWxsRm9ybUVsZW1lbnRzKCdmb3JtYXR0ZWRWYWx1ZScsIHZhbHVlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1ZSB3aGVuIGFsbCBvZiB0aGUgY2hpbGRyZW4gYXJlIHByZWZpbGxlZCAoc2VlIEludGVyYWN0aW9uU3RhdGVNaXhpbiBmb3IgbW9yZSBkZXRhaWxzLilcbiAgICAgKi9cbiAgICBnZXQgcHJlZmlsbGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2V2ZXJ5Rm9ybUVsZW1lbnRIYXMoJ3ByZWZpbGxlZCcpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcblxuICAgICAgLy8gLl9pbnB1dE5vZGUgPT09IHRoaXMsIHdoaWNoIGFsd2F5cyByZXF1aXJlcyBhIHZhbHVlIHByb3BcbiAgICAgIHRoaXMudmFsdWUgPSAnJztcblxuICAgICAgLyoqXG4gICAgICAgKiBEaXNhYmxlcyBhbGwgZm9ybUVsZW1lbnRzIGluIGdyb3VwXG4gICAgICAgKi9cbiAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICAgLyoqXG4gICAgICAgKiBUcnVlIHdoZW4gcGFyZW50IGZvcm0gaXMgc3VibWl0dGVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuc3VibWl0dGVkID0gZmFsc2U7XG5cbiAgICAgIC8qKlxuICAgICAgICogVHJ1ZSB3aGVuIGFueSBvZiB0aGUgY2hpbGRyZW4gaXMgZGlydHkgKHNlZSBJbnRlcmFjdGlvblN0YXRlTWl4aW4gZm9yIG1vcmUgZGV0YWlscy4pXG4gICAgICAgKi9cbiAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcblxuICAgICAgLyoqXG4gICAgICAgKiBUcnVlIHdoZW4gdGhlIGdyb3VwIGFzIGEgd2hvbGUgaXMgYmx1cnJlZCAoc2VlIEludGVyYWN0aW9uU3RhdGVNaXhpbiBmb3IgbW9yZSBkZXRhaWxzLilcbiAgICAgICAqL1xuICAgICAgdGhpcy50b3VjaGVkID0gZmFsc2U7XG5cbiAgICAgIC8qKlxuICAgICAgICogVHJ1ZSB3aGVuIGFueSBvZiB0aGUgY2hpbGRyZW4gaXMgZm9jdXNlZC5cbiAgICAgICAqL1xuICAgICAgdGhpcy5mb2N1c2VkID0gZmFsc2U7XG5cbiAgICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgICAgdGhpcy5fX2FkZGVkU3ViVmFsaWRhdG9ycyA9IGZhbHNlO1xuICAgICAgLyoqIEBwcml2YXRlICovXG4gICAgICB0aGlzLl9faXNJbml0aWFsTW9kZWxWYWx1ZSA9IHRydWU7XG4gICAgICAvKiogQHByaXZhdGUgKi9cbiAgICAgIHRoaXMuX19pc0luaXRpYWxTZXJpYWxpemVkVmFsdWUgPSB0cnVlO1xuICAgICAgLyoqIEBwcml2YXRlICovXG4gICAgICB0aGlzLl9jaGVja0Zvck91dHNpZGVDbGljayA9IHRoaXMuX2NoZWNrRm9yT3V0c2lkZUNsaWNrLmJpbmQodGhpcyk7XG5cbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIHRoaXMuX3N5bmNGb2N1c2VkKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCB0aGlzLl9vbkZvY3VzT3V0KTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignZGlydHktY2hhbmdlZCcsIHRoaXMuX3N5bmNEaXJ0eSk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3ZhbGlkYXRlLXBlcmZvcm1lZCcsIHRoaXMuX19vbkNoaWxkVmFsaWRhdGVQZXJmb3JtZWQpO1xuXG4gICAgICB0aGlzLmRlZmF1bHRWYWxpZGF0b3JzID0gW25ldyBGb3JtRWxlbWVudHNIYXZlTm9FcnJvcigpXTtcblxuICAgICAgdGhpcy5fX2Rlc2NyaXB0aW9uRWxlbWVudHNJblBhcmVudENoYWluID0gbmV3IFNldCgpO1xuXG4gICAgICAvKiogQHR5cGUge3ttb2RlbFZhbHVlPzp7W2tleTpzdHJpbmddOiBhbnl9LCBzZXJpYWxpemVkVmFsdWU/Ontba2V5OnN0cmluZ106IGFueX19fSAqL1xuICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZXMgPSB7IG1vZGVsVmFsdWU6IHt9LCBzZXJpYWxpemVkVmFsdWU6IHt9IH07XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnZ3JvdXAnKTtcblxuICAgICAgdGhpcy5pbml0Q29tcGxldGUudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuX19pc0luaXRpYWxNb2RlbFZhbHVlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX19pc0luaXRpYWxTZXJpYWxpemVkVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fX2luaXRJbnRlcmFjdGlvblN0YXRlcygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuXG4gICAgICBpZiAodGhpcy5fX2hhc0FjdGl2ZU91dHNpZGVDbGlja0hhbmRsaW5nKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fY2hlY2tGb3JPdXRzaWRlQ2xpY2spO1xuICAgICAgICB0aGlzLl9faGFzQWN0aXZlT3V0c2lkZUNsaWNrSGFuZGxpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19kZXNjcmlwdGlvbkVsZW1lbnRzSW5QYXJlbnRDaGFpbi5jbGVhcigpO1xuICAgIH1cblxuICAgIF9faW5pdEludGVyYWN0aW9uU3RhdGVzKCkge1xuICAgICAgdGhpcy5mb3JtRWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZWwuaW5pdEludGVyYWN0aW9uU3RhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBlbC5pbml0SW50ZXJhY3Rpb25TdGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAb3ZlcnJpZGUgZnJvbSBGb3JtQ29udHJvbE1peGluXG4gICAgICovXG4gICAgX3RyaWdnZXJJbml0aWFsTW9kZWxWYWx1ZUNoYW5nZWRFdmVudCgpIHtcbiAgICAgIHRoaXMucmVnaXN0cmF0aW9uQ29tcGxldGUudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoSW5pdGlhbE1vZGVsVmFsdWVDaGFuZ2VkRXZlbnQoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCdAbGlvbi9jb3JlJykuUHJvcGVydHlWYWx1ZXMgfSBjaGFuZ2VkUHJvcGVydGllc1xuICAgICAqL1xuICAgIHVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpIHtcbiAgICAgIHN1cGVyLnVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpO1xuXG4gICAgICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgdGhpcy5fX3JlcXVlc3RDaGlsZHJlblRvQmVEaXNhYmxlZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX19yZXRyYWN0UmVxdWVzdENoaWxkcmVuVG9CZURpc2FibGVkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnZm9jdXNlZCcpKSB7XG4gICAgICAgIGlmICh0aGlzLmZvY3VzZWQgPT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLl9fc2V0dXBPdXRzaWRlQ2xpY2tIYW5kbGluZygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgX19zZXR1cE91dHNpZGVDbGlja0hhbmRsaW5nKCkge1xuICAgICAgaWYgKCF0aGlzLl9faGFzQWN0aXZlT3V0c2lkZUNsaWNrSGFuZGxpbmcpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9jaGVja0Zvck91dHNpZGVDbGljayk7XG4gICAgICAgIHRoaXMuX19oYXNBY3RpdmVPdXRzaWRlQ2xpY2tIYW5kbGluZyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICAgKi9cbiAgICBfY2hlY2tGb3JPdXRzaWRlQ2xpY2soZXZlbnQpIHtcbiAgICAgIGNvbnN0IG91dHNpZGVHcm91cENsaWNrZWQgPSAhdGhpcy5jb250YWlucygvKiogQHR5cGUge05vZGV9ICovIChldmVudC50YXJnZXQpKTtcbiAgICAgIGlmIChvdXRzaWRlR3JvdXBDbGlja2VkKSB7XG4gICAgICAgIHRoaXMudG91Y2hlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX19yZXF1ZXN0Q2hpbGRyZW5Ub0JlRGlzYWJsZWQoKSB7XG4gICAgICB0aGlzLmZvcm1FbGVtZW50cy5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgaWYgKGNoaWxkLm1ha2VSZXF1ZXN0VG9CZURpc2FibGVkKSB7XG4gICAgICAgICAgY2hpbGQubWFrZVJlcXVlc3RUb0JlRGlzYWJsZWQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX19yZXRyYWN0UmVxdWVzdENoaWxkcmVuVG9CZURpc2FibGVkKCkge1xuICAgICAgdGhpcy5mb3JtRWxlbWVudHMuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgIGlmIChjaGlsZC5yZXRyYWN0UmVxdWVzdFRvQmVEaXNhYmxlZCkge1xuICAgICAgICAgIGNoaWxkLnJldHJhY3RSZXF1ZXN0VG9CZURpc2FibGVkKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgX2lucHV0R3JvdXBUZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiBodG1sYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj5cbiAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGludGVyYWN0aW9uIHN0YXRlICdzdWJtaXR0ZWQnLlxuICAgICAqIFRoaXMgYWxsb3dzIGNoaWxkcmVuIHRvIGVuYWJsZSB2aXNpYmlsaXR5IG9mIHZhbGlkYXRpb24gZmVlZGJhY2tcbiAgICAgKi9cbiAgICBzdWJtaXRHcm91cCgpIHtcbiAgICAgIHRoaXMuc3VibWl0dGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZm9ybUVsZW1lbnRzLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGNoaWxkLnN1Ym1pdEdyb3VwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2hpbGQuc3VibWl0R3JvdXAoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGlsZC5zdWJtaXR0ZWQgPSB0cnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0byBpbml0aWFsL3ByZWZpbGxlZCB2YWx1ZXMgYW5kIGludGVyYWN0aW9uIHN0YXRlcyBvZiBhbGwgRm9ybUNvbnRyb2xzIGluIGdyb3VwLFxuICAgICAqL1xuICAgIHJlc2V0R3JvdXAoKSB7XG4gICAgICB0aGlzLmZvcm1FbGVtZW50cy5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjaGlsZC5yZXNldEdyb3VwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2hpbGQucmVzZXRHcm91cCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZC5yZXNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNoaWxkLnJlc2V0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnJlc2V0SW50ZXJhY3Rpb25TdGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgdmFsdWVzIGFuZCByZXNldHMgYWxsIGludGVyYWN0aW9uIHN0YXRlcyBvZiBhbGwgRm9ybUNvbnRyb2xzIGluIGdyb3VwLFxuICAgICAqL1xuICAgIGNsZWFyR3JvdXAoKSB7XG4gICAgICB0aGlzLmZvcm1FbGVtZW50cy5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjaGlsZC5jbGVhckdyb3VwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2hpbGQuY2xlYXJHcm91cCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjaGlsZC5jbGVhciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNoaWxkLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnJlc2V0SW50ZXJhY3Rpb25TdGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2V0cyBhbGwgaW50ZXJhY3Rpb24gc3RhdGVzIGZvciBhbGwgZm9ybUVsZW1lbnRzXG4gICAgICovXG4gICAgcmVzZXRJbnRlcmFjdGlvblN0YXRlKCkge1xuICAgICAgdGhpcy5zdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMudG91Y2hlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgdGhpcy5mb3JtRWxlbWVudHMuZm9yRWFjaChmb3JtRWxlbWVudCA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZm9ybUVsZW1lbnQucmVzZXRJbnRlcmFjdGlvblN0YXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZm9ybUVsZW1lbnQucmVzZXRJbnRlcmFjdGlvblN0YXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgZmlsdGVyIGZ1bmN0aW9uIHdoaWNoIHdpbGwgZXhjbHVkZSBhIGZvcm0gZmllbGQgd2hlbiByZXR1cm5pbmcgZmFsc2VcbiAgICAgKiBCeSBkZWZhdWx0LCBleGNsdWRlIGZvcm0gZmllbGRzIHdoaWNoIGFyZSBkaXNhYmxlZFxuICAgICAqXG4gICAgICogVGhlIHR5cGUgaXMgYmUgcGFzc2VkIGFzIHdlbGwgZm9yIG1vcmUgZmluZSBncmFpbmVkIGNvbnRyb2wsIGUuZy5cbiAgICAgKiBkaXN0aW5ndWlzaCB0aGUgZmlsdGVyIHdoZW4gZmV0Y2hpbmcgbW9kZWxWYWx1ZSB2ZXJzdXMgc2VyaWFsaXplZFZhbHVlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Zvcm1Db250cm9sfSBlbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMsIG5vLXVudXNlZC12YXJzXG4gICAgX2dldEZyb21BbGxGb3JtRWxlbWVudHNGaWx0ZXIoZWwsIHR5cGUpIHtcbiAgICAgIHJldHVybiAhZWwuZGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGtleWVkIGJlIG5hbWUgb2JqZWN0IGZvciByZXF1ZXN0ZWQgcHJvcGVydHkgKGxpa2UgbW9kZWxWYWx1ZS9zZXJpYWxpemVkVmFsdWUpXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gICAgICogQHBhcmFtIHsoZWw6IEZvcm1Db250cm9sLCBwcm9wZXJ0eT86IHN0cmluZykgPT4gYm9vbGVhbn0gW2ZpbHRlckZuXVxuICAgICAqIEByZXR1cm5zIHt7W25hbWU6c3RyaW5nXTogYW55fX1cbiAgICAgKi9cbiAgICBfZ2V0RnJvbUFsbEZvcm1FbGVtZW50cyhwcm9wZXJ0eSwgZmlsdGVyRm4pIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuXG4gICAgICAvLyBQcmlvcml0aXplcyBpbXBlcmF0aXZlbHkgcGFzc2VkIGZpbHRlciBmdW5jdGlvbiBvdmVyIHRoZSBwcm90ZWN0ZWQgbWV0aG9kXG4gICAgICBjb25zdCBfZmlsdGVyRm4gPSBmaWx0ZXJGbiB8fCB0aGlzLl9nZXRGcm9tQWxsRm9ybUVsZW1lbnRzRmlsdGVyO1xuXG4gICAgICAvLyBAdHMtaWdub3JlIFthbGxvdy1wcm90ZWN0ZWRdOiBhbGxvdyBGb3JtIGludGVybmFscyB0byBhY2Nlc3MgdGhpcyBwcm90ZWN0ZWQgbWV0aG9kXG4gICAgICB0aGlzLmZvcm1FbGVtZW50cy5fa2V5cygpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW0gPSB0aGlzLmZvcm1FbGVtZW50c1tuYW1lXTtcbiAgICAgICAgaWYgKGVsZW0gaW5zdGFuY2VvZiBGb3JtQ29udHJvbHNDb2xsZWN0aW9uKSB7XG4gICAgICAgICAgcmVzdWx0W25hbWVdID0gZWxlbS5maWx0ZXIoZWwgPT4gX2ZpbHRlckZuKGVsLCBwcm9wZXJ0eSkpLm1hcChlbCA9PiBlbFtwcm9wZXJ0eV0pO1xuICAgICAgICB9IGVsc2UgaWYgKF9maWx0ZXJGbihlbGVtLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGVsZW0uX2dldEZyb21BbGxGb3JtRWxlbWVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IGVsZW0uX2dldEZyb21BbGxGb3JtRWxlbWVudHMocHJvcGVydHkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRbbmFtZV0gPSBlbGVtW3Byb3BlcnR5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzYW1lIHZhbHVlIGZvciByZXF1ZXN0ZWQgcHJvcGVydHkgaW4gYWxsIGZvcm1FbGVtZW50c1xuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyfSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICAgICAqL1xuICAgIF9zZXRWYWx1ZUZvckFsbEZvcm1FbGVtZW50cyhwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgIHRoaXMuZm9ybUVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBlbFtwcm9wZXJ0eV0gPSB2YWx1ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRvIHNldCBmb3JtRWxlbWVudHMgdmFsdWVzIHZpYSBhIGtleWVkIG9iamVjdCBzdHJ1Y3R1cmVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge3sgW3g6IHN0cmluZ106IGFueTsgfX0gdmFsdWVzXG4gICAgICovXG4gICAgX3NldFZhbHVlTWFwRm9yQWxsRm9ybUVsZW1lbnRzKHByb3BlcnR5LCB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZXMgJiYgdHlwZW9mIHZhbHVlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgT2JqZWN0LmtleXModmFsdWVzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZm9ybUVsZW1lbnRzW25hbWVdKSkge1xuICAgICAgICAgICAgdGhpcy5mb3JtRWxlbWVudHNbbmFtZV0uZm9yRWFjaChcbiAgICAgICAgICAgICAgKC8qKiBAdHlwZSB7Rm9ybUNvbnRyb2x9ICovIGVsLCAvKiogQHR5cGUge251bWJlcn0gKi8gaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBlbFtwcm9wZXJ0eV0gPSB2YWx1ZXNbbmFtZV1baW5kZXhdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5mb3JtRWxlbWVudHNbbmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybUVsZW1lbnRzW25hbWVdW3Byb3BlcnR5XSA9IHZhbHVlc1tuYW1lXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fX3BlbmRpbmdWYWx1ZXNbcHJvcGVydHldW25hbWVdID0gdmFsdWVzW25hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIHdoZW4gb25lIG9mIHRoZSBmb3JtRWxlbWVudHMgaGFzIHJlcXVlc3RlZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICAgICAqL1xuICAgIF9hbnlGb3JtRWxlbWVudEhhcyhwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZm9ybUVsZW1lbnRzKS5zb21lKG5hbWUgPT4ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmZvcm1FbGVtZW50c1tuYW1lXSkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtRWxlbWVudHNbbmFtZV0uc29tZSgoLyoqIEB0eXBlIHtGb3JtQ29udHJvbH0gKi8gZWwpID0+ICEhZWxbcHJvcGVydHldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gISF0aGlzLmZvcm1FbGVtZW50c1tuYW1lXVtwcm9wZXJ0eV07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhdGUgb25lIG9mIFZhbGlkYXRlSG9zdC52YWxpZGF0aW9uVHlwZXNcbiAgICAgKi9cbiAgICBfYW55Rm9ybUVsZW1lbnRIYXNGZWVkYmFja0ZvcihzdGF0ZSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZm9ybUVsZW1lbnRzKS5zb21lKG5hbWUgPT4ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmZvcm1FbGVtZW50c1tuYW1lXSkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtRWxlbWVudHNbbmFtZV0uc29tZSgoLyoqIEB0eXBlIHtGb3JtQ29udHJvbH0gKi8gZWwpID0+XG4gICAgICAgICAgICBCb29sZWFuKGVsLmhhc0ZlZWRiYWNrRm9yICYmIGVsLmhhc0ZlZWRiYWNrRm9yLmluY2x1ZGVzKHN0YXRlKSksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQm9vbGVhbihcbiAgICAgICAgICB0aGlzLmZvcm1FbGVtZW50c1tuYW1lXS5oYXNGZWVkYmFja0ZvciAmJlxuICAgICAgICAgICAgdGhpcy5mb3JtRWxlbWVudHNbbmFtZV0uaGFzRmVlZGJhY2tGb3IuaW5jbHVkZXMoc3RhdGUpLFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIHdoZW4gYWxsIG9mIHRoZSBmb3JtRWxlbWVudHMgaGF2ZSByZXF1ZXN0ZWQgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAgICAgKi9cbiAgICBfZXZlcnlGb3JtRWxlbWVudEhhcyhwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZm9ybUVsZW1lbnRzKS5ldmVyeShuYW1lID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5mb3JtRWxlbWVudHNbbmFtZV0pKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybUVsZW1lbnRzW25hbWVdLmV2ZXJ5KCgvKiogQHR5cGUge0Zvcm1Db250cm9sfSAqLyBlbCkgPT4gISFlbFtwcm9wZXJ0eV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhIXRoaXMuZm9ybUVsZW1lbnRzW25hbWVdW3Byb3BlcnR5XTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHRoZSBzYW1lIGZ1bmN0aW9uYWxpdHkgaGFzIGJlZW4gaW1wbGVtZW50ZWQgd2l0aCBtb2RlbC12YWx1ZS1jaGFuZ2VkIGV2ZW50LCB3aGljaFxuICAgIC8vIGNvdmVycyB0aGUgc2FtZSBhbmQgd29ya3Mgd2l0aCBGb3JtUmVnaXN0cmFyUG9ydGFsTWl4aW5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRyaWdnZXJlZCBieSBldmVudCAndmFsaWRhdGUtcGVyZm9ybWVkJyB3aGljaCBlbmFibGVkIHVzIHRvIGhhbmRsZSAyIGRpZmZlcmVudCBzaXR1YXRpb25zXG4gICAgICogIC0gcmVhY3Qgb24gbW9kZWxWYWx1ZSBjaGFuZ2UsIHdoaWNoIHNheXMgc29tZXRoaW5nIGFib3V0IHRoZSB2YWxpZGl0eSBhcyBhIHdob2xlXG4gICAgICogIChhdCBsZWFzdCB0d28gY2hlY2tib3hlcyBmb3IgaW5zdGFuY2UpIGFuZCBub3RoaW5nIGFib3V0IHRoZSBjaGlsZHJlbidzIHZhbHVlc1xuICAgICAqICAtIGNoaWxkcmVuIHZhbGlkaXR5IHN0YXRlcyBoYXZlIGNoYW5nZWQsIHNvIGZpZWxkc2V0IG5lZWRzIHRvIHVwZGF0ZSBpdHNlbGYgYmFzZWQgb24gdGhhdFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2XG4gICAgICovXG4gICAgX19vbkNoaWxkVmFsaWRhdGVQZXJmb3JtZWQoZXYpIHtcbiAgICAgIGlmIChldiAmJiB0aGlzLmlzUmVnaXN0ZXJlZEZvcm1FbGVtZW50KC8qKiBAdHlwZSB7Rm9ybUNvbnRyb2x9ICovIChldi50YXJnZXQpKSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3N5bmNGb2N1c2VkKCkge1xuICAgICAgdGhpcy5mb2N1c2VkID0gdGhpcy5fYW55Rm9ybUVsZW1lbnRIYXMoJ2ZvY3VzZWQnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldlxuICAgICAqL1xuICAgIF9vbkZvY3VzT3V0KGV2KSB7XG4gICAgICBjb25zdCBsYXN0RWwgPSB0aGlzLmZvcm1FbGVtZW50c1t0aGlzLmZvcm1FbGVtZW50cy5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChldi50YXJnZXQgPT09IGxhc3RFbCkge1xuICAgICAgICB0aGlzLnRvdWNoZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5mb2N1c2VkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgX3N5bmNEaXJ0eSgpIHtcbiAgICAgIHRoaXMuZGlydHkgPSB0aGlzLl9hbnlGb3JtRWxlbWVudEhhcygnZGlydHknKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmF2ZXJzZXMgdGhlIF9wYXJlbnRGb3JtR3JvdXAgdHJlZSwgYW5kIGdhdGhlcnMgYWxsIGFyaWEgZGVzY3JpcHRpb24gZWxlbWVudHNcbiAgICAgKiAoZmVlZGJhY2sgYW5kIGhlbHB0ZXh0KSB0aGF0IHNob3VsZCBiZSBwcm92aWRlZCB0byBjaGlsZHJlbi5cbiAgICAgKlxuICAgICAqIEluIHRoZSBleGFtcGxlIGJlbG93LCB3aGVuIHRoZSBpbnB1dCBmb3IgJ3N0cmVldCcgaGFzIGZvY3VzLCBhIHNjcmVlbnJlYWRlciB1c2VyXG4gICAgICogd291bGQgaGVhciB0aGUgI2dyb3VwLWVycm9yLlxuICAgICAqIEluIGNhc2Ugb25lIG9mIHRoZSBpbnB1dHMgd2FzIGluIGVycm9yIHN0YXRlIGFzIHdlbGwsIHRoZSBTUiB1c2VyIHdvdWxkXG4gICAgICogZmlyc3QgaGVhciB0aGUgbG9jYWwgZXJyb3IsIGZvbGxvd2VkIGJ5ICNncm91cC1lcnJvclxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxsaW9uLWZpZWxkc2V0IG5hbWU9XCJhZGRyZXNzXCI+XG4gICAgICogICA8bGlvbi1pbnB1dCBuYW1lPVwic3RyZWV0XCIgbGFiZWw9XCJTdHJlZXRcIiAubW9kZWxWYWx1ZT1cIiR7J1BhcmsgQXZlbnVlJ31cIj48L2xpb24taW5wdXQ+XG4gICAgICogICA8bGlvbi1pbnB1dCBuYW1lPVwibnVtYmVyXCIgbGFiZWw9XCJOdW1iZXJcIiAubW9kZWxWYWx1ZT1cIiR7MTAwfVwiPi4uLjwvbGlvbi1pbnB1dD5cbiAgICAgKiAgIDxkaXYgc2xvdD1cImZlZWRiYWNrXCIgaWQ9XCJncm91cC1lcnJvclwiPlxuICAgICAqICAgICAgUGFyayBBdmVudWUgb25seSBoYXMgbnVtYmVycyB1cCB0byA4MFxuICAgICAqICAgPC9kaXY+XG4gICAgICogPC9saW9uLWZpZWxkc2V0PlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIF9fc3RvcmVBbGxEZXNjcmlwdGlvbkVsZW1lbnRzSW5QYXJlbnRDaGFpbigpIHtcbiAgICAgIGNvbnN0IHVuVHlwZWRUaGlzID0gLyoqIEB0eXBlIHt1bmtub3dufSAqLyAodGhpcyk7XG4gICAgICBsZXQgcGFyZW50ID0gLyoqIEB0eXBlIHtGb3JtQ29udHJvbEhvc3QgJiB7IF9wYXJlbnRGb3JtR3JvdXA6YW55IH19ICovICh1blR5cGVkVGhpcyk7XG4gICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgW2FsbG93LXByb3RlY3RlZF06IGluIHBhcmVudC9jaGlsZCByZWxhdGlvbnMgd2UgYXJlIGFsbG93ZWQgdG8gY2FsbCBwcm90ZWN0ZWQgbWV0aG9kc1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbkVsZW1lbnRzID0gcGFyZW50Ll9nZXRBcmlhRGVzY3JpcHRpb25FbGVtZW50cygpO1xuICAgICAgICBjb25zdCBvcmRlcmVkRWxzID0gZ2V0QXJpYUVsZW1lbnRzSW5SaWdodERvbU9yZGVyKGRlc2NyaXB0aW9uRWxlbWVudHMsIHsgcmV2ZXJzZTogdHJ1ZSB9KTtcbiAgICAgICAgb3JkZXJlZEVscy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICB0aGlzLl9fZGVzY3JpcHRpb25FbGVtZW50c0luUGFyZW50Q2hhaW4uYWRkKGVsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEFsc28gY2hlY2sgaWYgdGhlIG5ld2x5IGFkZGVkIGNoaWxkIG5lZWRzIHRvIHJlZmVyIGdyYW5kcGFyZW50c1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX3BhcmVudEZvcm1Hcm91cDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Zvcm1Db250cm9sfSBjaGlsZFxuICAgICAqL1xuICAgIF9fbGlua1BhcmVudE1lc3NhZ2VzKGNoaWxkKSB7XG4gICAgICB0aGlzLl9fZGVzY3JpcHRpb25FbGVtZW50c0luUGFyZW50Q2hhaW4uZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgY2hpbGQuYWRkVG9BcmlhRGVzY3JpYmVkQnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjaGlsZC5hZGRUb0FyaWFEZXNjcmliZWRCeShlbCwgeyByZW9yZGVyOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtGb3JtQ29udHJvbH0gY2hpbGRcbiAgICAgKi9cbiAgICBfX3VubGlua1BhcmVudE1lc3NhZ2VzKGNoaWxkKSB7XG4gICAgICB0aGlzLl9fZGVzY3JpcHRpb25FbGVtZW50c0luUGFyZW50Q2hhaW4uZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgY2hpbGQucmVtb3ZlRnJvbUFyaWFEZXNjcmliZWRCeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNoaWxkLnJlbW92ZUZyb21BcmlhRGVzY3JpYmVkQnkoZWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZW5oYW5jZSBGb3JtUmVnaXN0cmFyTWl4aW46IGNvbm5lY3RzIFZhbGlkYXRlTWl4aW4gYW5kIERpc2FibGVkTWl4aW4uXG4gICAgICogT24gdG9wIG9mIHRoaXMsIGVycm9yIG1lc3NhZ2VzIG9mIGNoaWxkcmVuIGFyZSBsaW5rZWQgdG8gdGhlaXIgcGFyZW50c1xuICAgICAqIEBwYXJhbSB7Rm9ybUNvbnRyb2wgJiB7c2VyaWFsaXplZFZhbHVlOnN0cmluZ3xvYmplY3R9fSBjaGlsZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFRvSW5zZXJ0QXRcbiAgICAgKi9cbiAgICBhZGRGb3JtRWxlbWVudChjaGlsZCwgaW5kZXhUb0luc2VydEF0KSB7XG4gICAgICBzdXBlci5hZGRGb3JtRWxlbWVudChjaGlsZCwgaW5kZXhUb0luc2VydEF0KTtcbiAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgIGNoaWxkLm1ha2VSZXF1ZXN0VG9CZURpc2FibGVkKCk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuX19kZXNjcmlwdGlvbkVsZW1lbnRzSW5QYXJlbnRDaGFpbi5zaXplKSB7XG4gICAgICAgIHRoaXMuX19zdG9yZUFsbERlc2NyaXB0aW9uRWxlbWVudHNJblBhcmVudENoYWluKCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9fbGlua1BhcmVudE1lc3NhZ2VzKGNoaWxkKTtcbiAgICAgIHRoaXMudmFsaWRhdGUoeyBjbGVhckN1cnJlbnRSZXN1bHQ6IHRydWUgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgY2hpbGQuYWRkVG9BcmlhTGFiZWxsZWRCeSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGlzLl9sYWJlbE5vZGUpIHtcbiAgICAgICAgY2hpbGQuYWRkVG9BcmlhTGFiZWxsZWRCeSh0aGlzLl9sYWJlbE5vZGUsIHsgcmVvcmRlcjogZmFsc2UgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIWNoaWxkLm1vZGVsVmFsdWUpIHtcbiAgICAgICAgY29uc3QgcFZhbHMgPSB0aGlzLl9fcGVuZGluZ1ZhbHVlcztcbiAgICAgICAgaWYgKHBWYWxzLm1vZGVsVmFsdWUgJiYgcFZhbHMubW9kZWxWYWx1ZVtjaGlsZC5uYW1lXSkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgIGNoaWxkLm1vZGVsVmFsdWUgPSBwVmFscy5tb2RlbFZhbHVlW2NoaWxkLm5hbWVdO1xuICAgICAgICB9IGVsc2UgaWYgKHBWYWxzLnNlcmlhbGl6ZWRWYWx1ZSAmJiBwVmFscy5zZXJpYWxpemVkVmFsdWVbY2hpbGQubmFtZV0pIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICBjaGlsZC5zZXJpYWxpemVkVmFsdWUgPSBwVmFscy5zZXJpYWxpemVkVmFsdWVbY2hpbGQubmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHYXRoZXJzIGluaXRpYWwgbW9kZWwgdmFsdWVzIG9mIGFsbCBjaGlsZHJlbi4gVXNlZCB3aGVuIHJlc2V0R3JvdXAoKSBpcyBjYWxsZWQuXG4gICAgICovXG4gICAgZ2V0IF9pbml0aWFsTW9kZWxWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXRGcm9tQWxsRm9ybUVsZW1lbnRzKCdfaW5pdGlhbE1vZGVsVmFsdWUnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAb3ZlcnJpZGUgRm9ybVJlZ2lzdHJhck1peGluOyBDb25uZWN0cyBWYWxpZGF0ZU1peGluXG4gICAgICogQHBhcmFtIHtGb3JtUmVnaXN0ZXJpbmdIb3N0ICYgRm9ybUNvbnRyb2x9IGVsXG4gICAgICovXG4gICAgcmVtb3ZlRm9ybUVsZW1lbnQoZWwpIHtcbiAgICAgIHN1cGVyLnJlbW92ZUZvcm1FbGVtZW50KGVsKTtcbiAgICAgIHRoaXMudmFsaWRhdGUoeyBjbGVhckN1cnJlbnRSZXN1bHQ6IHRydWUgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgZWwucmVtb3ZlRnJvbUFyaWFMYWJlbGxlZEJ5ID09PSAnZnVuY3Rpb24nICYmIHRoaXMuX2xhYmVsTm9kZSkge1xuICAgICAgICBlbC5yZW1vdmVGcm9tQXJpYUxhYmVsbGVkQnkodGhpcy5fbGFiZWxOb2RlLCB7IHJlb3JkZXI6IGZhbHNlIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5fX3VubGlua1BhcmVudE1lc3NhZ2VzKGVsKTtcbiAgICB9XG4gIH07XG5cbmV4cG9ydCBjb25zdCBGb3JtR3JvdXBNaXhpbiA9IGRlZHVwZU1peGluKEZvcm1Hcm91cE1peGluSW1wbGVtZW50YXRpb24pO1xuIiwiaW1wb3J0IHsgTGl0RWxlbWVudCB9IGZyb20gJ0BsaW9uL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwTWl4aW4gfSBmcm9tICdAbGlvbi9mb3JtLWNvcmUnO1xuXG4vKipcbiAqIEBkZXNjIExpb25GaWVsZHNldCBpcyBiYXNpY2FsbHkgYSAnc3ViIGZvcm0nIGFuZCBjYW4gaGF2ZSBpdHMgb3duIG5lc3RlZCBzdWIgZm9ybXMuXG4gKiBJdCBtaW1pY3MgdGhlIG5hdGl2ZSA8ZmllbGRzZXQ+IGVsZW1lbnQgaW4gdGhpcyBzZW5zZSwgYnV0IGhhcyBhbGwgdGhlIGZ1bmN0aW9uYWxpdHkgb2ZcbiAqIGEgRm9ybUNvbnRyb2wgKGFkdmFuY2VkIHN0eWxpbmcsIHZhbGlkYXRpb24sIGludGVyYWN0aW9uIHN0YXRlcyBldGMuKSBBbHNvIHNlZVxuICogRm9ybUdyb3VwTWl4aW4gaXQgZGVwZW5kcyBvbi5cbiAqXG4gKiBMaW9uRmllbGRzZXQgZW5hYmxlcyB0aGUgJ19pc0Zvcm1PckZpZWxkc2V0JyBmbGFnIGluIEZvcm1SZWdpc3RyYXJNaXhpbi4gVGhpcyBtYWtlcyAuZm9ybUVsZW1lbnRzXG4gKiBhY3Qgbm90IG9ubHkgYXMgYW4gYXJyYXksIGJ1dCBhbHNvIGFzIGFuIG9iamVjdCAoc2VlIEZvcm1SZWdpc3Rhck1peGluIGZvciBtb3JlIGluZm9ybWF0aW9uKS5cbiAqIEFzIGEgYm9udXMsIEl0IGNhbiBhbHNvIGdyb3VwIGNoaWxkcmVuIGhhdmluZyBuYW1lcyBlbmRpbmcgd2l0aCAnW10nLlxuICpcbiAqIEFib3ZlIHdpbGwgYmUgIGhlbHBmdWwgZm9yIGJvdGggZm9ybXMgYW5kIHN1YiBmb3Jtcywgd2hpY2ggY2FuIGNvbnRhaW4gc3ViIGZvcm1zIGFzIGNoaWxkcmVuXG4gKiBhcyB3ZWxsIGFuZCBhbGxvdyBmb3IgYSBuZXN0ZWQgZm9ybSBzdHJ1Y3R1cmUuXG4gKiBDb250cmFyeSwgb3RoZXIgZm9ybSBncm91cHMgKGNob2ljZSBncm91cHMgbGlrZSByYWRpby1ncm91cCwgY2hlY2tib3gtZ3JvdXAgYW5kIChtdWx0aSlzZWxlY3QpXG4gKiBkb24ndDogdGhleSBzaG91bGQgYmUgY29uc2lkZXJlZCAnZW5kIG5vZGVzJyBvciAnbGVhdmVzJyBvZiB0aGUgZm9ybSBhbmQgdGhlaXIgY2hpbGRyZW4vZm9ybUVsZW1lbnRzXG4gKiBjYW5ub3QgYmUgYWNjZXNzZWQgaW5kaXZpZHVhbGx5IHZpYSBvYmplY3Qga2V5cy5cbiAqXG4gKiBAY3VzdG9tRWxlbWVudCBsaW9uLWZpZWxkc2V0XG4gKi9cbmV4cG9ydCBjbGFzcyBMaW9uRmllbGRzZXQgZXh0ZW5kcyBGb3JtR3JvdXBNaXhpbihMaXRFbGVtZW50KSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqXG4gICAgICogQG92ZXJyaWRlIEZvcm1SZWdpc3RyYXJNaXhpblxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICB0aGlzLl9pc0Zvcm1PckZpZWxkc2V0ID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7J2NoaWxkJyB8ICdjaG9pY2UtZ3JvdXAnIHwgJ2ZpZWxkc2V0J31cbiAgICAgKiBAb3ZlcnJpZGUgRm9ybUNvbnRyb2xNaXhpblxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICB0aGlzLl9yZXByb3BhZ2F0aW9uUm9sZSA9ICdmaWVsZHNldCc7XG4gIH1cbn1cbiIsImltcG9ydCB7IExpb25GaWVsZHNldCB9IGZyb20gJ0BsaW9uL2ZpZWxkc2V0JztcblxuY29uc3QgdGhyb3dGb3JtTm9kZUVycm9yID0gKCkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ05vIGZvcm0gbm9kZSBmb3VuZC4gRGlkIHlvdSBwdXQgYSA8Zm9ybT4gZWxlbWVudCBpbnNpZGUgeW91ciBjdXN0b20tZm9ybSBlbGVtZW50PycsXG4gICk7XG59O1xuXG4vKipcbiAqIExpb25Gb3JtOiBmb3JtIHdyYXBwZXIgcHJvdmlkaW5nIGV4dHJhIGZlYXR1cmVzIGFuZCBpbnRlZ3JhdGlvbiB3aXRoIGxpb24tZmllbGQgZWxlbWVudHMuXG4gKlxuICogQGN1c3RvbUVsZW1lbnQgbGlvbi1mb3JtXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuZXhwb3J0IGNsYXNzIExpb25Gb3JtIGV4dGVuZHMgTGlvbkZpZWxkc2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKiogQHByb3RlY3RlZCAqL1xuICAgIHRoaXMuX3N1Ym1pdCA9IHRoaXMuX3N1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIC8qKiBAcHJvdGVjdGVkICovXG4gICAgdGhpcy5fcmVzZXQgPSB0aGlzLl9yZXNldC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLl9fcmVnaXN0ZXJFdmVudHNGb3JMaW9uRm9ybSgpO1xuXG4gICAgLy8gQG92ZXJyaWRlIExpb25GaWVsZHNldDogbWFrZXMgc3VyZSBhMTF5IGlzIGhhbmRsZWQgYnkgLl9mb3JtTm9kZVxuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdyb2xlJyk7XG4gIH1cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuX190ZWFyZG93bkV2ZW50c0Zvckxpb25Gb3JtKCk7XG4gIH1cblxuICBnZXQgX2Zvcm1Ob2RlKCkge1xuICAgIHJldHVybiAvKiogQHR5cGUge0hUTUxGb3JtRWxlbWVudH0gKi8gKHRoaXMucXVlcnlTZWxlY3RvcignZm9ybScpKTtcbiAgfVxuXG4gIHN1Ym1pdCgpIHtcbiAgICBpZiAodGhpcy5fZm9ybU5vZGUpIHtcbiAgICAgIC8vIEZpcmVmb3ggcmVxdWlyZXMgY2FuY2VsYWJsZSBmbGFnLCBvdGhlcndpc2Ugd2UgY2Fubm90IHByZXZlbnREZWZhdWx0XG4gICAgICAvLyBGaXJlZm94IHN0aWxsIHJ1bnMgZGVmYXVsdCBoYW5kbGVycyBmb3IgdW50cnVzdGVkIGV2ZW50cyA6XFxcbiAgICAgIHRoaXMuX2Zvcm1Ob2RlLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdzdWJtaXQnLCB7IGNhbmNlbGFibGU6IHRydWUgfSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvd0Zvcm1Ob2RlRXJyb3IoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtFdmVudH0gZXZcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3N1Ym1pdChldikge1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5zdWJtaXRHcm91cCgpO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3N1Ym1pdCcsIHsgYnViYmxlczogdHJ1ZSB9KSk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICBpZiAodGhpcy5fZm9ybU5vZGUpIHtcbiAgICAgIHRoaXMuX2Zvcm1Ob2RlLnJlc2V0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93Rm9ybU5vZGVFcnJvcigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBldlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfcmVzZXQoZXYpIHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMucmVzZXRHcm91cCgpO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Jlc2V0JywgeyBidWJibGVzOiB0cnVlIH0pKTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBfX3JlZ2lzdGVyRXZlbnRzRm9yTGlvbkZvcm0oKSB7XG4gICAgdGhpcy5fZm9ybU5vZGUuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5fc3VibWl0KTtcbiAgICB0aGlzLl9mb3JtTm9kZS5hZGRFdmVudExpc3RlbmVyKCdyZXNldCcsIHRoaXMuX3Jlc2V0KTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBfX3RlYXJkb3duRXZlbnRzRm9yTGlvbkZvcm0oKSB7XG4gICAgdGhpcy5fZm9ybU5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5fc3VibWl0KTtcbiAgICB0aGlzLl9mb3JtTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNldCcsIHRoaXMuX3Jlc2V0KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgZGVkdXBlTWl4aW4gfSBmcm9tICdAbGlvbi9jb3JlJztcblxuY29uc3Qgd2luZG93V2l0aE9wdGlvbmFsUG9seWZpbGwgPVxuICAvKiogQHR5cGUge1dpbmRvdyAmIHR5cGVvZiBnbG9iYWxUaGlzICYge2FwcGx5Rm9jdXNWaXNpYmxlUG9seWZpbGw/OiBmdW5jdGlvbn19ICovICh3aW5kb3cpO1xuY29uc3QgcG9seWZpbGxlZE5vZGVzID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqL1xuZnVuY3Rpb24gYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbFdoZW5OZWVkZWQobm9kZSkge1xuICBpZiAod2luZG93V2l0aE9wdGlvbmFsUG9seWZpbGwuYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbCAmJiAhcG9seWZpbGxlZE5vZGVzLmhhcyhub2RlKSkge1xuICAgIHdpbmRvd1dpdGhPcHRpb25hbFBvbHlmaWxsLmFwcGx5Rm9jdXNWaXNpYmxlUG9seWZpbGwobm9kZSk7XG4gICAgcG9seWZpbGxlZE5vZGVzLnNldChub2RlLCB1bmRlZmluZWQpO1xuICB9XG59XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMvRm9jdXNNaXhpblR5cGVzJykuRm9jdXNNaXhpbn0gRm9jdXNNaXhpblxuICogQHR5cGUge0ZvY3VzTWl4aW59XG4gKiBAcGFyYW0ge2ltcG9ydCgnQG9wZW4td2MvZGVkdXBlLW1peGluJykuQ29uc3RydWN0b3I8aW1wb3J0KCdAbGlvbi9jb3JlJykuTGl0RWxlbWVudD59IHN1cGVyY2xhc3NcbiAqL1xuY29uc3QgRm9jdXNNaXhpbkltcGxlbWVudGF0aW9uID0gc3VwZXJjbGFzcyA9PlxuICAvLyBAdHMtaWdub3JlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzY4MjEjaXNzdWVjb21tZW50LTU4ODM3NTA1MVxuICBjbGFzcyBGb2N1c01peGluIGV4dGVuZHMgc3VwZXJjbGFzcyB7XG4gICAgLyoqIEB0eXBlIHthbnl9ICovXG4gICAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZm9jdXNlZDogeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0sXG4gICAgICAgIGZvY3VzZWRWaXNpYmxlOiB7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUsIGF0dHJpYnV0ZTogJ2ZvY3VzZWQtdmlzaWJsZScgfSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuXG4gICAgICAvKipcbiAgICAgICAqIFdoZXRoZXIgdGhlIGZvY3VzYWJsZSBlbGVtZW50IHdpdGhpbiAoYC5fZm9jdXNhYmxlTm9kZWApIGlzIGZvY3VzZWQuXG4gICAgICAgKiBSZWZsZWN0cyB0byBhdHRyaWJ1dGUgJ1tmb2N1c2VkXScgYXMgYSBzdHlsaW5nIGhvb2tcbiAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICovXG4gICAgICB0aGlzLmZvY3VzZWQgPSBmYWxzZTtcblxuICAgICAgLyoqXG4gICAgICAgKiBXaGV0aGVyIHRoZSBmb2N1c2FibGUgZWxlbWVudCB3aXRoaW4gKGAuX2ZvY3VzYWJsZU5vZGVgKSBtYXRjaGVzICc6Zm9jdXMtdmlzaWJsZSdcbiAgICAgICAqIFJlZmxlY3RzIHRvIGF0dHJpYnV0ZSAnW2ZvY3VzZWQtdmlzaWJsZV0nIGFzIGEgc3R5bGluZyBob29rXG4gICAgICAgKiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy86Zm9jdXMtdmlzaWJsZVxuICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgKi9cbiAgICAgIHRoaXMuZm9jdXNlZFZpc2libGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICB0aGlzLl9fcmVnaXN0ZXJFdmVudHNGb3JGb2N1c01peGluKCk7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgdGhpcy5fX3RlYXJkb3duRXZlbnRzRm9yRm9jdXNNaXhpbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxzIGBmb2N1cygpYCBvbiBmb2N1c2FibGUgZWxlbWVudCB3aXRoaW5cbiAgICAgKi9cbiAgICBmb2N1cygpIHtcbiAgICAgIHRoaXMuX2ZvY3VzYWJsZU5vZGU/LmZvY3VzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbHMgYGJsdXIoKWAgb24gZm9jdXNhYmxlIGVsZW1lbnQgd2l0aGluXG4gICAgICovXG4gICAgYmx1cigpIHtcbiAgICAgIHRoaXMuX2ZvY3VzYWJsZU5vZGU/LmJsdXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZm9jdXNhYmxlIGVsZW1lbnQ6XG4gICAgICogY291bGQgYmUgYW4gaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QsIGJ1dHRvbiBvciBhbnkgb3RoZXIgZWxlbWVudCB3aXRoIHRhYmluZGV4ID4gLTFcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHR5cGUge0hUTUxFbGVtZW50fVxuICAgICAqL1xuICAgIC8vIEB0cy1pZ25vcmUgaXQncyB1cCB0byBTdWJjbGFzc2VycyB0byByZXR1cm4gdGhlIHJpZ2h0IGVsZW1lbnQuIFRoaXMgaXMgbmVlZGVkIGZvciBkb2NzL3R5cGVzXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMsIGdldHRlci1yZXR1cm4sIG5vLWVtcHR5LWZ1bmN0aW9uXG4gICAgZ2V0IF9mb2N1c2FibGVOb2RlKCkge1xuICAgICAgLy8gVE9ETzogW3YxXTogcmVtb3ZlIHJldHVybiBvZiBfaW5wdXROb2RlIChpdCdzIG5vdyBoZXJlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSlcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igc2VlIGFib3ZlXG4gICAgICByZXR1cm4gLyoqIEB0eXBlIHtIVE1MRWxlbWVudH0gKi8gKHRoaXMuX2lucHV0Tm9kZSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9fb25Gb2N1cygpIHtcbiAgICAgIHRoaXMuZm9jdXNlZCA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2Ygd2luZG93V2l0aE9wdGlvbmFsUG9seWZpbGwuYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLmZvY3VzZWRWaXNpYmxlID0gdGhpcy5fZm9jdXNhYmxlTm9kZS5oYXNBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZCcpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gU2FmYXJpIHRocm93cyB3aGVuIG1hdGNoZXMgaXMgY2FsbGVkXG4gICAgICAgICAgdGhpcy5mb2N1c2VkVmlzaWJsZSA9IHRoaXMuX2ZvY3VzYWJsZU5vZGUubWF0Y2hlcygnOmZvY3VzLXZpc2libGUnKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHRoaXMuZm9jdXNlZFZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX19vbkJsdXIoKSB7XG4gICAgICB0aGlzLmZvY3VzZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZm9jdXNlZFZpc2libGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9fcmVnaXN0ZXJFdmVudHNGb3JGb2N1c01peGluKCkge1xuICAgICAgYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbFdoZW5OZWVkZWQodGhpcy5nZXRSb290Tm9kZSgpKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBmb2N1c1xuICAgICAgICogQHBhcmFtIHtFdmVudH0gZXZcbiAgICAgICAqL1xuICAgICAgdGhpcy5fX3JlZGlzcGF0Y2hGb2N1cyA9IGV2ID0+IHtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2ZvY3VzJykpO1xuICAgICAgfTtcbiAgICAgIHRoaXMuX2ZvY3VzYWJsZU5vZGUuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9fcmVkaXNwYXRjaEZvY3VzKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBibHVyXG4gICAgICAgKiBAcGFyYW0ge0V2ZW50fSBldlxuICAgICAgICovXG4gICAgICB0aGlzLl9fcmVkaXNwYXRjaEJsdXIgPSBldiA9PiB7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdibHVyJykpO1xuICAgICAgfTtcbiAgICAgIHRoaXMuX2ZvY3VzYWJsZU5vZGUuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMuX19yZWRpc3BhdGNoQmx1cik7XG5cbiAgICAgIC8qKlxuICAgICAgICogZm9jdXNpblxuICAgICAgICogQHBhcmFtIHtFdmVudH0gZXZcbiAgICAgICAqL1xuICAgICAgdGhpcy5fX3JlZGlzcGF0Y2hGb2N1c2luID0gZXYgPT4ge1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy5fX29uRm9jdXMoKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnZm9jdXNpbicsIHsgYnViYmxlczogdHJ1ZSwgY29tcG9zZWQ6IHRydWUgfSkpO1xuICAgICAgfTtcbiAgICAgIHRoaXMuX2ZvY3VzYWJsZU5vZGUuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIHRoaXMuX19yZWRpc3BhdGNoRm9jdXNpbik7XG5cbiAgICAgIC8qKlxuICAgICAgICogZm9jdXNvdXRcbiAgICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2XG4gICAgICAgKi9cbiAgICAgIHRoaXMuX19yZWRpc3BhdGNoRm9jdXNvdXQgPSBldiA9PiB7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLl9fb25CbHVyKCk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2ZvY3Vzb3V0JywgeyBidWJibGVzOiB0cnVlLCBjb21wb3NlZDogdHJ1ZSB9KSk7XG4gICAgICB9O1xuICAgICAgdGhpcy5fZm9jdXNhYmxlTm9kZS5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIHRoaXMuX19yZWRpc3BhdGNoRm9jdXNvdXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX190ZWFyZG93bkV2ZW50c0ZvckZvY3VzTWl4aW4oKSB7XG4gICAgICB0aGlzLl9mb2N1c2FibGVOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICdmb2N1cycsXG4gICAgICAgIC8qKiBAdHlwZSB7RXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdH0gKi8gKHRoaXMuX19yZWRpc3BhdGNoRm9jdXMpLFxuICAgICAgKTtcbiAgICAgIHRoaXMuX2ZvY3VzYWJsZU5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgJ2JsdXInLFxuICAgICAgICAvKiogQHR5cGUge0V2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3R9ICovICh0aGlzLl9fcmVkaXNwYXRjaEJsdXIpLFxuICAgICAgKTtcbiAgICAgIHRoaXMuX2ZvY3VzYWJsZU5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgJ2ZvY3VzaW4nLFxuICAgICAgICAvKiogQHR5cGUge0V2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3R9ICovICh0aGlzLl9fcmVkaXNwYXRjaEZvY3VzaW4pLFxuICAgICAgKTtcbiAgICAgIHRoaXMuX2ZvY3VzYWJsZU5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgJ2ZvY3Vzb3V0JyxcbiAgICAgICAgLyoqIEB0eXBlIHtFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0fSAqLyAodGhpcy5fX3JlZGlzcGF0Y2hGb2N1c291dCksXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBGb3IgYnJvd3NlcnMgdGhhdCBub3Qgc3VwcG9ydCB0aGUgW3NwZWNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy86Zm9jdXMtdmlzaWJsZSksXG4gKiBiZSBzdXJlIHRvIGxvYWQgdGhlIHBvbHlmaWxsIGludG8geW91ciBhcHBsaWNhdGlvbiBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlXG4gKiAob3IgZ28gZm9yIHByb2dyZXNzaXZlIGVuaGFuY2VtZW50KS5cbiAqL1xuZXhwb3J0IGNvbnN0IEZvY3VzTWl4aW4gPSBkZWR1cGVNaXhpbihGb2N1c01peGluSW1wbGVtZW50YXRpb24pO1xuIiwiLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuXG5pbXBvcnQgeyBkZWR1cGVNaXhpbiB9IGZyb20gJ0BsaW9uL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2xNaXhpbiB9IGZyb20gJy4vRm9ybUNvbnRyb2xNaXhpbi5qcyc7XG5pbXBvcnQgeyBVbnBhcnNlYWJsZSB9IGZyb20gJy4vdmFsaWRhdGUvVW5wYXJzZWFibGUuanMnO1xuaW1wb3J0IHsgVmFsaWRhdGVNaXhpbiB9IGZyb20gJy4vdmFsaWRhdGUvVmFsaWRhdGVNaXhpbi5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMvRm9ybWF0TWl4aW5UeXBlcycpLkZvcm1hdE1peGlufSBGb3JtYXRNaXhpblxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMvRm9ybWF0TWl4aW5UeXBlcycpLkZvcm1hdE9wdGlvbnN9IEZvcm1hdE9wdGlvbnNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzL0Zvcm1Db250cm9sTWl4aW5UeXBlcy5qcycpLk1vZGVsVmFsdWVFdmVudERldGFpbHN9IE1vZGVsVmFsdWVFdmVudERldGFpbHNcbiAqL1xuXG4vLyBGb3IgYSBmdXR1cmUgYnJlYWtpbmcgcmVsZWFzZTpcbi8vIC0gZG8gbm90IGFsbG93IHRoZSBwcml2YXRlIGAuZm9ybWF0dGVkVmFsdWVgIGFzIHByb3BlcnR5IHRoYXQgY2FuIGJlIHNldCB0b1xuLy8gdHJpZ2dlciBhIGNvbXB1dGF0aW9uIGxvb3AuXG4vLyAtIGRvIG5vdCBmaXJlIGV2ZW50cyBmb3IgdGhvc2UgcHJpdmF0ZSBhbmQgcHJvdGVjdGVkIGNvbmNlcHRzXG4vLyAtIHNpbXBsaWZ5IF9jYWxjdWxhdGVWYWx1ZXM6IHJlY3Vyc2l2ZSB0cmlnZ2VyIGxvY2sgY2FuIGJlIG9taXR0ZWQsIHNpbmNlIG5lZWQgZm9yIGNvbm5lY3Rpbmdcbi8vIHRoZSBsb29wIHZpYSBzeW5jIG9ic2VydmVycyBpcyBub3QgbmVlZGVkIGFueW1vcmUuXG4vLyAtIGNvbnNpZGVyIGBmb3JtYXRPbmAgYXMgYW4gb3ZlcnJpZGFibGUgZnVuY3Rpb24sIGJ5IGRlZmF1bHQgc29tZXRoaW5nIGxpa2U6XG4vLyBgKCFfaXNIYW5kbGluZ1VzZXJJbnB1dCB8fCAhaGFzRXJyb3IpICYmICFmb2N1c2VkYFxuLy8gVGhpcyB3b3VsZCBhbGxvdyBmb3IgbW9yZSBhZHZhbmNlZCBzY2VuYXJpb3MsIGxpa2UgZm9ybWF0dGluZyBhbiBpbnB1dCB3aGVuZXZlciBpdCBiZWNvbWVzIHZhbGlkLlxuLy8gVGhpcyB3b3VsZCBtYWtlIGZvcm1hdHRlZFZhbHVlIGFzIGEgY29uY2VwdCBvYnNvbGV0ZSwgc2luY2UgZm9yIG1heGltdW0gZmxleGliaWxpdHksIHRoZVxuLy8gZm9ybWF0dGVkVmFsdWUgY29uZGl0aW9uIG5lZWRzIHRvIGJlIGV2YWx1YXRlZCByaWdodCBiZWZvcmUgc3luY2luZyBiYWNrIHRvIHRoZSB2aWV3XG5cbi8qKlxuICogQGRlc2MgRGVzaWduZWQgdG8gYmUgYXBwbGllZCBvbiB0b3Agb2YgYSBMaW9uRmllbGQuXG4gKiBUbyB1bmRlcnN0YW5kIGFsbCBjb25jZXB0cyB3aXRoaW4gdGhlIE1peGluLCBwbGVhc2UgY29uc3VsdCB0aGUgZmxvdyBkaWFncmFtIGluIHRoZVxuICogZG9jdW1lbnRhdGlvbi5cbiAqXG4gKiAjIyBGbG93c1xuICogRm9ybWF0TWl4aW4gc3VwcG9ydHMgdGhlc2UgdHdvIG1haW4gZmxvd3M6XG4gKiBbMV0gQXBwbGljYXRpb24gRGV2ZWxvcGVyIHNldHMgYC5tb2RlbFZhbHVlYDpcbiAqICAgICBGbG93OiBgLm1vZGVsVmFsdWVgIChmb3JtYXR0ZXIpIC0+IGAuZm9ybWF0dGVkVmFsdWVgIC0+IGAuX2lucHV0Tm9kZS52YWx1ZWBcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIChzZXJpYWxpemVyKSAtPiBgLnNlcmlhbGl6ZWRWYWx1ZWBcbiAqIFsyXSBFbmQgdXNlciBpbnRlcmFjdHMgd2l0aCBmaWVsZDpcbiAqICAgICBGbG93OiBgQHVzZXItaW5wdXQtY2hhbmdlZGAgKHBhcnNlcikgLT4gYC5tb2RlbFZhbHVlYCAoZm9ybWF0dGVyKSAtPiBgLmZvcm1hdHRlZFZhbHVlYCAtIChkZWJvdW5jZSB0aWxsIHJlZmxlY3QgY29uZGl0aW9uIChmb3JtYXRPbikgaXMgbWV0KSAtPiBgLl9pbnB1dE5vZGUudmFsdWVgXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzZXJpYWxpemVyKSAtPiBgLnNlcmlhbGl6ZWRWYWx1ZWBcbiAqXG4gKiBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCB0aGUgcGxhdGZvcm0sIHdlIGFsc28gc3VwcG9ydCBgLnZhbHVlYCBhcyBhbiBhcGkuIEluIHRoYXQgY2FzZVxuICogdGhlIGZsb3cgd2lsbCBiZSBsaWtlIFsyXSwgd2l0aG91dCB0aGUgZGVib3VuY2UuXG4gKlxuICogIyMgRGlmZmVyZW5jZSBiZXR3ZWVuIHZhbHVlLCB2aWV3VmFsdWUgYW5kIGZvcm1hdHRlZFZhbHVlXG4gKiBBIHZpZXdWYWx1ZSBpcyBhIGNvbmNlcHQgcmF0aGVyIHRoYW4gYSBwcm9wZXJ0eS4gVG8gYmUgY29tcGF0aWJsZSB3aXRoIHRoZSBwbGF0Zm9ybSBhcGksIHRoZVxuICogcHJvcGVydHkgZm9yIHRoZSBjb25jZXB0IG9mIHZpZXdWYWx1ZSBpcyB0aHVzIGNhbGxlZCBgLnZhbHVlYC5cbiAqIFdoZW4gcmVhZGluZyBjb2RlIGFuZCBkb2NzLCBvbmUgc2hvdWxkIGJlIGF3YXJlIHRoYXQgdGhlIHRlcm0gdmlld1ZhbHVlIGlzIG1vc3RseSB1c2VkLCBidXQgdGhlXG4gKiB0ZXJtcyBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkuXG4gKiBUaGUgYC5mb3JtYXR0ZWRWYWx1ZWAgc2hvdWxkIGJlIHNlZW4gYXMgdGhlICdzY2hlZHVsZWQnIHZpZXdWYWx1ZS4gSXQgaXMgY29tcHV0ZWQgcmVhbHRpbWUgYW5kXG4gKiBzdG9yZXMgdGhlIG91dHB1dCBvZiBmb3JtYXR0ZXIuIEl0IHdpbGwgcmVwbGFjZSB2aWV3VmFsdWUuIG9uY2UgY29uZGl0aW9uIGBmb3JtYXRPbmAgaXMgbWV0LlxuICogQW5vdGhlciBkaWZmZXJlbmNlIGlzIHRoYXQgZm9ybWF0dGVkVmFsdWUgbGl2ZXMgb24gYExpb25GaWVsZGAsIHdoZXJlYXMgdmlld1ZhbHVlIGlzIHNoYXJlZFxuICogYWNyb3NzIGBMaW9uRmllbGRgIGFuZCBgLl9pbnB1dE5vZGVgLlxuICpcbiAqIEZvciByZXN0b3Jpbmcgc2VyaWFsaXplZCB2YWx1ZXMgZmV0Y2hlZCBmcm9tIGEgc2VydmVyLCB3ZSBjb3VsZCBjb25zaWRlciBvbmUgZXh0cmEgZmxvdzpcbiAqIFszXSBBcHBsaWNhdGlvbiBEZXZlbG9wZXIgc2V0cyBgLnNlcmlhbGl6ZWRWYWx1ZWA6XG4gKiAgICAgRmxvdzogc2VyaWFsaXplZFZhbHVlIChkZXNlcmlhbGl6ZXIpIC0+IGAubW9kZWxWYWx1ZWAgKGZvcm1hdHRlcikgLT4gYC5mb3JtYXR0ZWRWYWx1ZWAgLT4gYC5faW5wdXROb2RlLnZhbHVlYFxuICpcbiAqIEB0eXBlIHtGb3JtYXRNaXhpbn1cbiAqIEBwYXJhbSB7aW1wb3J0KCdAb3Blbi13Yy9kZWR1cGUtbWl4aW4nKS5Db25zdHJ1Y3RvcjxpbXBvcnQoJ0BsaW9uL2NvcmUnKS5MaXRFbGVtZW50Pn0gc3VwZXJjbGFzc1xuICovXG5jb25zdCBGb3JtYXRNaXhpbkltcGxlbWVudGF0aW9uID0gc3VwZXJjbGFzcyA9PlxuICAvLyBAdHMtaWdub3JlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzY4MjEjaXNzdWVjb21tZW50LTU4ODM3NTA1MVxuICBjbGFzcyBGb3JtYXRNaXhpbiBleHRlbmRzIFZhbGlkYXRlTWl4aW4oRm9ybUNvbnRyb2xNaXhpbihzdXBlcmNsYXNzKSkge1xuICAgIC8qKiBAdHlwZSB7YW55fSAqL1xuICAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZvcm1hdHRlZFZhbHVlOiB7IGF0dHJpYnV0ZTogZmFsc2UgfSxcbiAgICAgICAgc2VyaWFsaXplZFZhbHVlOiB7IGF0dHJpYnV0ZTogZmFsc2UgfSxcbiAgICAgICAgZm9ybWF0T3B0aW9uczogeyBhdHRyaWJ1dGU6IGZhbHNlIH0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHthbnl9IG9sZFZhbFxuICAgICAqL1xuICAgIHJlcXVlc3RVcGRhdGUobmFtZSwgb2xkVmFsKSB7XG4gICAgICBzdXBlci5yZXF1ZXN0VXBkYXRlKG5hbWUsIG9sZFZhbCk7XG5cbiAgICAgIGlmIChuYW1lID09PSAnbW9kZWxWYWx1ZScgJiYgdGhpcy5tb2RlbFZhbHVlICE9PSBvbGRWYWwpIHtcbiAgICAgICAgdGhpcy5fb25Nb2RlbFZhbHVlQ2hhbmdlZCh7IG1vZGVsVmFsdWU6IHRoaXMubW9kZWxWYWx1ZSB9LCB7IG1vZGVsVmFsdWU6IG9sZFZhbCB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lID09PSAnc2VyaWFsaXplZFZhbHVlJyAmJiB0aGlzLnNlcmlhbGl6ZWRWYWx1ZSAhPT0gb2xkVmFsKSB7XG4gICAgICAgIHRoaXMuX2NhbGN1bGF0ZVZhbHVlcyh7IHNvdXJjZTogJ3NlcmlhbGl6ZWQnIH0pO1xuICAgICAgfVxuICAgICAgaWYgKG5hbWUgPT09ICdmb3JtYXR0ZWRWYWx1ZScgJiYgdGhpcy5mb3JtYXR0ZWRWYWx1ZSAhPT0gb2xkVmFsKSB7XG4gICAgICAgIHRoaXMuX2NhbGN1bGF0ZVZhbHVlcyh7IHNvdXJjZTogJ2Zvcm1hdHRlZCcgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHZpZXcgdmFsdWUuIFdpbGwgYmUgZGVsZWdhdGVkIHRvIGAuX2lucHV0Tm9kZS52YWx1ZWBcbiAgICAgKi9cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICByZXR1cm4gKHRoaXMuX2lucHV0Tm9kZSAmJiB0aGlzLl9pbnB1dE5vZGUudmFsdWUpIHx8IHRoaXMuX192YWx1ZSB8fCAnJztcbiAgICB9XG5cbiAgICAvKiogQHBhcmFtIHtzdHJpbmd9IHZhbHVlICovXG4gICAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgICAvLyBpZiBub3QgeWV0IGNvbm5lY3RlZCB0byBkb20gY2FuJ3QgY2hhbmdlIHRoZSB2YWx1ZVxuICAgICAgaWYgKHRoaXMuX2lucHV0Tm9kZSkge1xuICAgICAgICB0aGlzLl9pbnB1dE5vZGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgLyoqIEB0eXBlIHtzdHJpbmcgfCB1bmRlZmluZWR9ICovXG4gICAgICAgIHRoaXMuX192YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX192YWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByZXByb2Nlc3NvcnMgY291bGQgYmUgY29uc2lkZXJlZCAnbGl2ZSBmb3JtYXR0ZXJzJy4gVGhlaXIgcmVzdWx0IGlzIHNob3duIHRvIHRoZSB1c2VyXG4gICAgICogb24ga2V5dXAgaW5zdGVhZCBvZiBhZnRlciBibHVycmluZyB0aGUgZmllbGQuIFRoZSBiaWdnZXN0IGRpZmZlcmVuY2UgYmV0d2VlbiBwcmVwcm9jZXNzb3JzXG4gICAgICogYW5kIGZvcm1hdHRlcnMgaXMgdGhlaXIgbW9tZW50IG9mIGV4ZWN1dGlvbjogcHJlcHJvY2Vzc29ycyBhcmUgcnVuIGJlZm9yZSBtb2RlbFZhbHVlIGlzXG4gICAgICogY29tcHV0ZWQgKGFuZCB3b3JrIGJhc2VkIG9uIHZpZXcgdmFsdWUpLCB3aGVyZWFzIGZvcm1hdHRlcnMgYXJlIHJ1biBhZnRlciB0aGUgcGFyc2VyIChhbmRcbiAgICAgKiBhcmUgYmFzZWQgb24gbW9kZWxWYWx1ZSlcbiAgICAgKiBBdXRvbWF0aWNhbGx5IGZvcm1hdHMgY29kZSB3aGlsZSB0eXBpbmcuIEl0IGRlcGVuZHMgb24gYSBwcmVwcm9jZXNzcm8gdGhhdCBzbWFydGx5XG4gICAgICogdXBkYXRlcyB0aGUgdmlld1ZhbHVlIGFuZCBjYXJldCBwb3NpdGlvbiBmb3IgYmVzdCBVWC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGpzXG4gICAgICogcHJlcHJvY2Vzc29yKHZpZXdWYWx1ZSkge1xuICAgICAqICAgLy8gb25seSB1c2UgZGlnaXRzXG4gICAgICogICByZXR1cm4gdmlld1ZhbHVlLnJlcGxhY2UoL1xcRC9nLCAnJyk7XG4gICAgICogfVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2IC0gdGhlIHJhdyB2YWx1ZSBmcm9tIHRoZSA8aW5wdXQ+IGFmdGVyIGtleVVwL0Rvd24gZXZlbnRcbiAgICAgKiBAcGFyYW0ge0Zvcm1hdE9wdGlvbnMgJiB7IHByZXZWaWV3VmFsdWU6IHN0cmluZzsgY3VycmVudENhcmV0SW5kZXg6IG51bWJlciB9fSBvcHRzIC0gdGhlIHJhdyB2YWx1ZSBmcm9tIHRoZSA8aW5wdXQ+IGFmdGVyIGtleVVwL0Rvd24gZXZlbnRcbiAgICAgKiBAcmV0dXJucyB7eyB2aWV3VmFsdWU6c3RyaW5nOyBjYXJldEluZGV4Om51bWJlcjsgfXxzdHJpbmd8dW5kZWZpbmVkfSBwcmVwcm9jZXNzZWRWYWx1ZTogdGhlIHJlc3VsdCBvZiBwcmVwcm9jZXNzaW5nIGZvciBpbnZhbGlkIGlucHV0XG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgcHJlcHJvY2Vzc29yKHYsIG9wdHMpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdmlld1ZhbHVlIHRvIG1vZGVsVmFsdWVcbiAgICAgKiBGb3IgaW5zdGFuY2UsIGEgbG9jYWxpemVkIGRhdGUgdG8gYSBEYXRlIE9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2IC0gdmlld1ZhbHVlOiB0aGUgZm9ybWF0dGVkIHZhbHVlIGluc2lkZSA8aW5wdXQ+XG4gICAgICogQHBhcmFtIHtGb3JtYXRPcHRpb25zfSBvcHRzXG4gICAgICogQHJldHVybnMgeyp9IG1vZGVsVmFsdWVcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBwYXJzZXIodiwgb3B0cykge1xuICAgICAgcmV0dXJuIHY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgbW9kZWxWYWx1ZSB0byBmb3JtYXR0ZWRWYWx1ZSAoZm9ybWF0dGVkVmFsdWUgd2lsbCBiZSBzeW5jZWQgd2l0aFxuICAgICAqIGAuX2lucHV0Tm9kZS52YWx1ZWApXG4gICAgICogRm9yIGluc3RhbmNlLCBhIERhdGUgb2JqZWN0IHRvIGEgbG9jYWxpemVkIGRhdGUuXG4gICAgICogQHBhcmFtIHsqfSB2IC0gbW9kZWxWYWx1ZTogY2FuIGJlIGFuIE9iamVjdCwgTnVtYmVyLCBTdHJpbmcgZGVwZW5kaW5nIG9uIHRoZVxuICAgICAqIGlucHV0IHR5cGUoZGF0ZSwgbnVtYmVyLCBlbWFpbCBldGMpXG4gICAgICogQHBhcmFtIHtGb3JtYXRPcHRpb25zfSBvcHRzXG4gICAgICogQHJldHVybnMge3N0cmluZ30gZm9ybWF0dGVkVmFsdWVcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBmb3JtYXR0ZXIodiwgb3B0cykge1xuICAgICAgcmV0dXJuIHY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYC5tb2RlbFZhbHVlYCB0byBgLnNlcmlhbGl6ZWRWYWx1ZWBcbiAgICAgKiBGb3IgaW5zdGFuY2UsIGEgRGF0ZSBvYmplY3QgdG8gYW4gaXNvIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICAgICAqIEBwYXJhbSB7P30gdiAtIG1vZGVsVmFsdWU6IGNhbiBiZSBhbiBPYmplY3QsIE51bWJlciwgU3RyaW5nIGRlcGVuZGluZyBvbiB0aGVcbiAgICAgKiBpbnB1dCB0eXBlKGRhdGUsIG51bWJlciwgZW1haWwgZXRjKVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHNlcmlhbGl6ZWRWYWx1ZVxuICAgICAqL1xuICAgIHNlcmlhbGl6ZXIodikge1xuICAgICAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCA/IHYgOiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgLnNlcmlhbGl6ZWRWYWx1ZWAgdG8gYC5tb2RlbFZhbHVlYFxuICAgICAqIEZvciBpbnN0YW5jZSwgYW4gaXNvIGZvcm1hdHRlZCBkYXRlIHN0cmluZyB0byBhIERhdGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHs/fSB2IC0gbW9kZWxWYWx1ZTogY2FuIGJlIGFuIE9iamVjdCwgTnVtYmVyLCBTdHJpbmcgZGVwZW5kaW5nIG9uIHRoZVxuICAgICAqIGlucHV0IHR5cGUoZGF0ZSwgbnVtYmVyLCBlbWFpbCBldGMpXG4gICAgICogQHJldHVybnMgez99IG1vZGVsVmFsdWVcbiAgICAgKi9cbiAgICBkZXNlcmlhbGl6ZXIodikge1xuICAgICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCA/ICcnIDogdjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNwb25zaWJsZSBmb3Igc3RvcmluZyBhbGwgcmVwcmVzZW50YXRpb25zKG1vZGVsVmFsdWUsIHNlcmlhbGl6ZWRWYWx1ZSwgZm9ybWF0dGVkVmFsdWVcbiAgICAgKiBhbmQgdmFsdWUpIG9mIHRoZSBpbnB1dCB2YWx1ZS4gUHJldmVudHMgaW5maW5pdGUgbG9vcHMsIHNvIGFsbCB2YWx1ZSBvYnNlcnZlcnMgY2FuIGJlXG4gICAgICogdHJlYXRlZCBsaWtlIHRoZXkgd2lsbCBvbmx5IGJlIGNhbGxlZCBvbmNlLCB3aXRob3V0IGluZGlyZWN0bHkgY2FsbGluZyBvdGhlciBvYnNlcnZlcnMuXG4gICAgICogKGluIGZhY3QsIHNvbWUgYXJlIGNhbGxlZCB0d2ljZSwgYnV0IHRoZSBfX3ByZXZlbnRSZWN1cnNpdmVUcmlnZ2VyIGxvY2sgcHJldmVudHMgdGhlXG4gICAgICogc2Vjb25kIGNhbGwgZnJvbSBoYXZpbmcgZWZmZWN0KS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7e3NvdXJjZTonbW9kZWwnfCdzZXJpYWxpemVkJ3wnZm9ybWF0dGVkJ3xudWxsfX0gY29uZmlnIC0gdGhlIHR5cGUgb2YgdmFsdWUgdGhhdCB0cmlnZ2VyZWQgdGhpcyBtZXRob2QuIEl0IHNob3VsZCBub3QgYmVcbiAgICAgKiBzZXQgYWdhaW4sIHNvIHRoYXQgaXRzIG9ic2VydmVyIHdvbid0IGJlIHRyaWdnZXJlZC4gQ2FuIGJlOlxuICAgICAqICdtb2RlbCd8J2Zvcm1hdHRlZCd8J3NlcmlhbGl6ZWQnLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfY2FsY3VsYXRlVmFsdWVzKHsgc291cmNlIH0gPSB7IHNvdXJjZTogbnVsbCB9KSB7XG4gICAgICBpZiAodGhpcy5fX3ByZXZlbnRSZWN1cnNpdmVUcmlnZ2VyKSByZXR1cm47IC8vIHByZXZlbnQgaW5maW5pdGUgbG9vcHNcblxuICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgdGhpcy5fX3ByZXZlbnRSZWN1cnNpdmVUcmlnZ2VyID0gdHJ1ZTtcbiAgICAgIGlmIChzb3VyY2UgIT09ICdtb2RlbCcpIHtcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gJ3NlcmlhbGl6ZWQnKSB7XG4gICAgICAgICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgICAgICAgIHRoaXMubW9kZWxWYWx1ZSA9IHRoaXMuZGVzZXJpYWxpemVyKHRoaXMuc2VyaWFsaXplZFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2UgPT09ICdmb3JtYXR0ZWQnKSB7XG4gICAgICAgICAgdGhpcy5tb2RlbFZhbHVlID0gdGhpcy5fY2FsbFBhcnNlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc291cmNlICE9PSAnZm9ybWF0dGVkJykge1xuICAgICAgICB0aGlzLmZvcm1hdHRlZFZhbHVlID0gdGhpcy5fY2FsbEZvcm1hdHRlcigpO1xuICAgICAgfVxuICAgICAgaWYgKHNvdXJjZSAhPT0gJ3NlcmlhbGl6ZWQnKSB7XG4gICAgICAgIHRoaXMuc2VyaWFsaXplZFZhbHVlID0gdGhpcy5zZXJpYWxpemVyKHRoaXMubW9kZWxWYWx1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9yZWZsZWN0QmFja0Zvcm1hdHRlZFZhbHVlVG9Vc2VyKCk7XG4gICAgICB0aGlzLl9fcHJldmVudFJlY3Vyc2l2ZVRyaWdnZXIgPSBmYWxzZTtcbiAgICAgIHRoaXMuX19wcmV2Vmlld1ZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jYWxsUGFyc2VyKHZhbHVlID0gdGhpcy5mb3JtYXR0ZWRWYWx1ZSkge1xuICAgICAgLy8gQSkgY2hlY2sgaWYgd2UgbmVlZCB0byBwYXJzZSBhdCBhbGxcblxuICAgICAgLy8gQS4xKSBUaGUgZW5kIHVzZXIgaGFkIG5vIGludGVudGlvbiB0byBwYXJzZVxuICAgICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgICAvLyBJZGVhbGx5LCBtb2RlbFZhbHVlIHNob3VsZCBiZSB1bmRlZmluZWQgZm9yIGVtcHR5IHN0cmluZ3MuXG4gICAgICAgIC8vIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3ZSByZXR1cm4gYW4gZW1wdHkgc3RyaW5nOlxuICAgICAgICAvLyAtIGl0IGNhbiBiZSBleHBlY3RlZCBieSAzcmQgcGFydGllcyAoZm9yIGluc3RhbmNlIHVuaXQgdGVzdHMpXG4gICAgICAgIC8vIFRPRE8oQHRsb3Vpc3NlKTogSW4gYSBicmVha2luZyByZWZhY3RvciBvZiB0aGUgVmFsaWRhdGlvbiBTeXN0ZW0sIHRoaXMgYmVoYXZpb3IgY2FuIGJlIGNvcnJlY3RlZC5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICAvLyBBLjIpIEhhbmRsZSBlZGdlIGNhc2VzLiBXZSBtaWdodCBoYXZlIG5vIHZpZXcgdmFsdWUgeWV0LCBmb3IgaW5zdGFuY2UgYmVjYXVzZVxuICAgICAgLy8gX2lucHV0Tm9kZS52YWx1ZSB3YXMgbm90IGF2YWlsYWJsZSB5ZXRcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIFRoaXMgbWVhbnMgdGhlcmUgaXMgbm90aGluZyB0byBmaW5kIGluc2lkZSB0aGUgdmlldyB0aGF0IGNhbiBiZSBvZlxuICAgICAgICAvLyBpbnRlcmVzdCB0byB0aGUgQXBwbGljYXRpb24gRGV2ZWxvcGVyIG9yIG5lZWRlZCB0byBzdG9yZSBmb3IgZnV0dXJlXG4gICAgICAgIC8vIGZvcm0gc3RhdGUgcmV0cmlldmFsLlxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICAvLyBCKSBwYXJzZSB0aGUgdmlldyB2YWx1ZVxuXG4gICAgICAvLyAtIGlmIHJlc3VsdDpcbiAgICAgIC8vIHJldHVybiB0aGUgc3VjY2Vzc2Z1bGx5IHBhcnNlZCB2aWV3VmFsdWVcbiAgICAgIC8vIC0gaWYgbm8gcmVzdWx0OlxuICAgICAgLy8gQXBwYXJlbnRseSwgdGhlIHBhcnNlciB3YXMgbm90IGFibGUgdG8gcHJvZHVjZSBhIHNhdGlzZmFjdG9yeSBvdXRwdXQgZm9yIHRoZSBkZXNpcmVkXG4gICAgICAvLyBtb2RlbFZhbHVlIHR5cGUsIGJhc2VkIG9uIHRoZSBjdXJyZW50IHZpZXdWYWx1ZS4gVW5wYXJzZWFibGUgYWxsb3dzIHRvIHJlc3RvcmUgYWxsXG4gICAgICAvLyBzdGF0ZXMgKGZvciBpbnN0YW5jZSBmcm9tIGEgbG9zdCB1c2VyIHNlc3Npb24pLCBzaW5jZSBpdCBzYXZlcyB0aGUgY3VycmVudCB2aWV3VmFsdWUuXG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnBhcnNlcih2YWx1ZSwgdGhpcy5mb3JtYXRPcHRpb25zKTtcbiAgICAgIHJldHVybiByZXN1bHQgIT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IG5ldyBVbnBhcnNlYWJsZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY2FsbEZvcm1hdHRlcigpIHtcbiAgICAgIC8vIC0gV2h5IGNoZWNrIGZvciB0aGlzLmhhc0Vycm9yP1xuICAgICAgLy8gV2Ugb25seSB3YW50IHRvIGZvcm1hdCB2YWx1ZXMgdGhhdCBhcmUgY29uc2lkZXJlZCB2YWxpZC4gRm9yIGJlc3QgVVgsXG4gICAgICAvLyB3ZSBvbmx5ICdyZXdhcmQnIHZhbGlkIGlucHV0cy5cbiAgICAgIC8vIC0gV2h5IGNoZWNrIGZvciBfaXNIYW5kbGluZ1VzZXJJbnB1dD9cbiAgICAgIC8vIERvd253YXJkcyBzeW5jIGlzIHByZXZlbnRlZCB3aGVuZXZlciB3ZSBhcmUgaW4gYW4gYEB1c2VyLWlucHV0LWNoYW5nZWRgIGZsb3csIFsyXS5cbiAgICAgIC8vIElmIHdlIGFyZSBpbiBhICdpbXBlcmF0aXZlbHkgc2V0IGAubW9kZWxWYWx1ZWAnIGZsb3csIFsxXSwgd2Ugd2FudCB0byByZWZsZWN0IGJhY2tcbiAgICAgIC8vIHRoZSB2YWx1ZSwgbm8gbWF0dGVyIHdoYXQuXG4gICAgICAvLyBUaGlzIG1lYW5zLCB3aGVuZXZlciB3ZSBhcmUgaW4gaGFzRXJyb3IgYW5kIG1vZGVsVmFsdWUgaXMgc2V0XG4gICAgICAvLyBpbXBlcmF0aXZlbHksIHdlIERPIHdhbnQgdG8gZm9ybWF0IGEgdmFsdWUgKGl0IGlzIHRoZSBvbmx5IHdheSB0byBnZXQgbWVhbmluZ2Z1bFxuICAgICAgLy8gaW5wdXQgaW50byBgLl9pbnB1dE5vZGVgIHdpdGggbW9kZWxWYWx1ZSBhcyBpbnB1dClcblxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9pc0hhbmRsaW5nVXNlcklucHV0ICYmXG4gICAgICAgIHRoaXMuaGFzRmVlZGJhY2tGb3I/Lmxlbmd0aCAmJlxuICAgICAgICB0aGlzLmhhc0ZlZWRiYWNrRm9yLmluY2x1ZGVzKCdlcnJvcicpICYmXG4gICAgICAgIHRoaXMuX2lucHV0Tm9kZVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnB1dE5vZGUgPyB0aGlzLnZhbHVlIDogdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5tb2RlbFZhbHVlIGluc3RhbmNlb2YgVW5wYXJzZWFibGUpIHtcbiAgICAgICAgLy8gV2hlbiB0aGUgbW9kZWxWYWx1ZSBjdXJyZW50bHkgaXMgdW5wYXJzZWFibGUsIHdlIG5lZWQgdG8gc3luYyBiYWNrIHRoZSBzdXBwbGllZFxuICAgICAgICAvLyB2aWV3VmFsdWUuIEluIGZsb3cgWzJdLCB0aGlzIHNob3VsZCBub3QgYmUgbmVlZGVkLlxuICAgICAgICAvLyBJbiBmbG93IFsxXSAod2UgcmVzdG9yZSBhIHByZXZpb3VzbHkgc3RvcmVkIG1vZGVsVmFsdWUpIHdlIHNob3VsZCBzeW5jIGRvd24sIGhvd2V2ZXIuXG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsVmFsdWUudmlld1ZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXIodGhpcy5tb2RlbFZhbHVlLCB0aGlzLmZvcm1hdE9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc3BvbmRzIHRvIG1vZGVsVmFsdWUgY2hhbmdlcyBpbiB0aGUgc3luY2hyb25vdXMgY3ljbGUgKG1vc3Qgc3ViY2xhc3NlcnMgc2hvdWxkIGxpc3RlbiB0b1xuICAgICAqIHRoZSBhc3luY2hyb25vdXMgY3ljbGUgKCdtb2RlbFZhbHVlJyBpbiB0aGUgLnVwZGF0ZWQgbGlmZWN5Y2xlKSlcbiAgICAgKiBAcGFyYW0ge3sgbW9kZWxWYWx1ZTogdW5rbm93bjsgfVtdfSBhcmdzXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9vbk1vZGVsVmFsdWVDaGFuZ2VkKC4uLmFyZ3MpIHtcbiAgICAgIHRoaXMuX2NhbGN1bGF0ZVZhbHVlcyh7IHNvdXJjZTogJ21vZGVsJyB9KTtcbiAgICAgIHRoaXMuX2Rpc3BhdGNoTW9kZWxWYWx1ZUNoYW5nZWRFdmVudCguLi5hcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIHdyYXBwZWQgaW4gYSBkaXN0aW5jdCBtZXRob2QsIHNvIHRoYXQgcGFyZW50cyBjYW4gY29udHJvbCB3aGVuIHRoZSBjaGFuZ2VkIGV2ZW50XG4gICAgICogaXMgZmlyZWQuIEZvciBvYmplY3RzLCBhIGRlZXAgY29tcGFyaXNvbiBtaWdodCBiZSBuZWVkZWQuXG4gICAgICogQHBhcmFtIHt7IG1vZGVsVmFsdWU6IHVua25vd247IH1bXX0gYXJnc1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBfZGlzcGF0Y2hNb2RlbFZhbHVlQ2hhbmdlZEV2ZW50KC4uLmFyZ3MpIHtcbiAgICAgIC8qKiBAZXZlbnQgbW9kZWwtdmFsdWUtY2hhbmdlZCAqL1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAvKiogQHByaXZhdGVFdmVudCBtb2RlbC12YWx1ZS1jaGFuZ2VkOiBGb3JtQ29udHJvbCByZWRpc3BhdGNoZXMgaXQgYXMgcHVibGljIGV2ZW50ICovXG4gICAgICAgIG5ldyBDdXN0b21FdmVudCgnbW9kZWwtdmFsdWUtY2hhbmdlZCcsIHtcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIGRldGFpbDogLyoqIEB0eXBlIHsgTW9kZWxWYWx1ZUV2ZW50RGV0YWlscyB9ICovICh7XG4gICAgICAgICAgICBmb3JtUGF0aDogW3RoaXNdLFxuICAgICAgICAgICAgaXNUcmlnZ2VyZWRCeVVzZXI6IEJvb2xlYW4odGhpcy5faXNIYW5kbGluZ1VzZXJJbnB1dCksXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTeW5jaHJvbml6YXRpb24gZnJvbSBgLl9pbnB1dE5vZGUudmFsdWVgIHRvIGBMaW9uRmllbGRgIChmbG93IFsyXSlcbiAgICAgKiBEb3dud2FyZHMgc3luY2luZyBzaG91bGQgb25seSBoYXBwZW4gZm9yIGBMaW9uRmllbGRgLnZhbHVlIGNoYW5nZXMgZnJvbSAnYWJvdmUnLlxuICAgICAqIFRoaXMgdHJpZ2dlcnMgX29uTW9kZWxWYWx1ZUNoYW5nZWQgYW5kIGNvbm5lY3RzIHVzZXIgaW5wdXRcbiAgICAgKiB0byB0aGUgcGFyc2luZy9mb3JtYXR0aW5nL3NlcmlhbGl6aW5nIGxvb3AuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9zeW5jVmFsdWVVcHdhcmRzKCkge1xuICAgICAgaWYgKCF0aGlzLl9faXNIYW5kbGluZ0NvbXBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuX19oYW5kbGVQcmVwcm9jZXNzb3IoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByZXZGb3JtYXR0ZWQgPSB0aGlzLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgdGhpcy5tb2RlbFZhbHVlID0gdGhpcy5fY2FsbFBhcnNlcih0aGlzLnZhbHVlKTtcblxuICAgICAgLy8gU29tZXRpbWVzLCB0aGUgZm9ybWF0dGVkVmFsdWUgZGlkbid0IGNoYW5nZSwgYnV0IHRoZSB2aWV3VmFsdWUgZGlkLi4uXG4gICAgICAvLyBXZSBuZWVkIHRoaXMgY2hlY2sgdG8gc3VwcG9ydCBwYXN0aW5nIHZhbHVlcyB0aGF0IG5lZWQgdG8gYmUgZm9ybWF0dGVkIHJpZ2h0IG9uIHBhc3RlXG4gICAgICBpZiAocHJldkZvcm1hdHRlZCA9PT0gdGhpcy5mb3JtYXR0ZWRWYWx1ZSAmJiB0aGlzLl9fcHJldlZpZXdWYWx1ZSAhPT0gdGhpcy52YWx1ZSkge1xuICAgICAgICB0aGlzLl9jYWxjdWxhdGVWYWx1ZXMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdmlldyB2YWx1ZSBhbmQgY2FyZXRJbmRleCwgZGVwZW5kaW5nIG9uIHJldHVybiB0eXBlIG9mIC5wcmVwcm9jZXNzb3IuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfX2hhbmRsZVByZXByb2Nlc3NvcigpIHtcbiAgICAgIGNvbnN0IHVucHJvY2Vzc2VkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgbGV0IGN1cnJlbnRDYXJldEluZGV4ID0gdGhpcy52YWx1ZS5sZW5ndGg7XG4gICAgICAvLyBCZSBnZW50bGUgd2l0aCBTYWZhcmlcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5faW5wdXROb2RlICYmXG4gICAgICAgICdzZWxlY3Rpb25TdGFydCcgaW4gdGhpcy5faW5wdXROb2RlICYmXG4gICAgICAgIC8qKiBAdHlwZSB7SFRNTElucHV0RWxlbWVudH0gKi8gKHRoaXMuX2lucHV0Tm9kZSk/LnR5cGUgIT09ICdyYW5nZSdcbiAgICAgICkge1xuICAgICAgICBjdXJyZW50Q2FyZXRJbmRleCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAodGhpcy5faW5wdXROb2RlLnNlbGVjdGlvblN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByZXByb2Nlc3NlZFZhbHVlID0gdGhpcy5wcmVwcm9jZXNzb3IodGhpcy52YWx1ZSwge1xuICAgICAgICAuLi50aGlzLmZvcm1hdE9wdGlvbnMsXG4gICAgICAgIGN1cnJlbnRDYXJldEluZGV4LFxuICAgICAgICBwcmV2Vmlld1ZhbHVlOiB0aGlzLl9fcHJldlZpZXdWYWx1ZSxcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9fcHJldlZpZXdWYWx1ZSA9IHVucHJvY2Vzc2VkVmFsdWU7XG4gICAgICBpZiAocHJlcHJvY2Vzc2VkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZG8gbm8gc2V0IGJhY2sgb3JpZ2luYWwgdmFsdWUsIHNvIHdlIHByZXNlcnZlXG4gICAgICAgIC8vIGNhcmV0IGluZGV4ICg9PSBzZWxlY3Rpb25TdGFydC9zZWxlY3Rpb25FbmQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcHJlcHJvY2Vzc2VkVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBwcmVwcm9jZXNzZWRWYWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHByZXByb2Nlc3NlZFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zdCB7IHZpZXdWYWx1ZSwgY2FyZXRJbmRleCB9ID0gcHJlcHJvY2Vzc2VkVmFsdWU7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2aWV3VmFsdWU7XG4gICAgICAgIGlmIChjYXJldEluZGV4ICYmIHRoaXMuX2lucHV0Tm9kZSAmJiAnc2VsZWN0aW9uU3RhcnQnIGluIHRoaXMuX2lucHV0Tm9kZSkge1xuICAgICAgICAgIHRoaXMuX2lucHV0Tm9kZS5zZWxlY3Rpb25TdGFydCA9IGNhcmV0SW5kZXg7XG4gICAgICAgICAgdGhpcy5faW5wdXROb2RlLnNlbGVjdGlvbkVuZCA9IGNhcmV0SW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTeW5jaHJvbml6YXRpb24gZnJvbSBgTGlvbkZpZWxkLnZhbHVlYCB0byBgLl9pbnB1dE5vZGUudmFsdWVgXG4gICAgICogLSBmbG93IFsxXSB3aWxsIGFsd2F5cyBiZSByZWZsZWN0ZWQgYmFja1xuICAgICAqIC0gZmxvdyBbMl0gd2lsbCBub3QgYmUgcmVmbGVjdGVkIGJhY2sgd2hlbiB0aGlzIGZsb3cgd2FzIHRyaWdnZXJlZCB2aWFcbiAgICAgKiAgIGBAdXNlci1pbnB1dC1jaGFuZ2VkYCAodGhpcyB3aWxsIGhhcHBlbiBsYXRlciwgd2hlbiBgZm9ybWF0T25gIGNvbmRpdGlvbiBpcyBtZXQpXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9yZWZsZWN0QmFja0Zvcm1hdHRlZFZhbHVlVG9Vc2VyKCkge1xuICAgICAgaWYgKHRoaXMuX3JlZmxlY3RCYWNrT24oKSkge1xuICAgICAgICAvLyBUZXh0ICd1bmRlZmluZWQnIHNob3VsZCBub3QgZW5kIHVwIGluIDxpbnB1dD5cbiAgICAgICAgdGhpcy52YWx1ZSA9IHR5cGVvZiB0aGlzLmZvcm1hdHRlZFZhbHVlICE9PSAndW5kZWZpbmVkJyA/IHRoaXMuZm9ybWF0dGVkVmFsdWUgOiAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFdmVyeSB0aW1lIC5mb3JtYXR0ZWRWYWx1ZSBpcyBhdHRlbXB0ZWQgdG8gc3luYyB0byB0aGUgdmlldyB2YWx1ZSAob24gY2hhbmdlL2JsdXIgYW5kIG9uXG4gICAgICogbW9kZWxWYWx1ZSBjaGFuZ2UpLCB0aGlzIGNvbmRpdGlvbiBpcyBjaGVja2VkLiBXaGVuIGVuaGFuY2luZyBpdCwgaXQncyByZWNvbW1lbmRlZCB0b1xuICAgICAqIGNhbGwgdmlhIGByZXR1cm4gdGhpcy5fbXlFeHRyYUNvbmRpdGlvbiAmJiBzdXBlci5fcmVmbGVjdEJhY2tPbigpYFxuICAgICAqIEBvdmVycmlkYWJsZVxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9yZWZsZWN0QmFja09uKCkge1xuICAgICAgcmV0dXJuICF0aGlzLl9pc0hhbmRsaW5nVXNlcklucHV0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgY2FuIGJlIGNhbGxlZCB3aGVuZXZlciB0aGUgdmlldyB2YWx1ZSBzaG91bGQgYmUgdXBkYXRlZC4gRGVwZW5kZW50IG9uIGNvbXBvbmVudCB0eXBlXG4gICAgICogKFwiaW5wdXRcIiBmb3IgPGlucHV0PiBvciBcImNoYW5nZVwiIGZvciA8c2VsZWN0PihtYWlubHkgZm9yIElFKSkgYSBkaWZmZXJlbnQgZXZlbnQgc2hvdWxkIGJlXG4gICAgICogdXNlZCAgYXMgc291cmNlIGZvciB0aGUgXCJ1c2VyLWlucHV0LWNoYW5nZWRcIiBldmVudCAod2hpY2ggY2FuIGJlIHNlZW4gYXMgYW4gYWJzdHJhY3Rpb25cbiAgICAgKiBsYXllciBvbiB0b3Agb2Ygb3RoZXIgZXZlbnRzIChpbnB1dCwgY2hhbmdlLCB3aGF0ZXZlcikpXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9wcm94eUlucHV0RXZlbnQoKSB7XG4gICAgICAvLyBUT0RPOiBbdjFdIHJlbW92ZSBjb21wb3NlZCAoYW5kIGJ1YmJsZXMgYXMgd2VsbCBpZiBwb3NzaWJsZSlcbiAgICAgIC8qKiBAcHJvdGVjdGVkRXZlbnQgdXNlci1pbnB1dC1jaGFuZ2VkIG1lYW50IGZvciB1c2FnZSBieSBTdWJjbGFzc2VycyBvbmx5ICovXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCd1c2VyLWlucHV0LWNoYW5nZWQnLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xuICAgIH1cblxuICAgIC8qKiBAcHJvdGVjdGVkICovXG4gICAgX29uVXNlcklucHV0Q2hhbmdlZCgpIHtcbiAgICAgIC8vIFVwd2FyZHMgc3luY2luZy4gTW9zdCBwcm9wZXJ0aWVzIGFyZSBkZWxlZ2F0ZWQgcmlnaHQgYXdheSwgdmFsdWUgaXMgc3luY2VkIHRvXG4gICAgICAvLyBgTGlvbkZpZWxkYCwgdG8gYmUgYWJsZSB0byBhY3Qgb24gKGltcGVyYXRpdmVseSBzZXQpIHZhbHVlIGNoYW5nZXNcbiAgICAgIHRoaXMuX2lzSGFuZGxpbmdVc2VySW5wdXQgPSB0cnVlO1xuICAgICAgdGhpcy5fc3luY1ZhbHVlVXB3YXJkcygpO1xuICAgICAgdGhpcy5faXNIYW5kbGluZ1VzZXJJbnB1dCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAgICovXG4gICAgX19vbkNvbXBvc2l0aW9uRXZlbnQoeyB0eXBlIH0pIHtcbiAgICAgIGlmICh0eXBlID09PSAnY29tcG9zaXRpb25zdGFydCcpIHtcbiAgICAgICAgdGhpcy5fX2lzSGFuZGxpbmdDb21wb3NpdGlvbiA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjb21wb3NpdGlvbmVuZCcpIHtcbiAgICAgICAgdGhpcy5fX2lzSGFuZGxpbmdDb21wb3NpdGlvbiA9IGZhbHNlO1xuICAgICAgICAvLyBpbiBhbGwgb3RoZXIgY2FzZXMgdGhpcyB3b3VsZCBiZSB0cmlnZ2VyZWQgdmlhIHVzZXItaW5wdXQtY2hhbmdlZFxuICAgICAgICB0aGlzLl9zeW5jVmFsdWVVcHdhcmRzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuXG4gICAgICAvLyBUT0RPOiBbdjFdIGRlbGV0ZTsgdXNlICdjaGFuZ2UnIGV2ZW50IGRpcmVjdGx5IHdpdGhpbiB0aGlzIGZpbGVcbiAgICAgIC8qKlxuICAgICAgICogRXZlbnQgdGhhdCB3aWxsIHRyaWdnZXIgZm9ybWF0dGluZyAobW9yZSBwcmVjaXNlLCB2aXN1YWwgdXBkYXRlIG9mIHRoZSB2aWV3LCBzbyB0aGVcbiAgICAgICAqIHVzZXIgc2VlcyB0aGUgZm9ybWF0dGVkIHZhbHVlKVxuICAgICAgICogRGVmYXVsdDogJ2NoYW5nZSdcbiAgICAgICAqIEBkZXByZWNhdGVkIHVzZSBfcmVmbGVjdEJhY2tPbigpXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuZm9ybWF0T24gPSAnY2hhbmdlJztcblxuICAgICAgLyoqXG4gICAgICAgKiBDb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IHdpbGwgYmUgYXZhaWxhYmxlIGluc2lkZSB0aGUgZm9ybWF0dGVyIGZ1bmN0aW9uXG4gICAgICAgKi9cbiAgICAgIHRoaXMuZm9ybWF0T3B0aW9ucyA9IC8qKiBAdHlwZSB7Rm9ybWF0T3B0aW9uc30gKi8gKHt9KTtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdmlldyB2YWx1ZSBpcyB0aGUgcmVzdWx0IG9mIHRoZSBmb3JtYXR0ZXIgZnVuY3Rpb24gKHdoZW4gYXZhaWxhYmxlKS5cbiAgICAgICAqIFRoZSByZXN1bHQgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIG5hdGl2ZSBfaW5wdXROb2RlICh1c3VhbGx5IGFuIGlucHV0W3R5cGU9dGV4dF0pLlxuICAgICAgICpcbiAgICAgICAqIEV4YW1wbGVzOlxuICAgICAgICogLSBGb3IgYSBkYXRlIGlucHV0LCB0aGlzIHdvdWxkIGJlICcyMC8wMS8xOTk5JyAoZGVwZW5kZW50IG9uIGxvY2FsZSkuXG4gICAgICAgKiAtIEZvciBhIG51bWJlciBpbnB1dCwgdGhpcyBjb3VsZCBiZSAnMSwyMzQuNTYnIChhIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBtb2RlbFZhbHVlXG4gICAgICAgKiAxMjM0LjU2KVxuICAgICAgICogQHR5cGUge3N0cmluZ3x1bmRlZmluZWR9XG4gICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAqL1xuICAgICAgdGhpcy5mb3JtYXR0ZWRWYWx1ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgc2VyaWFsaXplZCB2ZXJzaW9uIG9mIHRoZSBtb2RlbCB2YWx1ZS5cbiAgICAgICAqIFRoaXMgdmFsdWUgZXhpc3RzIGZvciBtYXhpbWFsIGNvbXBhdGliaWxpdHkgd2l0aCB0aGUgcGxhdGZvcm0gQVBJLlxuICAgICAgICogVGhlIHNlcmlhbGl6ZWQgdmFsdWUgY2FuIGJlIGFuIGludGVyZmFjZSBpbiBjb250ZXh0IHdoZXJlIGRhdGEgYmluZGluZyBpcyBub3RcbiAgICAgICAqIHN1cHBvcnRlZCBhbmQgYSBzZXJpYWxpemVkIHN0cmluZyBuZWVkcyB0byBiZSBzZXQuXG4gICAgICAgKlxuICAgICAgICogRXhhbXBsZXM6XG4gICAgICAgKiAtIEZvciBhIGRhdGUgaW5wdXQsIHRoaXMgd291bGQgYmUgdGhlIGlzbyBmb3JtYXQgb2YgYSBkYXRlLCBlLmcuICcxOTk5LTAxLTIwJy5cbiAgICAgICAqIC0gRm9yIGEgbnVtYmVyIGlucHV0IHRoaXMgd291bGQgYmUgdGhlIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIGZsb2F0ICgnMTIzNC41NidcbiAgICAgICAqICAgaW5zdGVhZCBvZiAxMjM0LjU2KVxuICAgICAgICpcbiAgICAgICAqIFdoZW4gbm8gcGFyc2VyIGlzIGF2YWlsYWJsZSwgdGhlIHZhbHVlIGlzIHVzdWFsbHkgdGhlIHNhbWUgYXMgdGhlIGZvcm1hdHRlZFZhbHVlXG4gICAgICAgKiAoYmVpbmcgX2lucHV0Tm9kZS52YWx1ZSlcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfVxuICAgICAgICovXG4gICAgICB0aGlzLnNlcmlhbGl6ZWRWYWx1ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgLyoqXG4gICAgICAgKiBXaGV0aGVyIHRoZSB1c2VyIGlzIHBhc3RpbmcgY29udGVudC4gQWxsb3dzIFN1YmNsYXNzZXJzIHRvIGRvIHRoaXMgaW4gdGhlaXIgc3ViY2xhc3M6XG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAqIF9yZWZsZWN0QmFja09uKCkge1xuICAgICAgICogICByZXR1cm4gc3VwZXIuX3JlZmxlY3RCYWNrT24oKSB8fCB0aGlzLl9pc1Bhc3Rpbmc7XG4gICAgICAgKiB9XG4gICAgICAgKiBgYGBcbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICovXG4gICAgICB0aGlzLl9pc1Bhc3RpbmcgPSBmYWxzZTtcblxuICAgICAgLyoqXG4gICAgICAgKiBGbGFnIHRoYXQgd2lsbCBiZSBzZXQgd2hlbiB1c2VyIGludGVyYWN0aW9uIHRha2VzIHBsYWNlIChmb3IgaW5zdGFuY2UgYWZ0ZXIgYW4gJ2lucHV0J1xuICAgICAgICogZXZlbnQpLiBXaWxsIGJlIGFkZGVkIGFzIG1ldGEgaW5mbyB0byB0aGUgYG1vZGVsLXZhbHVlLWNoYW5nZWRgIGV2ZW50LiBEZXBlbmRpbmcgb25cbiAgICAgICAqIHdoZXRoZXIgYSB1c2VyIGlzIGludGVyYWN0aW5nLCBmb3JtYXR0aW5nIGxvZ2ljIHdpbGwgYmUgaGFuZGxlZCBkaWZmZXJlbnRseS5cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICovXG4gICAgICB0aGlzLl9pc0hhbmRsaW5nVXNlcklucHV0ID0gZmFsc2U7XG4gICAgICAvKipcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICB0aGlzLl9fcHJldlZpZXdWYWx1ZSA9ICcnO1xuICAgICAgdGhpcy5fX29uQ29tcG9zaXRpb25FdmVudCA9IHRoaXMuX19vbkNvbXBvc2l0aW9uRXZlbnQuYmluZCh0aGlzKTtcbiAgICAgIC8vIFRoaXMgY29tcHV0ZXMgZm9ybWF0dGVkVmFsdWVcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndXNlci1pbnB1dC1jaGFuZ2VkJywgdGhpcy5fb25Vc2VySW5wdXRDaGFuZ2VkKTtcbiAgICAgIC8vIFRoaXMgc2V0cyB0aGUgZm9ybWF0dGVkIHZpZXdWYWx1ZSBhZnRlciBwYXN0ZVxuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIHRoaXMuX19vblBhc3RlKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuX3JlZmxlY3RCYWNrRm9ybWF0dGVkVmFsdWVUb1VzZXIgPSB0aGlzLl9yZWZsZWN0QmFja0Zvcm1hdHRlZFZhbHVlVG9Vc2VyLmJpbmQodGhpcyk7XG5cbiAgICAgIC8qKlxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqL1xuICAgICAgdGhpcy5fcmVmbGVjdEJhY2tGb3JtYXR0ZWRWYWx1ZURlYm91bmNlZCA9ICgpID0+IHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoaXMgaXMgZmlyZWQgYWZ0ZXIgdGhlIGNoYW5nZSBldmVudCBvZiBfaW5wdXROb2RlLCBzbyB0aGF0IGZvcm1hdHRlZFZhbHVlXG4gICAgICAgIC8vIGlzIGd1YXJhbnRlZWQgdG8gYmUgY2FsY3VsYXRlZFxuICAgICAgICBzZXRUaW1lb3V0KHRoaXMuX3JlZmxlY3RCYWNrRm9ybWF0dGVkVmFsdWVUb1VzZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9fb25QYXN0ZSgpIHtcbiAgICAgIHRoaXMuX2lzUGFzdGluZyA9IHRydWU7XG4gICAgICB0aGlzLmZvcm1hdE9wdGlvbnMubW9kZSA9ICdwYXN0ZWQnO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuX2lzUGFzdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZvcm1hdE9wdGlvbnMubW9kZSA9ICdhdXRvJztcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcblxuICAgICAgLy8gQ29ubmVjdCB0aGUgdmFsdWUgZm91bmQgaW4gPGlucHV0PiB0byB0aGUgZm9ybWF0dGluZy9wYXJzaW5nL3NlcmlhbGl6aW5nIGxvb3AgYXMgYVxuICAgICAgLy8gZmFsbGJhY2sgbWVjaGFuaXNtLiBBc3N1bWUgdGhlIHVzZXIgdXNlcyB0aGUgdmFsdWUgcHJvcGVydHkgb2YgdGhlXG4gICAgICAvLyBgTGlvbkZpZWxkYChyZWNvbW1lbmRlZCBhcGkpIGFzIHRoZSBhcGkgKHRoaXMgaXMgYSBkb3dud2FyZHMgc3luYykuXG4gICAgICAvLyBIb3dldmVyLCB3aGVuIG5vIHZhbHVlIGlzIHNwZWNpZmllZCBvbiBgTGlvbkZpZWxkYCwgaGF2ZSBzdXBwb3J0IGZvciBzeW5jIG9mIHRoZSByZWFsXG4gICAgICAvLyBpbnB1dCB0byB0aGUgYExpb25GaWVsZGAgKHVwd2FyZHMgc3luYykuXG4gICAgICBpZiAodHlwZW9mIHRoaXMubW9kZWxWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5fc3luY1ZhbHVlVXB3YXJkcygpO1xuICAgICAgfVxuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICB0aGlzLl9fcHJldlZpZXdWYWx1ZSA9IHRoaXMudmFsdWU7XG5cbiAgICAgIHRoaXMuX3JlZmxlY3RCYWNrRm9ybWF0dGVkVmFsdWVUb1VzZXIoKTtcblxuICAgICAgaWYgKHRoaXMuX2lucHV0Tm9kZSkge1xuICAgICAgICB0aGlzLl9pbnB1dE5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmZvcm1hdE9uLCB0aGlzLl9yZWZsZWN0QmFja0Zvcm1hdHRlZFZhbHVlRGVib3VuY2VkKTtcbiAgICAgICAgdGhpcy5faW5wdXROb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5fcHJveHlJbnB1dEV2ZW50KTtcbiAgICAgICAgdGhpcy5faW5wdXROb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCB0aGlzLl9fb25Db21wb3NpdGlvbkV2ZW50KTtcbiAgICAgICAgdGhpcy5faW5wdXROb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgdGhpcy5fX29uQ29tcG9zaXRpb25FdmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgaWYgKHRoaXMuX2lucHV0Tm9kZSkge1xuICAgICAgICB0aGlzLl9pbnB1dE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9wcm94eUlucHV0RXZlbnQpO1xuICAgICAgICB0aGlzLl9pbnB1dE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICB0aGlzLmZvcm1hdE9uLFxuICAgICAgICAgIC8qKiBAdHlwZSB7RXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdH0gKi8gKFxuICAgICAgICAgICAgdGhpcy5fcmVmbGVjdEJhY2tGb3JtYXR0ZWRWYWx1ZURlYm91bmNlZFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX2lucHV0Tm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0JywgdGhpcy5fX29uQ29tcG9zaXRpb25FdmVudCk7XG4gICAgICAgIHRoaXMuX2lucHV0Tm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIHRoaXMuX19vbkNvbXBvc2l0aW9uRXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuZXhwb3J0IGNvbnN0IEZvcm1hdE1peGluID0gZGVkdXBlTWl4aW4oRm9ybWF0TWl4aW5JbXBsZW1lbnRhdGlvbik7XG4iLCJpbXBvcnQgeyBkZWR1cGVNaXhpbiB9IGZyb20gJ0BsaW9uL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2xNaXhpbiB9IGZyb20gJy4vRm9ybUNvbnRyb2xNaXhpbi5qcyc7XG5pbXBvcnQgeyBGb2N1c01peGluIH0gZnJvbSAnLi9Gb2N1c01peGluLmpzJztcbmltcG9ydCB7IEZvcm1hdE1peGluIH0gZnJvbSAnLi9Gb3JtYXRNaXhpbi5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMvTmF0aXZlVGV4dEZpZWxkTWl4aW5UeXBlcycpLk5hdGl2ZVRleHRGaWVsZE1peGlufSBOYXRpdmVUZXh0RmllbGRNaXhpblxuICogQHR5cGUge05hdGl2ZVRleHRGaWVsZE1peGlufVxuICogQHBhcmFtIHtpbXBvcnQoJ0BvcGVuLXdjL2RlZHVwZS1taXhpbicpLkNvbnN0cnVjdG9yPGltcG9ydCgnQGxpb24vY29yZScpLkxpdEVsZW1lbnQ+fSBzdXBlcmNsYXNzfSBzdXBlcmNsYXNzXG4gKi9cbmNvbnN0IE5hdGl2ZVRleHRGaWVsZE1peGluSW1wbGVtZW50YXRpb24gPSBzdXBlcmNsYXNzID0+XG4gIC8vIEB0cy1pZ25vcmUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zNjgyMSNpc3N1ZWNvbW1lbnQtNTg4Mzc1MDUxXG4gIGNsYXNzIE5hdGl2ZVRleHRGaWVsZE1peGluIGV4dGVuZHMgRm9ybWF0TWl4aW4oRm9jdXNNaXhpbihGb3JtQ29udHJvbE1peGluKHN1cGVyY2xhc3MpKSkge1xuICAgIC8qKiBAdHlwZSB7YW55fSAqL1xuICAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGF1dG9jb21wbGV0ZTogeyB0eXBlOiBTdHJpbmcsIHJlZmxlY3Q6IHRydWUgfSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuXG4gICAgICAvKipcbiAgICAgICAqIERlbGVnYXRlcyB0aGlzIHByb3BlcnR5IHRvIGlucHV0L3RleHRhcmVhL3NlbGVjdC5cbiAgICAgICAqIEB0eXBlIHtzdHJpbmcgfCB1bmRlZmluZWR9XG4gICAgICAgKi9cbiAgICAgIHRoaXMuYXV0b2NvbXBsZXRlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAdHlwZSB7SFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnR9XG4gICAgICovXG4gICAgZ2V0IF9pbnB1dE5vZGUoKSB7XG4gICAgICByZXR1cm4gLyoqIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudH0gKi8gKHN1cGVyLl9pbnB1dE5vZGUpO1xuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIGdldCBzZWxlY3Rpb25TdGFydCgpIHtcbiAgICAgIGNvbnN0IG5hdGl2ZSA9IHRoaXMuX2lucHV0Tm9kZTtcbiAgICAgIGlmIChuYXRpdmUgJiYgbmF0aXZlLnNlbGVjdGlvblN0YXJ0KSB7XG4gICAgICAgIHJldHVybiBuYXRpdmUuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBzZXQgc2VsZWN0aW9uU3RhcnQodmFsdWUpIHtcbiAgICAgIGNvbnN0IG5hdGl2ZSA9IHRoaXMuX2lucHV0Tm9kZTtcbiAgICAgIGlmIChuYXRpdmUgJiYgbmF0aXZlLnNlbGVjdGlvblN0YXJ0KSB7XG4gICAgICAgIG5hdGl2ZS5zZWxlY3Rpb25TdGFydCA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIGdldCBzZWxlY3Rpb25FbmQoKSB7XG4gICAgICBjb25zdCBuYXRpdmUgPSB0aGlzLl9pbnB1dE5vZGU7XG4gICAgICBpZiAobmF0aXZlICYmIG5hdGl2ZS5zZWxlY3Rpb25FbmQpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZS5zZWxlY3Rpb25FbmQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBzZXQgc2VsZWN0aW9uRW5kKHZhbHVlKSB7XG4gICAgICBjb25zdCBuYXRpdmUgPSB0aGlzLl9pbnB1dE5vZGU7XG4gICAgICBpZiAobmF0aXZlICYmIG5hdGl2ZS5zZWxlY3Rpb25FbmQpIHtcbiAgICAgICAgbmF0aXZlLnNlbGVjdGlvbkVuZCA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB2aWV3IHZhbHVlLiBXaWxsIGJlIGRlbGVnYXRlZCB0byBgLl9pbnB1dE5vZGUudmFsdWVgXG4gICAgICogQG92ZXJyaWRlIEZvcm1hdE1peGluXG4gICAgICovXG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgcmV0dXJuICh0aGlzLl9pbnB1dE5vZGUgJiYgdGhpcy5faW5wdXROb2RlLnZhbHVlKSB8fCB0aGlzLl9fdmFsdWUgfHwgJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAgICogQG92ZXJyaWRlIEZvcm1hdE1peGluIC0gV2UgZG9uJ3QgZGVsZWdhdGUsIGJlY2F1c2Ugd2Ugd2FudCB0byBwcmVzZXJ2ZSBjYXJldCBwb3NpdGlvbiB2aWEgX3NldFZhbHVlQW5kUHJlc2VydmVDYXJldFxuICAgICAqL1xuICAgIHNldCB2YWx1ZSh2YWx1ZSkge1xuICAgICAgLy8gaWYgbm90IHlldCBjb25uZWN0ZWQgdG8gZG9tIGNhbid0IGNoYW5nZSB0aGUgdmFsdWVcbiAgICAgIGlmICh0aGlzLl9pbnB1dE5vZGUpIHtcbiAgICAgICAgLy8gT25seSBzZXQgaWYgbmV3VmFsdWUgaXMgbmV3LCBmaXggZm9yIFNhZmFyaSBidWc6IGh0dHBzOi8vZ2l0aHViLmNvbS9pbmctYmFuay9saW9uL2lzc3Vlcy8xNDE1XG4gICAgICAgIGlmICh0aGlzLl9pbnB1dE5vZGUudmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5fc2V0VmFsdWVBbmRQcmVzZXJ2ZUNhcmV0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICAvKiogQHR5cGUge3N0cmluZyB8IHVuZGVmaW5lZH0gKi9cbiAgICAgICAgdGhpcy5fX3ZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fX3ZhbHVlID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzdG9yZXMgdGhlIGN1cnNvciB0byBpdHMgb3JpZ2luYWwgcG9zaXRpb24gYWZ0ZXIgdXBkYXRpbmcgdGhlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdWYWx1ZSBUaGUgdmFsdWUgdGhhdCBzaG91bGQgYmUgc2F2ZWQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9zZXRWYWx1ZUFuZFByZXNlcnZlQ2FyZXQobmV3VmFsdWUpIHtcbiAgICAgIC8vIE9ubHkgcHJlc2VydmUgY2FyZXQgaWYgZm9jdXNlZCAoY2hhbmdpbmcgc2VsZWN0aW9uU3RhcnQgd2lsbCBtb3ZlIGZvY3VzIGluIFNhZmFyaSlcbiAgICAgIGlmICh0aGlzLmZvY3VzZWQpIHtcbiAgICAgICAgLy8gTm90IGFsbCBlbGVtZW50cyBtaWdodCBoYXZlIHNlbGVjdGlvbiwgYW5kIGV2ZW4gaWYgdGhleSBoYXZlIHRoZVxuICAgICAgICAvLyByaWdodCBwcm9wZXJ0aWVzLCBhY2Nlc3NpbmcgdGhlbSBtaWdodCB0aHJvdyBhbiBleGNlcHRpb24gKGxpa2UgZm9yXG4gICAgICAgIC8vIDxpbnB1dCB0eXBlPW51bWJlcj4pXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gU2VsZWN0RWxlbWVudCBkb2Vzbid0IGhhdmUgc2VsZWN0aW9uU3RhcnQvc2VsZWN0aW9uRW5kXG4gICAgICAgICAgaWYgKCEodGhpcy5faW5wdXROb2RlIGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMuX2lucHV0Tm9kZS5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgICAgIHRoaXMuX2lucHV0Tm9kZS52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgLy8gVGhlIGN1cnNvciBhdXRvbWF0aWNhbGx5IGp1bXBzIHRvIHRoZSBlbmQgYWZ0ZXIgcmUtc2V0dGluZyB0aGUgdmFsdWUsXG4gICAgICAgICAgICAvLyBzbyByZXN0b3JlIGl0IHRvIGl0cyBvcmlnaW5hbCBwb3NpdGlvbi5cbiAgICAgICAgICAgIHRoaXMuX2lucHV0Tm9kZS5zZWxlY3Rpb25TdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgdGhpcy5faW5wdXROb2RlLnNlbGVjdGlvbkVuZCA9IHN0YXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAvLyBKdXN0IHNldCB0aGUgdmFsdWUgYW5kIGdpdmUgdXAgb24gdGhlIGNhcmV0LlxuICAgICAgICAgIHRoaXMuX2lucHV0Tm9kZS52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pbnB1dE5vZGUudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAb3ZlcnJpZGUgRm9ybWF0TWl4aW5cbiAgICAgKi9cbiAgICBfcmVmbGVjdEJhY2tGb3JtYXR0ZWRWYWx1ZVRvVXNlcigpIHtcbiAgICAgIHN1cGVyLl9yZWZsZWN0QmFja0Zvcm1hdHRlZFZhbHVlVG9Vc2VyKCk7XG4gICAgICBpZiAodGhpcy5fcmVmbGVjdEJhY2tPbigpICYmIHRoaXMuZm9jdXNlZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIHRyeS9jYXRjaCwgYmVjYXVzZSBTYWZhcmkgaXMgYSBiaXQgc2Vuc2l0aXZlIGhlcmVcbiAgICAgICAgICB0aGlzLl9pbnB1dE5vZGUuc2VsZWN0aW9uU3RhcnQgPSB0aGlzLl9pbnB1dE5vZGUudmFsdWUubGVuZ3RoO1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGNhdGNoIChfKSB7fVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBjb25maWd1cmUgRm9jdXNNaXhpblxuICAgICAqL1xuICAgIGdldCBfZm9jdXNhYmxlTm9kZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbnB1dE5vZGU7XG4gICAgfVxuICB9O1xuXG5leHBvcnQgY29uc3QgTmF0aXZlVGV4dEZpZWxkTWl4aW4gPSBkZWR1cGVNaXhpbihOYXRpdmVUZXh0RmllbGRNaXhpbkltcGxlbWVudGF0aW9uKTtcbiIsImltcG9ydCB7IGRlZHVwZU1peGluIH0gZnJvbSAnQGxpb24vY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbE1peGluIH0gZnJvbSAnLi9Gb3JtQ29udHJvbE1peGluLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy9JbnRlcmFjdGlvblN0YXRlTWl4aW5UeXBlcycpLkludGVyYWN0aW9uU3RhdGVNaXhpbn0gSW50ZXJhY3Rpb25TdGF0ZU1peGluXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy9JbnRlcmFjdGlvblN0YXRlTWl4aW5UeXBlcycpLkludGVyYWN0aW9uU3RhdGVzfSBJbnRlcmFjdGlvblN0YXRlc1xuICovXG5cbi8qKlxuICogQGRlc2MgYEludGVyYWN0aW9uU3RhdGVNaXhpbmAgYWRkcyBtZXRhIGluZm9ybWF0aW9uIGFib3V0IHRvdWNoZWQgYW5kIGRpcnR5IHN0YXRlcywgdGhhdCBjYW5cbiAqIGJlIHJlYWQgYnkgb3RoZXIgZm9ybSBjb21wb25lbnRzIChpbmctdWljLWlucHV0LWVycm9yIGZvciBpbnN0YW5jZSwgdXNlcyB0aGUgdG91Y2hlZCBzdGF0ZVxuICogdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYW4gZXJyb3IgbWVzc2FnZSBuZWVkcyB0byBiZSBzaG93bikuXG4gKiBJbnRlcmFjdGlvbiBzdGF0ZXMgd2lsbCBiZSBzZXQgd2hlbiBhIHVzZXI6XG4gKiAtIGxlYXZlcyBhIGZvcm0gZmllbGQoYmx1cikgLT4gJ3RvdWNoZWQnIHdpbGwgYmUgc2V0IHRvIHRydWUuICdwcmVmaWxsZWQnIHdoZW4gYVxuICogICBmaWVsZCBpcyBsZWZ0IG5vbi1lbXB0eVxuICogLSBvbiBrZXl1cCAoYWN0dWFsbHksIG9uIHRoZSBtb2RlbC12YWx1ZS1jaGFuZ2VkIGV2ZW50KSAtPiAnZGlydHknIHdpbGwgYmUgc2V0IHRvIHRydWVcbiAqXG4gKiBAdHlwZSB7SW50ZXJhY3Rpb25TdGF0ZU1peGlufVxuICogQHBhcmFtIHtpbXBvcnQoJ0BvcGVuLXdjL2RlZHVwZS1taXhpbicpLkNvbnN0cnVjdG9yPGltcG9ydCgnQGxpb24vY29yZScpLkxpdEVsZW1lbnQ+fSBzdXBlcmNsYXNzXG4gKi9cbmNvbnN0IEludGVyYWN0aW9uU3RhdGVNaXhpbkltcGxlbWVudGF0aW9uID0gc3VwZXJjbGFzcyA9PlxuICAvLyBAdHMtaWdub3JlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzY4MjEjaXNzdWVjb21tZW50LTU4ODM3NTA1MVxuICBjbGFzcyBJbnRlcmFjdGlvblN0YXRlTWl4aW4gZXh0ZW5kcyBGb3JtQ29udHJvbE1peGluKHN1cGVyY2xhc3MpIHtcbiAgICAvKiogQHR5cGUge2FueX0gKi9cbiAgICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3VjaGVkOiB7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUgfSxcbiAgICAgICAgZGlydHk6IHsgdHlwZTogQm9vbGVhbiwgcmVmbGVjdDogdHJ1ZSB9LFxuICAgICAgICBmaWxsZWQ6IHsgdHlwZTogQm9vbGVhbiwgcmVmbGVjdDogdHJ1ZSB9LFxuICAgICAgICBwcmVmaWxsZWQ6IHsgYXR0cmlidXRlOiBmYWxzZSB9LFxuICAgICAgICBzdWJtaXR0ZWQ6IHsgYXR0cmlidXRlOiBmYWxzZSB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5S2V5fSBuYW1lXG4gICAgICogQHBhcmFtIHsqfSBvbGRWYWxcbiAgICAgKi9cbiAgICByZXF1ZXN0VXBkYXRlKG5hbWUsIG9sZFZhbCkge1xuICAgICAgc3VwZXIucmVxdWVzdFVwZGF0ZShuYW1lLCBvbGRWYWwpO1xuICAgICAgaWYgKG5hbWUgPT09ICd0b3VjaGVkJyAmJiB0aGlzLnRvdWNoZWQgIT09IG9sZFZhbCkge1xuICAgICAgICB0aGlzLl9vblRvdWNoZWRDaGFuZ2VkKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lID09PSAnbW9kZWxWYWx1ZScpIHtcbiAgICAgICAgLy8gV2UgZG8gdGhpcyBpbiByZXF1ZXN0VXBkYXRlIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0byBmaXJlIGFub3RoZXIgcmUtcmVuZGVyIChlLmcuIHdoZW4gZG9pbmcgdGhpcyBpbiB1cGRhdGVkKVxuICAgICAgICAvLyBGdXJ0aGVybW9yZSwgd2UgY2Fubm90IGRvIGl0IG9uIG1vZGVsLXZhbHVlLWNoYW5nZWQgZXZlbnQgYmVjYXVzZSBpdCBpc24ndCBmaXJlZCBpbml0aWFsbHkuXG4gICAgICAgIHRoaXMuZmlsbGVkID0gIXRoaXMuX2lzRW1wdHkoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5hbWUgPT09ICdkaXJ0eScgJiYgdGhpcy5kaXJ0eSAhPT0gb2xkVmFsKSB7XG4gICAgICAgIHRoaXMuX29uRGlydHlDaGFuZ2VkKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRydWUgd2hlbiB1c2VyIGhhcyBmb2N1c2VkIGFuZCBsZWZ0KGJsdXJyZWQpIHRoZSBmaWVsZC5cbiAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICovXG4gICAgICB0aGlzLnRvdWNoZWQgPSBmYWxzZTtcblxuICAgICAgLyoqXG4gICAgICAgKiBUcnVlIHdoZW4gdXNlciBoYXMgY2hhbmdlZCB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkLlxuICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgKi9cbiAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcblxuICAgICAgLyoqXG4gICAgICAgKiBUcnVlIHdoZW4gdXNlciBoYXMgbGVmdCBub24tZW1wdHkgZmllbGQgb3IgaW5wdXQgaXMgcHJlZmlsbGVkLlxuICAgICAgICogVGhlIG5hbWUgbXVzdCBiZSBzZWVuIGZyb20gdGhlIHBvaW50IG9mIHZpZXcgb2YgdGhlIGlucHV0IGZpZWxkOlxuICAgICAgICogb25jZSB0aGUgdXNlciBlbnRlcnMgdGhlIGlucHV0IGZpZWxkLCB0aGUgdmFsdWUgaXMgbm9uLWVtcHR5LlxuICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgKi9cbiAgICAgIHRoaXMucHJlZmlsbGVkID0gZmFsc2U7XG5cbiAgICAgIC8qKlxuICAgICAgICogVHJ1ZSB3aGVuIHRoZSBtb2RlbFZhbHVlIGlzIG5vbi1lbXB0eSAoc2VlIF9pc0VtcHR5IGluIEZvcm1Db250cm9sTWl4aW4pXG4gICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgdGhpcy5maWxsZWQgPSBmYWxzZTtcblxuICAgICAgLyoqXG4gICAgICAgKiBUcnVlIHdoZW4gdXNlciBoYXMgYXR0ZW1wdGVkIHRvIHN1Ym1pdCB0aGUgZm9ybSwgZS5nLiB0aHJvdWdoIGEgYnV0dG9uXG4gICAgICAgKiBvZiB0eXBlPVwic3VibWl0XCJcbiAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICovXG4gICAgICAvLyBUT0RPOiBbdjFdIHRoaXMgbWlnaHQgYmUgZml4YWJsZSBieSBzY2hlZHVsaW5nIHByb3BlcnR5IGVmZmVjdHMgdGlsbCBmaXJzdFVwZGF0ZWRcbiAgICAgIC8vIHRoaXMuc3VibWl0dGVkID0gZmFsc2U7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGV2ZW50IHRoYXQgdHJpZ2dlcnMgdGhlIHRvdWNoZWQgc3RhdGVcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuX2xlYXZlRXZlbnQgPSAnYmx1cic7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGV2ZW50IHRoYXQgdHJpZ2dlcnMgdGhlIGRpcnR5IHN0YXRlXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICovXG4gICAgICB0aGlzLl92YWx1ZUNoYW5nZWRFdmVudCA9ICdtb2RlbC12YWx1ZS1jaGFuZ2VkJztcblxuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7KGV2ZW50OiBFdmVudCkgPT4gdW5rbm93bn1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgdGhpcy5faVN0YXRlT25MZWF2ZSA9IHRoaXMuX2lTdGF0ZU9uTGVhdmUuYmluZCh0aGlzKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAdHlwZSB7KGV2ZW50OiBFdmVudCkgPT4gdW5rbm93bn1cbiAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAqL1xuICAgICAgdGhpcy5faVN0YXRlT25WYWx1ZUNoYW5nZSA9IHRoaXMuX2lTdGF0ZU9uVmFsdWVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBldmVudCBoYW5kbGVycyBhbmQgdmFsaWRhdGUgcHJlZmlsbGVkIGlucHV0c1xuICAgICAqL1xuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLl9sZWF2ZUV2ZW50LCB0aGlzLl9pU3RhdGVPbkxlYXZlKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLl92YWx1ZUNoYW5nZWRFdmVudCwgdGhpcy5faVN0YXRlT25WYWx1ZUNoYW5nZSk7XG4gICAgICB0aGlzLmluaXRJbnRlcmFjdGlvblN0YXRlKCk7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuX2xlYXZlRXZlbnQsIHRoaXMuX2lTdGF0ZU9uTGVhdmUpO1xuICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuX3ZhbHVlQ2hhbmdlZEV2ZW50LCB0aGlzLl9pU3RhdGVPblZhbHVlQ2hhbmdlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFdmFsdWF0aW9ucyBwZXJmb3JtZWQgb24gY29ubmVjdGVkQ2FsbGJhY2suXG4gICAgICogVGhpcyBtZXRob2QgaXMgcHVibGljLCBzbyBpdCBjYW4gYmUgY2FsbGVkIGF0IGEgbGF0ZXIgbW9tZW50ICh3aGVuIHdlIG5lZWQgdG8gd2FpdCBmb3JcbiAgICAgKiByZWdpc3RlcmluZyBjaGlsZHJlbiBmb3IgaW5zdGFuY2UpIGFzIHdlbGwuXG4gICAgICogU2luY2UgdGhpcyBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgdHdpY2UgaW4gbGFzdCBtZW50aW9uZWQgc2NlbmFyaW8sIGl0IG11c3Qgc3RheSBpZGVtcG90ZW50LlxuICAgICAqL1xuICAgIGluaXRJbnRlcmFjdGlvblN0YXRlKCkge1xuICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgdGhpcy5wcmVmaWxsZWQgPSAhdGhpcy5faXNFbXB0eSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdG91Y2hlZCB2YWx1ZSB0byB0cnVlIGFuZCByZWV2YWx1YXRlcyBwcmVmaWxsZWQgc3RhdGUuXG4gICAgICogV2hlbiBmYWxzZSwgb24gbmV4dCBpbnRlcmFjdGlvbiwgdXNlciB3aWxsIHN0YXJ0IHdpdGggYSBjbGVhbiBzdGF0ZS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2lTdGF0ZU9uTGVhdmUoKSB7XG4gICAgICB0aGlzLnRvdWNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy5wcmVmaWxsZWQgPSAhdGhpcy5faXNFbXB0eSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgZGlydHkgdmFsdWUgYW5kIHZhbGlkYXRlcyB3aGVuIGFscmVhZHkgdG91Y2hlZCBvciBpbnZhbGlkXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9pU3RhdGVPblZhbHVlQ2hhbmdlKCkge1xuICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRvdWNoZWQgYW5kIGRpcnR5LCBhbmQgcmVjb21wdXRlcyBwcmVmaWxsZWRcbiAgICAgKi9cbiAgICByZXNldEludGVyYWN0aW9uU3RhdGUoKSB7XG4gICAgICB0aGlzLnRvdWNoZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuc3VibWl0dGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICB0aGlzLnByZWZpbGxlZCA9ICF0aGlzLl9pc0VtcHR5KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzcGF0Y2hlcyBldmVudCBvbiB0b3VjaGVkIHN0YXRlIGNoYW5nZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfb25Ub3VjaGVkQ2hhbmdlZCgpIHtcbiAgICAgIC8qKiBAcHJvdGVjdGVkRXZlbnQgdG91Y2hlZC1jaGFuZ2VkICovXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCd0b3VjaGVkLWNoYW5nZWQnLCB7IGJ1YmJsZXM6IHRydWUsIGNvbXBvc2VkOiB0cnVlIH0pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNwYXRjaGVzIGV2ZW50IG9uIHRvdWNoZWQgc3RhdGUgY2hhbmdlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9vbkRpcnR5Q2hhbmdlZCgpIHtcbiAgICAgIC8qKiBAcHJvdGVjdGVkRXZlbnQgZGlydHktY2hhbmdlZCAqL1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnZGlydHktY2hhbmdlZCcsIHsgYnViYmxlczogdHJ1ZSwgY29tcG9zZWQ6IHRydWUgfSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBvdmVycmlkZSBWYWxpZGF0ZU1peGluXG4gICAgICogU2hvdyB0aGUgdmFsaWRpdHkgZmVlZGJhY2sgd2hlbiBvbmUgb2YgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGlzIG1ldDpcbiAgICAgKlxuICAgICAqIC0gc3VibWl0dGVkXG4gICAgICogICBJZiB0aGUgZm9ybSBpcyBzdWJtaXR0ZWQsIGFsd2F5cyBzaG93IHRoZSBlcnJvciBtZXNzYWdlLlxuICAgICAqXG4gICAgICogLSBwcmVmaWxsZWRcbiAgICAgKiAgIHRoZSB1c2VyIGFscmVhZHkgZmlsbGVkIGluIHNvbWV0aGluZywgb3IgdGhlIHZhbHVlIGlzIHByZWZpbGxlZFxuICAgICAqICAgd2hlbiB0aGUgZm9ybSBpcyBpbml0aWFsbHkgcmVuZGVyZWQuXG4gICAgICpcbiAgICAgKiAtIHRvdWNoZWQgJiYgZGlydHlcbiAgICAgKiAgIFdoZW4gYSB1c2VyIHN0YXJ0cyB0eXBpbmcgZm9yIHRoZSBmaXJzdCB0aW1lIGluIGEgZmllbGQgd2l0aCBmb3IgaW5zdGFuY2UgYHJlcXVpcmVkYFxuICAgICAqICAgdmFsaWRhdGlvbiwgZXJyb3IgbWVzc2FnZSBzaG91bGQgbm90IGJlIHNob3duIHVudGlsIGEgZmllbGQgYmVjb21lcyBgdG91Y2hlZGBcbiAgICAgKiAgIChhIHVzZXIgbGVhdmVzKGJsdXJzKSBhIGZpZWxkKS5cbiAgICAgKiAgIFdoZW4gYSB1c2VyIGVudGVycyBhIGZpZWxkIHdpdGhvdXQgYWx0ZXJpbmcgdGhlIHZhbHVlKG1ha2luZyBpdCBgZGlydHlgKSxcbiAgICAgKiAgIGFuIGVycm9yIG1lc3NhZ2Ugc2hvdWxkbid0IGJlIHNob3duIGVpdGhlci5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICAgKiBAcGFyYW0ge0ludGVyYWN0aW9uU3RhdGVzfSBtZXRhXG4gICAgICovXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBGSVhNRTogaXN0YXRlbWl4aW4gc2hvdWxkIGltcGxlbWVudCB2YWxpZGF0ZW1peGluLCB0aGVuIEBvdmVycmlkZSBpcyB2YWxpZFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzLCBuby11bnVzZWQtdmFyc1xuICAgIF9zaG93RmVlZGJhY2tDb25kaXRpb25Gb3IodHlwZSwgbWV0YSkge1xuICAgICAgcmV0dXJuIChtZXRhLnRvdWNoZWQgJiYgbWV0YS5kaXJ0eSkgfHwgbWV0YS5wcmVmaWxsZWQgfHwgbWV0YS5zdWJtaXR0ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGVuaGFuY2UgVmFsaWRhdGVNaXhpblxuICAgICAqL1xuICAgIGdldCBfZmVlZGJhY2tDb25kaXRpb25NZXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSB0byBmaXgsIEludGVyYWN0aW9uU3RhdGVNaXhpbiBuZWVkcyB0byBkZXBlbmQgb24gVmFsaWRhdGVNaXhpblxuICAgICAgICAuLi5zdXBlci5fZmVlZGJhY2tDb25kaXRpb25NZXRhLFxuICAgICAgICBzdWJtaXR0ZWQ6IHRoaXMuc3VibWl0dGVkLFxuICAgICAgICB0b3VjaGVkOiB0aGlzLnRvdWNoZWQsXG4gICAgICAgIGRpcnR5OiB0aGlzLmRpcnR5LFxuICAgICAgICBmaWxsZWQ6IHRoaXMuZmlsbGVkLFxuICAgICAgICBwcmVmaWxsZWQ6IHRoaXMucHJlZmlsbGVkLFxuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbmV4cG9ydCBjb25zdCBJbnRlcmFjdGlvblN0YXRlTWl4aW4gPSBkZWR1cGVNaXhpbihJbnRlcmFjdGlvblN0YXRlTWl4aW5JbXBsZW1lbnRhdGlvbik7XG4iLCJpbXBvcnQgeyBMaXRFbGVtZW50LCBTbG90TWl4aW4gfSBmcm9tICdAbGlvbi9jb3JlJztcbmltcG9ydCB7IFZhbGlkYXRlTWl4aW4gfSBmcm9tICcuL3ZhbGlkYXRlL1ZhbGlkYXRlTWl4aW4uanMnO1xuaW1wb3J0IHsgRm9jdXNNaXhpbiB9IGZyb20gJy4vRm9jdXNNaXhpbi5qcyc7XG5pbXBvcnQgeyBGb3JtYXRNaXhpbiB9IGZyb20gJy4vRm9ybWF0TWl4aW4uanMnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2xNaXhpbiB9IGZyb20gJy4vRm9ybUNvbnRyb2xNaXhpbi5qcyc7XG5pbXBvcnQgeyBJbnRlcmFjdGlvblN0YXRlTWl4aW4gfSBmcm9tICcuL0ludGVyYWN0aW9uU3RhdGVNaXhpbi5qcyc7IC8vIGFwcGxpZXMgRm9jdXNNaXhpblxuXG4vKipcbiAqIGBMaW9uRmllbGRgOiB3cmFwcyA8aW5wdXQ+LCA8dGV4dGFyZWE+LCA8c2VsZWN0PiBhbmQgb3RoZXIgaW50ZXJhY3RhYmxlIGVsZW1lbnRzLlxuICogQWxzbyBpdCB3b3VsZCBmb2xsb3cgYSBuaWNlIGhpZXJhcmNoeTogbGlvbi1mb3JtIC0+IGxpb24tZmllbGRzZXQgLT4gbGlvbi1maWVsZFxuICpcbiAqIE5vdGU6IFdlIGRvbid0IHN1cHBvcnQgcGxhY2Vob2xkZXJzLCBiZWNhdXNlIHdlIGhhdmUgYSBoZWxwZXIgdGV4dCBhbmRcbiAqIHBsYWNlaG9sZGVycyBjb25mdXNlIHRoZSB1c2VyIHdpdGggYWNjZXNzaWJpbGl0eSBuZWVkcy5cbiAqXG4gKiBQbGVhc2Ugc2VlIHRoZSBkb2NzIGZvciBpbiBkZXB0aCBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGxpb24tZmllbGQgbmFtZT1cIm15TmFtZVwiPlxuICogICA8bGFiZWwgc2xvdD1cImxhYmVsXCI+TXkgSW5wdXQ8L2xhYmVsPlxuICogICA8aW5wdXQgdHlwZT1cInRleHRcIiBzbG90PVwiaW5wdXRcIj5cbiAqIDwvbGlvbi1maWVsZD5cbiAqXG4gKiBAY3VzdG9tRWxlbWVudCBsaW9uLWZpZWxkXG4gKi9cbmV4cG9ydCBjbGFzcyBMaW9uRmllbGQgZXh0ZW5kcyBGb3JtQ29udHJvbE1peGluKFxuICBJbnRlcmFjdGlvblN0YXRlTWl4aW4oRm9jdXNNaXhpbihGb3JtYXRNaXhpbihWYWxpZGF0ZU1peGluKFNsb3RNaXhpbihMaXRFbGVtZW50KSkpKSksXG4pIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KCdAbGlvbi9jb3JlJykuUHJvcGVydHlWYWx1ZXMgfSBjaGFuZ2VkUHJvcGVydGllc1xuICAgKi9cbiAgZmlyc3RVcGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKSB7XG4gICAgc3VwZXIuZmlyc3RVcGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICAvKiogQHR5cGUge2FueX0gKi9cbiAgICB0aGlzLl9pbml0aWFsTW9kZWxWYWx1ZSA9IHRoaXMubW9kZWxWYWx1ZTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5fb25DaGFuZ2UgPSB0aGlzLl9vbkNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2lucHV0Tm9kZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLl9vbkNoYW5nZSk7XG4gICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdmb3JtLWZpZWxkJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5faW5wdXROb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuX29uQ2hhbmdlKTtcbiAgfVxuXG4gIHJlc2V0SW50ZXJhY3Rpb25TdGF0ZSgpIHtcbiAgICBzdXBlci5yZXNldEludGVyYWN0aW9uU3RhdGUoKTtcbiAgICB0aGlzLnN1Ym1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyBtb2RlbFZhbHVlIHRvIGluaXRpYWwgdmFsdWUuXG4gICAqIEludGVyYWN0aW9uIHN0YXRlcyBhcmUgY2xlYXJlZFxuICAgKi9cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5tb2RlbFZhbHVlID0gdGhpcy5faW5pdGlhbE1vZGVsVmFsdWU7XG4gICAgdGhpcy5yZXNldEludGVyYWN0aW9uU3RhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgbW9kZWxWYWx1ZS5cbiAgICogSW50ZXJhY3Rpb24gc3RhdGVzIGFyZSBub3QgY2xlYXJlZCAodXNlIHJlc2V0SW50ZXJhY3Rpb25TdGF0ZSBmb3IgdGhpcylcbiAgICovXG4gIGNsZWFyKCkge1xuICAgIC8vIFRPRE86IFt2MV0gc2V0IHRvIHVuZGVmaW5lZFxuICAgIHRoaXMubW9kZWxWYWx1ZSA9ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgY3VzdG9tIGJ1YmJsZSBldmVudFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfb25DaGFuZ2UoKSB7XG4gICAgLyoqIEBwcm90ZWN0ZWRFdmVudCB1c2VyLWlucHV0LWNoYW5nZWQgKi9cbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCd1c2VyLWlucHV0LWNoYW5nZWQnLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBjb25maWd1cmUgSW50ZXJhY3Rpb25TdGF0ZU1peGluLCBWYWxpZGF0ZU1peGluXG4gICAqL1xuICBnZXQgX2ZlZWRiYWNrQ29uZGl0aW9uTWV0YSgpIHtcbiAgICByZXR1cm4geyAuLi5zdXBlci5fZmVlZGJhY2tDb25kaXRpb25NZXRhLCBmb2N1c2VkOiB0aGlzLmZvY3VzZWQgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAY29uZmlndXJlIEZvY3VzTWl4aW5cbiAgICovXG4gIGdldCBfZm9jdXNhYmxlTm9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faW5wdXROb2RlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBMaW9uRmllbGQsIE5hdGl2ZVRleHRGaWVsZE1peGluIH0gZnJvbSAnQGxpb24vZm9ybS1jb3JlJztcblxuLyoqXG4gKiBMaW9uSW5wdXQ6IGV4dGVuc2lvbiBvZiBsaW9uLWZpZWxkIHdpdGggbmF0aXZlIGlucHV0IGVsZW1lbnQgaW4gcGxhY2UgYW5kIHVzZXIgZnJpZW5kbHkgQVBJLlxuICpcbiAqIEBjdXN0b21FbGVtZW50IGxpb24taW5wdXRcbiAqL1xuZXhwb3J0IGNsYXNzIExpb25JbnB1dCBleHRlbmRzIE5hdGl2ZVRleHRGaWVsZE1peGluKExpb25GaWVsZCkge1xuICAvKiogQHR5cGUge2FueX0gKi9cbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvKipcbiAgICAgICAqIEEgQm9vbGVhbiBhdHRyaWJ1dGUgd2hpY2gsIGlmIHByZXNlbnQsIGluZGljYXRlcyB0aGF0IHRoZSB1c2VyIHNob3VsZCBub3QgYmUgYWJsZSB0byBlZGl0XG4gICAgICAgKiB0aGUgdmFsdWUgb2YgdGhlIGlucHV0LiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGRpc2FibGVkIGFuZCByZWFkb25seSBpcyB0aGF0IHJlYWQtb25seVxuICAgICAgICogY29udHJvbHMgY2FuIHN0aWxsIGZ1bmN0aW9uLCB3aGVyZWFzIGRpc2FibGVkIGNvbnRyb2xzIGdlbmVyYWxseSBkbyBub3QgZnVuY3Rpb24gYXNcbiAgICAgICAqIGNvbnRyb2xzIHVudGlsIHRoZXkgYXJlIGVuYWJsZWQuXG4gICAgICAgKlxuICAgICAgICogKEZyb206IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNhdHRyLXJlYWRvbmx5KVxuICAgICAgICovXG4gICAgICByZWFkT25seToge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBhdHRyaWJ1dGU6ICdyZWFkb25seScsXG4gICAgICAgIHJlZmxlY3Q6IHRydWUsXG4gICAgICB9LFxuICAgICAgdHlwZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHJlZmxlY3Q6IHRydWUsXG4gICAgICB9LFxuICAgICAgcGxhY2Vob2xkZXI6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICByZWZsZWN0OiB0cnVlLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgZ2V0IHNsb3RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5zdXBlci5zbG90cyxcbiAgICAgIGlucHV0OiAoKSA9PiB7XG4gICAgICAgIC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIGRvIHZhbHVlIGRlbGVnYXRpb24gdmlhIGF0dHJcbiAgICAgICAgY29uc3QgbmF0aXZlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldEF0dHJpYnV0ZSgndmFsdWUnKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgbmF0aXZlLnNldEF0dHJpYnV0ZSgndmFsdWUnLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hdGl2ZTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7SFRNTElucHV0RWxlbWVudH1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgZ2V0IF9pbnB1dE5vZGUoKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7SFRNTElucHV0RWxlbWVudH0gKi8gKHN1cGVyLl9pbnB1dE5vZGUpOyAvLyBjYXN0cyB0eXBlXG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucmVhZE9ubHkgPSBmYWxzZTtcbiAgICB0aGlzLnR5cGUgPSAndGV4dCc7XG4gICAgdGhpcy5wbGFjZWhvbGRlciA9ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UHJvcGVydHlLZXl9IFtuYW1lXVxuICAgKiBAcGFyYW0gez99IFtvbGRWYWx1ZV1cbiAgICovXG4gIHJlcXVlc3RVcGRhdGUobmFtZSwgb2xkVmFsdWUpIHtcbiAgICBzdXBlci5yZXF1ZXN0VXBkYXRlKG5hbWUsIG9sZFZhbHVlKTtcbiAgICBpZiAobmFtZSA9PT0gJ3JlYWRPbmx5Jykge1xuICAgICAgdGhpcy5fX2RlbGVnYXRlUmVhZE9ubHkoKTtcbiAgICB9XG4gIH1cblxuICAvKiogQHBhcmFtIHtpbXBvcnQoJ0BsaW9uL2NvcmUnKS5Qcm9wZXJ0eVZhbHVlcyB9IGNoYW5nZWRQcm9wZXJ0aWVzICovXG4gIGZpcnN0VXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcykge1xuICAgIHN1cGVyLmZpcnN0VXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgdGhpcy5fX2RlbGVnYXRlUmVhZE9ubHkoKTtcbiAgfVxuXG4gIC8qKiBAcGFyYW0ge2ltcG9ydCgnQGxpb24vY29yZScpLlByb3BlcnR5VmFsdWVzIH0gY2hhbmdlZFByb3BlcnRpZXMgKi9cbiAgdXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcykge1xuICAgIHN1cGVyLnVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ3R5cGUnKSkge1xuICAgICAgdGhpcy5faW5wdXROb2RlLnR5cGUgPSB0aGlzLnR5cGU7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygncGxhY2Vob2xkZXInKSkge1xuICAgICAgdGhpcy5faW5wdXROb2RlLnBsYWNlaG9sZGVyID0gdGhpcy5wbGFjZWhvbGRlcjtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKCdkaXNhYmxlZCcpKSB7XG4gICAgICB0aGlzLl9pbnB1dE5vZGUuZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkO1xuICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ25hbWUnKSkge1xuICAgICAgdGhpcy5faW5wdXROb2RlLm5hbWUgPSB0aGlzLm5hbWU7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnYXV0b2NvbXBsZXRlJykpIHtcbiAgICAgIHRoaXMuX2lucHV0Tm9kZS5hdXRvY29tcGxldGUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHRoaXMuYXV0b2NvbXBsZXRlKTtcbiAgICB9XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgX19kZWxlZ2F0ZVJlYWRPbmx5KCkge1xuICAgIGlmICh0aGlzLl9pbnB1dE5vZGUpIHtcbiAgICAgIHRoaXMuX2lucHV0Tm9kZS5yZWFkT25seSA9IHRoaXMucmVhZE9ubHk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBkZWR1cGVNaXhpbiB9IGZyb20gJ0BsaW9uL2NvcmUnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL3JlZ2lzdHJhdGlvbi9Gb3JtUmVnaXN0cmFyUG9ydGFsTWl4aW5UeXBlcycpLkZvcm1SZWdpc3RyYXJQb3J0YWxNaXhpbn0gRm9ybVJlZ2lzdHJhclBvcnRhbE1peGluXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9yZWdpc3RyYXRpb24vRm9ybVJlZ2lzdHJhclBvcnRhbE1peGluVHlwZXMnKS5Gb3JtUmVnaXN0cmFyUG9ydGFsSG9zdH0gRm9ybVJlZ2lzdHJhclBvcnRhbEhvc3RcbiAqL1xuXG4vKipcbiAqIFRoaXMgYWxsb3dzIHRvIHJlZ2lzdGVyIGZpZWxkcyB3aXRoaW4gYSBmb3JtIGV2ZW4gdGhvdWdoIHRoZXkgYXJlIG5vdCB3aXRoaW4gdGhlIHNhbWUgZG9tIHRyZWUuXG4gKiBJdCBkb2VzIHRoYXQgYnkgcmVkaXNwYXRjaGluZyB0aGUgZXZlbnQgb24gdGhlIHJlZ2lzdHJhdGlvbiB0YXJnZXQuXG4gKiBOZWl0aGVyIGZvcm0gb3IgZmllbGQgbmVlZCB0byBrbm93IGFib3V0IHRoZSBwb3J0YWwuIEl0IGFjdHMgYXMgaWYgdGhlIGZpZWxkIGlzIHBhcnQgb2YgdGhlIGRvbSB0cmVlLlxuICpcbiAqIEBleGFtcGxlXG4gKiA8bXktZm9ybT48L215LWZvcm0+XG4gKiA8bXktcG9ydGFsIC5yZWdpc3RyYXRpb25UYXJnZXQ9JHtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdteS1mb3JtJyl9PlxuICogICA8bXktZmllbGQ+PC9teS1maWVsZD5cbiAqIDwvbXktcG9ydGFsPlxuICogLy8gbXktZmllbGQgd2lsbCBiZSByZWdpc3RlcmVkIHdpdGhpbiBteS1mb3JtXG4gKiBAdHlwZSB7Rm9ybVJlZ2lzdHJhclBvcnRhbE1peGlufVxuICogQHBhcmFtIHtpbXBvcnQoJ0BvcGVuLXdjL2RlZHVwZS1taXhpbicpLkNvbnN0cnVjdG9yPEhUTUxFbGVtZW50Pn0gc3VwZXJjbGFzc1xuICovXG5jb25zdCBGb3JtUmVnaXN0cmFyUG9ydGFsTWl4aW5JbXBsZW1lbnRhdGlvbiA9IHN1cGVyY2xhc3MgPT5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdywgbm8tdW51c2VkLXZhcnNcbiAgLy8gQHRzLWlnbm9yZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzM2ODIxI2lzc3VlY29tbWVudC01ODgzNzUwNTFcbiAgY2xhc3MgZXh0ZW5kcyBzdXBlcmNsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG5cbiAgICAgIC8qKlxuICAgICAgICogUmVnaXN0cmF0aW9uIHRhcmdldDogYW4gZWxlbWVudCwgdXN1YWxseSBpbiB0aGUgYm9keSBvZiB0aGUgZG9tLCB0aGF0IGNhcHR1cmVzIGV2ZW50c1xuICAgICAgICogYW5kIHJlZGlzcGF0Y2hlcyB0aGVtIG9uIGhvc3RcbiAgICAgICAqIEB0eXBlIHsoRm9ybVJlZ2lzdHJhclBvcnRhbEhvc3QgJiBIVE1MRWxlbWVudCkgfCB1bmRlZmluZWR9XG4gICAgICAgKi9cbiAgICAgIHRoaXMucmVnaXN0cmF0aW9uVGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fX3JlZGlzcGF0Y2hFdmVudEZvckZvcm1SZWdpc3RyYXJQb3J0YWxNaXhpbiA9XG4gICAgICAgIHRoaXMuX19yZWRpc3BhdGNoRXZlbnRGb3JGb3JtUmVnaXN0cmFyUG9ydGFsTWl4aW4uYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgJ2Zvcm0tZWxlbWVudC1yZWdpc3RlcicsXG4gICAgICAgIC8qKiBAdHlwZSB7RXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdH0gKi8gKFxuICAgICAgICAgIHRoaXMuX19yZWRpc3BhdGNoRXZlbnRGb3JGb3JtUmVnaXN0cmFyUG9ydGFsTWl4aW5cbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtDdXN0b21FdmVudH0gZXZcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9fcmVkaXNwYXRjaEV2ZW50Rm9yRm9ybVJlZ2lzdHJhclBvcnRhbE1peGluKGV2KSB7XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmICghdGhpcy5yZWdpc3RyYXRpb25UYXJnZXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIEZvcm1SZWdpc3RyYXJQb3J0YWwgZWxlbWVudCByZXF1aXJlcyBhIC5yZWdpc3RyYXRpb25UYXJnZXQnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVnaXN0cmF0aW9uVGFyZ2V0LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIG5ldyBDdXN0b21FdmVudCgnZm9ybS1lbGVtZW50LXJlZ2lzdGVyJywge1xuICAgICAgICAgIGRldGFpbDogeyBlbGVtZW50OiBldi5kZXRhaWwuZWxlbWVudCB9LFxuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbmV4cG9ydCBjb25zdCBGb3JtUmVnaXN0cmFyUG9ydGFsTWl4aW4gPSBkZWR1cGVNaXhpbihGb3JtUmVnaXN0cmFyUG9ydGFsTWl4aW5JbXBsZW1lbnRhdGlvbik7XG4iLCJpbXBvcnQgeyBMaXRFbGVtZW50IH0gZnJvbSAnQGxpb24vY29yZSc7XG5pbXBvcnQgeyBGb3JtUmVnaXN0cmFyUG9ydGFsTWl4aW4gfSBmcm9tICdAbGlvbi9mb3JtLWNvcmUnO1xuXG4vKipcbiAqIExpb25PcHRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBMaW9uT3B0aW9ucyBleHRlbmRzIEZvcm1SZWdpc3RyYXJQb3J0YWxNaXhpbihMaXRFbGVtZW50KSB7XG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm9sZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHJlZmxlY3Q6IHRydWUsXG4gICAgICB9LFxuICAgICAgdGFiSW5kZXg6IHtcbiAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICByZWZsZWN0OiB0cnVlLFxuICAgICAgICBhdHRyaWJ1dGU6ICd0YWJpbmRleCcsXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucm9sZSA9ICdsaXN0Ym94JztcbiAgICB0aGlzLnRhYkluZGV4ID0gMDtcbiAgfVxuXG4gIGNyZWF0ZVJlbmRlclJvb3QoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cblxuaW1wb3J0IHsgY3NzLCBodG1sLCBub3RoaW5nLCBkZWR1cGVNaXhpbiB9IGZyb20gJ0BsaW9uL2NvcmUnO1xuaW1wb3J0IHsgRm9ybWF0TWl4aW4gfSBmcm9tICcuLi9Gb3JtYXRNaXhpbi5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvRm9ybUNvbnRyb2xNaXhpblR5cGVzJykuRm9ybUNvbnRyb2xIb3N0fSBGb3JtQ29udHJvbEhvc3RcbiAqIEB0eXBlZGVmIHtGb3JtQ29udHJvbEhvc3QgJiBIVE1MRWxlbWVudCAmIHtfcGFyZW50Rm9ybUdyb3VwPzpIVE1MRWxlbWVudCwgY2hlY2tlZD86Ym9vbGVhbn19IEZvcm1Db250cm9sXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9jaG9pY2UtZ3JvdXAvQ2hvaWNlSW5wdXRNaXhpblR5cGVzJykuQ2hvaWNlSW5wdXRNaXhpbn0gQ2hvaWNlSW5wdXRNaXhpblxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvY2hvaWNlLWdyb3VwL0Nob2ljZUlucHV0TWl4aW5UeXBlcycpLkNob2ljZUlucHV0TW9kZWxWYWx1ZX0gQ2hvaWNlSW5wdXRNb2RlbFZhbHVlXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0Nob2ljZUlucHV0TW9kZWxWYWx1ZX0gbndcXFxuICogQHBhcmFtIHt7dmFsdWU/OmFueSwgY2hlY2tlZD86Ym9vbGVhbn19IG9sZFxuICovXG5jb25zdCBoYXNDaGFuZ2VkID0gKG53LCBvbGQgPSB7fSkgPT4gbncudmFsdWUgIT09IG9sZC52YWx1ZSB8fCBudy5jaGVja2VkICE9PSBvbGQuY2hlY2tlZDtcblxuLyoqXG4gKiBAdHlwZSB7Q2hvaWNlSW5wdXRNaXhpbn1cbiAqIEBwYXJhbSB7aW1wb3J0KCdAb3Blbi13Yy9kZWR1cGUtbWl4aW4nKS5Db25zdHJ1Y3RvcjxpbXBvcnQoJ0BsaW9uL2NvcmUnKS5MaXRFbGVtZW50Pn0gc3VwZXJjbGFzc1xuICovXG5jb25zdCBDaG9pY2VJbnB1dE1peGluSW1wbGVtZW50YXRpb24gPSBzdXBlcmNsYXNzID0+XG4gIC8vIEB0cy1pZ25vcmUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zNjgyMSNpc3N1ZWNvbW1lbnQtNTg4Mzc1MDUxXG4gIGNsYXNzIENob2ljZUlucHV0TWl4aW4gZXh0ZW5kcyBGb3JtYXRNaXhpbihzdXBlcmNsYXNzKSB7XG4gICAgLyoqIEB0eXBlIHthbnl9ICovXG4gICAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2hlY2tlZDogeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0sXG4gICAgICAgIGRpc2FibGVkOiB7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUgfSxcbiAgICAgICAgbW9kZWxWYWx1ZTogeyB0eXBlOiBPYmplY3QsIGhhc0NoYW5nZWQgfSxcbiAgICAgICAgY2hvaWNlVmFsdWU6IHsgdHlwZTogT2JqZWN0IH0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSB0aGF0IHdpbGwgYmUgcmVnaXN0ZXJlZCB0byB0aGUgbW9kZWxWYWx1ZSBvZiB0aGUgcGFyZW50IENob2ljZUdyb3VwLiBSZWNvbW1lbmRlZFxuICAgICAqIHRvIGJlIGEgc3RyaW5nXG4gICAgICogQHR5cGUge3N0cmluZ3xhbnl9XG4gICAgICovXG4gICAgZ2V0IGNob2ljZVZhbHVlKCkge1xuICAgICAgcmV0dXJuIHRoaXMubW9kZWxWYWx1ZS52YWx1ZTtcbiAgICB9XG5cbiAgICBzZXQgY2hvaWNlVmFsdWUodmFsdWUpIHtcbiAgICAgIHRoaXMucmVxdWVzdFVwZGF0ZSgnY2hvaWNlVmFsdWUnLCB0aGlzLmNob2ljZVZhbHVlKTtcbiAgICAgIGlmICh0aGlzLm1vZGVsVmFsdWUudmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7Q2hvaWNlSW5wdXRNb2RlbFZhbHVlfSAqL1xuICAgICAgICB0aGlzLm1vZGVsVmFsdWUgPSB7IHZhbHVlLCBjaGVja2VkOiB0aGlzLm1vZGVsVmFsdWUuY2hlY2tlZCB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHthbnl9IG9sZFZhbHVlXG4gICAgICovXG4gICAgcmVxdWVzdFVwZGF0ZShuYW1lLCBvbGRWYWx1ZSkge1xuICAgICAgc3VwZXIucmVxdWVzdFVwZGF0ZShuYW1lLCBvbGRWYWx1ZSk7XG5cbiAgICAgIGlmIChuYW1lID09PSAnbW9kZWxWYWx1ZScpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZWxWYWx1ZS5jaGVja2VkICE9PSB0aGlzLmNoZWNrZWQpIHtcbiAgICAgICAgICB0aGlzLl9fc3luY01vZGVsQ2hlY2tlZFRvQ2hlY2tlZCh0aGlzLm1vZGVsVmFsdWUuY2hlY2tlZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2NoZWNrZWQnKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZGVsVmFsdWUuY2hlY2tlZCAhPT0gdGhpcy5jaGVja2VkKSB7XG4gICAgICAgICAgdGhpcy5fX3N5bmNDaGVja2VkVG9Nb2RlbCh0aGlzLmNoZWNrZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJ0BsaW9uL2NvcmUnKS5Qcm9wZXJ0eVZhbHVlcyB9IGNoYW5nZWRQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZmlyc3RVcGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKSB7XG4gICAgICBzdXBlci5maXJzdFVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnY2hlY2tlZCcpKSB7XG4gICAgICAgIC8vIEhlcmUgd2Ugc2V0IHRoZSBpbml0aWFsIHZhbHVlIGZvciBvdXIgW3Nsb3Q9aW5wdXRdIGNvbnRlbnQsXG4gICAgICAgIC8vIHdoaWNoIGhhcyBiZWVuIHNldCBieSBvdXIgU2xvdE1peGluXG4gICAgICAgIHRoaXMuX19zeW5jQ2hlY2tlZFRvSW5wdXRFbGVtZW50KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJ0BsaW9uL2NvcmUnKS5Qcm9wZXJ0eVZhbHVlcyB9IGNoYW5nZWRQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgdXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcykge1xuICAgICAgc3VwZXIudXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKCdtb2RlbFZhbHVlJykpIHtcbiAgICAgICAgdGhpcy5fX3N5bmNDaGVja2VkVG9JbnB1dEVsZW1lbnQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ25hbWUnKSAmJlxuICAgICAgICB0aGlzLl9wYXJlbnRGb3JtR3JvdXAgJiZcbiAgICAgICAgdGhpcy5fcGFyZW50Rm9ybUdyb3VwLm5hbWUgIT09IHRoaXMubmFtZVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX3N5bmNOYW1lVG9QYXJlbnRGb3JtR3JvdXAoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICAvKipcbiAgICAgICAqIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCB0aGlzIGVsZW1lbnQgaXMgY2hlY2tlZCBieSB0aGUgZW5kIHVzZXIuXG4gICAgICAgKi9cbiAgICAgIC8vIFRPRE86IFt2MV0gdGhpcyBjYW4gYmUgc29sdmVkIHdoZW4gcHJvcGVydHkgZWZmZWN0cyBhcmUgc2NoZWR1bGVkIHVudGlsIGZpcnN0VXBkYXRlZFxuICAgICAgLy8gdGhpcy5jaGVja2VkID0gZmFsc2U7XG4gICAgICAvKipcbiAgICAgICAqIFdoZXJlYXMgJ25vcm1hbCcgYC5tb2RlbFZhbHVlYHMgdXN1YWxseSBzdG9yZSBhIGNvbXBsZXgvdHlwZWQgdmVyc2lvblxuICAgICAgICogb2YgYSB2aWV3IHZhbHVlLCBjaG9pY2UgaW5wdXRzIGhhdmUgYSBzbGlnaHRseSBkaWZmZXJlbnQgYXBwcm9hY2guXG4gICAgICAgKiBJbiBvcmRlciB0byByZW1haW4gdGhlaXIgU2luZ2xlIFNvdXJjZSBvZiBUcnV0aCBjaGFyYWN0ZXJpc3RpYywgY2hvaWNlIGlucHV0c1xuICAgICAgICogc3RvcmUgYm90aCB0aGUgdmFsdWUgYW5kICdjaGVja2VkbmVzcycsIGluIHRoZSBmb3JtYXQgeyB2YWx1ZTogJ3gnLCBjaGVja2VkOiB0cnVlIH1cbiAgICAgICAqIERpZmZlcmVudCBmcm9tIHRoZSBwbGF0Zm9ybSwgdGhpcyBhbHNvIGFsbG93cyB0byBzZXJpYWxpemUgdGhlICdub24gY2hlY2tlZG5lc3MnLFxuICAgICAgICogYWxsb3dpbmcgdG8gcmVzdG9yZSBmb3JtIHN0YXRlIGVhc2lseSBhbmQgaW5mb3JtIHRoZSBzZXJ2ZXIgYWJvdXQgdW5jaGVja2VkIG9wdGlvbnMuXG4gICAgICAgKiBAdHlwZSB7e3ZhbHVlOnN0cmluZ3xhbnksY2hlY2tlZDpib29sZWFufX1cbiAgICAgICAqL1xuICAgICAgdGhpcy5tb2RlbFZhbHVlID0geyB2YWx1ZTogJycsIGNoZWNrZWQ6IGZhbHNlIH07XG4gICAgICAvLyBUT0RPOiBtYXliZSBkaXNhYmxlZCBpcyBtb3JlIGEgY29uY2VybiBvZiBGb3JtQ29udHJvbC9GaWVsZD9cbiAgICAgIC8qKlxuICAgICAgICogQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgb3Igbm90IHRoaXMgZWxlbWVudCBpcyBkaXNhYmxlZC5cbiAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICovXG4gICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHZhbHVlIHByb3BlcnR5IG9mIHRoZSBtb2RlbFZhbHVlLiBJdCBwcm92aWRlcyBhbiBlYXN5IGludGVyZmFjZSBmb3Igc3RvcmluZ1xuICAgICAgICogKGNvbXBsZXgpIHZhbHVlcyBpbiB0aGUgbW9kZWxWYWx1ZVxuICAgICAgICovXG5cbiAgICAgIC8qKiBAcHJvdGVjdGVkICovXG4gICAgICB0aGlzLl9wcmV2ZW50RHVwbGljYXRlTGFiZWxDbGljayA9IHRoaXMuX3ByZXZlbnREdXBsaWNhdGVMYWJlbENsaWNrLmJpbmQodGhpcyk7XG4gICAgICAvKiogQHByb3RlY3RlZCAqL1xuICAgICAgdGhpcy5fdG9nZ2xlQ2hlY2tlZCA9IHRoaXMuX3RvZ2dsZUNoZWNrZWQuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdHlsZXMgZm9yIFtpbnB1dD1yYWRpb10gYW5kIFtpbnB1dD1jaGVja2JveF0gd3JhcHBlcnMuXG4gICAgICogRm9yIFtyb2xlPW9wdGlvbl0gZXh0ZW5zaW9ucywgcGxlYXNlIG92ZXJyaWRlIGNvbXBsZXRlbHlcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIC4uLihzdXBlci5zdHlsZXMgfHwgW10pLFxuICAgICAgICBjc3NgXG4gICAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICA6aG9zdChbaGlkZGVuXSkge1xuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuY2hvaWNlLWZpZWxkX19ncmFwaGljLWNvbnRhaW5lciB7XG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuY2hvaWNlLWZpZWxkX19oZWxwLXRleHQge1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICBmbGV4LWJhc2lzOiAxMDAlO1xuICAgICAgICAgIH1cbiAgICAgICAgYCxcbiAgICAgIF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGVtcGxhdGUgZm9yIFtpbnB1dD1yYWRpb10gYW5kIFtpbnB1dD1jaGVja2JveF0gd3JhcHBlcnMuXG4gICAgICogRm9yIFtyb2xlPW9wdGlvbl0gZXh0ZW5zaW9ucywgcGxlYXNlIG92ZXJyaWRlIGNvbXBsZXRlbHlcbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgPHNsb3QgbmFtZT1cImlucHV0XCI+PC9zbG90PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hvaWNlLWZpZWxkX19ncmFwaGljLWNvbnRhaW5lclwiPiR7dGhpcy5fY2hvaWNlR3JhcGhpY1RlbXBsYXRlKCl9PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaG9pY2UtZmllbGRfX2xhYmVsXCI+XG4gICAgICAgICAgPHNsb3QgbmFtZT1cImxhYmVsXCI+PC9zbG90PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNtYWxsIGNsYXNzPVwiY2hvaWNlLWZpZWxkX19oZWxwLXRleHRcIj5cbiAgICAgICAgICA8c2xvdCBuYW1lPVwiaGVscC10ZXh0XCI+PC9zbG90PlxuICAgICAgICA8L3NtYWxsPlxuICAgICAgICAke3RoaXMuX2FmdGVyVGVtcGxhdGUoKX1cbiAgICAgIGA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF9jaG9pY2VHcmFwaGljVGVtcGxhdGUoKSB7XG4gICAgICByZXR1cm4gbm90aGluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX2FmdGVyVGVtcGxhdGUoKSB7XG4gICAgICByZXR1cm4gbm90aGluZztcbiAgICB9XG5cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICBpZiAodGhpcy5fbGFiZWxOb2RlKSB7XG4gICAgICAgIHRoaXMuX2xhYmVsTm9kZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX3ByZXZlbnREdXBsaWNhdGVMYWJlbENsaWNrKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndXNlci1pbnB1dC1jaGFuZ2VkJywgdGhpcy5fdG9nZ2xlQ2hlY2tlZCk7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgaWYgKHRoaXMuX2xhYmVsTm9kZSkge1xuICAgICAgICB0aGlzLl9sYWJlbE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9wcmV2ZW50RHVwbGljYXRlTGFiZWxDbGljayk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VzZXItaW5wdXQtY2hhbmdlZCcsIHRoaXMuX3RvZ2dsZUNoZWNrZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBuYXRpdmUgcGxhdGZvcm0gZmlyZXMgYW4gZXZlbnQgZm9yIGJvdGggdGhlIGNsaWNrIG9uIHRoZSBsYWJlbCwgYW5kIGFsc29cbiAgICAgKiB0aGUgcmVkaXNwYXRjaGVkIGNsaWNrIG9uIHRoZSBuYXRpdmUgaW5wdXQgZWxlbWVudC5cbiAgICAgKiBUaGlzIHJlc3VsdHMgaW4gdHdvIGNsaWNrIGV2ZW50cyBhcnJpdmluZyBhdCB0aGUgaG9zdCwgYnV0IHdlIG9ubHkgd2FudCBvbmUuXG4gICAgICogVGhpcyBtZXRob2QgcHJldmVudHMgdGhlIGR1cGxpY2F0ZSBjbGljayBhbmQgZW5zdXJlcyB0aGUgY29ycmVjdCBpc1RydXN0ZWQgZXZlbnRcbiAgICAgKiB3aXRoIHRoZSBjb3JyZWN0IGV2ZW50LnRhcmdldCBhcnJpdmVzIGF0IHRoZSBob3N0LlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIF9wcmV2ZW50RHVwbGljYXRlTGFiZWxDbGljayhldikge1xuICAgICAgY29uc3QgX19pbnB1dENsaWNrSGFuZGxlciA9IC8qKiBAcGFyYW0ge0V2ZW50fSBfZXYgKi8gX2V2ID0+IHtcbiAgICAgICAgX2V2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLl9pbnB1dE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfX2lucHV0Q2xpY2tIYW5kbGVyKTtcbiAgICAgIH07XG4gICAgICB0aGlzLl9pbnB1dE5vZGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfX2lucHV0Q2xpY2tIYW5kbGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBfdG9nZ2xlQ2hlY2tlZChldikge1xuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5faXNIYW5kbGluZ1VzZXJJbnB1dCA9IHRydWU7XG4gICAgICB0aGlzLmNoZWNrZWQgPSAhdGhpcy5jaGVja2VkO1xuICAgICAgdGhpcy5faXNIYW5kbGluZ1VzZXJJbnB1dCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRPRE86IG1ha2UgdGhpcyBsZXNzIGZ1enp5IGJ5IGFwcGx5aW5nIHRoZXNlIG1ldGhvZHMgaW4gTGlvblJhZGlvIGFuZCBMaW9uQ2hlY2tib3hcbiAgICAvLyB2aWEgaW5zdGFuY2VvZiAob3IgZmVhdC4gZGV0ZWN0aW9uIGZvciB0cmVlLXNoYWtpbmcgaW4gY2FzZSBwYXJlbnRHcm91cCBub3QgbmVlZGVkKVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHRoaXMgaW4gY2FzZSBvZiBleHRlbmRpbmcgQ2hvaWNlSW5wdXRNaXhpbiBhbmQgcmVxdWlyaW5nXG4gICAgICogdG8gc3luYyBkaWZmZXJlbnRseSB3aXRoIHBhcmVudCBmb3JtIGdyb3VwIG5hbWVcbiAgICAgKiBSaWdodCBub3cgaXQgY2hlY2tzIHRhZyBuYW1lIG1hdGNoIHdoZXJlIHRoZSBwYXJlbnQgZm9ybSBncm91cCB0YWduYW1lXG4gICAgICogc2hvdWxkIGluY2x1ZGUgdGhlIGNoaWxkIGZpZWxkIHRhZ25hbWUgKCdjaGVja2JveCcgaXMgaW5jbHVkZWQgaW4gJ2NoZWNrYm94LWdyb3VwJylcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3N5bmNOYW1lVG9QYXJlbnRGb3JtR3JvdXAoKSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFtleHRlcm5hbF06IHRhZ05hbWUgc2hvdWxkIGJlIGEgcHJvcCBvZiBIVE1MRWxlbWVudFxuICAgICAgaWYgKHRoaXMuX3BhcmVudEZvcm1Hcm91cC50YWdOYW1lLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5fcGFyZW50Rm9ybUdyb3VwPy5uYW1lIHx8ICcnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2hlY2tlZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX19zeW5jTW9kZWxDaGVja2VkVG9DaGVja2VkKGNoZWNrZWQpIHtcbiAgICAgIHRoaXMuY2hlY2tlZCA9IGNoZWNrZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHthbnl9IGNoZWNrZWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9fc3luY0NoZWNrZWRUb01vZGVsKGNoZWNrZWQpIHtcbiAgICAgIHRoaXMubW9kZWxWYWx1ZSA9IHsgdmFsdWU6IHRoaXMuY2hvaWNlVmFsdWUsIGNoZWNrZWQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9fc3luY0NoZWNrZWRUb0lucHV0RWxlbWVudCgpIHtcbiAgICAgIC8vIC5faW5wdXROb2RlIG1pZ2h0IG5vdCBiZSBhdmFpbGFibGUgeWV0KHNsb3QgY29udGVudClcbiAgICAgIC8vIG9yIGF0IGFsbCAobm8gcmVsaWFuY2Ugb24gcGxhdGZvcm0gY29uc3RydWN0LCBpbiBjYXNlIG9mIFtyb2xlPW9wdGlvbl0pXG4gICAgICBpZiAodGhpcy5faW5wdXROb2RlKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7SFRNTElucHV0RWxlbWVudH0gKi9cbiAgICAgICAgKHRoaXMuX2lucHV0Tm9kZSkuY2hlY2tlZCA9IHRoaXMuY2hlY2tlZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBvdmVycmlkZGVuIGZyb20gRm9ybWF0TWl4aW4uIEl0IG9yaWdpbmFsbHkgZmlyZWQgdGhlIG5vcm1hbGl6aW5nXG4gICAgICogJ3VzZXItaW5wdXQtY2hhbmdlZCcgZXZlbnQgYWZ0ZXIgbGlzdGVuaW5nIHRvIHRoZSBuYXRpdmUgJ2lucHV0JyBldmVudC5cbiAgICAgKiBIb3dldmVyIG9uIENocm9tZSBvbiBNYWMgd2hlbmV2ZXIgeW91IHVzZSB0aGUga2V5Ym9hcmRcbiAgICAgKiBpdCBmaXJlcyB0aGUgaW5wdXQgQU5EIGNoYW5nZSBldmVudC4gT3RoZXIgQnJvd3NlcnMgb25seSBmaXJlcyB0aGUgY2hhbmdlIGV2ZW50LlxuICAgICAqIFRoZXJlZm9yZSB3ZSBkaXNhYmxlIHRoZSBpbnB1dCBldmVudCBoZXJlLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfcHJveHlJbnB1dEV2ZW50KCkge31cblxuICAgIC8qKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIGhhc0NoYW5nZWQgaXMgZGVzaWduZWQgZm9yIGFzeW5jICh1cGRhdGVkKSBjYWxsYmFjaywgYWxzbyBjaGVjayBmb3Igc3luY1xuICAgICAqIChyZXF1ZXN0VXBkYXRlKSBjYWxsYmFja1xuICAgICAqIEBwYXJhbSB7eyBtb2RlbFZhbHVlOnVua25vd24gfX0gbmV3VlxuICAgICAqIEBwYXJhbSB7eyBtb2RlbFZhbHVlOnVua25vd24gfX0gW29sZF1cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX29uTW9kZWxWYWx1ZUNoYW5nZWQoeyBtb2RlbFZhbHVlIH0sIG9sZCkge1xuICAgICAgbGV0IF9vbGQ7XG4gICAgICBpZiAob2xkICYmIG9sZC5tb2RlbFZhbHVlKSB7XG4gICAgICAgIF9vbGQgPSBvbGQubW9kZWxWYWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgW2V4dGVybmFsXTogbGl0IHByaXZhdGUgcHJvcGVydHlcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRQcm9wZXJ0aWVzLmdldCgnbW9kZWxWYWx1ZScpLmhhc0NoYW5nZWQobW9kZWxWYWx1ZSwgX29sZCkpIHtcbiAgICAgICAgc3VwZXIuX29uTW9kZWxWYWx1ZUNoYW5nZWQoeyBtb2RlbFZhbHVlIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIE92ZXJyaWRkZW4gZnJvbSBGb3JtYXRNaXhpbiwgc2luY2UgYSBkaWZmZXJlbnQgbW9kZWxWYWx1ZSBpcyB1c2VkIGZvciBjaG9pY2UgaW5wdXRzLlxuICAgICAqIFNldHMgbW9kZWxWYWx1ZSBiYXNlZCBvbiBjaGVja2VkIHN0YXRlIChpbnN0ZWFkIG9mIHZhbHVlKSwgc28gdGhhdCBjaGFuZ2VzIHdpbGwgYmUgZGV0ZWN0ZWQuXG4gICAgICovXG4gICAgcGFyc2VyKCkge1xuICAgICAgcmV0dXJuIHRoaXMubW9kZWxWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAb3ZlcnJpZGUgT3ZlcnJpZGRlbiBmcm9tIEZvcm1hdE1peGluLCBzaW5jZSBhIGRpZmZlcmVudCBtb2RlbFZhbHVlIGlzIHVzZWQgZm9yIGNob2ljZSBpbnB1dHMuXG4gICAgICogQHBhcmFtIHtDaG9pY2VJbnB1dE1vZGVsVmFsdWUgfSBtb2RlbFZhbHVlXG4gICAgICovXG4gICAgZm9ybWF0dGVyKG1vZGVsVmFsdWUpIHtcbiAgICAgIHJldHVybiBtb2RlbFZhbHVlICYmIG1vZGVsVmFsdWUudmFsdWUgIT09IHVuZGVmaW5lZCA/IG1vZGVsVmFsdWUudmFsdWUgOiBtb2RlbFZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIE92ZXJyaWRkZW4gZnJvbSBMaW9uRmllbGQsIHNpbmNlIHRoZSBtb2RlbFZhbHVlIHNob3VsZCBub3QgYmUgY2xlYXJlZC5cbiAgICAgKi9cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEZJWE1FOiBAb3ZlcnJpZGUgZ2l2ZXMgZXJyb3IgYmVjYXVzZSBMaW9uRmllbGQgaXMgbm90IHN1cGVyY2xhc3MgdHlwZSwgdGhpcyBtaXhpbiBzaG91bGQgb25seSBhbGxvdyBMaW9uRmllbGQgZXh0ZW5zaW9uc1xuICAgIGNsZWFyKCkge1xuICAgICAgdGhpcy5jaGVja2VkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBmb3IgcmVxdWlyZWQgdmFsaWRhdG9yLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfaXNFbXB0eSgpIHtcbiAgICAgIHJldHVybiAhdGhpcy5jaGVja2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqIE92ZXJyaWRkZW4gZnJvbSBGb3JtYXRNaXhpbiwgc2luY2UgYSBkaWZmZXJlbnQgbW9kZWxWYWx1ZSBpcyB1c2VkIGZvciBjaG9pY2UgaW5wdXRzLlxuICAgICAqIFN5bmNocm9uaXphdGlvbiBmcm9tIHVzZXIgaW5wdXQgaXMgYWxyZWFkeSBhcnJhbmdlZCBpbiB0aGlzIE1peGluLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfc3luY1ZhbHVlVXB3YXJkcygpIHt9XG4gIH07XG5cbmV4cG9ydCBjb25zdCBDaG9pY2VJbnB1dE1peGluID0gZGVkdXBlTWl4aW4oQ2hvaWNlSW5wdXRNaXhpbkltcGxlbWVudGF0aW9uKTtcbiIsImltcG9ydCB7IENob2ljZUlucHV0TWl4aW4sIEZvcm1SZWdpc3RlcmluZ01peGluIH0gZnJvbSAnQGxpb24vZm9ybS1jb3JlJztcbmltcG9ydCB7IGNzcywgRGlzYWJsZWRNaXhpbiwgaHRtbCwgTGl0RWxlbWVudCwgU2xvdE1peGluIH0gZnJvbSAnQGxpb24vY29yZSc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnQGxpb24vY29yZScpLlRlbXBsYXRlUmVzdWx0IH0gVGVtcGxhdGVSZXN1bHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BsaW9uL2Zvcm0tY29yZS90eXBlcy9jaG9pY2UtZ3JvdXAvQ2hvaWNlR3JvdXBNaXhpblR5cGVzJykuQ2hvaWNlR3JvdXBIb3N0IH0gQ2hvaWNlR3JvdXBIb3N0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy9MaW9uT3B0aW9uJykuTGlvbk9wdGlvbkhvc3QgfSBMaW9uT3B0aW9uSG9zdFxuICovXG5cbi8qKlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L29wdGlvblxuICogQ2FuIGJlIGEgY2hpbGQgb2YgZGF0YWxpc3Qvc2VsZWN0LCBvciByb2xlPVwibGlzdGJveFwiXG4gKlxuICogRWxlbWVudCBnZXRzIHN0YXRlIHN1cHBsaWVkIGV4dGVybmFsbHksIHJlZmxlY3RzIHRoaXMgdG8gYXR0cmlidXRlcyxcbiAqIGVuYWJsaW5nIFN1YkNsYXNzZXJzIHRvIHN0eWxlIGJhc2VkIG9uIHRob3NlIHN0YXRlc1xuICovXG5leHBvcnQgY2xhc3MgTGlvbk9wdGlvbiBleHRlbmRzIERpc2FibGVkTWl4aW4oXG4gIENob2ljZUlucHV0TWl4aW4oRm9ybVJlZ2lzdGVyaW5nTWl4aW4oU2xvdE1peGluKExpdEVsZW1lbnQpKSksXG4pIHtcbiAgLyoqIEB0eXBlIHthbnl9ICovXG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYWN0aXZlOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIHJlZmxlY3Q6IHRydWUsXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgY3NzYFxuICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICAgICAgcGFkZGluZzogNHB4O1xuICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIDpob3N0KFtoaWRkZW5dKSB7XG4gICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIDpob3N0KDpob3Zlcikge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XG4gICAgICAgIH1cbiAgICAgICAgOmhvc3QoW2FjdGl2ZV0pIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xuICAgICAgICB9XG5cbiAgICAgICAgOmhvc3QoW2NoZWNrZWRdKSB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2JkZTRmZjtcbiAgICAgICAgfVxuXG4gICAgICAgIDpob3N0KFtkaXNhYmxlZF0pIHtcbiAgICAgICAgICBjb2xvcjogI2FkYWRhZDtcbiAgICAgICAgfVxuICAgICAgYCxcbiAgICBdO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZSBXZSB3YW50IHRvIHN0YXJ0IHdpdGggYSBjbGVhbiBzbGF0ZSwgc28gd2Ugb21pdCBzbG90cyBpbmhlcml0ZWQgZnJvbSBGb3JtQ29udHJvbFxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgZ2V0IHNsb3RzKCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9fb25DbGljayA9IHRoaXMuX19vbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fX3JlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge3Vua25vd259IG9sZFZhbHVlXG4gICAqL1xuICByZXF1ZXN0VXBkYXRlKG5hbWUsIG9sZFZhbHVlKSB7XG4gICAgc3VwZXIucmVxdWVzdFVwZGF0ZShuYW1lLCBvbGRWYWx1ZSk7XG5cbiAgICBpZiAobmFtZSA9PT0gJ2FjdGl2ZScgJiYgdGhpcy5hY3RpdmUgIT09IG9sZFZhbHVlKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdhY3RpdmUtY2hhbmdlZCcsIHsgYnViYmxlczogdHJ1ZSB9KSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7aW1wb3J0KCdAbGlvbi9jb3JlJykuUHJvcGVydHlWYWx1ZXMgfSBjaGFuZ2VkUHJvcGVydGllc1xuICAgKi9cbiAgdXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcykge1xuICAgIHN1cGVyLnVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ2NoZWNrZWQnKSkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCBgJHt0aGlzLmNoZWNrZWR9YCk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnZGlzYWJsZWQnKSkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCBgJHt0aGlzLmRpc2FibGVkfWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB7VGVtcGxhdGVSZXN1bHR9XG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8ZGl2IGNsYXNzPVwiY2hvaWNlLWZpZWxkX19sYWJlbFwiPlxuICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgncm9sZScsICdvcHRpb24nKTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBfX3JlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX19vbkNsaWNrKTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBfX3VuUmVnaXN0ZXJFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fX29uQ2xpY2spO1xuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIF9fb25DbGljaygpIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwYXJlbnRGb3JtID0gLyoqIEB0eXBlIHt1bmtub3dufSAqLyAodGhpcy5fcGFyZW50Rm9ybUdyb3VwKTtcbiAgICB0aGlzLl9pc0hhbmRsaW5nVXNlcklucHV0ID0gdHJ1ZTtcbiAgICBpZiAocGFyZW50Rm9ybSAmJiAvKiogQHR5cGUge0Nob2ljZUdyb3VwSG9zdH0gKi8gKHBhcmVudEZvcm0pLm11bHRpcGxlQ2hvaWNlKSB7XG4gICAgICB0aGlzLmNoZWNrZWQgPSAhdGhpcy5jaGVja2VkO1xuICAgICAgdGhpcy5hY3RpdmUgPSAhdGhpcy5hY3RpdmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hlY2tlZCA9IHRydWU7XG4gICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX2lzSGFuZGxpbmdVc2VySW5wdXQgPSBmYWxzZTtcbiAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbWF4LWNsYXNzZXMtcGVyLWZpbGUgKi9cbmltcG9ydCB7IExpb25GaWVsZCB9IGZyb20gJ0BsaW9uL2Zvcm0tY29yZSc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnQGxpb24vbG9jYWxpemUvdHlwZXMvTG9jYWxpemVNaXhpblR5cGVzJykuRm9ybWF0TnVtYmVyT3B0aW9uc30gRm9ybWF0T3B0aW9uc1xuICovXG5jbGFzcyBMaW9uRmllbGRXaXRoU2VsZWN0IGV4dGVuZHMgTGlvbkZpZWxkIHtcbiAgLyoqIEB0eXBlIHthbnl9ICovXG4gIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICByZXR1cm4geyBhdXRvY29tcGxldGU6IHsgdHlwZTogU3RyaW5nIH0gfTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiBEZWxlZ2F0ZXMgYXV0b2NvbXBsZXRlIHRvIHNlbGVjdFxuICAgICAqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMuYXV0b2NvbXBsZXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtIVE1MU2VsZWN0RWxlbWVudH1cbiAgICovXG4gIGdldCBfaW5wdXROb2RlKCkge1xuICAgIHJldHVybiAvKiogQHR5cGUge0hUTUxTZWxlY3RFbGVtZW50fSAqLyAoXG4gICAgICBBcnJheS5mcm9tKHRoaXMuY2hpbGRyZW4pLmZpbmQoZWwgPT4gZWwuc2xvdCA9PT0gJ2lucHV0JylcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTGlvblNlbGVjdDogd3JhcHMgdGhlIG5hdGl2ZSBIVE1MIGVsZW1lbnQgc2VsZWN0XG4gKlxuICogPGxpb24tc2VsZWN0PlxuICogICA8bGFiZWwgc2xvdD1cImxhYmVsXCI+TXkgSW5wdXQ8L2xhYmVsPlxuICogICA8c2VsZWN0IHNsb3Q9XCJpbnB1dFwiPlxuICogICAgPG9wdGlvbiB2YWx1ZT1cInRvcFwiPnRvcDwvb3B0aW9uPlxuICogICAgPG9wdGlvbiB2YWx1ZT1cImJvdHRvbVwiPmJvdHRvbTwvb3B0aW9uPlxuICogICA8L3NlbGVjdD5cbiAqIDwvbGlvbi1zZWxlY3Q+XG4gKlxuICogWW91IGNhbiBwcmVzZWxlY3QgYW4gb3B0aW9uIGJ5IHNldHRpbmcgdGhlIHByb3BlcnR5IG1vZGVsVmFsdWUuXG4gKiAgIEV4YW1wbGU6XG4gKiAgICAgPGxpb24tc2VsZWN0IC5tb2RlbFZhbHVlPVwiJHsnPHZhbHVlIG9mIG9wdGlvbiAyPid9XCI+XG4gKlxuICogSXQgZXh0ZW5kcyBMaW9uRmllbGQgc28gaXQgaW5oZXJpdHMgcmVxdWlyZWQgYW5kIGRpc2FibGVkLlxuICpcbiAqIFRoZSBvcHRpb24gZWxlbWVudCBuZWVkcyB0byBiZSBhIGRpcmVjdCBjaGlsZCBvZiB0aGUgc2VsZWN0IGVsZW1lbnQuXG4gKlxuICogWW91IGNhbm5vdCB1c2UgaW50ZXJhY3RpdmUgZWxlbWVudHMgaW5zaWRlIHRoZSBvcHRpb25zLiBBdm9pZCB2ZXJ5IGxvbmcgbmFtZXMgdG9cbiAqIGZhY2lsaXRhdGUgdGhlIHVuZGVyc3RhbmRhYmlsaXR5IGFuZCBwZXJjZWl2YWJpbGl0eSBmb3Igc2NyZWVuIHJlYWRlciB1c2Vycy4gU2V0cyBvZiBvcHRpb25zXG4gKiB3aGVyZSBlYWNoIG9wdGlvbiBuYW1lIHN0YXJ0cyB3aXRoIHRoZSBzYW1lIHdvcmQgb3IgcGhyYXNlIGNhbiBhbHNvIHNpZ25pZmljYW50bHkgZGVncmFkZVxuICogdXNhYmlsaXR5IGZvciBrZXlib2FyZCBhbmQgc2NyZWVuIHJlYWRlciB1c2Vycy5cbiAqXG4gKiBAY3VzdG9tRWxlbWVudCBsaW9uLXNlbGVjdFxuICovXG5leHBvcnQgY2xhc3MgTGlvblNlbGVjdCBleHRlbmRzIExpb25GaWVsZFdpdGhTZWxlY3Qge1xuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMuX2lucHV0Tm9kZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLl9wcm94eUNoYW5nZUV2ZW50KTtcbiAgfVxuXG4gIC8qKiBAcGFyYW0ge2ltcG9ydCgnQGxpb24vY29yZScpLlByb3BlcnR5VmFsdWVzIH0gY2hhbmdlZFByb3BlcnRpZXMgKi9cbiAgdXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcykge1xuICAgIHN1cGVyLnVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ2Rpc2FibGVkJykpIHtcbiAgICAgIHRoaXMuX2lucHV0Tm9kZS5kaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQ7XG4gICAgICB0aGlzLnZhbGlkYXRlKCk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnbmFtZScpKSB7XG4gICAgICB0aGlzLl9pbnB1dE5vZGUubmFtZSA9IHRoaXMubmFtZTtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKCdhdXRvY29tcGxldGUnKSkge1xuICAgICAgdGhpcy5faW5wdXROb2RlLmF1dG9jb21wbGV0ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAodGhpcy5hdXRvY29tcGxldGUpO1xuICAgIH1cbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5faW5wdXROb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuX3Byb3h5Q2hhbmdlRXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZSBGb3JtYXRNaXhpbiAtIHNldCBmb3JtYXR0ZWRWYWx1ZSB0byBzZWxlY3RlZCBvcHRpb24gdGV4dFxuICAgKiBAcGFyYW0geyp9IHYgLSBtb2RlbFZhbHVlOiBjYW4gYmUgYW4gT2JqZWN0LCBOdW1iZXIsIFN0cmluZyBkZXBlbmRpbmcgb24gdGhlXG4gICAqIGlucHV0IHR5cGUoZGF0ZSwgbnVtYmVyLCBlbWFpbCBldGMpXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IGZvcm1hdHRlZFZhbHVlXG4gICAqL1xuICBmb3JtYXR0ZXIodikge1xuICAgIC8vIFRoZSBzZWxlY3RlZEluZGV4IGlzIG5vdCB5ZXQgdXBkYXRlZFxuICAgIGNvbnN0IGZvdW5kID0gQXJyYXkuZnJvbSh0aGlzLl9pbnB1dE5vZGUub3B0aW9ucykuZmluZChvcHRpb24gPT4gb3B0aW9uLnZhbHVlID09PSB2KTtcbiAgICByZXR1cm4gZm91bmQgPyBmb3VuZC50ZXh0IDogJyc7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlIEZvcm1hdE1peGluIC0gc2V0IHZhbHVlIGVxdWFsIHRvIG1vZGVsVmFsdWUgaW5zdGVhZCBvZiBmb3JtYXR0ZWRWYWx1ZVxuICAgKi9cbiAgX3JlZmxlY3RCYWNrRm9ybWF0dGVkVmFsdWVUb1VzZXIoKSB7XG4gICAgaWYgKHRoaXMuX3JlZmxlY3RCYWNrT24oKSkge1xuICAgICAgLy8gVGV4dCAndW5kZWZpbmVkJyBzaG91bGQgbm90IGVuZCB1cCBpbiA8aW5wdXQ+XG4gICAgICB0aGlzLnZhbHVlID0gdHlwZW9mIHRoaXMubW9kZWxWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcgPyB0aGlzLm1vZGVsVmFsdWUgOiAnJztcbiAgICB9XG4gIH1cblxuICAvKiogQHByb3RlY3RlZCAqL1xuICBfcHJveHlDaGFuZ2VFdmVudCgpIHtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoJ3VzZXItaW5wdXQtY2hhbmdlZCcsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICB9KSxcbiAgICApO1xuICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBtYXgtY2xhc3Nlcy1wZXItZmlsZSAqL1xuaW1wb3J0IHsgVmFsaWRhdG9yIH0gZnJvbSAnLi4vVmFsaWRhdG9yLmpzJztcblxuLyoqXG4gKiBjaGVjayBmb3Igbm90IGJlaW5nIE5hTiAoTmFOIGlzIHRoZSBvbmx5IHZhbHVlIGluIGphdmFzY3JpcHQgd2hpY2ggaXMgbm90IGVxdWFsIHRvIGl0c2VsZilcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgdG8gY2hlY2tcbiAqL1xuY29uc3QgaXNOdW1iZXIgPSB2YWx1ZSA9PlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHZhbHVlID09PSB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xuXG5leHBvcnQgY2xhc3MgSXNOdW1iZXIgZXh0ZW5kcyBWYWxpZGF0b3Ige1xuICBzdGF0aWMgZ2V0IHZhbGlkYXRvck5hbWUoKSB7XG4gICAgcmV0dXJuICdJc051bWJlcic7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgZXhlY3V0ZSh2YWx1ZSkge1xuICAgIGxldCBpc0VuYWJsZWQgPSBmYWxzZTtcbiAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgaXNFbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRW5hYmxlZDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWluTnVtYmVyIGV4dGVuZHMgVmFsaWRhdG9yIHtcbiAgc3RhdGljIGdldCB2YWxpZGF0b3JOYW1lKCkge1xuICAgIHJldHVybiAnTWluTnVtYmVyJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAqL1xuICBleGVjdXRlKHZhbHVlLCBtaW4gPSB0aGlzLnBhcmFtKSB7XG4gICAgbGV0IGlzRW5hYmxlZCA9IGZhbHNlO1xuICAgIGlmICghaXNOdW1iZXIodmFsdWUpIHx8IHZhbHVlIDwgbWluKSB7XG4gICAgICBpc0VuYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaXNFbmFibGVkO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNYXhOdW1iZXIgZXh0ZW5kcyBWYWxpZGF0b3Ige1xuICBzdGF0aWMgZ2V0IHZhbGlkYXRvck5hbWUoKSB7XG4gICAgcmV0dXJuICdNYXhOdW1iZXInO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICovXG4gIGV4ZWN1dGUodmFsdWUsIG1heCA9IHRoaXMucGFyYW0pIHtcbiAgICBsZXQgaXNFbmFibGVkID0gZmFsc2U7XG4gICAgaWYgKCFpc051bWJlcih2YWx1ZSkgfHwgdmFsdWUgPiBtYXgpIHtcbiAgICAgIGlzRW5hYmxlZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBpc0VuYWJsZWQ7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1pbk1heE51bWJlciBleHRlbmRzIFZhbGlkYXRvciB7XG4gIHN0YXRpYyBnZXQgdmFsaWRhdG9yTmFtZSgpIHtcbiAgICByZXR1cm4gJ01pbk1heE51bWJlcic7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgKi9cbiAgZXhlY3V0ZSh2YWx1ZSwgeyBtaW4gPSAwLCBtYXggPSAwIH0gPSB0aGlzLnBhcmFtKSB7XG4gICAgbGV0IGlzRW5hYmxlZCA9IGZhbHNlO1xuICAgIGlmICghaXNOdW1iZXIodmFsdWUpIHx8IHZhbHVlIDwgbWluIHx8IHZhbHVlID4gbWF4KSB7XG4gICAgICBpc0VuYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaXNFbmFibGVkO1xuICB9XG59XG4iLCJpbXBvcnQgeyBodG1sLCBjc3MsIHJlbmRlciB9IGZyb20gJ0BsaW9uL2NvcmUnO1xuaW1wb3J0IHsgTGlvbklucHV0IH0gZnJvbSAnQGxpb24vaW5wdXQnO1xuaW1wb3J0IHsgSXNOdW1iZXIsIE1pbk51bWJlciwgTWF4TnVtYmVyIH0gZnJvbSAnQGxpb24vZm9ybS1jb3JlJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAbGlvbi9jb3JlJykuUmVuZGVyT3B0aW9uc30gUmVuZGVyT3B0aW9uc1xuICovXG5cbi8qKlxuICogYExpb25JbnB1dFN0ZXBwZXJgIGlzIGEgY2xhc3MgZm9yIGN1c3RvbSBpbnB1dC1zdGVwcGVyIGVsZW1lbnQgKGA8bGlvbi1pbnB1dC1zdGVwcGVyPmAgd2ViIGNvbXBvbmVudCkuXG4gKlxuICogQGN1c3RvbUVsZW1lbnQgbGlvbi1pbnB1dC1zdGVwcGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBMaW9uSW5wdXRTdGVwcGVyIGV4dGVuZHMgTGlvbklucHV0IHtcbiAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLnN1cGVyLnN0eWxlcyxcbiAgICAgIGNzc2BcbiAgICAgICAgLmlucHV0LWdyb3VwX19jb250YWluZXIgPiAuaW5wdXQtZ3JvdXBfX2lucHV0IDo6c2xvdHRlZCguZm9ybS1jb250cm9sKSB7XG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICB9XG4gICAgICBgLFxuICAgIF07XG4gIH1cblxuICAvKiogQHR5cGUge2FueX0gKi9cbiAgc3RhdGljIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtaW46IHtcbiAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICByZWZsZWN0OiB0cnVlLFxuICAgICAgfSxcbiAgICAgIG1heDoge1xuICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgIHJlZmxlY3Q6IHRydWUsXG4gICAgICB9LFxuICAgICAgc3RlcDoge1xuICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgIHJlZmxlY3Q6IHRydWUsXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldCBjdXJyZW50VmFsdWUoKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy52YWx1ZSkgfHwgMDtcbiAgfVxuXG4gIGdldCBfaW5wdXROb2RlKCkge1xuICAgIHJldHVybiAvKiogQHR5cGUge0hUTUxJbnB1dEVsZW1lbnR9ICovIChzdXBlci5faW5wdXROb2RlKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbFZhbHVlICovXG4gICAgdGhpcy5wYXJzZXIgPSBtb2RlbFZhbHVlID0+IHBhcnNlRmxvYXQobW9kZWxWYWx1ZSk7XG4gICAgdGhpcy5taW4gPSBJbmZpbml0eTtcbiAgICB0aGlzLm1heCA9IEluZmluaXR5O1xuICAgIHRoaXMuc3RlcCA9IDE7XG4gICAgdGhpcy52YWx1ZXMgPSB7XG4gICAgICBtYXg6IHRoaXMubWF4LFxuICAgICAgbWluOiB0aGlzLm1pbixcbiAgICAgIHN0ZXA6IHRoaXMuc3RlcCxcbiAgICB9O1xuXG4gICAgdGhpcy5fX2luY3JlbWVudCA9IHRoaXMuX19pbmNyZW1lbnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9fZGVjcmVtZW50ID0gdGhpcy5fX2RlY3JlbWVudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX19ib3VuZE9uTGVhdmVCdXR0b24gPSB0aGlzLl9vbkxlYXZlQnV0dG9uLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIHRoaXMudmFsdWVzID0ge1xuICAgICAgbWF4OiB0aGlzLm1heCxcbiAgICAgIG1pbjogdGhpcy5taW4sXG4gICAgICBzdGVwOiB0aGlzLnN0ZXAsXG4gICAgfTtcblxuICAgIHRoaXMucm9sZSA9ICdzcGluYnV0dG9uJztcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9fa2V5RG93bkhhbmRsZXIpO1xuICAgIHRoaXMuX2lucHV0Tm9kZS5zZXRBdHRyaWJ1dGUoJ2lucHV0bW9kZScsICdkZWNpbWFsJyk7XG4gICAgdGhpcy5faW5wdXROb2RlLnNldEF0dHJpYnV0ZSgnYXV0b2NvbXBsZXRlJywgJ29mZicpO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdGhpcy5sYWJlbCk7XG4gICAgdGhpcy5zdGVwID0gdGhpcy5oYXNBdHRyaWJ1dGUoJ3N0ZXAnKSA/IHRoaXMuc3RlcCA6IDE7XG4gICAgdGhpcy5fX3NldEFyaWFMYWJlbHNBbmRWYWxpZGF0b3IoKTtcbiAgICB0aGlzLl9fdG9nZ2xlU3Bpbm5lckJ1dHRvbnNTdGF0ZSgpO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9fa2V5RG93bkhhbmRsZXIpO1xuICB9XG5cbiAgLyoqIEBwYXJhbSB7aW1wb3J0KCdAbGlvbi9jb3JlJykuUHJvcGVydHlWYWx1ZXMgfSBjaGFuZ2VkUHJvcGVydGllcyAqL1xuICB1cGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKSB7XG4gICAgc3VwZXIudXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7XG5cbiAgICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKCdtb2RlbFZhbHVlJykpIHtcbiAgICAgIHRoaXMuX190b2dnbGVTcGlubmVyQnV0dG9uc1N0YXRlKCk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnbWluJykpIHtcbiAgICAgIHRoaXMuX2lucHV0Tm9kZS5taW4gPSBgJHt0aGlzLm1pbn1gO1xuICAgICAgdGhpcy52YWx1ZXMubWluID0gdGhpcy5taW47XG4gICAgICB0aGlzLl9fdG9nZ2xlU3Bpbm5lckJ1dHRvbnNTdGF0ZSgpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ21heCcpKSB7XG4gICAgICB0aGlzLl9pbnB1dE5vZGUubWF4ID0gYCR7dGhpcy5tYXh9YDtcbiAgICAgIHRoaXMudmFsdWVzLm1heCA9IHRoaXMubWF4O1xuICAgICAgdGhpcy5fX3RvZ2dsZVNwaW5uZXJCdXR0b25zU3RhdGUoKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKCdzdGVwJykpIHtcbiAgICAgIHRoaXMuX2lucHV0Tm9kZS5zdGVwID0gYCR7dGhpcy5zdGVwfWA7XG4gICAgICB0aGlzLnZhbHVlcy5zdGVwID0gdGhpcy5zdGVwO1xuICAgIH1cbiAgfVxuXG4gIGdldCBzbG90cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uc3VwZXIuc2xvdHMsXG4gICAgICBwcmVmaXg6ICgpID0+IHRoaXMuX19nZXREZWNyZW1lbnRCdXR0b25Ob2RlKCksXG4gICAgICBzdWZmaXg6ICgpID0+IHRoaXMuX19nZXRJbmNyZW1lbnRCdXR0b25Ob2RlKCksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYXJpYSBsYWJlbHMgYW5kIGFwcGx5IHZhbGlkYXRvcnNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9fc2V0QXJpYUxhYmVsc0FuZFZhbGlkYXRvcigpIHtcbiAgICBjb25zdCBhcmlhQXR0cmlidXRlcyA9IHtcbiAgICAgICdhcmlhLXZhbHVlbWF4JzogdGhpcy52YWx1ZXMubWF4LFxuICAgICAgJ2FyaWEtdmFsdWVtaW4nOiB0aGlzLnZhbHVlcy5taW4sXG4gICAgfTtcblxuICAgIGNvbnN0IG1pbk1heFZhbGlkYXRvcnMgPSAvKiogQHR5cGUgeyhNYXhOdW1iZXIgfCBNaW5OdW1iZXIpW119ICovIChcbiAgICAgIE9iamVjdC5lbnRyaWVzKGFyaWFBdHRyaWJ1dGVzKVxuICAgICAgICAubWFwKChba2V5LCB2YWxdKSA9PiB7XG4gICAgICAgICAgaWYgKHZhbCAhPT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGtleSwgYCR7dmFsfWApO1xuICAgICAgICAgICAgcmV0dXJuIGtleSA9PT0gJ2FyaWEtdmFsdWVtYXgnID8gbmV3IE1heE51bWJlcih2YWwpIDogbmV3IE1pbk51bWJlcih2YWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbHRlcih2YWxpZGF0b3IgPT4gdmFsaWRhdG9yICE9PSBudWxsKVxuICAgICk7XG4gICAgY29uc3QgdmFsaWRhdG9ycyA9IFtuZXcgSXNOdW1iZXIoKSwgLi4ubWluTWF4VmFsaWRhdG9yc107XG4gICAgdGhpcy5kZWZhdWx0VmFsaWRhdG9ycy5wdXNoKC4uLnZhbGlkYXRvcnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB2YWx1ZXMgb24ga2V5Ym9hcmQgYXJyb3cgdXAgYW5kIGRvd24gZXZlbnRcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBlIC0ga2V5Ym9hcmQgZXZlbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9fa2V5RG93bkhhbmRsZXIoZSkge1xuICAgIGlmIChlLmtleSA9PT0gJ0Fycm93VXAnKSB7XG4gICAgICB0aGlzLl9faW5jcmVtZW50KCk7XG4gICAgfVxuXG4gICAgaWYgKGUua2V5ID09PSAnQXJyb3dEb3duJykge1xuICAgICAgdGhpcy5fX2RlY3JlbWVudCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgZGlzYWJsZWQgc3RhdGUgZm9yIHRoZSBidXR0b25zXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfX3RvZ2dsZVNwaW5uZXJCdXR0b25zU3RhdGUoKSB7XG4gICAgY29uc3QgeyBtaW4sIG1heCB9ID0gdGhpcy52YWx1ZXM7XG4gICAgY29uc3QgZGVjcmVtZW50QnV0dG9uID0gdGhpcy5fX2dldFNsb3QoJ3ByZWZpeCcpO1xuICAgIGNvbnN0IGluY3JlbWVudEJ1dHRvbiA9IHRoaXMuX19nZXRTbG90KCdzdWZmaXgnKTtcbiAgICBjb25zdCBkaXNhYmxlSW5jcmVtZW50b3IgPSB0aGlzLmN1cnJlbnRWYWx1ZSA+PSBtYXggJiYgbWF4ICE9PSBJbmZpbml0eTtcbiAgICBjb25zdCBkaXNhYmxlRGVjcmVtZW50b3IgPSB0aGlzLmN1cnJlbnRWYWx1ZSA8PSBtaW4gJiYgbWluICE9PSBJbmZpbml0eTtcbiAgICBkZWNyZW1lbnRCdXR0b25bZGlzYWJsZURlY3JlbWVudG9yID8gJ3NldEF0dHJpYnV0ZScgOiAncmVtb3ZlQXR0cmlidXRlJ10oJ2Rpc2FibGVkJywgJ3RydWUnKTtcbiAgICBpbmNyZW1lbnRCdXR0b25bZGlzYWJsZUluY3JlbWVudG9yID8gJ3NldEF0dHJpYnV0ZScgOiAncmVtb3ZlQXR0cmlidXRlJ10oJ2Rpc2FibGVkJywgJ3RydWUnKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS12YWx1ZW5vdycsIGAke3RoaXMuY3VycmVudFZhbHVlfWApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzbG90dGVkIGVsZW1lbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNsb3ROYW1lIC0gc2xvdCBuYW1lXG4gICAqIEByZXR1cm5zIHtIVE1MQnV0dG9uRWxlbWVudHxPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfX2dldFNsb3Qoc2xvdE5hbWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLyoqIEB0eXBlIHtIVE1MRWxlbWVudFtdfSAqLyAoQXJyYXkuZnJvbSh0aGlzLmNoaWxkcmVuKSkuZmluZChcbiAgICAgICAgY2hpbGQgPT4gY2hpbGQuc2xvdCA9PT0gc2xvdE5hbWUsXG4gICAgICApIHx8IHt9XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmNyZW1lbnQgdGhlIHZhbHVlIGJhc2VkIG9uIGdpdmVuIHN0ZXAgb3IgZGVmYXVsdCBzdGVwIHZhbHVlIGlzIDFcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9faW5jcmVtZW50KCkge1xuICAgIGNvbnN0IHsgc3RlcCwgbWF4IH0gPSB0aGlzLnZhbHVlcztcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMuY3VycmVudFZhbHVlICsgc3RlcDtcbiAgICBpZiAobmV3VmFsdWUgPD0gbWF4IHx8IG1heCA9PT0gSW5maW5pdHkpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBgJHtuZXdWYWx1ZX1gO1xuICAgICAgdGhpcy5fX3RvZ2dsZVNwaW5uZXJCdXR0b25zU3RhdGUoKTtcbiAgICAgIHRoaXMuX3Byb3h5SW5wdXRFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNyZW1lbnQgdGhlIHZhbHVlIGJhc2VkIG9uIGdpdmVuIHN0ZXAgb3IgZGVmYXVsdCBzdGVwIHZhbHVlIGlzIDFcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9fZGVjcmVtZW50KCkge1xuICAgIGNvbnN0IHsgc3RlcCwgbWluIH0gPSB0aGlzLnZhbHVlcztcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMuY3VycmVudFZhbHVlIC0gc3RlcDtcbiAgICBpZiAobmV3VmFsdWUgPj0gbWluIHx8IG1pbiA9PT0gSW5maW5pdHkpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBgJHtuZXdWYWx1ZX1gO1xuICAgICAgdGhpcy5fX3RvZ2dsZVNwaW5uZXJCdXR0b25zU3RhdGUoKTtcbiAgICAgIHRoaXMuX3Byb3h5SW5wdXRFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGluY3JlbWVudCBidXR0b24gbm9kZVxuICAgKiBAcmV0dXJucyB7RWxlbWVudHxudWxsfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX19nZXRJbmNyZW1lbnRCdXR0b25Ob2RlKCkge1xuICAgIGNvbnN0IHJlbmRlclBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHJlbmRlcihcbiAgICAgIHRoaXMuX2luY3JlbWVudG9yVGVtcGxhdGUoKSxcbiAgICAgIHJlbmRlclBhcmVudCxcbiAgICAgIC8qKiBAdHlwZSB7UmVuZGVyT3B0aW9uc30gKi8gKHtcbiAgICAgICAgc2NvcGVOYW1lOiB0aGlzLmxvY2FsTmFtZSxcbiAgICAgICAgZXZlbnRDb250ZXh0OiB0aGlzLFxuICAgICAgfSksXG4gICAgKTtcbiAgICByZXR1cm4gcmVuZGVyUGFyZW50LmZpcnN0RWxlbWVudENoaWxkO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGVjcmVtZW50IGJ1dHRvbiBub2RlXG4gICAqIEByZXR1cm5zIHtFbGVtZW50fG51bGx9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfX2dldERlY3JlbWVudEJ1dHRvbk5vZGUoKSB7XG4gICAgY29uc3QgcmVuZGVyUGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcmVuZGVyKFxuICAgICAgdGhpcy5fZGVjcmVtZW50b3JUZW1wbGF0ZSgpLFxuICAgICAgcmVuZGVyUGFyZW50LFxuICAgICAgLyoqIEB0eXBlIHtSZW5kZXJPcHRpb25zfSAqLyAoe1xuICAgICAgICBzY29wZU5hbWU6IHRoaXMubG9jYWxOYW1lLFxuICAgICAgICBldmVudENvbnRleHQ6IHRoaXMsXG4gICAgICB9KSxcbiAgICApO1xuICAgIHJldHVybiByZW5kZXJQYXJlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlICsvLSBidXR0b25zIG9uIGNoYW5nZVxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX29uQ2hhbmdlKCkge1xuICAgIHN1cGVyLl9vbkNoYW5nZSgpO1xuICAgIHRoaXMuX190b2dnbGVTcGlubmVyQnV0dG9uc1N0YXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBkZWNyZW1lbnRvciBidXR0b24gc2lnbiB0ZW1wbGF0ZVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfGltcG9ydCgnQGxpb24vY29yZScpLlRlbXBsYXRlUmVzdWx0fVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICBfZGVjcmVtZW50b3JTaWduVGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuICfvvI0nO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaW5jcmVtZW50b3IgYnV0dG9uIHNpZ24gdGVtcGxhdGVcbiAgICogQHJldHVybnMge1N0cmluZ3xpbXBvcnQoJ0BsaW9uL2NvcmUnKS5UZW1wbGF0ZVJlc3VsdH1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgX2luY3JlbWVudG9yU2lnblRlbXBsYXRlKCkge1xuICAgIHJldHVybiAn77yLJztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGluY3JlbWVudCBidXR0b24gdGVtcGxhdGVcbiAgICogQHJldHVybnMge2ltcG9ydCgnQGxpb24vY29yZScpLlRlbXBsYXRlUmVzdWx0fVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfZGVjcmVtZW50b3JUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxidXR0b25cbiAgICAgICAgP2Rpc2FibGVkPSR7dGhpcy5kaXNhYmxlZCB8fCB0aGlzLnJlYWRPbmx5fVxuICAgICAgICBAY2xpY2s9JHt0aGlzLl9fZGVjcmVtZW50fVxuICAgICAgICBAYmx1cj0ke3RoaXMuX19ib3VuZE9uTGVhdmVCdXR0b259XG4gICAgICAgIHRhYmluZGV4PVwiLTFcIlxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgYXJpYS1sYWJlbD1cImRlY3JlbWVudFwiXG4gICAgICA+XG4gICAgICAgICR7dGhpcy5fZGVjcmVtZW50b3JTaWduVGVtcGxhdGUoKX1cbiAgICAgIDwvYnV0dG9uPlxuICAgIGA7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBkZWNyZW1lbnQgYnV0dG9uIHRlbXBsYXRlXG4gICAqIEByZXR1cm5zIHtpbXBvcnQoJ0BsaW9uL2NvcmUnKS5UZW1wbGF0ZVJlc3VsdH1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX2luY3JlbWVudG9yVGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8YnV0dG9uXG4gICAgICAgID9kaXNhYmxlZD0ke3RoaXMuZGlzYWJsZWQgfHwgdGhpcy5yZWFkT25seX1cbiAgICAgICAgQGNsaWNrPSR7dGhpcy5fX2luY3JlbWVudH1cbiAgICAgICAgQGJsdXI9JHt0aGlzLl9fYm91bmRPbkxlYXZlQnV0dG9ufVxuICAgICAgICB0YWJpbmRleD1cIi0xXCJcbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIGFyaWEtbGFiZWw9XCJpbmNyZW1lbnRcIlxuICAgICAgPlxuICAgICAgICAke3RoaXMuX2luY3JlbWVudG9yU2lnblRlbXBsYXRlKCl9XG4gICAgICA8L2J1dHRvbj5cbiAgICBgO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZGlzcGF0Y2ggbGVhdmUgZXZlbnQgb24gaG9zdCB3aGVuIGNhdGNoaW5nIGxlYXZlIGV2ZW50XG4gICAqIG9uIHRoZSBpbmNyZW1lbnRvciBhbmQgZGVjcmVtZW50b3IgYnV0dG9uLlxuICAgKlxuICAgKiBUaGlzIHJlZGlzcGF0Y2hlZCBsZWF2ZSBldmVudCB3aWxsIGJlIGNhdWdodCBieVxuICAgKiBJbnRlcmFjdGlvblN0YXRlTWl4aW4gdG8gc2V0IFwidG91Y2hlZFwiIHN0YXRlIHRvIHRydWUuXG4gICAqXG4gICAqIEludGVyYWN0aW5nIHdpdGggdGhlIGJ1dHRvbnMgaXMgXCJ1c2VyIGludGVyYWN0aW9uc1wiXG4gICAqIHRoZSBzYW1lIHdheSBhcyBmb2N1c2luZyArIGJsdXJyaW5nIHRoZSBmaWVsZCAobmF0aXZlIGlucHV0KVxuICAgKi9cbiAgX29uTGVhdmVCdXR0b24oKSB7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCh0aGlzLl9sZWF2ZUV2ZW50KSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD17QVRUUklCVVRFOjEsQ0hJTEQ6MixQUk9QRVJUWTozLEJPT0xFQU5fQVRUUklCVVRFOjQsRVZFTlQ6NSxFTEVNRU5UOjZ9LGU9dD0+KC4uLmUpPT4oe18kbGl0RGlyZWN0aXZlJDp0LHZhbHVlczplfSk7Y2xhc3MgaXtjb25zdHJ1Y3Rvcih0KXt9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBVCh0LGUsaSl7dGhpcy5fJEN0PXQsdGhpcy5fJEFNPWUsdGhpcy5fJENpPWl9XyRBUyh0LGUpe3JldHVybiB0aGlzLnVwZGF0ZSh0LGUpfXVwZGF0ZSh0LGUpe3JldHVybiB0aGlzLnJlbmRlciguLi5lKX19ZXhwb3J0e2kgYXMgRGlyZWN0aXZlLHQgYXMgUGFydFR5cGUsZSBhcyBkaXJlY3RpdmV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlLmpzLm1hcFxuIiwiaW1wb3J0e2lzU2luZ2xlRXhwcmVzc2lvbiBhcyBpfWZyb21cIi4vZGlyZWN0aXZlLWhlbHBlcnMuanNcIjtpbXBvcnR7RGlyZWN0aXZlIGFzIHQsUGFydFR5cGUgYXMgZX1mcm9tXCIuL2RpcmVjdGl2ZS5qc1wiO2V4cG9ydHtEaXJlY3RpdmUsUGFydFR5cGUsZGlyZWN0aXZlfWZyb21cIi4vZGlyZWN0aXZlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBzPShpLHQpPT57dmFyIGUsbztjb25zdCByPWkuXyRBTjtpZih2b2lkIDA9PT1yKXJldHVybiExO2Zvcihjb25zdCBpIG9mIHIpbnVsbD09PShvPShlPWkpLl8kQU8pfHx2b2lkIDA9PT1vfHxvLmNhbGwoZSx0LCExKSxzKGksdCk7cmV0dXJuITB9LG89aT0+e2xldCB0LGU7ZG97aWYodm9pZCAwPT09KHQ9aS5fJEFNKSlicmVhaztlPXQuXyRBTixlLmRlbGV0ZShpKSxpPXR9d2hpbGUoMD09PShudWxsPT1lP3ZvaWQgMDplLnNpemUpKX0scj1pPT57Zm9yKGxldCB0O3Q9aS5fJEFNO2k9dCl7bGV0IGU9dC5fJEFOO2lmKHZvaWQgMD09PWUpdC5fJEFOPWU9bmV3IFNldDtlbHNlIGlmKGUuaGFzKGkpKWJyZWFrO2UuYWRkKGkpLGwodCl9fTtmdW5jdGlvbiBuKGkpe3ZvaWQgMCE9PXRoaXMuXyRBTj8obyh0aGlzKSx0aGlzLl8kQU09aSxyKHRoaXMpKTp0aGlzLl8kQU09aX1mdW5jdGlvbiBoKGksdD0hMSxlPTApe2NvbnN0IHI9dGhpcy5fJEFILG49dGhpcy5fJEFOO2lmKHZvaWQgMCE9PW4mJjAhPT1uLnNpemUpaWYodClpZihBcnJheS5pc0FycmF5KHIpKWZvcihsZXQgaT1lO2k8ci5sZW5ndGg7aSsrKXMocltpXSwhMSksbyhyW2ldKTtlbHNlIG51bGwhPXImJihzKHIsITEpLG8ocikpO2Vsc2Ugcyh0aGlzLGkpfWNvbnN0IGw9aT0+e3ZhciB0LHMsbyxyO2kudHlwZT09ZS5DSElMRCYmKG51bGwhPT0odD0obz1pKS5fJEFQKSYmdm9pZCAwIT09dHx8KG8uXyRBUD1oKSxudWxsIT09KHM9KHI9aSkuXyRBUSkmJnZvaWQgMCE9PXN8fChyLl8kQVE9bikpfTtjbGFzcyBjIGV4dGVuZHMgdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5fJEFOPXZvaWQgMH1fJEFUKGksdCxlKXtzdXBlci5fJEFUKGksdCxlKSxyKHRoaXMpLHRoaXMuaXNDb25uZWN0ZWQ9aS5fJEFVfV8kQU8oaSx0PSEwKXt2YXIgZSxyO2khPT10aGlzLmlzQ29ubmVjdGVkJiYodGhpcy5pc0Nvbm5lY3RlZD1pLGk/bnVsbD09PShlPXRoaXMucmVjb25uZWN0ZWQpfHx2b2lkIDA9PT1lfHxlLmNhbGwodGhpcyk6bnVsbD09PShyPXRoaXMuZGlzY29ubmVjdGVkKXx8dm9pZCAwPT09cnx8ci5jYWxsKHRoaXMpKSx0JiYocyh0aGlzLGkpLG8odGhpcykpfXNldFZhbHVlKHQpe2lmKGkodGhpcy5fJEN0KSl0aGlzLl8kQ3QuXyRBSSh0LHRoaXMpO2Vsc2V7Y29uc3QgaT1bLi4udGhpcy5fJEN0Ll8kQUhdO2lbdGhpcy5fJENpXT10LHRoaXMuXyRDdC5fJEFJKGksdGhpcywwKX19ZGlzY29ubmVjdGVkKCl7fXJlY29ubmVjdGVkKCl7fX1leHBvcnR7YyBhcyBBc3luY0RpcmVjdGl2ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy1kaXJlY3RpdmUuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHQ9YXN5bmModCxzKT0+e2ZvciBhd2FpdChjb25zdCBpIG9mIHQpaWYoITE9PT1hd2FpdCBzKGkpKXJldHVybn07Y2xhc3Mgc3tjb25zdHJ1Y3Rvcih0KXt0aGlzLkc9dH1kaXNjb25uZWN0KCl7dGhpcy5HPXZvaWQgMH1yZWNvbm5lY3QodCl7dGhpcy5HPXR9ZGVyZWYoKXtyZXR1cm4gdGhpcy5HfX1jbGFzcyBpe2NvbnN0cnVjdG9yKCl7dGhpcy5ZPXZvaWQgMCx0aGlzLlo9dm9pZCAwfWdldCgpe3JldHVybiB0aGlzLll9cGF1c2UoKXt2YXIgdDtudWxsIT09KHQ9dGhpcy5ZKSYmdm9pZCAwIT09dHx8KHRoaXMuWT1uZXcgUHJvbWlzZSgodD0+dGhpcy5aPXQpKSl9cmVzdW1lKCl7dmFyIHQ7bnVsbD09PSh0PXRoaXMuWil8fHZvaWQgMD09PXR8fHQuY2FsbCh0aGlzKSx0aGlzLlk9dGhpcy5aPXZvaWQgMH19ZXhwb3J0e2kgYXMgUGF1c2VyLHMgYXMgUHNldWRvV2Vha1JlZix0IGFzIGZvckF3YWl0T2Z9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJpdmF0ZS1hc3luYy1oZWxwZXJzLmpzLm1hcFxuIiwiaW1wb3J0e25vQ2hhbmdlIGFzIHR9ZnJvbVwiLi4vbGl0LWh0bWwuanNcIjtpbXBvcnR7aXNQcmltaXRpdmUgYXMgc31mcm9tXCIuLi9kaXJlY3RpdmUtaGVscGVycy5qc1wiO2ltcG9ydHtBc3luY0RpcmVjdGl2ZSBhcyBpfWZyb21cIi4uL2FzeW5jLWRpcmVjdGl2ZS5qc1wiO2ltcG9ydHtQc2V1ZG9XZWFrUmVmIGFzIHIsUGF1c2VyIGFzIGV9ZnJvbVwiLi9wcml2YXRlLWFzeW5jLWhlbHBlcnMuanNcIjtpbXBvcnR7ZGlyZWN0aXZlIGFzIG99ZnJvbVwiLi4vZGlyZWN0aXZlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBuPXQ9PiFzKHQpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnRoZW4saD0xMDczNzQxODIzO2NsYXNzIGMgZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLl8kQ190PWgsdGhpcy5fJEN3dD1bXSx0aGlzLl8kQ3E9bmV3IHIodGhpcyksdGhpcy5fJENLPW5ldyBlfXJlbmRlciguLi5zKXt2YXIgaTtyZXR1cm4gbnVsbCE9PShpPXMuZmluZCgodD0+IW4odCkpKSkmJnZvaWQgMCE9PWk/aTp0fXVwZGF0ZShzLGkpe2NvbnN0IHI9dGhpcy5fJEN3dDtsZXQgZT1yLmxlbmd0aDt0aGlzLl8kQ3d0PWk7Y29uc3Qgbz10aGlzLl8kQ3EsYz10aGlzLl8kQ0s7dGhpcy5pc0Nvbm5lY3RlZHx8dGhpcy5kaXNjb25uZWN0ZWQoKTtmb3IobGV0IHQ9MDt0PGkubGVuZ3RoJiYhKHQ+dGhpcy5fJENfdCk7dCsrKXtjb25zdCBzPWlbdF07aWYoIW4ocykpcmV0dXJuIHRoaXMuXyRDX3Q9dCxzO3Q8ZSYmcz09PXJbdF18fCh0aGlzLl8kQ190PWgsZT0wLFByb21pc2UucmVzb2x2ZShzKS50aGVuKChhc3luYyB0PT57Zm9yKDtjLmdldCgpOylhd2FpdCBjLmdldCgpO2NvbnN0IGk9by5kZXJlZigpO2lmKHZvaWQgMCE9PWkpe2NvbnN0IHI9aS5fJEN3dC5pbmRleE9mKHMpO3I+LTEmJnI8aS5fJENfdCYmKGkuXyRDX3Q9cixpLnNldFZhbHVlKHQpKX19KSkpfXJldHVybiB0fWRpc2Nvbm5lY3RlZCgpe3RoaXMuXyRDcS5kaXNjb25uZWN0KCksdGhpcy5fJENLLnBhdXNlKCl9cmVjb25uZWN0ZWQoKXt0aGlzLl8kQ3EucmVjb25uZWN0KHRoaXMpLHRoaXMuXyRDSy5yZXN1bWUoKX19Y29uc3QgbT1vKGMpO2V4cG9ydHtjIGFzIFVudGlsRGlyZWN0aXZlLG0gYXMgdW50aWx9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW50aWwuanMubWFwXG4iLCJpbXBvcnQgeyBkZWR1cGVNaXhpbiwgdW50aWwsIG5vdGhpbmcgfSBmcm9tICdAbGlvbi9jb3JlJztcbmltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnLi9sb2NhbGl6ZS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnQGxpb24vY29yZScpLkRpcmVjdGl2ZVJlc3VsdH0gRGlyZWN0aXZlUmVzdWx0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy9Mb2NhbGl6ZU1peGluVHlwZXMnKS5Mb2NhbGl6ZU1peGlufSBMb2NhbGl6ZU1peGluXG4gKi9cblxuLyoqXG4gKiAjIExvY2FsaXplTWl4aW4gLSBmb3Igc2VsZiBtYW5hZ2VkIHRlbXBsYXRlc1xuICogQHR5cGUge0xvY2FsaXplTWl4aW59XG4gKiBAcGFyYW0ge2ltcG9ydCgnQG9wZW4td2MvZGVkdXBlLW1peGluJykuQ29uc3RydWN0b3I8aW1wb3J0KCdAbGlvbi9jb3JlJykuTGl0RWxlbWVudD59IHN1cGVyY2xhc3NcbiAqL1xuY29uc3QgTG9jYWxpemVNaXhpbkltcGxlbWVudGF0aW9uID0gc3VwZXJjbGFzcyA9PlxuICAvLyBAdHMtaWdub3JlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzY4MjEjaXNzdWVjb21tZW50LTU4ODM3NTA1MVxuICBjbGFzcyBMb2NhbGl6ZU1peGluIGV4dGVuZHMgc3VwZXJjbGFzcyB7XG4gICAgLyoqXG4gICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLGZ1bmN0aW9uPltdfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgbG9jYWxpemVOYW1lc3BhY2VzKCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgd2FpdEZvckxvY2FsaXplTmFtZXNwYWNlcygpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoKTtcblxuICAgICAgLyoqIEBwcml2YXRlICovXG4gICAgICB0aGlzLl9fYm91bmRMb2NhbGl6ZU9uTG9jYWxlQ2hhbmdlZCA9XG4gICAgICAgIC8qKiBAcGFyYW0gey4uLk9iamVjdH0gYXJncyAqL1xuICAgICAgICAoLi4uYXJncykgPT4ge1xuICAgICAgICAgIGNvbnN0IGV2ZW50ID0gLyoqIEB0eXBlIHtDdXN0b21FdmVudH0gKi8gKEFycmF5LmZyb20oYXJncylbMF0pO1xuICAgICAgICAgIHRoaXMuX19sb2NhbGl6ZU9uTG9jYWxlQ2hhbmdlZChldmVudCk7XG4gICAgICAgIH07XG5cbiAgICAgIHRoaXMuX19ib3VuZExvY2FsaXplT25Mb2NhbGVDaGFuZ2luZyA9XG4gICAgICAgIC8qKiBAcGFyYW0gey4uLk9iamVjdH0gYXJncyAqL1xuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fX2xvY2FsaXplT25Mb2NhbGVDaGFuZ2luZygpO1xuICAgICAgICB9O1xuXG4gICAgICAvLyBzaG91bGQgYmUgbG9hZGVkIGluIGFkdmFuY2VcbiAgICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgICAgdGhpcy5fX2xvY2FsaXplU3RhcnRMb2FkaW5nTmFtZXNwYWNlcygpO1xuXG4gICAgICBpZiAodGhpcy5sb2NhbGl6ZU5hbWVzcGFjZXNMb2FkZWQpIHtcbiAgICAgICAgdGhpcy5sb2NhbGl6ZU5hbWVzcGFjZXNMb2FkZWQudGhlbigoKSA9PiB7XG4gICAgICAgICAgLyoqIEBwcml2YXRlICovXG4gICAgICAgICAgdGhpcy5fX2xvY2FsaXplTWVzc2FnZVN5bmMgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBob29rIGludG8gTGl0RWxlbWVudCB0byBvbmx5IHJlbmRlciBvbmNlIGFsbCB0cmFuc2xhdGlvbnMgYXJlIGxvYWRlZFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjx2b2lkPn1cbiAgICAgKi9cbiAgICBhc3luYyBwZXJmb3JtVXBkYXRlKCkge1xuICAgICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvci53YWl0Rm9yTG9jYWxpemVOYW1lc3BhY2VzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9jYWxpemVOYW1lc3BhY2VzTG9hZGVkO1xuICAgICAgfVxuICAgICAgc3VwZXIucGVyZm9ybVVwZGF0ZSgpO1xuICAgIH1cblxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICAgIGlmICh0aGlzLmxvY2FsaXplTmFtZXNwYWNlc0xvYWRlZCkge1xuICAgICAgICB0aGlzLmxvY2FsaXplTmFtZXNwYWNlc0xvYWRlZC50aGVuKCgpID0+IHRoaXMub25Mb2NhbGVSZWFkeSgpKTtcbiAgICAgIH1cbiAgICAgIGxvY2FsaXplLmFkZEV2ZW50TGlzdGVuZXIoJ19fbG9jYWxlQ2hhbmdpbmcnLCB0aGlzLl9fYm91bmRMb2NhbGl6ZU9uTG9jYWxlQ2hhbmdpbmcpO1xuICAgICAgbG9jYWxpemUuYWRkRXZlbnRMaXN0ZW5lcignbG9jYWxlQ2hhbmdlZCcsIHRoaXMuX19ib3VuZExvY2FsaXplT25Mb2NhbGVDaGFuZ2VkKTtcbiAgICB9XG5cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICBsb2NhbGl6ZS5yZW1vdmVFdmVudExpc3RlbmVyKCdfX2xvY2FsZUNoYW5naW5nJywgdGhpcy5fX2JvdW5kTG9jYWxpemVPbkxvY2FsZUNoYW5naW5nKTtcbiAgICAgIGxvY2FsaXplLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvY2FsZUNoYW5nZWQnLCB0aGlzLl9fYm91bmRMb2NhbGl6ZU9uTG9jYWxlQ2hhbmdlZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBzdHJpbmdbXX0ga2V5c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsPz59IFt2YXJpYWJsZXNdXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGVdXG4gICAgICogQHJldHVybnMge3N0cmluZyB8IERpcmVjdGl2ZVJlc3VsdH1cbiAgICAgKi9cbiAgICBtc2dMaXQoa2V5cywgdmFyaWFibGVzLCBvcHRpb25zKSB7XG4gICAgICBpZiAodGhpcy5fX2xvY2FsaXplTWVzc2FnZVN5bmMpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1zZyhrZXlzLCB2YXJpYWJsZXMsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMubG9jYWxpemVOYW1lc3BhY2VzTG9hZGVkKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVudGlsKFxuICAgICAgICB0aGlzLmxvY2FsaXplTmFtZXNwYWNlc0xvYWRlZC50aGVuKCgpID0+IGxvY2FsaXplLm1zZyhrZXlzLCB2YXJpYWJsZXMsIG9wdGlvbnMpKSxcbiAgICAgICAgbm90aGluZyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge3N0cmluZ1tdfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX19nZXRVbmlxdWVOYW1lc3BhY2VzKCkge1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmdbXX0gKi9cbiAgICAgIGNvbnN0IHVuaXF1ZU5hbWVzcGFjZXMgPSBbXTtcblxuICAgICAgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IGl0ZXJhYmxlIGluIHRoZSBjb25zdHJ1Y3RvclxuICAgICAgY29uc3QgcyA9IG5ldyBTZXQoKTtcbiAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvci5sb2NhbGl6ZU5hbWVzcGFjZXMuZm9yRWFjaChzLmFkZC5iaW5kKHMpKTtcbiAgICAgIHMuZm9yRWFjaCh1bmlxdWVOYW1lc3BhY2UgPT4ge1xuICAgICAgICB1bmlxdWVOYW1lc3BhY2VzLnB1c2godW5pcXVlTmFtZXNwYWNlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHVuaXF1ZU5hbWVzcGFjZXM7XG4gICAgfVxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgX19sb2NhbGl6ZVN0YXJ0TG9hZGluZ05hbWVzcGFjZXMoKSB7XG4gICAgICB0aGlzLmxvY2FsaXplTmFtZXNwYWNlc0xvYWRlZCA9IGxvY2FsaXplLmxvYWROYW1lc3BhY2VzKHRoaXMuX19nZXRVbmlxdWVOYW1lc3BhY2VzKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXJ0IGxvYWRpbmcgbmFtZXNwYWNlcyBvbiB0aGUgZXZlbnQgdGhhdCBpcyBzZW50IGltbWVkaWF0ZWx5XG4gICAgICogd2hlbiBsb2NhbGl6ZS5sb2NhbGUgY2hhbmdlcyAtLT4gJ2xvY2FsZUNoYW5naW5nJ1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX19sb2NhbGl6ZU9uTG9jYWxlQ2hhbmdpbmcoKSB7XG4gICAgICB0aGlzLl9fbG9jYWxpemVTdGFydExvYWRpbmdOYW1lc3BhY2VzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtDdXN0b21FdmVudH0gZXZlbnRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9fbG9jYWxpemVPbkxvY2FsZUNoYW5nZWQoZXZlbnQpIHtcbiAgICAgIHRoaXMub25Mb2NhbGVDaGFuZ2VkKGV2ZW50LmRldGFpbC5uZXdMb2NhbGUsIGV2ZW50LmRldGFpbC5vbGRMb2NhbGUpO1xuICAgIH1cblxuICAgIG9uTG9jYWxlUmVhZHkoKSB7XG4gICAgICB0aGlzLm9uTG9jYWxlVXBkYXRlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdMb2NhbGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkTG9jYWxlXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgb25Mb2NhbGVDaGFuZ2VkKG5ld0xvY2FsZSwgb2xkTG9jYWxlKSB7XG4gICAgICB0aGlzLm9uTG9jYWxlVXBkYXRlZCgpO1xuICAgICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBvbkxvY2FsZVVwZGF0ZWQoKSB7fVxuICB9O1xuXG5leHBvcnQgY29uc3QgTG9jYWxpemVNaXhpbiA9IGRlZHVwZU1peGluKExvY2FsaXplTWl4aW5JbXBsZW1lbnRhdGlvbik7XG4iLCJpbXBvcnQgeyBsb2NhbGl6ZSB9IGZyb20gJy4uL2xvY2FsaXplLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBsb2NhbGUgdG8gdXNlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhbGVdIExvY2FsZSB0byBvdmVycmlkZSBicm93c2VyIGxvY2FsZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2FsZShsb2NhbGUpIHtcbiAgaWYgKGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGU7XG4gIH1cbiAgaWYgKGxvY2FsaXplICYmIGxvY2FsaXplLmxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGl6ZS5sb2NhbGU7XG4gIH1cbiAgcmV0dXJuICdlbi1HQic7XG59XG4iLCJpbXBvcnQgeyBnZXRMb2NhbGUgfSBmcm9tICcuLi91dGlscy9nZXRMb2NhbGUuanMnO1xuXG4vKipcbiAqIFRvIGdldCB0aGUgZGVjaW1hbCBzZXBhcmF0b3JcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xvY2FsZV0gVG8gb3ZlcnJpZGUgdGhlIGJyb3dzZXIgbG9jYWxlXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vdHlwZXMvTG9jYWxpemVNaXhpblR5cGVzJykuRm9ybWF0TnVtYmVyT3B0aW9uc30gW29wdGlvbnNdXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgc2VwYXJhdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWNpbWFsU2VwYXJhdG9yKGxvY2FsZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmRlY2ltYWxTZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5kZWNpbWFsU2VwYXJhdG9yO1xuICB9XG4gIGNvbnN0IGNvbXB1dGVkTG9jYWxlID0gZ2V0TG9jYWxlKGxvY2FsZSk7XG4gIGNvbnN0IGZvcm1hdHRlZE51bWJlciA9IEludGwuTnVtYmVyRm9ybWF0KGNvbXB1dGVkTG9jYWxlLCB7XG4gICAgc3R5bGU6ICdkZWNpbWFsJyxcbiAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDEsXG4gIH0pLmZvcm1hdCgxKTtcbiAgcmV0dXJuIGZvcm1hdHRlZE51bWJlclsxXTtcbn1cbiIsIi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB2YWx1ZSB3aXRoIGZvcmNlZCBcIm5vcm1hbFwiIHNwYWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxTcGFjZXModmFsdWUpIHtcbiAgLy8gSWYgbm9uLWJyZWFraW5nIHNwYWNlICgxNjApIG9yIG5hcnJvdyBub24tYnJlYWtpbmcgc3BhY2UgKDgyMzkpIHRoZW4gcmV0dXJuICcgJ1xuICByZXR1cm4gdmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gMTYwIHx8IHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDgyMzkgPyAnICcgOiB2YWx1ZTtcbn1cbiIsImltcG9ydCB7IGdldExvY2FsZSB9IGZyb20gJy4uL3V0aWxzL2dldExvY2FsZS5qcyc7XG5pbXBvcnQgeyBub3JtYWxTcGFjZXMgfSBmcm9tICcuL3V0aWxzL25vcm1hbFNwYWNlcy5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgZ3JvdXAgc2VwYXJhdG9yXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhbGVdIFRvIG92ZXJyaWRlIHRoZSBicm93c2VyIGxvY2FsZVxuICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL3R5cGVzL0xvY2FsaXplTWl4aW5UeXBlcycpLkZvcm1hdE51bWJlck9wdGlvbnN9IFtvcHRpb25zXVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEdyb3VwU2VwYXJhdG9yKGxvY2FsZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdyb3VwU2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuZ3JvdXBTZXBhcmF0b3I7XG4gIH1cbiAgY29uc3QgY29tcHV0ZWRMb2NhbGUgPSBnZXRMb2NhbGUobG9jYWxlKTtcbiAgY29uc3QgZm9ybWF0dGVkTnVtYmVyID0gSW50bC5OdW1iZXJGb3JtYXQoY29tcHV0ZWRMb2NhbGUsIHtcbiAgICBzdHlsZTogJ2RlY2ltYWwnLFxuICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMCxcbiAgfSkuZm9ybWF0KDEwMDAwKTtcbiAgcmV0dXJuIG5vcm1hbFNwYWNlcyhmb3JtYXR0ZWROdW1iZXJbMl0pO1xufVxuIiwiLyoqXG4gKiBGb3IgRHV0Y2ggYW5kIEJlbGdpYW4gYW1vdW50cyB0aGUgY3VycmVuY3kgc2hvdWxkIGJlIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZ1xuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uLy4uLy4uL3R5cGVzL0xvY2FsaXplTWl4aW5UeXBlcycpLkZvcm1hdE51bWJlclBhcnR9IEZvcm1hdE51bWJlclBhcnRcbiAqIEBwYXJhbSB7Rm9ybWF0TnVtYmVyUGFydFtdfSBmb3JtYXR0ZWRQYXJ0c1xuICogQHJldHVybnMge0Zvcm1hdE51bWJlclBhcnRbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlQ3VycmVuY3lUb0VuZChmb3JtYXR0ZWRQYXJ0cykge1xuICBpZiAoZm9ybWF0dGVkUGFydHNbMF0udHlwZSA9PT0gJ2N1cnJlbmN5Jykge1xuICAgIGNvbnN0IG1vdmVDdXIgPSBmb3JtYXR0ZWRQYXJ0cy5zcGxpY2UoMCwgMSk7XG4gICAgY29uc3QgbW92ZUxpdCA9IGZvcm1hdHRlZFBhcnRzLnNwbGljZSgwLCAxKTtcbiAgICBmb3JtYXR0ZWRQYXJ0cy5wdXNoKG1vdmVMaXRbMF0pO1xuICAgIGZvcm1hdHRlZFBhcnRzLnB1c2gobW92ZUN1clswXSk7XG4gIH0gZWxzZSBpZiAoZm9ybWF0dGVkUGFydHNbMF0udHlwZSA9PT0gJ21pbnVzU2lnbicgJiYgZm9ybWF0dGVkUGFydHNbMV0udHlwZSA9PT0gJ2N1cnJlbmN5Jykge1xuICAgIGNvbnN0IG1vdmVDdXIgPSBmb3JtYXR0ZWRQYXJ0cy5zcGxpY2UoMSwgMSk7XG4gICAgY29uc3QgbW92ZUxpdCA9IGZvcm1hdHRlZFBhcnRzLnNwbGljZSgxLCAxKTtcbiAgICBmb3JtYXR0ZWRQYXJ0cy5wdXNoKG1vdmVMaXRbMF0pO1xuICAgIGZvcm1hdHRlZFBhcnRzLnB1c2gobW92ZUN1clswXSk7XG4gIH1cbiAgcmV0dXJuIGZvcm1hdHRlZFBhcnRzO1xufVxuIiwiLyoqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxzdHJpbmc+fSAqL1xuY29uc3QgQ1VSUkVOQ1lfQ09ERV9TWU1CT0xfTUFQID0ge1xuICBFVVI6ICfigqwnLFxuICBVU0Q6ICckJyxcbiAgSlBZOiAnwqUnLFxufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIHN5bWJvbHMgZm9yIGxvY2FsZSAnZW4tQVUnLCBkdWUgdG8gYnVnIGluIENocm9tZVxuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uLy4uLy4uL3R5cGVzL0xvY2FsaXplTWl4aW5UeXBlcycpLkZvcm1hdE51bWJlclBhcnR9IEZvcm1hdE51bWJlclBhcnRcbiAqIEBwYXJhbSB7Rm9ybWF0TnVtYmVyUGFydFtdfSBmb3JtYXR0ZWRQYXJ0c1xuICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uLy4uLy4uL3R5cGVzL0xvY2FsaXplTWl4aW5UeXBlcycpLkZvcm1hdE51bWJlck9wdGlvbnN9IFtvcHRpb25zXVxuICogQHJldHVybnMge0Zvcm1hdE51bWJlclBhcnRbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlRU5BVVN5bWJvbHMoZm9ybWF0dGVkUGFydHMsIHsgY3VycmVuY3ksIGN1cnJlbmN5RGlzcGxheSB9ID0ge30pIHtcbiAgY29uc3QgcmVzdWx0ID0gZm9ybWF0dGVkUGFydHM7XG4gIGlmIChmb3JtYXR0ZWRQYXJ0cy5sZW5ndGggPiAxICYmIGN1cnJlbmN5RGlzcGxheSA9PT0gJ3N5bWJvbCcgJiYgY3VycmVuY3kpIHtcbiAgICBpZiAoT2JqZWN0LmtleXMoQ1VSUkVOQ1lfQ09ERV9TWU1CT0xfTUFQKS5pbmNsdWRlcyhjdXJyZW5jeSkpIHtcbiAgICAgIHJlc3VsdFswXS52YWx1ZSA9IENVUlJFTkNZX0NPREVfU1lNQk9MX01BUFtjdXJyZW5jeV07XG4gICAgfVxuICAgIHJlc3VsdFsxXS52YWx1ZSA9ICcnO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgeyBlbXB0eVN0cmluZ1doZW5OdW1iZXJOYW4gfSBmcm9tICcuL3V0aWxzL2VtcHR5U3RyaW5nV2hlbk51bWJlck5hbi5qcyc7XG5pbXBvcnQgeyBnZXRTZXBhcmF0b3JzRnJvbU51bWJlciB9IGZyb20gJy4vZ2V0U2VwYXJhdG9yc0Zyb21OdW1iZXIuanMnO1xuaW1wb3J0IHsgZ2V0RGVjaW1hbFNlcGFyYXRvciB9IGZyb20gJy4vZ2V0RGVjaW1hbFNlcGFyYXRvci5qcyc7XG5pbXBvcnQgeyBnZXRHcm91cFNlcGFyYXRvciB9IGZyb20gJy4vZ2V0R3JvdXBTZXBhcmF0b3IuanMnO1xuaW1wb3J0IHsgZ2V0TG9jYWxlIH0gZnJvbSAnLi4vdXRpbHMvZ2V0TG9jYWxlLmpzJztcbmltcG9ydCB7IG5vcm1hbGl6ZUludGwgfSBmcm9tICcuL3V0aWxzL25vcm1hbGl6ZS1mb3JtYXQtbnVtYmVyLXRvLXBhcnRzL25vcm1hbGl6ZUludGwuanMnO1xuaW1wb3J0IHsgbm9ybWFsU3BhY2VzIH0gZnJvbSAnLi91dGlscy9ub3JtYWxTcGFjZXMuanMnO1xuXG4vKipcbiAqIFJvdW5kIHRoZSBudW1iZXIgYmFzZWQgb24gdGhlIG9wdGlvbnNcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyXG4gKiBAcGFyYW0ge3N0cmluZ30gcm91bmRNb2RlXG4gKiBAdGhyb3dzIHtFcnJvcn0gcm91bmRNb2RlIGNhbiBvbmx5IGJlIHJvdW5kfGZsb29yfGNlaWxpbmdcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByb3VuZE51bWJlcihudW1iZXIsIHJvdW5kTW9kZSkge1xuICBzd2l0Y2ggKHJvdW5kTW9kZSkge1xuICAgIGNhc2UgJ2Zsb29yJzpcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgY2FzZSAnY2VpbGluZyc6XG4gICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgY2FzZSAncm91bmQnOlxuICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdyb3VuZE1vZGUgY2FuIG9ubHkgYmUgcm91bmR8Zmxvb3J8Y2VpbGluZycpO1xuICB9XG59XG5cbi8qKlxuICogU3BsaXRzIGEgbnVtYmVyIHVwIGluIHBhcnRzIGZvciBpbnRlZ2VyLCBmcmFjdGlvbiwgZ3JvdXAsIGxpdGVyYWwsIGRlY2ltYWwgYW5kIGN1cnJlbmN5LlxuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL0xvY2FsaXplTWl4aW5UeXBlcycpLkZvcm1hdE51bWJlclBhcnR9IEZvcm1hdE51bWJlclBhcnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgTnVtYmVyIHRvIHNwbGl0IHVwXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vdHlwZXMvTG9jYWxpemVNaXhpblR5cGVzJykuRm9ybWF0TnVtYmVyT3B0aW9uc30gW29wdGlvbnNdIEludGwgb3B0aW9ucyBhcmUgYXZhaWxhYmxlIGV4dGVuZGVkIGJ5IHJvdW5kTW9kZSxyZXR1cm5JZk5hTlxuICogQHJldHVybnMge3N0cmluZyB8IEZvcm1hdE51bWJlclBhcnRbXX0gQXJyYXkgd2l0aCBwYXJ0cyBvciAoYW4gZW1wdHkgc3RyaW5nIG9yIHJldHVybklmTmFOIGlmIG5vdCBhIG51bWJlcilcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE51bWJlclRvUGFydHMobnVtYmVyLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHBhcnNlZE51bWJlciA9IHR5cGVvZiBudW1iZXIgPT09ICdzdHJpbmcnID8gcGFyc2VGbG9hdChudW1iZXIpIDogbnVtYmVyO1xuICBjb25zdCBjb21wdXRlZExvY2FsZSA9IGdldExvY2FsZShvcHRpb25zICYmIG9wdGlvbnMubG9jYWxlKTtcbiAgLy8gd2hlbiBwYXJzZWROdW1iZXIgaXMgbm90IGEgbnVtYmVyIHdlIHNob3VsZCByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIG9yIHJldHVybklmTmFOXG4gIGlmIChOdW1iZXIuaXNOYU4ocGFyc2VkTnVtYmVyKSkge1xuICAgIHJldHVybiBlbXB0eVN0cmluZ1doZW5OdW1iZXJOYW4ob3B0aW9ucyAmJiBvcHRpb25zLnJldHVybklmTmFOKTtcbiAgfVxuICAvLyBJZiByb3VuZE1vZGUgaXMgZ2l2ZW4gdGhlIG51bWJlciBpcyByb3VuZGVkIGJhc2VkIHVwb24gdGhlIG1vZGVcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yb3VuZE1vZGUpIHtcbiAgICBwYXJzZWROdW1iZXIgPSByb3VuZE51bWJlcihudW1iZXIsIG9wdGlvbnMucm91bmRNb2RlKTtcbiAgfVxuICBsZXQgZm9ybWF0dGVkUGFydHMgPSBbXTtcblxuICBjb25zdCBmb3JtYXR0ZWROdW1iZXIgPSBJbnRsLk51bWJlckZvcm1hdChjb21wdXRlZExvY2FsZSwgb3B0aW9ucykuZm9ybWF0KHBhcnNlZE51bWJlcik7XG4gIGNvbnN0IHsgZGVjaW1hbFNlcGFyYXRvciwgZ3JvdXBTZXBhcmF0b3IgfSA9IGdldFNlcGFyYXRvcnNGcm9tTnVtYmVyKFxuICAgIHBhcnNlZE51bWJlcixcbiAgICBmb3JtYXR0ZWROdW1iZXIsXG4gICAgb3B0aW9ucyxcbiAgKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taXJyZWd1bGFyLXdoaXRlc3BhY2VcbiAgY29uc3QgcmVnZXhDdXJyZW5jeSA9IC9bLixcXHMwLTnigIlfIF0vO1xuICBjb25zdCByZWdleE1pbnVzU2lnbiA9IC9bLV0vOyAvLyBVKzAwMkQsIEh5cGhlbi1NaW51cywgJiM0NTtcbiAgY29uc3QgcmVnZXhOdW0gPSAvWzAtOV0vO1xuICBjb25zdCByZWdleFNwYWNlID0gL1tcXHNdLztcbiAgbGV0IGN1cnJlbmN5ID0gJyc7XG4gIGxldCBudW1iZXJQYXJ0ID0gJyc7XG4gIGxldCBmcmFjdGlvbiA9IGZhbHNlO1xuICBsZXQgaXNHcm91cCA9IGZhbHNlO1xuICBjb25zdCBncm91cCA9IGdldEdyb3VwU2VwYXJhdG9yKGNvbXB1dGVkTG9jYWxlLCBvcHRpb25zKTtcbiAgY29uc3QgZGVjaW1hbCA9IGdldERlY2ltYWxTZXBhcmF0b3IoY29tcHV0ZWRMb2NhbGUsIG9wdGlvbnMpO1xuICBpZiAoZGVjaW1hbFNlcGFyYXRvciAmJiBncm91cFNlcGFyYXRvciAmJiBncm91cCA9PT0gZGVjaW1hbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRGVjaW1hbCBhbmQgZ3JvdXAgKHRob3VzYW5kKSBzZXBhcmF0b3IgYXJlIHRoZSBzYW1lIGNoYXJhY3RlcjogJyR7Z3JvdXB9Jy5cblRoaXMgY2FuIGhhcHBlbiBkdWUgdG8gYm90aCBwcm9wcyBiZWluZyBzcGVjaWZpZWQgYXMgdGhlIHNhbWUsIG9yIG9uZSBvZiB0aGUgcHJvcHMgYmVpbmcgdGhlIHNhbWUgYXMgdGhlIG90aGVyIG9uZSBmcm9tIGRlZmF1bHQgbG9jYWxlLlxuUGxlYXNlIHNwZWNpZnkgLmdyb3VwU2VwYXJhdG9yIC8gLmRlY2ltYWxTZXBhcmF0b3Igb24gdGhlIGZvcm1hdE9wdGlvbnMgb2JqZWN0IHRvIGJlIGRpZmZlcmVudC5gKTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZm9ybWF0dGVkTnVtYmVyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgLy8gZGV0ZWN0IG1pbnVzU2lnblxuICAgIGlmIChyZWdleE1pbnVzU2lnbi50ZXN0KGZvcm1hdHRlZE51bWJlcltpXSkpIHtcbiAgICAgIGZvcm1hdHRlZFBhcnRzLnB1c2goeyB0eXBlOiAnbWludXNTaWduJywgdmFsdWU6ICfiiJInIC8qIFUrMjIxMiwgJ01pbnVzLVNpZ24nLCAmbWludXM7ICovIH0pO1xuICAgIH1cbiAgICAvLyBkZXRlY3QgbnVtYmVyc1xuICAgIGlmIChyZWdleE51bS50ZXN0KGZvcm1hdHRlZE51bWJlcltpXSkpIHtcbiAgICAgIG51bWJlclBhcnQgKz0gZm9ybWF0dGVkTnVtYmVyW2ldO1xuICAgIH1cblxuICAgIC8vIGRldGVjdCBjdXJyZW5jeSAoc3ltYm9sIG9yIGNvZGUpXG4gICAgaWYgKCFyZWdleEN1cnJlbmN5LnRlc3QoZm9ybWF0dGVkTnVtYmVyW2ldKSAmJiAhcmVnZXhNaW51c1NpZ24udGVzdChmb3JtYXR0ZWROdW1iZXJbaV0pKSB7XG4gICAgICBjdXJyZW5jeSArPSBmb3JtYXR0ZWROdW1iZXJbaV07XG4gICAgfVxuICAgIC8vIHB1c2ggd2hlbiBhbm90aGVyIGNoYXJhY3RlciB0aGVuIGN1cnJlbmN5XG4gICAgaWYgKHJlZ2V4Q3VycmVuY3kudGVzdChmb3JtYXR0ZWROdW1iZXJbaV0pICYmIGN1cnJlbmN5KSB7XG4gICAgICBmb3JtYXR0ZWRQYXJ0cy5wdXNoKHsgdHlwZTogJ2N1cnJlbmN5JywgdmFsdWU6IGN1cnJlbmN5IH0pO1xuICAgICAgY3VycmVuY3kgPSAnJztcbiAgICB9XG5cbiAgICAvLyBncm91cCBzZXAgbXVzdCBiZSBsZWFkIGJ5IC8gZm9sbG93ZWQgYnkgYSBudW1iZXJcbiAgICBpZiAoXG4gICAgICBmb3JtYXR0ZWROdW1iZXJbaV0gPT09IGdyb3VwU2VwYXJhdG9yICYmXG4gICAgICBmb3JtYXR0ZWROdW1iZXJbaSAtIDFdLm1hdGNoKHJlZ2V4TnVtKSAmJlxuICAgICAgZm9ybWF0dGVkTnVtYmVyW2kgKyAxXS5tYXRjaChyZWdleE51bSlcbiAgICApIHtcbiAgICAgIC8vIFdyaXRlIG51bWJlciBncm91cGluZ1xuICAgICAgaWYgKG51bWJlclBhcnQpIHtcbiAgICAgICAgZm9ybWF0dGVkUGFydHMucHVzaCh7IHR5cGU6ICdpbnRlZ2VyJywgdmFsdWU6IG51bWJlclBhcnQgfSk7XG4gICAgICAgIG51bWJlclBhcnQgPSAnJztcbiAgICAgIH1cblxuICAgICAgZm9ybWF0dGVkUGFydHMucHVzaCh7IHR5cGU6ICdncm91cCcsIHZhbHVlOiBncm91cCB9KTtcbiAgICAgIGlzR3JvdXAgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXR0ZWROdW1iZXJbaV0gPT09IGRlY2ltYWxTZXBhcmF0b3IpIHtcbiAgICAgIC8vIFdyaXRlIG51bWJlciBncm91cGluZ1xuICAgICAgaWYgKG51bWJlclBhcnQpIHtcbiAgICAgICAgZm9ybWF0dGVkUGFydHMucHVzaCh7IHR5cGU6ICdpbnRlZ2VyJywgdmFsdWU6IG51bWJlclBhcnQgfSk7XG4gICAgICAgIG51bWJlclBhcnQgPSAnJztcbiAgICAgIH1cblxuICAgICAgZm9ybWF0dGVkUGFydHMucHVzaCh7IHR5cGU6ICdkZWNpbWFsJywgdmFsdWU6IGRlY2ltYWwgfSk7XG4gICAgICBmcmFjdGlvbiA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gZGV0ZWN0IGxpdGVyYWxzIChlbXB0eSBzcGFjZXMpIG9yIHNwYWNlIGdyb3VwIHNlcGFyYXRvclxuICAgIGlmIChyZWdleFNwYWNlLnRlc3QoZm9ybWF0dGVkTnVtYmVyW2ldKSkge1xuICAgICAgY29uc3QgaGFzTnVtYmVyUGFydCA9ICEhbnVtYmVyUGFydDtcbiAgICAgIC8vIFdyaXRlIG51bWJlciBncm91cGluZ1xuICAgICAgaWYgKG51bWJlclBhcnQgJiYgIWZyYWN0aW9uKSB7XG4gICAgICAgIGZvcm1hdHRlZFBhcnRzLnB1c2goeyB0eXBlOiAnaW50ZWdlcicsIHZhbHVlOiBudW1iZXJQYXJ0IH0pO1xuICAgICAgICBudW1iZXJQYXJ0ID0gJyc7XG4gICAgICB9IGVsc2UgaWYgKG51bWJlclBhcnQpIHtcbiAgICAgICAgZm9ybWF0dGVkUGFydHMucHVzaCh7IHR5cGU6ICdmcmFjdGlvbicsIHZhbHVlOiBudW1iZXJQYXJ0IH0pO1xuICAgICAgICBudW1iZXJQYXJ0ID0gJyc7XG4gICAgICB9XG4gICAgICAvLyBJZiBzcGFjZSBlcXVhbHMgdGhlIGdyb3VwIHNlcGFyYXRvciBpdCBnZXRzIHR5cGUgZ3JvdXBcbiAgICAgIGlmIChub3JtYWxTcGFjZXMoZm9ybWF0dGVkTnVtYmVyW2ldKSA9PT0gZ3JvdXAgJiYgaGFzTnVtYmVyUGFydCAmJiAhZnJhY3Rpb24pIHtcbiAgICAgICAgZm9ybWF0dGVkUGFydHMucHVzaCh7IHR5cGU6ICdncm91cCcsIHZhbHVlOiBmb3JtYXR0ZWROdW1iZXJbaV0gfSk7XG4gICAgICAgIC8vIGlmIHdlIGFscmVhZHkgcHVzaGVkIGl0IGFzIGEgZ3JvdXAgc2VwYXJhdG9yLCBkb24ndCBhZGQgaXQgYXMgYSBsaXRlcmFsIG9uIHRvcC4uXG4gICAgICB9IGVsc2UgaWYgKCFpc0dyb3VwKSB7XG4gICAgICAgIGZvcm1hdHRlZFBhcnRzLnB1c2goeyB0eXBlOiAnbGl0ZXJhbCcsIHZhbHVlOiBmb3JtYXR0ZWROdW1iZXJbaV0gfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlzR3JvdXAgPSBmYWxzZTtcbiAgICAvLyBOdW1iZXJzIGFmdGVyIHRoZSBkZWNpbWFsIHNpZ24gYXJlIGZyYWN0aW9ucywgd3JpdGUgdGhlIGxhc3RcbiAgICAvLyBmcmFjdGlvbnMgYXQgdGhlIGVuZCBvZiB0aGUgbnVtYmVyXG4gICAgaWYgKGZyYWN0aW9uID09PSB0cnVlICYmIGkgPT09IGZvcm1hdHRlZE51bWJlci5sZW5ndGggLSAxKSB7XG4gICAgICAvLyB3cml0ZSBsYXN0IG51bWJlciBwYXJ0XG4gICAgICBpZiAobnVtYmVyUGFydCkge1xuICAgICAgICBmb3JtYXR0ZWRQYXJ0cy5wdXNoKHsgdHlwZTogJ2ZyYWN0aW9uJywgdmFsdWU6IG51bWJlclBhcnQgfSk7XG4gICAgICB9XG4gICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gZnJhY3Rpb25zIGJ1dCB3ZSByZWFjaGVkIHRoZSBlbmQgd3JpdGUgdGhlIG51bWJlciBwYXJ0IGFzIGludGVnZXJcbiAgICB9IGVsc2UgaWYgKGkgPT09IGZvcm1hdHRlZE51bWJlci5sZW5ndGggLSAxICYmIG51bWJlclBhcnQpIHtcbiAgICAgIGZvcm1hdHRlZFBhcnRzLnB1c2goeyB0eXBlOiAnaW50ZWdlcicsIHZhbHVlOiBudW1iZXJQYXJ0IH0pO1xuICAgIH1cbiAgICAvLyBwdXNoIGN1cnJlbmN5IG9uIGVuZCBvZiBsb29wXG4gICAgaWYgKGkgPT09IGZvcm1hdHRlZE51bWJlci5sZW5ndGggLSAxICYmIGN1cnJlbmN5KSB7XG4gICAgICBmb3JtYXR0ZWRQYXJ0cy5wdXNoKHsgdHlwZTogJ2N1cnJlbmN5JywgdmFsdWU6IGN1cnJlbmN5IH0pO1xuICAgICAgY3VycmVuY3kgPSAnJztcbiAgICB9XG4gIH1cbiAgZm9ybWF0dGVkUGFydHMgPSBub3JtYWxpemVJbnRsKGZvcm1hdHRlZFBhcnRzLCBvcHRpb25zLCBjb21wdXRlZExvY2FsZSk7XG4gIHJldHVybiBmb3JtYXR0ZWRQYXJ0cztcbn1cbiIsImltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnLi4vLi4vbG9jYWxpemUuanMnO1xuXG4vKipcbiAqIFdoZW4gbnVtYmVyIGlzIE5hTiB3ZSBzaG91bGQgcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBvciByZXR1cm5JZk5hTiBwYXJhbVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gcmV0dXJuSWZOYU5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbXB0eVN0cmluZ1doZW5OdW1iZXJOYW4ocmV0dXJuSWZOYU4pIHtcbiAgcmV0dXJuIHJldHVybklmTmFOIHx8IGxvY2FsaXplLmZvcm1hdE51bWJlck9wdGlvbnMucmV0dXJuSWZOYU47XG59XG4iLCIvKipcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyc2VkTnVtYmVyXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0dGVkTnVtYmVyXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vdHlwZXMvTG9jYWxpemVNaXhpblR5cGVzJykuRm9ybWF0TnVtYmVyT3B0aW9uc30gW29wdGlvbnNdXG4gKiBAcmV0dXJucyB7e2dyb3VwU2VwYXJhdG9yOiBzdHJpbmd8bnVsbCwgZGVjaW1hbFNlcGFyYXRvcjogc3RyaW5nfG51bGx9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VwYXJhdG9yc0Zyb21OdW1iZXIocGFyc2VkTnVtYmVyLCBmb3JtYXR0ZWROdW1iZXIsIG9wdGlvbnMpIHtcbiAgLy8gc2VwYXJhdG9yIGNhbiBvbmx5IGhhcHBlbiBpZiB0aGVyZSBpcyBhdCBsZWFzdCAxIGRpZ2l0IGJlZm9yZSBhbmQgYWZ0ZXIgdGhlIHNlcGFyYXRvclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taXJyZWd1bGFyLXdoaXRlc3BhY2VcbiAgY29uc3QgcmVnZXhTZXBhcmF0b3IgPSAvWzAtOV0oPzxzZXA+W1xccywu4oCJXyAnXSlbMC05XS9nO1xuXG4gIC8qKiBAdHlwZSB7c3RyaW5nW119ICovXG4gIGNvbnN0IHNlcGFyYXRvcnMgPSBbXTtcbiAgbGV0IG1hdGNoO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uZC1hc3NpZ25cbiAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4U2VwYXJhdG9yLmV4ZWMoZm9ybWF0dGVkTnVtYmVyKSkgIT09IG51bGwpIHtcbiAgICBpZiAobWF0Y2guZ3JvdXBzICYmIG1hdGNoLmdyb3Vwcy5zZXApIHtcbiAgICAgIHNlcGFyYXRvcnMucHVzaChtYXRjaC5ncm91cHM/LnNlcCk7XG4gICAgfVxuICB9XG5cbiAgbGV0IGdyb3VwU2VwYXJhdG9yID0gbnVsbDtcbiAgbGV0IGRlY2ltYWxTZXBhcmF0b3IgPSBudWxsO1xuICBpZiAoc2VwYXJhdG9ycykge1xuICAgIGlmIChzZXBhcmF0b3JzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgcGFydHMgPSBmb3JtYXR0ZWROdW1iZXIuc3BsaXQoc2VwYXJhdG9yc1swXSk7XG4gICAgICAvLyBOb3Qgc3VyZSBpZiBkZWNpbWFsIG9yIGdyb3VwLCBiZWNhdXNlIG9ubHkgMSBzZXBhcmF0b3IuXG4gICAgICAvLyBpZiB0aGUgc2VwYXJhdG9yIGlzIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IDMgb3IgbW9yZSBkaWdpdHNcbiAgICAgIC8vIGFuZCBpZiB0aGUgb3JpZ2luYWwgbnVtYmVyIHZhbHVlIGlzIG1vcmUgb3IgZXF1YWwgdGhhbiAxMDAwIG9yIGxlc3Mgb3IgZXF1YWwgdGhhbiAtMTAwMFxuICAgICAgLy8gb3IgdGhlIG1pbmltdW0gaW50ZWdlciBkaWdpdHMgaXMgZm9yY2VkIHRvIG1vcmUgdGhhbiAzLFxuICAgICAgLy8gaXQgaGFzIHRvIGJlIHRoZSBncm91cCBzZXBhcmF0b3JcbiAgICAgIGlmIChcbiAgICAgICAgcGFydHNbMV0ucmVwbGFjZSgvW14wLTldL2csICcnKS5sZW5ndGggPj0gMyAmJlxuICAgICAgICAocGFyc2VkTnVtYmVyID49IDEwMDAgfHxcbiAgICAgICAgICBwYXJzZWROdW1iZXIgPD0gLTEgKiAxMDAwIHx8XG4gICAgICAgICAgKG9wdGlvbnM/Lm1pbmltdW1JbnRlZ2VyRGlnaXRzICYmIG9wdGlvbnMubWluaW11bUludGVnZXJEaWdpdHMgPiAzKSlcbiAgICAgICkge1xuICAgICAgICBbZ3JvdXBTZXBhcmF0b3JdID0gc2VwYXJhdG9ycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFtkZWNpbWFsU2VwYXJhdG9yXSA9IHNlcGFyYXRvcnM7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzZXBhcmF0b3JzLmV2ZXJ5KHZhbCA9PiB2YWwgPT09IHNlcGFyYXRvcnNbMF0pKSB7XG4gICAgICAvLyBtdWx0aXBsZSBzZXBhcmF0b3JzLCBjaGVjayBpZiB0aGV5IGFyZSBhbGwgdGhlIHNhbWUgb3Igbm90XG4gICAgICAvLyBpZiB0aGUgc2FtZSwgaXQgbWVhbnMgdGhleSBhcmUgZ3JvdXAgc2VwYXJhdG9yc1xuICAgICAgLy8gaWYgbm90LCBpdCBtZWFucyB0aGF0IHRoZSBsYXN0IG9uZSBtdXN0IGJlIHRoZSBkZWNpbWFsIHNlcGFyYXRvclxuICAgICAgW2dyb3VwU2VwYXJhdG9yXSA9IHNlcGFyYXRvcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIFtncm91cFNlcGFyYXRvcl0gPSBzZXBhcmF0b3JzO1xuICAgICAgZGVjaW1hbFNlcGFyYXRvciA9IHNlcGFyYXRvcnNbc2VwYXJhdG9ycy5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdyb3VwU2VwYXJhdG9yLFxuICAgIGRlY2ltYWxTZXBhcmF0b3IsXG4gIH07XG59XG4iLCJpbXBvcnQgeyBnZXRHcm91cFNlcGFyYXRvciB9IGZyb20gJy4uLy4uL2dldEdyb3VwU2VwYXJhdG9yLmpzJztcbmltcG9ydCB7IGZvcmNlQWRkR3JvdXBTZXBhcmF0b3JzIH0gZnJvbSAnLi9mb3JjZUFkZEdyb3VwU2VwYXJhdG9ycy5qcyc7XG5pbXBvcnQgeyBmb3JjZUN1cnJlbmN5VG9FbmQgfSBmcm9tICcuL2ZvcmNlQ3VycmVuY3lUb0VuZC5qcyc7XG5pbXBvcnQgeyBmb3JjZU5vcm1hbFNwYWNlcyB9IGZyb20gJy4vZm9yY2VOb3JtYWxTcGFjZXMuanMnO1xuaW1wb3J0IHsgZm9yY2VTcGFjZUJldHdlZW5DdXJyZW5jeUNvZGVBbmROdW1iZXIgfSBmcm9tICcuL2ZvcmNlU3BhY2VCZXR3ZWVuQ3VycmVuY3lDb2RlQW5kTnVtYmVyLmpzJztcbmltcG9ydCB7IGZvcmNlWWVuU3ltYm9sIH0gZnJvbSAnLi9mb3JjZVllblN5bWJvbC5qcyc7XG5pbXBvcnQgeyBmb3JjZVNwYWNlSW5zdGVhZE9mWmVyb0Zvckdyb3VwIH0gZnJvbSAnLi9mb3JjZVNwYWNlSW5zdGVhZE9mWmVyb0Zvckdyb3VwLmpzJztcbmltcG9ydCB7IGZvcmNlVHJ5Q3VycmVuY3lDb2RlIH0gZnJvbSAnLi9mb3JjZVRyeUN1cnJlbmN5Q29kZS5qcyc7XG5pbXBvcnQgeyBmb3JjZUVOQVVTeW1ib2xzIH0gZnJvbSAnLi9mb3JjZUVOQVVTeW1ib2xzLmpzJztcblxuLyoqXG4gKiBOb3JtYWxpemVzIGZ1bmN0aW9uIFwiZm9ybWF0TnVtYmVyVG9QYXJ0c1wiXG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vLi4vdHlwZXMvTG9jYWxpemVNaXhpblR5cGVzJykuRm9ybWF0TnVtYmVyUGFydH0gRm9ybWF0TnVtYmVyUGFydFxuICogQHBhcmFtIHtGb3JtYXROdW1iZXJQYXJ0W119IGZvcm1hdHRlZFBhcnRzXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vLi4vLi4vdHlwZXMvTG9jYWxpemVNaXhpblR5cGVzJykuRm9ybWF0TnVtYmVyT3B0aW9uc30gb3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IF9sb2NhbGVcbiAqIEByZXR1cm5zIHtGb3JtYXROdW1iZXJQYXJ0W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVJbnRsKGZvcm1hdHRlZFBhcnRzLCBvcHRpb25zID0ge30sIF9sb2NhbGUpIHtcbiAgbGV0IG5vcm1hbGl6ZSA9IGZvcmNlTm9ybWFsU3BhY2VzKGZvcm1hdHRlZFBhcnRzKTtcbiAgLy8gRHV0Y2ggYW5kIEJlbGdpYW4gY3VycmVuY3kgbXVzdCBiZSBtb3ZlZCB0byBlbmQgb2YgbnVtYmVyXG4gIGlmIChvcHRpb25zLnN0eWxlID09PSAnY3VycmVuY3knKSB7XG4gICAgaWYgKG9wdGlvbnMuY3VycmVuY3lEaXNwbGF5ID09PSAnY29kZScgJiYgX2xvY2FsZS5zbGljZSgwLCAyKSA9PT0gJ25sJykge1xuICAgICAgbm9ybWFsaXplID0gZm9yY2VDdXJyZW5jeVRvRW5kKG5vcm1hbGl6ZSk7XG4gICAgfVxuICAgIC8vIEFkZCBncm91cCBzZXBhcmF0b3IgZm9yIEJ1bGdhcmlhbiBsb2NhbGVcbiAgICBpZiAoX2xvY2FsZSA9PT0gJ2JnLUJHJykge1xuICAgICAgbm9ybWFsaXplID0gZm9yY2VBZGRHcm91cFNlcGFyYXRvcnMobm9ybWFsaXplLCBnZXRHcm91cFNlcGFyYXRvcigpKTtcbiAgICAgIG5vcm1hbGl6ZSA9IGZvcmNlU3BhY2VJbnN0ZWFkT2ZaZXJvRm9yR3JvdXAobm9ybWFsaXplKTtcbiAgICB9XG4gICAgLy8gRm9yY2Ugc3BhY2UgYmV0d2VlbiBjdXJyZW5jeSBjb2RlIGFuZCBudW1iZXJcbiAgICBpZiAoX2xvY2FsZSA9PT0gJ2VuLUdCJyB8fCBfbG9jYWxlID09PSAnZW4tVVMnIHx8IF9sb2NhbGUgPT09ICdlbi1BVScgfHwgX2xvY2FsZSA9PT0gJ2VuLVBIJykge1xuICAgICAgbm9ybWFsaXplID0gZm9yY2VTcGFjZUJldHdlZW5DdXJyZW5jeUNvZGVBbmROdW1iZXIobm9ybWFsaXplLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLy8gRm9yY2UgbWlzc2luZyBKYXBhbmVzZSBZZW4gc3ltYm9sXG4gICAgaWYgKF9sb2NhbGUgPT09ICdmci1GUicgfHwgX2xvY2FsZSA9PT0gJ2ZyLUJFJykge1xuICAgICAgbm9ybWFsaXplID0gZm9yY2VZZW5TeW1ib2wobm9ybWFsaXplLCBvcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKF9sb2NhbGUgPT09ICd0ci1UUicpIHtcbiAgICAgIG5vcm1hbGl6ZSA9IGZvcmNlVHJ5Q3VycmVuY3lDb2RlKG5vcm1hbGl6ZSwgb3B0aW9ucyk7XG4gICAgICBpZiAob3B0aW9ucy5jdXJyZW5jeURpc3BsYXkgPT09ICdjb2RlJykge1xuICAgICAgICBub3JtYWxpemUgPSBmb3JjZUN1cnJlbmN5VG9FbmQobm9ybWFsaXplKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKF9sb2NhbGUgPT09ICdlbi1BVScpIHtcbiAgICAgIG5vcm1hbGl6ZSA9IGZvcmNlRU5BVVN5bWJvbHMobm9ybWFsaXplLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZTtcbn1cbiIsImltcG9ydCB7IG5vcm1hbFNwYWNlcyB9IGZyb20gJy4uL25vcm1hbFNwYWNlcy5qcyc7XG5cbi8qKlxuICogUGFydHMgd2l0aCBmb3JjZWQgXCJub3JtYWxcIiBzcGFjZXNcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi8uLi8uLi90eXBlcy9Mb2NhbGl6ZU1peGluVHlwZXMnKS5Gb3JtYXROdW1iZXJQYXJ0fSBGb3JtYXROdW1iZXJQYXJ0XG4gKiBAcGFyYW0ge0Zvcm1hdE51bWJlclBhcnRbXX0gZm9ybWF0dGVkUGFydHNcbiAqIEByZXR1cm5zIHtGb3JtYXROdW1iZXJQYXJ0W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JjZU5vcm1hbFNwYWNlcyhmb3JtYXR0ZWRQYXJ0cykge1xuICAvKiogQHR5cGUge0Zvcm1hdE51bWJlclBhcnRbXX0gKi9cbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvcm1hdHRlZFBhcnRzLmZvckVhY2gocGFydCA9PiB7XG4gICAgcmVzdWx0LnB1c2goe1xuICAgICAgdHlwZTogcGFydC50eXBlLFxuICAgICAgdmFsdWU6IG5vcm1hbFNwYWNlcyhwYXJ0LnZhbHVlKSxcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCIvKipcbiAqIEFkZCBzZXBhcmF0b3JzIHdoZW4gdGhleSBhcmUgbm90IHByZXNlbnRcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi8uLi8uLi90eXBlcy9Mb2NhbGl6ZU1peGluVHlwZXMnKS5Gb3JtYXROdW1iZXJQYXJ0fSBGb3JtYXROdW1iZXJQYXJ0XG4gKiBAcGFyYW0ge0Zvcm1hdE51bWJlclBhcnRbXX0gZm9ybWF0dGVkUGFydHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBncm91cFNlcGFyYXRvclxuICogQHJldHVybnMge0Zvcm1hdE51bWJlclBhcnRbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlQWRkR3JvdXBTZXBhcmF0b3JzKGZvcm1hdHRlZFBhcnRzLCBncm91cFNlcGFyYXRvcikge1xuICAvKiogQHR5cGUge0Zvcm1hdE51bWJlclBhcnRbXX0gKi9cbiAgbGV0IGNvbmNhdEFycmF5ID0gW107XG4gIGxldCBmaXJzdFBhcnQ7XG4gIGxldCBpbnRlZ2VyUGFydDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGZvcm1hdHRlZFBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGZvcm1hdHRlZFBhcnRzW2ldLnR5cGUgPT09ICdpbnRlZ2VyJykge1xuICAgICAgZmlyc3RQYXJ0ID0gZm9ybWF0dGVkUGFydHMuc3BsaWNlKDAsIGkpO1xuICAgICAgaW50ZWdlclBhcnQgPSBmb3JtYXR0ZWRQYXJ0cy5zcGxpY2UoMCwgMSk7XG4gICAgfVxuICB9XG4gIGlmIChpbnRlZ2VyUGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgbnVtYmVyT2ZEaWdpdHMgPSBpbnRlZ2VyUGFydFswXS52YWx1ZS5sZW5ndGg7XG4gICAgY29uc3QgbW9kMyA9IG51bWJlck9mRGlnaXRzICUgMztcbiAgICBjb25zdCBncm91cHMgPSBNYXRoLmZsb29yKG51bWJlck9mRGlnaXRzIC8gMyk7XG4gICAgY29uc3QgbnVtYmVyQXJyYXkgPSBbXTtcbiAgICBsZXQgbnVtYmVyT2ZHcm91cHMgPSAwO1xuICAgIGxldCBudW1iZXJQYXJ0ID0gJyc7XG4gICAgbGV0IGZpcnN0R3JvdXAgPSBmYWxzZTtcbiAgICAvLyBMb29wIHRocm91Z2ggdGhlICBpbnRlZ2VyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkRpZ2l0czsgaSArPSAxKSB7XG4gICAgICBudW1iZXJQYXJ0ICs9IGludGVnZXJQYXJ0WzBdLnZhbHVlW2ldO1xuICAgICAgLy8gQ3JlYXRlIGZpcnN0IGdyb3VwaW5nIHdoaWNoIGlzIDwgM1xuICAgICAgaWYgKG51bWJlclBhcnQubGVuZ3RoID09PSBtb2QzICYmIGZpcnN0R3JvdXAgPT09IGZhbHNlKSB7XG4gICAgICAgIG51bWJlckFycmF5LnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgICB2YWx1ZTogbnVtYmVyUGFydCxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChudW1iZXJPZkRpZ2l0cyA+IDMpIHtcbiAgICAgICAgICBudW1iZXJBcnJheS5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdncm91cCcsXG4gICAgICAgICAgICB2YWx1ZTogZ3JvdXBTZXBhcmF0b3IsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbnVtYmVyUGFydCA9ICcnO1xuICAgICAgICBmaXJzdEdyb3VwID0gdHJ1ZTtcbiAgICAgICAgLy8gQ3JlYXRlIGdyb3VwaW5ncyBvZiAzXG4gICAgICB9IGVsc2UgaWYgKG51bWJlclBhcnQubGVuZ3RoID09PSAzICYmIGkgPCBudW1iZXJPZkRpZ2l0cyAtIDEpIHtcbiAgICAgICAgbnVtYmVyT2ZHcm91cHMgKz0gMTtcbiAgICAgICAgbnVtYmVyQXJyYXkucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ2ludGVnZXInLFxuICAgICAgICAgIHZhbHVlOiBudW1iZXJQYXJ0LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG51bWJlck9mR3JvdXBzICE9PSBncm91cHMpIHtcbiAgICAgICAgICBudW1iZXJBcnJheS5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdncm91cCcsXG4gICAgICAgICAgICB2YWx1ZTogZ3JvdXBTZXBhcmF0b3IsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbnVtYmVyUGFydCA9ICcnO1xuICAgICAgfVxuICAgIH1cbiAgICBudW1iZXJBcnJheS5wdXNoKHtcbiAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgIHZhbHVlOiBudW1iZXJQYXJ0LFxuICAgIH0pO1xuICAgIGlmIChmaXJzdFBhcnQpIHtcbiAgICAgIGNvbmNhdEFycmF5ID0gZmlyc3RQYXJ0LmNvbmNhdChudW1iZXJBcnJheSwgZm9ybWF0dGVkUGFydHMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY29uY2F0QXJyYXk7XG59XG4iLCIvKipcbiAqIEBkZXNjIEludGwgdXNlcyAwIGFzIGdyb3VwIHNlcGFyYXRvciBmb3IgYmctQkcgbG9jYWxlLlxuICogVGhpcyBzaG91bGQgYmUgYSAnICdcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi8uLi8uLi90eXBlcy9Mb2NhbGl6ZU1peGluVHlwZXMnKS5Gb3JtYXROdW1iZXJQYXJ0fSBGb3JtYXROdW1iZXJQYXJ0XG4gKiBAcGFyYW0ge0Zvcm1hdE51bWJlclBhcnRbXX0gZm9ybWF0dGVkUGFydHNcbiAqIEByZXR1cm5zIHtGb3JtYXROdW1iZXJQYXJ0W119IGNvcnJlY3RlZCBmb3JtYXR0ZWQgcGFydHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlU3BhY2VJbnN0ZWFkT2ZaZXJvRm9yR3JvdXAoZm9ybWF0dGVkUGFydHMpIHtcbiAgcmV0dXJuIGZvcm1hdHRlZFBhcnRzLm1hcChwID0+IHtcbiAgICBpZiAocC50eXBlID09PSAnZ3JvdXAnICYmIHAudmFsdWUgPT09ICcwJykge1xuICAgICAgcC52YWx1ZSA9ICcgJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfSk7XG59XG4iLCIvKipcbiAqIFdoZW4gaW4gc29tZSBsb2NhbGVzIHRoZXJlIGlzIG5vIHNwYWNlIGJldHdlZW4gY3VycmVuY3kgYW5kIGFtb3VudCBpdCBpcyBhZGRlZFxuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uLy4uLy4uL3R5cGVzL0xvY2FsaXplTWl4aW5UeXBlcycpLkZvcm1hdE51bWJlclBhcnR9IEZvcm1hdE51bWJlclBhcnRcbiAqIEBwYXJhbSB7Rm9ybWF0TnVtYmVyUGFydFtdfSBmb3JtYXR0ZWRQYXJ0c1xuICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uLy4uLy4uL3R5cGVzL0xvY2FsaXplTWl4aW5UeXBlcycpLkZvcm1hdE51bWJlck9wdGlvbnN9IFtvcHRpb25zXVxuICogQHJldHVybnMge0Zvcm1hdE51bWJlclBhcnRbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlU3BhY2VCZXR3ZWVuQ3VycmVuY3lDb2RlQW5kTnVtYmVyKFxuICBmb3JtYXR0ZWRQYXJ0cyxcbiAgeyBjdXJyZW5jeSwgY3VycmVuY3lEaXNwbGF5IH0gPSB7fSxcbikge1xuICBjb25zdCBudW1iZXJPZlBhcnRzID0gZm9ybWF0dGVkUGFydHMubGVuZ3RoO1xuICBjb25zdCBsaXRlcmFsT2JqZWN0ID0geyB0eXBlOiAnbGl0ZXJhbCcsIHZhbHVlOiAnICcgfTtcbiAgaWYgKG51bWJlck9mUGFydHMgPiAxICYmIGN1cnJlbmN5ICYmIGN1cnJlbmN5RGlzcGxheSA9PT0gJ2NvZGUnKSB7XG4gICAgaWYgKGZvcm1hdHRlZFBhcnRzWzBdLnR5cGUgPT09ICdjdXJyZW5jeScgJiYgZm9ybWF0dGVkUGFydHNbMV0udHlwZSAhPT0gJ2xpdGVyYWwnKSB7XG4gICAgICAvLyBjdXJyZW5jeSBpbiBmcm9udCBvZiBhIG51bWJlcjogRVVSIDEuMDBcbiAgICAgIGZvcm1hdHRlZFBhcnRzLnNwbGljZSgxLCAwLCBsaXRlcmFsT2JqZWN0KTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgZm9ybWF0dGVkUGFydHNbMF0udHlwZSA9PT0gJ21pbnVzU2lnbicgJiZcbiAgICAgIGZvcm1hdHRlZFBhcnRzWzFdLnR5cGUgPT09ICdjdXJyZW5jeScgJiZcbiAgICAgIGZvcm1hdHRlZFBhcnRzWzJdLnR5cGUgIT09ICdsaXRlcmFsJ1xuICAgICkge1xuICAgICAgLy8gY3VycmVuY3kgaW4gZnJvbnQgb2YgYSBuZWdhdGl2ZSBudW1iZXI6IC1FVVIgMS4wMFxuICAgICAgZm9ybWF0dGVkUGFydHMuc3BsaWNlKDIsIDAsIGxpdGVyYWxPYmplY3QpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBmb3JtYXR0ZWRQYXJ0c1tudW1iZXJPZlBhcnRzIC0gMV0udHlwZSA9PT0gJ2N1cnJlbmN5JyAmJlxuICAgICAgZm9ybWF0dGVkUGFydHNbbnVtYmVyT2ZQYXJ0cyAtIDJdLnR5cGUgIT09ICdsaXRlcmFsJ1xuICAgICkge1xuICAgICAgLy8gY3VycmVuY3kgaW4gYmVoaW5kIGEgbnVtYmVyOiAxLjAwIEVVUiB8fCAtMS4wMCBFVVJcbiAgICAgIGZvcm1hdHRlZFBhcnRzLnNwbGljZShudW1iZXJPZlBhcnRzIC0gMSwgMCwgbGl0ZXJhbE9iamVjdCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXR0ZWRQYXJ0cztcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vLi4vdHlwZXMvTG9jYWxpemVNaXhpblR5cGVzJykuRm9ybWF0TnVtYmVyUGFydH0gRm9ybWF0TnVtYmVyUGFydFxuICogQHBhcmFtIHtGb3JtYXROdW1iZXJQYXJ0W119IGZvcm1hdHRlZFBhcnRzXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vLi4vLi4vdHlwZXMvTG9jYWxpemVNaXhpblR5cGVzJykuRm9ybWF0TnVtYmVyT3B0aW9uc30gW29wdGlvbnNdXG4gKiBAcmV0dXJucyB7Rm9ybWF0TnVtYmVyUGFydFtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yY2VZZW5TeW1ib2woZm9ybWF0dGVkUGFydHMsIHsgY3VycmVuY3ksIGN1cnJlbmN5RGlzcGxheSB9ID0ge30pIHtcbiAgY29uc3QgcmVzdWx0ID0gZm9ybWF0dGVkUGFydHM7XG4gIGNvbnN0IG51bWJlck9mUGFydHMgPSByZXN1bHQubGVuZ3RoO1xuICAvLyBDaGFuZ2UgdGhlIHN5bWJvbCBmcm9tIEpQWSB0byDCpSwgZHVlIHRvIGJ1ZyBpbiBDaHJvbWVcbiAgaWYgKG51bWJlck9mUGFydHMgPiAxICYmIGN1cnJlbmN5ID09PSAnSlBZJyAmJiBjdXJyZW5jeURpc3BsYXkgPT09ICdzeW1ib2wnKSB7XG4gICAgcmVzdWx0W251bWJlck9mUGFydHMgLSAxXS52YWx1ZSA9ICfCpSc7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vLi4vdHlwZXMvTG9jYWxpemVNaXhpblR5cGVzJykuRm9ybWF0TnVtYmVyUGFydH0gRm9ybWF0TnVtYmVyUGFydFxuICogQHBhcmFtIHtGb3JtYXROdW1iZXJQYXJ0W119IGZvcm1hdHRlZFBhcnRzXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vLi4vLi4vdHlwZXMvTG9jYWxpemVNaXhpblR5cGVzJykuRm9ybWF0TnVtYmVyT3B0aW9uc30gW29wdGlvbnNdXG4gKiBAcmV0dXJucyB7Rm9ybWF0TnVtYmVyUGFydFtdfVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JjZVRyeUN1cnJlbmN5Q29kZShmb3JtYXR0ZWRQYXJ0cywgeyBjdXJyZW5jeSwgY3VycmVuY3lEaXNwbGF5IH0gPSB7fSkge1xuICBjb25zdCByZXN1bHQgPSBmb3JtYXR0ZWRQYXJ0cztcbiAgaWYgKGN1cnJlbmN5ID09PSAnVFJZJyAmJiBjdXJyZW5jeURpc3BsYXkgPT09ICdjb2RlJykge1xuICAgIHJlc3VsdC5tYXAocGFydCA9PiB7XG4gICAgICBjb25zdCBuZXdQYXJ0ID0gcGFydDtcbiAgICAgIGlmIChwYXJ0LnR5cGUgPT09ICdjdXJyZW5jeScpIHtcbiAgICAgICAgbmV3UGFydC52YWx1ZSA9ICdUTCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3UGFydDtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IHsgZm9ybWF0TnVtYmVyVG9QYXJ0cyB9IGZyb20gJy4vZm9ybWF0TnVtYmVyVG9QYXJ0cy5qcyc7XG5cbi8qKlxuICogQGV4YW1wbGVcbiAqIGdldEZyYWN0aW9uRGlnaXRzKCdKT0QnKTsgLy8gcmV0dXJuIDNcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9Mb2NhbGl6ZU1peGluVHlwZXMnKS5Gb3JtYXROdW1iZXJQYXJ0fSBGb3JtYXROdW1iZXJQYXJ0XG4gKiBAcGFyYW0ge3N0cmluZ30gW2N1cnJlbmN5PVwiRVVSXCJdIEN1cnJlbmN5IGNvZGUgZS5nLiBFVVJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGZyYWN0aW9uIGZvciB0aGUgZ2l2ZW4gY3VycmVuY3lcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWN0aW9uRGlnaXRzKGN1cnJlbmN5ID0gJ0VVUicpIHtcbiAgY29uc3QgcGFydHMgPSAvKiogQHR5cGUge0Zvcm1hdE51bWJlclBhcnRbXX0gKi8gKFxuICAgIGZvcm1hdE51bWJlclRvUGFydHMoMTIzLCB7XG4gICAgICBzdHlsZTogJ2N1cnJlbmN5JyxcbiAgICAgIGN1cnJlbmN5LFxuICAgIH0pXG4gICk7XG4gIGNvbnN0IFtmcmFjdGlvblBhcnRdID0gcGFydHMuZmlsdGVyKHBhcnQgPT4gcGFydC50eXBlID09PSAnZnJhY3Rpb24nKTtcbiAgcmV0dXJuIGZyYWN0aW9uUGFydCA/IGZyYWN0aW9uUGFydC52YWx1ZS5sZW5ndGggOiAwO1xufVxuIiwiaW1wb3J0IHsgZm9ybWF0TnVtYmVyLCBnZXRGcmFjdGlvbkRpZ2l0cywgbm9ybWFsaXplQ3VycmVuY3lMYWJlbCB9IGZyb20gJ0BsaW9uL2xvY2FsaXplJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAbGlvbi9sb2NhbGl6ZS90eXBlcy9Mb2NhbGl6ZU1peGluVHlwZXMnKS5Gb3JtYXROdW1iZXJPcHRpb25zfSBGb3JtYXRPcHRpb25zXG4gKi9cblxuLyoqXG4gKiBGb3JtYXRzIGEgbnVtYmVyIGNvbnNpZGVyaW5nIHRoZSBkZWZhdWx0IGZyYWN0aW9uIGRpZ2l0cyBwcm92aWRlZCBieSBJbnRsLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBtb2RlbFZhbHVlIE51bWJlciB0byBmb3JtYXRcbiAqIEBwYXJhbSB7Rm9ybWF0T3B0aW9uc30gW2dpdmVuT3B0aW9uc11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEFtb3VudChtb2RlbFZhbHVlLCBnaXZlbk9wdGlvbnMpIHtcbiAgLyoqIEB0eXBlIHtGb3JtYXRPcHRpb25zfSAqL1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIGN1cnJlbmN5OiAnRVVSJyxcbiAgICAuLi5naXZlbk9wdGlvbnMsXG4gIH07XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLm1pbmltdW1GcmFjdGlvbkRpZ2l0cyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvcHRpb25zLm1pbmltdW1GcmFjdGlvbkRpZ2l0cyA9IGdldEZyYWN0aW9uRGlnaXRzKG9wdGlvbnMuY3VycmVuY3kpO1xuICB9XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhpbXVtRnJhY3Rpb25EaWdpdHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgb3B0aW9ucy5tYXhpbXVtRnJhY3Rpb25EaWdpdHMgPSBnZXRGcmFjdGlvbkRpZ2l0cyhvcHRpb25zLmN1cnJlbmN5KTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXROdW1iZXIobW9kZWxWYWx1ZSwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjdXJyZW5jeVxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0Q3VycmVuY3lMYWJlbChjdXJyZW5jeSwgbG9jYWxlKSB7XG4gIGlmIChjdXJyZW5jeSA9PT0gJycpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZUN1cnJlbmN5TGFiZWwoY3VycmVuY3ksIGxvY2FsZSk7XG59XG4iLCJpbXBvcnQgeyBsb2NhbGl6ZSB9IGZyb20gJy4uL2xvY2FsaXplLmpzJztcbmltcG9ydCB7IGdldExvY2FsZSB9IGZyb20gJy4uL3V0aWxzL2dldExvY2FsZS5qcyc7XG5pbXBvcnQgeyBmb3JtYXROdW1iZXJUb1BhcnRzIH0gZnJvbSAnLi9mb3JtYXROdW1iZXJUb1BhcnRzLmpzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzL0xvY2FsaXplTWl4aW5UeXBlcycpLk51bWJlclBvc3RQcm9jZXNzb3J9IE51bWJlclBvc3RQcm9jZXNzb3IgKi9cblxuLyoqXG4gKiBGb3JtYXRzIGEgbnVtYmVyIGJhc2VkIG9uIGxvY2FsZSBhbmQgb3B0aW9ucy4gSXQgdXNlcyBJbnRsIGZvciB0aGUgZm9ybWF0dGluZy5cbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9Mb2NhbGl6ZU1peGluVHlwZXMnKS5Gb3JtYXROdW1iZXJQYXJ0fSBGb3JtYXROdW1iZXJQYXJ0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAbGlvbi9sb2NhbGl6ZS90eXBlcy9Mb2NhbGl6ZU1peGluVHlwZXMnKS5Gb3JtYXROdW1iZXJPcHRpb25zfSBGb3JtYXRPcHRpb25zXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIE51bWJlciB0byBiZSBmb3JtYXR0ZWRcbiAqIEBwYXJhbSB7Rm9ybWF0T3B0aW9uc30gW29wdGlvbnNdIEludGwgb3B0aW9ucyBhcmUgYXZhaWxhYmxlIGV4dGVuZGVkIGJ5IHJvdW5kTW9kZSBhbmQgcmV0dXJuSWZOYU5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtYmVyLCBvcHRpb25zID0gLyoqIEB0eXBlIHtGb3JtYXRPcHRpb25zfSAqLyAoe30pKSB7XG4gIGlmIChudW1iZXIgPT09IHVuZGVmaW5lZCB8fCBudW1iZXIgPT09IG51bGwpIHJldHVybiAnJztcbiAgY29uc3QgZm9ybWF0dGVkVG9QYXJ0cyA9IGZvcm1hdE51bWJlclRvUGFydHMobnVtYmVyLCBvcHRpb25zKTtcbiAgLy8gSWYgbnVtYmVyIGlzIG5vdCBhIG51bWJlclxuICBpZiAoXG4gICAgZm9ybWF0dGVkVG9QYXJ0cyA9PT0gb3B0aW9ucy5yZXR1cm5JZk5hTiB8fFxuICAgIGZvcm1hdHRlZFRvUGFydHMgPT09IGxvY2FsaXplLmZvcm1hdE51bWJlck9wdGlvbnMucmV0dXJuSWZOYU5cbiAgKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoZm9ybWF0dGVkVG9QYXJ0cyk7XG4gIH1cbiAgbGV0IHByaW50TnVtYmVyT2ZQYXJ0cyA9ICcnO1xuICAvLyB1cGRhdGUgbnVtYmVyT2ZQYXJ0cyBiZWNhdXNlIHRoZXJlIG1heSBiZSBzb21lIHBhcnRzIGFkZGVkXG4gIGNvbnN0IG51bWJlck9mUGFydHMgPSBmb3JtYXR0ZWRUb1BhcnRzICYmIGZvcm1hdHRlZFRvUGFydHMubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mUGFydHM7IGkgKz0gMSkge1xuICAgIGNvbnN0IHBhcnQgPSAvKiogQHR5cGUge0Zvcm1hdE51bWJlclBhcnR9ICovIChmb3JtYXR0ZWRUb1BhcnRzW2ldKTtcbiAgICBwcmludE51bWJlck9mUGFydHMgKz0gcGFydC52YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IGNvbXB1dGVkTG9jYWxlID0gZ2V0TG9jYWxlKG9wdGlvbnMgJiYgb3B0aW9ucy5sb2NhbGUpO1xuXG4gIGlmIChsb2NhbGl6ZS5mb3JtYXROdW1iZXJPcHRpb25zLnBvc3RQcm9jZXNzb3JzLnNpemUgPiAwKSB7XG4gICAgQXJyYXkuZnJvbShsb2NhbGl6ZS5mb3JtYXROdW1iZXJPcHRpb25zLnBvc3RQcm9jZXNzb3JzKS5mb3JFYWNoKChbbG9jYWxlLCBmbl0pID0+IHtcbiAgICAgIGlmIChsb2NhbGUgPT09IGNvbXB1dGVkTG9jYWxlKSB7XG4gICAgICAgIHByaW50TnVtYmVyT2ZQYXJ0cyA9IGZuKHByaW50TnVtYmVyT2ZQYXJ0cyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5wb3N0UHJvY2Vzc29ycyAmJiBvcHRpb25zLnBvc3RQcm9jZXNzb3JzLnNpemUgPiAwKSB7XG4gICAgQXJyYXkuZnJvbShvcHRpb25zLnBvc3RQcm9jZXNzb3JzKS5mb3JFYWNoKChbbG9jYWxlLCBmbl0pID0+IHtcbiAgICAgIGlmIChsb2NhbGUgPT09IGNvbXB1dGVkTG9jYWxlKSB7XG4gICAgICAgIHByaW50TnVtYmVyT2ZQYXJ0cyA9IGZuKHByaW50TnVtYmVyT2ZQYXJ0cyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcHJpbnROdW1iZXJPZlBhcnRzO1xufVxuIiwiaW1wb3J0IHsgcGFyc2VOdW1iZXIsIGdldEZyYWN0aW9uRGlnaXRzIH0gZnJvbSAnQGxpb24vbG9jYWxpemUnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BsaW9uL2xvY2FsaXplL3R5cGVzL0xvY2FsaXplTWl4aW5UeXBlcycpLkZvcm1hdE51bWJlck9wdGlvbnN9IEZvcm1hdE9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIFJvdW5kaW5nIHByb2JsZW0gY2FuIGJlIGF2b2lkZWQgYnkgdXNpbmcgbnVtYmVycyByZXByZXNlbnRlZCBpbiBleHBvbmVudGlhbCBub3RhdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIHRvIGJlIHJvdW5kZWQgdXBcbiAqIEBwYXJhbSB7bnVtYmVyIHwgdW5kZWZpbmVkfSBkZWNpbWFscyBhbW91bnQgb2YgZGVjaW1hbHMgdG8ga2VlcFxuICogQHJldHVybiB7bnVtYmVyfSBuZXcgdmFsdWUgd2l0aCByb3VuZGVkIHVwIGRlY2ltYWxzXG4gKi9cbmZ1bmN0aW9uIHJvdW5kKHZhbHVlLCBkZWNpbWFscykge1xuICBpZiAodHlwZW9mIGRlY2ltYWxzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBOdW1iZXIodmFsdWUpO1xuICB9XG4gIHJldHVybiBOdW1iZXIoYCR7TWF0aC5yb3VuZChOdW1iZXIoYCR7dmFsdWV9ZSR7ZGVjaW1hbHN9YCkpfWUtJHtkZWNpbWFsc31gKTtcbn1cblxuLyoqXG4gKiBVc2VzIGBwYXJzZU51bWJlcigpYCB0byBwYXJzZXMgYSBudW1iZXIgc3RyaW5nIGFuZCByZXR1cm5zIHRoZSBiZXN0IHBvc3NpYmxlIGphdmFzY3JpcHQgbnVtYmVyLlxuICogUm91bmRzIHVwIHRoZSBudW1iZXIgd2l0aCB0aGUgY29ycmVjdCBhbW91bnQgb2YgZGVjaW1hbHMgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW5jeS5cbiAqXG4gKiBAZXhhbXBsZVxuICogcGFyc2VBbW91bnQoJzEsMjM0LjU2Jywge2N1cnJlbmN5OiAnRVVSJ30pOyA9PiAxMjM0LjU2XG4gKiBwYXJzZUFtb3VudCgnMSwyMzQuNTYnLCB7Y3VycmVuY3k6ICdKUFknfSk7ID0+IDEyMzVcbiAqIHBhcnNlQW1vdW50KCcxLDIzNC41NicsIHtjdXJyZW5jeTogJ0pPRCd9KTsgPT4gMTIzNC41NjBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgTnVtYmVyIHRvIGJlIHBhcnNlZFxuICogQHBhcmFtIHtGb3JtYXRPcHRpb25zfSBbZ2l2ZW5PcHRpb25zXSBMb2NhbGUgT3B0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBbW91bnQodmFsdWUsIGdpdmVuT3B0aW9ucykge1xuICBjb25zdCBudW1iZXIgPSBwYXJzZU51bWJlcih2YWx1ZSwgZ2l2ZW5PcHRpb25zKTtcblxuICBpZiAodHlwZW9mIG51bWJlciAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgLyoqIEB0eXBlIHtGb3JtYXRPcHRpb25zfSAqL1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIC4uLmdpdmVuT3B0aW9ucyxcbiAgfTtcblxuICBpZiAob3B0aW9ucy5jdXJyZW5jeSAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhpbXVtRnJhY3Rpb25EaWdpdHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgb3B0aW9ucy5tYXhpbXVtRnJhY3Rpb25EaWdpdHMgPSBnZXRGcmFjdGlvbkRpZ2l0cyhvcHRpb25zLmN1cnJlbmN5KTtcbiAgfVxuICByZXR1cm4gcm91bmQobnVtYmVyLCBvcHRpb25zLm1heGltdW1GcmFjdGlvbkRpZ2l0cyk7XG59XG4iLCJpbXBvcnQgeyBnZXREZWNpbWFsU2VwYXJhdG9yIH0gZnJvbSAnLi9nZXREZWNpbWFsU2VwYXJhdG9yLmpzJztcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgdG8gZXZhbHVhdGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdmFsdWUgZXF1YWwgLiBvciAsXG4gKi9cbmZ1bmN0aW9uIGlzRGVjaW1hbFNlcGFyYXRvcih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09ICcuJyB8fCB2YWx1ZSA9PT0gJywnO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgdGhlIGJlc3QgcG9zc2libGUgcGFyc2luZyBtb2RlLlxuICpcbiAqIC0gSWYgdGhlcmUgaXMgb25seSBvbmUgc2VwYXJhdG9yICh3aXRoTG9jYWxlKVxuICogLSAxLDIzID0+IHh4eDEuMjMgKGhldXJpc3RpYylcbiAqIC0gZWxzZSBwYXJzZSBtb2RlIGRlcGVuZHMgbW9zdGx5IG9uIHRoZSBsYXN0IDQgY2hhcnNcbiAqIC0gMTIzNCA9PiB4eHgxMjM0IChoZXVyaXN0aWMpXG4gKiAtIFtzcGFjZV0xMjMgPT4geHh4MTIzIChoZXVyaXN0aWMpXG4gKiAtICwxMjMgPT4gdW5jbGVhclxuICogICAtIGlmIDEuMDAwLDEyMyAod2UgZmluZCBhIGRpZmZlcmVudCBzZXBhcmF0b3IpID0+IDEwMDAuMTIzIChoZXVyaXN0aWMpXG4gKiAgIC0gaWYgMSwwMDAsMTIzICh3ZSBmaW5kIG9ubHkgc2FtZSBzZXBhcmF0b3JzKSA9PiAxMDAwMTIzICh1bnBhcnNlYWJsZSlcbiAqICAgLSBpZiAxMDAsMTIzICh3ZSBmaW5kIG5vIG1vcmUgc2VwYXJhdG9ycykgPT4gdW5jbGVhclxuICogICAgIC0gaWYgZW4gPT4gMTAwMTIzICh3aXRoTG9jYWxlKVxuICogICAgIC0gaWYgbmwgPT4gMTAwLjEyMyAod2l0aExvY2FsZSlcbiAqXG4gKiBTZWUgYWxzbyB7QGxpbmsgcGFyc2VBbW91bnR9XG4gKlxuICogQGV4YW1wbGVcbiAqIGdldFBhcnNlTW9kZSgnMS4yMzQnKSA9PiAnd2l0aExvY2FsZSdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgQ2xlYW4gbnVtYmVyIChvbmx5IFswLTkgLC5dKSB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm4ge3N0cmluZ30gdW5wYXJzZWFibGV8d2l0aExvY2FsZXxoZXVyaXN0aWNcbiAqL1xuZnVuY3Rpb24gZ2V0UGFyc2VNb2RlKHZhbHVlLCB7IG1vZGUgPSAnYXV0bycgfSA9IHt9KSB7XG4gIGNvbnN0IHNlcGFyYXRvcnMgPSB2YWx1ZS5tYXRjaCgvWy4sIF0vZyk7XG5cbiAgaWYgKG1vZGUgPT09ICdhdXRvJyAmJiBzZXBhcmF0b3JzICYmIHNlcGFyYXRvcnMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuICd3aXRoTG9jYWxlJztcbiAgfVxuXG4gIGlmICh2YWx1ZS5sZW5ndGggPiA0KSB7XG4gICAgY29uc3QgY2hhckF0TGFzdFNlcGFyYXRvclBvc2l0aW9uID0gdmFsdWVbdmFsdWUubGVuZ3RoIC0gNF07XG4gICAgaWYgKGlzRGVjaW1hbFNlcGFyYXRvcihjaGFyQXRMYXN0U2VwYXJhdG9yUG9zaXRpb24pKSB7XG4gICAgICBjb25zdCBmaXJzdFBhcnQgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgdmFsdWUubGVuZ3RoIC0gNCk7XG4gICAgICBjb25zdCBvdGhlclNlcGFyYXRvcnMgPSBmaXJzdFBhcnQubWF0Y2goL1suLCBdL2cpO1xuICAgICAgaWYgKG90aGVyU2VwYXJhdG9ycykge1xuICAgICAgICBjb25zdCBsYXN0U2VwYXJhdG9yID0gY2hhckF0TGFzdFNlcGFyYXRvclBvc2l0aW9uO1xuICAgICAgICByZXR1cm4gb3RoZXJTZXBhcmF0b3JzLmluZGV4T2YobGFzdFNlcGFyYXRvcikgPT09IC0xID8gJ2hldXJpc3RpYycgOiAndW5wYXJzZWFibGUnO1xuICAgICAgfVxuICAgICAgcmV0dXJuICd3aXRoTG9jYWxlJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICdoZXVyaXN0aWMnO1xufVxuXG4vKipcbiAqIFBhcnNlcyBudW1iZXJzIGJ5IGNvbnNpZGVyaW5nIHRoZSBsb2NhbGUuXG4gKiBVc2VmdWwgZm9yIG51bWJlcnMgd2l0aCBhbiBlbmRpbmcgcGFpciBvZiAzIG51bWJlciBjaGFycyBhcyBpbiB0aGlzIGNhc2UgeW91IGNhbiBub3QgYmVcbiAqIGNlcnRhaW4gaWYgaXQgaXMgYSBncm91cCBvciBjb21tYSBzZXBhcmF0b3IuIGUuZy4gMS4yMzQ7IDEsMjM0OyAxMjM0LjU2NztcbiAqIFRha2luZyBpbnRvIGNvbnNpZGVyYXRpb24gdGhlIGxvY2FsZSB3ZSBtYWtlIHRoZSBiZXN0IHBvc3NpYmxlIGFzc3VtcHRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIHBhcnNlV2l0aExvY2FsZSgnMS4yMzQnLCB7IGxvY2FsZTogJ2VuLUdCJyB9KSA9PiAxLjIzNFxuICogcGFyc2VXaXRoTG9jYWxlKCcxLDIzNCcsIHsgbG9jYWxlOiAnZW4tR0InIH0pID0+IDEyMzRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgTnVtYmVyIHRvIGJlIHBhcnNlZFxuICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL3R5cGVzL0xvY2FsaXplTWl4aW5UeXBlcycpLkZvcm1hdE51bWJlck9wdGlvbnN9IG9wdGlvbnMgTG9jYWxlIE9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VXaXRoTG9jYWxlKHZhbHVlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGxvY2FsZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5sb2NhbGUgPyBvcHRpb25zLmxvY2FsZSA6IHVuZGVmaW5lZDtcbiAgY29uc3Qgc2VwYXJhdG9yID0gZ2V0RGVjaW1hbFNlcGFyYXRvcihsb2NhbGUsIG9wdGlvbnMpO1xuICBjb25zdCByZWdleE51bWJlckFuZExvY2FsZVNlcGFyYXRvciA9IG5ldyBSZWdFeHAoYFswLTkke3NlcGFyYXRvcn0tXWAsICdnJyk7XG4gIGxldCBudW1iZXJBbmRMb2NhbGVTZXBhcmF0b3IgPSB2YWx1ZS5tYXRjaChyZWdleE51bWJlckFuZExvY2FsZVNlcGFyYXRvcik/LmpvaW4oJycpO1xuICBpZiAoc2VwYXJhdG9yID09PSAnLCcpIHtcbiAgICBudW1iZXJBbmRMb2NhbGVTZXBhcmF0b3IgPSBudW1iZXJBbmRMb2NhbGVTZXBhcmF0b3I/LnJlcGxhY2UoJywnLCAnLicpO1xuICB9XG4gIGlmICghbnVtYmVyQW5kTG9jYWxlU2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICByZXR1cm4gcGFyc2VGbG9hdChudW1iZXJBbmRMb2NhbGVTZXBhcmF0b3IpO1xufVxuXG4vKipcbiAqIFBhcnNlcyBudW1iZXJzIGJ5IGNvbnNpZGVyaW5nIGFsbCBzZXBhcmF0b3JzLlxuICogSXQgb25seSBrZWVwcyB0aGUgbGFzdCBzZXBhcmF0b3IgYW5kIHVzZXMgaXQgYXMgZGVjaW1hbCBzZXBhcmF0b3IuXG4gKlxuICogV2FybmluZzogVGhpcyBmdW5jdGlvbiB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyB0aGF0IGNhbiBiZSBoZXVyaXN0aWNhbGx5IHBhcnNlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgTnVtYmVyIHRoYXQgY2FuIGJlIGhldXJpc3RpY2FsbHkgcGFyc2VkXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHBhcnNlZCBqYXZhc2NyaXB0IG51bWJlclxuICovXG5mdW5jdGlvbiBwYXJzZUhldXJpc3RpYyh2YWx1ZSkge1xuICBpZiAodmFsdWUubWF0Y2goL1swLTkuLCBdL2cpKSB7XG4gICAgLy8gMS4gcHV0IHBsYWNlaG9sZGVyIGF0IGRlY2ltYWwgc2VwYXJhdG9yXG4gICAgY29uc3QgbnVtYmVyU3RyaW5nID0gdmFsdWVcbiAgICAgIC5yZXBsYWNlKC8oLHxcXC4pKFteLHwuXSopJC9nLCAnX2RlY1NlcF8kMicpXG4gICAgICAucmVwbGFjZSgvKCx8XFwufCApL2csICcnKSAvLyAyLiByZW1vdmUgYWxsIGdyb3VwIHNlcGFyYXRvcnNcbiAgICAgIC5yZXBsYWNlKC9fZGVjU2VwXy8sICcuJyk7IC8vIDMuIHJlc3RvcmUgZGVjaW1hbCBzZXBhcmF0b3JcbiAgICByZXR1cm4gcGFyc2VGbG9hdChudW1iZXJTdHJpbmcpO1xuICB9XG4gIHJldHVybiAwO1xufVxuXG4vKipcbiAqIFBhcnNlcyBhIG51bWJlciBzdHJpbmcgYW5kIHJldHVybnMgdGhlIGJlc3QgcG9zc2libGUgamF2YXNjcmlwdCBudW1iZXIuXG4gKiBGb3IgZWRnZSBjYXNlcyBpdCBtYXkgdXNlIGxvY2FsZSB0byBnaXZlIHRoZSBiZXN0IHBvc3NpYmxlIGFzc3VtcHRpb24uXG4gKlxuICogSXQgaGFzIDMgXCJtZXRob2RzXCIgb2YgcmV0dXJuaW5nIG51bWJlcnNcbiAqIC0gJ3VucGFyc2VhYmxlJzogYmVjb21lcyBqdXN0IG51bWJlcnNcbiAqIC0gJ3dpdGhMb2NhbGUnOiByZXN1bHQgZGVwZW5kcyBvbiBnaXZlbiBvciBnbG9iYWwgbG9jYWxlXG4gKiAtICdoZXVyaXN0aWMnOiByZXN1bHQgZGVwZW5kcyBvbiBjb25zaWRlcmluZyBzZXBhcmF0b3JzXG4gKlxuICogQGV4YW1wbGVcbiAqIHBhcnNlTnVtYmVyKCcxLjIzNC41NjcnKTsgLy8gbWV0aG9kOiB1bnBhcnNlYWJsZSA9PiAxMjM0NTY3XG4gKiBwYXJzZU51bWJlcignMS4yMzQnKTsgLy8gbWV0aG9kOiB3aXRoTG9jYWxlID0+IGRlcGVuZGluZyBvbiBsb2NhbGUgMTIzNCBvciAxLjIzNFxuICogcGFyc2VOdW1iZXIoJzEuMjM0LDU2Jyk7IC8vIG1ldGhvZDogaGV1cmlzdGljID0+IDEyMzQuNTZcbiAqIHBhcnNlTnVtYmVyKCcxIDIzNC41NicpOyAvLyBtZXRob2Q6IGhldXJpc3RpYyA9PiAxMjM0LjU2XG4gKiBwYXJzZU51bWJlcignMSwyMzQuNTYnKTsgLy8gbWV0aG9kOiBoZXVyaXN0aWMgPT4gMTIzNC41NlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBOdW1iZXIgdG8gYmUgcGFyc2VkXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vdHlwZXMvTG9jYWxpemVNaXhpblR5cGVzJykuRm9ybWF0TnVtYmVyT3B0aW9uc30gW29wdGlvbnNdIExvY2FsZSBPcHRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU51bWJlcih2YWx1ZSwgb3B0aW9ucykge1xuICBjb25zdCBjb250YWluc051bWJlcnMgPSB2YWx1ZS5tYXRjaCgvXFxkL2cpO1xuICBpZiAoIWNvbnRhaW5zTnVtYmVycykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgY29uc3QgbWF0Y2hlZElucHV0ID0gdmFsdWUubWF0Y2goL1swLTksLlxcLSBdL2cpO1xuICBpZiAoIW1hdGNoZWRJbnB1dCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgY29uc3QgY2xlYW5lZElucHV0ID0gbWF0Y2hlZElucHV0LmpvaW4oJycpO1xuICBjb25zdCBwYXJzZU1vZGUgPSBnZXRQYXJzZU1vZGUoY2xlYW5lZElucHV0LCBvcHRpb25zKTtcbiAgc3dpdGNoIChwYXJzZU1vZGUpIHtcbiAgICBjYXNlICd1bnBhcnNlYWJsZSc6IHtcbiAgICAgIGNvbnN0IGNsZWFuZWRJbnB1dE1hdGNoU3RyID0gY2xlYW5lZElucHV0Lm1hdGNoKC9bMC05XS9nKT8uam9pbignJyk7XG4gICAgICBpZiAoIWNsZWFuZWRJbnB1dE1hdGNoU3RyKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChjbGVhbmVkSW5wdXRNYXRjaFN0cik7XG4gICAgfVxuICAgIGNhc2UgJ3dpdGhMb2NhbGUnOlxuICAgICAgcmV0dXJuIHBhcnNlV2l0aExvY2FsZShjbGVhbmVkSW5wdXQsIG9wdGlvbnMgfHwge30pO1xuICAgIGNhc2UgJ2hldXJpc3RpYyc6XG4gICAgICByZXR1cm4gcGFyc2VIZXVyaXN0aWMoY2xlYW5lZElucHV0KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDA7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ0BsaW9uL2NvcmUnO1xuaW1wb3J0IHsgTGlvbklucHV0IH0gZnJvbSAnQGxpb24vaW5wdXQnO1xuaW1wb3J0IHsgZ2V0Q3VycmVuY3lOYW1lLCBsb2NhbGl6ZSwgTG9jYWxpemVNaXhpbiB9IGZyb20gJ0BsaW9uL2xvY2FsaXplJztcbmltcG9ydCB7IElzTnVtYmVyIH0gZnJvbSAnQGxpb24vZm9ybS1jb3JlJztcbmltcG9ydCB7IGZvcm1hdEFtb3VudCwgZm9ybWF0Q3VycmVuY3lMYWJlbCB9IGZyb20gJy4vZm9ybWF0dGVycy5qcyc7XG5pbXBvcnQgeyBwYXJzZUFtb3VudCB9IGZyb20gJy4vcGFyc2Vycy5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnQGxpb24vZm9ybS1jb3JlL3R5cGVzL0Zvcm1hdE1peGluVHlwZXMnKS5Gb3JtYXRPcHRpb25zfSBGb3JtYXRPcHRpb25zXG4gKiBAdHlwZWRlZiB7Rm9ybWF0T3B0aW9ucyAmIHtsb2NhbGU/OnN0cmluZztjdXJyZW5jeTpzdHJpbmd8dW5kZWZpbmVkfX0gQW1vdW50Rm9ybWF0T3B0aW9uc1xuICovXG5cbi8qKlxuICogYExpb25JbnB1dEFtb3VudGAgaXMgYSBjbGFzcyBmb3IgYW4gYW1vdW50IGN1c3RvbSBmb3JtIGVsZW1lbnQgKGA8bGlvbi1pbnB1dC1hbW91bnQ+YCkuXG4gKlxuICogQGN1c3RvbUVsZW1lbnQgbGlvbi1pbnB1dC1hbW91bnRcbiAqL1xuZXhwb3J0IGNsYXNzIExpb25JbnB1dEFtb3VudCBleHRlbmRzIExvY2FsaXplTWl4aW4oTGlvbklucHV0KSB7XG4gIC8qKiBAdHlwZSB7YW55fSAqL1xuICBzdGF0aWMgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQGRlc2MgYW4gaXNvIGNvZGUgbGlrZSAnRVVSJyBvciAnVVNEJyB0aGF0IHdpbGwgYmUgZGlzcGxheWVkIG5leHQgdG8gdGhlIGlucHV0XG4gICAgICAgKiBhbmQgZnJvbSB3aGljaCBhbiBhY2Nlc3NpYmxlIGxhYmVsIChsaWtlICdldXJvcycpIGlzIGNvbXB1dGVkIGZvciBzY3JlZW5cbiAgICAgICAqIHJlYWRlciB1c2Vyc1xuICAgICAgICovXG4gICAgICBjdXJyZW5jeTogU3RyaW5nLFxuICAgICAgLyoqXG4gICAgICAgKiBAZGVzYyB0aGUgbW9kZWxWYWx1ZSBvZiB0aGUgaW5wdXQtYW1vdW50IGhhcyB0aGUgJ051bWJlcicgdHlwZS4gVGhpcyBhbGxvd3NcbiAgICAgICAqIEFwcGxpY2F0aW9uIERldmVsb3BlcnMgdG8gZWFzaWx5IHJlYWQgZnJvbSBhbmQgd3JpdGUgdG8gdGhpcyBpbnB1dCBvciB3cml0ZSBjdXN0b21cbiAgICAgICAqIHZhbGlkYXRvcnMuXG4gICAgICAgKi9cbiAgICAgIG1vZGVsVmFsdWU6IE51bWJlcixcbiAgICAgIGxvY2FsZTogeyBhdHRyaWJ1dGU6IGZhbHNlIH0sXG4gICAgfTtcbiAgfVxuXG4gIGdldCBzbG90cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uc3VwZXIuc2xvdHMsXG4gICAgICBhZnRlcjogKCkgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgLy8gVGhlIGRhdGEtbGFiZWwgYXR0cmlidXRlIHdpbGwgbWFrZSBzdXJlIHRoYXQgRm9ybUNvbnRyb2wgYWRkcyB0aGlzIHRvXG4gICAgICAgIC8vIGlucHV0W2FyaWEtbGFiZWxsZWRieV1cbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLWxhYmVsJywgJycpO1xuICAgICAgICBlbC50ZXh0Q29udGVudCA9IHRoaXMuX19jdXJyZW5jeUxhYmVsO1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgLi4uc3VwZXIuc3R5bGVzLFxuICAgICAgY3NzYFxuICAgICAgICAuaW5wdXQtZ3JvdXBfX2NvbnRhaW5lciA+IC5pbnB1dC1ncm91cF9faW5wdXQgOjpzbG90dGVkKC5mb3JtLWNvbnRyb2wpIHtcbiAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICAgICAgfVxuICAgICAgYCxcbiAgICBdO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnBhcnNlciA9IHBhcnNlQW1vdW50O1xuICAgIHRoaXMuZm9ybWF0dGVyID0gZm9ybWF0QW1vdW50O1xuICAgIC8qKiBAdHlwZSB7c3RyaW5nIHwgdW5kZWZpbmVkfSAqL1xuICAgIHRoaXMuY3VycmVuY3kgPSB1bmRlZmluZWQ7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmcgfCB1bmRlZmluZWR9ICovXG4gICAgdGhpcy5sb2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fX2N1cnJlbmN5RGlzcGxheU5vZGVJc0Nvbm5lY3RlZCA9IHRydWU7XG4gICAgdGhpcy5kZWZhdWx0VmFsaWRhdG9ycy5wdXNoKG5ldyBJc051bWJlcigpKTtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB3Yy9ndWFyZC1zdXBlci1jYWxsXG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLnR5cGUgPSAndGV4dCc7XG4gICAgdGhpcy5faW5wdXROb2RlLnNldEF0dHJpYnV0ZSgnaW5wdXRtb2RlJywgJ2RlY2ltYWwnKTtcblxuICAgIGlmICh0aGlzLmN1cnJlbmN5KSB7XG4gICAgICB0aGlzLl9fc2V0Q3VycmVuY3lEaXNwbGF5TGFiZWwoKTtcbiAgICB9XG4gIH1cblxuICAvKiogQHBhcmFtIHtpbXBvcnQoJ0BsaW9uL2NvcmUnKS5Qcm9wZXJ0eVZhbHVlcyB9IGNoYW5nZWRQcm9wZXJ0aWVzICovXG4gIHVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpIHtcbiAgICBzdXBlci51cGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKCdjdXJyZW5jeScpKSB7XG4gICAgICB0aGlzLl9vbkN1cnJlbmN5Q2hhbmdlZCh7IGN1cnJlbmN5OiB0aGlzLmN1cnJlbmN5IHx8IG51bGwgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnbG9jYWxlJykgJiYgdGhpcy5sb2NhbGUgIT09IGNoYW5nZWRQcm9wZXJ0aWVzLmdldCgnbG9jYWxlJykpIHtcbiAgICAgIGlmICh0aGlzLmxvY2FsZSkge1xuICAgICAgICAvKiogQHR5cGUge0Ftb3VudEZvcm1hdE9wdGlvbnN9ICovXG4gICAgICAgICh0aGlzLmZvcm1hdE9wdGlvbnMpLmxvY2FsZSA9IHRoaXMubG9jYWxlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlICgvKiogQHR5cGUge0Ftb3VudEZvcm1hdE9wdGlvbnN9ICovICh0aGlzLmZvcm1hdE9wdGlvbnMpLmxvY2FsZSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9fcmVmb3JtYXQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBvbiBjb25uZWN0aW5nIHNsb3QgbWl4aW4sIHdlIHNob3VsZCBjaGVjayBpZlxuICAgKiB0aGUgYWZ0ZXIgc2xvdCB3YXMgY3JlYXRlZCBieSB0aGUgc2xvdCBtaXhpbixcbiAgICogYW5kIGlmIHNvLCB3ZSBzaG91bGQgZXhlY3V0ZSB0aGUgY3VycmVuY3kgY2hhbmdlZCBmbG93XG4gICAqIHdoaWNoIGV2YWx1YXRlcyB3aGV0aGVyIHRoZSBzbG90IG5vZGUgc2hvdWxkIGJlXG4gICAqIHJlbW92ZWQgZm9yIGludmFsaWQgY3VycmVuY2llc1xuICAgKi9cbiAgX2Nvbm5lY3RTbG90TWl4aW4oKSB7XG4gICAgc3VwZXIuX2Nvbm5lY3RTbG90TWl4aW4oKTtcbiAgICBpZiAodGhpcy5faXNQcml2YXRlU2xvdCgnYWZ0ZXInKSkge1xuICAgICAgdGhpcy5fb25DdXJyZW5jeUNoYW5nZWQoeyBjdXJyZW5jeTogdGhpcy5jdXJyZW5jeSB8fCBudWxsIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3TG9jYWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvbGRMb2NhbGVcbiAgICogQGVuaGFuY2UgTG9jYWxpemVNaXhpblxuICAgKi9cbiAgb25Mb2NhbGVDaGFuZ2VkKG5ld0xvY2FsZSwgb2xkTG9jYWxlKSB7XG4gICAgc3VwZXIub25Mb2NhbGVDaGFuZ2VkKG5ld0xvY2FsZSwgb2xkTG9jYWxlKTtcbiAgICAvLyBJZiBsb2NhbGUgcHJvcGVydHkgaXMgdXNlZCwgbm8gbmVlZCB0byByZXNwb25kIHRvIGdsb2JhbCBsb2NhbGUgY2hhbmdlc1xuICAgIGlmICghdGhpcy5sb2NhbGUpIHtcbiAgICAgIHRoaXMuX19yZWZvcm1hdCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAZW5oYW5jZSBGb3JtYXRNaXhpbjogaW5zdGVhZCBvZiBvbmx5IGZvcm1hdHRpbmcgb24gYmx1ciwgYWxzbyBmb3JtYXQgd2hlbiBhIHVzZXIgcGFzdGVkXG4gICAqIGNvbnRlbnRcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3JlZmxlY3RCYWNrT24oKSB7XG4gICAgcmV0dXJuIHN1cGVyLl9yZWZsZWN0QmFja09uKCkgfHwgdGhpcy5faXNQYXN0aW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gICAqIEBwYXJhbSB7c3RyaW5nP30gb3B0cy5jdXJyZW5jeVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfb25DdXJyZW5jeUNoYW5nZWQoeyBjdXJyZW5jeSB9KSB7XG4gICAgaWYgKCF0aGlzLl9fY3VycmVuY3lEaXNwbGF5Tm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7QW1vdW50Rm9ybWF0T3B0aW9uc30gKi9cbiAgICAodGhpcy5mb3JtYXRPcHRpb25zKS5jdXJyZW5jeSA9IGN1cnJlbmN5IHx8IHVuZGVmaW5lZDtcbiAgICBpZiAoY3VycmVuY3kpIHtcbiAgICAgIGlmICghdGhpcy5fX2N1cnJlbmN5RGlzcGxheU5vZGVJc0Nvbm5lY3RlZCkge1xuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuX19jdXJyZW5jeURpc3BsYXlOb2RlKTtcbiAgICAgICAgdGhpcy5fX2N1cnJlbmN5RGlzcGxheU5vZGVJc0Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLl9fY3VycmVuY3lEaXNwbGF5Tm9kZS50ZXh0Q29udGVudCA9IHRoaXMuX19jdXJyZW5jeUxhYmVsO1xuXG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl9jYWxjdWxhdGVWYWx1ZXMoeyBzb3VyY2U6IG51bGwgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEluIGNhc2UgSW50bC5OdW1iZXJGb3JtYXQgZ2l2ZXMgZXJyb3IgZm9yIGludmFsaWQgY3VycmVuY3lcbiAgICAgICAgLy8gd2Ugc2hvdWxkIGNhdGNoLCByZW1vdmUgdGhlIG5vZGUsIGFuZCByZXRocm93IChzaW5jZSBpdCdzIHN0aWxsIGEgdXNlciBlcnJvcilcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSB7XG4gICAgICAgICAgdGhpcy5fX2N1cnJlbmN5RGlzcGxheU5vZGU/LnJlbW92ZSgpO1xuICAgICAgICAgIHRoaXMuX19jdXJyZW5jeURpc3BsYXlOb2RlSXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgICAgdGhpcy5fX3NldEN1cnJlbmN5RGlzcGxheUxhYmVsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX19jdXJyZW5jeURpc3BsYXlOb2RlPy5yZW1vdmUoKTtcbiAgICAgIHRoaXMuX19jdXJyZW5jeURpc3BsYXlOb2RlSXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgY3VycmVuY3kgZGlzcGxheSBub2RlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXQgX19jdXJyZW5jeURpc3BsYXlOb2RlKCkge1xuICAgIGNvbnN0IG5vZGUgPSBBcnJheS5mcm9tKHRoaXMuY2hpbGRyZW4pLmZpbmQoY2hpbGQgPT4gY2hpbGQuc2xvdCA9PT0gJ2FmdGVyJyk7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIHRoaXMuX19zdG9yZWRDdXJyZW5jeURpc3BsYXlOb2RlID0gbm9kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZSB8fCB0aGlzLl9fc3RvcmVkQ3VycmVuY3lEaXNwbGF5Tm9kZTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBfX3NldEN1cnJlbmN5RGlzcGxheUxhYmVsKCkge1xuICAgIC8vIFRPRE86IChAZXJpa2tyb2VzKSBmb3Igb3B0aW1hbCBhMTF5LCBhYmJyZXZpYXRpb25zIHNob3VsZCBiZSBwYXJ0IG9mIGFyaWEtbGFiZWxcbiAgICAvLyBleGFtcGxlLCBmb3IgYSBsYW5ndWFnZSBzd2l0Y2ggd2l0aCB0ZXh0ICdlbicsIGFuIGFyaWEtbGFiZWwgb2YgJ2VuZ2xpc2gnIGlzIG5vdFxuICAgIC8vIHN1ZmZpY2llbnQsIGl0IHNob3VsZCBhbHNvIGNvbnRhaW4gdGhlIGFiYnJldmlhdGlvbi5cbiAgICBpZiAodGhpcy5fX2N1cnJlbmN5RGlzcGxheU5vZGUpIHtcbiAgICAgIHRoaXMuX19jdXJyZW5jeURpc3BsYXlOb2RlLnNldEF0dHJpYnV0ZShcbiAgICAgICAgJ2FyaWEtbGFiZWwnLFxuICAgICAgICB0aGlzLmN1cnJlbmN5ID8gZ2V0Q3VycmVuY3lOYW1lKHRoaXMuY3VycmVuY3ksIHt9KSA6ICcnLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBnZXQgX19jdXJyZW5jeUxhYmVsKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbmN5ID8gZm9ybWF0Q3VycmVuY3lMYWJlbCh0aGlzLmN1cnJlbmN5LCBsb2NhbGl6ZS5sb2NhbGUpIDogJyc7XG4gIH1cblxuICBfX3JlZm9ybWF0KCkge1xuICAgIHRoaXMuZm9ybWF0dGVkVmFsdWUgPSB0aGlzLl9jYWxsRm9ybWF0dGVyKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGZvcm1hdE51bWJlclRvUGFydHMgfSBmcm9tICcuL2Zvcm1hdE51bWJlclRvUGFydHMuanMnO1xuaW1wb3J0IHsgbG9jYWxpemUgfSBmcm9tICcuLi9sb2NhbGl6ZS5qcyc7XG5pbXBvcnQgeyBmb3JjZUN1cnJlbmN5TmFtZUZvclBIUEVuR0IgfSBmcm9tICcuL3V0aWxzL25vcm1hbGl6ZS1nZXQtY3VycmVuY3ktbmFtZS9mb3JjZUN1cnJlbmN5TmFtZUZvclBIUEVuR0IuanMnO1xuXG4vKipcbiAqIEJhc2VkIG9uIG51bWJlciwgcmV0dXJucyBjdXJyZW5jeSBuYW1lIGxpa2UgJ1VTIGRvbGxhcidcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy9Mb2NhbGl6ZU1peGluVHlwZXMnKS5Gb3JtYXROdW1iZXJQYXJ0fSBGb3JtYXROdW1iZXJQYXJ0XG4gKiBAcGFyYW0ge3N0cmluZ30gY3VycmVuY3lJc28gaXNvIGNvZGUgbGlrZSBVU0RcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi8uLi90eXBlcy9Mb2NhbGl6ZU1peGluVHlwZXMnKS5Gb3JtYXROdW1iZXJPcHRpb25zfSBbb3B0aW9uc10gSW50bCBvcHRpb25zIGFyZSBhdmFpbGFibGUgZXh0ZW5kZWQgYnkgcm91bmRNb2RlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBjdXJyZW5jeSBuYW1lIGxpa2UgJ1VTIGRvbGxhcidcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbmN5TmFtZShjdXJyZW5jeUlzbywgb3B0aW9ucykge1xuICBjb25zdCBwYXJ0cyA9IC8qKiBAdHlwZSB7Rm9ybWF0TnVtYmVyUGFydFtdfSAqLyAoXG4gICAgZm9ybWF0TnVtYmVyVG9QYXJ0cygxLCB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgc3R5bGU6ICdjdXJyZW5jeScsXG4gICAgICBjdXJyZW5jeTogY3VycmVuY3lJc28sXG4gICAgICBjdXJyZW5jeURpc3BsYXk6ICduYW1lJyxcbiAgICB9KVxuICApO1xuICBsZXQgY3VycmVuY3lOYW1lID0gcGFydHNcbiAgICAuZmlsdGVyKHAgPT4gcC50eXBlID09PSAnY3VycmVuY3knKVxuICAgIC5tYXAobyA9PiBvLnZhbHVlKVxuICAgIC5qb2luKCcgJyk7XG4gIGNvbnN0IGxvY2FsZSA9IG9wdGlvbnM/LmxvY2FsZSB8fCBsb2NhbGl6ZS5sb2NhbGU7XG4gIGlmIChjdXJyZW5jeUlzbyA9PT0gJ1BIUCcgJiYgbG9jYWxlID09PSAnZW4tR0InKSB7XG4gICAgY3VycmVuY3lOYW1lID0gZm9yY2VDdXJyZW5jeU5hbWVGb3JQSFBFbkdCKGN1cnJlbmN5TmFtZSk7XG4gIH1cbiAgcmV0dXJuIGN1cnJlbmN5TmFtZTtcbn1cbiIsIi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbmN5TmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yY2VDdXJyZW5jeU5hbWVGb3JQSFBFbkdCKGN1cnJlbmN5TmFtZSkge1xuICBpZiAoY3VycmVuY3lOYW1lID09PSAnUGhpbGlwcGluZSBwZXNvcycpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBjdXJyZW5jeU5hbWUgPSAnUGhpbGlwcGluZSBwaXNvcyc7XG4gIH1cbiAgcmV0dXJuIGN1cnJlbmN5TmFtZTtcbn1cbiIsIi8qKlxuICogRm9yIFR1cmtleSBmaXhlcyBjdXJyZW5jeSBsYWJlbCB3aXRoIGxvY2FsZSBvcHRpb25zXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbmN5XG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQ3VycmVuY3lMYWJlbChjdXJyZW5jeSwgbG9jYWxlKSB7XG4gIHJldHVybiBjdXJyZW5jeSA9PT0gJ1RSWScgJiYgbG9jYWxlID09PSAndHItVFInID8gJ1RMJyA6IGN1cnJlbmN5O1xufVxuIiwiaW1wb3J0IHsgTGlvbkZvcm0gfSBmcm9tIFwiQGxpb24vZm9ybVwiO1xuaW1wb3J0IHsgTGlvbklucHV0IH0gZnJvbSBcIkBsaW9uL2lucHV0XCI7XG5pbXBvcnQgeyBMaW9uT3B0aW9uLCBMaW9uT3B0aW9ucyB9IGZyb20nQGxpb24vc2VsZWN0LXJpY2gnO1xuaW1wb3J0IHsgTGlvblNlbGVjdCB9IGZyb20nQGxpb24vc2VsZWN0JztcbmltcG9ydCB7IExpb25JbnB1dFN0ZXBwZXIgfSBmcm9tIFwiQGxpb24vaW5wdXQtc3RlcHBlclwiO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgY3NzLCBDU1NSZXN1bHQgfSBmcm9tIFwibGl0XCI7XG5pbXBvcnQgeyBSZXF1aXJlZCBhcyBWYW5pbGxhUmVxdWlyZWQgfSBmcm9tIFwiQGxpb24vZm9ybS1jb3JlXCI7XG5pbXBvcnQgeyBMaW9uSW5wdXRBbW91bnQgfSBmcm9tICdAbGlvbi9pbnB1dC1hbW91bnQnO1xuaW1wb3J0IHsgaGVhZGVyU3R5bGVzLCBpbnRlcmFjdGl2ZUNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21tb24tc3R5bGVzXCI7XG5pbXBvcnQgeyBDU1NSZXN1bHRBcnJheSB9IGZyb20gXCJAbGlvbi9jb3JlXCI7XG5cbmNvbnN0IGZsZXhpZnlDc3M6IENTU1Jlc3VsdCA9XG4gICAgY3NzYFxuICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIDpob3N0ICoge1xuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBDYW4ndCBiZWxpZXZlIElORyB3b3VsZCBtYWtlIHNvbWV0aGluZyBzbyB1Z2x5ICovXG4gICAgICAgIC5pbnB1dC1ncm91cCxcbiAgICAgICAgLmZvcm0tZmllbGRfX2dyb3VwLXR3bywgXG4gICAgICAgIC5pbnB1dC1ncm91cF9fY29udGFpbmVyLCBcbiAgICAgICAgLmlucHV0LWdyb3VwX19pbnB1dCxcbiAgICAgICAgLmlucHV0LWdyb3VwX19pbnB1dCAqIHtcbiAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgIH1cbiAgICBgXG47XG5cbmV4cG9ydCBjb25zdCBmb3JtQ3NzQ29tbW9uID0gW1xuICAgIGhlYWRlclN0eWxlcyxcbiAgICBjc3NgXG4gICAgICAgIGthbmEtaW5wdXQsIGlucHV0LCBrYW5hLXNlbGVjdCB7XG4gICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5wdXQsIHNlbGVjdCB7XG4gICAgICAgICAgICBmb250LWZhbWlseTogc2FucztcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0IHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1mb3JlZ3JvdW5kLWNvbG9yKTtcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlucHV0OmZvY3VzIHtcbiAgICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAycHggdmFyKC0taGlnaGxpZ2h0ZWQtbGlnaHQtY29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLnNtYWxsLWlucHV0LCAuc21hbGwtaW5wdXQgKiB7XG4gICAgICAgICAgICBmbGV4OiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLnNtYWxsLWlucHV0IGlucHV0IHtcbiAgICAgICAgICAgIHdpZHRoOiA4cmVtO1xuICAgICAgICB9XG5cbiAgICAgICAgLmZvcm0tcm93IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBnYXA6IDFyZW07XG4gICAgICAgICAgICBtYXJnaW46IDEwcHggMDtcbiAgICAgICAgICAgIGZsZXgtZmxvdzogcm93IHdyYXA7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxlY3Qge1xuICAgICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDJyZW07XG4gICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1mb3JlZ3JvdW5kLWNvbG9yKTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgICAgICAgIGFwcGVhcmFuY2U6IG5vbmU7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBzZWxlY3Q6Zm9jdXMge1xuICAgICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDJweCB2YXIoLS1oaWdobGlnaHRlZC1saWdodC1jb2xvcik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGthbmEtYnV0dG9uLXN1Ym1pdCB7XG4gICAgICAgICAgICBtaW4td2lkdGg6IGZpdC1jb250ZW50O1xuICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xuICAgICAgICAgICAgbWluLWhlaWdodDogM3JlbTtcbiAgICAgICAgfVxuICAgIGAsXG4gICAgY3NzYFxuICAgICAgICAuZm9ybS1yb3cgbGlvbi12YWxpZGF0aW9uLWZlZWRiYWNrIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWhpZ2hsaWdodGVkLWxpZ2h0LWNvbG9yKTtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgbWF4LXdpZHRoOiAxMnJlbTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44cmVtO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuMjtcbiAgICAgICAgICAgIGJvdHRvbTogMnJlbTtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAtM3JlbTtcbiAgICAgICAgICAgIHdpZHRoOiBtYXgtY29udGVudDtcbiAgICAgICAgICAgIHotaW5kZXg6IDFcbiAgICAgICAgfVxuXG4gICAgICAgIC5mb3JtLXJvdyBsaW9uLXZhbGlkYXRpb24tZmVlZGJhY2s6bm90KFt0eXBlPVwiZXJyb3JcIl0pIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC5mb3JtLXJvdyBsaW9uLXZhbGlkYXRpb24tZmVlZGJhY2s6OmJlZm9yZSB7XG4gICAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIGJvdHRvbTogLTE4cHg7XG4gICAgICAgICAgICBsZWZ0OiAxMCU7XG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogLTEwcHg7XG4gICAgICAgICAgICBib3JkZXI6IDEwcHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICBib3JkZXItdG9wOiAxNXB4IHNvbGlkIHZhcigtLWhpZ2hsaWdodGVkLWxpZ2h0LWNvbG9yKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICBgXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gbWF4TGVuZ3RoUHJlcHJvY2Vzc29yKG1heExlbmd0aDogbnVtYmVyID0gSW5maW5pdHkpIHtcbiAgICByZXR1cm4gKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnNsaWNlKDAsIG1heExlbmd0aCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF4TnVtYmVyUHJlcHJvY2Vzc29yKG1heE51bWJlcjogYmlnaW50KSB7XG4gICAgcmV0dXJuICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGxldCBzYW5pdGl6ZWRWYWx1ZTogYmlnaW50ID0gQmlnSW50KHZhbHVlLnJlcGxhY2UoL1teMC05XS9nLCAnJykpO1xuICAgICAgICBpZiAoc2FuaXRpemVkVmFsdWUgPiBtYXhOdW1iZXIpIHtcbiAgICAgICAgICAgIHNhbml0aXplZFZhbHVlID0gbWF4TnVtYmVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzYW5pdGl6ZWRWYWx1ZS50b1N0cmluZygpO1xuICAgIH1cbn1cblxuXG5AY3VzdG9tRWxlbWVudChcImthbmEtZm9ybVwiKVxuZXhwb3J0IGNsYXNzIEthbmFGb3JtIGV4dGVuZHMgTGlvbkZvcm0ge1xuICAgIHN0YXRpYyBvdmVycmlkZSBnZXQgc3R5bGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgZmxleGlmeUNzcyxcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICA6OnNsb3R0ZWQoZm9ybSksIC5pbnB1dC1ncm91cCAqIHtcbiAgICAgICAgICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBgXG4gICAgICAgIF0gYXMgdW5rbm93biBhcyBDU1NSZXN1bHRBcnJheVxuICAgIH1cbn1cblxuQGN1c3RvbUVsZW1lbnQoXCJrYW5hLWlucHV0XCIpXG5leHBvcnQgY2xhc3MgS2FuYUlucHV0IGV4dGVuZHMgTGlvbklucHV0IHtcbiAgICBzdGF0aWMgb3ZlcnJpZGUgZ2V0IHN0eWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGZsZXhpZnlDc3NcbiAgICAgICAgXSBhcyB1bmtub3duIGFzIENTU1Jlc3VsdEFycmF5XG4gICAgfVxufVxuXG5AY3VzdG9tRWxlbWVudChcImthbmEtb3B0aW9uc1wiKVxuZXhwb3J0IGNsYXNzIEthbmFPcHRpb25zIGV4dGVuZHMgTGlvbk9wdGlvbnMge1xuICAgIHN0YXRpYyBvdmVycmlkZSBnZXQgc3R5bGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgZmxleGlmeUNzc1xuICAgICAgICBdIGFzIHVua25vd24gYXMgQ1NTUmVzdWx0QXJyYXlcbiAgICB9XG59XG5cbkBjdXN0b21FbGVtZW50KFwia2FuYS1vcHRpb25cIilcbmV4cG9ydCBjbGFzcyBLYW5hT3B0aW9uIGV4dGVuZHMgTGlvbk9wdGlvbiB7XG5cbn1cblxuQGN1c3RvbUVsZW1lbnQoXCJrYW5hLXNlbGVjdFwiKVxuZXhwb3J0IGNsYXNzIEthbmFTZWxlY3QgZXh0ZW5kcyBMaW9uU2VsZWN0IHtcbiAgICBzdGF0aWMgb3ZlcnJpZGUgZ2V0IHN0eWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDpob3N0OjphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICByaWdodDogMTBweDtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDVweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiA1cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci10b3A6IDdweCBzb2xpZCB2YXIoLS1mb3JlZ3JvdW5kLWNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgLFxuICAgICAgICAgICAgZmxleGlmeUNzc1xuICAgICAgICBdIGFzIHVua25vd24gYXMgQ1NTUmVzdWx0QXJyYXlcbiAgICB9XG59XG5cbkBjdXN0b21FbGVtZW50KFwia2FuYS1pbnB1dC1hbW91bnRcIilcbmV4cG9ydCBjbGFzcyBLYW5hSW5wdXRBbW91bnQgZXh0ZW5kcyBMaW9uSW5wdXRBbW91bnQge1xuICAgIHN0YXRpYyBvdmVycmlkZSBnZXQgc3R5bGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgZmxleGlmeUNzc1xuICAgICAgICBdXG4gICAgfVxufVxuXG4vLyBAdHMtaWdub3JlXG5AY3VzdG9tRWxlbWVudChcImthbmEtaW5wdXQtc3RlcHBlclwiKVxuZXhwb3J0IGNsYXNzIEthbmFJbnB1dFN0ZXBwZXIgZXh0ZW5kcyBMaW9uSW5wdXRTdGVwcGVyIHtcbiAgICBzdGF0aWMgb3ZlcnJpZGUgZ2V0IHN0eWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGZsZXhpZnlDc3NcbiAgICAgICAgXVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IFJlcXVpcmVkID0gKCgpID0+IHtcbiAgICBWYW5pbGxhUmVxdWlyZWQuZ2V0TWVzc2FnZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgcmV0dXJuIFwiUGxlYXNlLCBlbnRlciBhIHZhbHVlXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIFZhbmlsbGFSZXF1aXJlZDtcbn0pKCk7IiwiLyogZXNsaW50LWRpc2FibGUgbWF4LWNsYXNzZXMtcGVyLWZpbGUgKi9cbmltcG9ydCB7IFZhbGlkYXRvciB9IGZyb20gJy4uL1ZhbGlkYXRvci5qcyc7XG5cbi8qKlxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG5cbmV4cG9ydCBjbGFzcyBJc1N0cmluZyBleHRlbmRzIFZhbGlkYXRvciB7XG4gIHN0YXRpYyBnZXQgdmFsaWRhdG9yTmFtZSgpIHtcbiAgICByZXR1cm4gJ0lzU3RyaW5nJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICBleGVjdXRlKHZhbHVlKSB7XG4gICAgbGV0IGhhc0Vycm9yID0gZmFsc2U7XG4gICAgaWYgKCFpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0Vycm9yO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFcXVhbHNMZW5ndGggZXh0ZW5kcyBWYWxpZGF0b3Ige1xuICBzdGF0aWMgZ2V0IHZhbGlkYXRvck5hbWUoKSB7XG4gICAgcmV0dXJuICdFcXVhbHNMZW5ndGgnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICovXG4gIGV4ZWN1dGUodmFsdWUsIGxlbmd0aCA9IHRoaXMucGFyYW0pIHtcbiAgICBsZXQgaGFzRXJyb3IgPSBmYWxzZTtcbiAgICBpZiAoIWlzU3RyaW5nKHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggIT09IGxlbmd0aCkge1xuICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzRXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1pbkxlbmd0aCBleHRlbmRzIFZhbGlkYXRvciB7XG4gIHN0YXRpYyBnZXQgdmFsaWRhdG9yTmFtZSgpIHtcbiAgICByZXR1cm4gJ01pbkxlbmd0aCc7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgKi9cbiAgZXhlY3V0ZSh2YWx1ZSwgbWluID0gdGhpcy5wYXJhbSkge1xuICAgIGxldCBoYXNFcnJvciA9IGZhbHNlO1xuICAgIGlmICghaXNTdHJpbmcodmFsdWUpIHx8IHZhbHVlLmxlbmd0aCA8IG1pbikge1xuICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzRXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1heExlbmd0aCBleHRlbmRzIFZhbGlkYXRvciB7XG4gIHN0YXRpYyBnZXQgdmFsaWRhdG9yTmFtZSgpIHtcbiAgICByZXR1cm4gJ01heExlbmd0aCc7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgKi9cbiAgZXhlY3V0ZSh2YWx1ZSwgbWF4ID0gdGhpcy5wYXJhbSkge1xuICAgIGxldCBoYXNFcnJvciA9IGZhbHNlO1xuICAgIGlmICghaXNTdHJpbmcodmFsdWUpIHx8IHZhbHVlLmxlbmd0aCA+IG1heCkge1xuICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzRXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1pbk1heExlbmd0aCBleHRlbmRzIFZhbGlkYXRvciB7XG4gIHN0YXRpYyBnZXQgdmFsaWRhdG9yTmFtZSgpIHtcbiAgICByZXR1cm4gJ01pbk1heExlbmd0aCc7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgKi9cbiAgZXhlY3V0ZSh2YWx1ZSwgeyBtaW4gPSAwLCBtYXggPSAwIH0gPSB0aGlzLnBhcmFtKSB7XG4gICAgbGV0IGhhc0Vycm9yID0gZmFsc2U7XG4gICAgaWYgKCFpc1N0cmluZyh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoIDwgbWluIHx8IHZhbHVlLmxlbmd0aCA+IG1heCkge1xuICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzRXJyb3I7XG4gIH1cbn1cblxuY29uc3QgaXNFbWFpbFJlZ2V4ID1cbiAgL14oKFtePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXF0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xuZXhwb3J0IGNsYXNzIElzRW1haWwgZXh0ZW5kcyBWYWxpZGF0b3Ige1xuICBzdGF0aWMgZ2V0IHZhbGlkYXRvck5hbWUoKSB7XG4gICAgcmV0dXJuICdJc0VtYWlsJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICBleGVjdXRlKHZhbHVlKSB7XG4gICAgbGV0IGhhc0Vycm9yID0gZmFsc2U7XG4gICAgaWYgKCFpc1N0cmluZyh2YWx1ZSkgfHwgIWlzRW1haWxSZWdleC50ZXN0KHZhbHVlLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNFcnJvcjtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7P30gdmFsdWVcbiAqIEBwYXJhbSB7UmVnRXhwfSBwYXR0ZXJuXG4gKi9cbmNvbnN0IGhhc1BhdHRlcm4gPSAodmFsdWUsIHBhdHRlcm4pID0+IHBhdHRlcm4udGVzdCh2YWx1ZSk7XG5leHBvcnQgY2xhc3MgUGF0dGVybiBleHRlbmRzIFZhbGlkYXRvciB7XG4gIHN0YXRpYyBnZXQgdmFsaWRhdG9yTmFtZSgpIHtcbiAgICByZXR1cm4gJ1BhdHRlcm4nO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gIGV4ZWN1dGUodmFsdWUsIHBhdHRlcm4gPSB0aGlzLnBhcmFtKSB7XG4gICAgaWYgKCEocGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1Bzc3QuLi4gUGF0dGVybiB2YWxpZGF0b3IgZXhwZWN0cyBSZWdFeHAgb2JqZWN0IGFzIHBhcmFtZXRlciBlLmcsIG5ldyBQYXR0ZXJuKC8jTGlvblJvY2tzLykgb3IgbmV3IFBhdHRlcm4oUmVnRXhwKFwiI0xpb25Sb2Nrc1wiKScsXG4gICAgICApO1xuICAgIH1cbiAgICBsZXQgaGFzRXJyb3IgPSBmYWxzZTtcbiAgICBpZiAoIWlzU3RyaW5nKHZhbHVlKSB8fCAhaGFzUGF0dGVybih2YWx1ZSwgcGF0dGVybikpIHtcbiAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzRXJyb3I7XG4gIH1cbn1cbiIsIi8qKlxuICogQGRlc2MgTWFrZXMgc3VpdGFibGUgZm9yIGRhdGUgY29tcGFyaXNvbnNcbiAqIEBwYXJhbSB7RGF0ZX0gZGF0ZVxuICogQHJldHVybnMge0RhdGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVEYXRlVGltZShkYXRlKSB7XG4gIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpO1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbWF4LWNsYXNzZXMtcGVyLWZpbGUgKi9cbi8vIFRPRE86IG1vdmUgdG8gaW5wdXQtZGF0ZXBpY2tlcj9cbmltcG9ydCB7IG5vcm1hbGl6ZURhdGVUaW1lIH0gZnJvbSAnQGxpb24vbG9jYWxpemUnO1xuaW1wb3J0IHsgVmFsaWRhdG9yIH0gZnJvbSAnLi4vVmFsaWRhdG9yLmpzJztcblxuLyoqXG4gKiBAcGFyYW0gez99IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJyAmJiAhTnVtYmVyLmlzTmFOKHZhbHVlLmdldFRpbWUoKSlcbiAgKTtcbn1cblxuZXhwb3J0IGNsYXNzIElzRGF0ZSBleHRlbmRzIFZhbGlkYXRvciB7XG4gIHN0YXRpYyBnZXQgdmFsaWRhdG9yTmFtZSgpIHtcbiAgICByZXR1cm4gJ0lzRGF0ZSc7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgZXhlY3V0ZSh2YWx1ZSkge1xuICAgIGxldCBoYXNFcnJvciA9IGZhbHNlO1xuICAgIGlmICghaXNEYXRlKHZhbHVlKSkge1xuICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzRXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1pbkRhdGUgZXh0ZW5kcyBWYWxpZGF0b3Ige1xuICBzdGF0aWMgZ2V0IHZhbGlkYXRvck5hbWUoKSB7XG4gICAgcmV0dXJuICdNaW5EYXRlJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAqL1xuICBleGVjdXRlKHZhbHVlLCBtaW4gPSB0aGlzLnBhcmFtKSB7XG4gICAgbGV0IGhhc0Vycm9yID0gZmFsc2U7XG4gICAgaWYgKCFpc0RhdGUodmFsdWUpIHx8IG5vcm1hbGl6ZURhdGVUaW1lKHZhbHVlKSA8IG5vcm1hbGl6ZURhdGVUaW1lKG1pbikpIHtcbiAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0Vycm9yO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNYXhEYXRlIGV4dGVuZHMgVmFsaWRhdG9yIHtcbiAgc3RhdGljIGdldCB2YWxpZGF0b3JOYW1lKCkge1xuICAgIHJldHVybiAnTWF4RGF0ZSc7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgKi9cbiAgZXhlY3V0ZSh2YWx1ZSwgbWF4ID0gdGhpcy5wYXJhbSkge1xuICAgIGxldCBoYXNFcnJvciA9IGZhbHNlO1xuICAgIGlmICghaXNEYXRlKHZhbHVlKSB8fCBub3JtYWxpemVEYXRlVGltZSh2YWx1ZSkgPiBub3JtYWxpemVEYXRlVGltZShtYXgpKSB7XG4gICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNFcnJvcjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWluTWF4RGF0ZSBleHRlbmRzIFZhbGlkYXRvciB7XG4gIHN0YXRpYyBnZXQgdmFsaWRhdG9yTmFtZSgpIHtcbiAgICByZXR1cm4gJ01pbk1heERhdGUnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICovXG4gIGV4ZWN1dGUodmFsdWUsIHsgbWluID0gMCwgbWF4ID0gMCB9ID0gdGhpcy5wYXJhbSkge1xuICAgIGxldCBoYXNFcnJvciA9IGZhbHNlO1xuICAgIGlmIChcbiAgICAgICFpc0RhdGUodmFsdWUpIHx8XG4gICAgICBub3JtYWxpemVEYXRlVGltZSh2YWx1ZSkgPCBub3JtYWxpemVEYXRlVGltZShtaW4pIHx8XG4gICAgICBub3JtYWxpemVEYXRlVGltZSh2YWx1ZSkgPiBub3JtYWxpemVEYXRlVGltZShtYXgpXG4gICAgKSB7XG4gICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNFcnJvcjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSXNEYXRlRGlzYWJsZWQgZXh0ZW5kcyBWYWxpZGF0b3Ige1xuICBzdGF0aWMgZ2V0IHZhbGlkYXRvck5hbWUoKSB7XG4gICAgcmV0dXJuICdJc0RhdGVEaXNhYmxlZCc7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgKi9cbiAgZXhlY3V0ZSh2YWx1ZSwgaXNEaXNhYmxlZEZuID0gdGhpcy5wYXJhbSkge1xuICAgIGxldCBoYXNFcnJvciA9IGZhbHNlO1xuICAgIGlmICghaXNEYXRlKHZhbHVlKSB8fCBpc0Rpc2FibGVkRm4odmFsdWUpKSB7XG4gICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNFcnJvcjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUmVzdWx0VmFsaWRhdG9yIH0gZnJvbSAnLi4vUmVzdWx0VmFsaWRhdG9yLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9WYWxpZGF0b3InKS5WYWxpZGF0b3J9IFZhbGlkYXRvclxuICovXG5cbmV4cG9ydCBjbGFzcyBEZWZhdWx0U3VjY2VzcyBleHRlbmRzIFJlc3VsdFZhbGlkYXRvciB7XG4gIC8qKlxuICAgKiBAcGFyYW0gIHsuLi5hbnl9IGFyZ3NcbiAgICovXG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKTtcbiAgICB0aGlzLnR5cGUgPSAnc3VjY2Vzcyc7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAgICogQHBhcmFtIHtWYWxpZGF0b3JbXX0gY29udGV4dC5yZWd1bGFyVmFsaWRhdGlvblJlc3VsdFxuICAgKiBAcGFyYW0ge1ZhbGlkYXRvcltdfSBjb250ZXh0LnByZXZWYWxpZGF0aW9uUmVzdWx0XG4gICAqIEBwYXJhbSB7VmFsaWRhdG9yW119IGNvbnRleHQucHJldlNob3duVmFsaWRhdGlvblJlc3VsdFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gIGV4ZWN1dGVPblJlc3VsdHMoeyByZWd1bGFyVmFsaWRhdGlvblJlc3VsdCwgcHJldlNob3duVmFsaWRhdGlvblJlc3VsdCB9KSB7XG4gICAgY29uc3QgZXJyb3JPcldhcm5pbmcgPSAvKiogQHBhcmFtIHtWYWxpZGF0b3J9IHYgKi8gdiA9PlxuICAgICAgdi50eXBlID09PSAnZXJyb3InIHx8IHYudHlwZSA9PT0gJ3dhcm5pbmcnO1xuICAgIGNvbnN0IGhhc0Vycm9yT3JXYXJuaW5nID0gISFyZWd1bGFyVmFsaWRhdGlvblJlc3VsdC5maWx0ZXIoZXJyb3JPcldhcm5pbmcpLmxlbmd0aDtcbiAgICBjb25zdCBoYXNTaG93bkVycm9yT3JXYXJuaW5nID0gISFwcmV2U2hvd25WYWxpZGF0aW9uUmVzdWx0LmZpbHRlcihlcnJvck9yV2FybmluZykubGVuZ3RoO1xuXG4gICAgcmV0dXJuICFoYXNFcnJvck9yV2FybmluZyAmJiBoYXNTaG93bkVycm9yT3JXYXJuaW5nO1xuICB9XG59XG4iLCIvKiogQHR5cGUgeyh2YWx1ZTogYW55KSA9PiB2b2lkfSAqL1xubGV0IHJlc29sdmVMb2FkZWQ7XG5cbi8qKlxuICogLSBIYW5kbGVzIGxhenkgbG9hZGluZyBvZiB0aGUgKHJlbGF0aXZlbHkgbGFyZ2UpIGdvb2dsZS1saWJwaG9uZW51bWJlciBsaWJyYXJ5LCBhbGxvd2luZ1xuICogZm9yIHF1aWNrIGZpcnN0IHBhaW50c1xuICogLSBNYWludGFpbnMgb25lIGluc3RhbmNlIG9mIHBob25lTnVtYmVyVXRpbCB0aGF0IGNhbiBiZSBzaGFyZWQgYWNyb3NzIG11bHRpcGxlIHBsYWNlc1xuICogLSBBbGxvd3MgZm9yIGVhc3kgbW9ja2luZyBpbiB1bml0IHRlc3RzXG4gKi9cbmV4cG9ydCBjbGFzcyBQaG9uZVV0aWxNYW5hZ2VyIHtcbiAgc3RhdGljIGFzeW5jIGxvYWRMaWJQaG9uZU51bWJlcigpIHtcbiAgICBjb25zdCBQaG9uZVV0aWwgPSAoYXdhaXQgaW1wb3J0KCdhd2Vzb21lLXBob25lbnVtYmVyJykpLmRlZmF1bHQ7XG4gICAgdGhpcy5QaG9uZVV0aWwgPSBQaG9uZVV0aWw7XG4gICAgcmVzb2x2ZUxvYWRlZCh1bmRlZmluZWQpO1xuICAgIHJldHVybiBQaG9uZVV0aWw7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgZ29vZ2xlLWxpYnBob25lbnVtYmVyIGhhcyBiZWVuIGxvYWRlZFxuICAgKi9cbiAgc3RhdGljIGdldCBpc0xvYWRlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLlBob25lVXRpbCk7XG4gIH1cbn1cblxuLyoqXG4gKiBXYWl0IHRpbGwgZ29vZ2xlLWxpYnBob25lbnVtYmVyIGhhcyBiZWVuIGxvYWRlZFxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBhd2FpdCBQaG9uZVV0aWxNYW5hZ2VyLmxvYWRDb21wbGV0ZTtcbiAqIGBgYFxuICovXG5QaG9uZVV0aWxNYW5hZ2VyLmxvYWRDb21wbGV0ZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICByZXNvbHZlTG9hZGVkID0gcmVzb2x2ZTtcbn0pO1xuXG4vLyBpbml0aWFsaXplXG5QaG9uZVV0aWxNYW5hZ2VyLmxvYWRMaWJQaG9uZU51bWJlcigpO1xuIiwiaW1wb3J0IHsgVmFsaWRhdG9yIH0gZnJvbSAnQGxpb24vZm9ybS1jb3JlJztcbmltcG9ydCB7IFBob25lVXRpbE1hbmFnZXIgfSBmcm9tICcuL1Bob25lVXRpbE1hbmFnZXIuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzJykuUmVnaW9uQ29kZX0gUmVnaW9uQ29kZVxuICogQHR5cGVkZWYgeyogJiBpbXBvcnQoJ2F3ZXNvbWUtcGhvbmVudW1iZXInKS5kZWZhdWx0fSBBd2Vzb21lUGhvbmVOdW1iZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BsaW9uL2Zvcm0tY29yZS90eXBlcy92YWxpZGF0ZS92YWxpZGF0ZScpLkZlZWRiYWNrTWVzc2FnZURhdGF9IEZlZWRiYWNrTWVzc2FnZURhdGFcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbFZhbHVlXG4gKiBAcGFyYW0ge1JlZ2lvbkNvZGV9IHJlZ2lvbkNvZGVcbiAqIEByZXR1cm5zIHtmYWxzZXwnaW52YWxpZC1jb3VudHJ5LWNvZGUnfCd1bmtub3duJ3wndG9vLWxvbmcnfCd0b28tc2hvcnQnfVxuICovXG5mdW5jdGlvbiBoYXNGZWVkYmFjayhtb2RlbFZhbHVlLCByZWdpb25Db2RlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICBjb25zdCBQaG9uZU51bWJlciA9IC8qKiBAdHlwZSB7QXdlc29tZVBob25lTnVtYmVyfSAqLyAoUGhvbmVVdGlsTWFuYWdlci5QaG9uZVV0aWwpO1xuICBsZXQgaW52YWxpZENvdW50cnlDb2RlID0gZmFsc2U7XG5cbiAgaWYgKHJlZ2lvbkNvZGUgJiYgbW9kZWxWYWx1ZT8ubGVuZ3RoID49IDQgJiYgbW9kZWxWYWx1ZT8ubGVuZ3RoIDw9IDE2KSB7XG4gICAgbGV0IHBuO1xuICAgIHRyeSB7XG4gICAgICBwbiA9IFBob25lTnVtYmVyKG1vZGVsVmFsdWUsIHJlZ2lvbkNvZGUpO1xuICAgICAgaW52YWxpZENvdW50cnlDb2RlID0gcG4uZy5yZWdpb25Db2RlICE9PSByZWdpb25Db2RlO1xuICAgICAgaWYgKGludmFsaWRDb3VudHJ5Q29kZSkge1xuICAgICAgICByZXR1cm4gJ2ludmFsaWQtY291bnRyeS1jb2RlJztcbiAgICAgIH1cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKF8pIHt9XG4gICAgLy8gdG9vLXNob3J0L3Rvby1sb25nIGluZm8gc2VlbXMgdG8gYmUgbm90IHRoZXJlICh3ZSBnZXQgJ2lzLXBvc3NpYmxlJz8pXG4gICAgY29uc3QgZW51bVZhbHVlID0gIXBuLmlzVmFsaWQoKSA/IHBuLmcucG9zc2liaWxpdHkgOiBmYWxzZTtcbiAgICBpZiAoZW51bVZhbHVlID09PSAnaXMtcG9zc2libGUnKSB7XG4gICAgICByZXR1cm4gJ3Vua25vd24nO1xuICAgIH1cbiAgICByZXR1cm4gZW51bVZhbHVlO1xuICB9XG5cbiAgcmV0dXJuICd1bmtub3duJztcbn1cblxuZXhwb3J0IGNsYXNzIFBob25lTnVtYmVyIGV4dGVuZHMgVmFsaWRhdG9yIHtcbiAgc3RhdGljIHZhbGlkYXRvck5hbWUgPSAnUGhvbmVOdW1iZXInO1xuXG4gIHN0YXRpYyBnZXQgYXN5bmMoKSB7XG4gICAgLy8gV2lsbCBiZSBydW4gYXMgYXN5bmMgdGhlIGZpcnN0IHRpbWUgaWYgUGhvbmVVdGlsTWFuYWdlciBoYXNuJ3QgbG9hZGVkIHlldCwgc3luYyBhZnRlcndhcmRzXG4gICAgcmV0dXJuICFQaG9uZVV0aWxNYW5hZ2VyLmlzTG9hZGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbFZhbHVlIHRlbGVwaG9uZSBudW1iZXIgd2l0aG91dCBjb3VudHJ5IHByZWZpeFxuICAgKiBAcGFyYW0ge1JlZ2lvbkNvZGV9IHJlZ2lvbkNvZGVcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gIGV4ZWN1dGUobW9kZWxWYWx1ZSwgcmVnaW9uQ29kZSkge1xuICAgIGlmICghUGhvbmVVdGlsTWFuYWdlci5pc0xvYWRlZCkge1xuICAgICAgLy8gUmV0dXJuIGEgUHJvbWlzZSBvbmNlIG5vdCBsb2FkZWQgeWV0LiBTaW5jZSBhc3luYyBWYWxpZGF0b3JzIGFyZSBtZWFudCBmb3IgdGhpbmdzIGxpa2VcbiAgICAgIC8vIGxvYWRpbmcgc2VydmVyIHNpZGUgZGF0YSAoaW4gdGhpcyBjYXNlIGEgbGliKSwgd2UgY29udGludWUgYXMgYSBzeW5jIFZhbGlkYXRvciBvbmNlIGxvYWRlZFxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBQaG9uZVV0aWxNYW5hZ2VyLmxvYWRDb21wbGV0ZS50aGVuKCgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKGhhc0ZlZWRiYWNrKG1vZGVsVmFsdWUsIHJlZ2lvbkNvZGUpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0ZlZWRiYWNrKG1vZGVsVmFsdWUsIHJlZ2lvbkNvZGUpO1xuICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMgKi9cbmltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnQGxpb24vbG9jYWxpemUnO1xuaW1wb3J0IHtcbiAgRGVmYXVsdFN1Y2Nlc3MsXG4gIElzRGF0ZSxcbiAgSXNEYXRlRGlzYWJsZWQsXG4gIE1heERhdGUsXG4gIE1pbkRhdGUsXG4gIE1pbk1heERhdGUsXG4gIElzTnVtYmVyLFxuICBNYXhOdW1iZXIsXG4gIE1pbk1heE51bWJlcixcbiAgTWluTnVtYmVyLFxuICBSZXF1aXJlZCxcbiAgRXF1YWxzTGVuZ3RoLFxuICBJc0VtYWlsLFxuICBNYXhMZW5ndGgsXG4gIE1pbkxlbmd0aCxcbiAgTWluTWF4TGVuZ3RoLFxuICBQYXR0ZXJuLFxufSBmcm9tICdAbGlvbi9mb3JtLWNvcmUnO1xuaW1wb3J0IHsgUGhvbmVOdW1iZXIgfSBmcm9tICdAbGlvbi9pbnB1dC10ZWwnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BsaW9uL2Zvcm0tY29yZS90eXBlcycpLkZlZWRiYWNrTWVzc2FnZURhdGF9IEZlZWRiYWNrTWVzc2FnZURhdGFcbiAqL1xuXG5sZXQgbG9hZGVkID0gZmFsc2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkRGVmYXVsdEZlZWRiYWNrTWVzc2FnZXMoKSB7XG4gIGlmIChsb2FkZWQgPT09IHRydWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBmb3JNZXNzYWdlc1RvQmVSZWFkeSA9ICgpID0+XG4gICAgbG9jYWxpemUubG9hZE5hbWVzcGFjZShcbiAgICAgIHtcbiAgICAgICAgJ2xpb24tdmFsaWRhdGUnOiAvKiogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZSAqLyBsb2NhbGUgPT4ge1xuICAgICAgICAgIHN3aXRjaCAobG9jYWxlKSB7XG4gICAgICAgICAgICBjYXNlICdiZy1CRyc6XG4gICAgICAgICAgICAgIHJldHVybiBpbXBvcnQoJ0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy9iZy1CRy5qcycpO1xuICAgICAgICAgICAgY2FzZSAnYmcnOlxuICAgICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAbGlvbi92YWxpZGF0ZS1tZXNzYWdlcy90cmFuc2xhdGlvbnMvYmcuanMnKTtcbiAgICAgICAgICAgIGNhc2UgJ2NzLUNaJzpcbiAgICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL2NzLUNaLmpzJyk7XG4gICAgICAgICAgICBjYXNlICdjcyc6XG4gICAgICAgICAgICAgIHJldHVybiBpbXBvcnQoJ0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy9jcy5qcycpO1xuICAgICAgICAgICAgY2FzZSAnZGUtREUnOlxuICAgICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAbGlvbi92YWxpZGF0ZS1tZXNzYWdlcy90cmFuc2xhdGlvbnMvZGUtREUuanMnKTtcbiAgICAgICAgICAgIGNhc2UgJ2RlJzpcbiAgICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL2RlLmpzJyk7XG4gICAgICAgICAgICBjYXNlICdlbi1BVSc6XG4gICAgICAgICAgICAgIHJldHVybiBpbXBvcnQoJ0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy9lbi1BVS5qcycpO1xuICAgICAgICAgICAgY2FzZSAnZW4tR0InOlxuICAgICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAbGlvbi92YWxpZGF0ZS1tZXNzYWdlcy90cmFuc2xhdGlvbnMvZW4tR0IuanMnKTtcbiAgICAgICAgICAgIGNhc2UgJ2VuLVVTJzpcbiAgICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL2VuLVVTLmpzJyk7XG4gICAgICAgICAgICBjYXNlICdlbi1QSCc6XG4gICAgICAgICAgICAgIHJldHVybiBpbXBvcnQoJ0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy9lbi1QSC5qcycpO1xuICAgICAgICAgICAgY2FzZSAnZW4nOlxuICAgICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAbGlvbi92YWxpZGF0ZS1tZXNzYWdlcy90cmFuc2xhdGlvbnMvZW4uanMnKTtcbiAgICAgICAgICAgIGNhc2UgJ2VzLUVTJzpcbiAgICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL2VzLUVTLmpzJyk7XG4gICAgICAgICAgICBjYXNlICdlcyc6XG4gICAgICAgICAgICAgIHJldHVybiBpbXBvcnQoJ0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy9lcy5qcycpO1xuICAgICAgICAgICAgY2FzZSAnZnItRlInOlxuICAgICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAbGlvbi92YWxpZGF0ZS1tZXNzYWdlcy90cmFuc2xhdGlvbnMvZnItRlIuanMnKTtcbiAgICAgICAgICAgIGNhc2UgJ2ZyLUJFJzpcbiAgICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL2ZyLUJFLmpzJyk7XG4gICAgICAgICAgICBjYXNlICdmcic6XG4gICAgICAgICAgICAgIHJldHVybiBpbXBvcnQoJ0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy9mci5qcycpO1xuICAgICAgICAgICAgY2FzZSAnaHUtSFUnOlxuICAgICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAbGlvbi92YWxpZGF0ZS1tZXNzYWdlcy90cmFuc2xhdGlvbnMvaHUtSFUuanMnKTtcbiAgICAgICAgICAgIGNhc2UgJ2h1JzpcbiAgICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL2h1LmpzJyk7XG4gICAgICAgICAgICBjYXNlICdpdC1JVCc6XG4gICAgICAgICAgICAgIHJldHVybiBpbXBvcnQoJ0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy9pdC1JVC5qcycpO1xuICAgICAgICAgICAgY2FzZSAnaXQnOlxuICAgICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAbGlvbi92YWxpZGF0ZS1tZXNzYWdlcy90cmFuc2xhdGlvbnMvaXQuanMnKTtcbiAgICAgICAgICAgIGNhc2UgJ25sLUJFJzpcbiAgICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL25sLUJFLmpzJyk7XG4gICAgICAgICAgICBjYXNlICdubC1OTCc6XG4gICAgICAgICAgICAgIHJldHVybiBpbXBvcnQoJ0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy9ubC1OTC5qcycpO1xuICAgICAgICAgICAgY2FzZSAnbmwnOlxuICAgICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAbGlvbi92YWxpZGF0ZS1tZXNzYWdlcy90cmFuc2xhdGlvbnMvbmwuanMnKTtcbiAgICAgICAgICAgIGNhc2UgJ3BsLVBMJzpcbiAgICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL3BsLVBMLmpzJyk7XG4gICAgICAgICAgICBjYXNlICdwbCc6XG4gICAgICAgICAgICAgIHJldHVybiBpbXBvcnQoJ0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy9wbC5qcycpO1xuICAgICAgICAgICAgY2FzZSAncm8tUk8nOlxuICAgICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAbGlvbi92YWxpZGF0ZS1tZXNzYWdlcy90cmFuc2xhdGlvbnMvcm8tUk8uanMnKTtcbiAgICAgICAgICAgIGNhc2UgJ3JvJzpcbiAgICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL3JvLmpzJyk7XG4gICAgICAgICAgICBjYXNlICdydS1SVSc6XG4gICAgICAgICAgICAgIHJldHVybiBpbXBvcnQoJ0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy9ydS1SVS5qcycpO1xuICAgICAgICAgICAgY2FzZSAncnUnOlxuICAgICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAbGlvbi92YWxpZGF0ZS1tZXNzYWdlcy90cmFuc2xhdGlvbnMvcnUuanMnKTtcbiAgICAgICAgICAgIGNhc2UgJ3NrLVNLJzpcbiAgICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL3NrLVNLLmpzJyk7XG4gICAgICAgICAgICBjYXNlICdzayc6XG4gICAgICAgICAgICAgIHJldHVybiBpbXBvcnQoJ0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy9zay5qcycpO1xuICAgICAgICAgICAgY2FzZSAndWstVUEnOlxuICAgICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdAbGlvbi92YWxpZGF0ZS1tZXNzYWdlcy90cmFuc2xhdGlvbnMvdWstVUEuanMnKTtcbiAgICAgICAgICAgIGNhc2UgJ3VrJzpcbiAgICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL3VrLmpzJyk7XG4gICAgICAgICAgICBjYXNlICd6aC1DTic6XG4gICAgICAgICAgICBjYXNlICd6aCc6XG4gICAgICAgICAgICAgIHJldHVybiBpbXBvcnQoJ0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy96aC5qcycpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL2VuLmpzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHsgbG9jYWxlOiBsb2NhbGl6ZS5sb2NhbGUgfSxcbiAgICApO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0ZlZWRiYWNrTWVzc2FnZURhdGF9IGRhdGFcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nfEVsZW1lbnQ+fVxuICAgKi9cbiAgY29uc3QgZ2V0TG9jYWxpemVkTWVzc2FnZSA9IGFzeW5jIGRhdGEgPT4ge1xuICAgIGF3YWl0IGZvck1lc3NhZ2VzVG9CZVJlYWR5KCk7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5tc2coYGxpb24tdmFsaWRhdGU6JHtkYXRhLnR5cGV9LiR7ZGF0YS5uYW1lfWAsIGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH07XG5cbiAgLyoqIEBwYXJhbSB7RmVlZGJhY2tNZXNzYWdlRGF0YX0gZGF0YSAqL1xuICBSZXF1aXJlZC5nZXRNZXNzYWdlID0gYXN5bmMgZGF0YSA9PiBnZXRMb2NhbGl6ZWRNZXNzYWdlKGRhdGEpO1xuICAvKiogQHBhcmFtIHtGZWVkYmFja01lc3NhZ2VEYXRhfSBkYXRhICovXG4gIEVxdWFsc0xlbmd0aC5nZXRNZXNzYWdlID0gYXN5bmMgZGF0YSA9PiBnZXRMb2NhbGl6ZWRNZXNzYWdlKGRhdGEpO1xuICAvKiogQHBhcmFtIHtGZWVkYmFja01lc3NhZ2VEYXRhfSBkYXRhICovXG4gIE1pbkxlbmd0aC5nZXRNZXNzYWdlID0gYXN5bmMgZGF0YSA9PiBnZXRMb2NhbGl6ZWRNZXNzYWdlKGRhdGEpO1xuICAvKiogQHBhcmFtIHtGZWVkYmFja01lc3NhZ2VEYXRhfSBkYXRhICovXG4gIE1heExlbmd0aC5nZXRNZXNzYWdlID0gYXN5bmMgZGF0YSA9PiBnZXRMb2NhbGl6ZWRNZXNzYWdlKGRhdGEpO1xuICAvKiogQHBhcmFtIHtGZWVkYmFja01lc3NhZ2VEYXRhfSBkYXRhICovXG4gIE1pbk1heExlbmd0aC5nZXRNZXNzYWdlID0gYXN5bmMgZGF0YSA9PiBnZXRMb2NhbGl6ZWRNZXNzYWdlKGRhdGEpO1xuICAvKiogQHBhcmFtIHtGZWVkYmFja01lc3NhZ2VEYXRhfSBkYXRhICovXG4gIFBhdHRlcm4uZ2V0TWVzc2FnZSA9IGFzeW5jIGRhdGEgPT4gZ2V0TG9jYWxpemVkTWVzc2FnZShkYXRhKTtcbiAgLyoqIEBwYXJhbSB7RmVlZGJhY2tNZXNzYWdlRGF0YX0gZGF0YSAqL1xuICBJc0VtYWlsLmdldE1lc3NhZ2UgPSBhc3luYyBkYXRhID0+IGdldExvY2FsaXplZE1lc3NhZ2UoZGF0YSk7XG4gIC8qKiBAcGFyYW0ge0ZlZWRiYWNrTWVzc2FnZURhdGF9IGRhdGEgKi9cbiAgSXNOdW1iZXIuZ2V0TWVzc2FnZSA9IGFzeW5jIGRhdGEgPT4gZ2V0TG9jYWxpemVkTWVzc2FnZShkYXRhKTtcbiAgLyoqIEBwYXJhbSB7RmVlZGJhY2tNZXNzYWdlRGF0YX0gZGF0YSAqL1xuICBNaW5OdW1iZXIuZ2V0TWVzc2FnZSA9IGFzeW5jIGRhdGEgPT4gZ2V0TG9jYWxpemVkTWVzc2FnZShkYXRhKTtcbiAgLyoqIEBwYXJhbSB7RmVlZGJhY2tNZXNzYWdlRGF0YX0gZGF0YSAqL1xuICBNYXhOdW1iZXIuZ2V0TWVzc2FnZSA9IGFzeW5jIGRhdGEgPT4gZ2V0TG9jYWxpemVkTWVzc2FnZShkYXRhKTtcbiAgLyoqIEBwYXJhbSB7RmVlZGJhY2tNZXNzYWdlRGF0YX0gZGF0YSAqL1xuICBNaW5NYXhOdW1iZXIuZ2V0TWVzc2FnZSA9IGFzeW5jIGRhdGEgPT4gZ2V0TG9jYWxpemVkTWVzc2FnZShkYXRhKTtcbiAgLyoqIEBwYXJhbSB7RmVlZGJhY2tNZXNzYWdlRGF0YX0gZGF0YSAqL1xuICBJc0RhdGUuZ2V0TWVzc2FnZSA9IGFzeW5jIGRhdGEgPT4gZ2V0TG9jYWxpemVkTWVzc2FnZShkYXRhKTtcbiAgLyoqIEBwYXJhbSB7RmVlZGJhY2tNZXNzYWdlRGF0YX0gZGF0YSAqL1xuICBNaW5EYXRlLmdldE1lc3NhZ2UgPSBhc3luYyBkYXRhID0+IGdldExvY2FsaXplZE1lc3NhZ2UoZGF0YSk7XG4gIC8qKiBAcGFyYW0ge0ZlZWRiYWNrTWVzc2FnZURhdGF9IGRhdGEgKi9cbiAgTWF4RGF0ZS5nZXRNZXNzYWdlID0gYXN5bmMgZGF0YSA9PiBnZXRMb2NhbGl6ZWRNZXNzYWdlKGRhdGEpO1xuICAvKiogQHBhcmFtIHtGZWVkYmFja01lc3NhZ2VEYXRhfSBkYXRhICovXG4gIE1pbk1heERhdGUuZ2V0TWVzc2FnZSA9IGFzeW5jIGRhdGEgPT4gZ2V0TG9jYWxpemVkTWVzc2FnZShkYXRhKTtcbiAgLyoqIEBwYXJhbSB7RmVlZGJhY2tNZXNzYWdlRGF0YX0gZGF0YSAqL1xuICBJc0RhdGVEaXNhYmxlZC5nZXRNZXNzYWdlID0gYXN5bmMgZGF0YSA9PiBnZXRMb2NhbGl6ZWRNZXNzYWdlKGRhdGEpO1xuXG4gIERlZmF1bHRTdWNjZXNzLmdldE1lc3NhZ2UgPSBhc3luYyBkYXRhID0+IHtcbiAgICBhd2FpdCBmb3JNZXNzYWdlc1RvQmVSZWFkeSgpO1xuICAgIGNvbnN0IHJhbmRvbUtleXMgPSBsb2NhbGl6ZS5tc2coJ2xpb24tdmFsaWRhdGU6c3VjY2Vzcy5SYW5kb21PaycpLnNwbGl0KCcsJyk7XG4gICAgY29uc3Qga2V5ID0gcmFuZG9tS2V5c1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kb21LZXlzLmxlbmd0aCldLnRyaW0oKTtcbiAgICByZXR1cm4gbG9jYWxpemUubXNnKGBsaW9uLXZhbGlkYXRlOiR7a2V5fWAsIGRhdGEpO1xuICB9O1xuXG4gIC8qKiBAcGFyYW0ge0ZlZWRiYWNrTWVzc2FnZURhdGF9IGRhdGEgKi9cbiAgLy8gQHRzLWlnbm9yZVxuICBQaG9uZU51bWJlci5nZXRNZXNzYWdlID0gYXN5bmMgZGF0YSA9PiB7XG4gICAgYXdhaXQgZm9yTWVzc2FnZXNUb0JlUmVhZHkoKTtcbiAgICBjb25zdCB7IHR5cGUsIG91dGNvbWUgfSA9IGRhdGE7XG4gICAgaWYgKG91dGNvbWUgPT09ICd0b28tbG9uZycpIHtcbiAgICAgIC8vIFRPRE86IGdldCBtYXgtbGVuZ3RoIG9mIGNvdW50cnkgYW5kIHVzZSBNYXhMZW5ndGggdmFsaWRhdG9yXG4gICAgICByZXR1cm4gbG9jYWxpemUubXNnKGBsaW9uLXZhbGlkYXRlOiR7dHlwZX0uUGF0dGVybmAsIGRhdGEpO1xuICAgIH1cbiAgICBpZiAob3V0Y29tZSA9PT0gJ3Rvby1zaG9ydCcpIHtcbiAgICAgIC8vIFRPRE86IGdldCBtaW4tbGVuZ3RoIG9mIGNvdW50cnkgYW5kIHVzZSBNaW5MZW5ndGggdmFsaWRhdG9yXG4gICAgICByZXR1cm4gbG9jYWxpemUubXNnKGBsaW9uLXZhbGlkYXRlOiR7dHlwZX0uUGF0dGVybmAsIGRhdGEpO1xuICAgIH1cbiAgICAvLyBUT0RPOiBhZGQgYSBtb3JlIHNwZWNpZmljIG1lc3NhZ2UgaGVyZVxuICAgIGlmIChvdXRjb21lID09PSAnaW52YWxpZC1jb3VudHJ5LWNvZGUnKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUubXNnKGBsaW9uLXZhbGlkYXRlOiR7dHlwZX0uUGF0dGVybmAsIGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gbG9jYWxpemUubXNnKGBsaW9uLXZhbGlkYXRlOiR7dHlwZX0uUGF0dGVybmAsIGRhdGEpO1xuICB9O1xuXG4gIGxvYWRlZCA9IHRydWU7XG59XG4iLCJpbXBvcnQgeyBodG1sLCBjc3MgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IEthbmFDYXJkIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYXJkJztcbmltcG9ydCAnLi4vY29tcG9uZW50cy9idXR0b24nO1xuaW1wb3J0ICcuLi9jb21wb25lbnRzL2NhcmQnO1xuaW1wb3J0ICcuLi9jb21wb25lbnRzL2xvYWRlcic7XG5pbXBvcnQgeyBoZWFkZXJTdHlsZXMgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbW1vbi1zdHlsZXMnO1xuaW1wb3J0IHsgS2FuYWxvYUFQSSB9IGZyb20gJy4uL2FwaS9rYW5hbG9hLWV0aGVycyc7XG5pbXBvcnQgeyBBYnN0cmFjdENhcmRzUGFnZSB9IGZyb20gJy4vYWJzdHJhY3QtY2FyZHMtcGFnZSc7XG5pbXBvcnQgeyBLYW5hRm9ybSwgbWF4TGVuZ3RoUHJlcHJvY2Vzc29yIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvZm9ybXMvZm9ybXNcIjtcbmltcG9ydCB7IGxvYWREZWZhdWx0RmVlZGJhY2tNZXNzYWdlcyB9IGZyb20gXCJAbGlvbi92YWxpZGF0ZS1tZXNzYWdlc1wiO1xuaW1wb3J0IHsgTWluTWF4TGVuZ3RoLCBSZXF1aXJlZCB9IGZyb20gXCJAbGlvbi9mb3JtLWNvcmVcIjtcblxuXG5AY3VzdG9tRWxlbWVudCgncHJvZmlsZS1wYWdlJylcbmV4cG9ydCBjbGFzcyBQcm9maWxlUGFnZSBleHRlbmRzIEFic3RyYWN0Q2FyZHNQYWdlIHtcblx0Y29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGxvYWREZWZhdWx0RmVlZGJhY2tNZXNzYWdlcygpO1xuICAgICAgICBSZXF1aXJlZC5nZXRNZXNzYWdlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFwiUGxlYXNlLCBlbnRlciBhIHZhbHVlXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBmZXRjaERhdGEoKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgXG4gICAgICAgIGlmIChLYW5hbG9hQVBJLnJlYWRPbmx5KSB7XG4gICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2U6IEthbmFDYXJkW10gPSBbXTtcblxuICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLml0ZW1zID0gcmVzcG9uc2U7XG4gICAgfVxuXG5cdHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgaGVhZGVyU3R5bGVzLFxuICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgIC5jb250YWluZXIge1xuXHRcdFx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRcdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0XHRcdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRcdFx0XHRnYXA6IDQwcHg7XG5cdFx0XHRcdFx0bWFyZ2luLXRvcDogMjBweDtcblx0XHRcdFx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0XHRcdFx0d2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgfVxuXG5cdFx0XHRcdC5jYXJkLWNvbnRhaW5lciB7XG5cdFx0XHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdFx0XHRmbGV4LWRpcmVjdGlvbjogcm93O1xuXHRcdFx0XHRcdGdhcDogNDBweDtcblxuXHRcdFx0XHRcdEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTEwMHB4KSB7XG5cdFx0XHRcdFx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC5jYXJkIHtcblx0XHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdFx0XHRcdFx0Z2FwOiAyMHB4O1xuXHRcdFx0XHRcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWZvcmVncm91bmQtY29sb3IpO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XG5cdFx0XHRcdFx0Ym9yZGVyLXJhZGl1czogMXJlbTtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMzBweDtcblx0XHRcdFx0XHRib3gtc2hhZG93OiAwIDRweCA2cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0LmNhcmQtdGl0bGUge1xuXHRcdFx0XHRcdGZvbnQtc2l6ZTogMThweDtcblx0XHRcdFx0fVxuXHRcdFx0YCxcblx0XHRcdGNzc2Bcblx0XHRcdFx0LnByb2ZpbGUtY2FyZCB7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC5wcm9maWxlLWNhcmQtc3ViLWNvbnRhaW5lciB7XG5cdFx0XHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdFx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdFx0XHRcdGdhcDogMjBweDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC5wcm9maWxlLWltYWdlLWNvbnRhaW5lciB7XG5cdFx0XHRcdFx0d2lkdGg6IDIwMHB4O1xuXHRcdFx0XHRcdGhlaWdodDogMjAwcHg7XG5cdFx0XHRcdFx0YWxpZ24tc2VsZjogY2VudGVyO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0LnByb2ZpbGUtaW1hZ2UtMSB7XG5cdFx0XHRcdFx0ZmlsbDogdmFyKC0tcHJpbWFyeS1jb2xvcik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQucHJvZmlsZS13YWxsZXQtYWRkcmVzcyB7XG5cdFx0XHRcdFx0Y29sb3I6ICMwMDAwMDA7XG5cdFx0XHRcdFx0Zm9udC13ZWlnaHQ6IGJvbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQucHJvZmlsZS1saW5lIHtcblx0XHRcdFx0XHRib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcblx0XHRcdFx0XHRib3JkZXItcmFkaXVzOiAzcHg7XG5cdFx0XHRcdFx0bWFyZ2luOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0LnByb2ZpbGUtZm9ybS1pbnB1dHMge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHR9XG5cblx0XHRcdFx0a2FuYS1mb3JtIHtcblx0XHRcdFx0XHR3aWR0aDogMTAwJTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGthbmEtaW5wdXQsIGlucHV0LCBrYW5hLXNlbGVjdCB7XG4gICAgICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlucHV0LCBzZWxlY3Qge1xuICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogc2FucztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbnB1dCB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1mb3JlZ3JvdW5kLWNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdFx0XHRmb250LXNpemU6IDE4cHg7XG4gICAgICAgICAgICAgICAgfVxuXG5cdFx0XHRcdGlucHV0OjpwbGFjZWhvbGRlciB7XG5cdFx0XHRcdFx0Y29sb3I6IHZhcigtLWZvcmVncm91bmQtY29sb3IpO1xuXHRcdFx0XHR9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaW5wdXQ6Zm9jdXMge1xuICAgICAgICAgICAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAycHggdmFyKC0taGlnaGxpZ2h0ZWQtbGlnaHQtY29sb3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC5zbWFsbC1pbnB1dCwgLnNtYWxsLWlucHV0ICoge1xuICAgICAgICAgICAgICAgICAgICBmbGV4OiAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC5zbWFsbC1pbnB1dCBpbnB1dCB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA4cmVtO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC5mb3JtLXJvdyB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGdhcDogMXJlbTtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAxMHB4IDA7XG4gICAgICAgICAgICAgICAgICAgIGZsZXgtZmxvdzogcm93IHdyYXA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZWN0IHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMnJlbTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHZhcigtLWZvcmVncm91bmQtY29sb3IpO1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgZmxleDogMTtcblx0XHRcdFx0XHRmb250LXNpemU6IDE4cHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNlbGVjdDpmb2N1cyB7XG4gICAgICAgICAgICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDJweCB2YXIoLS1oaWdobGlnaHRlZC1saWdodC1jb2xvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGthbmEtYnV0dG9uLXN1Ym1pdCB7XG5cdFx0XHRcdFx0Ym9yZGVyLXJhZGl1czogMTBweDtcbiAgICAgICAgICAgICAgICAgICAgbWluLXdpZHRoOiBmaXQtY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgICAgICB9XG5cblx0XHRcdFx0LnByb2ZpbGUtd2FsbGV0LWNvbnRhaW5lciB7XG5cdFx0XHRcdFx0bWluLWhlaWdodDogNzBweDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC5wcm9maWxlLXByb2plY3QtY29udGFpbmVyIHtcblx0XHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRcdGZsZXgtZGlyZWN0aW9uOiByb3c7XG5cdFx0XHRcdFx0Z2FwOiAyMHB4O1xuXG5cdFx0XHRcdFx0PiBhIHtcblx0XHRcdFx0XHRcdHdpZHRoOiAxMDAlO1xuXG5cdFx0XHRcdFx0XHQ+IGthbmEtYnV0dG9uIHtcblx0XHRcdFx0XHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3MDBweCkge1xuXHRcdFx0XHRcdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdGAsXG5cdFx0XHRjc3NgXG4gICAgICAgICAgICAgICAgLmZvcm0tcm93IGxpb24tdmFsaWRhdGlvbi1mZWVkYmFjayB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taGlnaGxpZ2h0ZWQtbGlnaHQtY29sb3IpO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMnJlbTtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjhyZW07XG4gICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjI7XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMnJlbTtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IC0zcmVtO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogbWF4LWNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IDFcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAuZm9ybS1yb3cgbGlvbi12YWxpZGF0aW9uLWZlZWRiYWNrOm5vdChbdHlwZT1cImVycm9yXCJdKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC5mb3JtLXJvdyBsaW9uLXZhbGlkYXRpb24tZmVlZGJhY2s6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogLTE4cHg7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDEwJTtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDEwcHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci10b3A6IDE1cHggc29saWQgdmFyKC0taGlnaGxpZ2h0ZWQtbGlnaHQtY29sb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGAsXG5cdFx0XHRjc3NgXG5cdFx0XHRcdC5vdmVydmlldy1jYXJkIHtcblx0XHRcdFx0XHR3aWR0aDogMTAwJVxuXHRcdFx0XHRcdG1pbi1oZWlnaHQ6IDQwMHB4O1xuXHRcdFx0XHR9XG5cdFx0XHRgLFxuXHRcdFx0Y3NzYFxuXHRcdFx0XHQucHJvamVjdC1jYXJkIHtcblx0XHRcdFx0XHRcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC5wcm9qZWN0LWNvbnRhaW5lciB7XG5cblx0XHRcdFx0fVxuXHRcdFx0YCxcblx0XHRcdGNzc2Bcblx0XHRcdFx0LnJvbGUtY2FyZCB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQucm9sZS1jb250YWluZXIge1xuXG5cdFx0XHRcdH1cblx0XHRcdGAsXG5cdFx0XHRjc3NgXG5cdFx0XHRcdC5idXR0b24tY29udGFpbmVyIHtcblx0XHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRcdGZsZXgtZGlyZWN0aW9uOiByb3c7XG5cdFx0XHRcdFx0Z2FwOiAyMHB4O1xuXHRcdFx0XHRcdGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5cblx0XHRcdFx0XHRAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDkwMHB4KSB7XG5cdFx0XHRcdFx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC51cGRhdGUtYnV0dG9uIHtcblx0XHRcdFx0XHR3aWR0aDogMzUwcHg7XG5cblx0XHRcdFx0XHRAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDkwMHB4KSB7XG5cdFx0XHRcdFx0XHR3aWR0aDogMTAwJTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQuY2FuY2VsLWJ1dHRvbiB7XG5cdFx0XHRcdFx0d2lkdGg6IDEyMHB4O1xuXG5cdFx0XHRcdFx0QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5MDBweCkge1xuXHRcdFx0XHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG4gICAgICAgICAgICBgXG4gICAgICAgIF07XG4gICAgfVxuXG5cdGFzeW5jIHN1Ym1pdEhhbmRsZXIoZXY6IGFueSkge1xuICAgICAgICBsZXQgZm9ybTogS2FuYUZvcm0gPSBldi50YXJnZXQ7XG5cbiAgICAgICAgaWYgKCFmb3JtLmhhc0ZlZWRiYWNrRm9yLmluY2x1ZGVzKCdlcnJvcicpKSB7XG5cdFx0XHRjb25zdCBmb3JtRGF0YSA9IGV2LnRhcmdldC5tb2RlbFZhbHVlO1xuXG5cdFx0XHRjb25zb2xlLmxvZyhmb3JtRGF0YSk7XG5cblx0XHRcdC8vR2xvYmFsS2FuYWxvYUV0aGVycy5wcm9qZWN0UmVnaXN0cnkubmV3UHJvamVjdCh7XG5cdFx0XHQvLyAgICBwcm9qZWN0TmFtZTogZm9ybURhdGEubmFtZSxcblx0XHRcdC8vICAgIGFiYnJldmlhdGlvbjogZm9ybURhdGEuYWJicmV2aWF0aW9uLFxuXHRcdFx0Ly8gICAgZGVzY3JpcHRpb246IGZvcm1EYXRhLmRlc2NyaXB0aW9uLFxuXHRcdFx0Ly8gICAgdmlzaWJpbGl0eTogMFxuXHRcdFx0Ly99KTtcbiAgICAgICAgfSBlbHNlIHtcblx0XHRcdGNvbnN0IGZpcnN0Rm9ybUVsV2l0aEVycm9yID0gZm9ybS5mb3JtRWxlbWVudHMuZmluZCgoZWw6IGFueSkgPT4gZWwuaGFzRmVlZGJhY2tGb3IuaW5jbHVkZXMoJ2Vycm9yJykpO1xuXG5cdFx0XHRmaXJzdEZvcm1FbFdpdGhFcnJvci5mb2N1cygpO1xuXHRcdH1cblx0fVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNhcmQtY29udGFpbmVyXCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImNhcmQgcHJvZmlsZS1jYXJkXCI+XG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwicHJvZmlsZS1jYXJkLXN1Yi1jb250YWluZXJcIj5cblx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInByb2ZpbGUtaW1hZ2UtY29udGFpbmVyXCI+XG5cdFx0XHRcdFx0XHRcdFx0PHN2ZyBjbGFzcz1cInByb2ZpbGUtaW1hZ2UtMVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj5cblx0XHRcdFx0XHRcdFx0XHRcdDxwYXRoIGQ9XCJNMCAwaDI0djI0SDB6XCIgZmlsbD1cIm5vbmVcIj48L3BhdGg+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8cGF0aCBkPVwiTTE4LjM5IDE0LjU2QzE2LjcxIDEzLjcgMTQuNTMgMTMgMTIgMTNzLTQuNzEuNy02LjM5IDEuNTZBMi45NyAyLjk3IDAgMCAwIDQgMTcuMjJWMjBoMTZ2LTIuNzhjMC0xLjEyLS42MS0yLjE1LTEuNjEtMi42NnpNOS43OCAxMmg0LjQ0YzEuMjEgMCAyLjE0LTEuMDYgMS45OC0yLjI2bC0uMzItMi40NUMxNS41NyA1LjM5IDEzLjkyIDQgMTIgNFM4LjQzIDUuMzkgOC4xMiA3LjI5TDcuOCA5Ljc0Yy0uMTYgMS4yLjc3IDIuMjYgMS45OCAyLjI2elwiPjwvcGF0aD5cblx0XHRcdFx0XHRcdFx0XHQ8L3N2Zz5cblx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJwcm9maWxlLXdhbGxldC1hZGRyZXNzXCI+XG5cdFx0XHRcdFx0XHRcdFx0PHNwYW4+V2FsbGV0IEFkcmVzczo8L3NwYW4+XG5cdFx0XHRcdFx0XHRcdFx0PHNwYW4+PC9zcGFuPlxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdFx0XHQ8aHIgY2xhc3M9XCJwcm9maWxlLWxpbmVcIi8+XG5cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJwcm9maWxlLWZvcm0taW5wdXRzXCI+XG5cdFx0XHRcdFx0XHRcdDxrYW5hLWZvcm0gQHN1Ym1pdD1cIiR7dGhpcy5zdWJtaXRIYW5kbGVyfVwiPlxuXHRcdFx0XHRcdFx0XHRcdDxmb3JtIEBzdWJtaXQ9JHsoZXY6IEV2ZW50KSA9PiBldi5wcmV2ZW50RGVmYXVsdCgpfT5cblx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmb3JtLXJvd1wiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8a2FuYS1pbnB1dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGxhYmVsLXNyLW9ubHk9XCJEaXNwbGF5IE5hbWVcIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPVwiRGlzcGxheSBOYW1lXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRuYW1lPVwiYWRkLXdhbGxldC1kaXNwbGF5LW5hbWVcIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC52YWxpZGF0b3JzPVwiJHtbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRuZXcgTWluTWF4TGVuZ3RoKHsgbWluOiA0LCBtYXg6IDE2fSksIC8vIFRPRE86IHNldCBjb3JyZWN0IGJvcmRlcnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5ldyBSZXF1aXJlZCgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XX1cIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC5wcmVwcm9jZXNzb3I9JHttYXhMZW5ndGhQcmVwcm9jZXNzb3IoMTYpfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ+PC9rYW5hLWlucHV0PlxuXHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1yb3dcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGthbmEtc2VsZWN0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bGFiZWwtc3Itb25seT1cIlZpc2liaWxpdHlcIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPVwiVmlzaWJpbGl0eVwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bmFtZT1cImFkZC13YWxsZXQtdmlzaWJpbGl0eVwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0LnZhbGlkYXRvcnM9JHtbIG5ldyBSZXF1aXJlZCgpIF19XG5cdFx0XHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8c2VsZWN0IG5hbWU9XCJ2aXNpYmlsaXR5LXNlbGVjdFwiIHNsb3Q9XCJpbnB1dFwiPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PG9wdGlvbiBuYW1lPVwicHVibGljXCIgdmFsdWU9XCJwdWJsaWNcIiBzZWxlY3RlZD5QdWJsaWM8L29wdGlvbj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxvcHRpb24gbmFtZT1cIm9wdGlvbjFcIiB2YWx1ZT1cIm9wdGlvbjFcIj5PcHRpb24gMTwvb3B0aW9uPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PG9wdGlvbiBuYW1lPVwib3B0aW9uMlwiIHZhbHVlPVwib3B0aW9uMlwiPk9wdGlvbiAyPC9vcHRpb24+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8b3B0aW9uIG5hbWU9XCJvcHRpb24zXCIgdmFsdWU9XCJvcHRpb24zXCI+T3B0aW9uIDM8L29wdGlvbj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L3NlbGVjdD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PC9rYW5hLXNlbGVjdD5cblx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tcm93XCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxrYW5hLWlucHV0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bGFiZWwtc3Itb25seT1cIkNoYWluXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cIkNoYWluXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRuYW1lPVwiYWRkLXdhbGxldC1jaGFpblwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0LnZhbGlkYXRvcnM9XCIke1tcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5ldyBNaW5NYXhMZW5ndGgoeyBtaW46IDAsIG1heDogNjR9KSwgLy8gVE9ETzogc2V0IGNvcnJlY3QgYm9yZGVyc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdF19XCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQucHJlcHJvY2Vzc29yPSR7bWF4TGVuZ3RoUHJlcHJvY2Vzc29yKDY0KX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0Pjwva2FuYS1pbnB1dD5cblx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tcm93XCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxrYW5hLWJ1dHRvbi1zdWJtaXQ+QWRkIFdhbGxldDwva2FuYS1idXR0b24tc3VibWl0PlxuXHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdFx0PC9mb3JtPlxuXHRcdFx0XHRcdFx0XHQ8L2thbmEtZm9ybT5cblx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInByb2ZpbGUtd2FsbGV0LWNvbnRhaW5lclwiPlxuXHRcdFx0XHRcdFx0XHQ8c3Bhbj5NeSBXYWxsZXRzPC9zcGFuPlxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwicHJvZmlsZS1wcm9qZWN0LWNvbnRhaW5lclwiPlxuXHRcdFx0XHRcdFx0XHQ8YSBocmVmPVwicHJvamVjdHNcIj5cblx0XHRcdFx0XHRcdFx0XHQ8a2FuYS1idXR0b24+TXkgUHJvamVjdHM8L2thbmEtYnV0dG9uPlxuXHRcdFx0XHRcdFx0XHQ8L2E+XG5cdFx0XHRcdFx0XHRcdDxhIGhyZWY9XCJuZXctcHJvamVjdFwiPlxuXHRcdFx0XHRcdFx0XHRcdDxrYW5hLWJ1dHRvbj5OZXc8L2thbmEtYnV0dG9uPlxuXHRcdFx0XHRcdFx0XHQ8L2E+XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY2FyZCBwcm9qZWN0LWNhcmQgb3ZlcnZpZXctY2FyZFwiPlxuXHRcdFx0XHRcdFx0PGgyIGNsYXNzPVwiY2FyZC10aXRsZVwiPk92ZXJ2aWV3IFByb2plY3RzPC9oMj5cblxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cInByb2plY3QtY29udGFpbmVyXCI+XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImNhcmQgcm9sZS1jYXJkIG92ZXJ2aWV3LWNhcmRcIj5cblx0XHRcdFx0XHRcdDxoMiBjbGFzcz1cImNhcmQtdGl0bGVcIj5PdmVydmlldyBSb2xlczwvaDI+XG5cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJyb2xlLWNvbnRhaW5lclwiPlxuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiYnV0dG9uLWNvbnRhaW5lclwiPlxuXHRcdFx0XHRcdDxrYW5hLWJ1dHRvbiBjbGFzcz1cInVwZGF0ZS1idXR0b25cIj5VcGRhdGU8L2thbmEtYnV0dG9uPlxuXG5cdFx0XHRcdFx0PGEgaHJlZj1cInByb2plY3RzXCI+XG5cdFx0XHRcdFx0XHQ8a2FuYS1idXR0b24gY2xhc3M9XCJjYW5jZWwtYnV0dG9uXCI+Q2FuY2VsPC9rYW5hLWJ1dHRvbj5cblx0XHRcdFx0XHQ8L2E+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCB0PXtBVFRSSUJVVEU6MSxDSElMRDoyLFBST1BFUlRZOjMsQk9PTEVBTl9BVFRSSUJVVEU6NCxFVkVOVDo1LEVMRU1FTlQ6Nn0sZT10PT4oLi4uZSk9Pih7XyRsaXREaXJlY3RpdmUkOnQsdmFsdWVzOmV9KTtjbGFzcyBpe2NvbnN0cnVjdG9yKHQpe31nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1fJEFUKHQsZSxpKXt0aGlzLl8kQ3Q9dCx0aGlzLl8kQU09ZSx0aGlzLl8kQ2k9aX1fJEFTKHQsZSl7cmV0dXJuIHRoaXMudXBkYXRlKHQsZSl9dXBkYXRlKHQsZSl7cmV0dXJuIHRoaXMucmVuZGVyKC4uLmUpfX1leHBvcnR7aSBhcyBEaXJlY3RpdmUsdCBhcyBQYXJ0VHlwZSxlIGFzIGRpcmVjdGl2ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXJlY3RpdmUuanMubWFwXG4iLCJpbXBvcnR7XyRMSCBhcyBvfWZyb21cIi4vbGl0LWh0bWwuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NvbnN0e0k6dH09byxpPW89Pm51bGw9PT1vfHxcIm9iamVjdFwiIT10eXBlb2YgbyYmXCJmdW5jdGlvblwiIT10eXBlb2YgbyxuPXtIVE1MOjEsU1ZHOjJ9LGU9KG8sdCk9PnZvaWQgMD09PXQ/dm9pZCAwIT09bz8uXyRsaXRUeXBlJDpvPy5fJGxpdFR5cGUkPT09dCxsPW89Pm51bGwhPW8/Ll8kbGl0VHlwZSQ/LmgsYz1vPT52b2lkIDAhPT1vPy5fJGxpdERpcmVjdGl2ZSQsZD1vPT5vPy5fJGxpdERpcmVjdGl2ZSQsZj1vPT52b2lkIDA9PT1vLnN0cmluZ3Mscz0oKT0+ZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSxyPShvLGksbik9Pntjb25zdCBlPW8uXyRBQS5wYXJlbnROb2RlLGw9dm9pZCAwPT09aT9vLl8kQUI6aS5fJEFBO2lmKHZvaWQgMD09PW4pe2NvbnN0IGk9ZS5pbnNlcnRCZWZvcmUocygpLGwpLGM9ZS5pbnNlcnRCZWZvcmUocygpLGwpO249bmV3IHQoaSxjLG8sby5vcHRpb25zKX1lbHNle2NvbnN0IHQ9bi5fJEFCLm5leHRTaWJsaW5nLGk9bi5fJEFNLGM9aSE9PW87aWYoYyl7bGV0IHQ7bi5fJEFRPy4obyksbi5fJEFNPW8sdm9pZCAwIT09bi5fJEFQJiYodD1vLl8kQVUpIT09aS5fJEFVJiZuLl8kQVAodCl9aWYodCE9PWx8fGMpe2xldCBvPW4uXyRBQTtmb3IoO28hPT10Oyl7Y29uc3QgdD1vLm5leHRTaWJsaW5nO2UuaW5zZXJ0QmVmb3JlKG8sbCksbz10fX19cmV0dXJuIG59LHY9KG8sdCxpPW8pPT4oby5fJEFJKHQsaSksbyksdT17fSxtPShvLHQ9dSk9Pm8uXyRBSD10LHA9bz0+by5fJEFILGg9bz0+e28uXyRBUD8uKCExLCEwKTtsZXQgdD1vLl8kQUE7Y29uc3QgaT1vLl8kQUIubmV4dFNpYmxpbmc7Zm9yKDt0IT09aTspe2NvbnN0IG89dC5uZXh0U2libGluZzt0LnJlbW92ZSgpLHQ9b319LGo9bz0+e28uXyRBUigpfTtleHBvcnR7biBhcyBUZW1wbGF0ZVJlc3VsdFR5cGUsaiBhcyBjbGVhclBhcnQscCBhcyBnZXRDb21taXR0ZWRWYWx1ZSxkIGFzIGdldERpcmVjdGl2ZUNsYXNzLHIgYXMgaW5zZXJ0UGFydCxsIGFzIGlzQ29tcGlsZWRUZW1wbGF0ZVJlc3VsdCxjIGFzIGlzRGlyZWN0aXZlUmVzdWx0LGkgYXMgaXNQcmltaXRpdmUsZiBhcyBpc1NpbmdsZUV4cHJlc3Npb24sZSBhcyBpc1RlbXBsYXRlUmVzdWx0LGggYXMgcmVtb3ZlUGFydCx2IGFzIHNldENoaWxkUGFydFZhbHVlLG0gYXMgc2V0Q29tbWl0dGVkVmFsdWV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlyZWN0aXZlLWhlbHBlcnMuanMubWFwXG4iLCJpbXBvcnR7bm9DaGFuZ2UgYXMgZX1mcm9tXCIuLi9saXQtaHRtbC5qc1wiO2ltcG9ydHtkaXJlY3RpdmUgYXMgcyxEaXJlY3RpdmUgYXMgdCxQYXJ0VHlwZSBhcyByfWZyb21cIi4uL2RpcmVjdGl2ZS5qc1wiO2ltcG9ydHtnZXRDb21taXR0ZWRWYWx1ZSBhcyBsLHNldENoaWxkUGFydFZhbHVlIGFzIG8saW5zZXJ0UGFydCBhcyBpLHJlbW92ZVBhcnQgYXMgbixzZXRDb21taXR0ZWRWYWx1ZSBhcyBmfWZyb21cIi4uL2RpcmVjdGl2ZS1oZWxwZXJzLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHU9KGUscyx0KT0+e2NvbnN0IHI9bmV3IE1hcDtmb3IobGV0IGw9cztsPD10O2wrKylyLnNldChlW2xdLGwpO3JldHVybiByfSxjPXMoY2xhc3MgZXh0ZW5kcyB0e2NvbnN0cnVjdG9yKGUpe2lmKHN1cGVyKGUpLGUudHlwZSE9PXIuQ0hJTEQpdGhyb3cgRXJyb3IoXCJyZXBlYXQoKSBjYW4gb25seSBiZSB1c2VkIGluIHRleHQgZXhwcmVzc2lvbnNcIil9ZHQoZSxzLHQpe2xldCByO3ZvaWQgMD09PXQ/dD1zOnZvaWQgMCE9PXMmJihyPXMpO2NvbnN0IGw9W10sbz1bXTtsZXQgaT0wO2Zvcihjb25zdCBzIG9mIGUpbFtpXT1yP3IocyxpKTppLG9baV09dChzLGkpLGkrKztyZXR1cm57dmFsdWVzOm8sa2V5czpsfX1yZW5kZXIoZSxzLHQpe3JldHVybiB0aGlzLmR0KGUscyx0KS52YWx1ZXN9dXBkYXRlKHMsW3QscixjXSl7Y29uc3QgZD1sKHMpLHt2YWx1ZXM6cCxrZXlzOmF9PXRoaXMuZHQodCxyLGMpO2lmKCFBcnJheS5pc0FycmF5KGQpKXJldHVybiB0aGlzLnV0PWEscDtjb25zdCBoPXRoaXMudXQ/Pz1bXSx2PVtdO2xldCBtLHkseD0wLGo9ZC5sZW5ndGgtMSxrPTAsdz1wLmxlbmd0aC0xO2Zvcig7eDw9aiYmazw9dzspaWYobnVsbD09PWRbeF0peCsrO2Vsc2UgaWYobnVsbD09PWRbal0pai0tO2Vsc2UgaWYoaFt4XT09PWFba10pdltrXT1vKGRbeF0scFtrXSkseCsrLGsrKztlbHNlIGlmKGhbal09PT1hW3ddKXZbd109byhkW2pdLHBbd10pLGotLSx3LS07ZWxzZSBpZihoW3hdPT09YVt3XSl2W3ddPW8oZFt4XSxwW3ddKSxpKHMsdlt3KzFdLGRbeF0pLHgrKyx3LS07ZWxzZSBpZihoW2pdPT09YVtrXSl2W2tdPW8oZFtqXSxwW2tdKSxpKHMsZFt4XSxkW2pdKSxqLS0saysrO2Vsc2UgaWYodm9pZCAwPT09bSYmKG09dShhLGssdykseT11KGgseCxqKSksbS5oYXMoaFt4XSkpaWYobS5oYXMoaFtqXSkpe2NvbnN0IGU9eS5nZXQoYVtrXSksdD12b2lkIDAhPT1lP2RbZV06bnVsbDtpZihudWxsPT09dCl7Y29uc3QgZT1pKHMsZFt4XSk7byhlLHBba10pLHZba109ZX1lbHNlIHZba109byh0LHBba10pLGkocyxkW3hdLHQpLGRbZV09bnVsbDtrKyt9ZWxzZSBuKGRbal0pLGotLTtlbHNlIG4oZFt4XSkseCsrO2Zvcig7azw9dzspe2NvbnN0IGU9aShzLHZbdysxXSk7byhlLHBba10pLHZbaysrXT1lfWZvcig7eDw9ajspe2NvbnN0IGU9ZFt4KytdO251bGwhPT1lJiZuKGUpfXJldHVybiB0aGlzLnV0PWEsZihzLHYpLGV9fSk7ZXhwb3J0e2MgYXMgcmVwZWF0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcGVhdC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuZnVuY3Rpb24gbihuLHIsdCl7cmV0dXJuIG4/cihuKTp0Py4obil9ZXhwb3J0e24gYXMgd2hlbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aGVuLmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IEthbmFDYXJkIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYXJkJztcbmltcG9ydCAnLi4vY29tcG9uZW50cy9idXR0b24nO1xuaW1wb3J0ICcuLi9jb21wb25lbnRzL2NhcmQnO1xuaW1wb3J0ICcuLi9jb21wb25lbnRzL2xvYWRlcic7XG5pbXBvcnQgeyByZXBlYXQgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9yZXBlYXQuanMnO1xuaW1wb3J0IHsgd2hlbiB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3doZW4uanMnO1xuaW1wb3J0IHsgS2FuYWxvYUFQSSB9IGZyb20gJy4uL2FwaS9rYW5hbG9hLWV0aGVycyc7XG5pbXBvcnQgeyBDb250cmFjdCB9IGZyb20gJ2V0aGVycyc7XG5pbXBvcnQgeyBBYnN0cmFjdENhcmRzUGFnZSB9IGZyb20gJy4vYWJzdHJhY3QtY2FyZHMtcGFnZSc7XG5cbkBjdXN0b21FbGVtZW50KCdwcm9qZWN0cy1wYWdlJylcbmV4cG9ydCBjbGFzcyBQcm9qZWN0c1BhZ2UgZXh0ZW5kcyBBYnN0cmFjdENhcmRzUGFnZSB7XG4gICAgYXN5bmMgZmV0Y2hEYXRhKCkge1xuICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IHByb2plY3RzID0gXG4gICAgICAgICAgICBhd2FpdCBLYW5hbG9hQVBJLnByb2plY3RSZWdpc3RyeS5nZXRQcm9qZWN0cygpO1xuICAgICAgICBcbiAgICAgICAgaWYgKEthbmFsb2FBUEkucmVhZE9ubHkpIHtcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLml0ZW1zID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXNwb25zZTogS2FuYUNhcmRbXSA9IFtdO1xuICAgICAgICBcbiAgICAgICAgZm9yIChsZXQgcHJvamVjdCBvZiBwcm9qZWN0cykge1xuICAgICAgICAgICAgLy8gXCJwcm9qZWN0XCIgaGVyZSBpcyBhbiBhcnJheWxpa2UgY29udGFpbmluZzpcbiAgICAgICAgICAgIC8vIDAgLSB0aGUgcHJvamVjdCBhZGRyZXNzXG4gICAgICAgICAgICAvLyAxIC0gdGhlIGRlcGxveWVyLCB3aGljaCB3ZSBkZ2FmIGFib3V0XG4gICAgICAgICAgICAvLyAyIC0gdGhlIHZpc2liaWxpdHkgb2YgdGhlIHByb2plY3QsIHdoaWNoIGlzIGlycmVsZXZhbnQgaGVyZVxuICAgICAgICAgICAgLy8gMyAtIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcHJvamVjdFxuICAgICAgICAgICAgY29uc3QgcHJvaiA9IG5ldyBDb250cmFjdChcbiAgICAgICAgICAgICAgICBwcm9qZWN0LmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIG93bmVyKSB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSlcIixcbiAgICAgICAgICAgICAgICAgICAgXCJmdW5jdGlvbiBuYW1lKCkgdmlldyByZXR1cm5zIChzdHJpbmcpXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb24gc3ltYm9sKCkgdmlldyByZXR1cm5zIChzdHJpbmcpXCJcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIEthbmFsb2FBUEkud2FsbGV0XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBOT1RFL1RPRE86IFRoZSBtb3N0IGlubmVmZmljaWVudCB3YXkgdG8gZG8gdGhpc1xuICAgICAgICAgICAgLy8gTW92ZSB0byBhIHN1YmdyYXBoIGFuZCBhIFByb21pc2UuYWxsIGluIHByb2R1Y3Rpb25cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBwcm9qLmJhbGFuY2VPZihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCAoYXdhaXQgS2FuYWxvYUFQSS5zaWduZXIpPy5nZXRBZGRyZXNzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKSAhPSAwXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkZHJlc3M6IHN0cmluZyA9IHByb2plY3QuYWRkcmVzcztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZTogc3RyaW5nID0gcHJvamVjdC5wcm9qZWN0O1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5wdXNoKG5ldyBLYW5hQ2FyZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJDb250cmFjdHNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiBgL3Byb2plY3RzLyR7YWRkcmVzc31gXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogYWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9qZWN0LmRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXRlbXMgPSByZXNwb25zZTtcbiAgICB9XG4gICAgICBcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPGgxPk15IFByb2plY3RzPC9oMT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkc1wiPlxuICAgICAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgICAgICAgIHdoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IGh0bWxgPGxvYWRpbmctaWNvbj48L2xvYWRpbmctaWNvbj5gLFxuICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4gcmVwZWF0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGspID0+IGsubmFtZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjKSA9PiBodG1sYCR7Y31gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8YSBocmVmPVwibmV3LXByb2plY3RcIj5cbiAgICAgICAgICAgICAgICA8a2FuYS1idXR0b24+Q3JlYXRlIG5ldyBwcm9qZWN0PC9rYW5hLWJ1dHRvbj5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgYDtcbiAgICB9XG59XG4iLCJpbXBvcnR7bm90RXF1YWwgYXMgdH1mcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnRcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NvbnN0IHM9e0lOSVRJQUw6MCxQRU5ESU5HOjEsQ09NUExFVEU6MixFUlJPUjozfSxpPVN5bWJvbCgpO2NsYXNzIGh7Z2V0IHRhc2tDb21wbGV0ZSgpe3JldHVybiB0aGlzLnR8fCgxPT09dGhpcy5zdGF0dXM/dGhpcy50PW5ldyBQcm9taXNlKCgodCxzKT0+e3RoaXMuaT10LHRoaXMubz1zfSkpOjM9PT10aGlzLnN0YXR1cz90aGlzLnQ9UHJvbWlzZS5yZWplY3QodGhpcy5oKTp0aGlzLnQ9UHJvbWlzZS5yZXNvbHZlKHRoaXMubCkpLHRoaXMudH1jb25zdHJ1Y3Rvcih0LHMsaSl7dGhpcy51PTAsdGhpcy5zdGF0dXM9MCwodGhpcy5wPXQpLmFkZENvbnRyb2xsZXIodGhpcyk7Y29uc3QgaD1cIm9iamVjdFwiPT10eXBlb2Ygcz9zOnt0YXNrOnMsYXJnczppfTt0aGlzLl89aC50YXNrLHRoaXMudj1oLmFyZ3MsdGhpcy5qPWguYXJnc0VxdWFsPz9yLHRoaXMubT1oLm9uQ29tcGxldGUsdGhpcy5nPWgub25FcnJvcix0aGlzLmF1dG9SdW49aC5hdXRvUnVuPz8hMCxcImluaXRpYWxWYWx1ZVwiaW4gaCYmKHRoaXMubD1oLmluaXRpYWxWYWx1ZSx0aGlzLnN0YXR1cz0yLHRoaXMuaz10aGlzLkE/LigpKX1ob3N0VXBkYXRlKCl7ITA9PT10aGlzLmF1dG9SdW4mJnRoaXMuTygpfWhvc3RVcGRhdGVkKCl7XCJhZnRlclVwZGF0ZVwiPT09dGhpcy5hdXRvUnVuJiZ0aGlzLk8oKX1BKCl7aWYodm9pZCAwPT09dGhpcy52KXJldHVybjtjb25zdCB0PXRoaXMudigpO2lmKCFBcnJheS5pc0FycmF5KHQpKXRocm93IEVycm9yKFwiVGhlIGFyZ3MgZnVuY3Rpb24gbXVzdCByZXR1cm4gYW4gYXJyYXlcIik7cmV0dXJuIHR9YXN5bmMgTygpe2NvbnN0IHQ9dGhpcy5BKCkscz10aGlzLms7dGhpcy5rPXQsdD09PXN8fHZvaWQgMD09PXR8fHZvaWQgMCE9PXMmJnRoaXMuaihzLHQpfHxhd2FpdCB0aGlzLnJ1bih0KX1hc3luYyBydW4odCl7bGV0IHMsaDt0Pz89dGhpcy5BKCksdGhpcy5rPXQsMT09PXRoaXMuc3RhdHVzP3RoaXMuVD8uYWJvcnQoKToodGhpcy50PXZvaWQgMCx0aGlzLmk9dm9pZCAwLHRoaXMubz12b2lkIDApLHRoaXMuc3RhdHVzPTEsXCJhZnRlclVwZGF0ZVwiPT09dGhpcy5hdXRvUnVuP3F1ZXVlTWljcm90YXNrKCgoKT0+dGhpcy5wLnJlcXVlc3RVcGRhdGUoKSkpOnRoaXMucC5yZXF1ZXN0VXBkYXRlKCk7Y29uc3Qgcj0rK3RoaXMudTt0aGlzLlQ9bmV3IEFib3J0Q29udHJvbGxlcjtsZXQgZT0hMTt0cnl7cz1hd2FpdCB0aGlzLl8odCx7c2lnbmFsOnRoaXMuVC5zaWduYWx9KX1jYXRjaCh0KXtlPSEwLGg9dH1pZih0aGlzLnU9PT1yKXtpZihzPT09aSl0aGlzLnN0YXR1cz0wO2Vsc2V7aWYoITE9PT1lKXt0cnl7dGhpcy5tPy4ocyl9Y2F0Y2h7fXRoaXMuc3RhdHVzPTIsdGhpcy5pPy4ocyl9ZWxzZXt0cnl7dGhpcy5nPy4oaCl9Y2F0Y2h7fXRoaXMuc3RhdHVzPTMsdGhpcy5vPy4oaCl9dGhpcy5sPXMsdGhpcy5oPWh9dGhpcy5wLnJlcXVlc3RVcGRhdGUoKX19YWJvcnQodCl7MT09PXRoaXMuc3RhdHVzJiZ0aGlzLlQ/LmFib3J0KHQpfWdldCB2YWx1ZSgpe3JldHVybiB0aGlzLmx9Z2V0IGVycm9yKCl7cmV0dXJuIHRoaXMuaH1yZW5kZXIodCl7c3dpdGNoKHRoaXMuc3RhdHVzKXtjYXNlIDA6cmV0dXJuIHQuaW5pdGlhbD8uKCk7Y2FzZSAxOnJldHVybiB0LnBlbmRpbmc/LigpO2Nhc2UgMjpyZXR1cm4gdC5jb21wbGV0ZT8uKHRoaXMudmFsdWUpO2Nhc2UgMzpyZXR1cm4gdC5lcnJvcj8uKHRoaXMuZXJyb3IpO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJVbmV4cGVjdGVkIHN0YXR1czogXCIrdGhpcy5zdGF0dXMpfX19Y29uc3Qgcj0ocyxpKT0+cz09PWl8fHMubGVuZ3RoPT09aS5sZW5ndGgmJnMuZXZlcnkoKChzLGgpPT4hdChzLGlbaF0pKSk7ZXhwb3J0e2ggYXMgVGFzayxzIGFzIFRhc2tTdGF0dXMsaSBhcyBpbml0aWFsU3RhdGUsciBhcyBzaGFsbG93QXJyYXlFcXVhbHN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFzay5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwsIGNzcywgTGl0RWxlbWVudCB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQgfSBmcm9tIFwibGl0L2RlY29yYXRvcnMuanNcIjtcblxuQGN1c3RvbUVsZW1lbnQoXCJrYW5hLXdpbmRvd2xldFwiKVxuZXhwb3J0IGNsYXNzIEthbmFsb2FXaW5kb3dsZXQgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWZvcmVncm91bmQtY29sb3IpO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDFyZW07XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDFyZW07XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGZsZXg6IDEgMSBhdXRvO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMzJyZW07XG4gICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzogMCA0cHggNnB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgXG4gICAgICAgIF1cbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgYDtcbiAgICB9XG59IiwiZnVuY3Rpb24gdG9BcnJheShvYmplY3RPckFycmF5KSB7XG4gIG9iamVjdE9yQXJyYXkgPSBvYmplY3RPckFycmF5IHx8IFtdO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShvYmplY3RPckFycmF5KSA/IG9iamVjdE9yQXJyYXkgOiBbb2JqZWN0T3JBcnJheV07XG59XG5cbmZ1bmN0aW9uIGxvZyhtc2cpIHtcbiAgcmV0dXJuIGBbVmFhZGluLlJvdXRlcl0gJHttc2d9YDtcbn1cblxuZnVuY3Rpb24gbG9nVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgfVxuXG4gIGNvbnN0IHN0cmluZ1R5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLm1hdGNoKC8gKC4qKVxcXSQvKVsxXTtcbiAgaWYgKHN0cmluZ1R5cGUgPT09ICdPYmplY3QnIHx8IHN0cmluZ1R5cGUgPT09ICdBcnJheScpIHtcbiAgICByZXR1cm4gYCR7c3RyaW5nVHlwZX0gJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyaW5nVHlwZTtcbiAgfVxufVxuXG5jb25zdCBNT0RVTEUgPSAnbW9kdWxlJztcbmNvbnN0IE5PTU9EVUxFID0gJ25vbW9kdWxlJztcbmNvbnN0IGJ1bmRsZUtleXMgPSBbTU9EVUxFLCBOT01PRFVMRV07XG5cbmZ1bmN0aW9uIGVuc3VyZUJ1bmRsZShzcmMpIHtcbiAgaWYgKCFzcmMubWF0Y2goLy4rXFwuW21dP2pzJC8pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgbG9nKGBVbnN1cHBvcnRlZCB0eXBlIGZvciBidW5kbGUgXCIke3NyY31cIjogLmpzIG9yIC5tanMgZXhwZWN0ZWQuYClcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVJvdXRlKHJvdXRlKSB7XG4gIGlmICghcm91dGUgfHwgIWlzU3RyaW5nKHJvdXRlLnBhdGgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgbG9nKGBFeHBlY3RlZCByb3V0ZSBjb25maWcgdG8gYmUgYW4gb2JqZWN0IHdpdGggYSBcInBhdGhcIiBzdHJpbmcgcHJvcGVydHksIG9yIGFuIGFycmF5IG9mIHN1Y2ggb2JqZWN0c2ApXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGJ1bmRsZSA9IHJvdXRlLmJ1bmRsZTtcblxuICBjb25zdCBzdHJpbmdLZXlzID0gWydjb21wb25lbnQnLCAncmVkaXJlY3QnLCAnYnVuZGxlJ107XG4gIGlmIChcbiAgICAhaXNGdW5jdGlvbihyb3V0ZS5hY3Rpb24pICYmXG4gICAgIUFycmF5LmlzQXJyYXkocm91dGUuY2hpbGRyZW4pICYmXG4gICAgIWlzRnVuY3Rpb24ocm91dGUuY2hpbGRyZW4pICYmXG4gICAgIWlzT2JqZWN0KGJ1bmRsZSkgJiZcbiAgICAhc3RyaW5nS2V5cy5zb21lKGtleSA9PiBpc1N0cmluZyhyb3V0ZVtrZXldKSlcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgbG9nKFxuICAgICAgICBgRXhwZWN0ZWQgcm91dGUgY29uZmlnIFwiJHtyb3V0ZS5wYXRofVwiIHRvIGluY2x1ZGUgZWl0aGVyIFwiJHtzdHJpbmdLZXlzLmpvaW4oJ1wiLCBcIicpfVwiIGAgK1xuICAgICAgICBgb3IgXCJhY3Rpb25cIiBmdW5jdGlvbiBidXQgbm9uZSBmb3VuZC5gXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIGlmIChidW5kbGUpIHtcbiAgICBpZiAoaXNTdHJpbmcoYnVuZGxlKSkge1xuICAgICAgZW5zdXJlQnVuZGxlKGJ1bmRsZSk7XG4gICAgfSBlbHNlIGlmICghYnVuZGxlS2V5cy5zb21lKGtleSA9PiBrZXkgaW4gYnVuZGxlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBsb2coJ0V4cGVjdGVkIHJvdXRlIGJ1bmRsZSB0byBpbmNsdWRlIGVpdGhlciBcIicgKyBOT01PRFVMRSArICdcIiBvciBcIicgKyBNT0RVTEUgKyAnXCIga2V5cywgb3IgYm90aCcpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBidW5kbGVLZXlzLmZvckVhY2goa2V5ID0+IGtleSBpbiBidW5kbGUgJiYgZW5zdXJlQnVuZGxlKGJ1bmRsZVtrZXldKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJvdXRlLnJlZGlyZWN0KSB7XG4gICAgWydidW5kbGUnLCAnY29tcG9uZW50J10uZm9yRWFjaChvdmVycmlkZGVuUHJvcCA9PiB7XG4gICAgICBpZiAob3ZlcnJpZGRlblByb3AgaW4gcm91dGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGxvZyhcbiAgICAgICAgICAgIGBSb3V0ZSBjb25maWcgXCIke3JvdXRlLnBhdGh9XCIgaGFzIGJvdGggXCJyZWRpcmVjdFwiIGFuZCBcIiR7b3ZlcnJpZGRlblByb3B9XCIgcHJvcGVydGllcywgYCArXG4gICAgICAgICAgICBgYW5kIFwicmVkaXJlY3RcIiB3aWxsIGFsd2F5cyBvdmVycmlkZSB0aGUgbGF0dGVyLiBEaWQgeW91IG1lYW4gdG8gb25seSB1c2UgXCIke292ZXJyaWRkZW5Qcm9wfVwiP2BcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5zdXJlUm91dGVzKHJvdXRlcykge1xuICB0b0FycmF5KHJvdXRlcykuZm9yRWFjaChyb3V0ZSA9PiBlbnN1cmVSb3V0ZShyb3V0ZSkpO1xufVxuXG5mdW5jdGlvbiBsb2FkU2NyaXB0KHNyYywga2V5KSB7XG4gIGxldCBzY3JpcHQgPSBkb2N1bWVudC5oZWFkLnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdFtzcmM9XCInICsgc3JjICsgJ1wiXVthc3luY10nKTtcbiAgaWYgKCFzY3JpcHQpIHtcbiAgICBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHQuc2V0QXR0cmlidXRlKCdzcmMnLCBzcmMpO1xuICAgIGlmIChrZXkgPT09IE1PRFVMRSkge1xuICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgndHlwZScsIE1PRFVMRSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IE5PTU9EVUxFKSB7XG4gICAgICBzY3JpcHQuc2V0QXR0cmlidXRlKE5PTU9EVUxFLCAnJyk7XG4gICAgfVxuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gc2NyaXB0Lm9ubG9hZCA9IGUgPT4ge1xuICAgICAgc2NyaXB0Ll9fZHluYW1pY0ltcG9ydExvYWRlZCA9IHRydWU7XG4gICAgICByZXNvbHZlKGUpO1xuICAgIH07XG4gICAgc2NyaXB0Lm9uZXJyb3IgPSBlID0+IHtcbiAgICAgIGlmIChzY3JpcHQucGFyZW50Tm9kZSkge1xuICAgICAgICBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGUpO1xuICAgIH07XG4gICAgaWYgKHNjcmlwdC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfSBlbHNlIGlmIChzY3JpcHQuX19keW5hbWljSW1wb3J0TG9hZGVkKSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gbG9hZEJ1bmRsZShidW5kbGUpIHtcbiAgaWYgKGlzU3RyaW5nKGJ1bmRsZSkpIHtcbiAgICByZXR1cm4gbG9hZFNjcmlwdChidW5kbGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBQcm9taXNlLnJhY2UoXG4gICAgICBidW5kbGVLZXlzXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+IGtleSBpbiBidW5kbGUpXG4gICAgICAgIC5tYXAoa2V5ID0+IGxvYWRTY3JpcHQoYnVuZGxlW2tleV0sIGtleSkpXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaXJlUm91dGVyRXZlbnQodHlwZSwgZGV0YWlsKSB7XG4gIHJldHVybiAhd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFxuICAgIGB2YWFkaW4tcm91dGVyLSR7dHlwZX1gLFxuICAgIHtjYW5jZWxhYmxlOiB0eXBlID09PSAnZ28nLCBkZXRhaWx9XG4gICkpO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChvKSB7XG4gIC8vIGd1YXJkIGFnYWluc3QgbnVsbCBwYXNzaW5nIHRoZSB0eXBlb2YgY2hlY2tcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiAhIW87XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oZikge1xuICByZXR1cm4gdHlwZW9mIGYgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBzID09PSAnc3RyaW5nJztcbn1cblxuZnVuY3Rpb24gZ2V0Tm90Rm91bmRFcnJvcihjb250ZXh0KSB7XG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGxvZyhgUGFnZSBub3QgZm91bmQgKCR7Y29udGV4dC5wYXRobmFtZX0pYCkpO1xuICBlcnJvci5jb250ZXh0ID0gY29udGV4dDtcbiAgZXJyb3IuY29kZSA9IDQwNDtcbiAgcmV0dXJuIGVycm9yO1xufVxuXG5jb25zdCBub3RGb3VuZFJlc3VsdCA9IG5ldyAoY2xhc3MgTm90Rm91bmRSZXN1bHQge30pKCk7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBjb3ZlcmFnZSBpcyBjYWxjdWxhdGVkIGluIENocm9tZSwgdGhpcyBjb2RlIGlzIGZvciBJRSAqL1xuZnVuY3Rpb24gZ2V0QW5jaG9yT3JpZ2luKGFuY2hvcikge1xuICAvLyBJRTExOiBvbiBIVFRQIGFuZCBIVFRQUyB0aGUgZGVmYXVsdCBwb3J0IGlzIG5vdCBpbmNsdWRlZCBpbnRvXG4gIC8vIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sIHNvIHdvbid0IGluY2x1ZGUgaXQgaGVyZSBlaXRoZXIuXG4gIGNvbnN0IHBvcnQgPSBhbmNob3IucG9ydDtcbiAgY29uc3QgcHJvdG9jb2wgPSBhbmNob3IucHJvdG9jb2w7XG4gIGNvbnN0IGRlZmF1bHRIdHRwID0gcHJvdG9jb2wgPT09ICdodHRwOicgJiYgcG9ydCA9PT0gJzgwJztcbiAgY29uc3QgZGVmYXVsdEh0dHBzID0gcHJvdG9jb2wgPT09ICdodHRwczonICYmIHBvcnQgPT09ICc0NDMnO1xuICBjb25zdCBob3N0ID0gKGRlZmF1bHRIdHRwIHx8IGRlZmF1bHRIdHRwcylcbiAgICA/IGFuY2hvci5ob3N0bmFtZSAvLyBkb2VzIG5vdCBpbmNsdWRlIHRoZSBwb3J0IG51bWJlciAoZS5nLiB3d3cuZXhhbXBsZS5vcmcpXG4gICAgOiBhbmNob3IuaG9zdDsgLy8gZG9lcyBpbmNsdWRlIHRoZSBwb3J0IG51bWJlciAoZS5nLiB3d3cuZXhhbXBsZS5vcmc6ODApXG4gIHJldHVybiBgJHtwcm90b2NvbH0vLyR7aG9zdH1gO1xufVxuXG4vLyBUaGUgbGlzdCBvZiBjaGVja3MgaXMgbm90IGNvbXBsZXRlOlxuLy8gIC0gU1ZHIHN1cHBvcnQgaXMgbWlzc2luZ1xuLy8gIC0gdGhlICdyZWwnIGF0dHJpYnV0ZSBpcyBub3QgY29uc2lkZXJlZFxuZnVuY3Rpb24gdmFhZGluUm91dGVyR2xvYmFsQ2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gIC8vIGlnbm9yZSB0aGUgY2xpY2sgaWYgdGhlIGRlZmF1bHQgYWN0aW9uIGlzIHByZXZlbnRlZFxuICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGlnbm9yZSB0aGUgY2xpY2sgaWYgbm90IHdpdGggdGhlIHByaW1hcnkgbW91c2UgYnV0dG9uXG4gIGlmIChldmVudC5idXR0b24gIT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBpZ25vcmUgdGhlIGNsaWNrIGlmIGEgbW9kaWZpZXIga2V5IGlzIHByZXNzZWRcbiAgaWYgKGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50Lm1ldGFLZXkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBmaW5kIHRoZSA8YT4gZWxlbWVudCB0aGF0IHRoZSBjbGljayBpcyBhdCAob3Igd2l0aGluKVxuICBsZXQgYW5jaG9yID0gZXZlbnQudGFyZ2V0O1xuICBjb25zdCBwYXRoID0gZXZlbnQuY29tcG9zZWRQYXRoXG4gICAgPyBldmVudC5jb21wb3NlZFBhdGgoKVxuICAgIDogKGV2ZW50LnBhdGggfHwgW10pO1xuXG4gIC8vIEZJWE1FKHdlYi1wYWRhd2FuKTogYFN5bWJvbC5pdGVyYXRvcmAgdXNlZCBieSB3ZWJjb21wb25lbnRzanMgaXMgYnJva2VuIGZvciBhcnJheXNcbiAgLy8gZXhhbXBsZSB0byBjaGVjazogYGZvci4uLm9mYCBsb29wIGhlcmUgdGhyb3dzIHRoZSBcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIiBlcnJvclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB0YXJnZXQgPSBwYXRoW2ldO1xuICAgIGlmICh0YXJnZXQubm9kZU5hbWUgJiYgdGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhJykge1xuICAgICAgYW5jaG9yID0gdGFyZ2V0O1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgd2hpbGUgKGFuY2hvciAmJiBhbmNob3Iubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2EnKSB7XG4gICAgYW5jaG9yID0gYW5jaG9yLnBhcmVudE5vZGU7XG4gIH1cblxuICAvLyBpZ25vcmUgdGhlIGNsaWNrIGlmIG5vdCBhdCBhbiA8YT4gZWxlbWVudFxuICBpZiAoIWFuY2hvciB8fCBhbmNob3Iubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2EnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gaWdub3JlIHRoZSBjbGljayBpZiB0aGUgPGE+IGVsZW1lbnQgaGFzIGEgbm9uLWRlZmF1bHQgdGFyZ2V0XG4gIGlmIChhbmNob3IudGFyZ2V0ICYmIGFuY2hvci50YXJnZXQudG9Mb3dlckNhc2UoKSAhPT0gJ19zZWxmJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGlnbm9yZSB0aGUgY2xpY2sgaWYgdGhlIDxhPiBlbGVtZW50IGhhcyB0aGUgJ2Rvd25sb2FkJyBhdHRyaWJ1dGVcbiAgaWYgKGFuY2hvci5oYXNBdHRyaWJ1dGUoJ2Rvd25sb2FkJykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBpZ25vcmUgdGhlIGNsaWNrIGlmIHRoZSA8YT4gZWxlbWVudCBoYXMgdGhlICdyb3V0ZXItaWdub3JlJyBhdHRyaWJ1dGVcbiAgaWYgKGFuY2hvci5oYXNBdHRyaWJ1dGUoJ3JvdXRlci1pZ25vcmUnKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGlnbm9yZSB0aGUgY2xpY2sgaWYgdGhlIHRhcmdldCBVUkwgaXMgYSBmcmFnbWVudCBvbiB0aGUgY3VycmVudCBwYWdlXG4gIGlmIChhbmNob3IucGF0aG5hbWUgPT09IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSAmJiBhbmNob3IuaGFzaCAhPT0gJycpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBpZ25vcmUgdGhlIGNsaWNrIGlmIHRoZSB0YXJnZXQgaXMgZXh0ZXJuYWwgdG8gdGhlIGFwcFxuICAvLyBJbiBJRTExIEhUTUxBbmNob3JFbGVtZW50IGRvZXMgbm90IGhhdmUgdGhlIGBvcmlnaW5gIHByb3BlcnR5XG4gIGNvbnN0IG9yaWdpbiA9IGFuY2hvci5vcmlnaW4gfHwgZ2V0QW5jaG9yT3JpZ2luKGFuY2hvcik7XG4gIGlmIChvcmlnaW4gIT09IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBpZiBub25lIG9mIHRoZSBhYm92ZSwgY29udmVydCB0aGUgY2xpY2sgaW50byBhIG5hdmlnYXRpb24gZXZlbnRcbiAgY29uc3Qge3BhdGhuYW1lLCBzZWFyY2gsIGhhc2h9ID0gYW5jaG9yO1xuICBpZiAoZmlyZVJvdXRlckV2ZW50KCdnbycsIHtwYXRobmFtZSwgc2VhcmNoLCBoYXNofSkpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIC8vIGZvciBhIGNsaWNrIGV2ZW50LCB0aGUgc2Nyb2xsIGlzIHJlc2V0IHRvIHRoZSB0b3AgcG9zaXRpb24uXG4gICAgaWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBIG5hdmlnYXRpb24gdHJpZ2dlciBmb3IgVmFhZGluIFJvdXRlciB0aGF0IHRyYW5zbGF0ZWQgY2xpY2tzIG9uIGA8YT5gIGxpbmtzXG4gKiBpbnRvIFZhYWRpbiBSb3V0ZXIgbmF2aWdhdGlvbiBldmVudHMuXG4gKlxuICogT25seSByZWd1bGFyIGNsaWNrcyBvbiBpbi1hcHAgbGlua3MgYXJlIHRyYW5zbGF0ZWQgKHByaW1hcnkgbW91c2UgYnV0dG9uLCBub1xuICogbW9kaWZpZXIga2V5cywgdGhlIHRhcmdldCBocmVmIGlzIHdpdGhpbiB0aGUgYXBwJ3MgVVJMIHNwYWNlKS5cbiAqXG4gKiBAbWVtYmVyT2YgUm91dGVyLk5hdmlnYXRpb25UcmlnZ2VyXG4gKiBAdHlwZSB7TmF2aWdhdGlvblRyaWdnZXJ9XG4gKi9cbmNvbnN0IENMSUNLID0ge1xuICBhY3RpdmF0ZSgpIHtcbiAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB2YWFkaW5Sb3V0ZXJHbG9iYWxDbGlja0hhbmRsZXIpO1xuICB9LFxuXG4gIGluYWN0aXZhdGUoKSB7XG4gICAgd2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdmFhZGluUm91dGVyR2xvYmFsQ2xpY2tIYW5kbGVyKTtcbiAgfVxufTtcblxuLy8gUG9wU3RhdGVFdmVudCBjb25zdHJ1Y3RvciBzaGltXG5jb25zdCBpc0lFID0gL1RyaWRlbnQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBjb3ZlcmFnZSBpcyBjYWxjdWxhdGVkIGluIENocm9tZSwgdGhpcyBjb2RlIGlzIGZvciBJRSAqL1xuaWYgKGlzSUUgJiYgIWlzRnVuY3Rpb24od2luZG93LlBvcFN0YXRlRXZlbnQpKSB7XG4gIHdpbmRvdy5Qb3BTdGF0ZUV2ZW50ID0gZnVuY3Rpb24oaW5UeXBlLCBwYXJhbXMpIHtcbiAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBlLmluaXRFdmVudChpblR5cGUsIEJvb2xlYW4ocGFyYW1zLmJ1YmJsZXMpLCBCb29sZWFuKHBhcmFtcy5jYW5jZWxhYmxlKSk7XG4gICAgZS5zdGF0ZSA9IHBhcmFtcy5zdGF0ZSB8fCBudWxsO1xuICAgIHJldHVybiBlO1xuICB9O1xuICB3aW5kb3cuUG9wU3RhdGVFdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xufVxuXG5mdW5jdGlvbiB2YWFkaW5Sb3V0ZXJHbG9iYWxQb3BzdGF0ZUhhbmRsZXIoZXZlbnQpIHtcbiAgaWYgKGV2ZW50LnN0YXRlID09PSAndmFhZGluLXJvdXRlci1pZ25vcmUnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHtwYXRobmFtZSwgc2VhcmNoLCBoYXNofSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgZmlyZVJvdXRlckV2ZW50KCdnbycsIHtwYXRobmFtZSwgc2VhcmNoLCBoYXNofSk7XG59XG5cbi8qKlxuICogQSBuYXZpZ2F0aW9uIHRyaWdnZXIgZm9yIFZhYWRpbiBSb3V0ZXIgdGhhdCB0cmFuc2xhdGVzIHBvcHN0YXRlIGV2ZW50cyBpbnRvXG4gKiBWYWFkaW4gUm91dGVyIG5hdmlnYXRpb24gZXZlbnRzLlxuICpcbiAqIEBtZW1iZXJPZiBSb3V0ZXIuTmF2aWdhdGlvblRyaWdnZXJcbiAqIEB0eXBlIHtOYXZpZ2F0aW9uVHJpZ2dlcn1cbiAqL1xuY29uc3QgUE9QU1RBVEUgPSB7XG4gIGFjdGl2YXRlKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHZhYWRpblJvdXRlckdsb2JhbFBvcHN0YXRlSGFuZGxlcik7XG4gIH0sXG5cbiAgaW5hY3RpdmF0ZSgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCB2YWFkaW5Sb3V0ZXJHbG9iYWxQb3BzdGF0ZUhhbmRsZXIpO1xuICB9XG59O1xuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xudmFyIHBhdGhUb1JlZ2V4cF8xID0gcGF0aFRvUmVnZXhwJDE7XG52YXIgcGFyc2VfMSA9IHBhcnNlO1xudmFyIGNvbXBpbGVfMSA9IGNvbXBpbGU7XG52YXIgdG9rZW5zVG9GdW5jdGlvbl8xID0gdG9rZW5zVG9GdW5jdGlvbjtcbnZhciB0b2tlbnNUb1JlZ0V4cF8xID0gdG9rZW5zVG9SZWdFeHA7XG5cbi8qKlxuICogRGVmYXVsdCBjb25maWdzLlxuICovXG52YXIgREVGQVVMVF9ERUxJTUlURVIgPSAnLyc7XG52YXIgREVGQVVMVF9ERUxJTUlURVJTID0gJy4vJztcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIjp0ZXN0KFxcXFxkKyk/XCIgPT4gW1widGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIl1cbiAgLy8gXCIoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWRdXG4gICcoPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT8nXG5dLmpvaW4oJ3wnKSwgJ2cnKTtcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIga2V5ID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHBhdGggPSAnJztcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSAob3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlcikgfHwgREVGQVVMVF9ERUxJTUlURVI7XG4gIHZhciBkZWxpbWl0ZXJzID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXJzKSB8fCBERUZBVUxUX0RFTElNSVRFUlM7XG4gIHZhciBwYXRoRXNjYXBlZCA9IGZhbHNlO1xuICB2YXIgcmVzO1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdO1xuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdO1xuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXg7XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldCk7XG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aDtcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV07XG4gICAgICBwYXRoRXNjYXBlZCA9IHRydWU7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBwcmV2ID0gJyc7XG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdO1xuICAgIHZhciBuYW1lID0gcmVzWzJdO1xuICAgIHZhciBjYXB0dXJlID0gcmVzWzNdO1xuICAgIHZhciBncm91cCA9IHJlc1s0XTtcbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNV07XG5cbiAgICBpZiAoIXBhdGhFc2NhcGVkICYmIHBhdGgubGVuZ3RoKSB7XG4gICAgICB2YXIgayA9IHBhdGgubGVuZ3RoIC0gMTtcblxuICAgICAgaWYgKGRlbGltaXRlcnMuaW5kZXhPZihwYXRoW2tdKSA+IC0xKSB7XG4gICAgICAgIHByZXYgPSBwYXRoW2tdO1xuICAgICAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBrKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKTtcbiAgICAgIHBhdGggPSAnJztcbiAgICAgIHBhdGhFc2NhcGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmV2ICE9PSAnJyAmJiBuZXh0ICE9PSB1bmRlZmluZWQgJiYgbmV4dCAhPT0gcHJldjtcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonO1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJztcbiAgICB2YXIgZGVsaW1pdGVyID0gcHJldiB8fCBkZWZhdWx0RGVsaW1pdGVyO1xuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cDtcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZXYsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nXG4gICAgfSk7XG4gIH1cblxuICAvLyBQdXNoIGFueSByZW1haW5pbmcgY2hhcmFjdGVycy5cbiAgaWYgKHBhdGggfHwgaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aCArIHN0ci5zdWJzdHIoaW5kZXgpKTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aCk7XG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhLCBvcHRpb25zKSB7XG4gICAgdmFyIHBhdGggPSAnJztcbiAgICB2YXIgZW5jb2RlID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUpIHx8IGVuY29kZVVSSUNvbXBvbmVudDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW47XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGEgPyBkYXRhW3Rva2VuLm5hbWVdIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHNlZ21lbnQ7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IGdvdCBhcnJheScpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSBjb250aW51ZVxuXG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0sIHRva2VuKTtcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHNlZ21lbnQgPSBlbmNvZGUoU3RyaW5nKHZhbHVlKSwgdG9rZW4pO1xuXG4gICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgZ290IFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgICB9XG5cbiAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50O1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSBwYXRoICs9IHRva2VuLnByZWZpeDtcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlICcgKyAodG9rZW4ucmVwZWF0ID8gJ2FuIGFycmF5JyA6ICdhIHN0cmluZycpKVxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheT19ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICBpZiAoIWtleXMpIHJldHVybiBwYXRoXG5cbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpO1xuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXRoXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXk9fSAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cCQxKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXk9fSAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgdG9rZW5zXG4gKiBAcGFyYW0gIHtBcnJheT19ICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdDtcbiAgdmFyIHN0YXJ0ID0gb3B0aW9ucy5zdGFydCAhPT0gZmFsc2U7XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2U7XG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgREVGQVVMVF9ERUxJTUlURVIpO1xuICB2YXIgZGVsaW1pdGVycyA9IG9wdGlvbnMuZGVsaW1pdGVycyB8fCBERUZBVUxUX0RFTElNSVRFUlM7XG4gIHZhciBlbmRzV2l0aCA9IFtdLmNvbmNhdChvcHRpb25zLmVuZHNXaXRoIHx8IFtdKS5tYXAoZXNjYXBlU3RyaW5nKS5jb25jYXQoJyQnKS5qb2luKCd8Jyk7XG4gIHZhciByb3V0ZSA9IHN0YXJ0ID8gJ14nIDogJyc7XG4gIHZhciBpc0VuZERlbGltaXRlZCA9IHRva2Vucy5sZW5ndGggPT09IDA7XG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKTtcbiAgICAgIGlzRW5kRGVsaW1pdGVkID0gaSA9PT0gdG9rZW5zLmxlbmd0aCAtIDEgJiYgZGVsaW1pdGVycy5pbmRleE9mKHRva2VuW3Rva2VuLmxlbmd0aCAtIDFdKSA+IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2FwdHVyZSA9IHRva2VuLnJlcGVhdFxuICAgICAgICA/ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpKD86JyArIGVzY2FwZVN0cmluZyh0b2tlbi5kZWxpbWl0ZXIpICsgJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJykpKidcbiAgICAgICAgOiB0b2tlbi5wYXR0ZXJuO1xuXG4gICAgICBpZiAoa2V5cykga2V5cy5wdXNoKHRva2VuKTtcblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeCkgKyAnKCcgKyBjYXB0dXJlICsgJyk/JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZSArPSAnKD86JyArIGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpICsgJygnICsgY2FwdHVyZSArICcpKT8nO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KSArICcoJyArIGNhcHR1cmUgKyAnKSc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIGlmICghc3RyaWN0KSByb3V0ZSArPSAnKD86JyArIGRlbGltaXRlciArICcpPyc7XG5cbiAgICByb3V0ZSArPSBlbmRzV2l0aCA9PT0gJyQnID8gJyQnIDogJyg/PScgKyBlbmRzV2l0aCArICcpJztcbiAgfSBlbHNlIHtcbiAgICBpZiAoIXN0cmljdCkgcm91dGUgKz0gJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JyArIGVuZHNXaXRoICsgJykpPyc7XG4gICAgaWYgKCFpc0VuZERlbGltaXRlZCkgcm91dGUgKz0gJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCcgKyBlbmRzV2l0aCArICcpJztcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVnRXhwKHJvdXRlLCBmbGFncyhvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7QXJyYXk9fSAgICAgICAgICAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCQxIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIGtleXMpXG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIGtleXMsIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwga2V5cywgb3B0aW9ucylcbn1cbnBhdGhUb1JlZ2V4cF8xLnBhcnNlID0gcGFyc2VfMTtcbnBhdGhUb1JlZ2V4cF8xLmNvbXBpbGUgPSBjb21waWxlXzE7XG5wYXRoVG9SZWdleHBfMS50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvbl8xO1xucGF0aFRvUmVnZXhwXzEudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cF8xO1xuXG4vKipcbiAqIFVuaXZlcnNhbCBSb3V0ZXIgKGh0dHBzOi8vd3d3LmtyaWFzb2Z0LmNvbS91bml2ZXJzYWwtcm91dGVyLylcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCBLcmlhc29mdC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuY29uc3Qge2hhc093blByb3BlcnR5fSA9IE9iamVjdC5wcm90b3R5cGU7XG5jb25zdCBjYWNoZSQxID0gbmV3IE1hcCgpO1xuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9pc3N1ZXMvMTQ4XG5jYWNoZSQxLnNldCgnfGZhbHNlJywge1xuICBrZXlzOiBbXSxcbiAgcGF0dGVybjogLyg/OikvXG59KTtcblxuZnVuY3Rpb24gZGVjb2RlUGFyYW0odmFsKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWwpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChyb3V0ZXBhdGgsIHBhdGgsIGV4YWN0LCBwYXJlbnRLZXlzLCBwYXJlbnRQYXJhbXMpIHtcbiAgZXhhY3QgPSAhIWV4YWN0O1xuICBjb25zdCBjYWNoZUtleSA9IGAke3JvdXRlcGF0aH18JHtleGFjdH1gO1xuICBsZXQgcmVnZXhwID0gY2FjaGUkMS5nZXQoY2FjaGVLZXkpO1xuXG4gIGlmICghcmVnZXhwKSB7XG4gICAgY29uc3Qga2V5cyA9IFtdO1xuICAgIHJlZ2V4cCA9IHtcbiAgICAgIGtleXMsXG4gICAgICBwYXR0ZXJuOiBwYXRoVG9SZWdleHBfMShyb3V0ZXBhdGgsIGtleXMsIHtcbiAgICAgICAgZW5kOiBleGFjdCxcbiAgICAgICAgc3RyaWN0OiByb3V0ZXBhdGggPT09ICcnXG4gICAgICB9KSxcbiAgICB9O1xuICAgIGNhY2hlJDEuc2V0KGNhY2hlS2V5LCByZWdleHApO1xuICB9XG5cbiAgY29uc3QgbSA9IHJlZ2V4cC5wYXR0ZXJuLmV4ZWMocGF0aCk7XG4gIGlmICghbSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zKTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8IG0ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBrZXkgPSByZWdleHAua2V5c1tpIC0gMV07XG4gICAgY29uc3QgcHJvcCA9IGtleS5uYW1lO1xuICAgIGNvbnN0IHZhbHVlID0gbVtpXTtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChwYXJhbXMsIHByb3ApKSB7XG4gICAgICBpZiAoa2V5LnJlcGVhdCkge1xuICAgICAgICBwYXJhbXNbcHJvcF0gPSB2YWx1ZSA/IHZhbHVlLnNwbGl0KGtleS5kZWxpbWl0ZXIpLm1hcChkZWNvZGVQYXJhbSkgOiBbXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtc1twcm9wXSA9IHZhbHVlID8gZGVjb2RlUGFyYW0odmFsdWUpIDogdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBtWzBdLFxuICAgIGtleXM6IChwYXJlbnRLZXlzIHx8IFtdKS5jb25jYXQocmVnZXhwLmtleXMpLFxuICAgIHBhcmFtcyxcbiAgfTtcbn1cblxuLyoqXG4gKiBVbml2ZXJzYWwgUm91dGVyIChodHRwczovL3d3dy5rcmlhc29mdC5jb20vdW5pdmVyc2FsLXJvdXRlci8pXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQgS3JpYXNvZnQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qKlxuICogVHJhdmVyc2VzIHRoZSByb3V0ZXMgdHJlZSBhbmQgbWF0Y2hlcyBpdHMgbm9kZXMgdG8gdGhlIGdpdmVuIHBhdGhuYW1lIGZyb21cbiAqIHRoZSByb290IGRvd24gdG8gdGhlIGxlYXZlcy4gRWFjaCBtYXRjaCBjb25zdW1lcyBhIHBhcnQgb2YgdGhlIHBhdGhuYW1lIGFuZFxuICogdGhlIG1hdGNoaW5nIHByb2Nlc3MgY29udGludWVzIGZvciBhcyBsb25nIGFzIHRoZXJlIGlzIGEgbWF0Y2hpbmcgY2hpbGRcbiAqIHJvdXRlIGZvciB0aGUgcmVtYWluaW5nIHBhcnQgb2YgdGhlIHBhdGhuYW1lLlxuICpcbiAqIFRoZSByZXR1cm5lZCB2YWx1ZSBpcyBhIGxhemlseSBldmFsdWF0ZWQgaXRlcmF0b3IuXG4gKlxuICogVGhlIGxlYWRpbmcgXCIvXCIgaW4gYSByb3V0ZSBwYXRoIG1hdHRlcnMgb25seSBmb3IgdGhlIHJvb3Qgb2YgdGhlIHJvdXRlc1xuICogdHJlZSAob3IgaWYgYWxsIHBhcmVudCByb3V0ZXMgYXJlIFwiXCIpLiBJbiBhbGwgb3RoZXIgY2FzZXMgYSBsZWFkaW5nIFwiL1wiIGluXG4gKiBhIGNoaWxkIHJvdXRlIHBhdGggaGFzIG5vIHNpZ25pZmljYW5jZS5cbiAqXG4gKiBUaGUgdHJhaWxpbmcgXCIvXCIgaW4gYSBfcm91dGUgcGF0aF8gbWF0dGVycyBvbmx5IGZvciB0aGUgbGVhdmVzIG9mIHRoZVxuICogcm91dGVzIHRyZWUuIEEgbGVhZiByb3V0ZSB3aXRoIGEgdHJhaWxpbmcgXCIvXCIgbWF0Y2hlcyBvbmx5IGEgcGF0aG5hbWUgdGhhdFxuICogYWxzbyBoYXMgYSB0cmFpbGluZyBcIi9cIi5cbiAqXG4gKiBUaGUgdHJhaWxpbmcgXCIvXCIgaW4gYSByb3V0ZSBwYXRoIGRvZXMgbm90IGFmZmVjdCBtYXRjaGluZyBvZiBjaGlsZCByb3V0ZXNcbiAqIGluIGFueSB3YXkuXG4gKlxuICogVGhlIHRyYWlsaW5nIFwiL1wiIGluIGEgX3BhdGhuYW1lXyBnZW5lcmFsbHkgZG9lcyBub3QgbWF0dGVyIChleGNlcHQgZm9yXG4gKiB0aGUgY2FzZSBvZiBsZWFmIG5vZGVzIGRlc2NyaWJlZCBhYm92ZSkuXG4gKlxuICogVGhlIFwiXCIgYW5kIFwiL1wiIHJvdXRlcyBoYXZlIHNwZWNpYWwgdHJlYXRtZW50OlxuICogIDEuIGFzIGEgc2luZ2xlIHJvdXRlXG4gKiAgICAgdGhlIFwiXCIgYW5kIFwiL1wiIHJvdXRlcyBtYXRjaCBvbmx5IHRoZSBcIlwiIGFuZCBcIi9cIiBwYXRobmFtZXMgcmVzcGVjdGl2ZWx5XG4gKiAgMi4gYXMgYSBwYXJlbnQgaW4gdGhlIHJvdXRlcyB0cmVlXG4gKiAgICAgdGhlIFwiXCIgcm91dGUgbWF0Y2hlcyBhbnkgcGF0aG5hbWUgd2l0aG91dCBjb25zdW1pbmcgYW55IHBhcnQgb2YgaXRcbiAqICAgICB0aGUgXCIvXCIgcm91dGUgbWF0Y2hlcyBhbnkgYWJzb2x1dGUgcGF0aG5hbWUgY29uc3VtaW5nIGl0cyBsZWFkaW5nIFwiL1wiXG4gKiAgMy4gYXMgYSBsZWFmIGluIHRoZSByb3V0ZXMgdHJlZVxuICogICAgIHRoZSBcIlwiIGFuZCBcIi9cIiByb3V0ZXMgbWF0Y2ggb25seSBpZiB0aGUgZW50aXJlIHBhdGhuYW1lIGlzIGNvbnN1bWVkIGJ5XG4gKiAgICAgICAgIHRoZSBwYXJlbnQgcm91dGVzIGNoYWluLiBJbiB0aGlzIGNhc2UgXCJcIiBhbmQgXCIvXCIgYXJlIGVxdWl2YWxlbnQuXG4gKiAgNC4gc2V2ZXJhbCBkaXJlY3RseSBuZXN0ZWQgXCJcIiBvciBcIi9cIiByb3V0ZXNcbiAqICAgICAtIGRpcmVjdGx5IG5lc3RlZCBcIlwiIG9yIFwiL1wiIHJvdXRlcyBhcmUgJ3NxdWFzaGVkJyAoaS5lLiBuZXN0aW5nIHR3b1xuICogICAgICAgXCIvXCIgcm91dGVzIGRvZXMgbm90IHJlcXVpcmUgYSBkb3VibGUgXCIvXCIgaW4gdGhlIHBhdGhuYW1lIHRvIG1hdGNoKVxuICogICAgIC0gaWYgdGhlcmUgYXJlIG9ubHkgXCJcIiBpbiB0aGUgcGFyZW50IHJvdXRlcyBjaGFpbiwgbm8gcGFydCBvZiB0aGVcbiAqICAgICAgIHBhdGhuYW1lIGlzIGNvbnN1bWVkLCBhbmQgdGhlIGxlYWRpbmcgXCIvXCIgaW4gdGhlIGNoaWxkIHJvdXRlcycgcGF0aHNcbiAqICAgICAgIHJlbWFpbnMgc2lnbmlmaWNhbnRcbiAqXG4gKiBTaWRlIGVmZmVjdDpcbiAqICAgLSB0aGUgcm91dGVzIHRyZWUgeyBwYXRoOiAnJyB9IG1hdGNoZXMgb25seSB0aGUgJycgcGF0aG5hbWVcbiAqICAgLSB0aGUgcm91dGVzIHRyZWUgeyBwYXRoOiAnJywgY2hpbGRyZW46IFsgeyBwYXRoOiAnJyB9IF0gfSBtYXRjaGVzIGFueVxuICogICAgIHBhdGhuYW1lIChmb3IgdGhlIHRyZWUgcm9vdClcbiAqXG4gKiBQcmVmaXggbWF0Y2hpbmcgY2FuIGJlIGVuYWJsZWQgYWxzbyBieSBgY2hpbGRyZW46IHRydWVgLlxuICovXG5mdW5jdGlvbiBtYXRjaFJvdXRlKHJvdXRlLCBwYXRobmFtZSwgaWdub3JlTGVhZGluZ1NsYXNoLCBwYXJlbnRLZXlzLCBwYXJlbnRQYXJhbXMpIHtcbiAgbGV0IG1hdGNoO1xuICBsZXQgY2hpbGRNYXRjaGVzO1xuICBsZXQgY2hpbGRJbmRleCA9IDA7XG4gIGxldCByb3V0ZXBhdGggPSByb3V0ZS5wYXRoIHx8ICcnO1xuICBpZiAocm91dGVwYXRoLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgaWYgKGlnbm9yZUxlYWRpbmdTbGFzaCkge1xuICAgICAgcm91dGVwYXRoID0gcm91dGVwYXRoLnN1YnN0cigxKTtcbiAgICB9XG4gICAgaWdub3JlTGVhZGluZ1NsYXNoID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmV4dChyb3V0ZVRvU2tpcCkge1xuICAgICAgaWYgKHJvdXRlID09PSByb3V0ZVRvU2tpcCkge1xuICAgICAgICByZXR1cm4ge2RvbmU6IHRydWV9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjaGlsZHJlbiA9IHJvdXRlLl9fY2hpbGRyZW4gPSByb3V0ZS5fX2NoaWxkcmVuIHx8IHJvdXRlLmNoaWxkcmVuO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIG1hdGNoID0gbWF0Y2hQYXRoKHJvdXRlcGF0aCwgcGF0aG5hbWUsICFjaGlsZHJlbiwgcGFyZW50S2V5cywgcGFyZW50UGFyYW1zKTtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICByb3V0ZSxcbiAgICAgICAgICAgICAga2V5czogbWF0Y2gua2V5cyxcbiAgICAgICAgICAgICAgcGFyYW1zOiBtYXRjaC5wYXJhbXMsXG4gICAgICAgICAgICAgIHBhdGg6IG1hdGNoLnBhdGhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWF0Y2ggJiYgY2hpbGRyZW4pIHtcbiAgICAgICAgd2hpbGUgKGNoaWxkSW5kZXggPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoIWNoaWxkTWF0Y2hlcykge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRSb3V0ZSA9IGNoaWxkcmVuW2NoaWxkSW5kZXhdO1xuICAgICAgICAgICAgY2hpbGRSb3V0ZS5wYXJlbnQgPSByb3V0ZTtcblxuICAgICAgICAgICAgbGV0IG1hdGNoZWRMZW5ndGggPSBtYXRjaC5wYXRoLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChtYXRjaGVkTGVuZ3RoID4gMCAmJiBwYXRobmFtZS5jaGFyQXQobWF0Y2hlZExlbmd0aCkgPT09ICcvJykge1xuICAgICAgICAgICAgICBtYXRjaGVkTGVuZ3RoICs9IDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkTWF0Y2hlcyA9IG1hdGNoUm91dGUoXG4gICAgICAgICAgICAgIGNoaWxkUm91dGUsXG4gICAgICAgICAgICAgIHBhdGhuYW1lLnN1YnN0cihtYXRjaGVkTGVuZ3RoKSxcbiAgICAgICAgICAgICAgaWdub3JlTGVhZGluZ1NsYXNoLFxuICAgICAgICAgICAgICBtYXRjaC5rZXlzLFxuICAgICAgICAgICAgICBtYXRjaC5wYXJhbXNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgY2hpbGRNYXRjaCA9IGNoaWxkTWF0Y2hlcy5uZXh0KHJvdXRlVG9Ta2lwKTtcbiAgICAgICAgICBpZiAoIWNoaWxkTWF0Y2guZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICAgIHZhbHVlOiBjaGlsZE1hdGNoLnZhbHVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZE1hdGNoZXMgPSBudWxsO1xuICAgICAgICAgIGNoaWxkSW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge2RvbmU6IHRydWV9O1xuICAgIH0sXG4gIH07XG59XG5cbi8qKlxuICogVW5pdmVyc2FsIFJvdXRlciAoaHR0cHM6Ly93d3cua3JpYXNvZnQuY29tL3VuaXZlcnNhbC1yb3V0ZXIvKVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50IEtyaWFzb2Z0LlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5mdW5jdGlvbiByZXNvbHZlUm91dGUoY29udGV4dCkge1xuICBpZiAoaXNGdW5jdGlvbihjb250ZXh0LnJvdXRlLmFjdGlvbikpIHtcbiAgICByZXR1cm4gY29udGV4dC5yb3V0ZS5hY3Rpb24oY29udGV4dCk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBVbml2ZXJzYWwgUm91dGVyIChodHRwczovL3d3dy5rcmlhc29mdC5jb20vdW5pdmVyc2FsLXJvdXRlci8pXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQgS3JpYXNvZnQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmZ1bmN0aW9uIGlzQ2hpbGRSb3V0ZShwYXJlbnRSb3V0ZSwgY2hpbGRSb3V0ZSkge1xuICBsZXQgcm91dGUgPSBjaGlsZFJvdXRlO1xuICB3aGlsZSAocm91dGUpIHtcbiAgICByb3V0ZSA9IHJvdXRlLnBhcmVudDtcbiAgICBpZiAocm91dGUgPT09IHBhcmVudFJvdXRlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUVycm9yTWVzc2FnZShjdXJyZW50Q29udGV4dCkge1xuICBsZXQgZXJyb3JNZXNzYWdlID0gYFBhdGggJyR7Y3VycmVudENvbnRleHQucGF0aG5hbWV9JyBpcyBub3QgcHJvcGVybHkgcmVzb2x2ZWQgZHVlIHRvIGFuIGVycm9yLmA7XG4gIGNvbnN0IHJvdXRlUGF0aCA9IChjdXJyZW50Q29udGV4dC5yb3V0ZSB8fCB7fSkucGF0aDtcbiAgaWYgKHJvdXRlUGF0aCkge1xuICAgIGVycm9yTWVzc2FnZSArPSBgIFJlc29sdXRpb24gaGFkIGZhaWxlZCBvbiByb3V0ZTogJyR7cm91dGVQYXRofSdgO1xuICB9XG4gIHJldHVybiBlcnJvck1lc3NhZ2U7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoYWluRm9yUm91dGUoY29udGV4dCwgbWF0Y2gpIHtcbiAgY29uc3Qge3JvdXRlLCBwYXRofSA9IG1hdGNoO1xuXG4gIGlmIChyb3V0ZSAmJiAhcm91dGUuX19zeW50aGV0aWMpIHtcbiAgICBjb25zdCBpdGVtID0ge3BhdGgsIHJvdXRlfTtcbiAgICBpZiAoIWNvbnRleHQuY2hhaW4pIHtcbiAgICAgIGNvbnRleHQuY2hhaW4gPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRGlzY2FyZCBvbGQgaXRlbXNcbiAgICAgIGlmIChyb3V0ZS5wYXJlbnQpIHtcbiAgICAgICAgbGV0IGkgPSBjb250ZXh0LmNoYWluLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSAmJiBjb250ZXh0LmNoYWluW2ldLnJvdXRlICYmIGNvbnRleHQuY2hhaW5baV0ucm91dGUgIT09IHJvdXRlLnBhcmVudCkge1xuICAgICAgICAgIGNvbnRleHQuY2hhaW4ucG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29udGV4dC5jaGFpbi5wdXNoKGl0ZW0pO1xuICB9XG59XG5cbi8qKlxuICovXG5jbGFzcyBSZXNvbHZlciB7XG4gIGNvbnN0cnVjdG9yKHJvdXRlcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKE9iamVjdChyb3V0ZXMpICE9PSByb3V0ZXMpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgcm91dGVzJyk7XG4gICAgfVxuXG4gICAgdGhpcy5iYXNlVXJsID0gb3B0aW9ucy5iYXNlVXJsIHx8ICcnO1xuICAgIHRoaXMuZXJyb3JIYW5kbGVyID0gb3B0aW9ucy5lcnJvckhhbmRsZXI7XG4gICAgdGhpcy5yZXNvbHZlUm91dGUgPSBvcHRpb25zLnJlc29sdmVSb3V0ZSB8fCByZXNvbHZlUm91dGU7XG4gICAgdGhpcy5jb250ZXh0ID0gT2JqZWN0LmFzc2lnbih7cmVzb2x2ZXI6IHRoaXN9LCBvcHRpb25zLmNvbnRleHQpO1xuICAgIHRoaXMucm9vdCA9IEFycmF5LmlzQXJyYXkocm91dGVzKSA/IHtwYXRoOiAnJywgX19jaGlsZHJlbjogcm91dGVzLCBwYXJlbnQ6IG51bGwsIF9fc3ludGhldGljOiB0cnVlfSA6IHJvdXRlcztcbiAgICB0aGlzLnJvb3QucGFyZW50ID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxpc3Qgb2Ygcm91dGVzIChhcyBhIHNoYWxsb3cgY29weSkuIEFkZGluZyAvIHJlbW92aW5nXG4gICAqIHJvdXRlcyB0byAvIGZyb20gdGhlIHJldHVybmVkIGFycmF5IGRvZXMgbm90IGFmZmVjdCB0aGUgcm91dGluZyBjb25maWcsXG4gICAqIGJ1dCBtb2RpZnlpbmcgdGhlIHJvdXRlIG9iamVjdHMgZG9lcy5cbiAgICpcbiAgICogQHJldHVybiB7IUFycmF5PCFSb3V0ZXIuUm91dGU+fVxuICAgKi9cbiAgZ2V0Um91dGVzKCkge1xuICAgIHJldHVybiBbLi4udGhpcy5yb290Ll9fY2hpbGRyZW5dO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHJvdXRpbmcgY29uZmlnIChyZXBsYWNpbmcgdGhlIGV4aXN0aW5nIG9uZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7IUFycmF5PCFSb3V0ZXIuUm91dGU+fCFSb3V0ZXIuUm91dGV9IHJvdXRlcyBhIHNpbmdsZSByb3V0ZSBvciBhbiBhcnJheSBvZiB0aG9zZVxuICAgKiAgICAodGhlIGFycmF5IGlzIHNoYWxsb3cgY29waWVkKVxuICAgKi9cbiAgc2V0Um91dGVzKHJvdXRlcykge1xuICAgIGVuc3VyZVJvdXRlcyhyb3V0ZXMpO1xuICAgIGNvbnN0IG5ld1JvdXRlcyA9IFsuLi50b0FycmF5KHJvdXRlcyldO1xuICAgIHRoaXMucm9vdC5fX2NoaWxkcmVuID0gbmV3Um91dGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgb25lIG9yIHNldmVyYWwgcm91dGVzIHRvIHRoZSByb3V0aW5nIGNvbmZpZyBhbmQgcmV0dXJucyB0aGVcbiAgICogZWZmZWN0aXZlIHJvdXRpbmcgY29uZmlnIGFmdGVyIHRoZSBvcGVyYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7IUFycmF5PCFSb3V0ZXIuUm91dGU+fCFSb3V0ZXIuUm91dGV9IHJvdXRlcyBhIHNpbmdsZSByb3V0ZSBvciBhbiBhcnJheSBvZiB0aG9zZVxuICAgKiAgICAodGhlIGFycmF5IGlzIHNoYWxsb3cgY29waWVkKVxuICAgKiBAcmV0dXJuIHshQXJyYXk8IVJvdXRlci5Sb3V0ZT59XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGFkZFJvdXRlcyhyb3V0ZXMpIHtcbiAgICBlbnN1cmVSb3V0ZXMocm91dGVzKTtcbiAgICB0aGlzLnJvb3QuX19jaGlsZHJlbi5wdXNoKC4uLnRvQXJyYXkocm91dGVzKSk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Um91dGVzKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgZXhpc3Rpbmcgcm91dGVzIGZyb20gdGhlIHJvdXRpbmcgY29uZmlnLlxuICAgKi9cbiAgcmVtb3ZlUm91dGVzKCkge1xuICAgIHRoaXMuc2V0Um91dGVzKFtdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3luY2hyb25vdXNseSByZXNvbHZlcyB0aGUgZ2l2ZW4gcGF0aG5hbWUsIGkuZS4gZmluZHMgYWxsIHJvdXRlcyBtYXRjaGluZ1xuICAgKiB0aGUgcGF0aG5hbWUgYW5kIHRyaWVzIHJlc29sdmluZyB0aGVtIG9uZSBhZnRlciBhbm90aGVyIGluIHRoZSBvcmRlciB0aGV5XG4gICAqIGFyZSBsaXN0ZWQgaW4gdGhlIHJvdXRlcyBjb25maWcgdW50aWwgdGhlIGZpcnN0IG5vbi1udWxsIHJlc3VsdC5cbiAgICpcbiAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIGFuIG9iamVjdCB0aGF0IGNvbnNpc3RzIG9mIHRoZSBmaXJzdFxuICAgKiByb3V0ZSBoYW5kbGVyIHJlc3VsdCB0aGF0IHJldHVybnMgc29tZXRoaW5nIG90aGVyIHRoYW4gYG51bGxgIG9yIGB1bmRlZmluZWRgIGFuZCBjb250ZXh0IHVzZWQgdG8gZ2V0IHRoaXMgcmVzdWx0LlxuICAgKlxuICAgKiBJZiBubyByb3V0ZSBoYW5kbGVycyByZXR1cm4gYSBub24tbnVsbCByZXN1bHQsIG9yIGlmIG5vIHJvdXRlIG1hdGNoZXMgdGhlXG4gICAqIGdpdmVuIHBhdGhuYW1lIHRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHJlamVjdGVkIHdpdGggYSAncGFnZSBub3QgZm91bmQnXG4gICAqIGBFcnJvcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7IXN0cmluZ3whe3BhdGhuYW1lOiAhc3RyaW5nfX0gcGF0aG5hbWVPckNvbnRleHQgdGhlIHBhdGhuYW1lIHRvXG4gICAqICAgIHJlc29sdmUgb3IgYSBjb250ZXh0IG9iamVjdCB3aXRoIGEgYHBhdGhuYW1lYCBwcm9wZXJ0eSBhbmQgb3RoZXJcbiAgICogICAgcHJvcGVydGllcyB0byBwYXNzIHRvIHRoZSByb3V0ZSByZXNvbHZlciBmdW5jdGlvbnMuXG4gICAqIEByZXR1cm4geyFQcm9taXNlPGFueT59XG4gICAqL1xuICByZXNvbHZlKHBhdGhuYW1lT3JDb250ZXh0KSB7XG4gICAgY29uc3QgY29udGV4dCA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIHRoaXMuY29udGV4dCxcbiAgICAgIGlzU3RyaW5nKHBhdGhuYW1lT3JDb250ZXh0KSA/IHtwYXRobmFtZTogcGF0aG5hbWVPckNvbnRleHR9IDogcGF0aG5hbWVPckNvbnRleHRcbiAgICApO1xuICAgIGNvbnN0IG1hdGNoID0gbWF0Y2hSb3V0ZShcbiAgICAgIHRoaXMucm9vdCxcbiAgICAgIHRoaXMuX19ub3JtYWxpemVQYXRobmFtZShjb250ZXh0LnBhdGhuYW1lKSxcbiAgICAgIHRoaXMuYmFzZVVybFxuICAgICk7XG4gICAgY29uc3QgcmVzb2x2ZSA9IHRoaXMucmVzb2x2ZVJvdXRlO1xuICAgIGxldCBtYXRjaGVzID0gbnVsbDtcbiAgICBsZXQgbmV4dE1hdGNoZXMgPSBudWxsO1xuICAgIGxldCBjdXJyZW50Q29udGV4dCA9IGNvbnRleHQ7XG5cbiAgICBmdW5jdGlvbiBuZXh0KHJlc3VtZSwgcGFyZW50ID0gbWF0Y2hlcy52YWx1ZS5yb3V0ZSwgcHJldlJlc3VsdCkge1xuICAgICAgY29uc3Qgcm91dGVUb1NraXAgPSBwcmV2UmVzdWx0ID09PSBudWxsICYmIG1hdGNoZXMudmFsdWUucm91dGU7XG4gICAgICBtYXRjaGVzID0gbmV4dE1hdGNoZXMgfHwgbWF0Y2gubmV4dChyb3V0ZVRvU2tpcCk7XG4gICAgICBuZXh0TWF0Y2hlcyA9IG51bGw7XG5cbiAgICAgIGlmICghcmVzdW1lKSB7XG4gICAgICAgIGlmIChtYXRjaGVzLmRvbmUgfHwgIWlzQ2hpbGRSb3V0ZShwYXJlbnQsIG1hdGNoZXMudmFsdWUucm91dGUpKSB7XG4gICAgICAgICAgbmV4dE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobm90Rm91bmRSZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXRjaGVzLmRvbmUpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGdldE5vdEZvdW5kRXJyb3IoY29udGV4dCkpO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50Q29udGV4dCA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgIGN1cnJlbnRDb250ZXh0XG4gICAgICAgICAgPyB7Y2hhaW46IChjdXJyZW50Q29udGV4dC5jaGFpbiA/IGN1cnJlbnRDb250ZXh0LmNoYWluLnNsaWNlKDApIDogW10pfVxuICAgICAgICAgIDoge30sXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIG1hdGNoZXMudmFsdWVcbiAgICAgICk7XG4gICAgICB1cGRhdGVDaGFpbkZvclJvdXRlKGN1cnJlbnRDb250ZXh0LCBtYXRjaGVzLnZhbHVlKTtcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNvbHZlKGN1cnJlbnRDb250ZXh0KSkudGhlbihyZXNvbHV0aW9uID0+IHtcbiAgICAgICAgaWYgKHJlc29sdXRpb24gIT09IG51bGwgJiYgcmVzb2x1dGlvbiAhPT0gdW5kZWZpbmVkICYmIHJlc29sdXRpb24gIT09IG5vdEZvdW5kUmVzdWx0KSB7XG4gICAgICAgICAgY3VycmVudENvbnRleHQucmVzdWx0ID0gcmVzb2x1dGlvbi5yZXN1bHQgfHwgcmVzb2x1dGlvbjtcbiAgICAgICAgICByZXR1cm4gY3VycmVudENvbnRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHQocmVzdW1lLCBwYXJlbnQsIHJlc29sdXRpb24pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29udGV4dC5uZXh0ID0gbmV4dDtcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4gbmV4dCh0cnVlLCB0aGlzLnJvb3QpKVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBnZW5lcmF0ZUVycm9yTWVzc2FnZShjdXJyZW50Q29udGV4dCk7XG4gICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVycm9yLmNvbnRleHQgPSBlcnJvci5jb250ZXh0IHx8IGN1cnJlbnRDb250ZXh0O1xuICAgICAgICAvLyBET01FeGNlcHRpb24gaGFzIGl0cyBvd24gY29kZSB3aGljaCBpcyByZWFkLW9ubHlcbiAgICAgICAgaWYgKCEoZXJyb3IgaW5zdGFuY2VvZiBET01FeGNlcHRpb24pKSB7XG4gICAgICAgICAgZXJyb3IuY29kZSA9IGVycm9yLmNvZGUgfHwgNTAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmVycm9ySGFuZGxlcikge1xuICAgICAgICAgIGN1cnJlbnRDb250ZXh0LnJlc3VsdCA9IHRoaXMuZXJyb3JIYW5kbGVyKGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gY3VycmVudENvbnRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVUkwgY29uc3RydWN0b3IgcG9seWZpbGwgaG9vay4gQ3JlYXRlcyBhbmQgcmV0dXJucyBhbiBVUkwgaW5zdGFuY2UuXG4gICAqL1xuICBzdGF0aWMgX19jcmVhdGVVcmwodXJsLCBiYXNlKSB7XG4gICAgcmV0dXJuIG5ldyBVUkwodXJsLCBiYXNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUgYmFzZVVybCBwcm9wZXJ0eSBpcyBzZXQsIHRyYW5zZm9ybXMgdGhlIGJhc2VVcmwgYW5kIHJldHVybnMgdGhlIGZ1bGxcbiAgICogYWN0dWFsIGBiYXNlYCBzdHJpbmcgZm9yIHVzaW5nIGluIHRoZSBgbmV3IFVSTChwYXRoLCBiYXNlKTtgIGFuZCBmb3JcbiAgICogcHJlcGVybmRpbmcgdGhlIHBhdGhzIHdpdGguIFRoZSByZXR1cm5lZCBiYXNlIGVuZHMgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLlxuICAgKlxuICAgKiBPdGhlcndpc2UsIHJldHVybnMgZW1wdHkgc3RyaW5nLlxuICAgKi9cbiAgZ2V0IF9fZWZmZWN0aXZlQmFzZVVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5iYXNlVXJsXG4gICAgICA/IHRoaXMuY29uc3RydWN0b3IuX19jcmVhdGVVcmwoXG4gICAgICAgIHRoaXMuYmFzZVVybCxcbiAgICAgICAgZG9jdW1lbnQuYmFzZVVSSSB8fCBkb2N1bWVudC5VUkxcbiAgICAgICkuaHJlZi5yZXBsYWNlKC9bXlxcL10qJC8sICcnKVxuICAgICAgOiAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUgYmFzZVVybCBpcyBzZXQsIG1hdGNoZXMgdGhlIHBhdGhuYW1lIHdpdGggdGhlIHJvdXRlcuKAmXMgYmFzZVVybCxcbiAgICogYW5kIHJldHVybnMgdGhlIGxvY2FsIHBhdGhuYW1lIHdpdGggdGhlIGJhc2VVcmwgc3RyaXBwZWQgb3V0LlxuICAgKlxuICAgKiBJZiB0aGUgcGF0aG5hbWUgZG9lcyBub3QgbWF0Y2ggdGhlIGJhc2VVcmwsIHJldHVybnMgdW5kZWZpbmVkLlxuICAgKlxuICAgKiBJZiB0aGUgYGJhc2VVcmxgIGlzIG5vdCBzZXQsIHJldHVybnMgdGhlIHVubW9kaWZpZWQgcGF0aG5hbWUgYXJndW1lbnQuXG4gICAqL1xuICBfX25vcm1hbGl6ZVBhdGhuYW1lKHBhdGhuYW1lKSB7XG4gICAgaWYgKCF0aGlzLmJhc2VVcmwpIHtcbiAgICAgIC8vIE5vIGJhc2UgVVJMLCBubyBuZWVkIHRvIHRyYW5zZm9ybSB0aGUgcGF0aG5hbWUuXG4gICAgICByZXR1cm4gcGF0aG5hbWU7XG4gICAgfVxuXG4gICAgY29uc3QgYmFzZSA9IHRoaXMuX19lZmZlY3RpdmVCYXNlVXJsO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRVcmwgPSB0aGlzLmNvbnN0cnVjdG9yLl9fY3JlYXRlVXJsKHBhdGhuYW1lLCBiYXNlKS5ocmVmO1xuICAgIGlmIChub3JtYWxpemVkVXJsLnNsaWNlKDAsIGJhc2UubGVuZ3RoKSA9PT0gYmFzZSkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRVcmwuc2xpY2UoYmFzZS5sZW5ndGgpO1xuICAgIH1cbiAgfVxufVxuXG5SZXNvbHZlci5wYXRoVG9SZWdleHAgPSBwYXRoVG9SZWdleHBfMTtcblxuLyoqXG4gKiBVbml2ZXJzYWwgUm91dGVyIChodHRwczovL3d3dy5rcmlhc29mdC5jb20vdW5pdmVyc2FsLXJvdXRlci8pXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQgS3JpYXNvZnQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IHtwYXRoVG9SZWdleHB9ID0gUmVzb2x2ZXI7XG5jb25zdCBjYWNoZSA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gY2FjaGVSb3V0ZXMocm91dGVzQnlOYW1lLCByb3V0ZSwgcm91dGVzKSB7XG4gIGNvbnN0IG5hbWUgPSByb3V0ZS5uYW1lIHx8IHJvdXRlLmNvbXBvbmVudDtcbiAgaWYgKG5hbWUpIHtcbiAgICBpZiAocm91dGVzQnlOYW1lLmhhcyhuYW1lKSkge1xuICAgICAgcm91dGVzQnlOYW1lLmdldChuYW1lKS5wdXNoKHJvdXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVzQnlOYW1lLnNldChuYW1lLCBbcm91dGVdKTtcbiAgICB9XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShyb3V0ZXMpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNoaWxkUm91dGUgPSByb3V0ZXNbaV07XG4gICAgICBjaGlsZFJvdXRlLnBhcmVudCA9IHJvdXRlO1xuICAgICAgY2FjaGVSb3V0ZXMocm91dGVzQnlOYW1lLCBjaGlsZFJvdXRlLCBjaGlsZFJvdXRlLl9fY2hpbGRyZW4gfHwgY2hpbGRSb3V0ZS5jaGlsZHJlbik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFJvdXRlQnlOYW1lKHJvdXRlc0J5TmFtZSwgcm91dGVOYW1lKSB7XG4gIGNvbnN0IHJvdXRlcyA9IHJvdXRlc0J5TmFtZS5nZXQocm91dGVOYW1lKTtcbiAgaWYgKHJvdXRlcyAmJiByb3V0ZXMubGVuZ3RoID4gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBEdXBsaWNhdGUgcm91dGUgd2l0aCBuYW1lIFwiJHtyb3V0ZU5hbWV9XCIuYFxuICAgICAgKyBgIFRyeSBzZXRpbmcgdW5pcXVlICduYW1lJyByb3V0ZSBwcm9wZXJ0aWVzLmBcbiAgICApO1xuICB9XG4gIHJldHVybiByb3V0ZXMgJiYgcm91dGVzWzBdO1xufVxuXG5mdW5jdGlvbiBnZXRSb3V0ZVBhdGgocm91dGUpIHtcbiAgbGV0IHBhdGggPSByb3V0ZS5wYXRoO1xuICBwYXRoID0gQXJyYXkuaXNBcnJheShwYXRoKSA/IHBhdGhbMF0gOiBwYXRoO1xuICByZXR1cm4gcGF0aCAhPT0gdW5kZWZpbmVkID8gcGF0aCA6ICcnO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVVybHMocm91dGVyLCBvcHRpb25zID0ge30pIHtcbiAgaWYgKCEocm91dGVyIGluc3RhbmNlb2YgUmVzb2x2ZXIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQW4gaW5zdGFuY2Ugb2YgUmVzb2x2ZXIgaXMgZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGNvbnN0IHJvdXRlc0J5TmFtZSA9IG5ldyBNYXAoKTtcblxuICByZXR1cm4gKHJvdXRlTmFtZSwgcGFyYW1zKSA9PiB7XG4gICAgbGV0IHJvdXRlID0gZ2V0Um91dGVCeU5hbWUocm91dGVzQnlOYW1lLCByb3V0ZU5hbWUpO1xuICAgIGlmICghcm91dGUpIHtcbiAgICAgIHJvdXRlc0J5TmFtZS5jbGVhcigpOyAvLyBjbGVhciBjYWNoZVxuICAgICAgY2FjaGVSb3V0ZXMocm91dGVzQnlOYW1lLCByb3V0ZXIucm9vdCwgcm91dGVyLnJvb3QuX19jaGlsZHJlbik7XG5cbiAgICAgIHJvdXRlID0gZ2V0Um91dGVCeU5hbWUocm91dGVzQnlOYW1lLCByb3V0ZU5hbWUpO1xuICAgICAgaWYgKCFyb3V0ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJvdXRlIFwiJHtyb3V0ZU5hbWV9XCIgbm90IGZvdW5kYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJlZ2V4cCA9IGNhY2hlLmdldChyb3V0ZS5mdWxsUGF0aCk7XG4gICAgaWYgKCFyZWdleHApIHtcbiAgICAgIGxldCBmdWxsUGF0aCA9IGdldFJvdXRlUGF0aChyb3V0ZSk7XG4gICAgICBsZXQgcnQgPSByb3V0ZS5wYXJlbnQ7XG4gICAgICB3aGlsZSAocnQpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGdldFJvdXRlUGF0aChydCk7XG4gICAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgICAgZnVsbFBhdGggPSBwYXRoLnJlcGxhY2UoL1xcLyQvLCAnJykgKyAnLycgKyBmdWxsUGF0aC5yZXBsYWNlKC9eXFwvLywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJ0ID0gcnQucGFyZW50O1xuICAgICAgfVxuICAgICAgY29uc3QgdG9rZW5zID0gcGF0aFRvUmVnZXhwLnBhcnNlKGZ1bGxQYXRoKTtcbiAgICAgIGNvbnN0IHRvUGF0aCA9IHBhdGhUb1JlZ2V4cC50b2tlbnNUb0Z1bmN0aW9uKHRva2Vucyk7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaXNTdHJpbmcodG9rZW5zW2ldKSkge1xuICAgICAgICAgIGtleXNbdG9rZW5zW2ldLm5hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVnZXhwID0ge3RvUGF0aCwga2V5c307XG4gICAgICBjYWNoZS5zZXQoZnVsbFBhdGgsIHJlZ2V4cCk7XG4gICAgICByb3V0ZS5mdWxsUGF0aCA9IGZ1bGxQYXRoO1xuICAgIH1cblxuICAgIGxldCB1cmwgPSByZWdleHAudG9QYXRoKHBhcmFtcywgb3B0aW9ucykgfHwgJy8nO1xuXG4gICAgaWYgKG9wdGlvbnMuc3RyaW5naWZ5UXVlcnlQYXJhbXMgJiYgcGFyYW1zKSB7XG4gICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9O1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHBhcmFtcyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgaWYgKCFyZWdleHAua2V5c1trZXldKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbXNba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBxdWVyeSA9IG9wdGlvbnMuc3RyaW5naWZ5UXVlcnlQYXJhbXMocXVlcnlQYXJhbXMpO1xuICAgICAgaWYgKHF1ZXJ5KSB7XG4gICAgICAgIHVybCArPSBxdWVyeS5jaGFyQXQoMCkgPT09ICc/JyA/IHF1ZXJ5IDogYD8ke3F1ZXJ5fWA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVybDtcbiAgfTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiBOYXZpZ2F0aW9uVHJpZ2dlclxuICogQHR5cGUge29iamVjdH1cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oKX0gYWN0aXZhdGVcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oKX0gaW5hY3RpdmF0ZVxuICovXG5cbi8qKiBAdHlwZSB7QXJyYXk8TmF2aWdhdGlvblRyaWdnZXI+fSAqL1xubGV0IHRyaWdnZXJzID0gW107XG5cbmZ1bmN0aW9uIHNldE5hdmlnYXRpb25UcmlnZ2VycyhuZXdUcmlnZ2Vycykge1xuICB0cmlnZ2Vycy5mb3JFYWNoKHRyaWdnZXIgPT4gdHJpZ2dlci5pbmFjdGl2YXRlKCkpO1xuXG4gIG5ld1RyaWdnZXJzLmZvckVhY2godHJpZ2dlciA9PiB0cmlnZ2VyLmFjdGl2YXRlKCkpO1xuXG4gIHRyaWdnZXJzID0gbmV3VHJpZ2dlcnM7XG59XG5cbmNvbnN0IHdpbGxBbmltYXRlID0gZWxlbSA9PiB7XG4gIGNvbnN0IG5hbWUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW0pLmdldFByb3BlcnR5VmFsdWUoJ2FuaW1hdGlvbi1uYW1lJyk7XG4gIHJldHVybiBuYW1lICYmIG5hbWUgIT09ICdub25lJztcbn07XG5cbmNvbnN0IHdhaXRGb3JBbmltYXRpb24gPSAoZWxlbSwgY2IpID0+IHtcbiAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBsaXN0ZW5lcik7XG4gICAgY2IoKTtcbiAgfTtcbiAgZWxlbS5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBsaXN0ZW5lcik7XG59O1xuXG5mdW5jdGlvbiBhbmltYXRlKGVsZW0sIGNsYXNzTmFtZSkge1xuICBlbGVtLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcblxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgaWYgKHdpbGxBbmltYXRlKGVsZW0pKSB7XG4gICAgICBjb25zdCByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IHNpemUgPSBgaGVpZ2h0OiAke3JlY3QuYm90dG9tIC0gcmVjdC50b3B9cHg7IHdpZHRoOiAke3JlY3QucmlnaHQgLSByZWN0LmxlZnR9cHhgO1xuICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYHBvc2l0aW9uOiBhYnNvbHV0ZTsgJHtzaXplfWApO1xuICAgICAgd2FpdEZvckFuaW1hdGlvbihlbGVtLCAoKSA9PiB7XG4gICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgICBlbGVtLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbmNvbnN0IE1BWF9SRURJUkVDVF9DT1VOVCA9IDI1NjtcblxuZnVuY3Rpb24gaXNSZXN1bHROb3RFbXB0eShyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdCAhPT0gbnVsbCAmJiByZXN1bHQgIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gY29weUNvbnRleHRXaXRob3V0TmV4dChjb250ZXh0KSB7XG4gIGNvbnN0IGNvcHkgPSBPYmplY3QuYXNzaWduKHt9LCBjb250ZXh0KTtcbiAgZGVsZXRlIGNvcHkubmV4dDtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHtwYXRobmFtZSA9ICcnLCBzZWFyY2ggPSAnJywgaGFzaCA9ICcnLCBjaGFpbiA9IFtdLCBwYXJhbXMgPSB7fSwgcmVkaXJlY3RGcm9tLCByZXNvbHZlcn0sIHJvdXRlKSB7XG4gIGNvbnN0IHJvdXRlcyA9IGNoYWluLm1hcChpdGVtID0+IGl0ZW0ucm91dGUpO1xuICByZXR1cm4ge1xuICAgIGJhc2VVcmw6IHJlc29sdmVyICYmIHJlc29sdmVyLmJhc2VVcmwgfHwgJycsXG4gICAgcGF0aG5hbWUsXG4gICAgc2VhcmNoLFxuICAgIGhhc2gsXG4gICAgcm91dGVzLFxuICAgIHJvdXRlOiByb3V0ZSB8fCByb3V0ZXMubGVuZ3RoICYmIHJvdXRlc1tyb3V0ZXMubGVuZ3RoIC0gMV0gfHwgbnVsbCxcbiAgICBwYXJhbXMsXG4gICAgcmVkaXJlY3RGcm9tLFxuICAgIGdldFVybDogKHVzZXJQYXJhbXMgPSB7fSkgPT4gZ2V0UGF0aG5hbWVGb3JSb3V0ZXIoXG4gICAgICBSb3V0ZXIucGF0aFRvUmVnZXhwLmNvbXBpbGUoXG4gICAgICAgIGdldE1hdGNoZWRQYXRoKHJvdXRlcylcbiAgICAgICkoT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zLCB1c2VyUGFyYW1zKSksXG4gICAgICByZXNvbHZlclxuICAgIClcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVkaXJlY3QoY29udGV4dCwgcGF0aG5hbWUpIHtcbiAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgY29udGV4dC5wYXJhbXMpO1xuICByZXR1cm4ge1xuICAgIHJlZGlyZWN0OiB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIGZyb206IGNvbnRleHQucGF0aG5hbWUsXG4gICAgICBwYXJhbXNcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoY29udGV4dCwgZWxlbWVudCkge1xuICBlbGVtZW50LmxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29udGV4dCk7XG4gIGNvbnN0IGluZGV4ID0gY29udGV4dC5jaGFpbi5tYXAoaXRlbSA9PiBpdGVtLnJvdXRlKS5pbmRleE9mKGNvbnRleHQucm91dGUpO1xuICBjb250ZXh0LmNoYWluW2luZGV4XS5lbGVtZW50ID0gZWxlbWVudDtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIHJ1bkNhbGxiYWNrSWZQb3NzaWJsZShjYWxsYmFjaywgYXJncywgdGhpc0FyZykge1xuICBpZiAoaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYW1lbmQoYW1lbmRtZW50RnVuY3Rpb24sIGFyZ3MsIGVsZW1lbnQpIHtcbiAgcmV0dXJuIGFtZW5kbWVudFJlc3VsdCA9PiB7XG4gICAgaWYgKGFtZW5kbWVudFJlc3VsdCAmJiAoYW1lbmRtZW50UmVzdWx0LmNhbmNlbCB8fCBhbWVuZG1lbnRSZXN1bHQucmVkaXJlY3QpKSB7XG4gICAgICByZXR1cm4gYW1lbmRtZW50UmVzdWx0O1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gcnVuQ2FsbGJhY2tJZlBvc3NpYmxlKGVsZW1lbnRbYW1lbmRtZW50RnVuY3Rpb25dLCBhcmdzLCBlbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NOZXdDaGlsZHJlbihuZXdDaGlsZHJlbiwgcm91dGUpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KG5ld0NoaWxkcmVuKSAmJiAhaXNPYmplY3QobmV3Q2hpbGRyZW4pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgbG9nKFxuICAgICAgICBgSW5jb3JyZWN0IFwiY2hpbGRyZW5cIiB2YWx1ZSBmb3IgdGhlIHJvdXRlICR7cm91dGUucGF0aH06IGV4cGVjdGVkIGFycmF5IG9yIG9iamVjdCwgYnV0IGdvdCAke25ld0NoaWxkcmVufWBcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgcm91dGUuX19jaGlsZHJlbiA9IFtdO1xuICBjb25zdCBjaGlsZFJvdXRlcyA9IHRvQXJyYXkobmV3Q2hpbGRyZW4pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkUm91dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgZW5zdXJlUm91dGUoY2hpbGRSb3V0ZXNbaV0pO1xuICAgIHJvdXRlLl9fY2hpbGRyZW4ucHVzaChjaGlsZFJvdXRlc1tpXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRG9tTm9kZXMobm9kZXMpIHtcbiAgaWYgKG5vZGVzICYmIG5vZGVzLmxlbmd0aCkge1xuICAgIGNvbnN0IHBhcmVudCA9IG5vZGVzWzBdLnBhcmVudE5vZGU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKG5vZGVzW2ldKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UGF0aG5hbWVGb3JSb3V0ZXIocGF0aG5hbWUsIHJvdXRlcikge1xuICBjb25zdCBiYXNlID0gcm91dGVyLl9fZWZmZWN0aXZlQmFzZVVybDtcbiAgcmV0dXJuIGJhc2VcbiAgICA/IHJvdXRlci5jb25zdHJ1Y3Rvci5fX2NyZWF0ZVVybChwYXRobmFtZS5yZXBsYWNlKC9eXFwvLywgJycpLCBiYXNlKS5wYXRobmFtZVxuICAgIDogcGF0aG5hbWU7XG59XG5cbmZ1bmN0aW9uIGdldE1hdGNoZWRQYXRoKGNoYWluKSB7XG4gIHJldHVybiBjaGFpbi5tYXAoaXRlbSA9PiBpdGVtLnBhdGgpLnJlZHVjZSgoYSwgYikgPT4ge1xuICAgIGlmIChiLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGEucmVwbGFjZSgvXFwvJC8sICcnKSArICcvJyArIGIucmVwbGFjZSgvXlxcLy8sICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH0sICcnKTtcbn1cblxuLyoqXG4gKiBBIHNpbXBsZSBjbGllbnQtc2lkZSByb3V0ZXIgZm9yIHNpbmdsZS1wYWdlIGFwcGxpY2F0aW9ucy4gSXQgdXNlc1xuICogZXhwcmVzcy1zdHlsZSBtaWRkbGV3YXJlIGFuZCBoYXMgYSBmaXJzdC1jbGFzcyBzdXBwb3J0IGZvciBXZWIgQ29tcG9uZW50cyBhbmRcbiAqIGxhenktbG9hZGluZy4gV29ya3MgZ3JlYXQgaW4gUG9seW1lciBhbmQgbm9uLVBvbHltZXIgYXBwcy5cbiAqXG4gKiBVc2UgYG5ldyBSb3V0ZXIob3V0bGV0LCBvcHRpb25zKWAgdG8gY3JlYXRlIGEgbmV3IFJvdXRlciBpbnN0YW5jZS5cbiAqXG4gKiAqIFRoZSBgb3V0bGV0YCBwYXJhbWV0ZXIgaXMgYSByZWZlcmVuY2UgdG8gdGhlIERPTSBub2RlIHRvIHJlbmRlclxuICogICB0aGUgY29udGVudCBpbnRvLlxuICpcbiAqICogVGhlIGBvcHRpb25zYCBwYXJhbWV0ZXIgaXMgYW4gb3B0aW9uYWwgb2JqZWN0IHdpdGggb3B0aW9ucy4gVGhlIGZvbGxvd2luZ1xuICogICBrZXlzIGFyZSBzdXBwb3J0ZWQ6XG4gKiAgICogYGJhc2VVcmxgIOKAlCB0aGUgaW5pdGlhbCB2YWx1ZSBmb3IgW1xuICogICAgIHRoZSBgYmFzZVVybGAgcHJvcGVydHlcbiAqICAgXSgjL2NsYXNzZXMvUm91dGVyI3Byb3BlcnR5LWJhc2VVcmwpXG4gKlxuICogVGhlIFJvdXRlciBpbnN0YW5jZSBpcyBhdXRvbWF0aWNhbGx5IHN1YnNjcmliZWQgdG8gbmF2aWdhdGlvbiBldmVudHNcbiAqIG9uIGB3aW5kb3dgLlxuICpcbiAqIFNlZSBbTGl2ZSBFeGFtcGxlc10oIy9jbGFzc2VzL1JvdXRlci9kZW1vcy9kZW1vL2luZGV4Lmh0bWwpIGZvciB0aGUgZGV0YWlsZWQgdXNhZ2UgZGVtbyBhbmQgY29kZSBzbmlwcGV0cy5cbiAqXG4gKiBTZWUgYWxzbyBkZXRhaWxlZCBBUEkgZG9jcyBmb3IgdGhlIGZvbGxvd2luZyBtZXRob2RzLCBmb3IgdGhlIGFkdmFuY2VkIHVzYWdlOlxuICpcbiAqICogW3NldE91dGxldF0oIy9jbGFzc2VzL1JvdXRlciNtZXRob2Qtc2V0T3V0bGV0KSDigJMgc2hvdWxkIGJlIHVzZWQgdG8gY29uZmlndXJlIHRoZSBvdXRsZXQuXG4gKiAqIFtzZXRUcmlnZ2Vyc10oIy9jbGFzc2VzL1JvdXRlciNtZXRob2Qtc2V0VHJpZ2dlcnMpIOKAkyBzaG91bGQgYmUgdXNlZCB0byBjb25maWd1cmUgdGhlIG5hdmlnYXRpb24gZXZlbnRzLlxuICogKiBbc2V0Um91dGVzXSgjL2NsYXNzZXMvUm91dGVyI21ldGhvZC1zZXRSb3V0ZXMpIOKAkyBzaG91bGQgYmUgdXNlZCB0byBjb25maWd1cmUgdGhlIHJvdXRlcy5cbiAqXG4gKiBPbmx5IGBzZXRSb3V0ZXNgIGhhcyB0byBiZSBjYWxsZWQgbWFudWFsbHksIG90aGVycyBhcmUgYXV0b21hdGljYWxseSBpbnZva2VkIHdoZW4gY3JlYXRpbmcgYSBuZXcgaW5zdGFuY2UuXG4gKlxuICogQGV4dGVuZHMgUmVzb2x2ZXJcbiAqIEBkZW1vIGRlbW8vaW5kZXguaHRtbFxuICogQHN1bW1hcnkgSmF2YVNjcmlwdCBjbGFzcyB0aGF0IHJlbmRlcnMgZGlmZmVyZW50IERPTSBjb250ZW50IGRlcGVuZGluZyBvblxuICogICAgYSBnaXZlbiBwYXRoLiBJdCBjYW4gcmUtcmVuZGVyIHdoZW4gdHJpZ2dlcmVkIG9yIGF1dG9tYXRpY2FsbHkgb25cbiAqICAgICdwb3BzdGF0ZScgYW5kIC8gb3IgJ2NsaWNrJyBldmVudHMuXG4gKi9cbmNsYXNzIFJvdXRlciBleHRlbmRzIFJlc29sdmVyIHtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBSb3V0ZXIgaW5zdGFuY2Ugd2l0aCBhIGdpdmVuIG91dGxldCwgYW5kXG4gICAqIGF1dG9tYXRpY2FsbHkgc3Vic2NyaWJlcyBpdCB0byBuYXZpZ2F0aW9uIGV2ZW50cyBvbiB0aGUgYHdpbmRvd2AuXG4gICAqIFVzaW5nIGEgY29uc3RydWN0b3IgYXJndW1lbnQgb3IgYSBzZXR0ZXIgZm9yIG91dGxldCBpcyBlcXVpdmFsZW50OlxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3Qgcm91dGVyID0gbmV3IFJvdXRlcigpO1xuICAgKiByb3V0ZXIuc2V0T3V0bGV0KG91dGxldCk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0gez9Ob2RlPX0gb3V0bGV0XG4gICAqIEBwYXJhbSB7P1JvdXRlck9wdGlvbnM9fSBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvdXRsZXQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBiYXNlRWxlbWVudCA9IGRvY3VtZW50LmhlYWQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgIGNvbnN0IGJhc2VIcmVmID0gYmFzZUVsZW1lbnQgJiYgYmFzZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgc3VwZXIoW10sIE9iamVjdC5hc3NpZ24oe1xuICAgICAgLy8gRGVmYXVsdCBvcHRpb25zXG4gICAgICBiYXNlVXJsOiBiYXNlSHJlZiAmJiBSZXNvbHZlci5fX2NyZWF0ZVVybChiYXNlSHJlZiwgZG9jdW1lbnQuVVJMKS5wYXRobmFtZS5yZXBsYWNlKC9bXlxcL10qJC8sICcnKVxuICAgIH0sIG9wdGlvbnMpKTtcblxuICAgIHRoaXMucmVzb2x2ZVJvdXRlID0gY29udGV4dCA9PiB0aGlzLl9fcmVzb2x2ZVJvdXRlKGNvbnRleHQpO1xuXG4gICAgY29uc3QgdHJpZ2dlcnMgPSBSb3V0ZXIuTmF2aWdhdGlvblRyaWdnZXI7XG4gICAgUm91dGVyLnNldFRyaWdnZXJzLmFwcGx5KFJvdXRlciwgT2JqZWN0LmtleXModHJpZ2dlcnMpLm1hcChrZXkgPT4gdHJpZ2dlcnNba2V5XSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgVVJMIGZvciBhbGwgcm91dGVzIGluIHRoZSByb3V0ZXIgaW5zdGFuY2UuIEJ5IGRlZmF1bHQsXG4gICAgICogaWYgdGhlIGJhc2UgZWxlbWVudCBleGlzdHMgaW4gdGhlIGA8aGVhZD5gLCB2YWFkaW4tcm91dGVyXG4gICAgICogdGFrZXMgdGhlIGA8YmFzZSBocmVmPmAgYXR0cmlidXRlIHZhbHVlLCByZXNvbHZlcyBhZ2FpbnN0IGN1cnJlbnQgYGRvY3VtZW50LlVSTGBcbiAgICAgKiBhbmQgZ2V0cyB0aGUgYHBhdGhuYW1lYCBmcm9tIHRoZSByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmJhc2VVcmw7XG5cbiAgICAvKipcbiAgICAgKiBBIHByb21pc2UgdGhhdCBpcyBzZXR0bGVkIGFmdGVyIHRoZSBjdXJyZW50IHJlbmRlciBjeWNsZSBjb21wbGV0ZXMuIElmXG4gICAgICogdGhlcmUgaXMgbm8gcmVuZGVyIGN5Y2xlIGluIHByb2dyZXNzIHRoZSBwcm9taXNlIGlzIGltbWVkaWF0ZWx5IHNldHRsZWRcbiAgICAgKiB3aXRoIHRoZSBsYXN0IHJlbmRlciBjeWNsZSByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICogQHR5cGUgeyFQcm9taXNlPCFSb3V0ZXJMb2NhdGlvbj59XG4gICAgICovXG4gICAgdGhpcy5yZWFkeTtcbiAgICB0aGlzLnJlYWR5ID0gUHJvbWlzZS5yZXNvbHZlKG91dGxldCk7XG5cbiAgICAvKipcbiAgICAgKiBDb250YWlucyByZWFkLW9ubHkgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgcm91dGVyIGxvY2F0aW9uOlxuICAgICAqIHBhdGhuYW1lLCBhY3RpdmUgcm91dGVzLCBwYXJhbWV0ZXJzLiBTZWUgdGhlXG4gICAgICogW0xvY2F0aW9uIHR5cGUgZGVjbGFyYXRpb25dKCMvY2xhc3Nlcy9Sb3V0ZXJMb2NhdGlvbilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0eXBlIHshUm91dGVyTG9jYXRpb259XG4gICAgICovXG4gICAgdGhpcy5sb2NhdGlvbjtcbiAgICB0aGlzLmxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oe3Jlc29sdmVyOiB0aGlzfSk7XG5cbiAgICB0aGlzLl9fbGFzdFN0YXJ0ZWRSZW5kZXJJZCA9IDA7XG4gICAgdGhpcy5fX25hdmlnYXRpb25FdmVudEhhbmRsZXIgPSB0aGlzLl9fb25OYXZpZ2F0aW9uRXZlbnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNldE91dGxldChvdXRsZXQpO1xuICAgIHRoaXMuc3Vic2NyaWJlKCk7XG4gICAgLy8gVXNpbmcgV2Vha01hcCBpbnN0ZWFkIG9mIFdlYWtTZXQgYmVjYXVzZSBXZWFrU2V0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUUxMVxuICAgIHRoaXMuX19jcmVhdGVkQnlSb3V0ZXIgPSBuZXcgV2Vha01hcCgpO1xuICAgIHRoaXMuX19hZGRlZEJ5Um91dGVyID0gbmV3IFdlYWtNYXAoKTtcbiAgfVxuXG4gIF9fcmVzb2x2ZVJvdXRlKGNvbnRleHQpIHtcbiAgICBjb25zdCByb3V0ZSA9IGNvbnRleHQucm91dGU7XG5cbiAgICBsZXQgY2FsbGJhY2tzID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICBpZiAoaXNGdW5jdGlvbihyb3V0ZS5jaGlsZHJlbikpIHtcbiAgICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrc1xuICAgICAgICAudGhlbigoKSA9PiByb3V0ZS5jaGlsZHJlbihjb3B5Q29udGV4dFdpdGhvdXROZXh0KGNvbnRleHQpKSlcbiAgICAgICAgLnRoZW4oY2hpbGRyZW4gPT4ge1xuICAgICAgICAgIC8vIFRoZSByb3V0ZS5jaGlsZHJlbigpIGNhbGxiYWNrIG1pZ2h0IGhhdmUgcmUtd3JpdHRlbiB0aGVcbiAgICAgICAgICAvLyByb3V0ZS5jaGlsZHJlbiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIHJldHVybmluZyBhIHZhbHVlXG4gICAgICAgICAgaWYgKCFpc1Jlc3VsdE5vdEVtcHR5KGNoaWxkcmVuKSAmJiAhaXNGdW5jdGlvbihyb3V0ZS5jaGlsZHJlbikpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gcm91dGUuY2hpbGRyZW47XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb2Nlc3NOZXdDaGlsZHJlbihjaGlsZHJlbiwgcm91dGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21tYW5kcyA9IHtcbiAgICAgIHJlZGlyZWN0OiBwYXRoID0+IGNyZWF0ZVJlZGlyZWN0KGNvbnRleHQsIHBhdGgpLFxuICAgICAgY29tcG9uZW50OiAoY29tcG9uZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCk7XG4gICAgICAgIHRoaXMuX19jcmVhdGVkQnlSb3V0ZXIuc2V0KGVsZW1lbnQsIHRydWUpO1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhbGxiYWNrc1xuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5fX2lzTGF0ZXN0UmVuZGVyKGNvbnRleHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHJ1bkNhbGxiYWNrSWZQb3NzaWJsZShyb3V0ZS5hY3Rpb24sIFtjb250ZXh0LCBjb21tYW5kc10sIHJvdXRlKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChpc1Jlc3VsdE5vdEVtcHR5KHJlc3VsdCkpIHtcbiAgICAgICAgICAvLyBBY3Rpb25zIGxpa2UgYCgpID0+IGltcG9ydCgnbXktdmlldy5qcycpYCBhcmUgbm90IGV4cGVjdGVkIHRvXG4gICAgICAgICAgLy8gZW5kIHRoZSByZXNvbHV0aW9uLCBkZXNwaXRlIHRoZSByZXN1bHQgaXMgbm90IGVtcHR5LiBDaGVja2luZ1xuICAgICAgICAgIC8vIHRoZSByZXN1bHQgd2l0aCBhIHdoaXRlbGlzdCBvZiB2YWx1ZXMgdGhhdCBlbmQgdGhlIHJlc29sdXRpb24uXG4gICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8XG4gICAgICAgICAgICAgIHJlc3VsdC5yZWRpcmVjdCB8fFxuICAgICAgICAgICAgICByZXN1bHQgPT09IG5vdEZvdW5kUmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1N0cmluZyhyb3V0ZS5yZWRpcmVjdCkpIHtcbiAgICAgICAgICByZXR1cm4gY29tbWFuZHMucmVkaXJlY3Qocm91dGUucmVkaXJlY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJvdXRlLmJ1bmRsZSkge1xuICAgICAgICAgIHJldHVybiBsb2FkQnVuZGxlKHJvdXRlLmJ1bmRsZSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHt9LCAoKSA9PiB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihsb2coYEJ1bmRsZSBub3QgZm91bmQ6ICR7cm91dGUuYnVuZGxlfS4gQ2hlY2sgaWYgdGhlIGZpbGUgbmFtZSBpcyBjb3JyZWN0YCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBpZiAoaXNSZXN1bHROb3RFbXB0eShyZXN1bHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpbmcocm91dGUuY29tcG9uZW50KSkge1xuICAgICAgICAgIHJldHVybiBjb21tYW5kcy5jb21wb25lbnQocm91dGUuY29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcm91dGVyIG91dGxldCAodGhlIERPTSBub2RlIHdoZXJlIHRoZSBjb250ZW50IGZvciB0aGUgY3VycmVudFxuICAgKiByb3V0ZSBpcyBpbnNlcnRlZCkuIEFueSBjb250ZW50IHByZS1leGlzdGluZyBpbiB0aGUgcm91dGVyIG91dGxldCBpc1xuICAgKiByZW1vdmVkIGF0IHRoZSBlbmQgb2YgZWFjaCByZW5kZXIgcGFzcy5cbiAgICpcbiAgICogTk9URTogdGhpcyBtZXRob2QgaXMgYXV0b21hdGljYWxseSBpbnZva2VkIGZpcnN0IHRpbWUgd2hlbiBjcmVhdGluZyBhIG5ldyBSb3V0ZXIgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7P05vZGV9IG91dGxldCB0aGUgRE9NIG5vZGUgd2hlcmUgdGhlIGNvbnRlbnQgZm9yIHRoZSBjdXJyZW50IHJvdXRlXG4gICAqICAgICBpcyBpbnNlcnRlZC5cbiAgICovXG4gIHNldE91dGxldChvdXRsZXQpIHtcbiAgICBpZiAob3V0bGV0KSB7XG4gICAgICB0aGlzLl9fZW5zdXJlT3V0bGV0KG91dGxldCk7XG4gICAgfVxuICAgIHRoaXMuX19vdXRsZXQgPSBvdXRsZXQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCByb3V0ZXIgb3V0bGV0LiBUaGUgaW5pdGlhbCB2YWx1ZSBpcyBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogQHJldHVybiB7P05vZGV9IHRoZSBjdXJyZW50IHJvdXRlciBvdXRsZXQgKG9yIGB1bmRlZmluZWRgKVxuICAgKi9cbiAgZ2V0T3V0bGV0KCkge1xuICAgIHJldHVybiB0aGlzLl9fb3V0bGV0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHJvdXRpbmcgY29uZmlnIChyZXBsYWNpbmcgdGhlIGV4aXN0aW5nIG9uZSkgYW5kIHRyaWdnZXJzIGFcbiAgICogbmF2aWdhdGlvbiBldmVudCBzbyB0aGF0IHRoZSByb3V0ZXIgb3V0bGV0IGlzIHJlZnJlc2hlZCBhY2NvcmRpbmcgdG8gdGhlXG4gICAqIGN1cnJlbnQgYHdpbmRvdy5sb2NhdGlvbmAgYW5kIHRoZSBuZXcgcm91dGluZyBjb25maWcuXG4gICAqXG4gICAqIEVhY2ggcm91dGUgb2JqZWN0IG1heSBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllcywgbGlzdGVkIGhlcmUgaW4gdGhlIHByb2Nlc3Npbmcgb3JkZXI6XG4gICAqICogYHBhdGhgIOKAkyB0aGUgcm91dGUgcGF0aCAocmVsYXRpdmUgdG8gdGhlIHBhcmVudCByb3V0ZSBpZiBhbnkpIGluIHRoZVxuICAgKiBbZXhwcmVzcy5qcyBzeW50YXhdKGh0dHBzOi8vZXhwcmVzc2pzLmNvbS9lbi9ndWlkZS9yb3V0aW5nLmh0bWwjcm91dGUtcGF0aHNcIikuXG4gICAqXG4gICAqICogYGNoaWxkcmVuYCDigJMgYW4gYXJyYXkgb2YgbmVzdGVkIHJvdXRlcyBvciBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgdGhpc1xuICAgKiBhcnJheSBhdCB0aGUgcmVuZGVyIHRpbWUuIFRoZSBmdW5jdGlvbiBjYW4gYmUgc3luY2hyb25vdXMgb3IgYXN5bmNocm9ub3VzOlxuICAgKiBpbiB0aGUgbGF0dGVyIGNhc2UgdGhlIHJlbmRlciBpcyBkZWxheWVkIHVudGlsIHRoZSByZXR1cm5lZCBwcm9taXNlIGlzXG4gICAqIHJlc29sdmVkLiBUaGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBpcyBleGVjdXRlZCBldmVyeSB0aW1lIHdoZW4gdGhpcyByb3V0ZSBpc1xuICAgKiBiZWluZyByZW5kZXJlZC4gVGhpcyBhbGxvd3MgZm9yIGR5bmFtaWMgcm91dGUgc3RydWN0dXJlcyAoZS5nLiBiYWNrZW5kLWRlZmluZWQpLFxuICAgKiBidXQgaXQgbWlnaHQgaGF2ZSBhIHBlcmZvcm1hbmNlIGltcGFjdCBhcyB3ZWxsLiBJbiBvcmRlciB0byBhdm9pZCBjYWxsaW5nXG4gICAqIHRoZSBmdW5jdGlvbiBvbiBzdWJzZXF1ZW50IHJlbmRlcnMsIHlvdSBjYW4gb3ZlcnJpZGUgdGhlIGBjaGlsZHJlbmAgcHJvcGVydHlcbiAgICogb2YgdGhlIHJvdXRlIG9iamVjdCBhbmQgc2F2ZSB0aGUgY2FsY3VsYXRlZCBhcnJheSB0aGVyZVxuICAgKiAodmlhIGBjb250ZXh0LnJvdXRlLmNoaWxkcmVuID0gWyByb3V0ZTEsIHJvdXRlMiwgLi4uXTtgKS5cbiAgICogUGFyZW50IHJvdXRlcyBhcmUgZnVsbHkgcmVzb2x2ZWQgYmVmb3JlIHJlc29sdmluZyB0aGUgY2hpbGRyZW4uIENoaWxkcmVuXG4gICAqICdwYXRoJyB2YWx1ZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSBwYXJlbnQgb25lcy5cbiAgICpcbiAgICogKiBgYWN0aW9uYCDigJMgdGhlIGFjdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGJlZm9yZSB0aGUgcm91dGUgaXMgcmVzb2x2ZWQuXG4gICAqIFRoZSB2YWx1ZSBmb3IgdGhpcyBwcm9wZXJ0eSBzaG91bGQgYmUgYSBmdW5jdGlvbiwgYWNjZXB0aW5nIGBjb250ZXh0YFxuICAgKiBhbmQgYGNvbW1hbmRzYCBwYXJhbWV0ZXJzIGRlc2NyaWJlZCBiZWxvdy4gSWYgcHJlc2VudCwgdGhpcyBmdW5jdGlvbiBpc1xuICAgKiBhbHdheXMgaW52b2tlZCBmaXJzdCwgZGlzcmVnYXJkaW5nIG9mIHRoZSBvdGhlciBwcm9wZXJ0aWVzJyBwcmVzZW5jZS5cbiAgICogVGhlIGFjdGlvbiBjYW4gcmV0dXJuIGEgcmVzdWx0IGRpcmVjdGx5IG9yIHdpdGhpbiBhIGBQcm9taXNlYCwgd2hpY2hcbiAgICogcmVzb2x2ZXMgdG8gdGhlIHJlc3VsdC4gSWYgdGhlIGFjdGlvbiByZXN1bHQgaXMgYW4gYEhUTUxFbGVtZW50YCBpbnN0YW5jZSxcbiAgICogYSBgY29tbWFuZHMuY29tcG9uZW50KG5hbWUpYCByZXN1bHQsIGEgYGNvbW1hbmRzLnJlZGlyZWN0KHBhdGgpYCByZXN1bHQsXG4gICAqIG9yIGEgYGNvbnRleHQubmV4dCgpYCByZXN1bHQsIHRoZSBjdXJyZW50IHJvdXRlIHJlc29sdXRpb24gaXMgZmluaXNoZWQsXG4gICAqIGFuZCBvdGhlciByb3V0ZSBjb25maWcgcHJvcGVydGllcyBhcmUgaWdub3JlZC5cbiAgICogU2VlIGFsc28gKipSb3V0ZSBBY3Rpb25zKiogc2VjdGlvbiBpbiBbTGl2ZSBFeGFtcGxlc10oIy9jbGFzc2VzL1JvdXRlci9kZW1vcy9kZW1vL2luZGV4Lmh0bWwpLlxuICAgKlxuICAgKiAqIGByZWRpcmVjdGAg4oCTIG90aGVyIHJvdXRlJ3MgcGF0aCB0byByZWRpcmVjdCB0by4gUGFzc2VzIGFsbCByb3V0ZSBwYXJhbWV0ZXJzIHRvIHRoZSByZWRpcmVjdCB0YXJnZXQuXG4gICAqIFRoZSB0YXJnZXQgcm91dGUgc2hvdWxkIGFsc28gYmUgZGVmaW5lZC5cbiAgICogU2VlIGFsc28gKipSZWRpcmVjdHMqKiBzZWN0aW9uIGluIFtMaXZlIEV4YW1wbGVzXSgjL2NsYXNzZXMvUm91dGVyL2RlbW9zL2RlbW8vaW5kZXguaHRtbCkuXG4gICAqXG4gICAqICogYGJ1bmRsZWAg4oCTIHN0cmluZyBjb250YWluaW5nIHRoZSBwYXRoIHRvIGAuanNgIG9yIGAubWpzYCBidW5kbGUgdG8gbG9hZCBiZWZvcmUgcmVzb2x2aW5nIHRoZSByb3V0ZSxcbiAgICogb3IgdGhlIG9iamVjdCB3aXRoIFwibW9kdWxlXCIgYW5kIFwibm9tb2R1bGVcIiBrZXlzIHJlZmVycmluZyB0byBkaWZmZXJlbnQgYnVuZGxlcy5cbiAgICogRWFjaCBidW5kbGUgaXMgb25seSBsb2FkZWQgb25jZS4gSWYgXCJtb2R1bGVcIiBhbmQgXCJub21vZHVsZVwiIGFyZSBzZXQsIG9ubHkgb25lIGJ1bmRsZSBpcyBsb2FkZWQsXG4gICAqIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBicm93c2VyIHN1cHBvcnRzIEVTIG1vZHVsZXMgb3Igbm90LlxuICAgKiBUaGUgcHJvcGVydHkgaXMgaWdub3JlZCB3aGVuIGVpdGhlciBhbiBgYWN0aW9uYCByZXR1cm5zIHRoZSByZXN1bHQgb3IgYHJlZGlyZWN0YCBwcm9wZXJ0eSBpcyBwcmVzZW50LlxuICAgKiBBbnkgZXJyb3IsIGUuZy4gNDA0IHdoaWxlIGxvYWRpbmcgYnVuZGxlIHdpbGwgY2F1c2Ugcm91dGUgcmVzb2x1dGlvbiB0byB0aHJvdy5cbiAgICogU2VlIGFsc28gKipDb2RlIFNwbGl0dGluZyoqIHNlY3Rpb24gaW4gW0xpdmUgRXhhbXBsZXNdKCMvY2xhc3Nlcy9Sb3V0ZXIvZGVtb3MvZGVtby9pbmRleC5odG1sKS5cbiAgICpcbiAgICogKiBgY29tcG9uZW50YCDigJMgdGhlIHRhZyBuYW1lIG9mIHRoZSBXZWIgQ29tcG9uZW50IHRvIHJlc29sdmUgdGhlIHJvdXRlIHRvLlxuICAgKiBUaGUgcHJvcGVydHkgaXMgaWdub3JlZCB3aGVuIGVpdGhlciBhbiBgYWN0aW9uYCByZXR1cm5zIHRoZSByZXN1bHQgb3IgYHJlZGlyZWN0YCBwcm9wZXJ0eSBpcyBwcmVzZW50LlxuICAgKiBJZiByb3V0ZSBjb250YWlucyB0aGUgYGNvbXBvbmVudGAgcHJvcGVydHkgKG9yIGFuIGFjdGlvbiB0aGF0IHJldHVybiBhIGNvbXBvbmVudClcbiAgICogYW5kIGl0cyBjaGlsZCByb3V0ZSBhbHNvIGNvbnRhaW5zIHRoZSBgY29tcG9uZW50YCBwcm9wZXJ0eSwgY2hpbGQgcm91dGUncyBjb21wb25lbnRcbiAgICogd2lsbCBiZSByZW5kZXJlZCBhcyBhIGxpZ2h0IGRvbSBjaGlsZCBvZiBhIHBhcmVudCBjb21wb25lbnQuXG4gICAqXG4gICAqICogYG5hbWVgIOKAkyB0aGUgc3RyaW5nIG5hbWUgb2YgdGhlIHJvdXRlIHRvIHVzZSBpbiB0aGVcbiAgICogW2Byb3V0ZXIudXJsRm9yTmFtZShuYW1lLCBwYXJhbXMpYF0oIy9jbGFzc2VzL1JvdXRlciNtZXRob2QtdXJsRm9yTmFtZSlcbiAgICogbmF2aWdhdGlvbiBoZWxwZXIgbWV0aG9kLlxuICAgKlxuICAgKiBGb3IgYW55IHJvdXRlIGZ1bmN0aW9uIChgYWN0aW9uYCwgYGNoaWxkcmVuYCkgZGVmaW5lZCwgdGhlIGNvcnJlc3BvbmRpbmcgYHJvdXRlYCBvYmplY3QgaXMgYXZhaWxhYmxlIGluc2lkZSB0aGUgY2FsbGJhY2tcbiAgICogdGhyb3VnaCB0aGUgYHRoaXNgIHJlZmVyZW5jZS4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIGl0LCBtYWtlIHN1cmUgeW91IGRlZmluZSB0aGUgY2FsbGJhY2sgYXMgYSBub24tYXJyb3cgZnVuY3Rpb25cbiAgICogYmVjYXVzZSBhcnJvdyBmdW5jdGlvbnMgZG8gbm90IGhhdmUgdGhlaXIgb3duIGB0aGlzYCByZWZlcmVuY2UuXG4gICAqXG4gICAqIGBjb250ZXh0YCBvYmplY3QgdGhhdCBpcyBwYXNzZWQgdG8gYGFjdGlvbmAgZnVuY3Rpb24gaG9sZHMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKiAqIGBjb250ZXh0LnBhdGhuYW1lYCDigJMgc3RyaW5nIHdpdGggdGhlIHBhdGhuYW1lIGJlaW5nIHJlc29sdmVkXG4gICAqXG4gICAqICogYGNvbnRleHQuc2VhcmNoYCDigJMgc2VhcmNoIHF1ZXJ5IHN0cmluZ1xuICAgKlxuICAgKiAqIGBjb250ZXh0Lmhhc2hgIOKAkyBoYXNoIHN0cmluZ1xuICAgKlxuICAgKiAqIGBjb250ZXh0LnBhcmFtc2Ag4oCTIG9iamVjdCB3aXRoIHJvdXRlIHBhcmFtZXRlcnNcbiAgICpcbiAgICogKiBgY29udGV4dC5yb3V0ZWAg4oCTIG9iamVjdCB0aGF0IGhvbGRzIHRoZSByb3V0ZSB0aGF0IGlzIGN1cnJlbnRseSBiZWluZyByZW5kZXJlZC5cbiAgICpcbiAgICogKiBgY29udGV4dC5uZXh0KClgIOKAkyBmdW5jdGlvbiBmb3IgYXN5bmNocm9ub3VzbHkgZ2V0dGluZyB0aGUgbmV4dCByb3V0ZVxuICAgKiBjb250ZW50cyBmcm9tIHRoZSByZXNvbHV0aW9uIGNoYWluIChpZiBhbnkpXG4gICAqXG4gICAqIGBjb21tYW5kc2Agb2JqZWN0IHRoYXQgaXMgcGFzc2VkIHRvIGBhY3Rpb25gIGZ1bmN0aW9uIGhhc1xuICAgKiB0aGUgZm9sbG93aW5nIG1ldGhvZHM6XG4gICAqXG4gICAqICogYGNvbW1hbmRzLnJlZGlyZWN0KHBhdGgpYCDigJMgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGEgcmVkaXJlY3QgZGF0YVxuICAgKiBmb3IgdGhlIHBhdGggc3BlY2lmaWVkLlxuICAgKlxuICAgKiAqIGBjb21tYW5kcy5jb21wb25lbnQoY29tcG9uZW50KWAg4oCTIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhIG5ldyBIVE1MRWxlbWVudFxuICAgKiB3aXRoIGN1cnJlbnQgY29udGV4dC4gTm90ZTogdGhlIGNvbXBvbmVudCBjcmVhdGVkIGJ5IHRoaXMgZnVuY3Rpb24gaXMgcmV1c2VkIGlmIHZpc2l0aW5nIHRoZSBzYW1lIHBhdGggdHdpY2UgaW4gcm93LlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0geyFBcnJheTwhUm91dGU+fCFSb3V0ZX0gcm91dGVzIGEgc2luZ2xlIHJvdXRlIG9yIGFuIGFycmF5IG9mIHRob3NlXG4gICAqIEBwYXJhbSB7P2Jvb2xlYW59IHNraXBSZW5kZXIgY29uZmlndXJlIHRoZSByb3V0ZXIgYnV0IHNraXAgcmVuZGVyaW5nIHRoZVxuICAgKiAgICAgcm91dGUgY29ycmVzcG9uZGluZyB0byB0aGUgY3VycmVudCBgd2luZG93LmxvY2F0aW9uYCB2YWx1ZXNcbiAgICpcbiAgICogQHJldHVybiB7IVByb21pc2U8IU5vZGU+fVxuICAgKi9cbiAgc2V0Um91dGVzKHJvdXRlcywgc2tpcFJlbmRlciA9IGZhbHNlKSB7XG4gICAgdGhpcy5fX3ByZXZpb3VzQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9fdXJsRm9yTmFtZSA9IHVuZGVmaW5lZDtcbiAgICBzdXBlci5zZXRSb3V0ZXMocm91dGVzKTtcbiAgICBpZiAoIXNraXBSZW5kZXIpIHtcbiAgICAgIHRoaXMuX19vbk5hdmlnYXRpb25FdmVudCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5yZWFkeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3luY2hyb25vdXNseSByZXNvbHZlcyB0aGUgZ2l2ZW4gcGF0aG5hbWUgYW5kIHJlbmRlcnMgdGhlIHJlc29sdmVkIHJvdXRlXG4gICAqIGNvbXBvbmVudCBpbnRvIHRoZSByb3V0ZXIgb3V0bGV0LiBJZiBubyByb3V0ZXIgb3V0bGV0IGlzIHNldCBhdCB0aGUgdGltZSBvZlxuICAgKiBjYWxsaW5nIHRoaXMgbWV0aG9kLCBvciBhdCB0aGUgdGltZSB3aGVuIHRoZSByb3V0ZSByZXNvbHV0aW9uIGlzIGNvbXBsZXRlZCxcbiAgICogYSBgVHlwZUVycm9yYCBpcyB0aHJvd24uXG4gICAqXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggdGhlIHJvdXRlciBvdXRsZXQgRE9NIE5vZGUgYWZ0ZXJcbiAgICogdGhlIHJvdXRlIGNvbXBvbmVudCBpcyBjcmVhdGVkIGFuZCBpbnNlcnRlZCBpbnRvIHRoZSByb3V0ZXIgb3V0bGV0LCBvclxuICAgKiByZWplY3RlZCBpZiBubyByb3V0ZSBtYXRjaGVzIHRoZSBnaXZlbiBwYXRoLlxuICAgKlxuICAgKiBJZiBhbm90aGVyIHJlbmRlciBwYXNzIGlzIHN0YXJ0ZWQgYmVmb3JlIHRoZSBwcmV2aW91cyBvbmUgaXMgY29tcGxldGVkLCB0aGVcbiAgICogcmVzdWx0IG9mIHRoZSBwcmV2aW91cyByZW5kZXIgcGFzcyBpcyBpZ25vcmVkLlxuICAgKlxuICAgKiBAcGFyYW0geyFzdHJpbmd8IXtwYXRobmFtZTogIXN0cmluZywgc2VhcmNoOiA/c3RyaW5nLCBoYXNoOiA/c3RyaW5nfX0gcGF0aG5hbWVPckNvbnRleHRcbiAgICogICAgdGhlIHBhdGhuYW1lIHRvIHJlbmRlciBvciBhIGNvbnRleHQgb2JqZWN0IHdpdGggYSBgcGF0aG5hbWVgIHByb3BlcnR5LFxuICAgKiAgICBvcHRpb25hbCBgc2VhcmNoYCBhbmQgYGhhc2hgIHByb3BlcnRpZXMsIGFuZCBvdGhlciBwcm9wZXJ0aWVzXG4gICAqICAgIHRvIHBhc3MgdG8gdGhlIHJlc29sdmVyLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBzaG91bGRVcGRhdGVIaXN0b3J5XG4gICAqICAgIHVwZGF0ZSBicm93c2VyIGhpc3Rvcnkgd2l0aCB0aGUgcmVuZGVyZWQgbG9jYXRpb25cbiAgICogQHJldHVybiB7IVByb21pc2U8IU5vZGU+fVxuICAgKi9cbiAgcmVuZGVyKHBhdGhuYW1lT3JDb250ZXh0LCBzaG91bGRVcGRhdGVIaXN0b3J5KSB7XG4gICAgY29uc3QgcmVuZGVySWQgPSArK3RoaXMuX19sYXN0U3RhcnRlZFJlbmRlcklkO1xuICAgIGNvbnN0IGNvbnRleHQgPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBzZWFyY2g6ICcnLFxuICAgICAgICBoYXNoOiAnJ1xuICAgICAgfSxcbiAgICAgIGlzU3RyaW5nKHBhdGhuYW1lT3JDb250ZXh0KVxuICAgICAgICA/IHtwYXRobmFtZTogcGF0aG5hbWVPckNvbnRleHR9XG4gICAgICAgIDogcGF0aG5hbWVPckNvbnRleHQsXG4gICAgICB7XG4gICAgICAgIF9fcmVuZGVySWQ6IHJlbmRlcklkXG4gICAgICB9XG4gICAgKTtcblxuICAgIC8vIEZpbmQgdGhlIGZpcnN0IHJvdXRlIHRoYXQgcmVzb2x2ZXMgdG8gYSBub24tZW1wdHkgcmVzdWx0XG4gICAgdGhpcy5yZWFkeSA9IHRoaXMucmVzb2x2ZShjb250ZXh0KVxuXG4gICAgICAvLyBQcm9jZXNzIHRoZSByZXN1bHQgb2YgdGhpcy5yZXNvbHZlKCkgYW5kIGhhbmRsZSBhbGwgc3BlY2lhbCBjb21tYW5kczpcbiAgICAgIC8vIChyZWRpcmVjdCAvIHByZXZlbnQgLyBjb21wb25lbnQpLiBJZiB0aGUgcmVzdWx0IGlzIGEgJ2NvbXBvbmVudCcsXG4gICAgICAvLyB0aGVuIGdvIGRlZXBlciBhbmQgYnVpbGQgdGhlIGVudGlyZSBjaGFpbiBvZiBuZXN0ZWQgY29tcG9uZW50cyBtYXRjaGluZ1xuICAgICAgLy8gdGhlIHBhdGhuYW1lLiBBbHNvIGNhbGwgYWxsICdvbiBiZWZvcmUnIGNhbGxiYWNrcyBhbG9uZyB0aGUgd2F5LlxuICAgICAgLnRoZW4oY29udGV4dCA9PiB0aGlzLl9fZnVsbHlSZXNvbHZlQ2hhaW4oY29udGV4dCkpXG5cbiAgICAgIC50aGVuKGNvbnRleHQgPT4ge1xuICAgICAgICBpZiAodGhpcy5fX2lzTGF0ZXN0UmVuZGVyKGNvbnRleHQpKSB7XG4gICAgICAgICAgY29uc3QgcHJldmlvdXNDb250ZXh0ID0gdGhpcy5fX3ByZXZpb3VzQ29udGV4dDtcblxuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSByZW5kZXIgd2FzIHByZXZlbnRlZCBhbmQgbWFrZSBhbiBlYXJseSByZXR1cm4gaW4gdGhhdCBjYXNlXG4gICAgICAgICAgaWYgKGNvbnRleHQgPT09IHByZXZpb3VzQ29udGV4dCkge1xuICAgICAgICAgICAgLy8gUmVwbGFjZSB0aGUgaGlzdG9yeSB3aXRoIHRoZSBwcmV2aW91cyBjb250ZXh0XG4gICAgICAgICAgICAvLyB0byBtYWtlIHN1cmUgdGhlIFVSTCBzdGF5cyB0aGUgc2FtZS5cbiAgICAgICAgICAgIHRoaXMuX191cGRhdGVCcm93c2VySGlzdG9yeShwcmV2aW91c0NvbnRleHQsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZUhpc3RvcnkpIHtcbiAgICAgICAgICAgIC8vIFJlcGxhY2Ugb25seSBpZiBmaXJzdCByZW5kZXIgcmVkaXJlY3RzLCBzbyB0aGF0IHdlIGRvbuKAmXQgbGVhdmVcbiAgICAgICAgICAgIC8vIHRoZSByZWRpcmVjdGluZyByZWNvcmQgaW4gdGhlIGhpc3RvcnlcbiAgICAgICAgICAgIHRoaXMuX191cGRhdGVCcm93c2VySGlzdG9yeShjb250ZXh0LCByZW5kZXJJZCA9PT0gMSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmlyZVJvdXRlckV2ZW50KCdsb2NhdGlvbi1jaGFuZ2VkJywge3JvdXRlcjogdGhpcywgbG9jYXRpb246IHRoaXMubG9jYXRpb259KTtcblxuICAgICAgICAgIC8vIFNraXAgZGV0YWNoaW5nL3JlLWF0dGFjaGluZyB0aGVyZSBhcmUgbm8gcmVuZGVyIGNoYW5nZXNcbiAgICAgICAgICBpZiAoY29udGV4dC5fX3NraXBBdHRhY2gpIHtcbiAgICAgICAgICAgIHRoaXMuX19jb3B5VW5jaGFuZ2VkRWxlbWVudHMoY29udGV4dCwgcHJldmlvdXNDb250ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuX19wcmV2aW91c0NvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fX2FkZEFwcGVhcmluZ0NvbnRlbnQoY29udGV4dCwgcHJldmlvdXNDb250ZXh0KTtcbiAgICAgICAgICBjb25zdCBhbmltYXRpb25Eb25lID0gdGhpcy5fX2FuaW1hdGVJZk5lZWRlZChjb250ZXh0KTtcblxuICAgICAgICAgIHRoaXMuX19ydW5PbkFmdGVyRW50ZXJDYWxsYmFja3MoY29udGV4dCk7XG4gICAgICAgICAgdGhpcy5fX3J1bk9uQWZ0ZXJMZWF2ZUNhbGxiYWNrcyhjb250ZXh0LCBwcmV2aW91c0NvbnRleHQpO1xuXG4gICAgICAgICAgcmV0dXJuIGFuaW1hdGlvbkRvbmUudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fX2lzTGF0ZXN0UmVuZGVyKGNvbnRleHQpKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGFub3RoZXIgcmVuZGVyIHBhc3Mgc3RhcnRlZCBhZnRlciB0aGlzIG9uZSxcbiAgICAgICAgICAgICAgLy8gdGhlICdkaXNhcHBlYXJpbmcgY29udGVudCcgd291bGQgYmUgcmVtb3ZlZCB3aGVuIHRoZSBvdGhlclxuICAgICAgICAgICAgICAvLyByZW5kZXIgcGFzcyBjYWxscyBgdGhpcy5fX2FkZEFwcGVhcmluZ0NvbnRlbnQoKWBcbiAgICAgICAgICAgICAgdGhpcy5fX3JlbW92ZURpc2FwcGVhcmluZ0NvbnRlbnQoKTtcblxuICAgICAgICAgICAgICB0aGlzLl9fcHJldmlvdXNDb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBpZiAocmVuZGVySWQgPT09IHRoaXMuX19sYXN0U3RhcnRlZFJlbmRlcklkKSB7XG4gICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZUhpc3RvcnkpIHtcbiAgICAgICAgICAgIHRoaXMuX191cGRhdGVCcm93c2VySGlzdG9yeShjb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVtb3ZlRG9tTm9kZXModGhpcy5fX291dGxldCAmJiB0aGlzLl9fb3V0bGV0LmNoaWxkcmVuKTtcbiAgICAgICAgICB0aGlzLmxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oT2JqZWN0LmFzc2lnbihjb250ZXh0LCB7cmVzb2x2ZXI6IHRoaXN9KSk7XG4gICAgICAgICAgZmlyZVJvdXRlckV2ZW50KCdlcnJvcicsIE9iamVjdC5hc3NpZ24oe3JvdXRlcjogdGhpcywgZXJyb3J9LCBjb250ZXh0KSk7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnJlYWR5O1xuICB9XG5cbiAgLy8gYHRvcE9mVGhlQ2hhaW5Db250ZXh0QmVmb3JlUmVkaXJlY3RzYCBpcyBhIGNvbnRleHQgY29taW5nIGZyb20gUmVzb2x2ZXIucmVzb2x2ZSgpLlxuICAvLyBJdCB3b3VsZCBjb250YWluIGEgJ3JlZGlyZWN0JyByb3V0ZSBvciB0aGUgZmlyc3QgJ2NvbXBvbmVudCcgcm91dGUgdGhhdFxuICAvLyBtYXRjaGVkIHRoZSBwYXRobmFtZS4gVGhlcmUgbWlnaHQgYmUgbW9yZSBjaGlsZCAnY29tcG9uZW50JyByb3V0ZXMgdG8gYmVcbiAgLy8gcmVzb2x2ZWQgYW5kIGFkZGVkIGludG8gdGhlIGNoYWluLiBUaGlzIG1ldGhvZCB3b3VsZCBmaW5kIGFuZCBhZGQgdGhlbS5cbiAgLy8gYGNvbnRleHRCZWZvcmVSZWRpcmVjdHNgIGlzIHRoZSBjb250ZXh0IGNvbnRhaW5pbmcgc3VjaCBhIGNoaWxkIGNvbXBvbmVudFxuICAvLyByb3V0ZS4gSXQncyBvbmx5IG5lY2Vzc2FyeSB3aGVuIHRoaXMgbWV0aG9kIGlzIGNhbGxlZCByZWN1cnNpdmVseSAob3RoZXJ3aXNlXG4gIC8vIGl0J3MgdGhlIHNhbWUgYXMgdGhlICd0b3Agb2YgdGhlIGNoYWluJyBjb250ZXh0KS5cbiAgLy9cbiAgLy8gQXBhcnQgZnJvbSBidWlsZGluZyB0aGUgY2hhaW4gb2YgY2hpbGQgY29tcG9uZW50cywgdGhpcyBtZXRob2Qgd291bGQgYWxzb1xuICAvLyBoYW5kbGUgJ3JlZGlyZWN0JyByb3V0ZXMsIGNhbGwgJ29uQmVmb3JlJyBjYWxsYmFja3MgYW5kIGhhbmRsZSAncHJldmVudCdcbiAgLy8gYW5kICdyZWRpcmVjdCcgY2FsbGJhY2sgcmVzdWx0cy5cbiAgX19mdWxseVJlc29sdmVDaGFpbih0b3BPZlRoZUNoYWluQ29udGV4dEJlZm9yZVJlZGlyZWN0cyxcbiAgICBjb250ZXh0QmVmb3JlUmVkaXJlY3RzID0gdG9wT2ZUaGVDaGFpbkNvbnRleHRCZWZvcmVSZWRpcmVjdHMpIHtcbiAgICByZXR1cm4gdGhpcy5fX2ZpbmRDb21wb25lbnRDb250ZXh0QWZ0ZXJBbGxSZWRpcmVjdHMoY29udGV4dEJlZm9yZVJlZGlyZWN0cylcbiAgICAgIC8vIGBjb250ZXh0QWZ0ZXJSZWRpcmVjdHNgIGlzIGFsd2F5cyBhIGNvbnRleHQgd2l0aCBhbiBgSFRNTEVsZW1lbnRgIHJlc3VsdFxuICAgICAgLy8gSW4gb3RoZXIgY2FzZXMgdGhlIHByb21pc2UgZ2V0cyByZWplY3RlZCBhbmQgLnRoZW4oKSBpcyBub3QgY2FsbGVkXG4gICAgICAudGhlbihjb250ZXh0QWZ0ZXJSZWRpcmVjdHMgPT4ge1xuICAgICAgICBjb25zdCByZWRpcmVjdHNIYXBwZW5lZCA9IGNvbnRleHRBZnRlclJlZGlyZWN0cyAhPT0gY29udGV4dEJlZm9yZVJlZGlyZWN0cztcbiAgICAgICAgY29uc3QgdG9wT2ZUaGVDaGFpbkNvbnRleHRBZnRlclJlZGlyZWN0cyA9XG4gICAgICAgICAgcmVkaXJlY3RzSGFwcGVuZWQgPyBjb250ZXh0QWZ0ZXJSZWRpcmVjdHMgOiB0b3BPZlRoZUNoYWluQ29udGV4dEJlZm9yZVJlZGlyZWN0cztcblxuICAgICAgICBjb25zdCBtYXRjaGVkUGF0aCA9IGdldFBhdGhuYW1lRm9yUm91dGVyKFxuICAgICAgICAgIGdldE1hdGNoZWRQYXRoKGNvbnRleHRBZnRlclJlZGlyZWN0cy5jaGFpbiksXG4gICAgICAgICAgY29udGV4dEFmdGVyUmVkaXJlY3RzLnJlc29sdmVyXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGlzRm91bmQgPSAobWF0Y2hlZFBhdGggPT09IGNvbnRleHRBZnRlclJlZGlyZWN0cy5wYXRobmFtZSk7XG5cbiAgICAgICAgLy8gUmVjdXJzaXZlIG1ldGhvZCB0byB0cnkgbWF0Y2hpbmcgbW9yZSBjaGlsZCBhbmQgc2libGluZyByb3V0ZXNcbiAgICAgICAgY29uc3QgZmluZE5leHRDb250ZXh0SWZBbnkgPSAoY29udGV4dCwgcGFyZW50ID0gY29udGV4dC5yb3V0ZSwgcHJldlJlc3VsdCkgPT4ge1xuICAgICAgICAgIHJldHVybiBjb250ZXh0Lm5leHQodW5kZWZpbmVkLCBwYXJlbnQsIHByZXZSZXN1bHQpLnRoZW4obmV4dENvbnRleHQgPT4ge1xuICAgICAgICAgICAgaWYgKG5leHRDb250ZXh0ID09PSBudWxsIHx8IG5leHRDb250ZXh0ID09PSBub3RGb3VuZFJlc3VsdCkge1xuICAgICAgICAgICAgICAvLyBOZXh0IGNvbnRleHQgaXMgbm90IGZvdW5kIGluIGNoaWxkcmVuLCAuLi5cbiAgICAgICAgICAgICAgaWYgKGlzRm91bmQpIHtcbiAgICAgICAgICAgICAgICAvLyAuLi5idXQgb3JpZ2luYWwgY29udGV4dCBpcyBhbHJlYWR5IGZ1bGx5IG1hdGNoaW5nIC0gdXNlIGl0XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyZW50LnBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIC4uLmFuZCB0aGVyZSBpcyBubyBmdWxsIG1hdGNoIHlldCAtIHN0ZXAgdXAgdG8gY2hlY2sgc2libGluZ3NcbiAgICAgICAgICAgICAgICByZXR1cm4gZmluZE5leHRDb250ZXh0SWZBbnkoY29udGV4dCwgcGFyZW50LnBhcmVudCwgbmV4dENvbnRleHQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0Q29udGV4dDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV4dENvbnRleHQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGZpbmROZXh0Q29udGV4dElmQW55KGNvbnRleHRBZnRlclJlZGlyZWN0cykudGhlbihuZXh0Q29udGV4dCA9PiB7XG4gICAgICAgICAgaWYgKG5leHRDb250ZXh0ID09PSBudWxsIHx8IG5leHRDb250ZXh0ID09PSBub3RGb3VuZFJlc3VsdCkge1xuICAgICAgICAgICAgdGhyb3cgZ2V0Tm90Rm91bmRFcnJvcih0b3BPZlRoZUNoYWluQ29udGV4dEFmdGVyUmVkaXJlY3RzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbmV4dENvbnRleHRcbiAgICAgICAgICAmJiBuZXh0Q29udGV4dCAhPT0gbm90Rm91bmRSZXN1bHRcbiAgICAgICAgICAmJiBuZXh0Q29udGV4dCAhPT0gY29udGV4dEFmdGVyUmVkaXJlY3RzXG4gICAgICAgICAgICA/IHRoaXMuX19mdWxseVJlc29sdmVDaGFpbih0b3BPZlRoZUNoYWluQ29udGV4dEFmdGVyUmVkaXJlY3RzLCBuZXh0Q29udGV4dClcbiAgICAgICAgICAgIDogdGhpcy5fX2FtZW5kV2l0aE9uQmVmb3JlQ2FsbGJhY2tzKGNvbnRleHRBZnRlclJlZGlyZWN0cyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICBfX2ZpbmRDb21wb25lbnRDb250ZXh0QWZ0ZXJBbGxSZWRpcmVjdHMoY29udGV4dCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGNvbnRleHQucmVzdWx0O1xuICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgcmVuZGVyRWxlbWVudChjb250ZXh0LCByZXN1bHQpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdC5yZWRpcmVjdCkge1xuICAgICAgcmV0dXJuIHRoaXMuX19yZWRpcmVjdChyZXN1bHQucmVkaXJlY3QsIGNvbnRleHQuX19yZWRpcmVjdENvdW50LCBjb250ZXh0Ll9fcmVuZGVySWQpXG4gICAgICAgIC50aGVuKGNvbnRleHQgPT4gdGhpcy5fX2ZpbmRDb21wb25lbnRDb250ZXh0QWZ0ZXJBbGxSZWRpcmVjdHMoY29udGV4dCkpO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICBsb2coXG4gICAgICAgICAgICBgSW52YWxpZCByb3V0ZSByZXNvbHV0aW9uIHJlc3VsdCBmb3IgcGF0aCBcIiR7Y29udGV4dC5wYXRobmFtZX1cIi4gYCArXG4gICAgICAgICAgICBgRXhwZWN0ZWQgcmVkaXJlY3Qgb2JqZWN0IG9yIEhUTUwgZWxlbWVudCwgYnV0IGdvdDogXCIke2xvZ1ZhbHVlKHJlc3VsdCl9XCIuIGAgK1xuICAgICAgICAgICAgYERvdWJsZSBjaGVjayB0aGUgYWN0aW9uIHJldHVybiB2YWx1ZSBmb3IgdGhlIHJvdXRlLmBcbiAgICAgICAgICApXG4gICAgICAgICkpO1xuICAgIH1cbiAgfVxuXG4gIF9fYW1lbmRXaXRoT25CZWZvcmVDYWxsYmFja3MoY29udGV4dFdpdGhGdWxsQ2hhaW4pIHtcbiAgICByZXR1cm4gdGhpcy5fX3J1bk9uQmVmb3JlQ2FsbGJhY2tzKGNvbnRleHRXaXRoRnVsbENoYWluKS50aGVuKGFtZW5kZWRDb250ZXh0ID0+IHtcbiAgICAgIGlmIChhbWVuZGVkQ29udGV4dCA9PT0gdGhpcy5fX3ByZXZpb3VzQ29udGV4dCB8fCBhbWVuZGVkQ29udGV4dCA9PT0gY29udGV4dFdpdGhGdWxsQ2hhaW4pIHtcbiAgICAgICAgcmV0dXJuIGFtZW5kZWRDb250ZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX19mdWxseVJlc29sdmVDaGFpbihhbWVuZGVkQ29udGV4dCk7XG4gICAgfSk7XG4gIH1cblxuICBfX3J1bk9uQmVmb3JlQ2FsbGJhY2tzKG5ld0NvbnRleHQpIHtcbiAgICBjb25zdCBwcmV2aW91c0NvbnRleHQgPSB0aGlzLl9fcHJldmlvdXNDb250ZXh0IHx8IHt9O1xuICAgIGNvbnN0IHByZXZpb3VzQ2hhaW4gPSBwcmV2aW91c0NvbnRleHQuY2hhaW4gfHwgW107XG4gICAgY29uc3QgbmV3Q2hhaW4gPSBuZXdDb250ZXh0LmNoYWluO1xuXG4gICAgbGV0IGNhbGxiYWNrcyA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIGNvbnN0IHByZXZlbnQgPSAoKSA9PiAoe2NhbmNlbDogdHJ1ZX0pO1xuICAgIGNvbnN0IHJlZGlyZWN0ID0gKHBhdGhuYW1lKSA9PiBjcmVhdGVSZWRpcmVjdChuZXdDb250ZXh0LCBwYXRobmFtZSk7XG5cbiAgICBuZXdDb250ZXh0Ll9fZGl2ZXJnZWRDaGFpbkluZGV4ID0gMDtcbiAgICBuZXdDb250ZXh0Ll9fc2tpcEF0dGFjaCA9IGZhbHNlO1xuICAgIGlmIChwcmV2aW91c0NoYWluLmxlbmd0aCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLm1pbihwcmV2aW91c0NoYWluLmxlbmd0aCwgbmV3Q2hhaW4ubGVuZ3RoKTsgaSA9ICsrbmV3Q29udGV4dC5fX2RpdmVyZ2VkQ2hhaW5JbmRleCkge1xuICAgICAgICBpZiAocHJldmlvdXNDaGFpbltpXS5yb3V0ZSAhPT0gbmV3Q2hhaW5baV0ucm91dGVcbiAgICAgICAgICB8fCBwcmV2aW91c0NoYWluW2ldLnBhdGggIT09IG5ld0NoYWluW2ldLnBhdGggJiYgcHJldmlvdXNDaGFpbltpXS5lbGVtZW50ICE9PSBuZXdDaGFpbltpXS5lbGVtZW50XG4gICAgICAgICAgfHwgIXRoaXMuX19pc1JldXNhYmxlRWxlbWVudChwcmV2aW91c0NoYWluW2ldLmVsZW1lbnQsIG5ld0NoYWluW2ldLmVsZW1lbnQpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU2tpcCByZS1hdHRhY2hpbmcgYW5kIG5vdGlmaWNhdGlvbnMgaWYgZWxlbWVudCBhbmQgY2hhaW4gZG8gbm90IGNoYW5nZVxuICAgICAgbmV3Q29udGV4dC5fX3NraXBBdHRhY2ggPVxuICAgICAgICAvLyBTYW1lIHJvdXRlIGNoYWluXG4gICAgICAgIG5ld0NoYWluLmxlbmd0aCA9PT0gcHJldmlvdXNDaGFpbi5sZW5ndGggJiYgbmV3Q29udGV4dC5fX2RpdmVyZ2VkQ2hhaW5JbmRleCA9PSBuZXdDaGFpbi5sZW5ndGggJiZcbiAgICAgICAgLy8gU2FtZSBlbGVtZW50XG4gICAgICAgIHRoaXMuX19pc1JldXNhYmxlRWxlbWVudChuZXdDb250ZXh0LnJlc3VsdCwgcHJldmlvdXNDb250ZXh0LnJlc3VsdCk7XG5cbiAgICAgIGlmIChuZXdDb250ZXh0Ll9fc2tpcEF0dGFjaCkge1xuICAgICAgICAvLyBleGVjdXRlIG9uQmVmb3JlTGVhdmUgZm9yIGNoYW5nZWQgc2VnbWVudCBlbGVtZW50IHdoZW4gc2tpcHBpbmcgYXR0YWNoXG4gICAgICAgIGZvciAobGV0IGkgPSBuZXdDaGFpbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGNhbGxiYWNrcyA9IHRoaXMuX19ydW5PbkJlZm9yZUxlYXZlQ2FsbGJhY2tzKGNhbGxiYWNrcywgbmV3Q29udGV4dCwge3ByZXZlbnR9LCBwcmV2aW91c0NoYWluW2ldKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBleGVjdXRlIG9uQmVmb3JlRW50ZXIgZm9yIGNoYW5nZWQgc2VnbWVudCBlbGVtZW50IHdoZW4gc2tpcHBpbmcgYXR0YWNoXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3Q2hhaW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjYWxsYmFja3MgPSB0aGlzLl9fcnVuT25CZWZvcmVFbnRlckNhbGxiYWNrcyhjYWxsYmFja3MsIG5ld0NvbnRleHQsIHtwcmV2ZW50LCByZWRpcmVjdH0sIG5ld0NoYWluW2ldKTtcbiAgICAgICAgICBwcmV2aW91c0NoYWluW2ldLmVsZW1lbnQubG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihuZXdDb250ZXh0LCBwcmV2aW91c0NoYWluW2ldLnJvdXRlKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBleGVjdXRlIG9uQmVmb3JlTGVhdmUgd2hlbiBOT1Qgc2tpcHBpbmcgYXR0YWNoXG4gICAgICAgIGZvciAobGV0IGkgPSBwcmV2aW91c0NoYWluLmxlbmd0aCAtIDE7IGkgPj0gbmV3Q29udGV4dC5fX2RpdmVyZ2VkQ2hhaW5JbmRleDsgaS0tKSB7XG4gICAgICAgICAgY2FsbGJhY2tzID0gdGhpcy5fX3J1bk9uQmVmb3JlTGVhdmVDYWxsYmFja3MoY2FsbGJhY2tzLCBuZXdDb250ZXh0LCB7cHJldmVudH0sIHByZXZpb3VzQ2hhaW5baV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGV4ZWN1dGUgb25CZWZvcmVFbnRlciB3aGVuIE5PVCBza2lwcGluZyBhdHRhY2hcbiAgICBpZiAoIW5ld0NvbnRleHQuX19za2lwQXR0YWNoKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0NoYWluLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpIDwgbmV3Q29udGV4dC5fX2RpdmVyZ2VkQ2hhaW5JbmRleCkge1xuICAgICAgICAgIGlmIChpIDwgcHJldmlvdXNDaGFpbi5sZW5ndGggJiYgcHJldmlvdXNDaGFpbltpXS5lbGVtZW50KSB7XG4gICAgICAgICAgICBwcmV2aW91c0NoYWluW2ldLmVsZW1lbnQubG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihuZXdDb250ZXh0LCBwcmV2aW91c0NoYWluW2ldLnJvdXRlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2tzID0gdGhpcy5fX3J1bk9uQmVmb3JlRW50ZXJDYWxsYmFja3MoY2FsbGJhY2tzLCBuZXdDb250ZXh0LCB7cHJldmVudCwgcmVkaXJlY3R9LCBuZXdDaGFpbltpXSk7XG4gICAgICAgICAgaWYgKG5ld0NoYWluW2ldLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIG5ld0NoYWluW2ldLmVsZW1lbnQubG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihuZXdDb250ZXh0LCBuZXdDaGFpbltpXS5yb3V0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYWxsYmFja3MudGhlbihhbWVuZG1lbnRSZXN1bHQgPT4ge1xuICAgICAgaWYgKGFtZW5kbWVudFJlc3VsdCkge1xuICAgICAgICBpZiAoYW1lbmRtZW50UmVzdWx0LmNhbmNlbCkge1xuICAgICAgICAgIHRoaXMuX19wcmV2aW91c0NvbnRleHQuX19yZW5kZXJJZCA9IG5ld0NvbnRleHQuX19yZW5kZXJJZDtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fX3ByZXZpb3VzQ29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW1lbmRtZW50UmVzdWx0LnJlZGlyZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX19yZWRpcmVjdChhbWVuZG1lbnRSZXN1bHQucmVkaXJlY3QsIG5ld0NvbnRleHQuX19yZWRpcmVjdENvdW50LCBuZXdDb250ZXh0Ll9fcmVuZGVySWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3Q29udGV4dDtcbiAgICB9KTtcbiAgfVxuXG4gIF9fcnVuT25CZWZvcmVMZWF2ZUNhbGxiYWNrcyhjYWxsYmFja3MsIG5ld0NvbnRleHQsIGNvbW1hbmRzLCBjaGFpbkVsZW1lbnQpIHtcbiAgICBjb25zdCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKG5ld0NvbnRleHQpO1xuICAgIHJldHVybiBjYWxsYmFja3MudGhlbihyZXN1bHQgPT4ge1xuICAgICAgaWYgKHRoaXMuX19pc0xhdGVzdFJlbmRlcihuZXdDb250ZXh0KSkge1xuICAgICAgICBjb25zdCBhZnRlckxlYXZlRnVuY3Rpb24gPSBhbWVuZCgnb25CZWZvcmVMZWF2ZScsIFtsb2NhdGlvbiwgY29tbWFuZHMsIHRoaXNdLCBjaGFpbkVsZW1lbnQuZWxlbWVudCk7XG4gICAgICAgIHJldHVybiBhZnRlckxlYXZlRnVuY3Rpb24ocmVzdWx0KTtcbiAgICAgIH1cbiAgICB9KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICBpZiAoIShyZXN1bHQgfHwge30pLnJlZGlyZWN0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfX3J1bk9uQmVmb3JlRW50ZXJDYWxsYmFja3MoY2FsbGJhY2tzLCBuZXdDb250ZXh0LCBjb21tYW5kcywgY2hhaW5FbGVtZW50KSB7XG4gICAgY29uc3QgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihuZXdDb250ZXh0LCBjaGFpbkVsZW1lbnQucm91dGUpO1xuICAgIHJldHVybiBjYWxsYmFja3MudGhlbihyZXN1bHQgPT4ge1xuICAgICAgaWYgKHRoaXMuX19pc0xhdGVzdFJlbmRlcihuZXdDb250ZXh0KSkge1xuICAgICAgICBjb25zdCBiZWZvcmVFbnRlckZ1bmN0aW9uID0gYW1lbmQoJ29uQmVmb3JlRW50ZXInLCBbbG9jYXRpb24sIGNvbW1hbmRzLCB0aGlzXSwgY2hhaW5FbGVtZW50LmVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gYmVmb3JlRW50ZXJGdW5jdGlvbihyZXN1bHQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX19pc1JldXNhYmxlRWxlbWVudChlbGVtZW50LCBvdGhlckVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudCAmJiBvdGhlckVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fY3JlYXRlZEJ5Um91dGVyLmdldChlbGVtZW50KSAmJiB0aGlzLl9fY3JlYXRlZEJ5Um91dGVyLmdldChvdGhlckVsZW1lbnQpXG4gICAgICAgID8gZWxlbWVudC5sb2NhbE5hbWUgPT09IG90aGVyRWxlbWVudC5sb2NhbE5hbWVcbiAgICAgICAgOiBlbGVtZW50ID09PSBvdGhlckVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIF9faXNMYXRlc3RSZW5kZXIoY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0Ll9fcmVuZGVySWQgPT09IHRoaXMuX19sYXN0U3RhcnRlZFJlbmRlcklkO1xuICB9XG5cbiAgX19yZWRpcmVjdChyZWRpcmVjdERhdGEsIGNvdW50ZXIsIHJlbmRlcklkKSB7XG4gICAgaWYgKGNvdW50ZXIgPiBNQVhfUkVESVJFQ1RfQ09VTlQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihsb2coYFRvbyBtYW55IHJlZGlyZWN0cyB3aGVuIHJlbmRlcmluZyAke3JlZGlyZWN0RGF0YS5mcm9tfWApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZXNvbHZlKHtcbiAgICAgIHBhdGhuYW1lOiB0aGlzLnVybEZvclBhdGgoXG4gICAgICAgIHJlZGlyZWN0RGF0YS5wYXRobmFtZSxcbiAgICAgICAgcmVkaXJlY3REYXRhLnBhcmFtc1xuICAgICAgKSxcbiAgICAgIHJlZGlyZWN0RnJvbTogcmVkaXJlY3REYXRhLmZyb20sXG4gICAgICBfX3JlZGlyZWN0Q291bnQ6IChjb3VudGVyIHx8IDApICsgMSxcbiAgICAgIF9fcmVuZGVySWQ6IHJlbmRlcklkXG4gICAgfSk7XG4gIH1cblxuICBfX2Vuc3VyZU91dGxldChvdXRsZXQgPSB0aGlzLl9fb3V0bGV0KSB7XG4gICAgaWYgKCEob3V0bGV0IGluc3RhbmNlb2YgTm9kZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IobG9nKGBFeHBlY3RlZCByb3V0ZXIgb3V0bGV0IHRvIGJlIGEgdmFsaWQgRE9NIE5vZGUgKGJ1dCBnb3QgJHtvdXRsZXR9KWApKTtcbiAgICB9XG4gIH1cblxuICBfX3VwZGF0ZUJyb3dzZXJIaXN0b3J5KHtwYXRobmFtZSwgc2VhcmNoID0gJycsIGhhc2ggPSAnJ30sIHJlcGxhY2UpIHtcbiAgICBpZiAod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICE9PSBwYXRobmFtZVxuICAgICAgICB8fCB3aW5kb3cubG9jYXRpb24uc2VhcmNoICE9PSBzZWFyY2hcbiAgICAgICAgfHwgd2luZG93LmxvY2F0aW9uLmhhc2ggIT09IGhhc2hcbiAgICApIHtcbiAgICAgIGNvbnN0IGNoYW5nZVN0YXRlID0gcmVwbGFjZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSc7XG4gICAgICB3aW5kb3cuaGlzdG9yeVtjaGFuZ2VTdGF0ZV0obnVsbCwgZG9jdW1lbnQudGl0bGUsIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaCk7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgUG9wU3RhdGVFdmVudCgncG9wc3RhdGUnLCB7c3RhdGU6ICd2YWFkaW4tcm91dGVyLWlnbm9yZSd9KSk7XG4gICAgfVxuICB9XG5cbiAgX19jb3B5VW5jaGFuZ2VkRWxlbWVudHMoY29udGV4dCwgcHJldmlvdXNDb250ZXh0KSB7XG4gICAgLy8gRmluZCB0aGUgZGVlcGVzdCBjb21tb24gcGFyZW50IGJldHdlZW4gdGhlIGxhc3QgYW5kIHRoZSBuZXcgY29tcG9uZW50XG4gICAgLy8gY2hhaW5zLiBVcGRhdGUgcmVmZXJlbmNlcyBmb3IgdGhlIHVuY2hhbmdlZCBlbGVtZW50cyBpbiB0aGUgbmV3IGNoYWluXG4gICAgbGV0IGRlZXBlc3RDb21tb25QYXJlbnQgPSB0aGlzLl9fb3V0bGV0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGV4dC5fX2RpdmVyZ2VkQ2hhaW5JbmRleDsgaSsrKSB7XG4gICAgICBjb25zdCB1bmNoYW5nZWRFbGVtZW50ID0gcHJldmlvdXNDb250ZXh0ICYmIHByZXZpb3VzQ29udGV4dC5jaGFpbltpXS5lbGVtZW50O1xuICAgICAgaWYgKHVuY2hhbmdlZEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHVuY2hhbmdlZEVsZW1lbnQucGFyZW50Tm9kZSA9PT0gZGVlcGVzdENvbW1vblBhcmVudCkge1xuICAgICAgICAgIGNvbnRleHQuY2hhaW5baV0uZWxlbWVudCA9IHVuY2hhbmdlZEVsZW1lbnQ7XG4gICAgICAgICAgZGVlcGVzdENvbW1vblBhcmVudCA9IHVuY2hhbmdlZEVsZW1lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlZXBlc3RDb21tb25QYXJlbnQ7XG4gIH1cblxuICBfX2FkZEFwcGVhcmluZ0NvbnRlbnQoY29udGV4dCwgcHJldmlvdXNDb250ZXh0KSB7XG4gICAgdGhpcy5fX2Vuc3VyZU91dGxldCgpO1xuXG4gICAgLy8gSWYgdGhlIHByZXZpb3VzICdlbnRlcmluZycgYW5pbWF0aW9uIGhhcyBub3QgY29tcGxldGVkIHlldCxcbiAgICAvLyBzdG9wIGl0IGFuZCByZW1vdmUgdGhhdCBjb250ZW50IGZyb20gdGhlIERPTSBiZWZvcmUgYWRkaW5nIG5ldyBvbmUuXG4gICAgdGhpcy5fX3JlbW92ZUFwcGVhcmluZ0NvbnRlbnQoKTtcblxuICAgIC8vIENvcHkgcmV1c2FibGUgZWxlbWVudHMgZnJvbSB0aGUgcHJldmlvdXNDb250ZXh0IHRvIGN1cnJlbnRcbiAgICBjb25zdCBkZWVwZXN0Q29tbW9uUGFyZW50ID0gdGhpcy5fX2NvcHlVbmNoYW5nZWRFbGVtZW50cyhjb250ZXh0LCBwcmV2aW91c0NvbnRleHQpO1xuXG4gICAgLy8gS2VlcCB0d28gbGlzdHMgb2YgRE9NIGVsZW1lbnRzOlxuICAgIC8vICAtIHRob3NlIHRoYXQgc2hvdWxkIGJlIHJlbW92ZWQgb25jZSB0aGUgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgb3ZlclxuICAgIC8vICAtIGFuZCB0aG9zZSB0aGF0IHNob3VsZCByZW1haW5cbiAgICB0aGlzLl9fYXBwZWFyaW5nQ29udGVudCA9IFtdO1xuICAgIHRoaXMuX19kaXNhcHBlYXJpbmdDb250ZW50ID0gQXJyYXlcbiAgICAgIC5mcm9tKGRlZXBlc3RDb21tb25QYXJlbnQuY2hpbGRyZW4pXG4gICAgICAuZmlsdGVyKFxuICAgICAgICAvLyBPbmx5IHJlbW92ZSBsYXlvdXQgY29udGVudCB0aGF0IHdhcyBhZGRlZCBieSByb3V0ZXJcbiAgICAgICAgZSA9PiB0aGlzLl9fYWRkZWRCeVJvdXRlci5nZXQoZSkgJiZcbiAgICAgICAgLy8gRG8gbm90IHJlbW92ZSB0aGUgcmVzdWx0IGVsZW1lbnQgdG8gYXZvaWQgZmxpY2tlcmluZ1xuICAgICAgICBlICE9PSBjb250ZXh0LnJlc3VsdCk7XG5cbiAgICAvLyBBZGQgbmV3IGVsZW1lbnRzIChzdGFydGluZyBhZnRlciB0aGUgZGVlcGVzdCBjb21tb24gcGFyZW50KSB0byB0aGUgRE9NLlxuICAgIC8vIFRoYXQgd2F5IG9ubHkgdGhlIGNvbXBvbmVudHMgdGhhdCBhcmUgYWN0dWFsbHkgZGlmZmVyZW50IGJldHdlZW4gdGhlIHR3b1xuICAgIC8vIGxvY2F0aW9ucyBhcmUgYWRkZWQgdG8gdGhlIERPTSAoYW5kIHRob3NlIHRoYXQgYXJlIGNvbW1vbiByZW1haW4gaW4gdGhlXG4gICAgLy8gRE9NIHdpdGhvdXQgZmlyc3QgcmVtb3ZpbmcgYW5kIHRoZW4gYWRkaW5nIHRoZW0gYWdhaW4pLlxuICAgIGxldCBwYXJlbnRFbGVtZW50ID0gZGVlcGVzdENvbW1vblBhcmVudDtcbiAgICBmb3IgKGxldCBpID0gY29udGV4dC5fX2RpdmVyZ2VkQ2hhaW5JbmRleDsgaSA8IGNvbnRleHQuY2hhaW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGVsZW1lbnRUb0FkZCA9IGNvbnRleHQuY2hhaW5baV0uZWxlbWVudDtcbiAgICAgIGlmIChlbGVtZW50VG9BZGQpIHtcbiAgICAgICAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50VG9BZGQpO1xuICAgICAgICB0aGlzLl9fYWRkZWRCeVJvdXRlci5zZXQoZWxlbWVudFRvQWRkLCB0cnVlKTtcbiAgICAgICAgaWYgKHBhcmVudEVsZW1lbnQgPT09IGRlZXBlc3RDb21tb25QYXJlbnQpIHtcbiAgICAgICAgICB0aGlzLl9fYXBwZWFyaW5nQ29udGVudC5wdXNoKGVsZW1lbnRUb0FkZCk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50RWxlbWVudCA9IGVsZW1lbnRUb0FkZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfX3JlbW92ZURpc2FwcGVhcmluZ0NvbnRlbnQoKSB7XG4gICAgaWYgKHRoaXMuX19kaXNhcHBlYXJpbmdDb250ZW50KSB7XG4gICAgICByZW1vdmVEb21Ob2Rlcyh0aGlzLl9fZGlzYXBwZWFyaW5nQ29udGVudCk7XG4gICAgfVxuICAgIHRoaXMuX19kaXNhcHBlYXJpbmdDb250ZW50ID0gbnVsbDtcbiAgICB0aGlzLl9fYXBwZWFyaW5nQ29udGVudCA9IG51bGw7XG4gIH1cblxuICBfX3JlbW92ZUFwcGVhcmluZ0NvbnRlbnQoKSB7XG4gICAgaWYgKHRoaXMuX19kaXNhcHBlYXJpbmdDb250ZW50ICYmIHRoaXMuX19hcHBlYXJpbmdDb250ZW50KSB7XG4gICAgICByZW1vdmVEb21Ob2Rlcyh0aGlzLl9fYXBwZWFyaW5nQ29udGVudCk7XG4gICAgICB0aGlzLl9fZGlzYXBwZWFyaW5nQ29udGVudCA9IG51bGw7XG4gICAgICB0aGlzLl9fYXBwZWFyaW5nQ29udGVudCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgX19ydW5PbkFmdGVyTGVhdmVDYWxsYmFja3MoY3VycmVudENvbnRleHQsIHRhcmdldENvbnRleHQpIHtcbiAgICBpZiAoIXRhcmdldENvbnRleHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSRVZFUlNFIGl0ZXJhdGlvbjogZnJvbSBaIHRvIEFcbiAgICBmb3IgKGxldCBpID0gdGFyZ2V0Q29udGV4dC5jaGFpbi5sZW5ndGggLSAxOyBpID49IGN1cnJlbnRDb250ZXh0Ll9fZGl2ZXJnZWRDaGFpbkluZGV4OyBpLS0pIHtcbiAgICAgIGlmICghdGhpcy5fX2lzTGF0ZXN0UmVuZGVyKGN1cnJlbnRDb250ZXh0KSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNvbnN0IGN1cnJlbnRDb21wb25lbnQgPSB0YXJnZXRDb250ZXh0LmNoYWluW2ldLmVsZW1lbnQ7XG4gICAgICBpZiAoIWN1cnJlbnRDb21wb25lbnQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGN1cnJlbnRDb250ZXh0KTtcbiAgICAgICAgcnVuQ2FsbGJhY2tJZlBvc3NpYmxlKFxuICAgICAgICAgIGN1cnJlbnRDb21wb25lbnQub25BZnRlckxlYXZlLFxuICAgICAgICAgIFtsb2NhdGlvbiwge30sIHRhcmdldENvbnRleHQucmVzb2x2ZXJdLFxuICAgICAgICAgIGN1cnJlbnRDb21wb25lbnQpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKHRoaXMuX19kaXNhcHBlYXJpbmdDb250ZW50LmluZGV4T2YoY3VycmVudENvbXBvbmVudCkgPiAtMSkge1xuICAgICAgICAgIHJlbW92ZURvbU5vZGVzKGN1cnJlbnRDb21wb25lbnQuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX19ydW5PbkFmdGVyRW50ZXJDYWxsYmFja3MoY3VycmVudENvbnRleHQpIHtcbiAgICAvLyBmb3J3YXJkIGl0ZXJhdGlvbjogZnJvbSBBIHRvIFpcbiAgICBmb3IgKGxldCBpID0gY3VycmVudENvbnRleHQuX19kaXZlcmdlZENoYWluSW5kZXg7IGkgPCBjdXJyZW50Q29udGV4dC5jaGFpbi5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCF0aGlzLl9faXNMYXRlc3RSZW5kZXIoY3VycmVudENvbnRleHQpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY29uc3QgY3VycmVudENvbXBvbmVudCA9IGN1cnJlbnRDb250ZXh0LmNoYWluW2ldLmVsZW1lbnQgfHwge307XG4gICAgICBjb25zdCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGN1cnJlbnRDb250ZXh0LCBjdXJyZW50Q29udGV4dC5jaGFpbltpXS5yb3V0ZSk7XG4gICAgICBydW5DYWxsYmFja0lmUG9zc2libGUoXG4gICAgICAgIGN1cnJlbnRDb21wb25lbnQub25BZnRlckVudGVyLFxuICAgICAgICBbbG9jYXRpb24sIHt9LCBjdXJyZW50Q29udGV4dC5yZXNvbHZlcl0sXG4gICAgICAgIGN1cnJlbnRDb21wb25lbnQpO1xuICAgIH1cbiAgfVxuXG4gIF9fYW5pbWF0ZUlmTmVlZGVkKGNvbnRleHQpIHtcbiAgICBjb25zdCBmcm9tID0gKHRoaXMuX19kaXNhcHBlYXJpbmdDb250ZW50IHx8IFtdKVswXTtcbiAgICBjb25zdCB0byA9ICh0aGlzLl9fYXBwZWFyaW5nQ29udGVudCB8fCBbXSlbMF07XG4gICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcblxuICAgIGNvbnN0IGNoYWluID0gY29udGV4dC5jaGFpbjtcbiAgICBsZXQgY29uZmlnO1xuICAgIGZvciAobGV0IGkgPSBjaGFpbi5sZW5ndGg7IGkgPiAwOyBpLS0pIHtcbiAgICAgIGlmIChjaGFpbltpIC0gMV0ucm91dGUuYW5pbWF0ZSkge1xuICAgICAgICBjb25maWcgPSBjaGFpbltpIC0gMV0ucm91dGUuYW5pbWF0ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGZyb20gJiYgdG8gJiYgY29uZmlnKSB7XG4gICAgICBjb25zdCBsZWF2ZSA9IGlzT2JqZWN0KGNvbmZpZykgJiYgY29uZmlnLmxlYXZlIHx8ICdsZWF2aW5nJztcbiAgICAgIGNvbnN0IGVudGVyID0gaXNPYmplY3QoY29uZmlnKSAmJiBjb25maWcuZW50ZXIgfHwgJ2VudGVyaW5nJztcbiAgICAgIHByb21pc2VzLnB1c2goYW5pbWF0ZShmcm9tLCBsZWF2ZSkpO1xuICAgICAgcHJvbWlzZXMucHVzaChhbmltYXRlKHRvLCBlbnRlcikpO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKSA9PiBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIHRoaXMgaW5zdGFuY2UgdG8gbmF2aWdhdGlvbiBldmVudHMgb24gdGhlIGB3aW5kb3dgLlxuICAgKlxuICAgKiBOT1RFOiBiZXdhcmUgb2YgcmVzb3VyY2UgbGVha3MuIEZvciBhcyBsb25nIGFzIGEgcm91dGVyIGluc3RhbmNlIGlzXG4gICAqIHN1YnNjcmliZWQgdG8gbmF2aWdhdGlvbiBldmVudHMsIGl0IHdvbid0IGJlIGdhcmJhZ2UgY29sbGVjdGVkLlxuICAgKi9cbiAgc3Vic2NyaWJlKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd2YWFkaW4tcm91dGVyLWdvJywgdGhpcy5fX25hdmlnYXRpb25FdmVudEhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIHN1YnNjcmlwdGlvbiB0byBuYXZpZ2F0aW9uIGV2ZW50cyBjcmVhdGVkIGluIHRoZSBgc3Vic2NyaWJlKClgXG4gICAqIG1ldGhvZC5cbiAgICovXG4gIHVuc3Vic2NyaWJlKCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd2YWFkaW4tcm91dGVyLWdvJywgdGhpcy5fX25hdmlnYXRpb25FdmVudEhhbmRsZXIpO1xuICB9XG5cbiAgX19vbk5hdmlnYXRpb25FdmVudChldmVudCkge1xuICAgIGNvbnN0IHtwYXRobmFtZSwgc2VhcmNoLCBoYXNofSA9IGV2ZW50ID8gZXZlbnQuZGV0YWlsIDogd2luZG93LmxvY2F0aW9uO1xuICAgIGlmIChpc1N0cmluZyh0aGlzLl9fbm9ybWFsaXplUGF0aG5hbWUocGF0aG5hbWUpKSkge1xuICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlbmRlcih7cGF0aG5hbWUsIHNlYXJjaCwgaGFzaH0sIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmVzIHdoYXQgdHJpZ2dlcnMgUm91dGVyIG5hdmlnYXRpb24gZXZlbnRzOlxuICAgKiAgLSBgUE9QU1RBVEVgOiBwb3BzdGF0ZSBldmVudHMgb24gdGhlIGN1cnJlbnQgYHdpbmRvd2BcbiAgICogIC0gYENMSUNLYDogY2xpY2sgZXZlbnRzIG9uIGA8YT5gIGxpbmtzIGxlYWRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZVxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBpbnZva2VkIHdpdGggdGhlIHByZS1jb25maWd1cmVkIHZhbHVlcyB3aGVuIGNyZWF0aW5nIGEgbmV3IFJvdXRlciBpbnN0YW5jZS5cbiAgICogQnkgZGVmYXVsdCwgYm90aCBgUE9QU1RBVEVgIGFuZCBgQ0xJQ0tgIGFyZSBlbmFibGVkLiBUaGlzIHNldHVwIGlzIGV4cGVjdGVkIHRvIGNvdmVyIG1vc3Qgb2YgdGhlIHVzZSBjYXNlcy5cbiAgICpcbiAgICogU2VlIHRoZSBgcm91dGVyLWNvbmZpZy5qc2AgZm9yIHRoZSBkZWZhdWx0IG5hdmlnYXRpb24gdHJpZ2dlcnMgY29uZmlnLiBCYXNlZCBvbiBpdCwgeW91IGNhblxuICAgKiBjcmVhdGUgdGhlIG93biBvbmUgYW5kIG9ubHkgaW1wb3J0IHRoZSB0cmlnZ2VycyB5b3UgbmVlZCwgaW5zdGVhZCBvZiBwdWxsaW5nIGluIGFsbCB0aGUgY29kZSxcbiAgICogZS5nLiBpZiB5b3Ugd2FudCB0byBoYW5kbGUgYGNsaWNrYCBkaWZmZXJlbnRseS5cbiAgICpcbiAgICogU2VlIGFsc28gKipOYXZpZ2F0aW9uIFRyaWdnZXJzKiogc2VjdGlvbiBpbiBbTGl2ZSBFeGFtcGxlc10oIy9jbGFzc2VzL1JvdXRlci9kZW1vcy9kZW1vL2luZGV4Lmh0bWwpLlxuICAgKlxuICAgKiBAcGFyYW0gey4uLk5hdmlnYXRpb25UcmlnZ2VyfSB0cmlnZ2Vyc1xuICAgKi9cbiAgc3RhdGljIHNldFRyaWdnZXJzKC4uLnRyaWdnZXJzKSB7XG4gICAgc2V0TmF2aWdhdGlvblRyaWdnZXJzKHRyaWdnZXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBVUkwgZm9yIHRoZSByb3V0ZSB3aXRoIHRoZSBnaXZlbiBuYW1lLCBvcHRpb25hbGx5IHBlcmZvcm1pbmdcbiAgICogc3Vic3RpdHV0aW9uIG9mIHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIFRoZSByb3V0ZSBpcyBzZWFyY2hlZCBpbiBhbGwgdGhlIFJvdXRlciBpbnN0YW5jZXMgc3Vic2NyaWJlZCB0b1xuICAgKiBuYXZpZ2F0aW9uIGV2ZW50cy5cbiAgICpcbiAgICogKipOb3RlOioqIEZvciBjaGlsZCByb3V0ZSBuYW1lcywgb25seSBhcnJheSBjaGlsZHJlbiBhcmUgY29uc2lkZXJlZC5cbiAgICogSXQgaXMgbm90IHBvc3NpYmxlIHRvIGdlbmVyYXRlIFVSTHMgdXNpbmcgYSBuYW1lIGZvciByb3V0ZXMgc2V0IHdpdGhcbiAgICogYSBjaGlsZHJlbiBmdW5jdGlvbi5cbiAgICpcbiAgICogQGZ1bmN0aW9uIHVybEZvck5hbWVcbiAgICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIHRoZSByb3V0ZSBuYW1lIG9yIHRoZSByb3V0ZeKAmXMgYGNvbXBvbmVudGAgbmFtZS5cbiAgICogQHBhcmFtIHtQYXJhbXM9fSBwYXJhbXMgT3B0aW9uYWwgb2JqZWN0IHdpdGggcm91dGUgcGF0aCBwYXJhbWV0ZXJzLlxuICAgKiBOYW1lZCBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQgYnkgbmFtZSAoYHBhcmFtc1tuYW1lXSA9IHZhbHVlYCksIHVubmFtZWRcbiAgICogcGFyYW1ldGVycyBhcmUgcGFzc2VkIGJ5IGluZGV4IChgcGFyYW1zW2luZGV4XSA9IHZhbHVlYCkuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHVybEZvck5hbWUobmFtZSwgcGFyYW1zKSB7XG4gICAgaWYgKCF0aGlzLl9fdXJsRm9yTmFtZSkge1xuICAgICAgdGhpcy5fX3VybEZvck5hbWUgPSBnZW5lcmF0ZVVybHModGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBnZXRQYXRobmFtZUZvclJvdXRlcihcbiAgICAgIHRoaXMuX191cmxGb3JOYW1lKG5hbWUsIHBhcmFtcyksXG4gICAgICB0aGlzXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBVUkwgZm9yIHRoZSBnaXZlbiByb3V0ZSBwYXRoLCBvcHRpb25hbGx5IHBlcmZvcm1pbmdcbiAgICogc3Vic3RpdHV0aW9uIG9mIHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7IXN0cmluZ30gcGF0aCBzdHJpbmcgcm91dGUgcGF0aCBkZWNsYXJlZCBpbiBbZXhwcmVzcy5qcyBzeW50YXhdKGh0dHBzOi8vZXhwcmVzc2pzLmNvbS9lbi9ndWlkZS9yb3V0aW5nLmh0bWwjcm91dGUtcGF0aHNcIikuXG4gICAqIEBwYXJhbSB7UGFyYW1zPX0gcGFyYW1zIE9wdGlvbmFsIG9iamVjdCB3aXRoIHJvdXRlIHBhdGggcGFyYW1ldGVycy5cbiAgICogTmFtZWQgcGFyYW1ldGVycyBhcmUgcGFzc2VkIGJ5IG5hbWUgKGBwYXJhbXNbbmFtZV0gPSB2YWx1ZWApLCB1bm5hbWVkXG4gICAqIHBhcmFtZXRlcnMgYXJlIHBhc3NlZCBieSBpbmRleCAoYHBhcmFtc1tpbmRleF0gPSB2YWx1ZWApLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB1cmxGb3JQYXRoKHBhdGgsIHBhcmFtcykge1xuICAgIHJldHVybiBnZXRQYXRobmFtZUZvclJvdXRlcihcbiAgICAgIFJvdXRlci5wYXRoVG9SZWdleHAuY29tcGlsZShwYXRoKShwYXJhbXMpLFxuICAgICAgdGhpc1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVHJpZ2dlcnMgbmF2aWdhdGlvbiB0byBhIG5ldyBwYXRoLiBSZXR1cm5zIGEgYm9vbGVhbiB3aXRob3V0IHdhaXRpbmcgdW50aWxcbiAgICogdGhlIG5hdmlnYXRpb24gaXMgY29tcGxldGUuIFJldHVybnMgYHRydWVgIGlmIGF0IGxlYXN0IG9uZSBgUm91dGVyYFxuICAgKiBoYXMgaGFuZGxlZCB0aGUgbmF2aWdhdGlvbiAod2FzIHN1YnNjcmliZWQgYW5kIGhhZCBgYmFzZVVybGAgbWF0Y2hpbmdcbiAgICogdGhlIGBwYXRoYCBhcmd1bWVudCksIG90aGVyd2lzZSByZXR1cm5zIGBmYWxzZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7IXN0cmluZ3whe3BhdGhuYW1lOiAhc3RyaW5nLCBzZWFyY2g6IChzdHJpbmd8dW5kZWZpbmVkKSwgaGFzaDogKHN0cmluZ3x1bmRlZmluZWQpfX0gcGF0aFxuICAgKiAgIGEgbmV3IGluLWFwcCBwYXRoIHN0cmluZywgb3IgYW4gVVJMLWxpa2Ugb2JqZWN0IHdpdGggYHBhdGhuYW1lYFxuICAgKiAgIHN0cmluZyBwcm9wZXJ0eSwgYW5kIG9wdGlvbmFsIGBzZWFyY2hgIGFuZCBgaGFzaGAgc3RyaW5nIHByb3BlcnRpZXMuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgZ28ocGF0aCkge1xuICAgIGNvbnN0IHtwYXRobmFtZSwgc2VhcmNoLCBoYXNofSA9IGlzU3RyaW5nKHBhdGgpXG4gICAgICA/IHRoaXMuX19jcmVhdGVVcmwocGF0aCwgJ2h0dHA6Ly9hJykgLy8gc29tZSBiYXNlIHRvIG9taXQgb3JpZ2luXG4gICAgICA6IHBhdGg7XG4gICAgcmV0dXJuIGZpcmVSb3V0ZXJFdmVudCgnZ28nLCB7cGF0aG5hbWUsIHNlYXJjaCwgaGFzaH0pO1xuICB9XG59XG5cbmNvbnN0IERFVl9NT0RFX0NPREVfUkVHRVhQID1cbiAgL1xcL1xcKltcXCohXVxccyt2YWFkaW4tZGV2LW1vZGU6c3RhcnQoW1xcc1xcU10qKXZhYWRpbi1kZXYtbW9kZTplbmRcXHMrXFwqXFwqXFwvL2k7XG5cbmNvbnN0IEZsb3dDbGllbnRzID0gd2luZG93LlZhYWRpbiAmJiB3aW5kb3cuVmFhZGluLkZsb3cgJiYgd2luZG93LlZhYWRpbi5GbG93LmNsaWVudHM7XG5cbmZ1bmN0aW9uIGlzTWluaWZpZWQoKSB7XG4gIGZ1bmN0aW9uIHRlc3QoKSB7XG4gICAgLyoqIHZhYWRpbi1kZXYtbW9kZTpzdGFydFxuICAgIHJldHVybiBmYWxzZTtcbiAgICB2YWFkaW4tZGV2LW1vZGU6ZW5kICoqL1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiB1bmNvbW1lbnRBbmRSdW4odGVzdCk7XG59XG5cbmZ1bmN0aW9uIGlzRGV2ZWxvcG1lbnRNb2RlKCkge1xuICB0cnkge1xuICAgIGlmIChpc0ZvcmNlZERldmVsb3BtZW50TW9kZSgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIWlzTG9jYWxob3N0KCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoRmxvd0NsaWVudHMpIHtcbiAgICAgIHJldHVybiAhaXNGbG93UHJvZHVjdGlvbk1vZGUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTWluaWZpZWQoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFNvbWUgZXJyb3IgaW4gdGhpcyBjb2RlLCBhc3N1bWUgcHJvZHVjdGlvbiBzbyBubyBmdXJ0aGVyIGFjdGlvbnMgd2lsbCBiZSB0YWtlblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0ZvcmNlZERldmVsb3BtZW50TW9kZSgpIHtcbiAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidmFhZGluLmRldmVsb3BtZW50bW9kZS5mb3JjZVwiKTtcbn1cblxuZnVuY3Rpb24gaXNMb2NhbGhvc3QoKSB7XG4gIHJldHVybiAoW1wibG9jYWxob3N0XCIsXCIxMjcuMC4wLjFcIl0uaW5kZXhPZih3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpID49IDApO1xufVxuXG5mdW5jdGlvbiBpc0Zsb3dQcm9kdWN0aW9uTW9kZSgpIHtcbiAgaWYgKEZsb3dDbGllbnRzKSB7XG4gICAgY29uc3QgcHJvZHVjdGlvbk1vZGVBcHBzID0gT2JqZWN0LmtleXMoRmxvd0NsaWVudHMpXG4gICAgICAubWFwKGtleSA9PiBGbG93Q2xpZW50c1trZXldKVxuICAgICAgLmZpbHRlcihjbGllbnQgPT4gY2xpZW50LnByb2R1Y3Rpb25Nb2RlKTtcbiAgICBpZiAocHJvZHVjdGlvbk1vZGVBcHBzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHVuY29tbWVudEFuZFJ1bihjYWxsYmFjaywgYXJncykge1xuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbWF0Y2ggPSBERVZfTU9ERV9DT0RFX1JFR0VYUC5leGVjKGNhbGxiYWNrLnRvU3RyaW5nKCkpO1xuICBpZiAobWF0Y2gpIHtcbiAgICB0cnkge1xuICAgICAgLy8gcmVxdWlyZXMgQ1NQOiBzY3JpcHQtc3JjICd1bnNhZmUtZXZhbCdcbiAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKG1hdGNoWzFdKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlYXQgdGhlIGV4Y2VwdGlvblxuICAgICAgY29uc29sZS5sb2coJ3ZhYWRpbi1kZXZlbG9wbWVudC1tb2RlLWRldGVjdG9yOiB1bmNvbW1lbnRBbmRSdW4oKSBmYWlsZWQnLCBlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2soYXJncyk7XG59XG5cbi8vIEEgZ3VhcmQgYWdhaW5zdCBwb2x5bWVyLW1vZHVsaXplciByZW1vdmluZyB0aGUgd2luZG93LlZhYWRpblxuLy8gaW5pdGlhbGl6YXRpb24gYWJvdmUuXG53aW5kb3dbJ1ZhYWRpbiddID0gd2luZG93WydWYWFkaW4nXSB8fCB7fTtcblxuLyoqXG4gKiBJbnNwZWN0cyB0aGUgc291cmNlIGNvZGUgb2YgdGhlIGdpdmVuIGBjYWxsYmFja2AgZnVuY3Rpb24gZm9yXG4gKiBzcGVjaWFsbHktbWFya2VkIF9jb21tZW50ZWRfIGNvZGUuIElmIHN1Y2ggY29tbWVudGVkIGNvZGUgaXMgZm91bmQgaW4gdGhlXG4gKiBjYWxsYmFjayBzb3VyY2UsIHVuY29tbWVudHMgYW5kIHJ1bnMgdGhhdCBjb2RlIGluc3RlYWQgb2YgdGhlIGNhbGxiYWNrXG4gKiBpdHNlbGYuIE90aGVyd2lzZSBydW5zIHRoZSBjYWxsYmFjayBhcyBpcy5cbiAqXG4gKiBUaGUgb3B0aW9uYWwgYXJndW1lbnRzIGFyZSBwYXNzZWQgaW50byB0aGUgY2FsbGJhY2sgLyB1bmNvbW1lbnRlZCBjb2RlLFxuICogdGhlIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAqXG4gKiBTZWUgdGhlIGBpc01pbmlmaWVkKClgIGZ1bmN0aW9uIHNvdXJjZSBjb2RlIGluIHRoaXMgZmlsZSBmb3IgYW4gZXhhbXBsZS5cbiAqXG4gKi9cbmNvbnN0IHJ1bklmRGV2ZWxvcG1lbnRNb2RlID0gZnVuY3Rpb24oY2FsbGJhY2ssIGFyZ3MpIHtcbiAgaWYgKHdpbmRvdy5WYWFkaW4uZGV2ZWxvcG1lbnRNb2RlKSB7XG4gICAgcmV0dXJuIHVuY29tbWVudEFuZFJ1bihjYWxsYmFjaywgYXJncyk7XG4gIH1cbn07XG5cbmlmICh3aW5kb3cuVmFhZGluLmRldmVsb3BtZW50TW9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gIHdpbmRvdy5WYWFkaW4uZGV2ZWxvcG1lbnRNb2RlID0gaXNEZXZlbG9wbWVudE1vZGUoKTtcbn1cblxuLyogVGhpcyBmaWxlIGlzIGF1dG9nZW5lcmF0ZWQgZnJvbSBzcmMvdmFhZGluLXVzYWdlLXN0YXRpc3RpY3MudHBsLmh0bWwgKi9cblxuZnVuY3Rpb24gbWF5YmVHYXRoZXJBbmRTZW5kU3RhdHMoKSB7XG4gIC8qKiB2YWFkaW4tZGV2LW1vZGU6c3RhcnRcbiAgKGZ1bmN0aW9uICgpIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmo7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbn07XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbnZhciBnZXRQb2x5bWVyVmVyc2lvbiA9IGZ1bmN0aW9uIGdldFBvbHltZXJWZXJzaW9uKCkge1xuICByZXR1cm4gd2luZG93LlBvbHltZXIgJiYgd2luZG93LlBvbHltZXIudmVyc2lvbjtcbn07XG5cbnZhciBTdGF0aXN0aWNzR2F0aGVyZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0YXRpc3RpY3NHYXRoZXJlcihsb2dnZXIpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aXN0aWNzR2F0aGVyZXIpO1xuXG4gICAgdGhpcy5ub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFN0YXRpc3RpY3NHYXRoZXJlciwgW3tcbiAgICBrZXk6ICdmcmFtZXdvcmtWZXJzaW9uRGV0ZWN0b3JzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZnJhbWV3b3JrVmVyc2lvbkRldGVjdG9ycygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdGbG93JzogZnVuY3Rpb24gRmxvdygpIHtcbiAgICAgICAgICBpZiAod2luZG93LlZhYWRpbiAmJiB3aW5kb3cuVmFhZGluLkZsb3cgJiYgd2luZG93LlZhYWRpbi5GbG93LmNsaWVudHMpIHtcbiAgICAgICAgICAgIHZhciBmbG93VmVyc2lvbnMgPSBPYmplY3Qua2V5cyh3aW5kb3cuVmFhZGluLkZsb3cuY2xpZW50cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5WYWFkaW4uRmxvdy5jbGllbnRzW2tleV07XG4gICAgICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LmdldFZlcnNpb25JbmZvO1xuICAgICAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5nZXRWZXJzaW9uSW5mbygpLmZsb3c7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChmbG93VmVyc2lvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gZmxvd1ZlcnNpb25zWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ1ZhYWRpbiBGcmFtZXdvcmsnOiBmdW5jdGlvbiBWYWFkaW5GcmFtZXdvcmsoKSB7XG4gICAgICAgICAgaWYgKHdpbmRvdy52YWFkaW4gJiYgd2luZG93LnZhYWRpbi5jbGllbnRzKSB7XG4gICAgICAgICAgICB2YXIgZnJhbWV3b3JrVmVyc2lvbnMgPSBPYmplY3QudmFsdWVzKHdpbmRvdy52YWFkaW4uY2xpZW50cykuZmlsdGVyKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5nZXRWZXJzaW9uSW5mbztcbiAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBjbGllbnQuZ2V0VmVyc2lvbkluZm8oKS52YWFkaW5WZXJzaW9uO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZnJhbWV3b3JrVmVyc2lvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gZnJhbWV3b3JrVmVyc2lvbnNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnQW5ndWxhckpzJzogZnVuY3Rpb24gQW5ndWxhckpzKCkge1xuICAgICAgICAgIGlmICh3aW5kb3cuYW5ndWxhciAmJiB3aW5kb3cuYW5ndWxhci52ZXJzaW9uICYmIHdpbmRvdy5hbmd1bGFyLnZlcnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuYW5ndWxhci52ZXJzaW9uLmZ1bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnQW5ndWxhcic6IGZ1bmN0aW9uIEFuZ3VsYXIoKSB7XG4gICAgICAgICAgaWYgKHdpbmRvdy5uZykge1xuICAgICAgICAgICAgdmFyIHRhZ3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW25nLXZlcnNpb25dXCIpO1xuICAgICAgICAgICAgaWYgKHRhZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGFnc1swXS5nZXRBdHRyaWJ1dGUoXCJuZy12ZXJzaW9uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwiVW5rbm93blwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ0JhY2tib25lLmpzJzogZnVuY3Rpb24gQmFja2JvbmVKcygpIHtcbiAgICAgICAgICBpZiAod2luZG93LkJhY2tib25lKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LkJhY2tib25lLlZFUlNJT047XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnUmVhY3QnOiBmdW5jdGlvbiBSZWFjdCgpIHtcbiAgICAgICAgICB2YXIgcmVhY3RTZWxlY3RvciA9ICdbZGF0YS1yZWFjdHJvb3RdLCBbZGF0YS1yZWFjdGlkXSc7XG4gICAgICAgICAgaWYgKCEhZG9jdW1lbnQucXVlcnlTZWxlY3RvcihyZWFjdFNlbGVjdG9yKSkge1xuICAgICAgICAgICAgLy8gUmVhY3QgZG9lcyBub3QgcHVibGlzaCB0aGUgdmVyc2lvbiBieSBkZWZhdWx0XG4gICAgICAgICAgICByZXR1cm4gXCJ1bmtub3duXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnRW1iZXInOiBmdW5jdGlvbiBFbWJlcigpIHtcbiAgICAgICAgICBpZiAod2luZG93LkVtICYmIHdpbmRvdy5FbS5WRVJTSU9OKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LkVtLlZFUlNJT047XG4gICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuRW1iZXIgJiYgd2luZG93LkVtYmVyLlZFUlNJT04pIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuRW1iZXIuVkVSU0lPTjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdqUXVlcnknOiBmdW5jdGlvbiAoX2pRdWVyeSkge1xuICAgICAgICAgIGZ1bmN0aW9uIGpRdWVyeSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfalF1ZXJ5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgalF1ZXJ5LnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9qUXVlcnkudG9TdHJpbmcoKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmV0dXJuIGpRdWVyeTtcbiAgICAgICAgfShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBqUXVlcnkgPT09ICdmdW5jdGlvbicgJiYgalF1ZXJ5LnByb3RvdHlwZS5qcXVlcnkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGpRdWVyeS5wcm90b3R5cGUuanF1ZXJ5O1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgICdQb2x5bWVyJzogZnVuY3Rpb24gUG9seW1lcigpIHtcbiAgICAgICAgICB2YXIgdmVyc2lvbiA9IGdldFBvbHltZXJWZXJzaW9uKCk7XG4gICAgICAgICAgaWYgKHZlcnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB2ZXJzaW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ0xpdEVsZW1lbnQnOiBmdW5jdGlvbiBMaXRFbGVtZW50KCkge1xuICAgICAgICAgIHZhciB2ZXJzaW9uID0gd2luZG93LmxpdEVsZW1lbnRWZXJzaW9ucyAmJiB3aW5kb3cubGl0RWxlbWVudFZlcnNpb25zWzBdO1xuICAgICAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdmVyc2lvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdMaXRIdG1sJzogZnVuY3Rpb24gTGl0SHRtbCgpIHtcbiAgICAgICAgICB2YXIgdmVyc2lvbiA9IHdpbmRvdy5saXRIdG1sVmVyc2lvbnMgJiYgd2luZG93LmxpdEh0bWxWZXJzaW9uc1swXTtcbiAgICAgICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnVnVlLmpzJzogZnVuY3Rpb24gVnVlSnMoKSB7XG4gICAgICAgICAgaWYgKHdpbmRvdy5WdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuVnVlLnZlcnNpb247XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFVzZWRWYWFkaW5FbGVtZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFVzZWRWYWFkaW5FbGVtZW50cyhlbGVtZW50cykge1xuICAgICAgdmFyIHZlcnNpb24gPSBnZXRQb2x5bWVyVmVyc2lvbigpO1xuICAgICAgdmFyIGVsZW1lbnRDbGFzc2VzID0gdm9pZCAwO1xuICAgICAgLy8gTk9URTogSW4gY2FzZSB5b3UgZWRpdCB0aGUgY29kZSBoZXJlLCBZT1UgTVVTVCBVUERBVEUgYW55IHN0YXRpc3RpY3MgcmVwb3J0aW5nIGNvZGUgaW4gRmxvdy5cbiAgICAgIC8vIENoZWNrIGFsbCBsb2NhdGlvbnMgY2FsbGluZyB0aGUgbWV0aG9kIGdldEVudHJpZXMoKSBpblxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZhYWRpbi9mbG93L2Jsb2IvbWFzdGVyL2Zsb3ctc2VydmVyL3NyYy9tYWluL2phdmEvY29tL3ZhYWRpbi9mbG93L2ludGVybmFsL1VzYWdlU3RhdGlzdGljcy5qYXZhI0wxMDZcbiAgICAgIC8vIEN1cnJlbnRseSBpdCBpcyBvbmx5IHVzZWQgYnkgQm9vdHN0cmFwSGFuZGxlci5cbiAgICAgIGlmICh2ZXJzaW9uICYmIHZlcnNpb24uaW5kZXhPZignMicpID09PSAwKSB7XG4gICAgICAgIC8vIFBvbHltZXIgMjogY29tcG9uZW50cyBjbGFzc2VzIGFyZSBzdG9yZWQgaW4gd2luZG93LlZhYWRpblxuICAgICAgICBlbGVtZW50Q2xhc3NlcyA9IE9iamVjdC5rZXlzKHdpbmRvdy5WYWFkaW4pLm1hcChmdW5jdGlvbiAoYykge1xuICAgICAgICAgIHJldHVybiB3aW5kb3cuVmFhZGluW2NdO1xuICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICByZXR1cm4gYy5pcztcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBQb2x5bWVyIDM6IGNvbXBvbmVudHMgY2xhc3NlcyBhcmUgc3RvcmVkIGluIHdpbmRvdy5WYWFkaW4ucmVnaXN0cmF0aW9uc1xuICAgICAgICBlbGVtZW50Q2xhc3NlcyA9IHdpbmRvdy5WYWFkaW4ucmVnaXN0cmF0aW9ucyB8fCBbXTtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnRDbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGtsYXNzKSB7XG4gICAgICAgIHZhciB2ZXJzaW9uID0ga2xhc3MudmVyc2lvbiA/IGtsYXNzLnZlcnNpb24gOiBcIjAuMC4wXCI7XG4gICAgICAgIGVsZW1lbnRzW2tsYXNzLmlzXSA9IHsgdmVyc2lvbjogdmVyc2lvbiB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VXNlZFZhYWRpblRoZW1lcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFVzZWRWYWFkaW5UaGVtZXModGhlbWVzKSB7XG4gICAgICBbJ0x1bW8nLCAnTWF0ZXJpYWwnXS5mb3JFYWNoKGZ1bmN0aW9uICh0aGVtZU5hbWUpIHtcbiAgICAgICAgdmFyIHRoZW1lO1xuICAgICAgICB2YXIgdmVyc2lvbiA9IGdldFBvbHltZXJWZXJzaW9uKCk7XG4gICAgICAgIGlmICh2ZXJzaW9uICYmIHZlcnNpb24uaW5kZXhPZignMicpID09PSAwKSB7XG4gICAgICAgICAgLy8gUG9seW1lciAyOiB0aGVtZXMgYXJlIHN0b3JlZCBpbiB3aW5kb3cuVmFhZGluXG4gICAgICAgICAgdGhlbWUgPSB3aW5kb3cuVmFhZGluW3RoZW1lTmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUG9seW1lciAzOiB0aGVtZXMgYXJlIHN0b3JlZCBpbiBjdXN0b20gZWxlbWVudCByZWdpc3RyeVxuICAgICAgICAgIHRoZW1lID0gY3VzdG9tRWxlbWVudHMuZ2V0KCd2YWFkaW4tJyArIHRoZW1lTmFtZS50b0xvd2VyQ2FzZSgpICsgJy1zdHlsZXMnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhlbWUgJiYgdGhlbWUudmVyc2lvbikge1xuICAgICAgICAgIHRoZW1lc1t0aGVtZU5hbWVdID0geyB2ZXJzaW9uOiB0aGVtZS52ZXJzaW9uIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEZyYW1ld29ya3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGcmFtZXdvcmtzKGZyYW1ld29ya3MpIHtcbiAgICAgIHZhciBkZXRlY3RvcnMgPSB0aGlzLmZyYW1ld29ya1ZlcnNpb25EZXRlY3RvcnMoKTtcbiAgICAgIE9iamVjdC5rZXlzKGRldGVjdG9ycykuZm9yRWFjaChmdW5jdGlvbiAoZnJhbWV3b3JrKSB7XG4gICAgICAgIHZhciBkZXRlY3RvciA9IGRldGVjdG9yc1tmcmFtZXdvcmtdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciB2ZXJzaW9uID0gZGV0ZWN0b3IoKTtcbiAgICAgICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICAgICAgZnJhbWV3b3Jrc1tmcmFtZXdvcmtdID0geyB2ZXJzaW9uOiB2ZXJzaW9uIH07XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2F0aGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2F0aGVyKHN0b3JhZ2UpIHtcbiAgICAgIHZhciBzdG9yZWRTdGF0cyA9IHN0b3JhZ2UucmVhZCgpO1xuICAgICAgdmFyIGdhdGhlcmVkU3RhdHMgPSB7fTtcbiAgICAgIHZhciB0eXBlcyA9IFtcImVsZW1lbnRzXCIsIFwiZnJhbWV3b3Jrc1wiLCBcInRoZW1lc1wiXTtcblxuICAgICAgdHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICBnYXRoZXJlZFN0YXRzW3R5cGVdID0ge307XG4gICAgICAgIGlmICghc3RvcmVkU3RhdHNbdHlwZV0pIHtcbiAgICAgICAgICBzdG9yZWRTdGF0c1t0eXBlXSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdmFyIHByZXZpb3VzU3RhdHMgPSBKU09OLnN0cmluZ2lmeShzdG9yZWRTdGF0cyk7XG5cbiAgICAgIHRoaXMuZ2V0VXNlZFZhYWRpbkVsZW1lbnRzKGdhdGhlcmVkU3RhdHMuZWxlbWVudHMpO1xuICAgICAgdGhpcy5nZXRGcmFtZXdvcmtzKGdhdGhlcmVkU3RhdHMuZnJhbWV3b3Jrcyk7XG4gICAgICB0aGlzLmdldFVzZWRWYWFkaW5UaGVtZXMoZ2F0aGVyZWRTdGF0cy50aGVtZXMpO1xuXG4gICAgICB2YXIgbm93ID0gdGhpcy5ub3c7XG4gICAgICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZ2F0aGVyZWRTdGF0c1t0eXBlXSk7XG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgaWYgKCFzdG9yZWRTdGF0c1t0eXBlXVtrZXldIHx8IF90eXBlb2Yoc3RvcmVkU3RhdHNbdHlwZV1ba2V5XSkgIT0gX3R5cGVvZih7fSkpIHtcbiAgICAgICAgICAgIHN0b3JlZFN0YXRzW3R5cGVdW2tleV0gPSB7IGZpcnN0VXNlZDogbm93IH07XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIERpc2NhcmRzIGFueSBwcmV2aW91c2x5IGxvZ2dlZCB2ZXJzaW9uIG51bWJlclxuICAgICAgICAgIHN0b3JlZFN0YXRzW3R5cGVdW2tleV0udmVyc2lvbiA9IGdhdGhlcmVkU3RhdHNbdHlwZV1ba2V5XS52ZXJzaW9uO1xuICAgICAgICAgIHN0b3JlZFN0YXRzW3R5cGVdW2tleV0ubGFzdFVzZWQgPSBub3c7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBuZXdTdGF0cyA9IEpTT04uc3RyaW5naWZ5KHN0b3JlZFN0YXRzKTtcbiAgICAgIHN0b3JhZ2Uud3JpdGUobmV3U3RhdHMpO1xuICAgICAgaWYgKG5ld1N0YXRzICE9IHByZXZpb3VzU3RhdHMgJiYgT2JqZWN0LmtleXMoc3RvcmVkU3RhdHMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXCJOZXcgc3RhdHM6IFwiICsgbmV3U3RhdHMpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU3RhdGlzdGljc0dhdGhlcmVyO1xufSgpO1xuXG52YXIgU3RhdGlzdGljc1N0b3JhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0YXRpc3RpY3NTdG9yYWdlKGtleSkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRpc3RpY3NTdG9yYWdlKTtcblxuICAgIHRoaXMua2V5ID0ga2V5O1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU3RhdGlzdGljc1N0b3JhZ2UsIFt7XG4gICAga2V5OiAncmVhZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICB2YXIgbG9jYWxTdG9yYWdlU3RhdHNTdHJpbmcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmtleSk7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2VTdGF0c1N0cmluZyA/IGxvY2FsU3RvcmFnZVN0YXRzU3RyaW5nIDogJ3t9Jyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd3cml0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlKGRhdGEpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMua2V5LCBkYXRhKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbGVhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5rZXkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2lzRW1wdHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgICAgdmFyIHN0b3JlZFN0YXRzID0gdGhpcy5yZWFkKCk7XG4gICAgICB2YXIgZW1wdHkgPSB0cnVlO1xuICAgICAgT2JqZWN0LmtleXMoc3RvcmVkU3RhdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMoc3RvcmVkU3RhdHNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGVtcHR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZW1wdHk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTdGF0aXN0aWNzU3RvcmFnZTtcbn0oKTtcblxudmFyIFN0YXRpc3RpY3NTZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0YXRpc3RpY3NTZW5kZXIodXJsLCBsb2dnZXIpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aXN0aWNzU2VuZGVyKTtcblxuICAgIHRoaXMudXJsID0gdXJsO1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU3RhdGlzdGljc1NlbmRlciwgW3tcbiAgICBrZXk6ICdzZW5kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VuZChkYXRhLCBlcnJvckhhbmRsZXIpIHtcbiAgICAgIHZhciBsb2dnZXIgPSB0aGlzLmxvZ2dlcjtcblxuICAgICAgaWYgKG5hdmlnYXRvci5vbkxpbmUgPT09IGZhbHNlKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhcIk9mZmxpbmUsIGNhbid0IHNlbmRcIik7XG4gICAgICAgIGVycm9ySGFuZGxlcigpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2dnZXIuZGVidWcoXCJTZW5kaW5nIGRhdGEgdG8gXCIgKyB0aGlzLnVybCk7XG5cbiAgICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIHJlcS53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgcmVxLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gU3RhdHMgc2VudCwgbm90aGluZyBtb3JlIHRvIGRvXG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhcIlJlc3BvbnNlOiBcIiArIHJlcS5yZXNwb25zZVRleHQpO1xuICAgICAgfSk7XG4gICAgICByZXEuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiU2VuZCBmYWlsZWRcIik7XG4gICAgICAgIGVycm9ySGFuZGxlcigpO1xuICAgICAgfSk7XG4gICAgICByZXEuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiU2VuZCBhYm9ydGVkXCIpO1xuICAgICAgICBlcnJvckhhbmRsZXIoKTtcbiAgICAgIH0pO1xuICAgICAgcmVxLm9wZW4oXCJQT1NUXCIsIHRoaXMudXJsKTtcbiAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICAgIHJlcS5zZW5kKGRhdGEpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU3RhdGlzdGljc1NlbmRlcjtcbn0oKTtcblxudmFyIFN0YXRpc3RpY3NMb2dnZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0YXRpc3RpY3NMb2dnZXIoaWQpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aXN0aWNzTG9nZ2VyKTtcblxuICAgIHRoaXMuaWQgPSBpZDtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFN0YXRpc3RpY3NMb2dnZXIsIFt7XG4gICAga2V5OiAnX2lzRGVidWcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNEZWJ1ZygpIHtcbiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInZhYWRpbi5cIiArIHRoaXMuaWQgKyBcIi5kZWJ1Z1wiKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZWJ1ZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlYnVnKG1zZykge1xuICAgICAgaWYgKHRoaXMuX2lzRGVidWcoKSkge1xuICAgICAgICBjb25zb2xlLmluZm8odGhpcy5pZCArIFwiOiBcIiArIG1zZyk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTdGF0aXN0aWNzTG9nZ2VyO1xufSgpO1xuXG52YXIgVXNhZ2VTdGF0aXN0aWNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBVc2FnZVN0YXRpc3RpY3MoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgVXNhZ2VTdGF0aXN0aWNzKTtcblxuICAgIHRoaXMubm93ID0gbmV3IERhdGUoKTtcbiAgICB0aGlzLnRpbWVOb3cgPSB0aGlzLm5vdy5nZXRUaW1lKCk7XG4gICAgdGhpcy5nYXRoZXJEZWxheSA9IDEwOyAvLyBEZWxheSBiZXR3ZWVuIGxvYWRpbmcgdGhpcyBmaWxlIGFuZCBnYXRoZXJpbmcgc3RhdHNcbiAgICB0aGlzLmluaXRpYWxEZWxheSA9IDI0ICogNjAgKiA2MDtcblxuICAgIHRoaXMubG9nZ2VyID0gbmV3IFN0YXRpc3RpY3NMb2dnZXIoXCJzdGF0aXN0aWNzXCIpO1xuICAgIHRoaXMuc3RvcmFnZSA9IG5ldyBTdGF0aXN0aWNzU3RvcmFnZShcInZhYWRpbi5zdGF0aXN0aWNzLmJhc2tldFwiKTtcbiAgICB0aGlzLmdhdGhlcmVyID0gbmV3IFN0YXRpc3RpY3NHYXRoZXJlcih0aGlzLmxvZ2dlcik7XG4gICAgdGhpcy5zZW5kZXIgPSBuZXcgU3RhdGlzdGljc1NlbmRlcihcImh0dHBzOi8vdG9vbHMudmFhZGluLmNvbS91c2FnZS1zdGF0cy9zdWJtaXRcIiwgdGhpcy5sb2dnZXIpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoVXNhZ2VTdGF0aXN0aWNzLCBbe1xuICAgIGtleTogJ21heWJlR2F0aGVyQW5kU2VuZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1heWJlR2F0aGVyQW5kU2VuZCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShVc2FnZVN0YXRpc3RpY3Mub3B0T3V0S2V5KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmdhdGhlcmVyLmdhdGhlcih0aGlzLnN0b3JhZ2UpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLm1heWJlU2VuZCgpO1xuICAgICAgfSwgdGhpcy5nYXRoZXJEZWxheSAqIDEwMDApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xvdHRlcnknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb3R0ZXJ5KCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3VycmVudE1vbnRoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3VycmVudE1vbnRoKCkge1xuICAgICAgcmV0dXJuIHRoaXMubm93LmdldFllYXIoKSAqIDEyICsgdGhpcy5ub3cuZ2V0TW9udGgoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdtYXliZVNlbmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXliZVNlbmQoKSB7XG4gICAgICB2YXIgZmlyc3RVc2UgPSBOdW1iZXIobG9jYWxTdG9yYWdlLmdldEl0ZW0oVXNhZ2VTdGF0aXN0aWNzLmZpcnN0VXNlS2V5KSk7XG4gICAgICB2YXIgbW9udGhQcm9jZXNzZWQgPSBOdW1iZXIobG9jYWxTdG9yYWdlLmdldEl0ZW0oVXNhZ2VTdGF0aXN0aWNzLm1vbnRoUHJvY2Vzc2VkS2V5KSk7XG5cbiAgICAgIGlmICghZmlyc3RVc2UpIHtcbiAgICAgICAgLy8gVXNlIGEgZ3JhY2UgcGVyaW9kIHRvIGF2b2lkIGludGVyZmVyaW5nIHdpdGggdGVzdHMsIGluY29nbml0byBtb2RlIGV0Y1xuICAgICAgICBmaXJzdFVzZSA9IHRoaXMudGltZU5vdztcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oVXNhZ2VTdGF0aXN0aWNzLmZpcnN0VXNlS2V5LCBmaXJzdFVzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnRpbWVOb3cgPCBmaXJzdFVzZSArIHRoaXMuaW5pdGlhbERlbGF5ICogMTAwMCkge1xuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcIk5vIHN0YXRpc3RpY3Mgd2lsbCBiZSBzZW50IHVudGlsIHRoZSBpbml0aWFsIGRlbGF5IG9mIFwiICsgdGhpcy5pbml0aWFsRGVsYXkgKyBcInMgaGFzIHBhc3NlZFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY3VycmVudE1vbnRoKCkgPD0gbW9udGhQcm9jZXNzZWQpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXCJUaGlzIG1vbnRoIGhhcyBhbHJlYWR5IGJlZW4gcHJvY2Vzc2VkXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShVc2FnZVN0YXRpc3RpY3MubW9udGhQcm9jZXNzZWRLZXksIHRoaXMuY3VycmVudE1vbnRoKCkpO1xuICAgICAgLy8gVXNlIHJhbmRvbSBzYW1wbGluZ1xuICAgICAgaWYgKHRoaXMubG90dGVyeSgpKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFwiQ29uZ3JhdHVsYXRpb25zLCB3ZSBoYXZlIGEgd2lubmVyIVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFwiU29ycnksIG5vIHN0YXRzIGZyb20geW91IHRoaXMgdGltZVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNlbmQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZW5kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VuZCgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBoYXZlIHRoZSBsYXRlc3QgZGF0YVxuICAgICAgdGhpcy5nYXRoZXJlci5nYXRoZXIodGhpcy5zdG9yYWdlKTtcblxuICAgICAgLy8gUmVhZCwgc2VuZCBhbmQgY2xlYW4gdXBcbiAgICAgIHZhciBkYXRhID0gdGhpcy5zdG9yYWdlLnJlYWQoKTtcbiAgICAgIGRhdGFbXCJmaXJzdFVzZVwiXSA9IE51bWJlcihsb2NhbFN0b3JhZ2UuZ2V0SXRlbShVc2FnZVN0YXRpc3RpY3MuZmlyc3RVc2VLZXkpKTtcbiAgICAgIGRhdGFbXCJ1c2FnZVN0YXRpc3RpY3NWZXJzaW9uXCJdID0gVXNhZ2VTdGF0aXN0aWNzLnZlcnNpb247XG4gICAgICB2YXIgaW5mbyA9ICdUaGlzIHJlcXVlc3QgY29udGFpbnMgdXNhZ2Ugc3RhdGlzdGljcyBnYXRoZXJlZCBmcm9tIHRoZSBhcHBsaWNhdGlvbiBydW5uaW5nIGluIGRldmVsb3BtZW50IG1vZGUuIFxcblxcblN0YXRpc3RpY3MgZ2F0aGVyaW5nIGlzIGF1dG9tYXRpY2FsbHkgZGlzYWJsZWQgYW5kIGV4Y2x1ZGVkIGZyb20gcHJvZHVjdGlvbiBidWlsZHMuXFxuXFxuRm9yIGRldGFpbHMgYW5kIHRvIG9wdC1vdXQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdmFhZGluL3ZhYWRpbi11c2FnZS1zdGF0aXN0aWNzLlxcblxcblxcblxcbic7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLnNlbmRlci5zZW5kKGluZm8gKyBKU09OLnN0cmluZ2lmeShkYXRhKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBSZXZlcnQgdGhlICdtb250aCBwcm9jZXNzZWQnIGZsYWdcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oVXNhZ2VTdGF0aXN0aWNzLm1vbnRoUHJvY2Vzc2VkS2V5LCBzZWxmLmN1cnJlbnRNb250aCgpIC0gMSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ3ZlcnNpb24nLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0JDEoKSB7XG4gICAgICByZXR1cm4gJzIuMS4yJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmaXJzdFVzZUtleScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkMSgpIHtcbiAgICAgIHJldHVybiAndmFhZGluLnN0YXRpc3RpY3MuZmlyc3R1c2UnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ21vbnRoUHJvY2Vzc2VkS2V5JyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQxKCkge1xuICAgICAgcmV0dXJuICd2YWFkaW4uc3RhdGlzdGljcy5tb250aFByb2Nlc3NlZCc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb3B0T3V0S2V5JyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQxKCkge1xuICAgICAgcmV0dXJuICd2YWFkaW4uc3RhdGlzdGljcy5vcHRvdXQnO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVXNhZ2VTdGF0aXN0aWNzO1xufSgpO1xuXG50cnkge1xuICB3aW5kb3cuVmFhZGluID0gd2luZG93LlZhYWRpbiB8fCB7fTtcbiAgd2luZG93LlZhYWRpbi51c2FnZVN0YXRzQ2hlY2tlciA9IHdpbmRvdy5WYWFkaW4udXNhZ2VTdGF0c0NoZWNrZXIgfHwgbmV3IFVzYWdlU3RhdGlzdGljcygpO1xuICB3aW5kb3cuVmFhZGluLnVzYWdlU3RhdHNDaGVja2VyLm1heWJlR2F0aGVyQW5kU2VuZCgpO1xufSBjYXRjaCAoZSkge1xuICAvLyBJbnRlbnRpb25hbGx5IGlnbm9yZWQgYXMgdGhpcyBpcyBub3QgYSBwcm9ibGVtIGluIHRoZSBhcHAgYmVpbmcgZGV2ZWxvcGVkXG59XG5cbn0oKSk7XG5cbiAgdmFhZGluLWRldi1tb2RlOmVuZCAqKi9cbn1cblxuY29uc3QgdXNhZ2VTdGF0aXN0aWNzID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0eXBlb2YgcnVuSWZEZXZlbG9wbWVudE1vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcnVuSWZEZXZlbG9wbWVudE1vZGUobWF5YmVHYXRoZXJBbmRTZW5kU3RhdHMpO1xuICB9XG59O1xuXG53aW5kb3cuVmFhZGluID0gd2luZG93LlZhYWRpbiB8fCB7fTtcbndpbmRvdy5WYWFkaW4ucmVnaXN0cmF0aW9ucyA9IHdpbmRvdy5WYWFkaW4ucmVnaXN0cmF0aW9ucyB8fCBbXTtcblxud2luZG93LlZhYWRpbi5yZWdpc3RyYXRpb25zLnB1c2goe1xuICBpczogJ0B2YWFkaW4vcm91dGVyJyxcbiAgdmVyc2lvbjogJzEuNy40Jyxcbn0pO1xuXG51c2FnZVN0YXRpc3RpY3MoKTtcblxuUm91dGVyLk5hdmlnYXRpb25UcmlnZ2VyID0ge1BPUFNUQVRFLCBDTElDS307XG5cbmV4cG9ydCB7IFJlc29sdmVyLCBSb3V0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhYWRpbi1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgeyBMaXRFbGVtZW50LCBodG1sLCBjc3MgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgVGFzayB9IGZyb20gJ0BsaXQvdGFzayc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IFwiLi4vY29tcG9uZW50cy9mb3Jtcy9mb3Jtc1wiXG5pbXBvcnQgXCIuLi9jb21wb25lbnRzL3dpbmRvd2xldFwiXG5pbXBvcnQgeyBNaW5NYXhMZW5ndGgsIFJlcXVpcmVkIH0gZnJvbSBcIkBsaW9uL2Zvcm0tY29yZVwiXG5pbXBvcnQgeyBsb2FkRGVmYXVsdEZlZWRiYWNrTWVzc2FnZXMgfSBmcm9tIFwiQGxpb24vdmFsaWRhdGUtbWVzc2FnZXNcIjtcbmltcG9ydCB7IEthbmFGb3JtLCBtYXhMZW5ndGhQcmVwcm9jZXNzb3IgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9mb3Jtcy9mb3Jtc1wiO1xuaW1wb3J0IHsgS2FuYWxvYUFQSSB9IGZyb20gJy4uL2FwaS9rYW5hbG9hLWV0aGVycyc7XG5pbXBvcnQgeyBUYXhhYmxlT3BlcmF0aW9ucyB9IGZyb20gJy4uL2FwaS9wYXltZW50cy1wcm9jZXNzb3InO1xuaW1wb3J0IHsgTG9hZGluZ0ljb24gfSBmcm9tICcuLi9jb21wb25lbnRzL2xvYWRlcic7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAdmFhZGluL3JvdXRlcic7XG5cblxuQGN1c3RvbUVsZW1lbnQoJ25ldy1wcm9qZWN0LXBhZ2UnKVxuZXhwb3J0IGNsYXNzIE5ld1Byb2plY3RQYWdlIGV4dGVuZHMgTGl0RWxlbWVudCB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgbG9hZERlZmF1bHRGZWVkYmFja01lc3NhZ2VzKCk7XG4gICAgICAgIFJlcXVpcmVkLmdldE1lc3NhZ2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gXCJQbGVhc2UsIGVudGVyIGEgdmFsdWVcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgZ2FwOiAycmVtO1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxcmVtO1xuICAgICAgICAgICAgICAgICAgICBmbGV4OiAxIDEgMCU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaDEge1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDNyZW07XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBoMiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwLjVyZW0gMCAwLjVyZW07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaDMge1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGhyIHtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDJweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1saWdodC1jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMC41cmVtIDAgMXJlbTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBrYW5hLWlucHV0LCBpbnB1dCwga2FuYS1zZWxlY3Qge1xuICAgICAgICAgICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbnB1dCwgc2VsZWN0IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW5wdXQge1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1mb3JlZ3JvdW5kLWNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaW5wdXQ6Zm9jdXMge1xuICAgICAgICAgICAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAycHggdmFyKC0taGlnaGxpZ2h0ZWQtbGlnaHQtY29sb3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC5zbWFsbC1pbnB1dCwgLnNtYWxsLWlucHV0ICoge1xuICAgICAgICAgICAgICAgICAgICBmbGV4OiAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC5zbWFsbC1pbnB1dCBpbnB1dCB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA4cmVtO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC5mb3JtLXJvdyB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGdhcDogMXJlbTtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAxMHB4IDA7XG4gICAgICAgICAgICAgICAgICAgIGZsZXgtZmxvdzogcm93IHdyYXA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZWN0IHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMnJlbTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogdmFyKC0tZm9yZWdyb3VuZC1jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgICAgICAgICAgICAgICAgYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBzZWxlY3Q6Zm9jdXMge1xuICAgICAgICAgICAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAycHggdmFyKC0taGlnaGxpZ2h0ZWQtbGlnaHQtY29sb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBrYW5hLWJ1dHRvbi1zdWJtaXQge1xuICAgICAgICAgICAgICAgICAgICBtaW4td2lkdGg6IGZpdC1jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuMnJlbTtcbiAgICAgICAgICAgICAgICAgICAgbWluLWhlaWdodDogM3JlbTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBrYW5hLXdpbmRvd2xldCB7XG4gICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogMzJyZW07XG4gICAgICAgICAgICAgICAgICAgIGZsZXg6IDAgMSBhdXRvO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAvLyBUaGVyZSBoYXMgdG8gYmUgYSBiZXR0ZXIgcGxhY2UgdG8gcHV0IHRoaXMsIGJ1dCBJIHdpbGwgZmlndXJlIFxuICAgICAgICAgICAgLy8gdGhhdCBvdXQgbGF0ZXJcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAuZm9ybS1yb3cgbGlvbi12YWxpZGF0aW9uLWZlZWRiYWNrIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1oaWdobGlnaHRlZC1saWdodC1jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDEycmVtO1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuOHJlbTtcbiAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuMjtcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAycmVtO1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogLTNyZW07XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBtYXgtY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgei1pbmRleDogMVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC5mb3JtLXJvdyBsaW9uLXZhbGlkYXRpb24tZmVlZGJhY2s6bm90KFt0eXBlPVwiZXJyb3JcIl0pIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLmZvcm0tcm93IGxpb24tdmFsaWRhdGlvbi1mZWVkYmFjazo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAtMThweDtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMTAlO1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogLTEwcHg7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMTBweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXRvcDogMTVweCBzb2xpZCB2YXIoLS1oaWdobGlnaHRlZC1saWdodC1jb2xvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgYFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIGFzeW5jIHN1Ym1pdEhhbmRsZXIoZXY6IGFueSkge1xuICAgICAgICBsZXQgZm9ybTogS2FuYUZvcm0gPSBldi50YXJnZXQ7XG4gICAgICAgIGlmIChmb3JtLmhhc0ZlZWRiYWNrRm9yLmluY2x1ZGVzKCdlcnJvcicpKSB7XG4gICAgICAgICAgY29uc3QgZmlyc3RGb3JtRWxXaXRoRXJyb3IgPSBmb3JtLmZvcm1FbGVtZW50cy5maW5kKFxuICAgICAgICAgICAgICAgIChlbDogYW55KSA9PiBlbC5oYXNGZWVkYmFja0Zvci5pbmNsdWRlcygnZXJyb3InKSxcbiAgICAgICAgICApO1xuICAgICAgICAgIGZpcnN0Rm9ybUVsV2l0aEVycm9yLmZvY3VzKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZvcm1EYXRhID0gZXYudGFyZ2V0Lm1vZGVsVmFsdWU7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcm9qZWN0Q29zdCA9IFxuICAgICAgICAgICAgYXdhaXQgS2FuYWxvYUFQSS5wYXltZW50c1Byb2Nlc3Nvci5jYWxjdWxhdGVJbnZvaWNlKFxuICAgICAgICAgICAgICAgIFRheGFibGVPcGVyYXRpb25zLk5FV19QUk9KRUNULFxuICAgICAgICAgICAgICAgIHsgXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudDogYXdhaXQgKGF3YWl0IChhd2FpdCBLYW5hbG9hQVBJLnNpZ25lcikhKS5nZXRBZGRyZXNzKCksXG4gICAgICAgICAgICAgICAgICAgIHRva2VuOiBLYW5hbG9hQVBJLktBTkFfVE9LRU5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgIGlmIChhd2FpdCBLYW5hbG9hQVBJLnBheW1lbnRzUHJvY2Vzc29yLnJlcXVlc3RBbGxvd2FuY2UocHJvamVjdENvc3QhKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cblxuICAgICAgICBhd2FpdCBLYW5hbG9hQVBJLnByb2plY3RSZWdpc3RyeS5uZXdQcm9qZWN0KHtcbiAgICAgICAgICAgIHByb2plY3ROYW1lOiBmb3JtRGF0YS5uYW1lLFxuICAgICAgICAgICAgYWJicmV2aWF0aW9uOiBmb3JtRGF0YS5hYmJyZXZpYXRpb24sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZm9ybURhdGEuZGVzY3JpcHRpb25cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAoKSA9PiBSb3V0ZXIuZ28oYC9wcm9qZWN0cy9gKVxuICAgICAgICApXG4gICAgICAgIC5jYXRjaChjb25zb2xlLmVycm9yKVxuXG4gICAgICB9O1xuXG4gICAgICBwcml2YXRlIGNhbGN1bGF0ZWRDb3N0ID0gbmV3IFRhc2sodGhpcywge1xuICAgICAgICB0YXNrOiBhc3luYyAoW3Rva2VuXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgKGF3YWl0IEthbmFsb2FBUEkuc2lnbmVyKSEuZ2V0QWRkcmVzcygpO1xuICAgICAgICAgICAgY29uc3QgcHJvamVjdENvc3QgPSBcbiAgICAgICAgICAgICAgICBhd2FpdCBLYW5hbG9hQVBJLnBheW1lbnRzUHJvY2Vzc29yLmNhbGN1bGF0ZUludm9pY2UoXG4gICAgICAgICAgICAgICAgICAgIFRheGFibGVPcGVyYXRpb25zLk5FV19QUk9KRUNULFxuICAgICAgICAgICAgICAgICAgICB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50OiBjbGllbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogdG9rZW5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2plY3RDb3N0ITtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhcmdzOiAoKSA9PiBbS2FuYWxvYUFQSS5LQU5BX1RPS0VOXVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgY29zdCA9IHRoaXMuY2FsY3VsYXRlZENvc3QucmVuZGVyKHtcbiAgICAgICAgICAgIHBlbmRpbmc6ICgpID0+IGh0bWxgPHNwYW4+PGxvYWRpbmctaWNvbiBzaXplPVwiMWVtXCI+PGxvYWRpbmctaWNvbj48L3NwYW4+YCxcbiAgICAgICAgICAgIGNvbXBsZXRlOiAodmFsdWUpID0+IGh0bWxgPHNwYW4+KCR7dmFsdWUgLyAxMG4gKiogMThufSAkS0FOQSk8L3NwYW4+YCxcbiAgICAgICAgICAgIGVycm9yOiAoZXJyb3IpID0+IGh0bWxgPHA+KCR7ZXJyb3J9ID8/Pz8pPC9wPmAsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPGgxPk5ldyBQcm9qZWN0PC9oMT5cbiAgICAgICAgICAgIDxrYW5hLXdpbmRvd2xldD5cbiAgICAgICAgICAgICAgICA8aDI+TmV3IHByb2plY3Q8L2gyPlxuICAgICAgICAgICAgICAgIDxoMz5CZWdpbiB5b3VyIGpvdXJuZXk8L2gzPlxuICAgICAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAgICAgIDxsYWJlbD5Qcm9qZWN0IGluZm88L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxrYW5hLWZvcm0gQHN1Ym1pdD1cIiR7dGhpcy5zdWJtaXRIYW5kbGVyfVwiPlxuICAgICAgICAgICAgICAgICAgICA8Zm9ybSBAc3VibWl0PSR7KGV2OiBFdmVudCkgPT4gZXYucHJldmVudERlZmF1bHQoKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1yb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8a2FuYS1pbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC1zci1vbmx5PVwiTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJuYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnZhbGlkYXRvcnM9XCIke1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNaW5NYXhMZW5ndGgoeyBtaW46IDQsIG1heDogMTZ9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZXF1aXJlZCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF19XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByZXByb2Nlc3Nvcj0ke21heExlbmd0aFByZXByb2Nlc3NvcigxNil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwva2FuYS1pbnB1dD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8a2FuYS1pbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC1zci1vbmx5PVwiQWJicmV2aWF0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBYmJyZXZpYXRpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiYWJicmV2aWF0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJzbWFsbC1pbnB1dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWxpZGF0b3JzPVwiJHtbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWluTWF4TGVuZ3RoKHsgbWluOiAyLCBtYXg6IDh9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZXF1aXJlZCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF19XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByZXByb2Nlc3Nvcj0ke21heExlbmd0aFByZXByb2Nlc3Nvcig4KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9rYW5hLWlucHV0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1yb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8a2FuYS1pbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC1zci1vbmx5PVwiRGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRlc2NyaXB0aW9uIChtYXhpbXVtIDY0IGNoYXJhY3RlcnMpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImRlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnZhbGlkYXRvcnM9XCIke1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNaW5NYXhMZW5ndGgoeyBtaW46IDAsIG1heDogNjR9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXX1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucHJlcHJvY2Vzc29yPSR7bWF4TGVuZ3RoUHJlcHJvY2Vzc29yKDY0KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9rYW5hLWlucHV0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1yb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8a2FuYS1idXR0b24tc3VibWl0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXBsb3kgbmV3IHByb2plY3QgJHtjb3N0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwva2FuYS1idXR0b24tc3VibWl0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgICAgICA8L2thbmEtZm9ybT5cbiAgICAgICAgICAgIDwva2FuYS13aW5kb3dsZXQ+XG4gICAgICAgIGA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IEthbmFDYXJkIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYXJkJztcbmltcG9ydCAnLi4vY29tcG9uZW50cy9idXR0b24nO1xuaW1wb3J0ICcuLi9jb21wb25lbnRzL2NhcmQnO1xuaW1wb3J0ICcuLi9jb21wb25lbnRzL2xvYWRlcic7XG5pbXBvcnQgeyByZXBlYXQgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9yZXBlYXQuanMnO1xuaW1wb3J0IHsgd2hlbiB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3doZW4uanMnO1xuaW1wb3J0IHsgS2FuYWxvYUFQSSB9IGZyb20gJy4uL2FwaS9rYW5hbG9hLWV0aGVycyc7XG5pbXBvcnQgeyBBZGRyZXNzTGlrZSwgQ29udHJhY3QgfSBmcm9tICdldGhlcnMnO1xuaW1wb3J0IHsgQWJzdHJhY3RDYXJkc1BhZ2UgfSBmcm9tICcuL2Fic3RyYWN0LWNhcmRzLXBhZ2UnO1xuXG5cbkBjdXN0b21FbGVtZW50KCdjb250cmFjdHMtcGFnZScpXG5leHBvcnQgY2xhc3MgQ29udHJhY3RzUGFnZSBleHRlbmRzIEFic3RyYWN0Q2FyZHNQYWdlIHtcblxuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KVxuICAgIGRlY2xhcmUgbmFtZTogU3RyaW5nO1xuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KVxuICAgIGRlY2xhcmUgYWRkcmVzczogc3RyaW5nO1xuXG4gICAgYXN5bmMgZmV0Y2hEYXRhKCkge1xuICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlOiBLYW5hQ2FyZFtdID0gW107XG5cbiAgICAgICAgY29uc3QgcHJvamVjdCA9IG5ldyBDb250cmFjdChcbiAgICAgICAgICAgIHRoaXMuYWRkcmVzcyxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIG93bmVyKSB2aWV3IHJldHVybnMgKHVpbnQyNTYgYmFsYW5jZSlcIixcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uIG5hbWUoKSB2aWV3IHJldHVybnMgKHN0cmluZylcIixcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uIHN5bWJvbCgpIHZpZXcgcmV0dXJucyAoc3RyaW5nKVwiLCAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uIGNvbnRyYWN0c1JlcG9zaXRvcnlMZW5ndGgoKSB2aWV3IHJldHVybnMgKHVpbnQyNTYpXCIsXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvbiBnZXRDb250cmFjdHModWludDI1NiBmcm9tLCB1aW50MjU2IHRvKSB2aWV3IHJldHVybnMgKGFkZHJlc3NbXSlcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIEthbmFsb2FBUEkud2FsbGV0XG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgY29udHJhY3RBYmk6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgXCJmdW5jdGlvbiBuYW1lKCkgdmlldyByZXR1cm5zIChzdHJpbmcpXCIsXG4gICAgICAgIF1cblxuICAgICAgICAvLyBOT1RFL1RPRE86IFRoZSBtb3N0IGlubmVmZmljaWVudCB3YXkgdG8gZG8gdGhpc1xuICAgICAgICAvLyBNb3ZlIHRvIGEgc3ViZ3JhcGggYW5kIGEgUHJvbWlzZS5hbGwgaW4gcHJvZHVjdGlvblxuICAgICAgICBsZXQgbGVuZ3RoOiBudW1iZXIgPSBhd2FpdCBwcm9qZWN0LmNvbnRyYWN0c1JlcG9zaXRvcnlMZW5ndGgoKTtcbiAgICAgICAgaWYgKGxlbmd0aCAhPSAwKSB7XG4gICAgICAgICAgICBsZXQgY29udHJhY3RzOiBBZGRyZXNzTGlrZVtdID0gYXdhaXQgcHJvamVjdC5nZXRDb250cmFjdHMoMCwgbGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGFkZHJlc3Mgb2YgY29udHJhY3RzKSB7XG4gICAgICAgICAgICAgICAgLy8gTk9URTogXCJuYW1lKClcIiBzaG91bGQgYmUgZGVmaW5lZCBhcyBhIFN0YW5kYXJkIFwiTmFtZWFibGVcIiBpbnRlcmZhY2VcbiAgICAgICAgICAgICAgICAvLyBDb25zaWRlciB3cml0aW5nIGEgY29udHJhY3QgbWV0YWRhdGEgcmVwbyBtb2R1bGUgdG9vIFxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyYWN0OiBDb250cmFjdCA9IG5ldyBDb250cmFjdChcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyYWN0QWJpLFxuICAgICAgICAgICAgICAgICAgICBLYW5hbG9hQVBJLndhbGxldFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lOiBzdHJpbmcgPSBhd2FpdCBjb250cmFjdC5uYW1lKCk7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UucHVzaChuZXcgS2FuYUNhcmQoe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICBidXR0b246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiRWRpdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluazogYCR7dGhpcy5hZGRyZXNzfS8ke2FkZHJlc3N9YFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBhZGRyZXNzIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIgLy8gdGhpcyBzaG91bGQgYmUgdGhlIGxpc3Qgb2YgbW9kdWxlc1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IHJlc3BvbnNlO1xuICAgIH1cbiAgICAgIFxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8aDE+JHt0aGlzLm5hbWV9PC9oMT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkc1wiPlxuICAgICAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgICAgICAgIHdoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IGh0bWxgPGxvYWRpbmctaWNvbj48L2xvYWRpbmctaWNvbj5gLFxuICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4gcmVwZWF0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGspID0+IGsubmFtZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjKSA9PiBodG1sYCR7Y31gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8YSBocmVmPVwiJHt0aGlzLmFkZHJlc3N9L25ldy1jb250cmFjdFwiPlxuICAgICAgICAgICAgICAgIDxrYW5hLWJ1dHRvbj5DcmVhdGUgbmV3IGNvbnRyYWN0PC9rYW5hLWJ1dHRvbj5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgYDtcbiAgICB9XG59XG4iLCJ0eXBlIERlY29yYXRvciA9IChcbiAgICB0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yXG4pID0+IGFueTtcblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZXJTZXR1cCh0YXJnZXQ6IGFueSkge1xuICAgIGZvciAobGV0IGhhbmRsZXIgb2YgdGFyZ2V0Ll9ldmVudEhhbmRsZXJzKSB7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGhhbmRsZXIuZXZlbnQsIGhhbmRsZXIuaGFuZGxlciwgaGFuZGxlci5vcHRpb25zKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBldmVudEhhbmRsZXIoXG4gICAgZXZlbnROYW1lOiBzdHJpbmcsIFxuICAgIG9wdGlvbnM/OiBBZGRFdmVudExpc3RlbmVyT3B0aW9uc1xuKTogRGVjb3JhdG9yIHtcbiAgICByZXR1cm4gKFxuICAgICAgICB0YXJnZXQ6IGFueSwgXywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yXG4gICAgKSA9PiB7XG4gICAgICAgIGlmICh0YXJnZXQuX2V2ZW50SGFuZGxlcnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAgICAgICAgICAgIHRhcmdldCwgXCJfZXZlbnRIYW5kbGVyc1wiLCBcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW10gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQuX2V2ZW50SGFuZGxlcnMucHVzaCh7IFxuICAgICAgICAgICAgaGFuZGxlcjogZGVzY3JpcHRvci52YWx1ZSwgZXZlbnQ6IGV2ZW50TmFtZSwgb3B0aW9uczogb3B0aW9ucyBcbiAgICAgICAgfSk7XG4gICAgfTtcbn0iLCJpbXBvcnQgeyBMaXRFbGVtZW50IH0gZnJvbSBcImxpdFwiO1xuaW1wb3J0IHsgS2FuYUZvcm0sIGZvcm1Dc3NDb21tb24gfSBmcm9tIFwiLi4vZm9ybXMvZm9ybXNcIjtcbmltcG9ydCB7IHByb3BlcnR5LCBzdGF0ZSB9IGZyb20gXCJsaXQvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgTW9kdWxlUGFyYW1ldGVycyB9IGZyb20gXCJzcmMvYXBpL2thbmFsb2EtcHJvamVjdC1yZWdpc3RyeVwiO1xuaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSBcImV0aGVyc1wiO1xuaW1wb3J0IHsgTGlvbkZvcm0gfSBmcm9tIFwiQGxpb24vZm9ybVwiO1xuaW1wb3J0IHsgZXZlbnRIYW5kbGVyLCBoYW5kbGVyU2V0dXAgfSBmcm9tIFwiLi4vLi4vdXRpbHMvZXZlbnQtaGFuZGxlclwiO1xuXG5leHBvcnQgdHlwZSBNb2R1bGVQYXJhbXMgPSB7IFxuICAgIG5hbWU6IHN0cmluZywgXG4gICAgc2lnbmF0dXJlOiBzdHJpbmcsXG4gICAgY3VzdG9tRWxlbWVudDogc3RyaW5nXG59O1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTW9kdWxlRm9ybSBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIHN0YXRpYyBmb3JtQXNzb2NpYXRlZCA9IHRydWU7XG5cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuIH0pXG4gICAgZGVjbGFyZSBlbmFibGVkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGhhbmRsZXJTZXR1cCh0aGlzKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1Dc3NDb21tb247XG4gICAgfVxuXG4gICAgZ2V0IG1vZGVsVmFsdWUoKTogUmVjb3JkPHN0cmluZywgYW55PiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmthbmFGb3JtPy5tb2RlbFZhbHVlO1xuICAgIH1cblxuICAgIGdldCBrYW5hRm9ybSgpOiBLYW5hRm9ybSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLnNoYWRvd1Jvb3Q/LnF1ZXJ5U2VsZWN0b3IoXCJrYW5hLWZvcm1cIikgfHwgdW5kZWZpbmVkO1xuICAgIH1cbiAgICBcbiAgICBAZXZlbnRIYW5kbGVyKFwibW9kZWwtdmFsdWUtY2hhbmdlZFwiLCB7IGNhcHR1cmU6IHRydWUgfSlcbiAgICBtb2RlbFVwZGF0ZWQoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMua2FuYUZvcm0gPT0gbnVsbCB8fFxuICAgICAgICAgICAgdGhpcy5rYW5hRm9ybS5oYXNGZWVkYmFja0Zvci5maW5kKChlKSA9PiBlID09IFwiZXJyb3JcIilcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFxuICAgICAgICAgICAgICAgIFwicGF5bG9hZC1tb2RpZmllZFwiLFxuICAgICAgICAgICAgICAgIHsgYnViYmxlczogdHJ1ZSwgY29tcG9zZWQ6IHRydWUgfVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHNldFBhcmVudChyZWY6IE1vZHVsZUZvcm0pIHtcbiAgICAgICAgLy8gRG8gbm90aGluZyBieSBkZWZhdWx0XG4gICAgfVxuXG4gICAgQHN0YXRlKClcbiAgICBsb2FkZWRSYXdEYXRhOiBldGhlcnMuQnl0ZXNMaWtlIHwgdW5kZWZpbmVkO1xuICAgIGxvYWQocmF3RGF0YTogZXRoZXJzLkJ5dGVzTGlrZSkge1xuICAgICAgICB0aGlzLmxvYWRlZFJhd0RhdGEgPSByYXdEYXRhO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBldGhlcnMuQWJpQ29kZXIuZGVmYXVsdEFiaUNvZGVyKCkuZGVjb2RlKFxuICAgICAgICAgICAgQXJyYXkuZnJvbSh0aGlzLmluaXRpYWxpemVyQUJJLnZhbHVlcygpKSxcbiAgICAgICAgICAgIHRoaXMubG9hZGVkUmF3RGF0YSFcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5mb3JtYXRIb29rKFxuICAgICAgICAgICAgQXJyYXkuZnJvbSh0aGlzLmluaXRpYWxpemVyQUJJLmtleXMoKSlcbiAgICAgICAgICAgICAgICAubWFwKCh2LCBpKSA9PiAoeyBbdl06IHJlc3VsdFtpXSB9KSlcbiAgICAgICAgICAgICAgICAucmVkdWNlKFxuICAgICAgICAgICAgICAgICAgICAvLyBFZmZpY2llbmN5IHdhcyBjbGVhcmx5IG5vdCB3aGF0IEkgd2FzIHdvcnJpZWQgYWJvdXQgaGVyZVxuICAgICAgICAgICAgICAgICAgICAvLyBBdCB0aGlzIHN0YWdlIEkgcHJlZmVyIHRvIG9jY3VweSBteSBtaW5kIHdpdGggbW9yZVxuICAgICAgICAgICAgICAgICAgICAvLyB0cmFzY2VuZGVudGFsIG1hdHRlcnMgdGhhbiBwcm9ncmFtbWluZy4gTGlrZSBhbmltZSBib29iYVxuICAgICAgICAgICAgICAgICAgICAoZCwgYykgPT4gKHsgLi4uZCwgLi4uYyB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICBPYmplY3QuZW50cmllcyhkYXRhKS5mb3JFYWNoKChbaywgdl06IFtzdHJpbmcsIGFueV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW06IExpb25Gb3JtIHwgbnVsbCB8IHVuZGVmaW5lZCA9IFxuICAgICAgICAgICAgICAgIHRoaXMuc2hhZG93Um9vdD8ucXVlcnlTZWxlY3RvcihgW25hbWU9JHtrfV1gKTtcbiAgICAgICAgICAgIGlmIChlbGVtID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtLm1vZGVsVmFsdWUgPSB2O1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIENvbXBhcmUgdGhlIGdpdmVuIGJ5dGVzbGlrZSB3aXRoIHRoZSBzdG9yZWQgbG9hZGVkUmF3RGF0YS5cbiAgICAgKiBSZXR1cm5zIGZhbHNlIGlmIHRoZXkgZGlmZmVyLCBvciB0cnVlIGlmIHRoZXkgYXJlIHRoZSBzYW1lIHBpY3R1cmVcbiAgICAgKi9cbiAgICBhc1Vwc3RyZWFtKGxvY2FsOiBldGhlcnMuQnl0ZXNMaWtlKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBsb2NhbCA9PSB0aGlzLmxvYWRlZFJhd0RhdGE7XG4gICAgfVxuICAgIFxuICAgIGZvcm1hdEhvb2soZDogUmVjb3JkPHN0cmluZywgYW55Pik6IFJlY29yZDxzdHJpbmcsIGFueT4ge1xuICAgICAgICByZXR1cm4gZDtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBnZXQgbW9kdWxlU2lnbmF0dXJlKCk6IHN0cmluZztcbiAgICBhYnN0cmFjdCBnZXQgaW5pdGlhbGl6ZXJBQkkoKTogTWFwPHN0cmluZywgc3RyaW5nPjtcbiAgICBhYnN0cmFjdCBjb21waWxlTW9kdWxlUGFyYW1ldGVycyhyb290OiBhbnkpOiBQcm9taXNlPE1vZHVsZVBhcmFtZXRlcnMgfCBudWxsPjsgXG59IiwiLyoqXG4gKiAgQSBjb25zdGFudCBmb3IgdGhlIG9yZGVyIE4gZm9yIHRoZSBzZWNwMjU2azEgY3VydmUuXG4gKlxuICogICgqKmkuZS4qKiBgYDB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmViYWFlZGNlNmFmNDhhMDNiYmZkMjVlOGNkMDM2NDE0MW5gYClcbiAqL1xuZXhwb3J0IGNvbnN0IE4gPSBCaWdJbnQoXCIweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDFcIik7XG4vKipcbiAqICBBIGNvbnN0YW50IGZvciB0aGUgbnVtYmVyIG9mIHdlaSBpbiBhIHNpbmdsZSBldGhlci5cbiAqXG4gKiAgKCoqaS5lLioqIGBgMTAwMDAwMDAwMDAwMDAwMDAwMG5gYClcbiAqL1xuZXhwb3J0IGNvbnN0IFdlaVBlckV0aGVyID0gQmlnSW50KFwiMTAwMDAwMDAwMDAwMDAwMDAwMFwiKTtcbi8qKlxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBtYXhpbXVtIHZhbHVlIGZvciBhIGBgdWludDI1NmBgLlxuICpcbiAqICAoKippLmUuKiogYGAweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZuYGApXG4gKi9cbmV4cG9ydCBjb25zdCBNYXhVaW50MjU2ID0gQmlnSW50KFwiMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmXCIpO1xuLyoqXG4gKiAgQSBjb25zdGFudCBmb3IgdGhlIG1pbmltdW0gdmFsdWUgZm9yIGFuIGBgaW50MjU2YGAuXG4gKlxuICogICgqKmkuZS4qKiBgYC04MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwbmBgKVxuICovXG5leHBvcnQgY29uc3QgTWluSW50MjU2ID0gQmlnSW50KFwiMHg4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIpICogQmlnSW50KC0xKTtcbi8qKlxuICogIEEgY29uc3RhbnQgZm9yIHRoZSBtYXhpbXVtIHZhbHVlIGZvciBhbiBgYGludDI1NmBgLlxuICpcbiAqICAoKippLmUuKiogYGAweDdmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZuYGApXG4gKi9cbmV4cG9ydCBjb25zdCBNYXhJbnQyNTYgPSBCaWdJbnQoXCIweDdmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1udW1iZXJzLmpzLm1hcCIsInR5cGUgRGVjb3JhdG9yID0gKFxuICAgIHRhcmdldDogYW55LFxuICAgIHByb3BlcnR5S2V5OiBzdHJpbmcsXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuKSA9PiBhbnk7XG4gIFxuZXhwb3J0IGNvbnN0IHJlZmxlY3Q6IERlY29yYXRvciA9IGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIHByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBnZXR0ZXIgPSBwcm9wZXJ0aWVzLmdldDtcbiAgICBjb25zdCBzZXR0ZXIgPSBwcm9wZXJ0aWVzLnNldDtcbiAgICBpZiAoZ2V0dGVyID09IG51bGwgfHwgc2V0dGVyID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgIGBQcm9wZXJ0eSAke25hbWV9IGRvZXMgbm90IGhhdmUgYSBnZXR0ZXIgb3Igc2V0dGVyLmAsXG4gICAgICAgICk7XG4gICAgfVxuICBcbiAgICBwcm9wZXJ0aWVzLmdldCA9IGZ1bmN0aW9uICh0aGlzOiB0eXBlb2YgdGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IGF0dHIgPSBnZXR0ZXIuY2FsbCh0aGlzKTtcbiAgXG4gICAgICAgIC8vIE9iamVjdCB2YWx1ZXMgYXJlIHRoZSBcImF1dGhvcml0YXRpdmVcIiB2YWx1ZSBmb3IgdGhlIGF0dHJpYnV0ZS5cbiAgICAgICAgaWYgKHR5cGVvZiBhdHRyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gYXR0cjtcbiAgICAgICAgfVxuICBcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gc2V0IHZhbHVlIGluIHRoZSBvYmplY3QsIHRyeSBlbGVtZW50IGF0dHJpYnV0ZXMuXG4gICAgICAgIGlmICh0aGlzLmhhc0F0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgICB9XG4gIFxuICAgICAgICAvLyBJZiBldmVyeXRoaW5nIGVsc2UgZmFpbHMsIGl0J3Mgbm90IHNldFxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgcHJvcGVydGllcy5zZXQgPSBmdW5jdGlvbiAodGhpczogdHlwZW9mIHRhcmdldCwgdmFsOiB1bmtub3duKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZTogdW5rbm93biA9IHRoaXNbbmFtZV07XG4gICAgICAgIGlmIChjdXJyZW50VmFsdWUgIT09IHZhbCkge1xuICAgICAgICAgICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgU3RyaW5nKHZhbCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNldHRlci5jYWxsKHRoaXMsIHZhbCk7XG4gICAgfTtcbiAgfTtcbiAgXG5leHBvcnQgZnVuY3Rpb24gZmFsbHRocm91Z2goZWxlbWVudFByb3ZpZGVyOiAoKSA9PiBIVE1MRWxlbWVudCk6IERlY29yYXRvciB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IGFueSwgbmFtZTogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxTZXR0ZXIgPSBkZXNjcmlwdG9yLnNldDtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxHZXR0ZXIgPSBkZXNjcmlwdG9yLmdldDtcbiAgXG4gICAgICAgIGlmIChvcmlnaW5hbFNldHRlciA9PSBudWxsIHx8IG9yaWdpbmFsR2V0dGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAgICAgYFByb3BlcnR5ICR7bmFtZX0gZG9lcyBub3QgaGF2ZSBhIGdldHRlciBvciBzZXR0ZXIuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICBcbiAgICAgICAgZGVzY3JpcHRvci5zZXQgPSBmdW5jdGlvbiAodmFsdWU6IHVua25vd24pIHtcbiAgICAgICAgICAgIC8vIENhbGwgdGhlIG9yaWdpbmFsIHNldHRlclxuICAgICAgICAgICAgb3JpZ2luYWxTZXR0ZXIuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gIFxuICAgICAgICAgICAgLy8gR2V0IHRoZSBIVE1MRWxlbWVudCBkeW5hbWljYWxseSBieSBpbnZva2luZyB0aGUgcHJvdmlkZXIgZnVuY3Rpb25cbiAgICAgICAgICAgIGNvbnN0IGVsZW0gPSBlbGVtZW50UHJvdmlkZXIuY2FsbCh0aGlzKTtcbiAgXG4gICAgICAgICAgICAvLyBSZWZsZWN0IHRoZSBwcm9wZXJ0eSBjaGFuZ2UgdG8gdGhlIEhUTUxFbGVtZW50IGFzIGFuIGF0dHJpYnV0ZVxuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZShuYW1lLCBTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxlbS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gIFxuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICB9O1xufVxuICBcbmV4cG9ydCBjb25zdCBiaW5kSW5pdGlhbEF0dHJzOiBEZWNvcmF0b3IgPSBmdW5jdGlvbiAodGFyZ2V0LCBfLCBkZXNjcmlwdG9yKSB7XG4gICAgLy8gQ2FwdHVyZSB0aGUgb3JpZ2luYWwgY29ubmVjdGVkQ2FsbGJhY2tcbiAgICBjb25zdCBvcmlnaW5hbENvbm5lY3RlZENhbGxiYWNrID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICBcbiAgICAvLyBEZWZpbmUgYSBuZXcgY29ubmVjdGVkQ2FsbGJhY2tcbiAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24odGhpczogdHlwZW9mIHRhcmdldCkge1xuICAgICAgICBjb25zdCBvYnNlcnZlZEF0dHJpYnV0ZXMgPSB0aGlzLmNvbnN0cnVjdG9yLm9ic2VydmVkQXR0cmlidXRlcztcbiAgICAgICAgY29uc29sZS5sb2coXCJoZWxsbyB0aGVyZVwiKVxuICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIG9ic2VydmVkIGF0dHJpYnV0ZXNcbiAgICAgICAgZm9yIChjb25zdCBhdHRyIG9mIG9ic2VydmVkQXR0cmlidXRlcykge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGF0dHJpYnV0ZSBpcyBkZWZpbmVkIG9uIHRoZSBlbGVtZW50XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNBdHRyaWJ1dGUoYXR0cikpIHtcbiAgICAgICAgICAgICAgICAvLyBBc3NpZ24gdGhlIGF0dHJpYnV0ZSB2YWx1ZSB0byB0aGUgb2JqZWN0J3MgcHJvcGVydHlcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKGF0dHIpO1xuICAgICAgICAgICAgICAgIHRoaXNbYXR0cl0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlcGxhY2UgdGhlIGNvbm5lY3RlZENhbGxiYWNrIHdpdGggdGhlIG9yaWdpbmFsIG9uZVxuICAgICAgICB0aGlzLmNvbm5lY3RlZENhbGxiYWNrID0gb3JpZ2luYWxDb25uZWN0ZWRDYWxsYmFjaztcblxuICAgICAgICAvLyBDYWxsIHRoZSBvcmlnaW5hbCBjb25uZWN0ZWRDYWxsYmFja1xuICAgICAgICBvcmlnaW5hbENvbm5lY3RlZENhbGxiYWNrLmFwcGx5KHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgfTsiLCJ0eXBlIERlY29yYXRvciA9IChcbiAgICB0YXJnZXQ6IGFueSxcbiAgICBwcm9wZXJ0eUtleTogc3RyaW5nLFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcixcbikgPT4gYW55O1xuICBcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVyU2V0dXAodGFyZ2V0OiBhbnkpIHtcbiAgICBmb3IgKGNvbnN0IGhhbmRsZXIgb2YgdGFyZ2V0Ll9ldmVudEhhbmRsZXJzKSB7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgaGFuZGxlci5ldmVudCwgaGFuZGxlci5oYW5kbGVyLCBoYW5kbGVyLm9wdGlvbnNcbiAgICAgICAgKTtcbiAgICB9XG59XG4gIFxuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50SGFuZGxlcihcbiAgICBldmVudE5hbWU6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMsXG4pOiBEZWNvcmF0b3Ige1xuICAgIHJldHVybiAodGFyZ2V0OiBhbnksIF8sIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcikgPT4ge1xuICAgICAgICBpZiAoIXRhcmdldC5oYXNPd25Qcm9wZXJ0eShcIl9ldmVudEhhbmRsZXJzXCIpKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgIFwiX2V2ZW50SGFuZGxlcnNcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogWyAuLi4odGFyZ2V0Ll9ldmVudEhhbmRsZXJzIHx8IFtdKSBdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0Ll9ldmVudEhhbmRsZXJzLnB1c2goe1xuICAgICAgICAgICAgaGFuZGxlcjogZGVzY3JpcHRvci52YWx1ZSxcbiAgICAgICAgICAgIGV2ZW50OiBldmVudE5hbWUsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9O1xufVxuICAiLCJpbXBvcnQgeyBmYWxsdGhyb3VnaCwgcmVmbGVjdCwgYmluZEluaXRpYWxBdHRycyB9IGZyb20gXCIuL3V0aWxzL2F0dHJpYnV0ZS1oZWxwZXJzXCI7XG5pbXBvcnQgeyBldmVudEhhbmRsZXIsIGhhbmRsZXJTZXR1cCB9IGZyb20gXCIuL3V0aWxzL2V2ZW50LWhhbmRsZXJcIjtcblxuZXhwb3J0IHR5cGUgRmllbGRWYWx1ZSA9XG4gIHwgc3RyaW5nXG4gIHwgc3RyaW5nW11cbiAgfCB7IFtrZXk6IHN0cmluZ106IEZpZWxkVmFsdWUgfVxuICB8IG51bGw7XG5cbmV4cG9ydCB0eXBlIFByZXByb2Nlc3NpbmdSdWxlPFQgZXh0ZW5kcyBGaWVsZFZhbHVlPiA9ICh2YWx1ZTogVCkgPT4gVDtcbmV4cG9ydCB0eXBlIFZhbGlkYXRpb25SdWxlPFQgZXh0ZW5kcyBGaWVsZFZhbHVlPiA9IFxuICAodmFsdWU6IFQpID0+IFByb21pc2U8c3RyaW5nIHwgRWxlbWVudCB8IHVuZGVmaW5lZD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmllbGRTY2hlbWE8VCBleHRlbmRzIEZpZWxkVmFsdWU+IHtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgcHJlcHJvY2Vzc2luZzogQXJyYXk8VD5cbiAgICB2YWxpZGF0aW9uOiBBcnJheTxWYWxpZGF0aW9uUnVsZTxUPj47XG4gICAgZGVmYXVsdFZhbHVlPzogVDtcbiAgICBjaGlsZHJlbjogUmVjb3JkPHN0cmluZywgRmllbGRTY2hlbWE8RmllbGRWYWx1ZT4+O1xufVxuXG5mdW5jdGlvbiBnZXRUaGlzSW5uZXJFbGVtZW50KHRoaXM6IFB1bHBpdG9CYXNlKTogSFRNTEVsZW1lbnQge1xuICByZXR1cm4gdGhpcy5nZXRJbm5lckVsZW1lbnQoKTtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFB1bHBpdG9CYXNlIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRJbm5lckVsZW1lbnQoKTogSFRNTEVsZW1lbnQ7XG5cbiAgICBAcmVmbGVjdFxuICAgIGFjY2Vzc29yIG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBAcmVmbGVjdCBAZmFsbHRocm91Z2goZ2V0VGhpc0lubmVyRWxlbWVudClcbiAgICBhY2Nlc3NvciBkaXNhYmxlZDogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgICBAcmVmbGVjdCBAZmFsbHRocm91Z2goZ2V0VGhpc0lubmVyRWxlbWVudClcbiAgICBhY2Nlc3NvciByZWFkT25seTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgICBAcmVmbGVjdCBAZmFsbHRocm91Z2goZ2V0VGhpc0lubmVyRWxlbWVudClcbiAgICBhY2Nlc3NvciBpbnZhbGlkOiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICAgIFxuICAgIGFic3RyYWN0IGFjY2Vzc29yIHZhbHVlOiBGaWVsZFZhbHVlO1xuXG4gICAgLy8gVGhpcyBBUEkgbG9va3MgbGlrZSBhIG1lc3NcbiAgICBzdGF0aWMgZm9ybUFzc29jaWF0ZWQgPSB0cnVlO1xuICAgIGRlY2xhcmUgZWxlbWVudEludGVybmFsczogRWxlbWVudEludGVybmFscztcblxuICAgIHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCk6IEFycmF5PHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gW1wibmFtZVwiLCBcImRpc2FibGVkXCIsIFwicmVhZE9ubHlcIiwgXCJpbnZhbGlkXCJdO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmVsZW1lbnRJbnRlcm5hbHMgPSB0aGlzLmF0dGFjaEludGVybmFscygpO1xuICAgIFxuICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6IFwib3BlblwiIH0pO1xuICAgICAgICBcbiAgICAgICAgaGFuZGxlclNldHVwKHRoaXMpO1xuICAgIH1cblxuICAgIEBiaW5kSW5pdGlhbEF0dHJzXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICB0aGlzLnNoYWRvd1Jvb3QhLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICB0aGlzLnNoYWRvd1Jvb3QhLmFwcGVuZCh0aGlzLmdldElubmVyRWxlbWVudCgpKTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJpbnB1dC1jb25uZWN0ZWRcIiwge1xuICAgICAgICBkZXRhaWw6IHRoaXMsXG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNvbXBvc2VkOiB0cnVlXG4gICAgICB9KSk7XG4gICAgfVxuICBcbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJpbnB1dC1kaXNjb25uZWN0ZWRcIiwge1xuICAgICAgICBkZXRhaWw6IHRoaXMsXG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNvbXBvc2VkOiB0cnVlXG4gICAgICB9KSk7XG4gICAgfVxuICBcbiAgICAvLyBUaGUgZm9sbG93aW5nIGV2ZW50IGhhbmRsZXJzIHByZXZlbnQgZmllbGRzZXRzIGZyb20gcmVnaXN0ZXJpbmdcbiAgICAvLyB0aGVtc2VsdmVzIGludG8gYSB0b3AgbGV2ZWwgZm9ybS5cbiAgICBAZXZlbnRIYW5kbGVyKFwiaW5wdXQtZGlzY29ubmVjdGVkXCIsIHsgY2FwdHVyZTogdHJ1ZSB9KVxuICAgIHB1YmxpYyBoYW5kbGVJbnB1dERpc2Nvbm5lY3RlZChlOiBDdXN0b21FdmVudDxhbnk+KSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgQGV2ZW50SGFuZGxlcihcImlucHV0LWNvbm5lY3RlZFwiLCB7IGNhcHR1cmU6IHRydWUgfSlcbiAgICBwdWJsaWMgaGFuZGxlSW5wdXRDb25uZWN0ZWQoZTogQ3VzdG9tRXZlbnQ8YW55Pikge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBmYWxsdGhyb3VnaCwgcmVmbGVjdCwgYmluZEluaXRpYWxBdHRycyB9IGZyb20gXCIuL3V0aWxzL2F0dHJpYnV0ZS1oZWxwZXJzXCI7XG5pbXBvcnQgeyBldmVudEhhbmRsZXIsIGhhbmRsZXJTZXR1cCB9IGZyb20gXCIuL3V0aWxzL2V2ZW50LWhhbmRsZXJcIjtcbmltcG9ydCB7IFB1bHBpdG9CYXNlLCBGaWVsZFZhbHVlIH0gZnJvbSBcIi4vcHVscGl0by1iYXNlXCI7XG5cbmNvbnN0IElOUFVUX1RZUEVTID0gW1xuICBcImJ1dHRvblwiLFxuICBcImNoZWNrYm94XCIsXG4gIFwiY29sb3JcIixcbiAgXCJkYXRlXCIsXG4gIFwiZGF0ZXRpbWUtbG9jYWxcIixcbiAgXCJlbWFpbFwiLFxuICBcImZpbGVcIixcbiAgXCJoaWRkZW5cIixcbiAgXCJpbWFnZVwiLFxuICBcIm1vbnRoXCIsXG4gIFwibnVtYmVyXCIsXG4gIFwicGFzc3dvcmRcIixcbiAgXCJyYWRpb1wiLFxuICBcInJhbmdlXCIsXG4gIFwicmVzZXRcIixcbiAgXCJzZWFyY2hcIixcbiAgXCJzdWJtaXRcIixcbiAgXCJ0ZWxcIixcbiAgXCJ0ZXh0XCIsXG4gIFwidGltZVwiLFxuICBcInVybFwiLFxuICBcIndlZWtcIixcbl07XG5jb25zdCBJTlBVVF9UQUdTID0gW1xuICAvLyBOT1RFOiBcImJ1dHRvblwiIGV4aXN0cywgYnV0IGlzIGJhc2ljYWxseSBzdXBlcnNlZGVkIGJ5IHR5cGVkIGlucHV0c1xuICAvLyBNYWtlcyBtZSB3b25kZXIgd2h5IGV2ZW4gaGF2ZSBkaWZmZXJlbnQgdGFncyBmb3IgdGhlc2UgZWxlbWVudHNcbiAgXCJpbnB1dFwiLFxuICBcImRhdGFsaXN0XCIsXG4gIFwiZmllbGRzZXRcIixcbiAgXCJzZWxlY3RcIixcbiAgXCJ0ZXh0YXJlYVwiLFxuXTtcblxudHlwZSBJbnB1dFR5cGVUdXBsZSA9IHR5cGVvZiBJTlBVVF9UWVBFUyB8IFwiaW5wdXRcIjtcbnR5cGUgSW5wdXRUYWcgPSB0eXBlb2YgSU5QVVRfVEFHU1tudW1iZXJdO1xudHlwZSBJbnB1dFR5cGUgPSBJbnB1dFR5cGVUdXBsZVtudW1iZXJdO1xuY29uc3QgSW5wdXRUeXBlMklucHV0VGFnID0gKHQ6IElucHV0VHlwZSk6IElucHV0VGFnID0+IHtcbiAgc3dpdGNoICh0KSB7XG4gICAgY2FzZSBcImRhdGFsaXN0XCI6XG4gICAgY2FzZSBcImZpZWxkc2V0XCI6XG4gICAgY2FzZSBcInNlbGVjdFwiOlxuICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgcmV0dXJuIHQ7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcImlucHV0XCI7XG4gIH1cbn07XG5cbmNvbnN0IENISUxERlVMX0lOUFVUX1RBR1M6IElucHV0VGFnW10gPSBbXG4gIFwiZGF0YWxpc3RcIixcbiAgXCJzZWxlY3RcIixcbiAgXCJmaWVsZHNldFwiLFxuXTtcblxuZXhwb3J0IGNsYXNzIFB1bHBpdG9JbnB1dCBleHRlbmRzIFB1bHBpdG9CYXNlIHtcbiAgcHVibGljIGlucHV0RWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gIHByb3RlY3RlZCBvdmVycmlkZSBnZXRJbm5lckVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmlucHV0RWxlbWVudCE7XG4gIH1cbiAgXG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogQXJyYXk8c3RyaW5nPiB7XG4gICAgcmV0dXJuIFsuLi5zdXBlci5vYnNlcnZlZEF0dHJpYnV0ZXMsIFwidHlwZVwiXTtcbiAgfVxuXG4gIEByZWZsZWN0XG4gIGFjY2Vzc29yIHR5cGU6IElucHV0VHlwZSA9IFwidGV4dFwiO1xuXG4gIHNldCB2YWx1ZSh2YWw6IEZpZWxkVmFsdWUpIHtcbiAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgY2FzZSBcImRhdGFsaXN0XCI6XG4gICAgICAgIC8vIElmIHdlIHJlY2VpdmUgYSBzaW5nbGUgc3RyaW5nLCBzZWFyY2ggYW5kIHNlbGVjdCBvciB0aHJvd1xuICAgICAgICAvLyBJZiB3ZSByZWNlaXZlIGFuIGFycmF5LCBjbGVhciwgc2VhcmNoIGFsbCBhbmQgc2VsZWN0IGFsbCwgb3IgdGhyb3dcbiAgICAgICAgLy8gSWYgd2UgcmVjZWl2ZSBudWxsLCB1bnNlbGVjdCBhbGxcbiAgICAgICAgLy8gSWYgd2UgcmVjZWl2ZSBvYmplY3QsIHRocm93XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgIUFycmF5LmlzQXJyYXkodmFsKSAmJlxuICAgICAgICAgIHZhbCAhPSBudWxsXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIE9iamVjdCBkZXRlY3RlZFxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICBcIkNhbm5vdCBhc3NpZ24gb2JqZWN0IHRvIHNlbGVjdGxpa2UgZmllbGRcIixcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVzZWxlY3QgYWxsXG4gICAgICAgIGdldFNlbGVjdGVkT3B0aW9ucyh0aGlzLmlucHV0RWxlbWVudCBhcyBIVE1MU2VsZWN0RWxlbWVudClcbiAgICAgICAgICAuZm9yRWFjaCgoZSkgPT4gZS5zZWxlY3RlZCA9IGZhbHNlKTtcbiAgICAgICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gU3RyaW5nIG9yIGFycmF5IGRldGVjdGVkXG4gICAgICAgICAgY29uc3Qgc2VsOiBzdHJpbmdbXSA9IChBcnJheS5pc0FycmF5KHZhbCkpID8gdmFsIDogW3ZhbF07XG5cbiAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2Ygc2VsKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb246IEhUTUxPcHRpb25FbGVtZW50IHwgbnVsbCA9IHRoaXMuaW5wdXRFbGVtZW50IVxuICAgICAgICAgICAgICAucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke25hbWV9XCJdYCk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk9wdGlvbiBkb2VzIG5vdCBleGlzdFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZmllbGRzZXRcIjpcbiAgICAgICAgLy8gSnVzdCB0aHJvdyBpZiBpdCdzIG5vdCBhbiBvYmplY3RcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiB2YWwgIT09IFwib2JqZWN0XCIgfHxcbiAgICAgICAgICBBcnJheS5pc0FycmF5KHZhbCkgfHxcbiAgICAgICAgICB2YWwgPT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgXCJBdHRlbXB0aW5nIHRvIHNldCBmaWVsZHNldCB3aXRoIG5vbi1vYmplY3RcIixcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogc2V0IGZpZWxkc2V0IGNoaWxkcmVuIVxuICAgICAgICBicmVhaztcbiAgICAgICAgLy8gVE9ETzogZGVmYXVsdCBiZWhhdmlvclxuICAgIH1cbiAgfVxuICBnZXQgdmFsdWUoKTogRmllbGRWYWx1ZSB7XG4gICAgLy8gTk9URTogaXQgd291bGQgYmUgbW9yZSByb2J1c3QgdG8gcmV0dXJuIHRoZXNlIHZhbHVlcyBhcyBhbiBvYmplY3RcbiAgICAvLyAgICAgICB0aGF0IGNvdWxkIGJlIGNhc3QgdG8gbW9yZSBzcGVjaWZpYyB0eXBlc1xuICAgIC8vIE1vc3QgaW5wdXRzIHJldHVybiBhIHN0cmluZ1xuICAgIC8vIE11bHRpLWNob2ljZSBpbnB1dHMgcmV0dXJuIGEgc3RyaW5nW11cbiAgICAvLyBmaWVsZHNldHMgcmV0dXJuIGFuIG9iamVjdCBidWlsdCBieSBjYWxsaW5nIFwidmFsdWVcIiBpbiB0aGUgY2hpbGRyZW5cbiAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgY2FzZSBcImRhdGFsaXN0XCI6IHtcbiAgICAgICAgLy8gXCJzZWxlY3RcIiBhbmQgXCJkYXRhbGlzdFwiIGNhbiBiZSBtdWx0aXBsZS1jaG9pY2UgaW5wdXRzXG4gICAgICAgIC8vIElmIGl0J3Mgbm90LCByZXR1cm4gYSBzaW5nbGUgc3RyaW5nLlxuICAgICAgICAvLyBJZiBub3RoaW5nIGlzIHNlbGVjdGVkLCByZXR1cm4gYSBudWxsXG4gICAgICAgIC8vIElmIG11bHRpcGxlIG9wdGlvbnMgYXJlIHNlbGVjdGVkLCByZXR1cm4gdGhlbSBhcyBhbiBhcnJheVxuICAgICAgICBjb25zdCBzZWxlY3RlZDogc3RyaW5nW10gPSBnZXRTZWxlY3RlZE9wdGlvbnMoXG4gICAgICAgICAgdGhpcy5pbnB1dEVsZW1lbnQgYXMgSFRNTFNlbGVjdEVsZW1lbnQsXG4gICAgICAgIClcbiAgICAgICAgICAubWFwKChvcHQpID0+IG9wdC52YWx1ZSk7XG5cbiAgICAgICAgaWYgKHNlbGVjdGVkLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGVjdGVkWzBdO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGVkLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgICBjYXNlIFwiZmllbGRzZXRcIjoge1xuICAgICAgICAvLyBGaWVsZHNldHMgY29udGFpbiBvdGhlciBpbnB1dCBmaWVsZHMuIFdlIHdpbGwgbGV0IHRoZW1cbiAgICAgICAgLy8gaGFuZGxlIHRoZW1zZWx2ZXMgYW5kIHJldHVybiB0aGVtIGFzIGFuIG9iamVjdFxuICAgICAgICBjb25zdCBmaWVsZHM6IFJlY29yZDxzdHJpbmcsIEZpZWxkVmFsdWU+ID0ge307XG4gICAgICAgIEFycmF5LmZyb20odGhpcy5pbnB1dEVsZW1lbnQ/LmNoaWxkcmVuIHx8IFtdKS5mb3JFYWNoKFxuICAgICAgICAgIChlbGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGVsZW0gJiYgXCJuYW1lXCIgaW4gZWxlbSkge1xuICAgICAgICAgICAgICBmaWVsZHNbZWxlbS5uYW1lIGFzIHN0cmluZ10gPSBlbGVtLnZhbHVlIGFzIEZpZWxkVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gZmllbGRzO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICh0aGlzLmlucHV0RWxlbWVudCBhcyB1bmtub3duIGFzIHsgXCJ2YWx1ZVwiOiBGaWVsZFZhbHVlIH0pLnZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmlucHV0RWxlbWVudCEuc2V0QXR0cmlidXRlKFwibmFtZVwiLCB0aGlzLm5hbWUgfHwgXCJcIik7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQhW1xuICAgICAgdGhpcy52YWx1ZSAhPSBudWxsID8gXCJzZXRBdHRyaWJ1dGVcIiA6IFwicmVtb3ZlQXR0cmlidXRlXCJcbiAgICBdKFwidmFsdWVcIiwgdGhpcy52YWx1ZSEudG9TdHJpbmcoKSk7XG4gICAgdGhpcy5pbnB1dEVsZW1lbnQhW1xuICAgICAgdGhpcy5kaXNhYmxlZCA/IFwic2V0QXR0cmlidXRlXCIgOiBcInJlbW92ZUF0dHJpYnV0ZVwiXG4gICAgXShcImRpc2FibGVkXCIsIFwiXCIpO1xuICAgIHRoaXMuaW5wdXRFbGVtZW50IVtcbiAgICAgIHRoaXMucmVhZE9ubHkgPyBcInNldEF0dHJpYnV0ZVwiIDogXCJyZW1vdmVBdHRyaWJ1dGVcIlxuICAgIF0oXCJyZWFkb25seVwiLCBcIlwiKTtcblxuICAgIC8vIElmIHdlIGV4cGVjdCB0aGUgaW5wdXQgdG8gYmUgY2hpbGRmdWwsIHdlIGF0dGFjaCBhIHNsb3QgaW5zaWRlXG4gICAgaWYgKENISUxERlVMX0lOUFVUX1RBR1MuaW5jbHVkZXModGhpcy50eXBlKSkge1xuICAgICAgdGhpcy5hcHBlbmQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNsb3RcIikpO1xuICAgICAgQXJyYXkuZnJvbSh0aGlzLmNoaWxkcmVuKS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50Py5hcHBlbmQoZWxlbWVudCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5pbnB1dEVsZW1lbnQ7XG4gIH1cblxuICByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLmlucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoSW5wdXRUeXBlMklucHV0VGFnKHRoaXMudHlwZSkpO1xuICAgIHRoaXMudmFsdWUgPSBcIlwiO1xuICAgIHRoaXMuaW52YWxpZCA9IGZhbHNlO1xuXG4gICAgLy8gSSBndWVzcyBpdCdzIGJlY2F1c2Ugb2YgdGhlc2UgdGhpbmdzIHRoYXQgc2V0dGVycyBhbmQgZ2V0dGVycyBhcmUgbm90XG4gICAgLy8gbWVhbnQgdG8gaGF2ZSBzaWRlIGVmZmVjdHNcbiAgICB0aGlzLmRpc2FibGVkID0gKHRoaXMuZGlzYWJsZWQpO1xuICAgIHRoaXMucmVhZE9ubHkgPSAodGhpcy5yZWFkT25seSk7XG4gIH1cblxuICBwdWJsaWMgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgIG5hbWU6IHN0cmluZywgb2xkVmFsdWU6IHN0cmluZywgbmV3VmFsdWU6IHN0cmluZ1xuICApIHtcbiAgICBpZiAob2xkVmFsdWUgPT0gbmV3VmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobmFtZSA9PT0gXCJ0eXBlXCIpIHtcbiAgICAgIGNvbnN0IHRhZyA9IElucHV0VHlwZTJJbnB1dFRhZyhuZXdWYWx1ZSk7XG4gICAgICB0aGlzLmlucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICAgIGlmICh0YWcgPT09IFwiaW5wdXRcIikge1xuICAgICAgICB0aGlzLmlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIG5ld1ZhbHVlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG5cbmZ1bmN0aW9uIGdldFNlbGVjdGVkT3B0aW9ucyhzZWxFbGVtOiBIVE1MU2VsZWN0RWxlbWVudCk6IEhUTUxPcHRpb25FbGVtZW50W10ge1xuICAvLyBXaHkgbm90IHVzZSBcInNlbGVjdGVkT3B0aW9uc1wiPyBXZWxsLCA8ZGF0YWxpc3Q+IGRvZXNuJ3QgaW1wbGVtZW50IGl0XG4gIHJldHVybiBBcnJheS5mcm9tKHNlbEVsZW0ucXVlcnlTZWxlY3RvckFsbChcIj4gb3B0aW9uOnNlbGVjdGVkXCIpKTtcbn1cblxud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShcInB1bHBpdG8taW5wdXRcIiwgUHVscGl0b0lucHV0KTtcbiIsImltcG9ydCB7IGN1c3RvbUVsZW1lbnQgfSBmcm9tIFwibGl0L2RlY29yYXRvcnMuanNcIjtcbmltcG9ydCB7IE1vZHVsZUZvcm0gfSBmcm9tIFwiLi9jb21tb25zXCI7XG5pbXBvcnQgeyBodG1sIH0gZnJvbSBcImxpdFwiO1xuaW1wb3J0IHsgS2FuYUZvcm0sIEthbmFJbnB1dEFtb3VudCwgUmVxdWlyZWQsIG1heExlbmd0aFByZXByb2Nlc3NvciwgbWF4TnVtYmVyUHJlcHJvY2Vzc29yIH0gZnJvbSBcIi4uL2Zvcm1zL2Zvcm1zXCI7XG5pbXBvcnQgeyBNaW5NYXhMZW5ndGgsIE1pbk51bWJlciwgTWF4TnVtYmVyIH0gZnJvbSBcIkBsaW9uL2Zvcm0tY29yZVwiO1xuaW1wb3J0IHsgTWF4VWludDI1NiwgZXRoZXJzIH0gZnJvbSBcImV0aGVyc1wiO1xuaW1wb3J0IFwiLi4vZm9ybXMvcHVscGl0by9wdWxwaXRvLWlucHV0XCI7XG5pbXBvcnQgeyBNb2R1bGVQYXJhbWV0ZXJzIH0gZnJvbSBcInNyYy9hcGkva2FuYWxvYS1wcm9qZWN0LXJlZ2lzdHJ5XCI7XG5pbXBvcnQgeyBLYW5hbG9hQVBJIH0gZnJvbSBcIi4uLy4uL2FwaS9rYW5hbG9hLWV0aGVyc1wiO1xuaW1wb3J0IHsgTGl0RWxlbWVudCB9IGZyb20gXCJAbGlvbi9jb3JlXCI7XG5cbmV4cG9ydCBjb25zdCBFUkMyMF9GT1JNX1RBRyA9ICdlcmMyMC1mb3JtJztcbkBjdXN0b21FbGVtZW50KEVSQzIwX0ZPUk1fVEFHKVxuZXhwb3J0IGNsYXNzIEVSQzIwRm9ybSBleHRlbmRzIE1vZHVsZUZvcm0ge1xuICAgIHN0YXRpYyBmb3JtQXNzb2NpYXRlZCA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IG1vZHVsZVNpZ25hdHVyZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCIweGE3ZWE2OTgyZWIzOTg0ODdkNTcxYmI4ZDc4ODBkMDM4YTUyYTJlMjA1MDFlNWQ4OTI1MWIwZDc3ZTIxNzk3NjlcIjtcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldCBpbml0aWFsaXplckFCSSgpOiBNYXA8c3RyaW5nLCBzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXAoW1xuICAgICAgICAgICAgWyBcIl9uYW1lXCIsIFwic3RyaW5nXCIgXSwgWyBcIl9zeW1ib2xcIiwgXCJzdHJpbmdcIiBdLCBcbiAgICAgICAgICAgIFsgXCJfZGVjaW1hbHNcIiwgXCJ1aW50OFwiIF0sIFtcIl9zdXBwbHlcIiwgXCJ1aW50MjU2XCJdLCBcbiAgICAgICAgICAgIFsgXCJfbWludFRvXCIsIFwiYWRkcmVzc1wiIF1cbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgZ2V0IG1vZHVsZVNpZ25hdHVyZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gRVJDMjBGb3JtLm1vZHVsZVNpZ25hdHVyZTtcbiAgICB9XG5cbiAgICBnZXQgaW5pdGlhbGl6ZXJBQkkoKTogTWFwPHN0cmluZywgc3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBFUkMyMEZvcm0uaW5pdGlhbGl6ZXJBQkk7XG4gICAgfVxuXG4gICAgbG9hZChyYXdEYXRhOiBldGhlcnMuQnl0ZXNMaWtlKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBzdXBlci5sb2FkKHJhd0RhdGEpO1xuICAgICAgICBcbiAgICAgICAgLy8gTG9vaywgbm90IG15IHByb3VkZXN0IGhhY2ssIGJ1dCBpdCBnZXRzIHRoZSBqb2IgZG9uZVxuICAgICAgICAodGhpcy5nZXRSb290Tm9kZSgpIGFzIGFueSkuaG9zdFxuICAgICAgICAgICAgLm5ld0NvbnRyYWN0QmFzZVdpbmRvd2xldFxuICAgICAgICAgICAgLnZhbHVlIS5mb3JtQmFzZVxuICAgICAgICAgICAgLnZhbHVlIS5xdWVyeVNlbGVjdG9yKFwiI3Jvb3QtbmFtZS1pbnB1dFwiKVxuICAgICAgICAgICAgLm1vZGVsVmFsdWUgPSBkYXRhLl9uYW1lO1xuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGZvcm1hdEhvb2soZDogUmVjb3JkPHN0cmluZywgYW55Pik6IFJlY29yZDxzdHJpbmcsIGFueT4ge1xuICAgICAgICBkW1wiX3N1cHBseVwiXSA9IE51bWJlcihkW1wiX3N1cHBseVwiXSAvIDEwbiAqKiBkW1wiX2RlY2ltYWxzXCJdKTtcbiAgICAgICAgZFtcIl9kZWNpbWFsc1wiXSA9IE51bWJlcihkW1wiX2RlY2ltYWxzXCJdKTtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfVxuXG4gICAgYXN5bmMgY29tcGlsZU1vZHVsZVBhcmFtZXRlcnMoXG4gICAgICAgIHJvb3Q6IGFueVxuICAgICk6IFByb21pc2U8TW9kdWxlUGFyYW1ldGVycyB8IG51bGw+IHtcbiAgICAgICAgY29uc3QgZm9ybSA9IHRoaXMua2FuYUZvcm07XG5cbiAgICAgICAgaWYgKGZvcm0gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtLnZhbGlkYXRlKCk7XG4gICAgICAgIGlmICgoZm9ybSBhcyBLYW5hRm9ybSkuaGFzRmVlZGJhY2tGb3IuaW5jbHVkZXMoJ2Vycm9yJykpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0Rm9ybUVsV2l0aEVycm9yID0gKGZvcm0gYXMgS2FuYUZvcm0pLmZvcm1FbGVtZW50cy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAoZWw6IGFueSkgPT4gZWwuaGFzRmVlZGJhY2tGb3IuaW5jbHVkZXMoJ2Vycm9yJyksXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZmlyc3RGb3JtRWxXaXRoRXJyb3IuZm9jdXMoKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbW9kZWw6IGFueSA9IGZvcm0ubW9kZWxWYWx1ZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1vZHVsZVNpZ25hdHVyZTogRVJDMjBGb3JtLm1vZHVsZVNpZ25hdHVyZSxcbiAgICAgICAgICAgIGluaXRQYXJhbXM6IGV0aGVycy5BYmlDb2Rlci5kZWZhdWx0QWJpQ29kZXIoKS5lbmNvZGUoXG4gICAgICAgICAgICAgICAgQXJyYXkuZnJvbShFUkMyMEZvcm0uaW5pdGlhbGl6ZXJBQkkudmFsdWVzKCkpLFxuICAgICAgICAgICAgICAgIFsgXG4gICAgICAgICAgICAgICAgICAgIHJvb3QubmFtZSwgbW9kZWwuX3N5bWJvbCwgXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLl9kZWNpbWFscywgXG4gICAgICAgICAgICAgICAgICAgIEJpZ0ludChtb2RlbC5fc3VwcGx5KSAqIDEwbiAqKiBCaWdJbnQobW9kZWwuX2RlY2ltYWxzKSxcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgKGF3YWl0IEthbmFsb2FBUEkuc2lnbmVyKSEuZ2V0QWRkcmVzcygpXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFzVXBzdHJlYW0obG9jYWw6IGV0aGVycy5CeXRlc0xpa2UpOiBib29sZWFuIHtcbiAgICAgICAgLy8gRHVlIHRvIGhvdyBFUkMyMCBpcyBpbml0aWFsaXplZCwgaXQgcmVxdWlyZXMgYW4gYWRkcmVzcyBwYXJhbWV0ZXJcbiAgICAgICAgLy8gdGhhdCBpcyBub3QgcmV0dXJuZWQgd2l0aCBwZWVrU3RhdGUuIFdlIHdpbGwgdHJ1bmNhdGUgdGhlIGxhc3QgMzJcbiAgICAgICAgLy8gYnl0ZXMgYmVmb3JlIGNvbXBhcmluZ1xuICAgICAgICBcbiAgICAgICAgLy8gQSBiaXQgb2YgYW4gZXhwbGFuYXRpb24gb24gdGhlIHNsaWNpbmc6IDI1OCBpcyB0aGUgcG9zaXRpb24gYXQgd2hpY2hcbiAgICAgICAgLy8gdGhlIGFkZHJlc3MgYmVnaW5zIChcIjB4XCIgKyAyNTYgY2hhcnMpLiBJdCBjb250aW51ZXMgZm9yIDY0IGJ5dGVzLFxuICAgICAgICAvLyBhbmQgdGhlbiBpdCdzIGFsbCB0aGUgc2FtZS4gVGhlIGxvYWRlZFJhd0RhdGEgYWx3YXlzIHJldHVybnMgdGhlXG4gICAgICAgIC8vIHplcm90aCBhZGRyZXNzLlxuICAgICAgICBjb25zdCByZWxvY2FsID0gXG4gICAgICAgICAgICBsb2NhbC5zbGljZSgwLCAyNTgpICsgZXRoZXJzLlplcm9IYXNoLnNsaWNlKDIpICsgbG9jYWwuc2xpY2UoMzIyKTtcbiAgICAgICAgcmV0dXJuIHJlbG9jYWwgPT0gdGhpcy5sb2FkZWRSYXdEYXRhO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8aDI+RVJDMjAgbW9kdWxlPC9oMj5cbiAgICAgICAgICAgIDxocj5cbiAgICAgICAgICAgIDxoMz5UaGUgZnVuZ2libGUgdG9rZW4gc3RhbmRhcmQ8L2gzPlxuICAgICAgICAgICAgPGthbmEtZm9ybT5cbiAgICAgICAgICAgICAgICA8Zm9ybT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tcm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+U3ltYm9sPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxrYW5hLWlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLXNyLW9ubHk9XCJTeW1ib2xcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImllLiBVU0RDLCBCVEMuLi5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiX3N5bWJvbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWxpZGF0b3JzPVwiJHtbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWluTWF4TGVuZ3RoKHsgbWluOiAyLCBtYXg6IDh9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZXF1aXJlZCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF19XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByZXByb2Nlc3Nvcj0ke21heExlbmd0aFByZXByb2Nlc3Nvcig4KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJzbWFsbC1pbnB1dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwva2FuYS1pbnB1dD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLXJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlN1cHBseTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8a2FuYS1pbnB1dC1hbW91bnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwtc3Itb25seT1cIlN1cHBseVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiMjEwMDAwMDBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiX3N1cHBseVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWxpZGF0b3JzPVwiJHtbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWluTnVtYmVyKDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1heE51bWJlcihNYXhVaW50MjU2KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZXF1aXJlZCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF19XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByZXByb2Nlc3Nvcj0ke21heE51bWJlclByZXByb2Nlc3NvcihNYXhVaW50MjU2KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1vZGVsVmFsdWU9JHsyMTAwMDAwMH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9rYW5hLWlucHV0LWFtb3VudD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5Ub2tlbiBkZWNpbWFsczwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8a2FuYS1pbnB1dC1zdGVwcGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLXNyLW9ubHk9XCJUb2tlbiBkZWNpbWFsc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVwiMThcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiX2RlY2ltYWxzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnZhbGlkYXRvcnM9XCIke1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZXF1aXJlZCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF19XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluPVwiMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heD1cIjMyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9rYW5hLWlucHV0LXN0ZXBwZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDwva2FuYS1mb3JtPlxuXG4gICAgICAgIGA7XG4gICAgfVxuICAgIFxufSIsImltcG9ydCB7IGN1c3RvbUVsZW1lbnQgfSBmcm9tIFwibGl0L2RlY29yYXRvcnMuanNcIjtcbmltcG9ydCB7IE1vZHVsZUZvcm0gfSBmcm9tIFwiLi4vLi4vY29tbW9uc1wiO1xuaW1wb3J0IHsgaHRtbCB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IEthbmFGb3JtLCBLYW5hSW5wdXRBbW91bnQsIFJlcXVpcmVkLCBtYXhOdW1iZXJQcmVwcm9jZXNzb3IgfSBmcm9tIFwiLi4vLi4vLi4vZm9ybXMvZm9ybXNcIjtcbmltcG9ydCB7IE1pbk51bWJlciwgTWF4TnVtYmVyLCBWYWxpZGF0b3IgfSBmcm9tIFwiQGxpb24vZm9ybS1jb3JlXCI7XG5pbXBvcnQgeyBNYXhVaW50MjU2LCBldGhlcnMgfSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQgeyBNb2R1bGVQYXJhbWV0ZXJzIH0gZnJvbSBcInNyYy9hcGkva2FuYWxvYS1wcm9qZWN0LXJlZ2lzdHJ5XCI7XG5pbXBvcnQgeyBFUkMyMEZvcm0gfSBmcm9tIFwiLi4vLi4vZXJjMjAtZm9ybVwiO1xuXG5jbGFzcyBFcXVhbE9yTW9yZVRoYW4gZXh0ZW5kcyBWYWxpZGF0b3Ige1xuICAgIHN0YXRpYyBnZXQgdmFsaWRhdG9yTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdFcXVhbE9yTW9yZVRoYW4nO1xuICAgIH1cbiAgXG4gICAgZXhlY3V0ZShtb2RlbFZhbHVlOiBhbnksIHNtYWxsOiBFUkMyMEZvcm0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiAhKEJpZ0ludChtb2RlbFZhbHVlKSA+PSBCaWdJbnQoc21hbGwubW9kZWxWYWx1ZT8uX3N1cHBseSkpXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cblxuZXhwb3J0IGNvbnN0IEVSQzIwX01JTlRfQlVSTl9GT1JNX1RBRyA9ICdlcmMyMF9taW50LWJ1cm4nO1xuQGN1c3RvbUVsZW1lbnQoRVJDMjBfTUlOVF9CVVJOX0ZPUk1fVEFHKVxuZXhwb3J0IGNsYXNzIEVSQzIwTWludEJ1cm5Gb3JtIGV4dGVuZHMgTW9kdWxlRm9ybSB7XG4gICAgc3RhdGljIGZvcm1Bc3NvY2lhdGVkID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgbW9kdWxlU2lnbmF0dXJlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIjB4MjY0YmRkZTBhNDc4MTE5MjZkNzQ1ZDE2Yjc3MzMwZDhjMGFmNmQzNzllNjIyYWUzNTJhMDYzYTMxMTQwMmEyM1wiO1xuICAgIH1cblxuICAgIGdldCBtb2R1bGVTaWduYXR1cmUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIEVSQzIwTWludEJ1cm5Gb3JtLm1vZHVsZVNpZ25hdHVyZVxuICAgIH1cbiAgICBcbiAgICBnZXQgaW5pdGlhbGl6ZXJBQkkoKTogTWFwPHN0cmluZywgc3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBuZXcgTWFwKFtcbiAgICAgICAgICAgIFtcIm1heFN1cHBseVwiLCBcInVpbnQyNTZcIl0sIFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgICAgIFxuICAgIHB1YmxpYyBlcmMyMEZvcm06IEVSQzIwRm9ybSB8IG51bGwgPSBudWxsOyBcbiAgICBzZXRQYXJlbnQocmVmOiBNb2R1bGVGb3JtKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZXJjMjBGb3JtID0gcmVmIGFzIEVSQzIwRm9ybTtcbiAgICB9XG5cbiAgICBmb3JtYXRIb29rKGQ6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHtcbiAgICAgICAgaWYgKHRoaXMuZXJjMjBGb3JtID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9XG4gICAgICAgIGRbXCJtYXhTdXBwbHlcIl0gPSBcbiAgICAgICAgICAgIE51bWJlciggLy8gRW5zdXJlcyBMaW9uIHdpbGwgbm90IGNyeSB3aXRoIGl0cyB2YWxpZGF0b3JcbiAgICAgICAgICAgICAgICBkW1wibWF4U3VwcGx5XCJdIC8gMTBuICoqIEJpZ0ludChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcmMyMEZvcm0ubW9kZWxWYWx1ZT8uX2RlY2ltYWxzIHx8IDE4XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGNvbXBpbGVNb2R1bGVQYXJhbWV0ZXJzKHJvb3Q6IGFueSk6IFByb21pc2U8TW9kdWxlUGFyYW1ldGVycyB8IG51bGw+IHtcbiAgICAgICAgY29uc3QgZm9ybSA9IHRoaXMua2FuYUZvcm07XG5cbiAgICAgICAgaWYgKGZvcm0gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtLmZvcm1FbGVtZW50cy5mb3JFYWNoKFxuICAgICAgICAgICAgLy8gV2hvbXN0LCBpbiB0aGVpciByaWdodCBtaW5kLCBjYWNoZXMgdmFsaWRhdGlvbiByZXN1bHRzPyBcbiAgICAgICAgICAgIChlbCkgPT4gZWwudmFsaWRhdGUoeyBjbGVhckN1cnJlbnRSZXN1bHQ6IHRydWUgfSlcbiAgICAgICAgKTtcbiAgICAgICAgZm9ybS52YWxpZGF0ZSh7IGNsZWFyQ3VycmVudFJlc3VsdDogdHJ1ZSB9KTtcbiAgICAgICAgaWYgKChmb3JtIGFzIEthbmFGb3JtKS5oYXNGZWVkYmFja0Zvci5pbmNsdWRlcygnZXJyb3InKSkge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RGb3JtRWxXaXRoRXJyb3IgPSAoZm9ybSBhcyBLYW5hRm9ybSkuZm9ybUVsZW1lbnRzLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgIChlbDogYW55KSA9PiBlbC5oYXNGZWVkYmFja0Zvci5pbmNsdWRlcygnZXJyb3InKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBmaXJzdEZvcm1FbFdpdGhFcnJvci5mb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtb2RlbDogYW55ID0gZm9ybS5tb2RlbFZhbHVlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbW9kdWxlU2lnbmF0dXJlOiB0aGlzLm1vZHVsZVNpZ25hdHVyZSxcbiAgICAgICAgICAgIGluaXRQYXJhbXM6IGV0aGVycy5BYmlDb2Rlci5kZWZhdWx0QWJpQ29kZXIoKS5lbmNvZGUoXG4gICAgICAgICAgICAgICAgQXJyYXkuZnJvbSh0aGlzLmluaXRpYWxpemVyQUJJLnZhbHVlcygpKSxcbiAgICAgICAgICAgICAgICBbIFxuICAgICAgICAgICAgICAgICAgICBCaWdJbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5tYXhTdXBwbHlcbiAgICAgICAgICAgICAgICAgICAgKSAqIDEwbiAqKiBCaWdJbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICByb290W0VSQzIwRm9ybS5tb2R1bGVTaWduYXR1cmVdPy5fZGVjaW1hbHNcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPGhyPlxuICAgICAgICAgICAgPGgzPkJhc2ljIG1pbnQgYW5kIGJ1cm4gZm9yIEVSQzIwPC9oMz5cbiAgICAgICAgICAgIDxrYW5hLWZvcm0+XG4gICAgICAgICAgICAgICAgPGZvcm0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLXJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPk1heGltdW0gc3VwcGx5PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxrYW5hLWlucHV0LWFtb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC1zci1vbmx5PVwiTWF4aW11bSBzdXBwbHlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIjIxMDAwMDAwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cIm1heFN1cHBseVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWxpZGF0b3JzPVwiJHtbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWluTnVtYmVyKDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1heE51bWJlcihNYXhVaW50MjU2KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZXF1aXJlZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEVxdWFsT3JNb3JlVGhhbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVyYzIwRm9ybSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRNZXNzYWdlOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IFwiTWF4aW11bSBzdXBwbHkgY2Fubm90IGJlIGxvd2VyIHRoYW4gdG90YWwgc3VwcGx5XCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdfVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tb2RlbFZhbHVlPSR7MjEwMDAwMDB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wcmVwcm9jZXNzb3I9JHttYXhOdW1iZXJQcmVwcm9jZXNzb3IoTWF4VWludDI1Nil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID9yZWFkb25seT0ke3RoaXMubG9hZGVkUmF3RGF0YSAhPSBudWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2thbmEtaW5wdXQtYW1vdW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwva2FuYS1mb3JtPlxuXG4gICAgICAgIGA7XG4gICAgfVxuICAgIFxufSIsImltcG9ydCB7IEVSQzIwX0ZPUk1fVEFHLCBFUkMyMEZvcm0gfSBmcm9tIFwiLi9lcmMyMC1mb3JtXCI7XG5pbXBvcnQgeyBFUkMyMF9NSU5UX0JVUk5fRk9STV9UQUcsIEVSQzIwTWludEJ1cm5Gb3JtIH0gZnJvbSBcIi4vcGx1Z2lucy9lcmMyMC9lcmMyMC1taW50LWJ1cm4tZm9ybVwiO1xuaW1wb3J0IHsgTW9kdWxlUGFyYW1zIH0gZnJvbSBcIi4vY29tbW9uc1wiO1xuXG5leHBvcnQgY29uc3QgQkFTSUNfTU9EVUxFUyA9IFtcbiAgICB7IFxuICAgICAgICBuYW1lOiBcIkVSQzIwXCIsIFxuICAgICAgICBzaWduYXR1cmU6IEVSQzIwRm9ybS5tb2R1bGVTaWduYXR1cmUsIFxuICAgICAgICBjdXN0b21FbGVtZW50OiBFUkMyMF9GT1JNX1RBRyBcbiAgICB9LFxuICAgIC8veyBuYW1lOiBcIkVSQzcyMVwiLCB2YWx1ZTogXCJlcmM3MjFcIiwgY3VzdG9tRWxlbWVudDogRVJDMjBfRk9STV9UQUcgfVxuXSBhcyBNb2R1bGVQYXJhbXNbXTtcbmV4cG9ydCB0eXBlIEJhc2ljTW9kdWxlID0gKHR5cGVvZiBCQVNJQ19NT0RVTEVTKVtudW1iZXJdW1wic2lnbmF0dXJlXCJdOyBcblxuZXhwb3J0IGNvbnN0IFBMVUdJTl9NT0RVTEVTOiBSZWNvcmQ8QmFzaWNNb2R1bGUsIE1vZHVsZVBhcmFtc1tdPiA9IHtcbiAgICBbRVJDMjBGb3JtLm1vZHVsZVNpZ25hdHVyZV06IFtcbiAgICAgICAgeyBcbiAgICAgICAgICAgIG5hbWU6IFwiTWludC9idXJuIGFuZCB2YXJpYWJsZSBzdXBwbHlcIiwgXG4gICAgICAgICAgICBzaWduYXR1cmU6IEVSQzIwTWludEJ1cm5Gb3JtLm1vZHVsZVNpZ25hdHVyZSxcbiAgICAgICAgICAgIGN1c3RvbUVsZW1lbnQ6IEVSQzIwX01JTlRfQlVSTl9GT1JNX1RBRyBcbiAgICAgICAgfSxcbiAgICBdXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9kdWxlc0Zvcihtb2R1bGU6IEJhc2ljTW9kdWxlKTogTW9kdWxlUGFyYW1zW10ge1xuICAgIHJldHVybiBQTFVHSU5fTU9EVUxFU1ttb2R1bGVdIHx8IFtdO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0QWxsTW9kdWxlczogKCkgPT4gTW9kdWxlUGFyYW1zW10gPSAoKSA9PiBbXG4gICAgIC4uLkJBU0lDX01PRFVMRVMsXG4gICAgIC4uLk9iamVjdC52YWx1ZXMoUExVR0lOX01PRFVMRVMpLmZsYXRNYXAoKHApID0+IHApXG5dIiwiaW1wb3J0e2lzU2luZ2xlRXhwcmVzc2lvbiBhcyBpfWZyb21cIi4vZGlyZWN0aXZlLWhlbHBlcnMuanNcIjtpbXBvcnR7RGlyZWN0aXZlIGFzIHQsUGFydFR5cGUgYXMgZX1mcm9tXCIuL2RpcmVjdGl2ZS5qc1wiO2V4cG9ydHtEaXJlY3RpdmUsUGFydFR5cGUsZGlyZWN0aXZlfWZyb21cIi4vZGlyZWN0aXZlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdCBzPShpLHQpPT57Y29uc3QgZT1pLl8kQU47aWYodm9pZCAwPT09ZSlyZXR1cm4hMTtmb3IoY29uc3QgaSBvZiBlKWkuXyRBTz8uKHQsITEpLHMoaSx0KTtyZXR1cm4hMH0sbz1pPT57bGV0IHQsZTtkb3tpZih2b2lkIDA9PT0odD1pLl8kQU0pKWJyZWFrO2U9dC5fJEFOLGUuZGVsZXRlKGkpLGk9dH13aGlsZSgwPT09ZT8uc2l6ZSl9LHI9aT0+e2ZvcihsZXQgdDt0PWkuXyRBTTtpPXQpe2xldCBlPXQuXyRBTjtpZih2b2lkIDA9PT1lKXQuXyRBTj1lPW5ldyBTZXQ7ZWxzZSBpZihlLmhhcyhpKSlicmVhaztlLmFkZChpKSxjKHQpfX07ZnVuY3Rpb24gaChpKXt2b2lkIDAhPT10aGlzLl8kQU4/KG8odGhpcyksdGhpcy5fJEFNPWkscih0aGlzKSk6dGhpcy5fJEFNPWl9ZnVuY3Rpb24gbihpLHQ9ITEsZT0wKXtjb25zdCByPXRoaXMuXyRBSCxoPXRoaXMuXyRBTjtpZih2b2lkIDAhPT1oJiYwIT09aC5zaXplKWlmKHQpaWYoQXJyYXkuaXNBcnJheShyKSlmb3IobGV0IGk9ZTtpPHIubGVuZ3RoO2krKylzKHJbaV0sITEpLG8ocltpXSk7ZWxzZSBudWxsIT1yJiYocyhyLCExKSxvKHIpKTtlbHNlIHModGhpcyxpKX1jb25zdCBjPWk9PntpLnR5cGU9PWUuQ0hJTEQmJihpLl8kQVA/Pz1uLGkuXyRBUT8/PWgpfTtjbGFzcyBmIGV4dGVuZHMgdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5fJEFOPXZvaWQgMH1fJEFUKGksdCxlKXtzdXBlci5fJEFUKGksdCxlKSxyKHRoaXMpLHRoaXMuaXNDb25uZWN0ZWQ9aS5fJEFVfV8kQU8oaSx0PSEwKXtpIT09dGhpcy5pc0Nvbm5lY3RlZCYmKHRoaXMuaXNDb25uZWN0ZWQ9aSxpP3RoaXMucmVjb25uZWN0ZWQ/LigpOnRoaXMuZGlzY29ubmVjdGVkPy4oKSksdCYmKHModGhpcyxpKSxvKHRoaXMpKX1zZXRWYWx1ZSh0KXtpZihpKHRoaXMuXyRDdCkpdGhpcy5fJEN0Ll8kQUkodCx0aGlzKTtlbHNle2NvbnN0IGk9Wy4uLnRoaXMuXyRDdC5fJEFIXTtpW3RoaXMuXyRDaV09dCx0aGlzLl8kQ3QuXyRBSShpLHRoaXMsMCl9fWRpc2Nvbm5lY3RlZCgpe31yZWNvbm5lY3RlZCgpe319ZXhwb3J0e2YgYXMgQXN5bmNEaXJlY3RpdmV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMtZGlyZWN0aXZlLmpzLm1hcFxuIiwiaW1wb3J0e25vdGhpbmcgYXMgdH1mcm9tXCIuLi9saXQtaHRtbC5qc1wiO2ltcG9ydHtBc3luY0RpcmVjdGl2ZSBhcyBpfWZyb21cIi4uL2FzeW5jLWRpcmVjdGl2ZS5qc1wiO2ltcG9ydHtkaXJlY3RpdmUgYXMgc31mcm9tXCIuLi9kaXJlY3RpdmUuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2NvbnN0IGU9KCk9Pm5ldyBoO2NsYXNzIGh7fWNvbnN0IG89bmV3IFdlYWtNYXAsbj1zKGNsYXNzIGV4dGVuZHMgaXtyZW5kZXIoaSl7cmV0dXJuIHR9dXBkYXRlKGksW3NdKXtjb25zdCBlPXMhPT10aGlzLlk7cmV0dXJuIGUmJnZvaWQgMCE9PXRoaXMuWSYmdGhpcy5ydCh2b2lkIDApLChlfHx0aGlzLmx0IT09dGhpcy5jdCkmJih0aGlzLlk9cyx0aGlzLmh0PWkub3B0aW9ucz8uaG9zdCx0aGlzLnJ0KHRoaXMuY3Q9aS5lbGVtZW50KSksdH1ydCh0KXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLlkpe2NvbnN0IGk9dGhpcy5odD8/Z2xvYmFsVGhpcztsZXQgcz1vLmdldChpKTt2b2lkIDA9PT1zJiYocz1uZXcgV2Vha01hcCxvLnNldChpLHMpKSx2b2lkIDAhPT1zLmdldCh0aGlzLlkpJiZ0aGlzLlkuY2FsbCh0aGlzLmh0LHZvaWQgMCkscy5zZXQodGhpcy5ZLHQpLHZvaWQgMCE9PXQmJnRoaXMuWS5jYWxsKHRoaXMuaHQsdCl9ZWxzZSB0aGlzLlkudmFsdWU9dH1nZXQgbHQoKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLlk/by5nZXQodGhpcy5odD8/Z2xvYmFsVGhpcyk/LmdldCh0aGlzLlkpOnRoaXMuWT8udmFsdWV9ZGlzY29ubmVjdGVkKCl7dGhpcy5sdD09PXRoaXMuY3QmJnRoaXMucnQodm9pZCAwKX1yZWNvbm5lY3RlZCgpe3RoaXMucnQodGhpcy5jdCl9fSk7ZXhwb3J0e2UgYXMgY3JlYXRlUmVmLG4gYXMgcmVmfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZi5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD1hc3luYyh0LHMpPT57Zm9yIGF3YWl0KGNvbnN0IGkgb2YgdClpZighMT09PWF3YWl0IHMoaSkpcmV0dXJufTtjbGFzcyBze2NvbnN0cnVjdG9yKHQpe3RoaXMuWT10fWRpc2Nvbm5lY3QoKXt0aGlzLlk9dm9pZCAwfXJlY29ubmVjdCh0KXt0aGlzLlk9dH1kZXJlZigpe3JldHVybiB0aGlzLll9fWNsYXNzIGl7Y29uc3RydWN0b3IoKXt0aGlzLlo9dm9pZCAwLHRoaXMucT12b2lkIDB9Z2V0KCl7cmV0dXJuIHRoaXMuWn1wYXVzZSgpe3RoaXMuWj8/PW5ldyBQcm9taXNlKCh0PT50aGlzLnE9dCkpfXJlc3VtZSgpe3RoaXMucT8uKCksdGhpcy5aPXRoaXMucT12b2lkIDB9fWV4cG9ydHtpIGFzIFBhdXNlcixzIGFzIFBzZXVkb1dlYWtSZWYsdCBhcyBmb3JBd2FpdE9mfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByaXZhdGUtYXN5bmMtaGVscGVycy5qcy5tYXBcbiIsImltcG9ydHtub0NoYW5nZSBhcyB0fWZyb21cIi4uL2xpdC1odG1sLmpzXCI7aW1wb3J0e2lzUHJpbWl0aXZlIGFzIHN9ZnJvbVwiLi4vZGlyZWN0aXZlLWhlbHBlcnMuanNcIjtpbXBvcnR7QXN5bmNEaXJlY3RpdmUgYXMgaX1mcm9tXCIuLi9hc3luYy1kaXJlY3RpdmUuanNcIjtpbXBvcnR7UHNldWRvV2Vha1JlZiBhcyBlLFBhdXNlciBhcyByfWZyb21cIi4vcHJpdmF0ZS1hc3luYy1oZWxwZXJzLmpzXCI7aW1wb3J0e2RpcmVjdGl2ZSBhcyBvfWZyb21cIi4uL2RpcmVjdGl2ZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3Qgbj10PT4hcyh0KSYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC50aGVuLGg9MTA3Mzc0MTgyMztjbGFzcyBjIGV4dGVuZHMgaXtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5fJEN3dD1oLHRoaXMuXyRDYnQ9W10sdGhpcy5fJENLPW5ldyBlKHRoaXMpLHRoaXMuXyRDWD1uZXcgcn1yZW5kZXIoLi4ucyl7cmV0dXJuIHMuZmluZCgodD0+IW4odCkpKT8/dH11cGRhdGUocyxpKXtjb25zdCBlPXRoaXMuXyRDYnQ7bGV0IHI9ZS5sZW5ndGg7dGhpcy5fJENidD1pO2NvbnN0IG89dGhpcy5fJENLLGM9dGhpcy5fJENYO3RoaXMuaXNDb25uZWN0ZWR8fHRoaXMuZGlzY29ubmVjdGVkKCk7Zm9yKGxldCB0PTA7dDxpLmxlbmd0aCYmISh0PnRoaXMuXyRDd3QpO3QrKyl7Y29uc3Qgcz1pW3RdO2lmKCFuKHMpKXJldHVybiB0aGlzLl8kQ3d0PXQsczt0PHImJnM9PT1lW3RdfHwodGhpcy5fJEN3dD1oLHI9MCxQcm9taXNlLnJlc29sdmUocykudGhlbigoYXN5bmMgdD0+e2Zvcig7Yy5nZXQoKTspYXdhaXQgYy5nZXQoKTtjb25zdCBpPW8uZGVyZWYoKTtpZih2b2lkIDAhPT1pKXtjb25zdCBlPWkuXyRDYnQuaW5kZXhPZihzKTtlPi0xJiZlPGkuXyRDd3QmJihpLl8kQ3d0PWUsaS5zZXRWYWx1ZSh0KSl9fSkpKX1yZXR1cm4gdH1kaXNjb25uZWN0ZWQoKXt0aGlzLl8kQ0suZGlzY29ubmVjdCgpLHRoaXMuXyRDWC5wYXVzZSgpfXJlY29ubmVjdGVkKCl7dGhpcy5fJENLLnJlY29ubmVjdCh0aGlzKSx0aGlzLl8kQ1gucmVzdW1lKCl9fWNvbnN0IG09byhjKTtleHBvcnR7YyBhcyBVbnRpbERpcmVjdGl2ZSxtIGFzIHVudGlsfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVudGlsLmpzLm1hcFxuIiwiaW1wb3J0IHsgaHRtbCwgY3NzLCBub3RoaW5nIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5LCBzdGF0ZSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IE1vZHVsZUZvcm0sIE1vZHVsZVBhcmFtcyB9IGZyb20gJy4vY29tbW9ucyc7XG5pbXBvcnQgeyBLYW5hbG9hQVBJIH0gZnJvbSAnLi4vLi4vYXBpL2thbmFsb2EtZXRoZXJzJztcbmltcG9ydCB7IHJlcGVhdCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3JlcGVhdC5qcyc7XG5pbXBvcnQgeyBLYW5hbG9hV2luZG93bGV0IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy93aW5kb3dsZXQnO1xuaW1wb3J0IHsgQmFzaWNNb2R1bGUsIEJBU0lDX01PRFVMRVMsIFBMVUdJTl9NT0RVTEVTIH0gZnJvbSAnLi9tb2R1bGVzLWxpc3QnO1xuaW1wb3J0IHsgQ29udHJhY3QsIGV0aGVycyB9IGZyb20gJ2V0aGVycyc7XG5pbXBvcnQgeyB1bnRpbCB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3VudGlsLmpzJztcbmltcG9ydCB7IE1vZHVsZU9wcywgTW9kdWxlUGFyYW1ldGVycyB9IGZyb20gJy4uLy4uL2FwaS9rYW5hbG9hLXByb2plY3QtcmVnaXN0cnknO1xuXG5AY3VzdG9tRWxlbWVudCgnbW9kdWxlcy13aW5kb3dsZXQnKVxuZXhwb3J0IGNsYXNzIE1vZHVsZXNXaW5kb3dsZXQgZXh0ZW5kcyBLYW5hbG9hV2luZG93bGV0IHtcblxuICAgIEBzdGF0ZSgpXG4gICAgZGVjbGFyZSBiYXNlTW9kdWxlOiBNb2R1bGVQYXJhbXM7XG4gICAgQHN0YXRlKClcbiAgICBkZWNsYXJlIG9uY2hhaW5Nb2R1bGVzOiBSZWNvcmQ8c3RyaW5nLCBbc3RyaW5nLCBldGhlcnMuQnl0ZXNMaWtlXT47XG4gICAgQHN0YXRlKClcbiAgICBkZWNsYXJlIHN0YXRlUmVjb3JkczogUmVjb3JkPHN0cmluZywgYm9vbGVhbj47XG4gICAgQHByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pXG4gICAgZGVjbGFyZSBjb250cmFjdEFkZHJlc3M6IHN0cmluZztcbiAgICBcbiAgICBAc3RhdGUoKVxuICAgIGNvbnRyYWN0OiBQcm9taXNlPENvbnRyYWN0IHwgdW5kZWZpbmVkPjtcblxuICAgIHByb3RlY3RlZCBmb3JtQ2FjaGU6IFJlY29yZDxCYXNpY01vZHVsZSwgTW9kdWxlRm9ybT4gPSB7fTtcblxuICAgIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgLi4uc3VwZXIuc3R5bGVzLFxuICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgIDpob3N0IHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgICAgICAgICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsb2FkaW5nLWljb24ge1xuICAgICAgICAgICAgICAgICAgICBmbGV4OiAwICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdWwge1xuICAgICAgICAgICAgICAgICAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiBzY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgIGZsZXg6IDEgMSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsaSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAgMXJlbTtcbiAgICAgICAgICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDNyZW07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLmJhc2UtbW9kdWxlIHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeS1saWdodC1jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1mb3JlZ3JvdW5kLWxpZ2h0LWNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHN0aWNreTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogaW5oZXJpdCBpbmhlcml0IDAgMDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzLjJyZW07XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC5yZWR1bmRhbnQtY29udGFpbmVyIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4LWhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbnB1dFt0eXBlPVwicmFkaW9cIl0ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS41KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub25jaGFpbk1vZHVsZXMgPSB7fTtcbiAgICAgICAgdGhpcy5zdGF0ZVJlY29yZHMgPSB7fTtcbiAgICAgICAgdGhpcy5jb250cmFjdCA9IG5ldyBQcm9taXNlKChyZXMpID0+IHJlcyh1bmRlZmluZWQpKTtcbiAgICB9XG5cbiAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soXG4gICAgICAgIG5hbWU6IHN0cmluZywgX29sZDogc3RyaW5nIHwgbnVsbCwgdmFsdWU6IHN0cmluZyB8IG51bGxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgc3VwZXIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIF9vbGQsIHZhbHVlKTtcblxuICAgICAgICBpZiAobmFtZSAhPSBcImNvbnRyYWN0YWRkcmVzc1wiIHx8IF9vbGQgPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jb250cmFjdCA9IG5ldyBQcm9taXNlKFxuICAgICAgICAgICAgICAgIChyZXMpID0+IHJlcyhcbiAgICAgICAgICAgICAgICAgICAgbmV3IENvbnRyYWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsIFsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmdW5jdGlvbiBnZXRBY3RpdmVNb2R1bGUoXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCJieXRlczMyIHNpZ25hdHVyZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIikgdmlldyByZXR1cm5zIChhZGRyZXNzKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb24gcGVlayhcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiYnl0ZXMzMiBzaWduYXR1cmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIpIHZpZXcgcmV0dXJucyAoYnl0ZXMgbWVtb3J5KVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBdLCBLYW5hbG9hQVBJLndhbGxldFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyYWN0ID0gbmV3IFByb21pc2UoKHJlcykgPT4gcmVzKHVuZGVmaW5lZCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMubW9kdWxlTGlzdENoYW5nZWQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQ2xpY2tSYWRpb0hhbmRsZXIoZXY6IEV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHJhZGlvOiBIVE1MSW5wdXRFbGVtZW50ID0gXG4gICAgICAgICAgICAoZXYuY3VycmVudFRhcmdldCBhcyBIVE1MTElFbGVtZW50KS5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIikhO1xuICAgICAgICByYWRpby5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgcmFkaW8uZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJjaGFuZ2UtbW9kdWxlXCIpKTtcbiAgICB9XG5cbiAgICBtb2R1bGVMaXN0Q2hhbmdlZChlPzogRXZlbnQpIDogdm9pZCB7XG4gICAgICAgIGlmIChlICYmIGUudGFyZ2V0KSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZVJlY29yZHNbZWxlbS52YWx1ZV0gPSBlbGVtLmNoZWNrZWQgfHwgZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nZXRTZWxlY3RlZE1vZHVsZXMoKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFxuICAgICAgICAgICAgICAgIFwic2VsZWN0ZWQtbW9kdWxlcy11cGRhdGVkXCIsIFxuICAgICAgICAgICAgICAgIHsgYnViYmxlczogdHJ1ZSwgY29tcG9zZWQ6IHRydWUgfVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgICB9XG4gICAgXG4gICAgZ2V0TW9kdWxlRm9ybShtb2Q6IE1vZHVsZVBhcmFtcykge1xuICAgICAgICBpZiAodGhpcy5mb3JtQ2FjaGVbbW9kLnNpZ25hdHVyZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgZm9ybSA9XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChtb2QuY3VzdG9tRWxlbWVudCkgYXMgTW9kdWxlRm9ybTsgICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZm9ybUNhY2hlW21vZC5zaWduYXR1cmVdID0gZm9ybTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybUNhY2hlW21vZC5zaWduYXR1cmVdO1xuICAgIH1cblxuICAgIGdldFNlbGVjdGVkTW9kdWxlcygpOiBNYXA8c3RyaW5nLCBNb2R1bGVGb3JtPiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkTW9kdWxlczogTW9kdWxlUGFyYW1zW10gPSBbIFxuICAgICAgICAgICAgQkFTSUNfTU9EVUxFUy5maW5kKFxuICAgICAgICAgICAgICAgICh4KSA9PiB4LnNpZ25hdHVyZSA9PSB0aGlzLmJhc2VNb2R1bGUuc2lnbmF0dXJlXG4gICAgICAgICAgICApISxcbiAgICAgICAgICAgIC4uLihcbiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3Q/LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICBcImlucHV0Lm1vZHVsZS1lbmFibGVbdHlwZT0nY2hlY2tib3gnXTpjaGVja2VkXCJcbiAgICAgICAgICAgICAgICAgICAgKSB8fCBbXVxuICAgICAgICAgICAgICAgICkubWFwKFxuICAgICAgICAgICAgICAgICAgICAoeCkgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICBQTFVHSU5fTU9EVUxFU1t0aGlzLmJhc2VNb2R1bGUuc2lnbmF0dXJlXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCh5KSA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeS5zaWduYXR1cmUgPT0geC5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkhXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICBdO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbW9kdWxlcyA9IG5ldyBNYXA8c3RyaW5nLCBNb2R1bGVGb3JtPigpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbW9kID0gc2VsZWN0ZWRNb2R1bGVzW2ldO1xuICAgICAgICAgICAgY29uc3QgZm9ybSA9IHRoaXMuZ2V0TW9kdWxlRm9ybShtb2QpO1xuICAgICAgICAgICAgbW9kdWxlcy5zZXQobW9kLnNpZ25hdHVyZSwgZm9ybSk7XG4gICAgICAgICAgICBmb3JtLnNldFBhcmVudChtb2R1bGVzLnZhbHVlcygpLm5leHQoKS52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbW9kdWxlcztcbiAgICB9XG5cbiAgICBhc3luYyBzY2FuTW9kdWxlKFxuICAgICAgICBzaWc6IHN0cmluZ1xuICAgICk6IFByb21pc2U8W3N0cmluZywgZXRoZXJzLkJ5dGVzTGlrZV0gfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgLy8gV2UgcHJvYmUgdGhlIGFzc29jaWF0ZWQgY29udHJhY3QgdG8gY2hlY2sgaWYgYSBtb2R1bGUgaXMgbWFya2VkIGFzXG4gICAgICAgIC8vIGluc3RhbGxlZCBpbiB0aGUgY29udHJhY3QsIGFuZCBpZiBpdCBpcywgd2UgZXhlY3V0ZSBcInBlZWtcIiBvdmVyIGl0XG4gICAgICAgIGNvbnN0IGNvbnRyYWN0ID0gYXdhaXQgdGhpcy5jb250cmFjdDtcbiAgICAgICAgaWYgKGNvbnRyYWN0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm9uY2hhaW5Nb2R1bGVzW3NpZ107XG4gICAgICAgICAgICByZXR1cm4gW2V0aGVycy5aZXJvQWRkcmVzcywgXCJcIl07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbXBsZW1lbnRhdGlvbjogc3RyaW5nID0gYXdhaXQgY29udHJhY3QuZ2V0QWN0aXZlTW9kdWxlKHNpZyk7XG4gICAgICAgIGlmIChpbXBsZW1lbnRhdGlvbiAhPSBldGhlcnMuWmVyb0FkZHJlc3MpIHtcbiAgICAgICAgICAgIHRoaXMub25jaGFpbk1vZHVsZXNbc2lnXSA9IFxuICAgICAgICAgICAgICAgIFtpbXBsZW1lbnRhdGlvbiwgIGF3YWl0IGNvbnRyYWN0LnBlZWsoc2lnKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5vbmNoYWluTW9kdWxlc1tzaWddO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZm9ybSA9IHRoaXMuZm9ybUNhY2hlW3NpZ107XG4gICAgICAgIGNvbnN0IG9uY2hhaW4gPSB0aGlzLm9uY2hhaW5Nb2R1bGVzW3NpZ107XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGZvcm0gIT0gbnVsbCAmJiBcbiAgICAgICAgICAgIG9uY2hhaW4gIT0gbnVsbCAmJiBcbiAgICAgICAgICAgIGZvcm0ubG9hZGVkUmF3RGF0YSAhPSBvbmNoYWluWzFdXG4gICAgICAgICkge1xuICAgICAgICAgICAgZm9ybS5sb2FkKG9uY2hhaW5bMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5zdGF0ZVJlY29yZHNbc2lnXSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAhPSBldGhlcnMuWmVyb0FkZHJlc3NcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlUmVjb3Jkc1tzaWddID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubW9kdWxlTGlzdENoYW5nZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvbmNoYWluO1xuICAgIH1cblxuICAgIG1vZHVsZUVudHJ5KHBhcmFtczogTW9kdWxlUGFyYW1zLCBiYXNpYzogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHNjYW4gPSB0aGlzLnNjYW5Nb2R1bGUocGFyYW1zLnNpZ25hdHVyZSk7XG4gICAgICAgIGNvbnN0IGdlbkNoZWNrYm94ID0gKGxvYWRpbmc6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIm1vZHVsZS1lbmFibGVcIlxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwiJHtwYXJhbXMuc2lnbmF0dXJlfS1lbmFibGVcIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT1cIiR7cGFyYW1zLnNpZ25hdHVyZX1cIlxuICAgICAgICAgICAgICAgICAgICA/Y2hlY2tlZD0ke1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZVJlY29yZHNbcGFyYW1zLnNpZ25hdHVyZV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPSR7dGhpcy5tb2R1bGVMaXN0Q2hhbmdlZH1cbiAgICAgICAgICAgICAgICAgICAgP2hpZGRlbj0ke2xvYWRpbmd9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIGBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDxsaSBcbiAgICAgICAgICAgICAgICBjbGFzcz0ke2Jhc2ljID8gXCJiYXNlLW1vZHVsZVwiIDogbm90aGluZ31cbiAgICAgICAgICAgICAgICBAY2xpY2s9JHt0aGlzLm9uQ2xpY2tSYWRpb0hhbmRsZXJ9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgIG5hbWU9XCJfc2VsZWN0ZWRNb2R1bGVcIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT1cIiR7cGFyYW1zLnNpZ25hdHVyZX1cIlxuICAgICAgICAgICAgICAgICAgICAubW9kdWxlSW5mbz0ke3BhcmFtc31cbiAgICAgICAgICAgICAgICAgICAgP2NoZWNrZWQ9JHtiYXNpY31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBcbiAgICAgICAgICAgICAgICAgICAgZm9yPVwiJHsoYmFzaWMpID8gbm90aGluZyA6IHBhcmFtcy5zaWduYXR1cmV9LWVuYWJsZVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAke3BhcmFtcy5uYW1lfVxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICAgICAgKGJhc2ljKSA/IFwiXCIgOiAgdW50aWwoXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FuLnRoZW4oKCkgPT4gZ2VuQ2hlY2tib3goZmFsc2UpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvYWRpbmctaWNvbiBzaXplPVwiMS4yZW1cIj48L2xvYWRpbmctaWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke2dlbkNoZWNrYm94KHRydWUpfVxuICAgICAgICAgICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgYDtcblxuICAgIH1cblxuICAgIGFzeW5jIGNvbXBpbGUocm9vdDogYW55LCBzdHJpY3Q6IGJvb2xlYW4gPSB0cnVlKTogXG4gICAgICAgIFByb21pc2U8TW9kdWxlUGFyYW1ldGVyc1tdIHwgW01vZHVsZU9wcywgTW9kdWxlUGFyYW1ldGVyc11bXT4ge1xuICAgICAgICAvLyBSZXRyaWV2ZSBpbmZvIGFib3V0IHRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgZm9ybXMgYW5kXG4gICAgICAgIC8vIGNvbXB1dGUgYSBkZWx0YSB3aXRoIHdoYXQncyBvbmNoYWluXG4gICAgICAgIC8vIFJFTUVNQkVSOiB0aGUgcGF5bG9hZCBpbnNpZGUgb2YgVGF4YWJsZVBheWxvYWQgd2lsbCBiZSBmb3JtYXR0ZWRcbiAgICAgICAgLy8gYXMgW3NpZ25hdHVyZTogYnl0ZXMzMiwgaW5pdERhdGE6IGJ5dGVzXSBvciBcbiAgICAgICAgLy8gW01vZHVsZU9wcywgW3NpZ25hdHVyZTogYnl0ZXMzMiwgaW5pdERhdGE6IGJ5dGVzXV0gZGVwZW5kaW5nIG9uXG4gICAgICAgIC8vIHdoZXRoZXIgdGhlIGNvbnRyYWN0IGlzIG5ldyBvciB3ZSBhcmUgZWRpdGluZyBhbiBhbHJlYWR5IGV4aXN0aW5nXG4gICAgICAgIC8vIGNvbnRyYWN0IChiZWNhdXNlIG5ldyBjb250cmFjdHMgY2FuIG9ubHkgSU5TVEFMTCkuIFdlIHdpbGwgY2hlYXRcbiAgICAgICAgLy8gYSBiaXQgYW5kIGp1c3Qgc3RyaXAgdGhlIG9wZXJhdGlvbiBhd2F5IGF0IHRoZSBlbmQuXG4gICAgICAgIGNvbnN0IHBheWxvYWQ6IFtNb2R1bGVPcHMsIE1vZHVsZVBhcmFtZXRlcnNdW10gPSBbXTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLmdldFNlbGVjdGVkTW9kdWxlcygpOyAvLyBnZXQnZW0gZnJlc2hcbiAgICAgICAgXG4gICAgICAgIC8vIEZpcnN0LCBmaW5kIGFsbCB1bmluc3RhbGxlZCBtb2R1bGVzXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMub25jaGFpbk1vZHVsZXMpLmZvckVhY2goKHYpID0+IHtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZC5nZXQodlswXSkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFNlZW1zIGxpa2UgdGhlIG1vZHVsZSB3YXMgZGVsZXRlZC4gQWRkIHRvIHRoZSBsaXN0XG4gICAgICAgICAgICAgICAgLy8gVW5pbnN0YWxsIG9wZXJhdGlvbnMgc2hvdWxkIG5vdCBhY2NlcHQgaW5pdERhdGEsIHNvXG4gICAgICAgICAgICAgICAgLy8gd2UgbGVhdmUgdGhhdCBlbXB0eVxuICAgICAgICAgICAgICAgIHBheWxvYWQucHVzaChbXG4gICAgICAgICAgICAgICAgICAgIE1vZHVsZU9wcy5VTklOU1RBTEwsIFxuICAgICAgICAgICAgICAgICAgICB7IG1vZHVsZVNpZ25hdHVyZTogdlswXSwgaW5pdFBhcmFtczogXCIweFwiIH1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbGlzdCA9IEFycmF5LmZyb20oc2VsZWN0ZWQuZW50cmllcygpKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBbcywgZl0gPSBsaXN0W2ldO1xuICAgICAgICAgICAgY29uc3QgdXBzdHJlYW1EYXRhID0gdGhpcy5vbmNoYWluTW9kdWxlc1tzXTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmLmNvbXBpbGVNb2R1bGVQYXJhbWV0ZXJzKHJvb3QpO1xuICAgICAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3JzIGluIGZvcm1cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodXBzdHJlYW1EYXRhID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgbW9kdWxlIGhhcyB0byBiZSBhIG5ldyBpbnN0YWxsYXRpb25cbiAgICAgICAgICAgICAgICBwYXlsb2FkLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIFtNb2R1bGVPcHMuSU5TVEFMTCwgZGF0YV1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIWYuYXNVcHN0cmVhbShkYXRhLmluaXRQYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIG1vZHVsZSBwYXJhbXMgaGF2ZSBjaGFuZ2VkLiBBZGQgYXMgUkVJTklUSUFMSVpFXG4gICAgICAgICAgICAgICAgcGF5bG9hZC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICBbTW9kdWxlT3BzLlJFSU5JVElBTElaRSwgZGF0YV1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVE9ETzogaGFuZGxlIFVQR1JBREVcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy5jb250cmFjdCAhPSBudWxsKSA/IFxuICAgICAgICAgICAgcGF5bG9hZCA6IHBheWxvYWQubWFwKChwKSA9PiBwWzFdKVxuICAgICAgICA7IFxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgLy8gTk9URTogdGhlcmUgYXJlIGJldHRlciB3YXlzIHRvIGRvIHRoaXMsIGJ1dCB0aGlzIGlzIHF1aWNrIGFuZFxuICAgICAgICAvLyBzZXJ2aWNlYWJsZVxuICAgICAgICBjb25zdCBiYXNlTW9kdWxlUGFyYW1zOiBNb2R1bGVQYXJhbXMgPSBcbiAgICAgICAgICAgIEJBU0lDX01PRFVMRVMuZmluZChcbiAgICAgICAgICAgICAgICAoeCkgPT4geC5zaWduYXR1cmUgPT0gdGhpcy5iYXNlTW9kdWxlLnNpZ25hdHVyZVxuICAgICAgICAgICAgKSBhcyBNb2R1bGVQYXJhbXM7XG4gICAgICAgIGNvbnN0IG90aGVyTW9kdWxlczogTW9kdWxlUGFyYW1zW10gPVxuICAgICAgICAgICAgUExVR0lOX01PRFVMRVNbdGhpcy5iYXNlTW9kdWxlLnNpZ25hdHVyZV0gfHwgW107XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZU1vZHVsZXMgPSBcbiAgICAgICAgICAgIHJlcGVhdChvdGhlck1vZHVsZXMsICh4KSA9PiB0aGlzLm1vZHVsZUVudHJ5KHgpKTtcblxuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAke3RoaXMubW9kdWxlRW50cnkoYmFzZU1vZHVsZVBhcmFtcywgdHJ1ZSl9XG4gICAgICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICAgICAgKG90aGVyTW9kdWxlcy5sZW5ndGggIT0gMCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlTW9kdWxlcyA6XG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cIm1hcmdpbi10b3A6IDE1cHg7IGNvbG9yOiBncmV5O1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIbW0uLi4gdGhlcmUgc2VlbSB0byBiZSBubyBhdmFpbGFibGUgcGx1Z2luc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdGhpcyBjb250cmFjdCB0eXBlIHlldC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvdWw+XG5cbiAgICAgICAgYDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBMaXRFbGVtZW50LCBodG1sLCBjc3MsIG5vdGhpbmcgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHksIHN0YXRlIH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgTWluTWF4TGVuZ3RoIH0gZnJvbSBcIkBsaW9uL2Zvcm0tY29yZVwiO1xuaW1wb3J0IHsgbG9hZERlZmF1bHRGZWVkYmFja01lc3NhZ2VzIH0gZnJvbSBcIkBsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzXCI7XG5pbXBvcnQgeyBcbiAgICBLYW5hRm9ybSwgS2FuYVNlbGVjdCwgS2FuYUlucHV0LCBSZXF1aXJlZCwgXG4gICAgZm9ybUNzc0NvbW1vbiwgbWF4TGVuZ3RoUHJlcHJvY2Vzc29yIFxufSBmcm9tICcuLi9jb21wb25lbnRzL2Zvcm1zL2Zvcm1zJztcbmltcG9ydCB7IE1vZHVsZUZvcm0sIE1vZHVsZVBhcmFtcyB9IGZyb20gJy4uL2NvbXBvbmVudHMvbW9kdWxlcy9jb21tb25zJztcbmltcG9ydCB7IEthbmFsb2FBUEkgfSBmcm9tICcuLi9hcGkva2FuYWxvYS1ldGhlcnMnO1xuaW1wb3J0IHsgcmVwZWF0IH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvcmVwZWF0LmpzJztcbmltcG9ydCB7IEthbmFsb2FXaW5kb3dsZXQgfSBmcm9tICcuLi9jb21wb25lbnRzL3dpbmRvd2xldCc7XG5pbXBvcnQgeyBCQVNJQ19NT0RVTEVTLCBnZXRBbGxNb2R1bGVzIH0gZnJvbSAnLi4vY29tcG9uZW50cy9tb2R1bGVzL21vZHVsZXMtbGlzdCc7XG5pbXBvcnQgeyBoZWFkZXJTdHlsZXMgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvbW1vbi1zdHlsZXMnO1xuaW1wb3J0IHsgZXZlbnRIYW5kbGVyLCBoYW5kbGVyU2V0dXAgfSBmcm9tICcuLi91dGlscy9ldmVudC1oYW5kbGVyJztcbmltcG9ydCB7IHdoZW4gfSBmcm9tICdsaXQvZGlyZWN0aXZlcy93aGVuLmpzJztcbmltcG9ydCBLYW5hbG9hQWRkcmVzc0Jvb2sgZnJvbSBcImthbmFsb2EtYWRkcmVzcy1ib29rLmpzb25cIjtcbmltcG9ydCB7IFJlZiwgY3JlYXRlUmVmLCByZWYgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9yZWYuanMnO1xuaW1wb3J0IHsgTW9kdWxlT3BzLCBNb2R1bGVQYXJhbWV0ZXJzIH0gZnJvbSAnc3JjL2FwaS9rYW5hbG9hLXByb2plY3QtcmVnaXN0cnknO1xuaW1wb3J0IHsgTW9kdWxlc1dpbmRvd2xldCB9IGZyb20gJy4uL2NvbXBvbmVudHMvbW9kdWxlcy9tb2R1bGVzLXdpbmRvd2xldCc7XG5pbXBvcnQgJy4uL2NvbXBvbmVudHMvbW9kdWxlcy9tb2R1bGVzLXdpbmRvd2xldCc7XG5pbXBvcnQgeyBUYXhhYmxlT3BlcmF0aW9ucyB9IGZyb20gJy4uL2FwaS9wYXltZW50cy1wcm9jZXNzb3InO1xuaW1wb3J0IHsgdW50aWwgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy91bnRpbC5qcyc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAdmFhZGluL3JvdXRlcic7XG5cblxuQGN1c3RvbUVsZW1lbnQoJ2NvbnRyYWN0LXBhZ2UnKVxuZXhwb3J0IGNsYXNzIENvbnRyYWN0UGFnZSBleHRlbmRzIExpdEVsZW1lbnQge1xuXG4gICAgQHByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pXG4gICAgZGVjbGFyZSBwcm9qZWN0TmFtZTogc3RyaW5nO1xuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KVxuICAgIGRlY2xhcmUgcHJvamVjdEFkZHJlc3M6IHN0cmluZztcbiAgICBAcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcgfSlcbiAgICBkZWNsYXJlIGNvbnRyYWN0OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgQHByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pXG4gICAgZGVjbGFyZSBjb250cmFjdE5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuIH0pXG4gICAgZGVjbGFyZSBleHBhbmRlZE1vZGU6IGJvb2xlYW47XG4gICAgXG4gICAgQHN0YXRlKClcbiAgICBkZWNsYXJlIHByaWNlOiBQcm9taXNlPG51bWJlciB8IHVuZGVmaW5lZD47XG4gICAgQHN0YXRlKClcbiAgICBkZWNsYXJlIHNlbGVjdGVkQmFzZU1vZHVsZTogTW9kdWxlUGFyYW1zO1xuICAgIEBzdGF0ZSgpXG4gICAgZGVjbGFyZSBtb2R1bGVzTGlzdDogUmVmPE1vZHVsZXNXaW5kb3dsZXQ+O1xuICAgIEBzdGF0ZSgpXG4gICAgZGVjbGFyZSBmb3JtV2luZG93bGV0OiBSZWY8S2FuYWxvYVdpbmRvd2xldD47XG4gICAgQHN0YXRlKClcbiAgICBkZWNsYXJlIG5ld0NvbnRyYWN0QmFzZVdpbmRvd2xldDogUmVmPENvbnRyYWN0QmFzZVdpbmRvd2xldD47XG5cbiAgICBkZWNsYXJlIGJhc2ljTW9kdWxlczogTW9kdWxlUGFyYW1zW107XG4gICAgZGVjbGFyZSBhbGxNb2R1bGVzOiBNb2R1bGVQYXJhbXNbXTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmJhc2ljTW9kdWxlcyA9IEJBU0lDX01PRFVMRVM7XG4gICAgICAgIHRoaXMuYWxsTW9kdWxlcyA9IGdldEFsbE1vZHVsZXMoKTtcbiAgICAgICAgdGhpcy5tb2R1bGVzTGlzdCA9IGNyZWF0ZVJlZigpO1xuICAgICAgICB0aGlzLmZvcm1XaW5kb3dsZXQgPSBjcmVhdGVSZWYoKTtcbiAgICAgICAgdGhpcy5uZXdDb250cmFjdEJhc2VXaW5kb3dsZXQgPSBjcmVhdGVSZWYoKTtcbiAgICAgICAgdGhpcy5wcmljZSA9IG5ldyBQcm9taXNlKChyZXMpID0+IHJlcyh1bmRlZmluZWQpKTtcbiAgICAgICAgaGFuZGxlclNldHVwKHRoaXMpO1xuICAgICAgICBsb2FkRGVmYXVsdEZlZWRiYWNrTWVzc2FnZXMoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGhlYWRlclN0eWxlcyxcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIGdhcDogMnJlbTtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMXJlbTtcbiAgICAgICAgICAgICAgICAgICAgZmxleDogMSAxIDAlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC5leHBhbmRlZCB7XG4gICAgICAgICAgICAgICAgICAgIGZsZXg6IDEgMSBtYXgtY29udGVudDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBrYW5hLWZvcm0ge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAga2FuYS1mb3JtID4gZm9ybSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGZsZXg6IDAgMSBtYXgtY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwIGF1dG87XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGZsZXggMC4xcztcbiAgICAgICAgICAgICAgICAgICAgZ2FwOiAxcmVtO1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC5jb250cmFjdC1vdmVydmlldy1ncm91cCB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGZsZXgtZmxvdzogY29sdW1uIHdyYXA7XG4gICAgICAgICAgICAgICAgICAgIGdhcDogMXJlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgYXN5bmMgc3VibWl0SGFuZGxlcihldjogRXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmV4cGFuZGVkTW9kZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vZHVsZXM6IE1vZHVsZUZvcm1bXSA9IFxuICAgICAgICAgICAgQXJyYXkuZnJvbShcbiAgICAgICAgICAgICAgICB0aGlzLm1vZHVsZXNMaXN0LnZhbHVlPy5nZXRTZWxlY3RlZE1vZHVsZXMoKS52YWx1ZXMoKSFcbiAgICAgICAgICAgICkgfHwgW107XG5cbiAgICAgICAgaWYgKG1vZHVsZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIC8vIFRlY2huaWNhbGx5IHVucmVhY2hhYmxlIHVuZGVyIHJlZ3VsYXIgY2lyY3Vtc3RhbmNlc1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJIb3cgZGlkIHlvdSBnZXQgaGVyZT9cIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1c2UgPSAodGhpcy5jb250cmFjdCA9PT0gdW5kZWZpbmVkKSA/IFxuICAgICAgICAgICAgICAgIChvcHM6IGFueSkgPT4gKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgS2FuYWxvYUFQSS5wcm9qZWN0UmVnaXN0cnkubmV3Q29udHJhY3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5nZXRSb290KCkubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IHRoaXMucHJvamVjdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW5lc2lzTW9kdWxlczogb3BzIGFzIE1vZHVsZVBhcmFtZXRlcnNbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheW1lbnQ6IEthbmFsb2FBZGRyZXNzQm9vay5LQU5BXG4gICAgICAgICAgICAgICAgICAgIH0pIDpcbiAgICAgICAgICAgICAgICAob3BzOiBhbnkpID0+ICgpID0+IFxuICAgICAgICAgICAgICAgICAgICBLYW5hbG9hQVBJLnByb2plY3RSZWdpc3RyeS5tb2RpZnlDb250cmFjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiB0aGlzLnByb2plY3ROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmNvbnRyYWN0ISxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZU9wZXJhdGlvbnM6IG9wcyBhcyBbTW9kdWxlT3BzLCBNb2R1bGVQYXJhbWV0ZXJzXVtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bWVudDogS2FuYWxvYUFkZHJlc3NCb29rLktBTkFcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jb21waWxlKClcbiAgICAgICAgICAgIC50aGVuKChvcHMpID0+IHsgXG4gICAgICAgICAgICAgICAgaWYgKG9wcyA9PSBudWxsIHx8IG9wcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0aW5nIHRvIGV4ZWN1dGUgYSBuby1vcFwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmdldEludm9pY2Uob3BzISlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGludm9pY2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnZvaWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEthbmFsb2FBUEkucGF5bWVudHNQcm9jZXNzb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcXVlc3RBbGxvd2FuY2UoaW52b2ljZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludm9pY2UgaXMgdW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChhbGxvd2FuY2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGxvd2FuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFsbG93YW5jZSByZXF1ZXN0IHJlamVjdGVkXCIpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlKG9wcylcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IFJvdXRlci5nbyhgL3Byb2plY3RzLyR7dGhpcy5wcm9qZWN0QWRkcmVzc31gKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChjb25zb2xlLmVycm9yKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICB9XG5cbiAgICBAZXZlbnRIYW5kbGVyKFwic3VibWl0LWZvcm1cIiwgeyBjYXB0dXJlOiB0cnVlIH0pXG4gICAgY2FwdHVyZVN1Ym1pdCgpIHtcbiAgICAgICAgdGhpcy5zaGFkb3dSb290IVxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCJrYW5hLWZvcm1cIikhXG4gICAgICAgICAgICAuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJzdWJtaXRcIikpXG4gICAgfVxuICAgIFxuXG4gICAgQGV2ZW50SGFuZGxlcihcImJhc2Utc2VsZWN0ZWRcIiwgeyBvbmNlOiB0cnVlIH0pXG4gICAgZXhwYW5kRm9ybShldjogRXZlbnQpIHtcbiAgICAgICAgdGhpcy5leHBhbmRlZE1vZGUgPSB0cnVlO1xuICAgIH1cblxuICAgIEBldmVudEhhbmRsZXIoXCJiYXNlLXNlbGVjdGVkXCIsIHsgY2FwdHVyZTogdHJ1ZSB9KVxuICAgIGJhc2VUeXBlU2VsZWN0ZWQoZXY6IEN1c3RvbUV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkOiBNb2R1bGVQYXJhbXMgPSBldi5kZXRhaWwuY29udHJhY3RUeXBlO1xuICAgICAgICB0aGlzLnNlbGVjdGVkQmFzZU1vZHVsZSA9IHNlbGVjdGVkO1xuICAgIH1cblxuICAgIEBldmVudEhhbmRsZXIoXCJzZWxlY3RlZC1tb2R1bGVzLXVwZGF0ZWRcIiwgeyBjYXB0dXJlOiB0cnVlIH0pXG4gICAgc2VsZWN0ZWRNb2R1bGVzVXBkYXRlZChldjogQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZWNhbGN1bGF0ZVByaWNlKCksIDApO1xuICAgIH1cblxuICAgIEBldmVudEhhbmRsZXIoXCJwYXlsb2FkLW1vZGlmaWVkXCIsIHsgY2FwdHVyZTogdHJ1ZSB9KVxuICAgIHJlY2FsY3VsYXRlUHJpY2UoZXY/OiBDdXN0b21FdmVudCkge1xuICAgICAgICB0aGlzLnByaWNlID0gdGhpcy5jb21waWxlKGZhbHNlKVxuICAgICAgICAgICAgLnRoZW4oKG9wcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvcHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZ2VuZXJhdGUgcGF5bG9hZFwiKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRJbnZvaWNlKG9wcyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKHByaWNlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHByaWNlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGNhbGN1bGF0ZSBwcmljZVwiKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIocHJpY2UgLyAxMG4gKiogMThuKTtcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0SW52b2ljZShcbiAgICAgICAgb3BlcmF0aW9uczogTW9kdWxlUGFyYW1ldGVyc1tdIHwgW01vZHVsZU9wcywgTW9kdWxlUGFyYW1ldGVyc11bXVxuICAgICkge1xuICAgICAgICByZXR1cm4gYXdhaXQgS2FuYWxvYUFQSS5wYXltZW50c1Byb2Nlc3Nvci5jYWxjdWxhdGVJbnZvaWNlKFxuICAgICAgICAgICAgKHRoaXMuY29udHJhY3QpID8gXG4gICAgICAgICAgICAgICAgVGF4YWJsZU9wZXJhdGlvbnMuRURJVF9DT05UUkFDVCA6IFxuICAgICAgICAgICAgICAgIFRheGFibGVPcGVyYXRpb25zLk5FV19DT05UUkFDVCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMucHJvamVjdEFkZHJlc3MsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogb3BlcmF0aW9ucyxcbiAgICAgICAgICAgICAgICB0b2tlbjogS2FuYWxvYUFQSS5LQU5BX1RPS0VOLFxuICAgICAgICAgICAgICAgIGNsaWVudDogYXdhaXQgKGF3YWl0IEthbmFsb2FBUEkuc2lnbmVyKSEuZ2V0QWRkcmVzcygpIVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldFJvb3QoKSB7XG4gICAgICAgIGNvbnN0IGJhc2UgPSBcbiAgICAgICAgICAgIHRoaXMubmV3Q29udHJhY3RCYXNlV2luZG93bGV0LnZhbHVlPy5mb3JtQmFzZS52YWx1ZT8ubW9kZWxWYWx1ZTtcbiAgICAgICAgdGhpcy5tb2R1bGVzTGlzdC52YWx1ZT8uZ2V0U2VsZWN0ZWRNb2R1bGVzKCkuZm9yRWFjaChcbiAgICAgICAgICAgICh2LCBrKSA9PiBiYXNlW2tdID0gdi5tb2RlbFZhbHVlXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIGJhc2U7XG4gICAgfVxuXG4gICAgYXN5bmMgY29tcGlsZShzdHJpY3Q6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IHJvb3QgPSB0aGlzLmdldFJvb3QoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kdWxlc0xpc3QudmFsdWU/LmNvbXBpbGUocm9vdCwgc3RyaWN0KTsgICAgICAgIFxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgZm9ybXMgPSB0aGlzLm1vZHVsZXNMaXN0LnZhbHVlPy5nZXRTZWxlY3RlZE1vZHVsZXMoKS52YWx1ZXMoKTtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICAke1xuICAgICAgICAgICAgICAgIHdoZW4oXG4gICAgICAgICAgICAgICAgICAgICF0aGlzLmV4cGFuZGVkTW9kZSxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4gaHRtbGBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBpZD1cInBhZ2UtdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXcgY29udHJhY3QgZm9yICR7dGhpcy5wcm9qZWN0TmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICApXG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDxrYW5hLWZvcm0gQHN1Ym1pdD0ke3RoaXMuc3VibWl0SGFuZGxlcn0+XG4gICAgICAgICAgICAgICAgPGZvcm0gXG4gICAgICAgICAgICAgICAgICAgIEBzdWJtaXQ9JHsoZXY6IEV2ZW50KSA9PiBldi5wcmV2ZW50RGVmYXVsdCgpfVxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIiR7dGhpcy5leHBhbmRlZE1vZGUgPyBcImV4cGFuZGVkXCIgOiBcIlwifVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJhY3Qtb3ZlcnZpZXctZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxrYW5hLWZpZWxkc2V0IG5hbWU9XCJiYXNlLW1vZHVsZS1jb25maWdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29udHJhY3QtYmFzZS13aW5kb3dsZXQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7cmVmKHRoaXMubmV3Q29udHJhY3RCYXNlV2luZG93bGV0KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1vZHVsZUxpc3Q9JHt0aGlzLmJhc2ljTW9kdWxlc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJhY3Q9XCIke3RoaXMuY29udHJhY3R9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNlbGVjdGVkQmFzZU1vZHVsZT0ke3RoaXMuc2VsZWN0ZWRCYXNlTW9kdWxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucHJpY2U9JHt0aGlzLnByaWNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmNvbnRyYWN0TmFtZSAhPSBudWxsKSA/IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJhY3ROYW1lIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb250cmFjdC1iYXNlLXdpbmRvd2xldD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwva2FuYS1maWVsZHNldD5cbiAgICAgICAgICAgICAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmV4cGFuZGVkTW9kZSkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtb2R1bGVzLXdpbmRvd2xldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtyZWYodGhpcy5tb2R1bGVzTGlzdCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYmFzZU1vZHVsZT0ke3RoaXMuc2VsZWN0ZWRCYXNlTW9kdWxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJhY3RBZGRyZXNzPVwiJHt0aGlzLmNvbnRyYWN0fVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tb2R1bGVzLXdpbmRvd2xldD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmV4cGFuZGVkTW9kZSkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxrYW5hLXdpbmRvd2xldCAke3JlZih0aGlzLmZvcm1XaW5kb3dsZXQpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuZnJvbShmb3JtcyB8fCBbXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoeCkgPT4gaHRtbGA8ZGl2PiR7eH08L2Rpdj5gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2thbmEtd2luZG93bGV0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L2thbmEtZm9ybT5cbiAgICAgICAgYDtcbiAgICB9XG59XG5cbkBjdXN0b21FbGVtZW50KCdjb250cmFjdC1iYXNlLXdpbmRvd2xldCcpXG5leHBvcnQgY2xhc3MgQ29udHJhY3RCYXNlV2luZG93bGV0IGV4dGVuZHMgS2FuYWxvYVdpbmRvd2xldCB7XG4gICAgc3RhdGljIGZvcm1Bc3NvY2lhdGVkID0gdHJ1ZTtcblxuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KVxuICAgIGRlY2xhcmUgbmFtZTogc3RyaW5nO1xuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KVxuICAgIGRlY2xhcmUgY29udHJhY3Q6IHN0cmluZztcbiAgICBcbiAgICBAc3RhdGUoKVxuICAgIGRlY2xhcmUgcHJpY2U6IFByb21pc2U8bnVtYmVyIHwgdW5kZWZpbmVkPjtcbiAgICBAc3RhdGUoKVxuICAgIGRlY2xhcmUgbW9kdWxlTGlzdDogTW9kdWxlUGFyYW1zW107XG4gICAgQHN0YXRlKClcbiAgICBkZWNsYXJlIHNlbGVjdGVkQmFzZU1vZHVsZTogTW9kdWxlUGFyYW1zO1xuICAgIEBzdGF0ZSgpXG4gICAgZGVjbGFyZSBmb3JtQmFzZTogUmVmPEthbmFGb3JtPjtcbiAgICBcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZvcm1CYXNlID0gY3JlYXRlUmVmKCk7XG4gICAgICAgIHRoaXMucHJpY2UgPSBuZXcgUHJvbWlzZSgocmVzKSA9PiByZXModW5kZWZpbmVkKSk7XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAuLi5zdXBlci5zdHlsZXMsXG4gICAgICAgICAgICAuLi5mb3JtQ3NzQ29tbW9uLFxuICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDtcbiAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDFlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAga2FuYS1pY29uIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjRlbTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsb2FkaW5nLWljb24ge1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgXG4gICAgICAgIF1cbiAgICB9XG5cbiAgICBzZWxlY3RDb250cmFjdFR5cGUoZXY6IEV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gKGV2LnRhcmdldCBhcyBLYW5hU2VsZWN0KS52YWx1ZTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEJhc2VNb2R1bGUgPSBcbiAgICAgICAgICAgIHRoaXMubW9kdWxlTGlzdC5maW5kKChtKSA9PiBtLnNpZ25hdHVyZSA9PSBzZWxlY3RlZCkhO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoXG4gICAgICAgICAgICAgICAgXCJiYXNlLXNlbGVjdGVkXCIsIFxuICAgICAgICAgICAgICAgIHsgXG4gICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsIFxuICAgICAgICAgICAgICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cmFjdFR5cGU6IHRoaXMuc2VsZWN0ZWRCYXNlTW9kdWxlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHByZWxpbWluYXJ5Q29zdCA9IHVudGlsKFxuICAgICAgICAgICAgdGhpcy5wcmljZS50aGVuKChwcmljZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHByaWNlICE9IHVuZGVmaW5lZCkgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYCgke3ByaWNlfSAkS0FOQSlgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbGA8a2FuYS1pY29uPnBlbmRpbmc8L2thbmEtaWNvbj5gXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBodG1sYDxrYW5hLWljb24+ZXJyb3I8L2thbmEtaWNvbj5gXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGh0bWxgPGxvYWRpbmctaWNvbiBzaXplPVwiMS40ZW1cIj48L2xvYWRpbmctaWNvbj5gXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkNvbnRlbnRzID0gXG4gICAgICAgICAgICAodGhpcy5jb250cmFjdCkgPyBcbiAgICAgICAgICAgICAgICBodG1sYFVwZGF0ZSAke3RoaXMubmFtZX1gIDogXCJEZXBsb3kgbmV3IGNvbnRyYWN0XCI7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPGthbmEtZm9ybSAke3JlZih0aGlzLmZvcm1CYXNlKX0+XG4gICAgICAgICAgICAgICAgPGZvcm0+XG4gICAgICAgICAgICAgICAgICAgIDxoMiBpZD1cImNvbnRyYWN0LXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLm5hbWUgPT0gbnVsbCB8fCB0aGlzLm5hbWUgPT0gXCJcIikgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJOZXcgY29udHJhY3RcIiA6IHRoaXMubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA8L2gyPlxuICAgICAgICAgICAgICAgICAgICA8aHIgLz5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlByb2plY3QgaW5mbzwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLXJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGthbmEtaW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cInJvb3QtbmFtZS1pbnB1dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwtc3Itb25seT1cIkNvbnRyYWN0IG5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQ29udHJhY3QgbmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cIm5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWxpZGF0b3JzPVwiJHtbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNaW5NYXhMZW5ndGgoeyBtaW46IDQsIG1heDogMTZ9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlcXVpcmVkKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdfVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnByZXByb2Nlc3Nvcj0ke21heExlbmd0aFByZXByb2Nlc3NvcigxNil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlucHV0PSR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChldjogRXZlbnQpID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gKGV2LnRhcmdldCBhcyBLYW5hSW5wdXQpLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPjwva2FuYS1pbnB1dD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxrYW5hLXNlbGVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLXNyLW9ubHk9XCJDb250cmFjdCB0eXBlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidHlwZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJDb250cmFjdCB0eXBlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInNtYWxsLWlucHV0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudmFsaWRhdG9ycz0ke1sgbmV3IFJlcXVpcmVkKCkgXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPSR7dGhpcy5zZWxlY3RDb250cmFjdFR5cGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1vZGVsVmFsdWU9JHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEJhc2VNb2R1bGU/LnNpZ25hdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD0ke3RoaXMuY29udHJhY3QgfHwgbm90aGluZyB9XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVwidHlwZS1zZWxlY3RcIiBzbG90PVwiaW5wdXRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBoaWRkZW4gc2VsZWN0ZWQgdmFsdWU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWxlY3QgdHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtyZXBlYXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZHVsZUxpc3QsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGs6IGFueSkgPT4gay52YWx1ZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaXRlbTogTW9kdWxlUGFyYW1zKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCIke2l0ZW0ubmFtZX1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCIke2l0ZW0uc2lnbmF0dXJlfVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7aXRlbS5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9rYW5hLXNlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLXJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGthbmEtYnV0dG9uLXN1Ym1pdCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9JHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4gdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdWJtaXQtZm9ybScsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgYnViYmxlczogdHJ1ZSwgY29tcG9zZWQ6IHRydWUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPSR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRCYXNlTW9kdWxlID09IG51bGwgfHwgbm90aGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke2J1dHRvbkNvbnRlbnRzfSR7cHJlbGltaW5hcnlDb3N0fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9rYW5hLWJ1dHRvbi1zdWJtaXQ+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDwva2FuYS1mb3JtPlxuICAgICAgICBgO1xuICAgIH1cbn1cblxuIiwiaW1wb3J0IHsgY3NzLCBodG1sLCBMaXRFbGVtZW50IH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0ICcuLi9jb21wb25lbnRzL2J1dHRvbic7XG5pbXBvcnQgJy4uL2NvbXBvbmVudHMvbG9hZGVyJztcblxuXG5AY3VzdG9tRWxlbWVudCgnaG9tZS1wYWdlJylcbmV4cG9ydCBjbGFzcyBIb21lUGFnZSBleHRlbmRzIExpdEVsZW1lbnQge1xuXG4gICAgQHByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pXG4gICAgZGVjbGFyZSBuYW1lOiBTdHJpbmc7XG4gICAgXG4gICAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IEFibGF0aW9uO1xuICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogOTAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC5mbG9hdGluZyB7ICBcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLW5hbWU6IGZsb2F0aW5nO1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24tZHVyYXRpb246IDNzO1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAzMHB4O1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiA1cHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBrZXlmcmFtZXMgZmxvYXRpbmcge1xuICAgICAgICAgICAgICAgICAgICBmcm9tIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgIDBweCk7IH1cbiAgICAgICAgICAgICAgICAgICAgNjUlICB7IHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIDE1cHgpOyB9XG4gICAgICAgICAgICAgICAgICAgIHRvICAgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtMHB4KTsgfSAgICBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBoMSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiA1LjVyZW07XG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMTUlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGBcbiAgICAgICAgXVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8aW1nIGNsYXNzPVwiZmxvYXRpbmdcIiBzcmM9XCJtZWRpYS9pbWcvaG9tZS1iYW5uZXIucG5nXCI+XG4gICAgICAgICAgICA8aDE+S0FOQUxPQSBORVRXT1JLPC9oMT5cbiAgICAgICAgYDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUm91dGUsIENvbXBvbmVudFJlc3VsdCwgUm91dGUgfSBmcm9tICdAdmFhZGluL3JvdXRlcic7XG4vL2ltcG9ydCAnLi9wYWdlcy9ob21lLXBhZ2UnO1xuaW1wb3J0ICcuL3BhZ2VzL3Byb2ZpbGUtcGFnZSc7XG5pbXBvcnQgJy4vcGFnZXMvcHJvamVjdHMtcGFnZSc7XG5pbXBvcnQgJy4vcGFnZXMvbmV3LXByb2plY3QtcGFnZSc7XG5pbXBvcnQgJy4vcGFnZXMvY29udHJhY3RzLXBhZ2UnO1xuaW1wb3J0ICcuL3BhZ2VzL2NvbnRyYWN0LXBhZ2UnO1xuaW1wb3J0ICcuL3BhZ2VzL2hvbWUtcGFnZSc7XG5pbXBvcnQgeyBLYW5hbG9hQVBJIH0gZnJvbSAnLi9hcGkva2FuYWxvYS1ldGhlcnMnO1xuaW1wb3J0IHsgQ29udHJhY3QsIGV0aGVycyB9IGZyb20gJ2V0aGVycyc7XG5pbXBvcnQgeyBDb250cmFjdHNQYWdlIH0gZnJvbSAnLi9wYWdlcy9jb250cmFjdHMtcGFnZSc7XG5pbXBvcnQgeyBDb250cmFjdFBhZ2UgfSBmcm9tICcuL3BhZ2VzL2NvbnRyYWN0LXBhZ2UnO1xuaW1wb3J0IHsgQkFTSUNfTU9EVUxFUyB9IGZyb20gJy4vY29tcG9uZW50cy9tb2R1bGVzL21vZHVsZXMtbGlzdCc7XG5pbXBvcnQgeyBNb2R1bGVQYXJhbXMgfSBmcm9tICcuL2NvbXBvbmVudHMvbW9kdWxlcy9jb21tb25zJztcbi8vIGltcG9ydCAnLi9wYWdlcy9ub3QtZm91bmQtcGFnZSc7XG5cbmludGVyZmFjZSBSb3V0ZUV4dGVuZGVkIGV4dGVuZHMgQmFzZVJvdXRlIHtcbiAgaWNvbjogU3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgbmF2Um91dGVzOiBSb3V0ZUV4dGVuZGVkW10gPSBbXG4gIHsgXG4gICAgcGF0aDogXCIvcHJvamVjdHNcIiwgXG4gICAgY29tcG9uZW50OiBcInByb2plY3RzLXBhZ2VcIiwgXG4gICAgbmFtZTogXCJNeSBwcm9qZWN0c1wiLFxuICAgIGljb246IFwiYmFja3VwX3RhYmxlXCIsXG4gICAgLy8gY2hpbGRyZW46IFtcblxuICAgIC8vIF1cbiAgfSxcbiAgeyBcbiAgICBwYXRoOiBcIi9uZXctcHJvamVjdFwiLCBcbiAgICBjb21wb25lbnQ6IFwibmV3LXByb2plY3QtcGFnZVwiLCBcbiAgICBuYW1lOiBcIk5ldyBwcm9qZWN0XCIsXG4gICAgaWNvbjogXCJhZGRfYm94XCJcbiAgfVxuXTtcblxuZXhwb3J0IGNvbnN0IHJvdXRlczogUm91dGVbXSA9IFtcbiAgeyBcbiAgICBwYXRoOiAnLycsIFxuICAgIGNvbXBvbmVudDogXCJob21lLXBhZ2VcIiwgXG4gICAgbmFtZTogXCJIT01FXCIgXG4gIH0sXG4gIHsgXG4gICAgcGF0aDogXCIvcHJvZmlsZVwiLFxuICAgIGNvbXBvbmVudDogXCJwcm9maWxlLXBhZ2VcIixcbiAgICBuYW1lOiBcIlByb2ZpbGVcIlxuICB9LFxuICB7IFxuICAgIHBhdGg6IFwiL1BST0pFQ1RfSURfT1JfU0lNSUxBUlwiLFxuICAgIGNvbXBvbmVudDogXCJlZGl0LXByb2plY3QtcGFnZVwiLFxuICAgIG5hbWU6IFwiRWRpdCBQcm9qZWN0XCJcbiAgfSxcbiAgLi4uKG5hdlJvdXRlcyBhcyBSb3V0ZVtdKSxcbiAge1xuICAgIHBhdGg6IFwiL3Byb2plY3RzLzphZGRyZXNzXCIsXG4gICAgY29tcG9uZW50OiBcImNvbnRyYWN0cy1wYWdlXCIsXG4gICAgYWN0aW9uOiBcbiAgICAgIGFzeW5jIChjdHgsIGNtZCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qID0gbmV3IENvbnRyYWN0KFxuICAgICAgICAgIGN0eC5wYXJhbXMuYWRkcmVzcyBhcyBzdHJpbmcsXG4gICAgICAgICAgW1xuICAgICAgICAgICAgICBcImZ1bmN0aW9uIG5hbWUoKSB2aWV3IHJldHVybnMgKHN0cmluZylcIixcbiAgICAgICAgICBdLFxuICAgICAgICAgIEthbmFsb2FBUEkud2FsbGV0XG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgcHJvamVjdE5hbWU6IHN0cmluZyA9IGF3YWl0IHByb2oubmFtZSgpO1xuICAgICAgICBjb25zdCBjb250cmFjdHNQYWdlID0gXG4gICAgICAgICAgKGNtZC5jb21wb25lbnQoXCJjb250cmFjdHMtcGFnZVwiKSBhcyB1bmtub3duIGFzIENvbnRyYWN0c1BhZ2UpO1xuICAgICAgICBjb250cmFjdHNQYWdlLm5hbWUgPSBwcm9qZWN0TmFtZTtcbiAgICAgICAgY29udHJhY3RzUGFnZS5hZGRyZXNzID0gY3R4LnBhcmFtcy5hZGRyZXNzIGFzIHN0cmluZztcbiAgICAgICAgcmV0dXJuIGNvbnRyYWN0c1BhZ2U7XG4gICAgICB9XG4gIH0sXG4gIHtcbiAgICBwYXRoOiBcIi9wcm9qZWN0cy86YWRkcmVzcy9uZXctY29udHJhY3RcIixcbiAgICBjb21wb25lbnQ6IFwiY29udHJhY3QtcGFnZVwiLFxuICAgIGFjdGlvbjogXG4gICAgICBhc3luYyAoY3R4LCBjbWQpID0+IHtcbiAgICAgICAgY29uc3QgcHJvaiA9IG5ldyBDb250cmFjdChcbiAgICAgICAgICBjdHgucGFyYW1zLmFkZHJlc3MgYXMgc3RyaW5nLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgICAgXCJmdW5jdGlvbiBuYW1lKCkgdmlldyByZXR1cm5zIChzdHJpbmcpXCIsXG4gICAgICAgICAgXSxcbiAgICAgICAgICBLYW5hbG9hQVBJLndhbGxldFxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IHByb2plY3ROYW1lOiBzdHJpbmcgPSBhd2FpdCBwcm9qLm5hbWUoKTtcbiAgICAgICAgY29uc3QgY29udHJhY3RQYWdlID0gXG4gICAgICAgICAgKGNtZC5jb21wb25lbnQoXCJjb250cmFjdC1wYWdlXCIpIGFzIHVua25vd24gYXMgQ29udHJhY3RQYWdlKTtcbiAgICAgICAgY29udHJhY3RQYWdlLnByb2plY3ROYW1lID0gYCR7cHJvamVjdE5hbWV9YDtcbiAgICAgICAgY29udHJhY3RQYWdlLnByb2plY3RBZGRyZXNzID0gY3R4LnBhcmFtcy5hZGRyZXNzIGFzIHN0cmluZztcbiAgICAgICAgY29udHJhY3RQYWdlLmV4cGFuZGVkTW9kZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gY29udHJhY3RQYWdlO1xuICAgICAgfVxuICB9LFxuICB7XG4gICAgcGF0aDogXCIvcHJvamVjdHMvOmFkZHJlc3MvOmNvbnRyYWN0XCIsXG4gICAgY29tcG9uZW50OiBcImNvbnRyYWN0LXBhZ2VcIixcbiAgICBhY3Rpb246IFxuICAgICAgYXN5bmMgKGN0eCwgY21kKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb2ogPSBuZXcgQ29udHJhY3QoXG4gICAgICAgICAgY3R4LnBhcmFtcy5hZGRyZXNzIGFzIHN0cmluZyxcbiAgICAgICAgICBbXG4gICAgICAgICAgICAgIFwiZnVuY3Rpb24gbmFtZSgpIHZpZXcgcmV0dXJucyAoc3RyaW5nKVwiLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgS2FuYWxvYUFQSS53YWxsZXRcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBjb250cmFjdCA9IG5ldyBDb250cmFjdChcbiAgICAgICAgICBjdHgucGFyYW1zLmNvbnRyYWN0IGFzIHN0cmluZyxcbiAgICAgICAgICBbXG4gICAgICAgICAgICAgIFwiZnVuY3Rpb24gbmFtZSgpIHZpZXcgcmV0dXJucyAoc3RyaW5nKVwiLFxuICAgICAgICAgICAgICBcImZ1bmN0aW9uIGdldEFjdGl2ZU1vZHVsZShieXRlczMyIHNpZ25hdHVyZSkgdmlldyByZXR1cm5zIChhZGRyZXNzKVwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBLYW5hbG9hQVBJLndhbGxldFxuICAgICAgICApO1xuXG4gICAgICAgIGxldCBiYXNlTW9kdWxlOiBNb2R1bGVQYXJhbXM7XG4gICAgICAgIGZvciAoY29uc3QgYmFzZSBvZiBCQVNJQ19NT0RVTEVTKSB7XG4gICAgICAgICAgY29uc3QgbW9kdWxlOiBzdHJpbmcgPSBhd2FpdCBjb250cmFjdC5nZXRBY3RpdmVNb2R1bGUoYmFzZS5zaWduYXR1cmUpO1xuICAgICAgICAgIGlmIChtb2R1bGUgIT0gZXRoZXJzLlplcm9BZGRyZXNzKSB7XG4gICAgICAgICAgICBiYXNlTW9kdWxlID0gYmFzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByb2plY3ROYW1lOiBzdHJpbmcgPSBhd2FpdCBwcm9qLm5hbWUoKTtcbiAgICAgICAgY29uc3QgY29udHJhY3RQYWdlID0gXG4gICAgICAgICAgKGNtZC5jb21wb25lbnQoXCJjb250cmFjdC1wYWdlXCIpIGFzIHVua25vd24gYXMgQ29udHJhY3RQYWdlKTtcbiAgICAgICAgY29udHJhY3RQYWdlLnNlbGVjdGVkQmFzZU1vZHVsZSA9IGJhc2VNb2R1bGUhOyBcbiAgICAgICAgY29udHJhY3RQYWdlLnByb2plY3ROYW1lID0gYCR7cHJvamVjdE5hbWV9YDtcbiAgICAgICAgY29udHJhY3RQYWdlLnByb2plY3RBZGRyZXNzID0gY3R4LnBhcmFtcy5hZGRyZXNzIGFzIHN0cmluZztcbiAgICAgICAgY29udHJhY3RQYWdlLmNvbnRyYWN0ID0gY3R4LnBhcmFtcy5jb250cmFjdCBhcyBzdHJpbmc7XG4gICAgICAgIGNvbnRyYWN0UGFnZS5jb250cmFjdE5hbWUgPSBhd2FpdCBjb250cmFjdC5uYW1lKCk7XG4gICAgICAgIGNvbnRyYWN0UGFnZS5leHBhbmRlZE1vZGUgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBjb250cmFjdFBhZ2U7XG4gICAgICB9XG4gIH0sXG4gIC8vIHsgcGF0aDogJy90ZWFtJywgY29tcG9uZW50OiAndGVhbS1wYWdlJyB9LFxuICAvLyB7IHBhdGg6ICcvYWJvdXQnLCBjb21wb25lbnQ6ICdhYm91dC1wYWdlJyB9LFxuICAvLyB7IHBhdGg6ICcoLiopJywgY29tcG9uZW50OiAnbm90LWZvdW5kLXBhZ2UnIH0sXG5dOyIsImltcG9ydCB7IExpdEVsZW1lbnQsIGh0bWwsIGNzcyB9IGZyb20gXCJsaXRcIjtcbmltcG9ydCB7IHJlcGVhdCB9IGZyb20gXCJsaXQvZGlyZWN0aXZlcy9yZXBlYXQuanNcIjtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5IH0gZnJvbSBcImxpdC9kZWNvcmF0b3JzLmpzXCJcbmltcG9ydCB7IExpb25CdXR0b24gfSBmcm9tIFwiQGxpb24vYnV0dG9uXCI7XG5pbXBvcnQgeyBuYXZSb3V0ZXMgfSBmcm9tIFwiLi4vcm91dGVzXCI7XG5pbXBvcnQgeyBTaGFkZSwgYmFja2dyb3VuZCB9IGZyb20gJy4vY29tbW9uLXN0eWxlcyc7XG5pbXBvcnQgXCIuL2ljb25cIjtcblxuQGN1c3RvbUVsZW1lbnQoXCJrYW5hLW5hdi1idXR0b25cIilcbmNsYXNzIEthbmFOYXZCdXR0b24gZXh0ZW5kcyBMaW9uQnV0dG9uIHtcbiAgICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIC4uLnN1cGVyLnN0eWxlc1xuICAgICAgICBdO1xuICAgIH1cbn1cblxuQGN1c3RvbUVsZW1lbnQoJ2thbmFsb2EtbmF2aWdhdGlvbicpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLYW5hbG9hTmF2aWdhdGlvbiBleHRlbmRzIExpdEVsZW1lbnQge1xuXG4gICAgQHByb3BlcnR5KHsgcmVmbGVjdDogdHJ1ZSwgdHlwZTogQm9vbGVhbiB9KVxuICAgIGRlY2xhcmUgb3BlbmVkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3BlbmVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdmFyKC0tbmF2LXdpZHRoLWNvbGxhcHNlZCk7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHdpZHRoIDAuM3MgZWFzZS1pbi1vdXQ7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDFyZW07XG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIDpob3N0KFtvcGVuZWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB2YXIoLS1uYXYtd2lkdGgtZXhwYW5kZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBuYXYge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAjbG9nby1jb250YWluZXIge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAycmVtIDAgMi41cmVtIDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgI2xvZ28tY29udGFpbmVyIGltZyB7XG4gICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG5hdiB1bCB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgbmF2IGxpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIG5hdiBsaSBhIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAga2FuYS1pY29uIHtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGAsXG4gICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgICAgICAgICAtLW5hdi13aWR0aC1jb2xsYXBzZWQ6IDkwcHg7XG4gICAgICAgICAgICAgICAgICAgIC0tbmF2LXdpZHRoLWV4cGFuZGVkOiAyMDBweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgLFxuICAgICAgICAgICAgYmFja2dyb3VuZChTaGFkZS5MSUdIVClcbiAgICAgICAgXTtcbiAgICB9XG4gICAgXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDxkaXYgaWQ9XCJsb2dvLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIvXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiL21lZGlhL2ltZy9sb2dvLnBuZ1wiIGFsdD1cIkthbmFsb2EgTmV0d29yayBsb2dvXCIgLz5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxuYXY+XG4gICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICAke3JlcGVhdChuYXZSb3V0ZXMsIChyKSA9PiByLnBhdGgsIChyKSA9PiBodG1sYFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIke3IucGF0aH1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGthbmEtaWNvbj4ke3IuaWNvbn08L2thbmEtaWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtyLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgYCl9XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvbmF2PlxuICAgICAgICBgO1xuICAgIH1cbiAgICBcbn1cbiIsImltcG9ydCB7IExpdEVsZW1lbnQsIGh0bWwsIGNzcyB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IHVudGlsIH0gZnJvbSAnbGl0L2RpcmVjdGl2ZXMvdW50aWwuanMnO1xuaW1wb3J0IHsgS2FuYWxvYUFQSSB9IGZyb20gJy4uL2FwaS9rYW5hbG9hLWV0aGVycyc7XG5pbXBvcnQgeyBnZW5TdmdEYXRhU3JjIH0gZnJvbSAnLi9taW5pZGVudGljb24nO1xuaW1wb3J0IFwiLi9pY29uXCI7XG5pbXBvcnQgJy4vYWRkcmVzcyc7XG5cbkBjdXN0b21FbGVtZW50KCdrYW5hLXdhbGxldC1pbmZvJylcbmV4cG9ydCBjbGFzcyBLYW5hV2FsbGV0SW5mbyBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KVxuICAgIGltYWdlVXJsPzogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIEthbmFsb2FBUEkuc3Vic2NyaWJlKHRoaXMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC53YWxsZXQtaW1nIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogNDBweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDQwcHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICAgICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogOHB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWZvcmVncm91bmQtY29sb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLndhbGxldC1hZGRyZXNzIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcbiAgICAgICAgICAgIH1cblx0XHRcdC5tZW51LWxpbmsge1xuXHRcdFx0XHR0ZXh0LWRlY29yYXRpb246IG5vbmU7XG5cdFx0XHRcdGNvbG9yOiBpbmhlcml0O1xuXHRcdFx0fVxuICAgICAgICAgICAga2FuYS1pY29uIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogOHB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhIHtcbiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgICAgICAgY29sb3I6IGluaGVyaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgICAgIEthbmFsb2FBUEkudW5zdWJzY3JpYmUodGhpcyk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBjb25uZWN0QnV0dG9uID1cbiAgICAgICAgICAgIGh0bWxgXG4gICAgICAgICAgICAgICAgPGthbmEtYnV0dG9uIFxuICAgICAgICAgICAgICAgICAgICBAY2xpY2s9JHsoKSA9PiBLYW5hbG9hQVBJLnJlcXVlc3RTaWduZXIoKX0+XG4gICAgICAgICAgICAgICAgICAgIENvbm5lY3Qgd2FsbGV0XG4gICAgICAgICAgICAgICAgPC9rYW5hLWJ1dHRvbj5cbiAgICAgICAgICAgIGBcbiAgICAgICAgO1xuXG4gICAgICAgIHJldHVybiB1bnRpbChcbiAgICAgICAgICAgIEthbmFsb2FBUEkuc2lnbmVyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHMpID0+IHM/LmdldEFkZHJlc3MoKSlcbiAgICAgICAgICAgICAgICAudGhlbigoYSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWEpIHsgcmV0dXJuIFByb21pc2UucmVqZWN0KCkgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJ3YWxsZXQtaW1nXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPVwiJHt0aGlzLmltYWdlVXJsIGFzIHN0cmluZyB8fCBnZW5TdmdEYXRhU3JjKGEpfVwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD1cIldhbGxldCBpY29uXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxldm0tYWRkcmVzcyBhZGRyZXNzPVwiJHthfVwiIGFicmlkZ2VkPjwvZXZtLWFkZHJlc3M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8a2FuYS1pY29uPjxhIGhyZWY9XCIvcHJvamVjdHNcIj5tZW51PC9hPjwva2FuYS1pY29uPlxuICAgICAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4gY29ubmVjdEJ1dHRvbilcbiAgICAgICAgICAgICwgY29ubmVjdEJ1dHRvbiBcbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBMaXRFbGVtZW50LCBodG1sLCBjc3MgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHkgfSBmcm9tIFwibGl0L2RlY29yYXRvcnMuanNcIjtcbmltcG9ydCB7IFNoYWRlLCBiYWNrZ3JvdW5kIH0gZnJvbSAnLi9jb21tb24tc3R5bGVzJztcbmltcG9ydCB7IEthbmFsb2FPdXRsZXQgfSBmcm9tICcuL2thbmFsb2Etb3V0bGV0JztcbmltcG9ydCB7IGNyZWF0ZVJlZiwgcmVmLCBSZWYgfSBmcm9tICdsaXQvZGlyZWN0aXZlcy9yZWYuanMnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQHZhYWRpbi9yb3V0ZXInO1xuaW1wb3J0IFwiLi93YWxsZXQtaW5mb1wiO1xuaW1wb3J0IHsgS2FuYWxvYUV0aGVycyB9IGZyb20gJ3NyYy9hcGkva2FuYWxvYS1ldGhlcnMnO1xuXG5AY3VzdG9tRWxlbWVudCgna2FuYWxvYS1kaXNwbGF5JylcbmV4cG9ydCBjbGFzcyBLYW5hbG9hRGlzcGxheSBleHRlbmRzIExpdEVsZW1lbnQge1xuXG4gICAgb3V0bGV0OiBSZWY8S2FuYWxvYU91dGxldD4gPSBjcmVhdGVSZWYoKTtcbiAgICBcbiAgICBAcHJvcGVydHkoKVxuICAgIGRlY2xhcmUgcm91dGVyOiBSb3V0ZXIgfCB1bmRlZmluZWQ7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IHN0eWxlcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICA6aG9zdCB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgICAgICAgIGZsZXgtZ3JvdzogMTtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMXJlbTtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwibWVkaWEvaW1nL2Jhbm5lci1iZy5wbmdcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAga2FuYWxvYS1vdXRsZXQge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgICAgICAgICBmbGV4LWdyb3c6IDE7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAycmVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAudG9wLWJhciB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogZW5kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGAsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kKFNoYWRlLkRBUkspXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgdXBkYXRlZCgpIHtcbiAgICAgICAgdGhpcy5yb3V0ZXI/LnNldE91dGxldCh0aGlzLm91dGxldC52YWx1ZSEpXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b3AtYmFyXCI+XG4gICAgICAgICAgICAgICAgPGthbmEtd2FsbGV0LWluZm8+XG4gICAgICAgICAgICAgICAgPC9rYW5hLXdhbGxldC1pbmZvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8a2FuYWxvYS1vdXRsZXQgXG4gICAgICAgICAgICAgICAgJHtyZWYodGhpcy5vdXRsZXQpfT5cbiAgICAgICAgICAgIDwva2FuYWxvYS1vdXRsZXQ+XG4gICAgICAgIGA7XG4gICAgfVxufSIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlLCBTdXBwcmVzc2VkRXJyb3IsIFN5bWJvbCAqL1xuXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcbiAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcbiAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn1cblxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xuICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQ7XG4gIH1cbiAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgIH1cbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xuICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cbiAgdmFyIGtpbmQgPSBjb250ZXh0SW4ua2luZCwga2V5ID0ga2luZCA9PT0gXCJnZXR0ZXJcIiA/IFwiZ2V0XCIgOiBraW5kID09PSBcInNldHRlclwiID8gXCJzZXRcIiA6IFwidmFsdWVcIjtcbiAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XG4gIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xuICB2YXIgXywgZG9uZSA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluKSBjb250ZXh0W3BdID0gcCA9PT0gXCJhY2Nlc3NcIiA/IHt9IDogY29udGV4dEluW3BdO1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XG4gICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xuICAgICAgdmFyIHJlc3VsdCA9ICgwLCBkZWNvcmF0b3JzW2ldKShraW5kID09PSBcImFjY2Vzc29yXCIgPyB7IGdldDogZGVzY3JpcHRvci5nZXQsIHNldDogZGVzY3JpcHRvci5zZXQgfSA6IGRlc2NyaXB0b3Jba2V5XSwgY29udGV4dCk7XG4gICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsIHx8IHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5pbml0KSkgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcbiAgICAgICAgICBpZiAoa2luZCA9PT0gXCJmaWVsZFwiKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XG4gICAgICB9XG4gIH1cbiAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xuICBkb25lID0gdHJ1ZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XG4gIHZhciB1c2VWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xuICB9XG4gIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSBuYW1lID0gbmFtZS5kZXNjcmlwdGlvbiA/IFwiW1wiLmNvbmNhdChuYW1lLmRlc2NyaXB0aW9uLCBcIl1cIikgOiBcIlwiO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XG4gIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICB9XG59XG5cbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICBvW2syXSA9IG1ba107XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XG4gIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcbiAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgIH1cbiAgfTtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcbiAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICBpZiAoIW0pIHJldHVybiBvO1xuICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgdHJ5IHtcbiAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICB9XG4gIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICB9XG4gICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgfVxuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xuICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcbiAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgIHJba10gPSBhW2pdO1xuICByZXR1cm4gcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcbiAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xuICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cbiAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcbiAgdmFyIGksIHA7XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcbiAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XG4gIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gIHJldHVybiBjb29rZWQ7XG59O1xuXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcbiAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xuICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcbiAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlKGVudiwgdmFsdWUsIGFzeW5jKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZC5cIik7XG4gICAgdmFyIGRpc3Bvc2U7XG4gICAgaWYgKGFzeW5jKSB7XG4gICAgICAgIGlmICghU3ltYm9sLmFzeW5jRGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0Rpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmFzeW5jRGlzcG9zZV07XG4gICAgfVxuICAgIGlmIChkaXNwb3NlID09PSB2b2lkIDApIHtcbiAgICAgICAgaWYgKCFTeW1ib2wuZGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5kaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5kaXNwb3NlXTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkaXNwb3NlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qgbm90IGRpc3Bvc2FibGUuXCIpO1xuICAgIGVudi5zdGFjay5wdXNoKHsgdmFsdWU6IHZhbHVlLCBkaXNwb3NlOiBkaXNwb3NlLCBhc3luYzogYXN5bmMgfSk7XG4gIH1cbiAgZWxzZSBpZiAoYXN5bmMpIHtcbiAgICBlbnYuc3RhY2sucHVzaCh7IGFzeW5jOiB0cnVlIH0pO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIF9TdXBwcmVzc2VkRXJyb3IgPSB0eXBlb2YgU3VwcHJlc3NlZEVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBTdXBwcmVzc2VkRXJyb3IgOiBmdW5jdGlvbiAoZXJyb3IsIHN1cHByZXNzZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGUgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlLm5hbWUgPSBcIlN1cHByZXNzZWRFcnJvclwiLCBlLmVycm9yID0gZXJyb3IsIGUuc3VwcHJlc3NlZCA9IHN1cHByZXNzZWQsIGU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19kaXNwb3NlUmVzb3VyY2VzKGVudikge1xuICBmdW5jdGlvbiBmYWlsKGUpIHtcbiAgICBlbnYuZXJyb3IgPSBlbnYuaGFzRXJyb3IgPyBuZXcgX1N1cHByZXNzZWRFcnJvcihlLCBlbnYuZXJyb3IsIFwiQW4gZXJyb3Igd2FzIHN1cHByZXNzZWQgZHVyaW5nIGRpc3Bvc2FsLlwiKSA6IGU7XG4gICAgZW52Lmhhc0Vycm9yID0gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHdoaWxlIChlbnYuc3RhY2subGVuZ3RoKSB7XG4gICAgICB2YXIgcmVjID0gZW52LnN0YWNrLnBvcCgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlYy5kaXNwb3NlICYmIHJlYy5kaXNwb3NlLmNhbGwocmVjLnZhbHVlKTtcbiAgICAgICAgaWYgKHJlYy5hc3luYykgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4obmV4dCwgZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyByZXR1cm4gbmV4dCgpOyB9KTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgZmFpbChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVudi5oYXNFcnJvcikgdGhyb3cgZW52LmVycm9yO1xuICB9XG4gIHJldHVybiBuZXh0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbiAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2UsXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5pbXBvcnQgeyBodG1sLCBMaXRFbGVtZW50IH0gZnJvbSAnbGl0Jztcbi8qKlxuICogVE9ETyhiLzI2NTMzNjkwMik6IGFkZCBkb2NzXG4gKi9cbmV4cG9ydCBjbGFzcyBJY29uIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gaHRtbCBgPHNsb3Q+PC9zbG90PmA7XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICBjb25zdCBhcmlhSGlkZGVuID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gICAgICAgIGlmIChhcmlhSGlkZGVuID09PSAnZmFsc2UnKSB7XG4gICAgICAgICAgICAvLyBBbGxvdyB0aGUgdXNlciB0byBzZXQgYGFyaWEtaGlkZGVuPVwiZmFsc2VcImAgdG8gY3JlYXRlIGFuIGljb24gdGhhdCBpc1xuICAgICAgICAgICAgLy8gYW5ub3VuY2VkIGJ5IHNjcmVlbnJlYWRlcnMuXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBOZWVkZWQgZm9yIFZvaWNlT3Zlciwgd2hpY2ggd2lsbCBjcmVhdGUgYSBcImdyb3VwXCIgaWYgdGhlIGVsZW1lbnQgaXMgYVxuICAgICAgICAvLyBzaWJsaW5nIHRvIG90aGVyIGNvbnRlbnQuXG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWNvbi5qcy5tYXAiLCIvKipcbiAgKiBAbGljZW5zZVxuICAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcbiAgKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcbmV4cG9ydCBjb25zdCBzdHlsZXMgPSBjc3MgYDpob3N0e2ZvbnQtc2l6ZTp2YXIoLS1tZC1pY29uLXNpemUsIDI0cHgpO3dpZHRoOnZhcigtLW1kLWljb24tc2l6ZSwgMjRweCk7aGVpZ2h0OnZhcigtLW1kLWljb24tc2l6ZSwgMjRweCk7Y29sb3I6aW5oZXJpdDtmb250LXZhcmlhdGlvbi1zZXR0aW5nczppbmhlcml0O2ZvbnQtd2VpZ2h0OjQwMDtmb250LWZhbWlseTp2YXIoLS1tZC1pY29uLWZvbnQsIE1hdGVyaWFsIFN5bWJvbHMgT3V0bGluZWQpO2Rpc3BsYXk6aW5saW5lLWZsZXg7Zm9udC1zdHlsZTpub3JtYWw7cGxhY2UtaXRlbXM6Y2VudGVyO3BsYWNlLWNvbnRlbnQ6Y2VudGVyO2xpbmUtaGVpZ2h0OjE7b3ZlcmZsb3c6aGlkZGVuO2xldHRlci1zcGFjaW5nOm5vcm1hbDt0ZXh0LXRyYW5zZm9ybTpub25lO3VzZXItc2VsZWN0Om5vbmU7d2hpdGUtc3BhY2U6bm93cmFwO3dvcmQtd3JhcDpub3JtYWw7ZmxleC1zaHJpbms6MDstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkO3RleHQtcmVuZGVyaW5nOm9wdGltaXplTGVnaWJpbGl0eTstbW96LW9zeC1mb250LXNtb290aGluZzpncmF5c2NhbGV9OjpzbG90dGVkKHN2Zyl7ZmlsbDpjdXJyZW50Q29sb3J9OjpzbG90dGVkKCope2hlaWdodDoxMDAlO3dpZHRoOjEwMCV9LyojIHNvdXJjZU1hcHBpbmdVUkw9aWNvbi1zdHlsZXMuY3NzLm1hcCAqL1xuYDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWljb24tc3R5bGVzLmNzcy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5pbXBvcnQgeyBfX2RlY29yYXRlIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJy4vaW50ZXJuYWwvaWNvbi5qcyc7XG5pbXBvcnQgeyBzdHlsZXMgfSBmcm9tICcuL2ludGVybmFsL2ljb24tc3R5bGVzLmNzcy5qcyc7XG4vKipcbiAqIEBmaW5hbFxuICogQHN1cHByZXNzIHt2aXNpYmlsaXR5fVxuICovXG5leHBvcnQgbGV0IE1kSWNvbiA9IGNsYXNzIE1kSWNvbiBleHRlbmRzIEljb24ge1xufTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuTWRJY29uLnN0eWxlcyA9IFtzdHlsZXNdO1xuTWRJY29uID0gX19kZWNvcmF0ZShbXG4gICAgY3VzdG9tRWxlbWVudCgnbWQtaWNvbicpXG5dLCBNZEljb24pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWNvbi5qcy5tYXAiLCJpbXBvcnQgeyBMaXRFbGVtZW50LCBodG1sLCBjc3MgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHkgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBjb2xvclZhcmlhYmxlcyB9IGZyb20gJy4vY29tcG9uZW50cy9jb21tb24tc3R5bGVzJztcbmltcG9ydCB7IHJvdXRlcyB9IGZyb20gJy4vcm91dGVzJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0B2YWFkaW4vcm91dGVyJztcbmltcG9ydCAnLi9jb21wb25lbnRzL2thbmFsb2EtbmF2aWdhdGlvbic7XG5pbXBvcnQgJy4vY29tcG9uZW50cy9rYW5hbG9hLWRpc3BsYXknO1xuaW1wb3J0IFwiQG1hdGVyaWFsL3dlYi9pY29uL2ljb24uanNcIjtcblxuaW1wb3J0IHJlc2V0ZXIgZnJvbSBcIi4uL2Nzcy9yZXNldGVyLm1vZHVsZS5jc3NcIjtcbmltcG9ydCBtYXRlcmlhbEljb25zIGZyb20gXCIuLi9jc3MvbWF0ZXJpYWwtaWNvbnMubW9kdWxlLmNzc1wiO1xuaW1wb3J0IGFibGF0aW9uIGZyb20gXCIuLi9tZWRpYS9mb250cy9hYmxhdGlvbi5tb2R1bGUuY3NzXCI7XG5cbkBjdXN0b21FbGVtZW50KCdrYW5hbG9hLWFwcCcpXG5leHBvcnQgY2xhc3MgS2FuYWxvYUFwcCBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIHJvdXRlcjogUm91dGVyO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJvdXRlciA9IG5ldyBSb3V0ZXIoKTtcbiAgICB9XG5cblxuICAgIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgY29sb3JWYXJpYWJsZXMsXG4gICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgOmhvc3Qge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIGZpcnN0VXBkYXRlZCgpIHtcbiAgICAgICAgdGhpcy5yb3V0ZXIuc2V0Um91dGVzKHJvdXRlcyk7XG4gICAgfVxuICAgIFxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8a2FuYWxvYS1uYXZpZ2F0aW9uIG9wZW5lZD48L2thbmFsb2EtbmF2aWdhdGlvbj5cbiAgICAgICAgICAgIDxrYW5hbG9hLWRpc3BsYXkgXG4gICAgICAgICAgICAgICAgLnJvdXRlcj0ke3RoaXMucm91dGVyfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9rYW5hbG9hLWRpc3BsYXk+XG4gICAgICAgIGA7XG4gICAgfVxufVxuXG4vLyBGb3JnaXZlIG1lLCBUZXJyeSwgZm9yIEkgaGF2ZSBzaW5uZWRcbigoKSA9PiB7XG4gICAgY29uc3QgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgIHRhZy5pbm5lclRleHQgPSBgXG4gICAgICAgIGh0bWwsIGJvZHkge1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB9XG4gICAgICAgICR7cmVzZXRlcn1cbiAgICAgICAgJHttYXRlcmlhbEljb25zfVxuICAgICAgICAke2FibGF0aW9ufVxuICAgIGA7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0YWcpO1xufSkoKTtcblxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpPy5hcHBlbmRDaGlsZChuZXcgS2FuYWxvYUFwcCgpKTsiXSwibmFtZXMiOlsiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJsb2NhbHMiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJuIiwiZ2V0dGVyIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImYiLCJlIiwiY2h1bmtJZCIsIlByb21pc2UiLCJhbGwiLCJrZXlzIiwicmVkdWNlIiwicHJvbWlzZXMiLCJ1Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImwiLCJkb25lIiwic2NyaXB0IiwibmVlZEF0dGFjaCIsInNjcmlwdHMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicyIsImdldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwic3JjIiwib25TY3JpcHRDb21wbGV0ZSIsInByZXYiLCJldmVudCIsIm9uZXJyb3IiLCJvbmxvYWQiLCJjbGVhclRpbWVvdXQiLCJkb25lRm5zIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZm9yRWFjaCIsImZuIiwic2V0VGltZW91dCIsImJpbmQiLCJ0eXBlIiwidGFyZ2V0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwibG9jYXRpb24iLCJocmVmIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaiIsImluc3RhbGxlZENodW5rRGF0YSIsInByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3IiLCJFcnJvciIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJtZXNzYWdlIiwibmFtZSIsInJlcXVlc3QiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJzb21lIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwiZ2xvYmFsVGhpcyIsIlNoYWRvd1Jvb3QiLCJTaGFkeUNTUyIsIm5hdGl2ZVNoYWRvdyIsIkRvY3VtZW50IiwiQ1NTU3R5bGVTaGVldCIsIldlYWtNYXAiLCJjb25zdHJ1Y3RvciIsInQiLCJfJGNzc1Jlc3VsdCQiLCJjc3NUZXh0Iiwic3R5bGVTaGVldCIsInJlcGxhY2VTeW5jIiwic2V0IiwiUyIsImFkb3B0ZWRTdHlsZVNoZWV0cyIsImxpdE5vbmNlIiwidGV4dENvbnRlbnQiLCJjIiwiY3NzUnVsZXMiLCJpcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5TmFtZXMiLCJoIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0UHJvdG90eXBlT2YiLCJ0cnVzdGVkVHlwZXMiLCJlbXB0eVNjcmlwdCIsInJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCIsInRvQXR0cmlidXRlIiwiQm9vbGVhbiIsIkFycmF5IiwiZnJvbUF0dHJpYnV0ZSIsIk51bWJlciIsInBhcnNlIiwieSIsImF0dHJpYnV0ZSIsImNvbnZlcnRlciIsInJlZmxlY3QiLCJoYXNDaGFuZ2VkIiwibWV0YWRhdGEiLCJsaXRQcm9wZXJ0eU1ldGFkYXRhIiwiSFRNTEVsZW1lbnQiLCJhZGRJbml0aWFsaXplciIsIl8kRWkiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJmaW5hbGl6ZSIsIl8kRWgiLCJjcmVhdGVQcm9wZXJ0eSIsInN0YXRlIiwiZWxlbWVudFByb3BlcnRpZXMiLCJub0FjY2Vzc29yIiwiZ2V0UHJvcGVydHlEZXNjcmlwdG9yIiwicmVxdWVzdFVwZGF0ZSIsImNvbmZpZ3VyYWJsZSIsImdldFByb3BlcnR5T3B0aW9ucyIsIk1hcCIsImZpbmFsaXplZCIsInByb3BlcnRpZXMiLCJfJEV1IiwiZWxlbWVudFN0eWxlcyIsImZpbmFsaXplU3R5bGVzIiwic3R5bGVzIiwiaXNBcnJheSIsIlNldCIsImZsYXQiLCJyZXZlcnNlIiwidW5zaGlmdCIsInRvTG93ZXJDYXNlIiwic3VwZXIiLCJfJEVwIiwiaXNVcGRhdGVQZW5kaW5nIiwiaGFzVXBkYXRlZCIsIl8kRW0iLCJfJEV2IiwiXyRFUyIsImVuYWJsZVVwZGF0aW5nIiwiXyRBTCIsIl8kRV8iLCJhZGRDb250cm9sbGVyIiwiXyRFTyIsImFkZCIsInJlbmRlclJvb3QiLCJpc0Nvbm5lY3RlZCIsImhvc3RDb25uZWN0ZWQiLCJyZW1vdmVDb250cm9sbGVyIiwiZGVsZXRlIiwic2l6ZSIsImNyZWF0ZVJlbmRlclJvb3QiLCJzaGFkb3dSb290IiwiYXR0YWNoU2hhZG93Iiwic2hhZG93Um9vdE9wdGlvbnMiLCJjb25uZWN0ZWRDYWxsYmFjayIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiaG9zdERpc2Nvbm5lY3RlZCIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsIl8kQUsiLCJfJEVDIiwicmVtb3ZlQXR0cmlidXRlIiwiUCIsIl8kRVQiLCJoYXMiLCJfJEVqIiwic2NoZWR1bGVVcGRhdGUiLCJwZXJmb3JtVXBkYXRlIiwid3JhcHBlZCIsInNob3VsZFVwZGF0ZSIsIndpbGxVcGRhdGUiLCJob3N0VXBkYXRlIiwidXBkYXRlIiwiXyRFVSIsIl8kQUUiLCJob3N0VXBkYXRlZCIsImZpcnN0VXBkYXRlZCIsInVwZGF0ZWQiLCJ1cGRhdGVDb21wbGV0ZSIsImdldFVwZGF0ZUNvbXBsZXRlIiwibW9kZSIsIlJlYWN0aXZlRWxlbWVudCIsInJlYWN0aXZlRWxlbWVudFZlcnNpb25zIiwiY3JlYXRlUG9saWN5IiwiY3JlYXRlSFRNTCIsIk1hdGgiLCJyYW5kb20iLCJjcmVhdGVDb21tZW50IiwiaXRlcmF0b3IiLCJ2IiwiXyIsIlJlZ0V4cCIsImciLCIkIiwiXyRsaXRUeXBlJCIsInN0cmluZ3MiLCJ2YWx1ZXMiLCJmb3IiLCJUIiwiQSIsIkUiLCJjcmVhdGVUcmVlV2Fsa2VyIiwiQyIsImxhc3RJbmRleCIsImV4ZWMiLCJ4Iiwic3RhcnRzV2l0aCIsIlYiLCJwYXJ0cyIsImVsIiwiY3VycmVudE5vZGUiLCJmaXJzdENoaWxkIiwicmVwbGFjZVdpdGgiLCJjaGlsZE5vZGVzIiwibmV4dE5vZGUiLCJub2RlVHlwZSIsImhhc0F0dHJpYnV0ZXMiLCJnZXRBdHRyaWJ1dGVOYW1lcyIsImVuZHNXaXRoIiwic3BsaXQiLCJpbmRleCIsImN0b3IiLCJIIiwiSSIsIlIiLCJ0YWdOYW1lIiwiYXBwZW5kIiwiaW5kZXhPZiIsImlubmVySFRNTCIsIk4iLCJfJENvIiwiXyRDbCIsIl8kbGl0RGlyZWN0aXZlJCIsIl8kQU8iLCJfJEFUIiwiXyRBUyIsIl8kQVYiLCJfJEFOIiwiXyRBRCIsIl8kQU0iLCJfJEFVIiwiY3JlYXRpb25TY29wZSIsImltcG9ydE5vZGUiLCJNIiwibmV4dFNpYmxpbmciLCJMIiwiXyRBSSIsIl8kQ3YiLCJfJEFIIiwiXyRBQSIsIl8kQUIiLCJzdGFydE5vZGUiLCJlbmROb2RlIiwiXyRBUiIsImluc2VydEJlZm9yZSIsImNyZWF0ZVRleHROb2RlIiwiXyRBQyIsIl8kQVAiLCJyZW1vdmUiLCJzZXRDb25uZWN0ZWQiLCJlbGVtZW50IiwiZmlsbCIsImFyZ3VtZW50cyIsInRvZ2dsZUF0dHJpYnV0ZSIsImNhcHR1cmUiLCJvbmNlIiwicGFzc2l2ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlRXZlbnQiLCJob3N0IiwieiIsIkQiLCJVIiwiQiIsIkYiLCJaIiwibGl0SHRtbFBvbHlmaWxsU3VwcG9ydCIsImxpdEh0bWxWZXJzaW9ucyIsInJlbmRlck9wdGlvbnMiLCJfJERvIiwicmVuZGVyQmVmb3JlIiwicmVuZGVyIiwiXyRsaXRQYXJ0JCIsIl8kbGl0RWxlbWVudCQiLCJsaXRFbGVtZW50SHlkcmF0ZVN1cHBvcnQiLCJMaXRFbGVtZW50IiwibGl0RWxlbWVudFBvbHlmaWxsU3VwcG9ydCIsImxpdEVsZW1lbnRWZXJzaW9ucyIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwia2luZCIsImluaXQiLCJjb2xvclZhcmlhYmxlcyIsImhlYWRlclN0eWxlcyIsImJhY2tncm91bmQiLCJzaGFkZSIsImZvcmVncm91bmQiLCJhcHBsaWVkQ2xhc3NNaXhpbnMiLCJkZWR1cGVNaXhpbiIsIm1peGluIiwic3VwZXJDbGFzcyIsImtsYXNzIiwid2FzTWl4aW5QcmV2aW91c2x5QXBwbGllZCIsIm1peGVkQ2xhc3MiLCJEaXNhYmxlZE1peGluIiwic3VwZXJjbGFzcyIsImRpc2FibGVkIiwiX3JlcXVlc3RlZFRvQmVEaXNhYmxlZCIsIl9faXNVc2VyU2V0dGluZ0Rpc2FibGVkIiwiX19yZXN0b3JlRGlzYWJsZWRUbyIsIm1ha2VSZXF1ZXN0VG9CZURpc2FibGVkIiwiX19pbnRlcm5hbFNldERpc2FibGVkIiwicmV0cmFjdFJlcXVlc3RUb0JlRGlzYWJsZWQiLCJvbGRWYWx1ZSIsIkRpc2FibGVkV2l0aFRhYkluZGV4TWl4aW4iLCJ0YWJJbmRleCIsIl9faXNVc2VyU2V0dGluZ1RhYkluZGV4IiwiX19yZXN0b3JlVGFiSW5kZXhUbyIsIl9faW50ZXJuYWxTZXRUYWJJbmRleCIsImNoYW5nZWRQcm9wZXJ0aWVzIiwid2luZG93IiwiXyRFbCIsIl8kRWciLCJzcGxpY2UiLCJfJEVrIiwidyIsIl8kQ3AiLCJPIiwiY2hlY2tDaHJvbWUiLCJmbGF2b3IiLCJpc0Nocm9taXVtIiwiY2hyb21lIiwid2luTmF2IiwibmF2aWdhdG9yIiwidmVuZG9yTmFtZSIsInZlbmRvciIsImlzT3BlcmEiLCJpc0lFZWRnZSIsInVzZXJBZ2VudCIsImlzSU9TQ2hyb21lIiwibWF0Y2giLCJicm93c2VyRGV0ZWN0aW9uIiwiaXNLZXlib2FyZENsaWNrRXZlbnQiLCJhcHBWZXJzaW9uIiwiaXNTcGFjZUtleWJvYXJkQ2xpY2tFdmVudCIsIkxpb25CdXR0b24iLCJhY3RpdmUiLCJfYnV0dG9uSWQiLCJzdWJzdHIiLCJ0aGVuIiwiaGFzQXR0cmlidXRlIiwiX19zZXR1cEV2ZW50cyIsIl9fbW91c2Vkb3duSGFuZGxlciIsIl9fa2V5ZG93bkhhbmRsZXIiLCJfX2tleXVwSGFuZGxlciIsIm1vdXNldXBIYW5kbGVyIiwicHJldmVudERlZmF1bHQiLCJrZXl1cEhhbmRsZXIiLCJrZXl1cEV2ZW50IiwiY2xpY2siLCJMaW9uQnV0dG9uUmVzZXQiLCJfX3NldHVwRGVsZWdhdGlvbkluQ29uc3RydWN0b3IiLCJfX3N1Ym1pdEFuZFJlc2V0SGVscGVyQnV0dG9uIiwiX19wcmV2ZW50RXZlbnRMZWFrYWdlIiwiX3NldHVwU3VibWl0QW5kUmVzZXRIZWxwZXJPbkNvbm5lY3RlZCIsIl90ZWFyZG93blN1Ym1pdEFuZFJlc2V0SGVscGVyT25EaXNjb25uZWN0ZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfZm9ybSIsImZvcm0iLCJfX2NsaWNrRGVsZWdhdGlvbkhhbmRsZXIiLCJldiIsImltcGxpY2l0SGVscGVyTWFwIiwiTGlvbkJ1dHRvblN1Ym1pdCIsIl9uYXRpdmVCdXR0b25Ob2RlIiwiaGVscGVyIiwiX19pbXBsaWNpdFN1Ym1pdEhlbHBlckJ1dHRvbiIsImJ1dHRvbkVsIiwic3R5bGUiLCJjcmVhdGVJbXBsaWNpdFN1Ym1pdEhlbHBlckJ1dHRvbiIsIndyYXBwZXJFbCIsImxpb25CdXR0b25zIiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInJlZ2lzdHJhdGlvbkZvckN1ckZvcm0iLCJjb250YWlucyIsImRpc2Nvbm5lY3QiLCJjb21tb25CdXR0b25Dc3MiLCJpbnRlcmFjdGl2ZUNvbXBvbmVudEhpZ2hsaWdodCIsIkthbmFCdXR0b24iLCJmb3JtQXNzb2NpYXRlZCIsIkthbmFCdXR0b25TdWJtaXQiLCJLYW5hSWNvbiIsIkNPTE9SU19OQiIsIkRFRkFVTFRfU0FUVVJBVElPTiIsIkRFRkFVTFRfTElHSFRORVNTIiwiTUFHSUNfTlVNQkVSIiwic2ltcGxlSGFzaCIsInN0ciIsImNoYXIiLCJjaGFyQ29kZUF0IiwibWluaWRlbnRpY29uIiwic2VlZCIsInNhdHVyYXRpb24iLCJsaWdodG5lc3MiLCJoYXNoRm4iLCJodWUiLCJhY2MiLCJNaW5pZGVudGljb24iLCJnZW5TdmdEYXRhU3JjIiwiRXZtQWRkcmVzcyIsImFkZHJlc3MiLCJhYnJpZGdlZCIsImNsaXBib2FyZCIsInRvb2x0aXAiLCJjb3B5VG9DbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJzaG93VG9vbHRpcCIsImNvbnNvbGUiLCJsb2ciLCJlcnIiLCJLYW5hQ2FyZCIsInByb3BzIiwiZGVzY3JpcHRpb24iLCJpbWFnZXMiLCJidXR0b24iLCJsaW5rIiwidGV4dCIsIkxvYWRpbmdJY29uIiwidmVyc2lvbiIsImNoZWNrVHlwZSIsInR5cGVzIiwidHJpbSIsImNvZGUiLCJhcmd1bWVudCIsImFzeW5jIiwicmVzb2x2ZVByb3BlcnRpZXMiLCJyZXN1bHRzIiwiYWNjdW0iLCJkZWZpbmVQcm9wZXJ0aWVzIiwid3JpdGFibGUiLCJVaW50OEFycmF5IiwiSEVYIiwicmVzdWx0IiwidG9KU09OIiwiQmlnSW50Iiwic29ydCIsImlzRXJyb3IiLCJpc0NhbGxFeGNlcHRpb24iLCJtYWtlRXJyb3IiLCJpbmZvIiwic2hvcnRNZXNzYWdlIiwiZGV0YWlscyIsIlR5cGVFcnJvciIsIlJhbmdlRXJyb3IiLCJhc3NpZ24iLCJjaGVjayIsImFzc2VydEFyZ3VtZW50Q291bnQiLCJjb3VudCIsImV4cGVjdGVkQ291bnQiLCJfbm9ybWFsaXplRm9ybXMiLCJub3JtYWxpemUiLCJmcm9tQ2hhckNvZGUiLCJhc3NlcnRQcml2YXRlIiwiZ2l2ZW5HdWFyZCIsImd1YXJkIiwiY2xhc3NOYW1lIiwibWV0aG9kIiwib3BlcmF0aW9uIiwiX2dldEJ5dGVzIiwiY29weSIsIm9mZnNldCIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwiZ2V0Qnl0ZXNDb3B5IiwiSGV4Q2hhcmFjdGVycyIsImhleGxpZnkiLCJieXRlcyIsImRhdGFzIiwiZGF0YUxlbmd0aCIsInN0YXJ0IiwiZW5kIiwiYnVmZmVyIiwiemVyb1BhZCIsImxlZnQiLCJCTl8wIiwiQk5fMSIsIm1heFZhbHVlIiwidG9Ud29zIiwiX3ZhbHVlIiwiX3dpZHRoIiwiZ2V0QmlnSW50Iiwid2lkdGgiLCJnZXROdW1iZXIiLCJsaW1pdCIsImZhdWx0IiwibWFzayIsIl9iaXRzIiwiZ2V0VWludCIsImJpdHMiLCJpc0ludGVnZXIiLCJOaWJibGVzIiwidG9CaWdJbnQiLCJ0b0JlSGV4IiwidG9CZUFycmF5IiwiaGV4IiwidG9RdWFudGl0eSIsImlzQnl0ZXNMaWtlIiwiV29yZFNpemUiLCJQYWRkaW5nIiwicGFzc1Byb3BlcnRpZXMiLCJfZ3VhcmQiLCJ0aHJvd0Vycm9yIiwiUmVzdWx0IiwiYXJncyIsIml0ZW1zIiwibmFtZXMiLCJ3cmFwIiwibmFtZUNvdW50cyIsImZyZWV6ZSIsIlByb3h5IiwicmVjZWl2ZXIiLCJSZWZsZWN0IiwiRnVuY3Rpb24iLCJhcHBseSIsImdldFZhbHVlIiwidG9BcnJheSIsInRvT2JqZWN0IiwiZmlsdGVyIiwiY2FsbGJhY2siLCJ0aGlzQXJnIiwiZnJvbUl0ZW1zIiwiQ29kZXIiLCJsb2NhbE5hbWUiLCJkeW5hbWljIiwiX3Rocm93RXJyb3IiLCJXcml0ZXIiLCJhcHBlbmRXcml0ZXIiLCJ3cml0ZXIiLCJ3cml0ZUJ5dGVzIiwicGFkZGluZ09mZnNldCIsIndyaXRlVmFsdWUiLCJ3cml0ZVVwZGF0YWJsZVZhbHVlIiwiUmVhZGVyIiwiYWxsb3dMb29zZSIsIm1heEluZmxhdGlvbiIsImNvbnN1bWVkIiwiYnl0ZXNSZWFkIiwibG9vc2UiLCJhbGlnbmVkTGVuZ3RoIiwiY2VpbCIsInN1YlJlYWRlciIsInJlYWRlciIsInJlYWRCeXRlcyIsInJlYWRWYWx1ZSIsInJlYWRJbmRleCIsIm51bWJlciIsImlzU2FmZUludGVnZXIiLCJsZW5ndGhzIiwiaW5jbHVkZXMiLCJleGlzdHMiLCJpbnN0YW5jZSIsImNoZWNrRmluaXNoZWQiLCJkZXN0cm95ZWQiLCJmaW5pc2hlZCIsIm91dHB1dCIsIm91dCIsIm1pbiIsIm91dHB1dExlbiIsIlUzMl9NQVNLNjQiLCJfMzJuIiwiZnJvbUJpZyIsImxlIiwibHN0IiwiQWgiLCJVaW50MzJBcnJheSIsIkFsIiwiY3J5cHRvIiwidThhIiwiY3JlYXRlVmlldyIsImFyciIsIkRhdGFWaWV3IiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJyb3RyIiwid29yZCIsInNoaWZ0IiwidG9CeXRlcyIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwidXRmOFRvQnl0ZXMiLCJIYXNoIiwiY2xvbmUiLCJfY2xvbmVJbnRvIiwiaGFzaENvbnMiLCJoYXNoQyIsIm1zZyIsImRpZ2VzdCIsInRtcCIsImJsb2NrTGVuIiwiY3JlYXRlIiwiYnl0ZXNMZW5ndGgiLCJnZXRSYW5kb21WYWx1ZXMiLCJTSEEzX1BJIiwiU0hBM19ST1RMIiwiX1NIQTNfSU9UQSIsIl8wbiIsIl8xbiIsIl8ybiIsIl83biIsIl8yNTZuIiwiXzB4NzFuIiwicm91bmQiLCJTSEEzX0lPVEFfSCIsIlNIQTNfSU9UQV9MIiwicm90bEgiLCJyb3RsQkgiLCJyb3RsU0giLCJyb3RsTCIsInJvdGxCTCIsInJvdGxTTCIsIktlY2NhayIsInN1ZmZpeCIsImVuYWJsZVhPRiIsInJvdW5kcyIsInBvcyIsInBvc091dCIsInN0YXRlMzIiLCJmbG9vciIsImtlY2NhayIsImlkeDEiLCJpZHgwIiwiQjAiLCJCMSIsIlRoIiwiVGwiLCJjdXJIIiwiY3VyTCIsIlBJIiwia2VjY2FrUCIsImxlbiIsInRha2UiLCJmaW5pc2giLCJ3cml0ZUludG8iLCJidWZmZXJPdXQiLCJzdWJhcnJheSIsInhvZkludG8iLCJ4b2YiLCJkaWdlc3RJbnRvIiwiZGVzdHJveSIsInRvIiwia2VjY2FrXzI1NiIsImdlbiIsImxvY2tlZCIsIl9rZWNjYWsyNTYiLCJfX2tlY2NhazI1NiIsIl9kYXRhIiwibG9jayIsInJlZ2lzdGVyIiwiZnVuYyIsIkJOXzM2IiwiZ2V0Q2hlY2tzdW1BZGRyZXNzIiwiY2hhcnMiLCJleHBhbmRlZCIsImhhc2hlZCIsInRvVXBwZXJDYXNlIiwiaWJhbkxvb2t1cCIsInNhZmVEaWdpdHMiLCJCYXNlMzYiLCJibG9jayIsImNoZWNrc3VtIiwiaWJhbkNoZWNrc3VtIiwiZnJvbUJhc2UzNiIsIl9nYXVyZCIsInNpZ25lZCIsIlR5cGVkIiwiX3R5cGVkU3ltYm9sIiwiZ2F1cmQiLCJmb3JtYXQiLCJkZWZhdWx0VmFsdWUiLCJtaW5WYWx1ZSIsImlzQmlnSW50IiwiaXNEYXRhIiwiaXNTdHJpbmciLCJ0dXBsZU5hbWUiLCJhcnJheUxlbmd0aCIsImZyb20iLCJ1aW50OCIsInVpbnQxNiIsInVpbnQyNCIsInVpbnQzMiIsInVpbnQ0MCIsInVpbnQ0OCIsInVpbnQ1NiIsInVpbnQ2NCIsInVpbnQ3MiIsInVpbnQ4MCIsInVpbnQ4OCIsInVpbnQ5NiIsInVpbnQxMDQiLCJ1aW50MTEyIiwidWludDEyMCIsInVpbnQxMjgiLCJ1aW50MTM2IiwidWludDE0NCIsInVpbnQxNTIiLCJ1aW50MTYwIiwidWludDE2OCIsInVpbnQxNzYiLCJ1aW50MTg0IiwidWludDE5MiIsInVpbnQyMDAiLCJ1aW50MjA4IiwidWludDIxNiIsInVpbnQyMjQiLCJ1aW50MjMyIiwidWludDI0MCIsInVpbnQyNDgiLCJ1aW50MjU2IiwidWludCIsImludDgiLCJpbnQxNiIsImludDI0IiwiaW50MzIiLCJpbnQ0MCIsImludDQ4IiwiaW50NTYiLCJpbnQ2NCIsImludDcyIiwiaW50ODAiLCJpbnQ4OCIsImludDk2IiwiaW50MTA0IiwiaW50MTEyIiwiaW50MTIwIiwiaW50MTI4IiwiaW50MTM2IiwiaW50MTQ0IiwiaW50MTUyIiwiaW50MTYwIiwiaW50MTY4IiwiaW50MTc2IiwiaW50MTg0IiwiaW50MTkyIiwiaW50MjAwIiwiaW50MjA4IiwiaW50MjE2IiwiaW50MjI0IiwiaW50MjMyIiwiaW50MjQwIiwiaW50MjQ4IiwiaW50MjU2IiwiaW50IiwiYnl0ZXMxIiwiYnl0ZXMyIiwiYnl0ZXMzIiwiYnl0ZXM0IiwiYnl0ZXM1IiwiYnl0ZXM2IiwiYnl0ZXM3IiwiYnl0ZXM4IiwiYnl0ZXM5IiwiYnl0ZXMxMCIsImJ5dGVzMTEiLCJieXRlczEyIiwiYnl0ZXMxMyIsImJ5dGVzMTQiLCJieXRlczE1IiwiYnl0ZXMxNiIsImJ5dGVzMTciLCJieXRlczE4IiwiYnl0ZXMxOSIsImJ5dGVzMjAiLCJieXRlczIxIiwiYnl0ZXMyMiIsImJ5dGVzMjMiLCJieXRlczI0IiwiYnl0ZXMyNSIsImJ5dGVzMjYiLCJieXRlczI3IiwiYnl0ZXMyOCIsImJ5dGVzMjkiLCJieXRlczMwIiwiYnl0ZXMzMSIsImJ5dGVzMzIiLCJib29sIiwic3RyaW5nIiwiYXJyYXkiLCJ0dXBsZSIsIm92ZXJyaWRlcyIsImlzVHlwZWQiLCJkZXJlZmVyZW5jZSIsIkFkZHJlc3NDb2RlciIsImRlY29kZSIsIkFub255bW91c0NvZGVyIiwiY29kZXIiLCJwYWNrIiwiY29kZXJzIiwiYXJyYXlWYWx1ZXMiLCJ1bmlxdWUiLCJzdGF0aWNXcml0ZXIiLCJkeW5hbWljV3JpdGVyIiwidXBkYXRlRnVuY3MiLCJkeW5hbWljT2Zmc2V0IiwidXBkYXRlRnVuYyIsImJhc2VPZmZzZXQiLCJ1bnBhY2siLCJiYXNlUmVhZGVyIiwib2Zmc2V0UmVhZGVyIiwiYmFzZVR5cGUiLCJBcnJheUNvZGVyIiwiZGVmYXVsdENoaWxkIiwiQm9vbGVhbkNvZGVyIiwiRHluYW1pY0J5dGVzQ29kZXIiLCJCeXRlc0NvZGVyIiwiRml4ZWRCeXRlc0NvZGVyIiwiRW1wdHkiLCJOdWxsQ29kZXIiLCJCTl9NQVhfVUlOVDI1NiIsIk51bWJlckNvZGVyIiwibWF4VWludFZhbHVlIiwiYm91bmRzIiwiZnJvbVR3b3MiLCJpZ25vcmVGdW5jIiwicmVhc29uIiwiYmFkQ29kZXBvaW50IiwiVXRmOEVycm9yRnVuY3MiLCJpZ25vcmUiLCJ0b1V0ZjhCeXRlcyIsImFzc2VydE5vcm1hbGl6ZSIsImMyIiwicGFpciIsInRvVXRmOFN0cmluZyIsIm9uRXJyb3IiLCJfYnl0ZXMiLCJleHRyYUxlbmd0aCIsIm92ZXJsb25nTWFzayIsInJlcyIsIm5leHRDaGFyIiwiZ2V0VXRmOENvZGVQb2ludHMiLCJjb2RlUG9pbnQiLCJTdHJpbmdDb2RlciIsIlR1cGxlQ29kZXIiLCJ1bmlxdWVOYW1lcyIsInNldGlmeSIsIkt3VmlzaWJEZXBsb3kiLCJfa3dWaXNpYiIsIkt3VmlzaWIiLCJfa3dUeXBlcyIsIkt3VHlwZXMiLCJfa3dNb2RpZmllcnMiLCJLd01vZGlmaWVycyIsIktleXdvcmRzIiwiU2ltcGxlVG9rZW5zIiwicmVnZXhXaGl0ZXNwYWNlUHJlZml4IiwicmVnZXhOdW1iZXJQcmVmaXgiLCJyZWdleElkUHJlZml4IiwicmVnZXhJZCIsInJlZ2V4VHlwZSIsIlRva2VuU3RyaW5nIiwidG9rZW5zIiwicmVzZXQiLCJsaW5rQmFjayIsImxpbmtOZXh0IiwicG9wS2V5d29yZCIsImFsbG93ZWQiLCJ0b3AiLCJwZWVrIiwicG9wIiwicG9wVHlwZSIsInBvcFBhcmVuIiwicG9wUGFyYW1zIiwicGVla0tleXdvcmQiLCJwZWVrVHlwZSIsInRva2VuIiwibGV4IiwiYnJhY2tldHMiLCJjb21tYXMiLCJjdXIiLCJkZXB0aCIsImFsbG93U2luZ2xlIiwiaW5jbHVkZWQiLCJjb25zdW1lTmFtZSIsImtleXdvcmQiLCJjb25zdW1lS2V5d29yZHMiLCJrZXl3b3JkcyIsImNvbnN1bWVNdXRhYmlsaXR5IiwibW9kaWZpZXJzIiwiY29uc3VtZVBhcmFtcyIsImFsbG93SW5kZXhlZCIsIlBhcmFtVHlwZSIsImNvbnN1bWVHYXMiLCJjb25zdW1lRW9pIiwicmVnZXhBcnJheVR5cGUiLCJ2ZXJpZnlCYXNpY1R5cGUiLCJpbnRlcm5hbCIsIlBhcmFtVHlwZUludGVybmFsIiwiRXJyb3JGcmFnbWVudEludGVybmFsIiwiRXZlbnRGcmFnbWVudEludGVybmFsIiwiQ29uc3RydWN0b3JGcmFnbWVudEludGVybmFsIiwiRmFsbGJhY2tGcmFnbWVudEludGVybmFsIiwiRnVuY3Rpb25GcmFnbWVudEludGVybmFsIiwiU3RydWN0RnJhZ21lbnRJbnRlcm5hbCIsImluZGV4ZWQiLCJjb21wb25lbnRzIiwiYXJyYXlDaGlsZHJlbiIsImlzVHVwbGUiLCJjb21wIiwiaXNJbmRleGFibGUiLCJ3YWxrIiwicHJvY2VzcyIsIl90aGlzIiwic2V0VmFsdWUiLCJjaGlsZFR5cGUiLCJwYXJhbSIsIndhbGtBc3luYyIsImlzUGFyYW1UeXBlIiwiY29tcHMiLCJicmFja2V0IiwiYXJyYXlNYXRjaCIsIkZyYWdtZW50IiwiaW5wdXRzIiwiQ29uc3RydWN0b3JGcmFnbWVudCIsIkVycm9yRnJhZ21lbnQiLCJFdmVudEZyYWdtZW50IiwiRmFsbGJhY2tGcmFnbWVudCIsIkZ1bmN0aW9uRnJhZ21lbnQiLCJTdHJ1Y3RGcmFnbWVudCIsImlzQ29uc3RydWN0b3IiLCJpc0ZyYWdtZW50IiwiaXNFdmVudCIsImlzRnVuY3Rpb24iLCJpc1N0cnVjdCIsIk5hbWVkRnJhZ21lbnQiLCJqb2luUGFyYW1zIiwicGFyYW1zIiwic2VsZWN0b3IiLCJpbnB1dCIsImFub255bW91cyIsInRvcGljSGFzaCIsImdldFRvcGljSGFzaCIsInBheWFibGUiLCJnYXMiLCJzdGF0ZU11dGFiaWxpdHkiLCJlcnJvck9iaiIsIm11dGFiaWxpdHkiLCJvdXRwdXRzIiwiY29uc3RhbnQiLCJnZXRTZWxlY3RvciIsIlBhbmljUmVhc29ucyIsInBhcmFtVHlwZUJ5dGVzIiwicGFyYW1UeXBlTnVtYmVyIiwiZGVmYXVsdENvZGVyIiwiZGVmYXVsdE1heEluZmxhdGlvbiIsIkFiaUNvZGVyIiwiZ2V0RGVmYXVsdFZhbHVlIiwiX3NldERlZmF1bHRNYXhJbmZsYXRpb24iLCJkZWZhdWx0QWJpQ29kZXIiLCJnZXRCdWlsdGluQ2FsbEV4Y2VwdGlvbiIsImFjdGlvbiIsInR4IiwiYWJpQ29kZXIiLCJyZXZlcnQiLCJzaWduYXR1cmUiLCJ0cmFuc2FjdGlvbiIsImludm9jYXRpb24iLCJpc0FkZHJlc3NhYmxlIiwiY2hlY2tBZGRyZXNzIiwicmVzb2x2ZUFkZHJlc3MiLCJyZXNvbHZlciIsInJlc29sdmVOYW1lIiwiZ2V0QWRkcmVzcyIsInBhZGRpbmciLCJCTl9fMSIsImhleFRydWUiLCJoZXhGYWxzZSIsImRvbWFpbkZpZWxkVHlwZXMiLCJjaGFpbklkIiwidmVyaWZ5aW5nQ29udHJhY3QiLCJzYWx0IiwiZG9tYWluRmllbGROYW1lcyIsImNoZWNrU3RyaW5nIiwiZG9tYWluQ2hlY2tzIiwiZ2V0QmFzZUVuY29kZXIiLCJib3VuZHNVcHBlciIsImJvdW5kc0xvd2VyIiwicGFkT2Zmc2V0IiwiaGV4UGFkUmlnaHQiLCJlbmNvZGVUeXBlIiwiZmllbGRzIiwic3BsaXRBcnJheSIsImJhc2UiLCJwcmVmaXgiLCJUeXBlZERhdGFFbmNvZGVyIiwicHJpbWFyeVR5cGUiLCJfdHlwZXMiLCJsaW5rcyIsInBhcmVudHMiLCJzdWJ0eXBlcyIsImZpZWxkIiwicHJpbWFyeVR5cGVzIiwiY2hlY2tDaXJjdWxhciIsImZvdW5kIiwiY2hpbGQiLCJzdWJ0eXBlIiwic3QiLCJnZXRFbmNvZGVyIiwiZW5jb2RlciIsInN1YkVuY29kZXIiLCJlbmNvZGVkVHlwZSIsImVuY29kZURhdGEiLCJoYXNoU3RydWN0IiwiX3Zpc2l0IiwidmlzaXQiLCJnZXRQcmltYXJ5VHlwZSIsImhhc2hEb21haW4iLCJkb21haW4iLCJkb21haW5GaWVsZHMiLCJFSVA3MTJEb21haW4iLCJyZXNvbHZlTmFtZXMiLCJlbnNDYWNoZSIsImdldFBheWxvYWQiLCJkb21haW5WYWx1ZXMiLCJkb21haW5UeXBlcyIsInR5cGVzV2l0aERvbWFpbiIsImFjY2Vzc1NldGlmeSIsImFkZHIiLCJzdG9yYWdlS2V5cyIsInN0b3JhZ2VLZXkiLCJhY2Nlc3NMaXN0aWZ5IiwibG9jYWxlQ29tcGFyZSIsImNyZWF0ZUdldFVybCIsInJlcSIsIl9zaWduYWwiLCJwcm90b2NvbCIsInNpZ25hbCIsImNyZWRlbnRpYWxzIiwiYWxsb3dJbnNlY3VyZUF1dGhlbnRpY2F0aW9uIiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsImFkZExpc3RlbmVyIiwiYWJvcnQiLCJoZWFkZXJzIiwiSGVhZGVycyIsImJvZHkiLCJyZXNwIiwiZmV0Y2giLCJyZXNwQm9keSIsImFycmF5QnVmZmVyIiwic3RhdHVzQ29kZSIsInN0YXR1cyIsInN0YXR1c01lc3NhZ2UiLCJzdGF0dXNUZXh0IiwiZGVmYXVsdEdldFVybEZ1bmMiLCJyZURhdGEiLCJyZUlwZnMiLCJkYXRhR2F0ZXdheUZ1bmMiLCJGZXRjaFJlc3BvbnNlIiwidGV4dERhdGEiLCJhdG9iIiwiZGVjb2RlQmFzZTY0IiwiRmV0Y2hSZXF1ZXN0IiwiZ2V0SXBmc0dhdGV3YXlGdW5jIiwiYmFzZVVybCIsIkdhdGV3YXlzIiwiZmV0Y2hTaWduYWxzIiwiRmV0Y2hDYW5jZWxTaWduYWwiLCJsaXN0ZW5lciIsImNhbmNlbGxlZCIsImNoZWNrU2lnbmFsIiwiaGFzQm9keSIsImVuY29kZUJhc2U2NCIsImFsbG93R3ppcCIsImdldEhlYWRlciIsInNldEhlYWRlciIsImNsZWFySGVhZGVycyIsIm5leHQiLCJzZXRDcmVkZW50aWFscyIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJwcmVmbGlnaHRGdW5jIiwicHJlZmxpZ2h0IiwicHJvY2Vzc0Z1bmMiLCJyZXRyeUZ1bmMiLCJyZXRyeSIsImdldFVybEZ1bmMiLCJzbG90SW50ZXJ2YWwiLCJtYXhBdHRlbXB0cyIsInNldFRocm90dGxlUGFyYW1zIiwiYXR0ZW1wdCIsImV4cGlyZXMiLCJkZWxheSIsIl9yZXF1ZXN0IiwiX3Jlc3BvbnNlIiwibWFrZVNlcnZlckVycm9yIiwiZ2V0VGltZSIsIndhaXQiLCJzY2hlbWUiLCJyZXNwb25zZSIsInRocm90dGxlIiwiYXNzZXJ0T2siLCJyZWRpcmVjdCIsInJldHJ5QWZ0ZXIiLCJ0cnVuYyIsInBvdyIsInN0YWxsIiwic2VuZCIsImNhbmNlbCIsImN1cnJlbnQiLCJsb2NrQ29uZmlnIiwiZ2V0R2F0ZXdheSIsInJlZ2lzdGVyR2F0ZXdheSIsInJlZ2lzdGVyR2V0VXJsIiwiZ2V0VXJsIiwiY3JlYXRlR2V0VXJsRnVuYyIsImNyZWF0ZURhdGFHYXRld2F5IiwiY3JlYXRlSXBmc0dhdGV3YXlGdW5jIiwiYm9keVRleHQiLCJib2R5SnNvbiIsInRocm93VGhyb3R0bGVFcnJvciIsIm9rIiwicmVxdWVzdFVybCIsInJlc3BvbnNlQm9keSIsInJlc3BvbnNlU3RhdHVzIiwiRGF0ZSIsIlplcm9BZGRyZXNzIiwiTG9nRGVzY3JpcHRpb24iLCJmcmFnbWVudCIsInRvcGljIiwiVHJhbnNhY3Rpb25EZXNjcmlwdGlvbiIsIkVycm9yRGVzY3JpcHRpb24iLCJJbmRleGVkIiwiX2lzSW5kZXhlZCIsImlzSW5kZXhlZCIsIkJ1aWx0aW5FcnJvcnMiLCJJbnRlcmZhY2UiLCJmcmFnbWVudHMiLCJkZXBsb3kiLCJmYWxsYmFjayIsInJlY2VpdmUiLCJhYmkiLCJmcmFncyIsImdldEFiaUNvZGVyIiwiYnVja2V0IiwibWluaW1hbCIsImZvcm1hdEpzb24iLCJmb3JjZVVuaXF1ZSIsIm1hdGNoaW5nIiwibGFzdFZhbHVlIiwidmFsdWVMZW5ndGgiLCJhbGxvd09wdGlvbnMiLCJsYXN0QXJnIiwibWF0Y2hTdHIiLCJnZXRGdW5jdGlvbk5hbWUiLCJoYXNGdW5jdGlvbiIsImdldEZ1bmN0aW9uIiwiZm9yRWFjaEZ1bmN0aW9uIiwiZXZlbnRUb3BpYyIsImdldEV2ZW50TmFtZSIsImhhc0V2ZW50IiwiZ2V0RXZlbnQiLCJmb3JFYWNoRXZlbnQiLCJnZXRFcnJvciIsImZvckVhY2hFcnJvciIsIl9kZWNvZGVQYXJhbXMiLCJfZW5jb2RlUGFyYW1zIiwiZW5jb2RlRGVwbG95IiwiZGVjb2RlRXJyb3JSZXN1bHQiLCJlbmNvZGVFcnJvclJlc3VsdCIsImRlY29kZUZ1bmN0aW9uRGF0YSIsImVuY29kZUZ1bmN0aW9uRGF0YSIsImRlY29kZUZ1bmN0aW9uUmVzdWx0IiwiZWYiLCJwYXJzZWQiLCJwYXJzZVRyYW5zYWN0aW9uIiwiZW5jb2RlRnVuY3Rpb25SZXN1bHQiLCJlbmNvZGVGaWx0ZXJUb3BpY3MiLCJ0b3BpY3MiLCJlbmNvZGVUb3BpYyIsImVuY29kZUV2ZW50TG9nIiwiZGF0YVR5cGVzIiwiZGF0YVZhbHVlcyIsImRlY29kZUV2ZW50TG9nIiwibm9uSW5kZXhlZCIsInJlc3VsdEluZGV4ZWQiLCJyZXN1bHROb25JbmRleGVkIiwibm9uSW5kZXhlZEluZGV4IiwiaW5kZXhlZEluZGV4IiwicGFyc2VDYWxsUmVzdWx0IiwicGFyc2VMb2ciLCJwYXJzZUVycm9yIiwiaGV4RGF0YSIsInRvSnNvbiIsIkZlZURhdGEiLCJnYXNQcmljZSIsIm1heEZlZVBlckdhcyIsIm1heFByaW9yaXR5RmVlUGVyR2FzIiwiX3R5cGUiLCJjb3B5UmVxdWVzdCIsImJpZ0ludEtleXMiLCJudW1iZXJLZXlzIiwiYWNjZXNzTGlzdCIsImJsb2NrVGFnIiwiZW5hYmxlQ2NpcFJlYWQiLCJjdXN0b21EYXRhIiwiQmxvY2siLCJwcm92aWRlciIsInRpbWVzdGFtcCIsInBhcmVudEhhc2giLCJwYXJlbnRCZWFjb25CbG9ja1Jvb3QiLCJub25jZSIsImRpZmZpY3VsdHkiLCJnYXNMaW1pdCIsImdhc1VzZWQiLCJzdGF0ZVJvb3QiLCJyZWNlaXB0c1Jvb3QiLCJibG9iR2FzVXNlZCIsImV4Y2Vzc0Jsb2JHYXMiLCJtaW5lciIsImV4dHJhRGF0YSIsImJhc2VGZWVQZXJHYXMiLCJ0cmFuc2FjdGlvbnMiLCJUcmFuc2FjdGlvblJlc3BvbnNlIiwicHJlZmV0Y2hlZFRyYW5zYWN0aW9ucyIsInR4cyIsImRhdGUiLCJnZXRUcmFuc2FjdGlvbiIsImluZGV4T3JIYXNoIiwiZ2V0UHJlZmV0Y2hlZFRyYW5zYWN0aW9uIiwiaXNNaW5lZCIsImlzTG9uZG9uIiwib3JwaGFuZWRFdmVudCIsIm9ycGhhbiIsIkxvZyIsInRyYW5zYWN0aW9uSGFzaCIsImJsb2NrSGFzaCIsImJsb2NrTnVtYmVyIiwicmVtb3ZlZCIsInRyYW5zYWN0aW9uSW5kZXgiLCJnZXRCbG9jayIsImdldFRyYW5zYWN0aW9uUmVjZWlwdCIsInJlY2VpcHQiLCJyZW1vdmVkRXZlbnQiLCJjcmVhdGVSZW1vdmVkTG9nRmlsdGVyIiwiVHJhbnNhY3Rpb25SZWNlaXB0IiwiY29udHJhY3RBZGRyZXNzIiwibG9nc0Jsb29tIiwiY3VtdWxhdGl2ZUdhc1VzZWQiLCJibG9iR2FzUHJpY2UiLCJyb290IiwibG9ncyIsImVmZmVjdGl2ZUdhc1ByaWNlIiwiZmVlIiwiZ2V0UmVzdWx0IiwiZ2V0VHJhbnNhY3Rpb25SZXN1bHQiLCJjb25maXJtYXRpb25zIiwiZ2V0QmxvY2tOdW1iZXIiLCJjcmVhdGVSZW1vdmVkVHJhbnNhY3Rpb25GaWx0ZXIiLCJyZW9yZGVyZWRFdmVudCIsIm90aGVyIiwiY3JlYXRlUmVvcmRlcmVkVHJhbnNhY3Rpb25GaWx0ZXIiLCJtYXhGZWVQZXJCbG9iR2FzIiwiYmxvYlZlcnNpb25lZEhhc2hlcyIsIl9jb25maXJtcyIsIl90aW1lb3V0IiwiY29uZmlybXMiLCJzdGFydEJsb2NrIiwibmV4dFNjYW4iLCJzdG9wU2Nhbm5pbmciLCJjaGVja1JlcGxhY2VtZW50IiwiZ2V0VHJhbnNhY3Rpb25Db3VudCIsIm1pbmVkIiwicmVwbGFjZW1lbnQiLCJyZXBsYWNlYWJsZVRyYW5zYWN0aW9uIiwiY2hlY2tSZWNlaXB0Iiwid2FpdGVyIiwiY2FuY2VsbGVycyIsInRpbWVyIiwidHhMaXN0ZW5lciIsIm9mZiIsIm9uIiwicmVwbGFjZUxpc3RlbmVyIiwiaXNMZWdhY3kiLCJpc0JlcmxpbiIsImlzQ2FuY3VuIiwiRXZlbnRQYXlsb2FkIiwiZW1pdHRlciIsInJlbW92ZUxpc3RlbmVyIiwiRXZlbnRMb2ciLCJpbnRlcmZhY2UiLCJpZmFjZSIsImV2ZW50TmFtZSIsImV2ZW50U2lnbmF0dXJlIiwiVW5kZWNvZGVkRXZlbnRMb2ciLCJDb250cmFjdFRyYW5zYWN0aW9uUmVjZWlwdCIsIkNvbnRyYWN0VHJhbnNhY3Rpb25SZXNwb25zZSIsIkNvbnRyYWN0VW5rbm93bkV2ZW50UGF5bG9hZCIsImNvbnRyYWN0IiwiQ29udHJhY3RFdmVudFBheWxvYWQiLCJfbG9nIiwiY2FuQ2FsbCIsImNhbkVzdGltYXRlIiwiY2FuUmVzb2x2ZSIsImNhblNlbmQiLCJnZXRSZXNvbHZlciIsIlByZXBhcmVkVG9waWNGaWx0ZXIiLCJydW5uZXIiLCJnZXRSdW5uZXIiLCJyZXNvbHZlZEFyZ3MiLCJnZXRUb3BpY0ZpbHRlciIsImZlYXR1cmUiLCJnZXRQcm92aWRlciIsImNvcHlPdmVycmlkZXMiLCJhcmciLCJfb3ZlcnJpZGVzIiwiYnVpbGRXcmFwcGVkRmFsbGJhY2siLCJwb3B1bGF0ZVRyYW5zYWN0aW9uIiwibm9WYWx1ZSIsIm5vRGF0YSIsInNlbmRUcmFuc2FjdGlvbiIsIl9jb250cmFjdCIsImVzdGltYXRlR2FzIiwic3RhdGljQ2FsbCIsImludGVybmFsVmFsdWVzIiwiZ2V0SW50ZXJuYWwiLCJnZXRTdWJJbmZvIiwidG9waWNIYXNoaWZ5IiwidGFnIiwiaGFzU3ViIiwic3VicyIsImdldFN1YiIsInN1YiIsImZvdW5kRnJhZ21lbnQiLCJfZm91bmRGcmFnbWVudCIsImVtaXQiLCJzdGFydGluZyIsImxpc3RlbmVycyIsInN0b3AiLCJzdGFydGVkIiwibGFzdEVtaXQiLCJwYXlsb2FkRnVuYyIsInJlc3VsdFByb21pc2UiLCJwYXNzQXJncyIsIl9lbWl0IiwiQmFzZUNvbnRyYWN0IiwiZmlsdGVycyIsIl9kZXBsb3lUeCIsImFkZHJQcm9taXNlIiwiZGVwbG95VHgiLCJjb25uZWN0IiwiYXR0YWNoIiwiZ2V0RGVwbG95ZWRDb2RlIiwiZ2V0Q29kZSIsIndhaXRGb3JEZXBsb3ltZW50IiwiZGVwbG95bWVudFRyYW5zYWN0aW9uIiwiY2hlY2tDb2RlIiwiZ2V0RnJhZ21lbnQiLCJfcnVubmVyIiwicmVzb2x2ZUFyZ3MiLCJzdGF0aWNDYWxsUmVzdWx0IiwiX2tleSIsImJ1aWxkV3JhcHBlZE1ldGhvZCIsImJ1aWxkV3JhcHBlZEV2ZW50IiwicXVlcnlUcmFuc2FjdGlvbiIsInF1ZXJ5RmlsdGVyIiwiZnJvbUJsb2NrIiwidG9CbG9jayIsImdldExvZ3MiLCJsaXN0ZW5lckNvdW50IiwidG90YWwiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJidWlsZENsYXNzIiwiQ29udHJhY3QiLCJfQ29udHJhY3RCYXNlIiwiQ09NUFJFU1NFRCQxIiwiRkVOQ0VEIiwiTlNNX01BWCIsInJlYWRfY29tcHJlc3NlZF9wYXlsb2FkIiwicmVhZF9wYXlsb2FkIiwidTE2Iiwic3ltYm9sX2NvdW50Iiwic2tpcCIsInBvc19wYXlsb2FkIiwicmVhZF93aWR0aCIsInJlYWRfYnVmZmVyIiwicmVhZF9iaXQiLCJGVUxMIiwiSEFMRiIsIk1BU0siLCJzeW1ib2xzIiwibG93IiwicmFuZ2UiLCJtaWQiLCJkZWNvZGVfYXJpdGhtZXRpYyIsImxvb2t1cCIsInJldCIsImNhcnJ5IiwidW5zYWZlX2F0b2IiLCJyZWFkX2RlbHRhcyIsInJlYWRfc29ydGVkIiwicmVhZF9zb3J0ZWRfYXJyYXlzIiwicmVhZF9hcnJheV93aGlsZSIsInJlYWRfbWFwcGVkIiwicmVhZF9saW5lYXJfdGFibGUiLCJyZWFkX3JlcGxhY2VtZW50X3RhYmxlIiwicmVhZF90cmFuc3Bvc2VkIiwiZHgiLCJkeSIsInZOIiwiZmxhdE1hcCIsInlzIiwial9keSIsInF1b3RlX2NwIiwiY3AiLCJwYWRTdGFydCIsImhleF9jcCIsInN0cl9mcm9tX2NwcyIsImNwcyIsImZyb21Db2RlUG9pbnQiLCJidWYiLCJjb21wYXJlX2FycmF5cyIsIkNPTVBSRVNTRUQiLCJTMCIsIkwwIiwiVjAiLCJUMCIsIlRfQ09VTlQiLCJOX0NPVU5UIiwiUzEiLCJMMSIsIlYxIiwiVDEiLCJ1bnBhY2tfY2MiLCJwYWNrZWQiLCJ1bnBhY2tfY3AiLCJTSElGVEVEX1JBTksiLCJFWENMVVNJT05TIiwiREVDT01QIiwiUkVDT01QIiwiaXNfaGFuZ3VsIiwiY29tcG9zZV9wYWlyIiwicmVjb21wIiwiZGVjb21wb3NlZCIsImluaXQkMSIsImNoZWNrX29yZGVyIiwiY2MiLCJzX2luZGV4Iiwidl9pbmRleCIsInRfaW5kZXgiLCJtYXBwZWQiLCJwcmV2X2NjIiwibmZkIiwibmZjIiwic3RhY2siLCJwcmV2X2NwIiwiY29tcG9zZWQiLCJjb21wb3NlZF9mcm9tX2RlY29tcG9zZWQiLCJIWVBIRU4iLCJTVE9QX0NIIiwiRkUwRiIsIlVOSVFVRV9QSCIsIkFycmF5X2Zyb20iLCJncm91cF9oYXNfY3AiLCJRIiwiRW1vamkiLCJpc19lbW9qaSIsIk1BUFBFRCIsIklHTk9SRUQiLCJDTSIsIk5TTSIsIkVTQ0FQRSIsIk5GQ19DSEVDSyIsIkdST1VQUyIsIldIT0xFX1ZBTElEIiwiV0hPTEVfTUFQIiwiVkFMSUQiLCJFTU9KSV9MSVNUIiwiRU1PSklfUk9PVCIsInJlYWRfc29ydGVkX2FycmF5IiwicmVhZF9zb3J0ZWRfc2V0Iiwic2V0X2FkZF9tYW55IiwiY2h1bmtzIiwidW5yZXN0cmljdGVkIiwicmVhZF9jaHVua2VkIiwid2hvbGVzIiwicmVjcyIsImdzIiwicmVjIiwiZmluZCIsIkciLCJ1bmlvbiIsImNvbXBsZW1lbnQiLCJtdWx0aSIsImFkZF90b191bmlvbiIsInNvcnRlZCIsImV4cGFuZCIsInNhdmVkIiwiYnIiLCJyZWFkX3RyaWUiLCJub2RlIiwicXVvdGVkX2NwIiwic2hvdWxkX2VzY2FwZSIsImJpZGlfcXEiLCJzYWZlX3N0cl9mcm9tX2NwcyIsIm1heCIsIkluZmluaXR5IiwicXVvdGVyIiwibmYiLCJsYWJlbCIsImNvZGVQb2ludEF0IiwiZXhwbG9kZV9jcCIsImVtb2ppIiwiY29uc3VtZV9lbW9qaV9yZXZlcnNlZCIsImVycm9yX2Rpc2FsbG93ZWQiLCJ0b2tlbnNfZnJvbV9zdHIiLCJ0b2tlbl9jb3VudCIsIm5vcm0iLCJsYXN0SW5kZXhPZiIsImNoZWNrX2xlYWRpbmdfdW5kZXJzY29yZSIsImV2ZXJ5IiwiY2hlY2tfbGFiZWxfZXh0ZW5zaW9uIiwiZXJyb3JfcGxhY2VtZW50IiwibGFzdCIsImNoZWNrX2ZlbmNlZCIsImdyb3VwcyIsImVycm9yX2dyb3VwX21lbWJlciIsImRldGVybWluZV9ncm91cCIsImNoZWNrX2dyb3VwIiwiZ3JvdXAiLCJtYWtlciIsInNoYXJlZCIsIndob2xlIiwiY2hlY2tfd2hvbGUiLCJxdW90ZWQiLCJnZyIsIndoZXJlIiwiZmlsdGVyX2ZlMGYiLCJlYXRlbiIsIlplcm9zIiwiY2hlY2tDb21wb25lbnQiLCJlbnNOYW1lU3BsaXQiLCJmbGF0dGVuIiwiZW5zX25vcm1hbGl6ZSIsImVuc05vcm1hbGl6ZSIsIm5hbWVoYXNoIiwiZG5zRW5jb2RlIiwiX21heExlbmd0aCIsIlplcm9IYXNoIiwiQk5fMiIsIkJOXzI3IiwiQk5fMjgiLCJCTl8zNSIsInRvVWludDI1NiIsIlNpZ25hdHVyZSIsIm5ldHdvcmtWIiwibGVnYWN5Q2hhaW5JZCIsImdldENoYWluSWQiLCJ5UGFyaXR5IiwieVBhcml0eUFuZFMiLCJjb21wYWN0U2VyaWFsaXplZCIsInNlcmlhbGl6ZWQiLCJidiIsImdldENoYWluSWRWIiwiZ2V0Tm9ybWFsaXplZFYiLCJzaWciLCJhc3NlcnRFcnJvciIsIl9yIiwiX3YiLCJTSEEyIiwiaXNMRSIsInZpZXciLCJkYXRhVmlldyIsInJvdW5kQ2xlYW4iLCJzZXRCaWdVaW50NjQiLCJfdTMyX21heCIsIndoIiwid2wiLCJzZXRVaW50MzIiLCJvdmlldyIsIm91dExlbiIsIkNoaSIsIk1haiIsIlNIQTI1Nl9LIiwiSVYiLCJTSEEyNTZfVyIsIlNIQTI1NiIsImdldFVpbnQzMiIsIlcxNSIsIlcyIiwiczAiLCJzMSIsIlQyIiwiaGV4VG9OdW1iZXIiLCJoZXhCeXRlIiwiYnl0ZSIsImlzTmFOIiwibnVtYmVyVG9CeXRlc0xFIiwidGl0bGUiLCJleHBlY3RlZExlbmd0aCIsImFycmF5cyIsInN1bSIsInBhZCIsImJpdE1hc2siLCJ1OG4iLCJ1OGZyIiwiY3JlYXRlSG1hY0RyYmciLCJoYXNoTGVuIiwicUJ5dGVMZW4iLCJobWFjRm4iLCJyZXNlZWQiLCJzbCIsInByZWQiLCJ2YWxpZGF0b3JGbnMiLCJiaWdpbnQiLCJ2YWwiLCJmdW5jdGlvbiIsImJvb2xlYW4iLCJzdHJpbmdPclVpbnQ4QXJyYXkiLCJvYmplY3QiLCJGcCIsImlzVmFsaWQiLCJ2YWxpZGF0ZU9iamVjdCIsInZhbGlkYXRvcnMiLCJvcHRWYWxpZGF0b3JzIiwiY2hlY2tGaWVsZCIsImZpZWxkTmFtZSIsImlzT3B0aW9uYWwiLCJjaGVja1ZhbCIsImVudHJpZXMiLCJfM24iLCJfNG4iLCJfNW4iLCJfOG4iLCJudW0iLCJwb3dlciIsIm1vZHVsbyIsInBvdzIiLCJpbnZlcnQiLCJxIiwiRklFTERfRklFTERTIiwibkxlbmd0aCIsIm5CaXRMZW5ndGgiLCJfbkJpdExlbmd0aCIsIm5CeXRlTGVuZ3RoIiwiZ2V0RmllbGRCeXRlc0xlbmd0aCIsImZpZWxkT3JkZXIiLCJiaXRMZW5ndGgiLCJnZXRNaW5IYXNoTGVuZ3RoIiwiSE1BQyIsImlIYXNoIiwib0hhc2giLCJobWFjIiwidmFsaWRhdGVCYXNpYyIsImN1cnZlIiwiT1JERVIiLCJCWVRFUyIsIkJJVFMiLCJHeCIsIkd5IiwiYnl0ZXNUb051bWJlckJFIiwiYjJuIiwiaGV4VG9CeXRlcyIsImgyYiIsIkRFUiIsIkVyciIsIl9wYXJzZUludCIsInRvU2lnIiwic0J5dGVzIiwickJ5dGVzTGVmdCIsImhleEZyb21TaWciLCJzaGwiLCJyaGwiLCJybCIsIndlaWVyc3RyYXNzIiwiY3VydmVEZWYiLCJDVVJWRSIsIm9wdHMiLCJyYW5kb21CeXRlcyIsImJpdHMyaW50IiwiYml0czJpbnRfbW9kTiIsImxvd1MiLCJ2YWxpZGF0ZU9wdHMiLCJDVVJWRV9PUkRFUiIsImNvbXByZXNzZWRMZW4iLCJ1bmNvbXByZXNzZWRMZW4iLCJtb2ROIiwiaW52TiIsIlByb2plY3RpdmVQb2ludCIsIlBvaW50Iiwibm9ybVByaXZhdGVLZXlUb1NjYWxhciIsIndlaWVyc3RyYXNzRXF1YXRpb24iLCJpc1dpdGhpbkN1cnZlT3JkZXIiLCJhbGxvd2VkUHJpdmF0ZUtleUxlbmd0aHMiLCJ3cmFwUHJpdmF0ZUtleSIsImlzVG9yc2lvbkZyZWUiLCJjbGVhckNvZmFjdG9yIiwiYWxsb3dJbmZpbml0eVBvaW50IiwiZnJvbUJ5dGVzIiwiZW5kbyIsImVxbCIsIlpFUk8iLCJiZXRhIiwic3BsaXRTY2FsYXIiLCJ2YWxpZGF0ZVBvaW50T3B0cyIsIl9jIiwicG9pbnQiLCJfaXNDb21wcmVzc2VkIiwidG9BZmZpbmUiLCJ0YWlsIiwieDIiLCJzcXIiLCJ4MyIsIm11bCIsImFzc2VydEdFIiwicG9pbnRQcmVjb21wdXRlcyIsImFzc2VydFByalBvaW50IiwicHgiLCJweSIsInB6IiwiZnJvbUFmZmluZSIsImlzMCIsIk9ORSIsIm5vcm1hbGl6ZVoiLCJwb2ludHMiLCJ0b0ludiIsImludmVydEJhdGNoIiwiZnJvbUhleCIsImFzc2VydFZhbGlkaXR5IiwiZnJvbVByaXZhdGVLZXkiLCJwcml2YXRlS2V5IiwiQkFTRSIsIm11bHRpcGx5IiwiX3NldFdpbmRvd1NpemUiLCJ3aW5kb3dTaXplIiwiX1dJTkRPV19TSVpFIiwicmlnaHQiLCJoYXNFdmVuWSIsImlzT2RkIiwiZXF1YWxzIiwiWDEiLCJZMSIsIloxIiwiWDIiLCJZMiIsIloyIiwiVTEiLCJVMiIsIm5lZ2F0ZSIsIm5lZyIsImRvdWJsZSIsImIzIiwiWDMiLCJZMyIsIlozIiwidDAiLCJ0MSIsInQyIiwidDMiLCJ0NCIsInQ1Iiwic3VidHJhY3QiLCJ3TkFGIiwid25hZiIsIndOQUZDYWNoZWQiLCJtdWx0aXBseVVuc2FmZSIsInVuc2FmZUxhZGRlciIsImsxbmVnIiwiazEiLCJrMm5lZyIsImsyIiwiazFwIiwiazJwIiwic2NhbGFyIiwiZmFrZSIsImYxcCIsImNvbnN0VGltZU5lZ2F0ZSIsImYycCIsIm11bHRpcGx5QW5kQWRkVW5zYWZlIiwiaXoiLCJpbnYiLCJheCIsImF5IiwienoiLCJjb2ZhY3RvciIsInRvUmF3Qnl0ZXMiLCJpc0NvbXByZXNzZWQiLCJ0b0hleCIsImNvbmRpdGlvbiIsIlciLCJ3aW5kb3dzIiwiZWxtIiwicHJlY29tcHV0ZVdpbmRvdyIsInByZWNvbXB1dGVzIiwibWF4TnVtYmVyIiwic2hpZnRCeSIsIndiaXRzIiwib2Zmc2V0MSIsIm9mZnNldDIiLCJhYnMiLCJjb25kMSIsImNvbmQyIiwicHJlY29tcHV0ZXNNYXAiLCJ0cmFuc2Zvcm0iLCJ3ZWllcnN0cmFzc1BvaW50cyIsImNhdCIsInkyIiwic3FydCIsIm51bVRvTkJ5dGVTdHIiLCJpc0JpZ2dlclRoYW5IYWxmT3JkZXIiLCJzbGNOdW0iLCJyZWNvdmVyeSIsImZyb21Db21wYWN0IiwiZnJvbURFUiIsImFkZFJlY292ZXJ5Qml0IiwicmVjb3ZlclB1YmxpY0tleSIsIm1zZ0hhc2giLCJyYWRqIiwiaXIiLCJ1MSIsInUyIiwiaGFzSGlnaFMiLCJub3JtYWxpemVTIiwidG9ERVJSYXdCeXRlcyIsInRvREVSSGV4IiwidG9Db21wYWN0UmF3Qnl0ZXMiLCJ0b0NvbXBhY3RIZXgiLCJ1dGlscyIsImlzVmFsaWRQcml2YXRlS2V5IiwicmFuZG9tUHJpdmF0ZUtleSIsImZpZWxkTGVuIiwibWluTGVuIiwicmVkdWNlZCIsInByZWNvbXB1dGUiLCJpc1Byb2JQdWIiLCJkZWx0YSIsIk9SREVSX01BU0siLCJpbnQyb2N0ZXRzIiwiZGVmYXVsdFNpZ09wdHMiLCJwcmVoYXNoIiwiZGVmYXVsdFZlck9wdHMiLCJnZXRQdWJsaWNLZXkiLCJnZXRTaGFyZWRTZWNyZXQiLCJwcml2YXRlQSIsInB1YmxpY0IiLCJzaWduIiwicHJpdktleSIsImsyc2lnIiwiZXh0cmFFbnRyb3B5IiwiZW50IiwiaDFpbnQiLCJzZWVkQXJncyIsImtCeXRlcyIsImlrIiwibm9ybVMiLCJwcmVwU2lnIiwiZHJiZyIsInZlcmlmeSIsInB1YmxpY0tleSIsInNnIiwiX3NpZyIsImRlckVycm9yIiwiZ2V0SGFzaCIsIm1zZ3MiLCJzZWNwMjU2azFQIiwic2VjcDI1NmsxTiIsImRpdk5lYXJlc3QiLCJiaXRMZW4iLCJyZWRlZiIsInNxcnRQIiwicDFkaXY0IiwiYzEiLCJuMiIsIm52IiwibGVnZW5kcmVDIiwiUTFkaXYyIiwiZ2UiLCJ0b25lbGxpU2hhbmtzIiwiRnBTcXJ0IiwibGhzIiwicmhzIiwiRnBQb3ciLCJkaXYiLCJzcXJOIiwiYWRkTiIsInN1Yk4iLCJtdWxOIiwibnVtcyIsImxhc3RNdWx0aXBsaWVkIiwiaW52ZXJ0ZWQiLCJyZWR1Y2VSaWdodCIsIkZwSW52ZXJ0QmF0Y2giLCJjbW92IiwiRmllbGQiLCJfNm4iLCJfMTFuIiwiXzIybiIsIl8yM24iLCJfNDRuIiwiXzg4biIsImIyIiwiYjYiLCJiOSIsImIxMSIsImIyMiIsImI0NCIsImI4OCIsImIxNzYiLCJiMjIwIiwiYjIyMyIsInNlY3AyNTZrMSIsImRlZkhhc2giLCJjcmVhdGVDdXJ2ZSIsImExIiwiYjEiLCJhMiIsIlBPV18yXzEyOCIsIlNpZ25pbmdLZXkiLCJjb21wdXRlUHVibGljS2V5IiwiY29tcHJlc3NlZFB1YmxpY0tleSIsImNvbXB1dGVTaGFyZWRTZWNyZXQiLCJwdWJLZXkiLCJjb21wcmVzc2VkIiwicHViIiwic2VjcFNpZyIsImFkZFBvaW50cyIsInAwIiwicDEiLCJwdWIwIiwicHViMSIsImhleGxpZnlCeXRlIiwidW5hcnJheWlmeUludGVnZXIiLCJfZGVjb2RlQ2hpbGRyZW4iLCJjaGlsZE9mZnNldCIsImRlY29kZWQiLCJfZGVjb2RlIiwiY2hlY2tPZmZzZXQiLCJsZW5ndGhMZW5ndGgiLCJkZWNvZGVSbHAiLCJhcnJheWlmeUludGVnZXIiLCJfZW5jb2RlIiwicGF5bG9hZCIsIm5pYmJsZXMiLCJlbmNvZGVSbHAiLCJCTl9NQVhfVUlOVCIsImhhbmRsZUFkZHJlc3MiLCJoYW5kbGVBY2Nlc3NMaXN0IiwiaGFuZGxlTnVtYmVyIiwiaGFuZGxlVWludCIsImZvcm1hdE51bWJlciIsImZvcm1hdEFjY2Vzc0xpc3QiLCJmb3JtYXRIYXNoZXMiLCJfc2VyaWFsaXplTGVnYWN5IiwibGVnYWN5IiwiX3BhcnNlRWlwU2lnbmF0dXJlIiwiX3NlcmlhbGl6ZUVpcDE1NTkiLCJfc2VyaWFsaXplRWlwMjkzMCIsIl9zZXJpYWxpemVFaXA0ODQ0IiwiVHJhbnNhY3Rpb24iLCJ0eXBlTmFtZSIsInVuc2lnbmVkSGFzaCIsInVuc2lnbmVkU2VyaWFsaXplZCIsInB1YmtleSIsImNvbXB1dGVBZGRyZXNzIiwiZnJvbVB1YmxpY0tleSIsImlzU2lnbmVkIiwiaW5mZXJUeXBlIiwiaW5mZXJUeXBlcyIsImhhc0dhc1ByaWNlIiwiaGFzRmVlIiwiaGFzQWNjZXNzTGlzdCIsImhhc0Jsb2IiLCJfcGFyc2VMZWdhY3kiLCJfcGFyc2VFaXAyOTMwIiwiX3BhcnNlRWlwMTU1OSIsIl9wYXJzZUVpcDQ4NDQiLCJBbHBoYWJldCIsIkJOXzU4IiwiZ2V0SXBmc0xpbmsiLCJNdWx0aWNvaW5Qcm92aWRlclBsdWdpbiIsInByb2l2ZGVyIiwic3VwcG9ydHNDb2luVHlwZSIsImNvaW5UeXBlIiwiZW5jb2RlQWRkcmVzcyIsImRlY29kZUFkZHJlc3MiLCJtYXRjaGVySXBmcyIsIm1hdGNoZXJzIiwiRW5zUmVzb2x2ZXIiLCJzdXBwb3J0c1dpbGRjYXJkIiwic3VwcG9ydHNJbnRlcmZhY2UiLCJmdW5jTmFtZSIsImV0aENvaW5UeXBlIiwiY29pblBsdWdpbiIsInBsdWdpbiIsInBsdWdpbnMiLCJnZXRUZXh0IiwiZ2V0Q29udGVudEhhc2giLCJpcGZzIiwiZW5jb2RlQmFzZTU4Iiwic3dhcm0iLCJnZXRBdmF0YXIiLCJfZ2V0QXZhdGFyIiwibGlua2FnZSIsImF2YXRhciIsIm93bmVyIiwidG9rZW5JZCIsInRva2VuT3duZXIiLCJvd25lck9mIiwiYmFsYW5jZSIsImJhbGFuY2VPZiIsIm1ldGFkYXRhVXJsIiwiaW1hZ2VVcmwiLCJpbWFnZSIsImdldEVuc0FkZHJlc3MiLCJuZXR3b3JrIiwiZ2V0TmV0d29yayIsImVuc1BsdWdpbiIsImdldFBsdWdpbiIsImVuc0FkZHIiLCJmcm9tTmFtZSIsImN1cnJlbnROYW1lIiwiYWxsb3dOdWxsIiwibnVsbFZhbHVlIiwiYXJyYXlPZiIsImFsdE5hbWVzIiwic3JjS2V5IiwiYWx0S2V5IiwiZm9ybWF0RGF0YSIsImZvcm1hdEhhc2giLCJfZm9ybWF0TG9nIiwiX2Zvcm1hdEJsb2NrIiwiX2Zvcm1hdFJlY2VpcHRMb2ciLCJfZm9ybWF0VHJhbnNhY3Rpb25SZWNlaXB0IiwiZm9ybWF0VHJhbnNhY3Rpb25SZXNwb25zZSIsImNyZWF0ZXMiLCJub25jZUhleCIsImdldENyZWF0ZUFkZHJlc3MiLCJOZXR3b3JrUGx1Z2luIiwiR2FzQ29zdFBsdWdpbiIsImVmZmVjdGl2ZUJsb2NrIiwidHhCYXNlIiwidHhDcmVhdGUiLCJ0eERhdGFaZXJvIiwidHhEYXRhTm9uemVybyIsInR4QWNjZXNzTGlzdFN0b3JhZ2VLZXkiLCJ0eEFjY2Vzc0xpc3RBZGRyZXNzIiwiY29zdHMiLCJudWxsaXNoIiwiRW5zUGx1Z2luIiwidGFyZ2V0TmV0d29yayIsIkZldGNoVXJsRmVlRGF0YU5ldHdvcmtQbHVnaW4iLCJOZXR3b3JrcyIsIk5ldHdvcmsiLCJtYXRjaGVzIiwiYXR0YWNoUGx1Z2luIiwiZ2V0UGx1Z2lucyIsImJhc2VuYW1lIiwiY29tcHV0ZUludHJpbnNpY0dhcyIsInJlZ2lzdGVyRXRoIiwiZW5zTmV0d29yayIsImluamVjdGVkIiwiZ2V0R2FzU3RhdGlvblBsdWdpbiIsImluamVjdENvbW1vbk5ldHdvcmtzIiwibmV0d29ya0Z1bmMiLCJjdXN0b20iLCJlbnNBZGRyZXNzIiwibmFtZU9yQ2hhaW5JZCIsImV4aXN0aW5nIiwicGFyc2VVbml0cyIsImRlY2ltYWxzIiwiZnJhYyIsImZldGNoRmVlRGF0YSIsIl9mZWVEYXRhIiwic3RhbmRhcmQiLCJtYXhGZWUiLCJtYXhQcmlvcml0eUZlZSIsIlBvbGxpbmdCbG9ja1N1YnNjcmliZXIiLCJwb2xsaW5nSW50ZXJ2YWwiLCJfc2V0VGltZW91dCIsIl9jbGVhclRpbWVvdXQiLCJwYXVzZSIsImRyb3BXaGlsZVBhdXNlZCIsInJlc3VtZSIsIk9uQmxvY2tTdWJzY3JpYmVyIiwiX3BvbGwiLCJQb2xsaW5nQmxvY2tUYWdTdWJzY3JpYmVyIiwiUG9sbGluZ09ycGhhblN1YnNjcmliZXIiLCJQb2xsaW5nVHJhbnNhY3Rpb25TdWJzY3JpYmVyIiwiUG9sbGluZ0V2ZW50U3Vic2NyaWJlciIsImlzUHJvbWlzZSIsImdldFRhZyIsIlVubWFuYWdlZFN1YnNjcmliZXIiLCJjb25jaXNpZnkiLCJnZXRTdWJzY3JpcHRpb24iLCJfZXZlbnQiLCJhZGRyZXNzZXMiLCJhZGRBZGRyZXNzIiwiZGVmYXVsdE9wdGlvbnMiLCJjYWNoZVRpbWVvdXQiLCJBYnN0cmFjdFByb3ZpZGVyIiwiX25ldHdvcmsiLCJkaXNhYmxlQ2NpcFJlYWQiLCJfcGVyZm9ybSIsInBlcmZvcm0iLCJjY2lwUmVhZEZldGNoIiwiY2FsbGRhdGEiLCJ1cmxzIiwic2VuZGVyIiwiZXJyb3JNZXNzYWdlcyIsImVycm9yTWVzc2FnZSIsIl93cmFwQmxvY2siLCJmb3JtYXRCbG9jayIsIl93cmFwTG9nIiwiZm9ybWF0TG9nIiwiX3dyYXBUcmFuc2FjdGlvblJlY2VpcHQiLCJmb3JtYXRUcmFuc2FjdGlvblJlY2VpcHQiLCJfd3JhcFRyYW5zYWN0aW9uUmVzcG9uc2UiLCJfZGV0ZWN0TmV0d29yayIsIl9nZXRBZGRyZXNzIiwiX2dldEJsb2NrVGFnIiwiX2dldEZpbHRlciIsIl9hZGRyZXNzIiwiX2dldFRyYW5zYWN0aW9uUmVxdWVzdCIsImRldGVjdE5ldHdvcmsiLCJuZXR3b3JrUHJvbWlzZSIsImV4cGVjdGVkIiwiYWN0dWFsIiwiZ2V0RmVlRGF0YSIsImdldEZlZURhdGFGdW5jIiwiX2Jsb2NrIiwicHJpb3JpdHlGZWUiLCJmZWVEYXRhIiwiX3R4IiwidHhTZW5kZXIiLCJjY2lwQXJncyIsImVycm9yQXJncyIsInplcm9zIiwidXJsc09mZnNldCIsInVybHNMZW5ndGgiLCJ1cmxzRGF0YSIsIl9wYXJzZVN0cmluZyIsIl9wYXJzZUJ5dGVzIiwicGFyc2VPZmZjaGFpbkxvb2t1cCIsImNjaXBSZXN1bHQiLCJlbmNvZGVCeXRlcyIsIl9ibG9ja1RhZyIsImdldEJhbGFuY2UiLCJnZXRTdG9yYWdlIiwiX3Bvc2l0aW9uIiwicG9zaXRpb24iLCJicm9hZGNhc3RUcmFuc2FjdGlvbiIsInNpZ25lZFR4Iiwic2lnbmVkVHJhbnNhY3Rpb24iLCJpbmNsdWRlVHJhbnNhY3Rpb25zIiwicHJlZmV0Y2hUeHMiLCJfZmlsdGVyIiwiX2dldFByb3ZpZGVyIiwibG9va3VwQWRkcmVzcyIsImVuc0NvbnRyYWN0IiwicmVzb2x2ZXJDb250cmFjdCIsIndhaXRGb3JUcmFuc2FjdGlvbiIsIndhaXRGb3JCbG9jayIsInRpbWVySWQiLCJfZnVuYyIsInBhdXNlZCIsInRpbWUiLCJfZm9yRWFjaFN1YnNjcmliZXIiLCJzdWJzY3JpYmVyIiwiX2dldFN1YnNjcmliZXIiLCJfcmVjb3ZlclN1YnNjcmliZXIiLCJvbGRTdWIiLCJuZXdTdWIiLCJlbWl0QXJncyIsInN1YnNjcmlwdGlvbiIsImFkZHJlc3NhYmxlTWFwIiwibmFtZU1hcCIsIm51bVBhZCIsInBhZGRlZCIsImJ5dGVzUGFkIiwiZW1wdHkiLCJieXRlQ291bnQiLCJjaGVja1Byb3ZpZGVyIiwic2lnbmVyIiwicG9wdWxhdGUiLCJBYnN0cmFjdFNpZ25lciIsImdldE5vbmNlIiwicG9wdWxhdGVDYWxsIiwiaGFzRWlwMTU1OSIsInR4T2JqIiwic2lnblRyYW5zYWN0aW9uIiwiRmlsdGVySWRTdWJzY3JpYmVyIiwiX3N1YnNjcmliZSIsIl9lbWl0UmVzdWx0cyIsIl9yZWNvdmVyIiwiZmlsdGVySWQiLCJmaWx0ZXJJZFByb21pc2UiLCJGaWx0ZXJJZEV2ZW50U3Vic2NyaWJlciIsIkZpbHRlcklkUGVuZGluZ1N1YnNjcmliZXIiLCJQcmltaXRpdmUiLCJkZWVwQ29weSIsImR1cmF0aW9uIiwiZ2V0TG93ZXJDYXNlIiwiaXNQb2xsYWJsZSIsInBvbGxpbmciLCJzdGF0aWNOZXR3b3JrIiwiYmF0Y2hTdGFsbFRpbWUiLCJiYXRjaE1heFNpemUiLCJiYXRjaE1heENvdW50IiwiSnNvblJwY1NpZ25lciIsInNlbmRVbmNoZWNrZWRUcmFuc2FjdGlvbiIsIl9mcm9tIiwiX3RvIiwiaGV4VHgiLCJnZXRScGNUcmFuc2FjdGlvbiIsInRpbWVvdXRzIiwiaW52YWxpZHMiLCJjaGVja1R4Iiwic2VuZFRyYW5zYWN0aW9uSGFzaCIsInNpZ25NZXNzYWdlIiwiX21lc3NhZ2UiLCJzaWduVHlwZWREYXRhIiwicG9wdWxhdGVkIiwidW5sb2NrIiwiX2xlZ2FjeVNpZ25NZXNzYWdlIiwiSnNvblJwY0FwaVByb3ZpZGVyIiwic3RhbGxUaW1lIiwiX2dldE9wdGlvbiIsInBheWxvYWRzIiwiYmF0Y2giLCJfc2VuZCIsImdldFJwY0Vycm9yIiwiX3Jlc29sdmUiLCJnZXRScGNSZXF1ZXN0IiwicmVhZHkiLCJqc29ucnBjIiwiX3N0YXJ0IiwiX3dhaXRVbnRpbFJlYWR5IiwiZHN0S2V5IiwiX2Vycm9yIiwic3BlbHVua0RhdGEiLCJfc3BlbHVua01lc3NhZ2UiLCJzcGVsdW5rTWVzc2FnZSIsImV0aF9zaWduIiwicGVyc29uYWxfc2lnbiIsImV0aF9zaWduVHlwZWREYXRhX3Y0IiwiZXRoX3NpZ25UcmFuc2FjdGlvbiIsImV0aF9zZW5kVHJhbnNhY3Rpb24iLCJldGhfcmVxdWVzdEFjY291bnRzIiwid2FsbGV0X3JlcXVlc3RBY2NvdW50cyIsInVuc3VwcG9ydGVkIiwiZ2V0U2lnbmVyIiwiYWNjb3VudHNQcm9taXNlIiwiYWNjb3VudHMiLCJhY2NvdW50IiwibGlzdEFjY291bnRzIiwiSnNvblJwY0FwaVBvbGxpbmdQcm92aWRlciIsIkpzb25ScGNQcm92aWRlciIsIl9nZXRDb25uZWN0aW9uIiwiQnJvd3NlclByb3ZpZGVyIiwiZXRoZXJldW0iLCJoYXNTaWduZXIiLCJzaG93biIsInNob3dUaHJvdHRsZU1lc3NhZ2UiLCJzZXJ2aWNlIiwiZGVmYXVsdEFwaUtleSIsIkFua3JQcm92aWRlciIsImFwaUtleSIsImdldFJlcXVlc3QiLCJnZXRIb3N0IiwiaXNDb21tdW5pdHlSZXNvdXJjZSIsIkFsY2hlbXlQcm92aWRlciIsInRyYWNlIiwiQ2xvdWRmbGFyZVByb3ZpZGVyIiwic2tpcEtleXMiLCJuZXh0SWQiLCJFdGhlcnNjYW5Qcm92aWRlciIsIl9hcGlLZXkiLCJnZXRCYXNlVXJsIiwicXVlcnkiLCJnZXRQb3N0VXJsIiwiZ2V0UG9zdERhdGEiLCJhcGlrZXkiLCJwb3N0IiwiX2dldFRyYW5zYWN0aW9uUG9zdERhdGEiLCJtYXhGZWVQZXJHcyIsIl9jaGVja0Vycm9yIiwiY2F0Y2giLCJ0eGhhc2giLCJwb3N0RGF0YSIsImdldEV0aGVyUHJpY2UiLCJwYXJzZUZsb2F0IiwiZXRodXNkIiwiZ2V0Q29udHJhY3QiLCJfV2ViU29ja2V0IiwiZ2xvYmFsIiwiZ2V0R2xvYmFsIiwiV2ViU29ja2V0IiwiU29ja2V0U3Vic2NyaWJlciIsIl9yZWdpc3RlciIsIl9oYW5kbGVNZXNzYWdlIiwiZW1pdFByb21pc2UiLCJTb2NrZXRCbG9ja1N1YnNjcmliZXIiLCJTb2NrZXRQZW5kaW5nU3Vic2NyaWJlciIsIlNvY2tldEV2ZW50U3Vic2NyaWJlciIsImxvZ0ZpbHRlciIsIlNvY2tldFByb3ZpZGVyIiwiX29wdGlvbnMiLCJwZW5kaW5nIiwiX3dyaXRlIiwiX3Byb2Nlc3NNZXNzYWdlIiwicmVhc29uQ29kZSIsIldlYlNvY2tldFByb3ZpZGVyIiwid2Vic29ja2V0Iiwib25vcGVuIiwib25tZXNzYWdlIiwiY2xvc2UiLCJkZWZhdWx0UHJvamVjdElkIiwiSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIiLCJwcm9qZWN0SWQiLCJwcm9qZWN0U2VjcmV0IiwiSW5mdXJhUHJvdmlkZXIiLCJnZXRXZWJTb2NrZXRQcm92aWRlciIsImRlZmF1bHRUb2tlbiIsIlF1aWNrTm9kZVByb3ZpZGVyIiwiZGVmYXVsdENvbmZpZyIsInN0YWxsVGltZW91dCIsInByaW9yaXR5Iiwid2VpZ2h0IiwiZGVmYXVsdFN0YXRlIiwicmVxdWVzdHMiLCJsYXRlUmVzcG9uc2VzIiwiZXJyb3JSZXNwb25zZXMiLCJvdXRPZlN5bmMiLCJ1bnN1cHBvcnRlZEV2ZW50cyIsInJvbGxpbmdEdXJhdGlvbiIsInNjb3JlIiwiX3VwZGF0ZU51bWJlciIsIl90b3RhbFRpbWUiLCJfbGFzdEZhdGFsRXJyb3IiLCJfbGFzdEZhdGFsRXJyb3JUaW1lc3RhbXAiLCJfbm9ybWFsaXplIiwibm9ybWFsaXplUmVzdWx0IiwiY2hlY2tRdW9ydW0iLCJxdW9ydW0iLCJ0YWxseSIsImJlc3QiLCJnZXRNZWRpYW4iLCJyZXN1bHRXZWlnaHQiLCJlcnJvck1hcCIsImJlc3RFcnJvciIsImdldEFueVJlc3VsdCIsIkZhbGxiYWNrUHJvdmlkZXIiLCJldmVudFF1b3J1bSIsImV2ZW50V29ya2VycyIsInByb3ZpZGVycyIsImNvbmZpZyIsInByb3ZpZGVyQ29uZmlncyIsIl90cmFuc2xhdGVQZXJmb3JtIiwicnVubmluZyIsImNvbmZpZ3MiLCJhbGxDb25maWdzIiwic2h1ZmZsZSIsImRpZEJ1bXAiLCJzdGFsbGVyIiwibm93IiwiZHQiLCJpbml0aWFsU3luYyIsIndhaXRGb3JTeW5jIiwiYmVzdFJlc3VsdCIsImJlc3RXZWlnaHQiLCJnZXRGdXp6eU1vZGUiLCJpbnRlcmVzdGluZyIsIm5ld1J1bm5lcnMiLCJyYWNlIiwiYnJvYWRjYXN0cyIsIndhaXRpbmciLCJpbmZsaWdodFF1b3J1bSIsIlRlc3RuZXRzIiwicHJvamVjdERhdGFTdHJ1Y3QiLCJQUk9KRUNUX1JFR0lTVFJZX0FERFJFU1MiLCJLQU5BX0FERFJFU1MiLCJQUk9KRUNUX1JFR0lTVFJZX0FCSSIsIk1vZHVsZU9wcyIsImdldFJlZ2lzdHJ5Q29udHJhY3QiLCJnZXRQcm9qZWN0cyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJQcm9qZWN0UmVnaXN0cnkiLCJwYXJlbnQiLCJ3YWxsZXQiLCJuZXdQcm9qZWN0IiwicHJvamVjdFBhcmFtcyIsInByb2plY3QiLCJwcm9qZWN0UmVnaXN0cnkiLCJwcm9qZWN0TmFtZSIsImFiYnJldmlhdGlvbiIsImdldFByb2plY3QiLCJzZXRJdGVtIiwiZGVwbG95ZXIiLCJuZXdDb250cmFjdCIsImNvbnRyYWN0UGFyYW1zIiwiZ2VuZXNpc01vZHVsZXMiLCJtb2R1bGVTaWduYXR1cmUiLCJpbml0UGFyYW1zIiwibW9kaWZ5Q29udHJhY3QiLCJtb2R1bGVPcGVyYXRpb25zIiwiUEFZTUVOVFNfUFJPQ0VTU09SX0FERFJFU1MiLCJQQVlNRU5UU19QUk9DRVNTT1JfQUJJIiwiVGF4YWJsZU9wZXJhdGlvbnMiLCJQYXltZW50c1Byb2Nlc3NvciIsImNhbGN1bGF0ZUludm9pY2UiLCJwYXltZW50c1Byb2Nlc3NvciIsInNlcmlhbGl6ZSIsIk5FV19DT05UUkFDVCIsInN1Y2Nlc3MiLCJjb3N0IiwiTkVXX1BST0pFQ1QiLCJnZXRPcGVyYXRpb25Db3N0IiwiY2xpZW50IiwicmVxdWVzdEFsbG93YW5jZSIsImFtb3VudCIsInBheW1lbnQiLCJhbGxvd2FuY2UiLCJhcHByb3ZlIiwid2FsbGV0Q2hhbmdlZEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJyZXF1ZXN0VXBkYXRlU3Vic2NyaWJlcnMiLCJLYW5hbG9hQVBJIiwiX3NpZ25lciIsInN1YnNjcmliZWRFbGVtZW50cyIsImVsZW0iLCJkaXNwYXRjaEV2ZW50IiwiX2F2YXRhciIsIktBTkFfVE9LRU4iLCJhbGxvd1NlcnZpY2UiLCJleGNsdXNpdmUiLCJhbGNoZW15IiwiYW5rciIsImV0aGVyc2NhbiIsImluZnVyYSIsInF1aWNrbm9kZSIsInJlcXVlc3RTaWduZXIiLCJyZWFkT25seSIsInN1YnNjcmliZSIsInVuc3Vic2NyaWJlIiwiQWJzdHJhY3RDYXJkc1BhZ2UiLCJpc0xvYWRpbmciLCJmZXRjaERhdGEiLCJTbG90TWl4aW4iLCJzbG90cyIsIl9fcHJpdmF0ZVNsb3RzIiwiX2Nvbm5lY3RTbG90TWl4aW4iLCJfX3JlbmRlckFzTm9kZXMiLCJ0ZW1wbGF0ZSIsInRlbXBSZW5kZXJUYXJnZXQiLCJfX2lzQ29ubmVjdGVkU2xvdE1peGluIiwic2xvdE5hbWUiLCJjaGlsZHJlbiIsInNsb3QiLCJzbG90Q29udGVudCIsIm5vZGVzIiwiTm9kZSIsIkVsZW1lbnQiLCJfaXNQcml2YXRlU2xvdCIsIm1vdmVEb3duQ29uZGl0aW9ucyIsIkRPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElORyIsIkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5TIiwiZ2V0QXJpYUVsZW1lbnRzSW5SaWdodERvbU9yZGVyIiwiZGVzY3JpcHRpb25FbGVtZW50cyIsImRlc2NyaXB0aW9uRWxzIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJVbnBhcnNlYWJsZSIsInZpZXdWYWx1ZSIsIkZvcm1SZWdpc3RlcmluZ01peGluIiwiX3BhcmVudEZvcm1Hcm91cCIsImRldGFpbCIsImJ1YmJsZXMiLCJfX3VucmVnaXN0ZXJGb3JtRWxlbWVudCIsInJlbW92ZUZvcm1FbGVtZW50IiwiRm9ybUNvbnRyb2xNaXhpbiIsImxhYmVsU3JPbmx5IiwiaGVscFRleHQiLCJtb2RlbFZhbHVlIiwiX2FyaWFMYWJlbGxlZE5vZGVzIiwiX2FyaWFEZXNjcmliZWROb2RlcyIsIl9yZXByb3BhZ2F0aW9uUm9sZSIsIl9pc1JlcHJvcGFnYXRpb25FbmRwb2ludCIsIl9fbGFiZWwiLCJfbGFiZWxOb2RlIiwibmV3VmFsdWUiLCJfX2hlbHBUZXh0IiwiX2hlbHBUZXh0Tm9kZSIsIl9fZmllbGROYW1lIiwiX2lucHV0Tm9kZSIsIl9fZ2V0RGlyZWN0U2xvdENoaWxkIiwiX2ZlZWRiYWNrTm9kZSIsIl9pbnB1dElkIiwidXVpZCIsIl9vbkxhYmVsQ2xpY2siLCJfZW5oYW5jZUxpZ2h0RG9tQ2xhc3NlcyIsIl9lbmhhbmNlTGlnaHREb21BMTF5IiwiX3RyaWdnZXJJbml0aWFsTW9kZWxWYWx1ZUNoYW5nZWRFdmVudCIsIl9fcmVmbGVjdEFyaWFBdHRyIiwiX19yZW9yZGVyQXJpYUxhYmVsbGVkTm9kZXMiLCJfX3Jlb3JkZXJBcmlhRGVzY3JpYmVkTm9kZXMiLCJvbGROYW1lIiwibmV3TmFtZSIsIl9kaXNwYXRjaEluaXRpYWxNb2RlbFZhbHVlQ2hhbmdlZEV2ZW50IiwiY2xhc3NMaXN0IiwiYWRkVG9BcmlhTGFiZWxsZWRCeSIsImlkUHJlZml4IiwiYWRkVG9BcmlhRGVzY3JpYmVkQnkiLCJfZW5oYW5jZUxpZ2h0RG9tQTExeUZvckFkZGl0aW9uYWxTbG90cyIsImFkZGl0aW9uYWxTbG90cyIsImFkZGl0aW9uYWxTbG90IiwiYXR0ck5hbWUiLCJyZW9yZGVyIiwiaW5zaWRlTm9kZXMiLCJvdXRzaWRlTm9kZXMiLCJfZ3JvdXBPbmVUZW1wbGF0ZSIsIl9ncm91cFR3b1RlbXBsYXRlIiwiX2xhYmVsVGVtcGxhdGUiLCJfaGVscFRleHRUZW1wbGF0ZSIsIl9pbnB1dEdyb3VwVGVtcGxhdGUiLCJfZmVlZGJhY2tUZW1wbGF0ZSIsIl9pbnB1dEdyb3VwQmVmb3JlVGVtcGxhdGUiLCJfaW5wdXRHcm91cFByZWZpeFRlbXBsYXRlIiwiX2lucHV0R3JvdXBJbnB1dFRlbXBsYXRlIiwiX2lucHV0R3JvdXBTdWZmaXhUZW1wbGF0ZSIsIl9pbnB1dEdyb3VwQWZ0ZXJUZW1wbGF0ZSIsIl9pc0VtcHR5IiwiaXNOdW1iZXJWYWx1ZSIsIl9nZXRBcmlhRGVzY3JpcHRpb25FbGVtZW50cyIsInJlbW92ZUZyb21BcmlhTGFiZWxsZWRCeSIsInJlbW92ZUZyb21BcmlhRGVzY3JpYmVkQnkiLCJfX3JlcHJvcGFnYXRlQ2hpbGRyZW5Jbml0aWFsaXplZCIsImZvcm1QYXRoIiwiaW5pdGlhbGl6ZSIsImlzVHJpZ2dlcmVkQnlVc2VyIiwiX29uQmVmb3JlUmVwcm9wYWdhdGVDaGlsZHJlblZhbHVlcyIsIl9fcmVwcm9wYWdhdGVDaGlsZHJlblZhbHVlcyIsImlzRW5kcG9pbnQiLCJpc1NlbGZJbml0aWFsaXppbmciLCJpc0NoaWxkR3JvdXBJbml0aWFsaXppbmciLCJfcmVwcm9wYWdhdGlvbkNvbmRpdGlvbiIsInBhcmVudEZvcm1QYXRoIiwiRm9ybUNvbnRyb2xzQ29sbGVjdGlvbiIsIl9rZXlzIiwiRm9ybVJlZ2lzdHJhck1peGluIiwiX2lzRm9ybU9yRmllbGRzZXQiLCJmb3JtRWxlbWVudHMiLCJfb25SZXF1ZXN0VG9BZGRGb3JtRWxlbWVudCIsIl9vblJlcXVlc3RUb0NoYW5nZUZvcm1FbGVtZW50TmFtZSIsImluaXRDb21wbGV0ZSIsIl9fcmVzb2x2ZUluaXRDb21wbGV0ZSIsIl9fcmVqZWN0SW5pdENvbXBsZXRlIiwicmVnaXN0cmF0aW9uQ29tcGxldGUiLCJfX3Jlc29sdmVSZWdpc3RyYXRpb25Db21wbGV0ZSIsIl9fcmVqZWN0UmVnaXN0cmF0aW9uQ29tcGxldGUiLCJfY29tcGxldGVSZWdpc3RyYXRpb24iLCJpc1JlZ2lzdGVyZWRGb3JtRWxlbWVudCIsImV4aXRpbmdFbCIsImFkZEZvcm1FbGVtZW50IiwiaW5kZXhUb0luc2VydEF0IiwiaWR4Iiwic3RvcFByb3BhZ2F0aW9uIiwiZm9ybUVsZW1lbnQiLCJET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkciLCJfb25SZXF1ZXN0VG9SZW1vdmVGb3JtRWxlbWVudCIsInZlcnNpb25zIiwic3VwcG9ydHNTY29wZWRSZWdpc3RyeSIsIlNjb3BlZEVsZW1lbnRzTWl4aW4iLCJzY29wZWRFbGVtZW50cyIsInNjb3BlZEVsZW1lbnRzVmVyc2lvbiIsIl9fc2hhZG93Um9vdE9wdGlvbnMiLCJfX2VsZW1lbnRTdHlsZXMiLCJfYXJncyIsInJlZ2lzdHJ5IiwiX19yZWdpc3RyeSIsIkN1c3RvbUVsZW1lbnRSZWdpc3RyeSIsImRlZmluZVNjb3BlZEVsZW1lbnQiLCJjcmVhdGVkUm9vdCIsImNyZWF0ZVNjb3BlZEVsZW1lbnQiLCJyZWdpc3RlcmVkQ2xhc3MiLCJnZXRTY29wZWRUYWdOYW1lIiwic3ltIiwiZ2xvYmFsVGhpc09yV2luZG93Iiwic2luZ2xldG9uTWFuYWdlciIsIl9tYXAiLCJjcmVhdGVDb21tb25qc01vZHVsZSIsIkxPTkciLCJTSE9SVCIsIk5BUlJPVyIsIk5VTUVSSUMiLCJUV09ESUdJVCIsImZvcm1hdE1lc3NhZ2VGb3JtYXRzIiwiZGVjaW1hbCIsImludGVnZXIiLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJjdXJyZW5jeSIsInBlcmNlbnQiLCJzaG9ydCIsIm1vbnRoIiwiZGF5IiwieWVhciIsIm1lZGl1bSIsImxvbmciLCJmdWxsIiwid2Vla2RheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJ0aW1lWm9uZU5hbWUiLCJob3VycyIsIm1pbmltdW1JbnRlZ2VyRGlnaXRzIiwibWludXRlcyIsInNlY29uZHMiLCJwYXJzZU51bWJlclBhdHRlcm4iLCJwYXR0ZXJuIiwic3ltcyIsImN1cnJlbmN5RGlzcGxheSIsInVzZUdyb3VwaW5nIiwibWluaW11bVNpZ25pZmljYW50RGlnaXRzIiwibWF4aW11bVNpZ25pZmljYW50RGlnaXRzIiwiZnJhY3Rpb24iLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJwYXJzZURhdGVQYXR0ZXJuIiwiZXJhIiwiaG91cjEyIiwiemVybyIsIm9uZSIsInR3byIsImZldyIsIm1hbnkiLCJwbHVyYWxzIiwiYWYiLCJjYXJkaW5hbCIsImFrIiwiYW0iLCJhciIsImFycyIsImFzIiwib3JkaW5hbCIsImFzYSIsImFzdCIsImF6IiwiYmUiLCJiZW0iLCJiZXoiLCJiZyIsImJoIiwiYm4iLCJicngiLCJicyIsImNhIiwiY2UiLCJjZ2ciLCJjaHIiLCJja2IiLCJjcyIsImN5IiwiZGEiLCJkZSIsImRzYiIsImR2IiwiZWUiLCJlbiIsImVvIiwiZXMiLCJldCIsImV1IiwiZmEiLCJmZiIsImZpIiwiZmlsIiwiZm8iLCJmciIsImZ1ciIsImZ5IiwiZ2EiLCJnZCIsImdsIiwiZ3N3IiwiZ3UiLCJndXciLCJndiIsImhhIiwiaGF3IiwiaGUiLCJoaSIsImhyIiwiaHNiIiwiaHUiLCJoeSIsImlvIiwiaXQiLCJpdSIsIml3IiwiamdvIiwiamkiLCJqbWMiLCJrYSIsImthYiIsImthaiIsImtjZyIsImtrIiwia2tqIiwia2wiLCJrbiIsImtzIiwia3NiIiwia3NoIiwia3UiLCJrdyIsImt5IiwibGFnIiwibGIiLCJsZyIsImxuIiwibHQiLCJsdiIsIm1hcyIsIm1nIiwibWdvIiwibWsiLCJtbCIsIm1uIiwibW8iLCJtciIsIm10IiwibmFoIiwibmFxIiwibmIiLCJuZCIsIm5lIiwibmwiLCJubiIsIm5uaCIsIm5vIiwibnIiLCJuc28iLCJueSIsIm55biIsIm9tIiwib3IiLCJvcyIsInBhIiwicGFwIiwicGwiLCJwcmciLCJwcyIsInB0Iiwicm0iLCJybyIsInJvZiIsInJ1IiwicndrIiwic2FxIiwic2NuIiwic2QiLCJzZGgiLCJzZSIsInNlaCIsInNoIiwic2hpIiwic2kiLCJzayIsInNtYSIsInNtaSIsInNtaiIsInNtbiIsInNtcyIsInNuIiwic28iLCJzcSIsInNyIiwic3MiLCJzc3kiLCJzdiIsInN3Iiwic3lyIiwidGEiLCJ0ZSIsInRlbyIsInRpIiwidGlnIiwidGsiLCJ0bCIsInRuIiwidHIiLCJ0cyIsInR6bSIsInVnIiwidWsiLCJ1ciIsInV6IiwidmUiLCJ2byIsInZ1biIsIndhIiwid2FlIiwieGgiLCJ4b2ciLCJ5aSIsInp1IiwibG8iLCJtcyIsInZpIiwiZm9ybWF0TWVzc2FnZUludGVycHJldCIsImludGVycHJldEFTVCIsImVsZW1lbnRzIiwibG9jYWxlIiwiZm9ybWF0dGVyIiwiZGVmYXVsdHMiLCJnZXRBcmciLCJnZXRGcm10IiwiZnJtdCIsImludGVycHJldEVsZW1lbnQiLCJwYXJ0IiwiaWkiLCJpbnRlcnByZXROdW1iZXIiLCJsb2NhbGVzIiwiSW50bCIsIk51bWJlckZvcm1hdCIsImludGVycHJldERhdGVUaW1lIiwiRGF0ZVRpbWVGb3JtYXQiLCJpbnRlcnByZXRQbHVyYWwiLCJwbHVyYWxSdWxlcyIsInBsdXJhbFR5cGUiLCJQbHVyYWxSdWxlcyIsInN1cHBvcnRlZExvY2FsZXNPZiIsImF2YWlsYWJsZSIsImxsIiwiY2FuZGlkYXRlIiwibG9va3VwQ2xvc2VzdExvY2FsZSIsInNlbGVjdCIsInJldHVybk90aGVyIiwidG9QYXJ0cyIsInNwZWxsb3V0IiwiZnMiLCJmbSIsImZoIiwic2VwIiwiaXNGaW5pdGUiLCJkdXIiLCJwbHVyYWwiLCJzZWxlY3RvcmRpbmFsIiwiZm9ybWF0TWVzc2FnZVBhcnNlIiwiQVJHX09QTiIsIkFSR19DTFMiLCJBUkdfU0VQIiwiTlVNX0FSRyIsIlRBR19PUE4iLCJUQUdfQ0xTIiwiVEFHX0VORCIsIlRBR19TRUxGX0NMUyIsIkVTQyIsIk9GRlNFVCIsInNpbXBsZVR5cGVzIiwic3VibVR5cGVzIiwicGFyc2VBU1QiLCJwYXJlbnRUeXBlIiwicGFyc2VUZXh0IiwidGFnc1R5cGUiLCJwYXJzZVBsYWNlaG9sZGVyIiwiaXNIYXNoU3BlY2lhbCIsImlzQW5nbGVTcGVjaWFsIiwiaXNBcmdTdHlsZSIsImlzV2hpdGVzcGFjZSIsInNraXBXaGl0ZXNwYWNlIiwicGFyc2VJZCIsImNsb3NlSWQiLCJwYXJzZVRhZyIsInBhcnNlUGx1cmFsT2Zmc2V0IiwicGFyc2VTdWJNZXNzYWdlcyIsInBhcnNlU2ltcGxlRm9ybWF0IiwiaXNUYWciLCJwYXJzZVN1Yk1lc3NhZ2UiLCJsaW5lcyIsImxpbmUiLCJjb2x1bW4iLCJTeW50YXhFcnJvciIsInN1cHBvcnRlZEV4cCIsImludGVybmFscyIsIk1lc3NhZ2VGb3JtYXQiLCJtZXNzYWdlRm9ybWF0IiwiZm9ybWF0VG9QYXJ0cyIsInJlc29sdmVkT3B0aW9ucyIsInJlcXVlc3RlZExvY2FsZXMiLCJsb2NhbGl6ZSIsImF1dG9Mb2FkT25Mb2NhbGVDaGFuZ2UiLCJmYWxsYmFja0xvY2FsZSIsInNob3dLZXlBc0ZhbGxiYWNrIiwiX19kZWxlZ2F0aW9uVGFyZ2V0IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIl9hdXRvTG9hZE9uTG9jYWxlQ2hhbmdlIiwiX2ZhbGxiYWNrTG9jYWxlIiwiX3Nob3dLZXlBc0ZhbGxiYWNrIiwiX19zdG9yYWdlIiwiX19uYW1lc3BhY2VQYXR0ZXJuc01hcCIsIl9fbmFtZXNwYWNlTG9hZGVyc0NhY2hlIiwiX19uYW1lc3BhY2VMb2FkZXJQcm9taXNlc0NhY2hlIiwiZm9ybWF0TnVtYmVyT3B0aW9ucyIsInJldHVybklmTmFOIiwicG9zdFByb2Nlc3NvcnMiLCJmb3JtYXREYXRlT3B0aW9ucyIsImluaXRpYWxMb2NhbGUiLCJkb2N1bWVudEVsZW1lbnQiLCJfc3VwcG9ydEV4dGVybmFsVHJhbnNsYXRpb25Ub29scyIsIl9zZXR1cFRyYW5zbGF0aW9uVG9vbFN1cHBvcnQiLCJsYW5nIiwiX3NldHVwSHRtbExhbmdBdHRyaWJ1dGVPYnNlcnZlciIsIl9sYW5nQXR0clNldEJ5VHJhbnNsYXRpb25Ub29sIiwidGVhcmRvd24iLCJfdGVhcmRvd25IdG1sTGFuZ0F0dHJpYnV0ZU9ic2VydmVyIiwiX19sb2NhbGUiLCJvbGRMb2NhbGUiLCJfc2V0SHRtbExhbmdBdHRyaWJ1dGUiLCJfX2hhbmRsZUxhbmd1YWdlT25seSIsIl9vbkxvY2FsZUNoYW5nZWQiLCJsb2FkaW5nQ29tcGxldGUiLCJhZGREYXRhIiwibmFtZXNwYWNlIiwiX2lzTmFtZXNwYWNlSW5DYWNoZSIsInNldHVwTmFtZXNwYWNlTG9hZGVyIiwibG9hZGVyIiwibG9hZE5hbWVzcGFjZXMiLCJuYW1lc3BhY2VzIiwibG9hZE5hbWVzcGFjZSIsIm5hbWVzcGFjZU9iaiIsImlzRHluYW1pY0ltcG9ydCIsIl9nZXRDYWNoZWROYW1lc3BhY2VMb2FkZXJQcm9taXNlIiwiX2xvYWROYW1lc3BhY2VEYXRhIiwidmFycyIsIl9nZXRNZXNzYWdlRm9yS2V5cyIsIl9odG1sTGFuZ0F0dHJpYnV0ZU9ic2VydmVyIiwibXV0YXRpb25zIiwibXV0YXRpb24iLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlRmlsdGVyIiwiYXR0cmlidXRlT2xkVmFsdWUiLCJfZ2V0TmFtZXNwYWNlTG9hZGVyIiwibG9hZGVyUHJvbWlzZSIsIl9nZXROYW1lc3BhY2VMb2FkZXJQcm9taXNlIiwiX2NhY2hlTmFtZXNwYWNlTG9hZGVyUHJvbWlzZSIsImlzTG9jYWxpemVFU01vZHVsZSIsIl9sb29rdXBOYW1lc3BhY2VMb2FkZXIiLCJfZ2V0TGFuZ0Zyb21Mb2NhbGUiLCJmYWxsYmFja0xhbmciLCJpc01hdGNoaW5nU3RyaW5nIiwiaXNNYXRjaGluZ1JlZ2V4cCIsIm5ld0xvY2FsZSIsIl9sb2FkQWxsTWlzc2luZyIsIm9sZExvY2FsZU5hbWVzcGFjZXMiLCJuZXdMb2NhbGVOYW1lc3BhY2VzIiwiX2dldE1lc3NhZ2VGb3JLZXkiLCJyZXZlcnNlZEtleXMiLCJucyIsIm5hbWVzU3RyaW5nIiwibWVzc2FnZXMiLCJzZXREYXRlUG9zdFByb2Nlc3NvckZvckxvY2FsZSIsInBvc3RQcm9jZXNzb3IiLCJzZXROdW1iZXJQb3N0UHJvY2Vzc29yRm9yTG9jYWxlIiwiQXN5bmNRdWV1ZSIsIl9fcnVubmluZyIsIl9fcXVldWUiLCJ0YXNrIiwiY29tcGxldGUiLCJfX2NhbGxDb21wbGV0ZSIsIl9fcnVuIiwiU3luY1VwZGF0YWJsZU1peGluIiwiX19TeW5jVXBkYXRhYmxlTmFtZXNwYWNlIiwiX19zeW5jVXBkYXRhYmxlSW5pdGlhbGl6ZSIsImNvbm5lY3RlZCIsIl9fc3luY1VwZGF0YWJsZUhhc0NoYW5nZWQiLCJpbml0aWFsaXplZCIsInF1ZXVlIiwidXBkYXRlU3luYyIsIkxpb25WYWxpZGF0aW9uRmVlZGJhY2siLCJmZWVkYmFja0RhdGEiLCJfbWVzc2FnZVRlbXBsYXRlIiwiY3VycmVudFR5cGUiLCJyZW1vdmVNZXNzYWdlIiwidmFsaWRhdG9yIiwiRXZlbnRUYXJnZXQiLCJfX3BhcmFtIiwiX19jb25maWciLCJzdGF0aWMiLCJleGVjdXRlIiwidmFsaWRhdG9yTmFtZSIsIkV2ZW50IiwiX2dldE1lc3NhZ2UiLCJjb21wb3NlZERhdGEiLCJnZXRNZXNzYWdlIiwib25Gb3JtQ29udHJvbENvbm5lY3QiLCJmb3JtQ29udHJvbCIsIm9uRm9ybUNvbnRyb2xEaXNjb25uZWN0IiwiYWJvcnRFeGVjdXRpb24iLCJSZXN1bHRWYWxpZGF0b3IiLCJleGVjdXRlT25SZXN1bHRzIiwicmVndWxhclZhbGlkYXRpb25SZXN1bHQiLCJwcmV2VmFsaWRhdGlvblJlc3VsdCIsInByZXZTaG93blZhbGlkYXRpb25SZXN1bHQiLCJSZXF1aXJlZCIsIl9jb21wYXRpYmxlUm9sZXMiLCJfY29tcGF0aWJsZVRhZ3MiLCJpbnB1dE5vZGUiLCJyb2xlIiwiZWxlbWVudFRhZ05hbWUiLCJhcnJheURpZmYiLCJhcnJheTEiLCJhcnJheTIiLCJWYWxpZGF0ZU1peGluIiwiaGFzRmVlZGJhY2tGb3IiLCJzaG91bGRTaG93RmVlZGJhY2tGb3IiLCJzaG93c0ZlZWRiYWNrRm9yIiwidmFsaWRhdGlvblN0YXRlcyIsImlzUGVuZGluZyIsImRlZmF1bHRWYWxpZGF0b3JzIiwiX3Zpc2libGVNZXNzYWdlc0Ftb3VudCIsIl9fY2hpbGRNb2RlbFZhbHVlQ2hhbmdlZCIsInZhbGlkYXRpb25UeXBlcyIsImZlZWRiYWNrIiwiZmVlZGJhY2tFbCIsIl9hbGxWYWxpZGF0b3JzIiwiX19zeW5jVmFsaWRhdGlvblJlc3VsdCIsIl9fYXN5bmNWYWxpZGF0aW9uUmVzdWx0IiwiX192YWxpZGF0aW9uUmVzdWx0IiwiX19wcmV2VmFsaWRhdGlvblJlc3VsdCIsIl9fcHJldlNob3duVmFsaWRhdGlvblJlc3VsdCIsIl9vblZhbGlkYXRvclVwZGF0ZWQiLCJfdXBkYXRlRmVlZGJhY2tDb21wb25lbnQiLCJfX3ZhbGlkYXRlSW5pdGlhbGl6ZWQiLCJ2YWxpZGF0ZSIsIl9fc2V0dXBWYWxpZGF0b3JzIiwiY2xlYXJDdXJyZW50UmVzdWx0IiwiX3VwZGF0ZVNob3VsZFNob3dGZWVkYmFja0ZvciIsIl9oYXNGZWVkYmFja1Zpc2libGVGb3IiLCJkaWZmIiwiY2hhckF0IiwiX19jbGVhclZhbGlkYXRpb25SZXN1bHRzIiwiX19maW5pc2hWYWxpZGF0aW9uIiwic291cmNlIiwiaGFzQXN5bmMiLCJfX2V4ZWN1dGVWYWxpZGF0b3JzIiwidmFsaWRhdGVDb21wbGV0ZSIsIl9fdmFsaWRhdGVDb21wbGV0ZVJlc29sdmUiLCJyZXF1aXJlZFZhbGlkYXRvciIsIl9faXNFbXB0eSIsIm91dGNvbWUiLCJmaWx0ZXJlZFZhbGlkYXRvcnMiLCJzeW5jVmFsaWRhdG9ycyIsImFzeW5jVmFsaWRhdG9ycyIsIl9fZXhlY3V0ZVN5bmNWYWxpZGF0b3JzIiwiX19leGVjdXRlQXN5bmNWYWxpZGF0b3JzIiwicmVzdWx0UHJvbWlzZXMiLCJhc3luY0V4ZWN1dGlvblJlc3VsdHMiLCJfX2V4ZWN1dGVSZXN1bHRWYWxpZGF0b3JzIiwicmVzdWx0VmFsaWRhdG9ycyIsImVudHJ5Iiwic3luY0FuZEFzeW5jT3V0Y29tZSIsInJlc3VsdE91dENvbWUiLCJ2Q3RvciIsImV2ZW50cyIsIl9fcHJldlZhbGlkYXRvcnMiLCJfX2dldEZlZWRiYWNrTWVzc2FnZXMiLCJ2YWxpZGF0aW9uUmVzdWx0cyIsIl9fZmVlZGJhY2tRdWV1ZSIsInByaW9yaXRpemVkVmFsaWRhdG9ycyIsIl9wcmlvcml0aXplQW5kRmlsdGVyRmVlZGJhY2siLCJ2YWxpZGF0aW9uUmVzdWx0IiwiX19wcmlvcml0aXplZFJlc3VsdCIsIm1lc3NhZ2VNYXAiLCJmZWVkYmFja0NvbXBsZXRlIiwiX3Nob3dGZWVkYmFja0NvbmRpdGlvbkZvciIsIm1ldGEiLCJfZmVlZGJhY2tDb25kaXRpb25NZXRhIiwiZmVlZGJhY2tDb25kaXRpb24iLCJjdXJyZW50Q29uZGl0aW9uIiwicHJldlN0YXRlcyIsImZlZWRiYWNrT2JqIiwibmV3U2hvdWxkU2hvd0ZlZWRiYWNrRm9yIiwiRm9ybUVsZW1lbnRzSGF2ZU5vRXJyb3IiLCJoYXNFcnJvciIsIl9hbnlGb3JtRWxlbWVudEhhc0ZlZWRiYWNrRm9yIiwiRm9ybUdyb3VwTWl4aW4iLCJzdWJtaXR0ZWQiLCJmb2N1c2VkIiwiZGlydHkiLCJ0b3VjaGVkIiwicHJlZmlsbGVkIiwiX2dldEZyb21BbGxGb3JtRWxlbWVudHMiLCJfX2lzSW5pdGlhbE1vZGVsVmFsdWUiLCJfc2V0VmFsdWVNYXBGb3JBbGxGb3JtRWxlbWVudHMiLCJzZXJpYWxpemVkVmFsdWUiLCJfX2lzSW5pdGlhbFNlcmlhbGl6ZWRWYWx1ZSIsImZvcm1hdHRlZFZhbHVlIiwiX2V2ZXJ5Rm9ybUVsZW1lbnRIYXMiLCJfX2FkZGVkU3ViVmFsaWRhdG9ycyIsIl9jaGVja0Zvck91dHNpZGVDbGljayIsIl9zeW5jRm9jdXNlZCIsIl9vbkZvY3VzT3V0IiwiX3N5bmNEaXJ0eSIsIl9fb25DaGlsZFZhbGlkYXRlUGVyZm9ybWVkIiwiX19kZXNjcmlwdGlvbkVsZW1lbnRzSW5QYXJlbnRDaGFpbiIsIl9fcGVuZGluZ1ZhbHVlcyIsIl9faW5pdEludGVyYWN0aW9uU3RhdGVzIiwiX19oYXNBY3RpdmVPdXRzaWRlQ2xpY2tIYW5kbGluZyIsImNsZWFyIiwiaW5pdEludGVyYWN0aW9uU3RhdGUiLCJfX3JlcXVlc3RDaGlsZHJlblRvQmVEaXNhYmxlZCIsIl9fcmV0cmFjdFJlcXVlc3RDaGlsZHJlblRvQmVEaXNhYmxlZCIsIl9fc2V0dXBPdXRzaWRlQ2xpY2tIYW5kbGluZyIsInN1Ym1pdEdyb3VwIiwicmVzZXRHcm91cCIsInJlc2V0SW50ZXJhY3Rpb25TdGF0ZSIsImNsZWFyR3JvdXAiLCJfZ2V0RnJvbUFsbEZvcm1FbGVtZW50c0ZpbHRlciIsInByb3BlcnR5IiwiZmlsdGVyRm4iLCJfZmlsdGVyRm4iLCJfc2V0VmFsdWVGb3JBbGxGb3JtRWxlbWVudHMiLCJfYW55Rm9ybUVsZW1lbnRIYXMiLCJsYXN0RWwiLCJfX3N0b3JlQWxsRGVzY3JpcHRpb25FbGVtZW50c0luUGFyZW50Q2hhaW4iLCJfX2xpbmtQYXJlbnRNZXNzYWdlcyIsIl9fdW5saW5rUGFyZW50TWVzc2FnZXMiLCJwVmFscyIsIl9pbml0aWFsTW9kZWxWYWx1ZSIsIkxpb25GaWVsZHNldCIsInRocm93Rm9ybU5vZGVFcnJvciIsIkxpb25Gb3JtIiwiX3N1Ym1pdCIsIl9yZXNldCIsIl9fcmVnaXN0ZXJFdmVudHNGb3JMaW9uRm9ybSIsIl9fdGVhcmRvd25FdmVudHNGb3JMaW9uRm9ybSIsIl9mb3JtTm9kZSIsInF1ZXJ5U2VsZWN0b3IiLCJzdWJtaXQiLCJjYW5jZWxhYmxlIiwid2luZG93V2l0aE9wdGlvbmFsUG9seWZpbGwiLCJwb2x5ZmlsbGVkTm9kZXMiLCJGb2N1c01peGluIiwiZm9jdXNlZFZpc2libGUiLCJfX3JlZ2lzdGVyRXZlbnRzRm9yRm9jdXNNaXhpbiIsIl9fdGVhcmRvd25FdmVudHNGb3JGb2N1c01peGluIiwiZm9jdXMiLCJfZm9jdXNhYmxlTm9kZSIsImJsdXIiLCJfX29uRm9jdXMiLCJhcHBseUZvY3VzVmlzaWJsZVBvbHlmaWxsIiwiX19vbkJsdXIiLCJnZXRSb290Tm9kZSIsIl9fcmVkaXNwYXRjaEZvY3VzIiwiX19yZWRpc3BhdGNoQmx1ciIsIl9fcmVkaXNwYXRjaEZvY3VzaW4iLCJfX3JlZGlzcGF0Y2hGb2N1c291dCIsIkZvcm1hdE1peGluIiwiZm9ybWF0T3B0aW9ucyIsIm9sZFZhbCIsIl9vbk1vZGVsVmFsdWVDaGFuZ2VkIiwiX2NhbGN1bGF0ZVZhbHVlcyIsIl9fdmFsdWUiLCJwcmVwcm9jZXNzb3IiLCJwYXJzZXIiLCJzZXJpYWxpemVyIiwiZGVzZXJpYWxpemVyIiwiX19wcmV2ZW50UmVjdXJzaXZlVHJpZ2dlciIsIl9jYWxsUGFyc2VyIiwiX2NhbGxGb3JtYXR0ZXIiLCJfcmVmbGVjdEJhY2tGb3JtYXR0ZWRWYWx1ZVRvVXNlciIsIl9fcHJldlZpZXdWYWx1ZSIsIl9pc0hhbmRsaW5nVXNlcklucHV0IiwiX2Rpc3BhdGNoTW9kZWxWYWx1ZUNoYW5nZWRFdmVudCIsIl9zeW5jVmFsdWVVcHdhcmRzIiwiX19pc0hhbmRsaW5nQ29tcG9zaXRpb24iLCJfX2hhbmRsZVByZXByb2Nlc3NvciIsInByZXZGb3JtYXR0ZWQiLCJ1bnByb2Nlc3NlZFZhbHVlIiwiY3VycmVudENhcmV0SW5kZXgiLCJwcmVwcm9jZXNzZWRWYWx1ZSIsInByZXZWaWV3VmFsdWUiLCJjYXJldEluZGV4Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJfcmVmbGVjdEJhY2tPbiIsIl9wcm94eUlucHV0RXZlbnQiLCJfb25Vc2VySW5wdXRDaGFuZ2VkIiwiX19vbkNvbXBvc2l0aW9uRXZlbnQiLCJmb3JtYXRPbiIsIl9pc1Bhc3RpbmciLCJfX29uUGFzdGUiLCJfcmVmbGVjdEJhY2tGb3JtYXR0ZWRWYWx1ZURlYm91bmNlZCIsIk5hdGl2ZVRleHRGaWVsZE1peGluIiwiYXV0b2NvbXBsZXRlIiwibmF0aXZlIiwiX3NldFZhbHVlQW5kUHJlc2VydmVDYXJldCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiSW50ZXJhY3Rpb25TdGF0ZU1peGluIiwiZmlsbGVkIiwiX29uVG91Y2hlZENoYW5nZWQiLCJfb25EaXJ0eUNoYW5nZWQiLCJfbGVhdmVFdmVudCIsIl92YWx1ZUNoYW5nZWRFdmVudCIsIl9pU3RhdGVPbkxlYXZlIiwiX2lTdGF0ZU9uVmFsdWVDaGFuZ2UiLCJMaW9uRmllbGQiLCJfb25DaGFuZ2UiLCJMaW9uSW5wdXQiLCJwbGFjZWhvbGRlciIsIl9fZGVsZWdhdGVSZWFkT25seSIsIkZvcm1SZWdpc3RyYXJQb3J0YWxNaXhpbiIsInJlZ2lzdHJhdGlvblRhcmdldCIsIl9fcmVkaXNwYXRjaEV2ZW50Rm9yRm9ybVJlZ2lzdHJhclBvcnRhbE1peGluIiwiTGlvbk9wdGlvbnMiLCJudyIsIm9sZCIsImNoZWNrZWQiLCJDaG9pY2VJbnB1dE1peGluIiwiY2hvaWNlVmFsdWUiLCJfX3N5bmNNb2RlbENoZWNrZWRUb0NoZWNrZWQiLCJfX3N5bmNDaGVja2VkVG9Nb2RlbCIsIl9fc3luY0NoZWNrZWRUb0lucHV0RWxlbWVudCIsIl9zeW5jTmFtZVRvUGFyZW50Rm9ybUdyb3VwIiwiX3ByZXZlbnREdXBsaWNhdGVMYWJlbENsaWNrIiwiX3RvZ2dsZUNoZWNrZWQiLCJfY2hvaWNlR3JhcGhpY1RlbXBsYXRlIiwiX2FmdGVyVGVtcGxhdGUiLCJfX2lucHV0Q2xpY2tIYW5kbGVyIiwiX2V2IiwiX29sZCIsIkxpb25PcHRpb24iLCJfX29uQ2xpY2siLCJfX3JlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMiLCJfX3VuUmVnaXN0ZXJFdmVudExpc3RlbmVycyIsInBhcmVudEZvcm0iLCJtdWx0aXBsZUNob2ljZSIsIkxpb25GaWVsZFdpdGhTZWxlY3QiLCJMaW9uU2VsZWN0IiwiX3Byb3h5Q2hhbmdlRXZlbnQiLCJvcHRpb24iLCJpc051bWJlciIsIklzTnVtYmVyIiwiaXNFbmFibGVkIiwiTWluTnVtYmVyIiwiTWF4TnVtYmVyIiwiTWluTWF4TnVtYmVyIiwiTGlvbklucHV0U3RlcHBlciIsInN0ZXAiLCJjdXJyZW50VmFsdWUiLCJfX2luY3JlbWVudCIsIl9fZGVjcmVtZW50IiwiX19ib3VuZE9uTGVhdmVCdXR0b24iLCJfb25MZWF2ZUJ1dHRvbiIsIl9fa2V5RG93bkhhbmRsZXIiLCJfX3NldEFyaWFMYWJlbHNBbmRWYWxpZGF0b3IiLCJfX3RvZ2dsZVNwaW5uZXJCdXR0b25zU3RhdGUiLCJfX2dldERlY3JlbWVudEJ1dHRvbk5vZGUiLCJfX2dldEluY3JlbWVudEJ1dHRvbk5vZGUiLCJhcmlhQXR0cmlidXRlcyIsIm1pbk1heFZhbGlkYXRvcnMiLCJkZWNyZW1lbnRCdXR0b24iLCJfX2dldFNsb3QiLCJpbmNyZW1lbnRCdXR0b24iLCJkaXNhYmxlSW5jcmVtZW50b3IiLCJyZW5kZXJQYXJlbnQiLCJfaW5jcmVtZW50b3JUZW1wbGF0ZSIsInNjb3BlTmFtZSIsImV2ZW50Q29udGV4dCIsImZpcnN0RWxlbWVudENoaWxkIiwiX2RlY3JlbWVudG9yVGVtcGxhdGUiLCJfZGVjcmVtZW50b3JTaWduVGVtcGxhdGUiLCJfaW5jcmVtZW50b3JTaWduVGVtcGxhdGUiLCJfJEN0IiwiXyRDaSIsIl8kQVEiLCJyZWNvbm5lY3RlZCIsImRpc2Nvbm5lY3RlZCIsInJlY29ubmVjdCIsImRlcmVmIiwiWSIsIl8kQ190IiwiXyRDd3QiLCJfJENxIiwiXyRDSyIsIkxvY2FsaXplTWl4aW4iLCJsb2NhbGl6ZU5hbWVzcGFjZXMiLCJ3YWl0Rm9yTG9jYWxpemVOYW1lc3BhY2VzIiwiX19ib3VuZExvY2FsaXplT25Mb2NhbGVDaGFuZ2VkIiwiX19sb2NhbGl6ZU9uTG9jYWxlQ2hhbmdlZCIsIl9fYm91bmRMb2NhbGl6ZU9uTG9jYWxlQ2hhbmdpbmciLCJfX2xvY2FsaXplT25Mb2NhbGVDaGFuZ2luZyIsIl9fbG9jYWxpemVTdGFydExvYWRpbmdOYW1lc3BhY2VzIiwibG9jYWxpemVOYW1lc3BhY2VzTG9hZGVkIiwiX19sb2NhbGl6ZU1lc3NhZ2VTeW5jIiwib25Mb2NhbGVSZWFkeSIsIm1zZ0xpdCIsInZhcmlhYmxlcyIsIl9fZ2V0VW5pcXVlTmFtZXNwYWNlcyIsInVuaXF1ZU5hbWVzcGFjZXMiLCJ1bmlxdWVOYW1lc3BhY2UiLCJvbkxvY2FsZUNoYW5nZWQiLCJvbkxvY2FsZVVwZGF0ZWQiLCJnZXRMb2NhbGUiLCJnZXREZWNpbWFsU2VwYXJhdG9yIiwiZGVjaW1hbFNlcGFyYXRvciIsImNvbXB1dGVkTG9jYWxlIiwibm9ybWFsU3BhY2VzIiwiZ2V0R3JvdXBTZXBhcmF0b3IiLCJncm91cFNlcGFyYXRvciIsImZvcmNlQ3VycmVuY3lUb0VuZCIsImZvcm1hdHRlZFBhcnRzIiwibW92ZUN1ciIsIm1vdmVMaXQiLCJDVVJSRU5DWV9DT0RFX1NZTUJPTF9NQVAiLCJFVVIiLCJVU0QiLCJKUFkiLCJmb3JtYXROdW1iZXJUb1BhcnRzIiwicGFyc2VkTnVtYmVyIiwicm91bmRNb2RlIiwicm91bmROdW1iZXIiLCJmb3JtYXR0ZWROdW1iZXIiLCJyZWdleFNlcGFyYXRvciIsInNlcGFyYXRvcnMiLCJnZXRTZXBhcmF0b3JzRnJvbU51bWJlciIsInJlZ2V4Q3VycmVuY3kiLCJyZWdleE1pbnVzU2lnbiIsInJlZ2V4TnVtIiwicmVnZXhTcGFjZSIsIm51bWJlclBhcnQiLCJpc0dyb3VwIiwiaGFzTnVtYmVyUGFydCIsIl9sb2NhbGUiLCJmb3JjZU5vcm1hbFNwYWNlcyIsImZpcnN0UGFydCIsImludGVnZXJQYXJ0IiwiY29uY2F0QXJyYXkiLCJudW1iZXJPZkRpZ2l0cyIsIm1vZDMiLCJudW1iZXJBcnJheSIsIm51bWJlck9mR3JvdXBzIiwiZmlyc3RHcm91cCIsImZvcmNlQWRkR3JvdXBTZXBhcmF0b3JzIiwiZm9yY2VTcGFjZUluc3RlYWRPZlplcm9Gb3JHcm91cCIsIm51bWJlck9mUGFydHMiLCJsaXRlcmFsT2JqZWN0IiwiZm9yY2VTcGFjZUJldHdlZW5DdXJyZW5jeUNvZGVBbmROdW1iZXIiLCJmb3JjZVllblN5bWJvbCIsIm5ld1BhcnQiLCJmb3JjZVRyeUN1cnJlbmN5Q29kZSIsImZvcmNlRU5BVVN5bWJvbHMiLCJub3JtYWxpemVJbnRsIiwiZ2V0RnJhY3Rpb25EaWdpdHMiLCJmcmFjdGlvblBhcnQiLCJmb3JtYXRBbW91bnQiLCJnaXZlbk9wdGlvbnMiLCJmb3JtYXR0ZWRUb1BhcnRzIiwicHJpbnROdW1iZXJPZlBhcnRzIiwicGFyc2VBbW91bnQiLCJtYXRjaGVkSW5wdXQiLCJjbGVhbmVkSW5wdXQiLCJwYXJzZU1vZGUiLCJjaGFyQXRMYXN0U2VwYXJhdG9yUG9zaXRpb24iLCJpc0RlY2ltYWxTZXBhcmF0b3IiLCJvdGhlclNlcGFyYXRvcnMiLCJsYXN0U2VwYXJhdG9yIiwiZ2V0UGFyc2VNb2RlIiwiY2xlYW5lZElucHV0TWF0Y2hTdHIiLCJOYU4iLCJzZXBhcmF0b3IiLCJyZWdleE51bWJlckFuZExvY2FsZVNlcGFyYXRvciIsIm51bWJlckFuZExvY2FsZVNlcGFyYXRvciIsInBhcnNlV2l0aExvY2FsZSIsIm51bWJlclN0cmluZyIsInBhcnNlSGV1cmlzdGljIiwicGFyc2VOdW1iZXIiLCJMaW9uSW5wdXRBbW91bnQiLCJhZnRlciIsIl9fY3VycmVuY3lMYWJlbCIsIl9fY3VycmVuY3lEaXNwbGF5Tm9kZUlzQ29ubmVjdGVkIiwiX19zZXRDdXJyZW5jeURpc3BsYXlMYWJlbCIsIl9vbkN1cnJlbmN5Q2hhbmdlZCIsIl9fcmVmb3JtYXQiLCJfX2N1cnJlbmN5RGlzcGxheU5vZGUiLCJfX3N0b3JlZEN1cnJlbmN5RGlzcGxheU5vZGUiLCJjdXJyZW5jeUlzbyIsImN1cnJlbmN5TmFtZSIsImZvcmNlQ3VycmVuY3lOYW1lRm9yUEhQRW5HQiIsImdldEN1cnJlbmN5TmFtZSIsIm5vcm1hbGl6ZUN1cnJlbmN5TGFiZWwiLCJmbGV4aWZ5Q3NzIiwiZm9ybUNzc0NvbW1vbiIsIm1heExlbmd0aFByZXByb2Nlc3NvciIsIm1heExlbmd0aCIsIm1heE51bWJlclByZXByb2Nlc3NvciIsInNhbml0aXplZFZhbHVlIiwiS2FuYUZvcm0iLCJLYW5hSW5wdXQiLCJLYW5hT3B0aW9ucyIsIkthbmFPcHRpb24iLCJLYW5hU2VsZWN0IiwiS2FuYUlucHV0QW1vdW50IiwiS2FuYUlucHV0U3RlcHBlciIsIkVxdWFsc0xlbmd0aCIsIk1pbkxlbmd0aCIsIk1heExlbmd0aCIsIk1pbk1heExlbmd0aCIsImlzRW1haWxSZWdleCIsIklzRW1haWwiLCJQYXR0ZXJuIiwiaGFzUGF0dGVybiIsIm5vcm1hbGl6ZURhdGVUaW1lIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJpc0RhdGUiLCJJc0RhdGUiLCJNaW5EYXRlIiwiTWF4RGF0ZSIsIk1pbk1heERhdGUiLCJJc0RhdGVEaXNhYmxlZCIsImlzRGlzYWJsZWRGbiIsIkRlZmF1bHRTdWNjZXNzIiwiZXJyb3JPcldhcm5pbmciLCJoYXNFcnJvck9yV2FybmluZyIsImhhc1Nob3duRXJyb3JPcldhcm5pbmciLCJyZXNvbHZlTG9hZGVkIiwiUGhvbmVVdGlsTWFuYWdlciIsImxvYWRMaWJQaG9uZU51bWJlciIsIlBob25lVXRpbCIsImlzTG9hZGVkIiwiaGFzRmVlZGJhY2siLCJyZWdpb25Db2RlIiwiUGhvbmVOdW1iZXIiLCJpbnZhbGlkQ291bnRyeUNvZGUiLCJwbiIsImVudW1WYWx1ZSIsInBvc3NpYmlsaXR5IiwibG9hZENvbXBsZXRlIiwibG9hZGVkIiwibG9hZERlZmF1bHRGZWVkYmFja01lc3NhZ2VzIiwiZm9yTWVzc2FnZXNUb0JlUmVhZHkiLCJnZXRMb2NhbGl6ZWRNZXNzYWdlIiwicmFuZG9tS2V5cyIsIlByb2ZpbGVQYWdlIiwic3VibWl0SGFuZGxlciIsImZvcm1EYXRhIiwidXQiLCJQcm9qZWN0c1BhZ2UiLCJwcm9qZWN0cyIsInByb2oiLCJ0YXNrQ29tcGxldGUiLCJhcmdzRXF1YWwiLCJvbkNvbXBsZXRlIiwiYXV0b1J1biIsImluaXRpYWxWYWx1ZSIsInJ1biIsInF1ZXVlTWljcm90YXNrIiwiaW5pdGlhbCIsIkthbmFsb2FXaW5kb3dsZXQiLCJvYmplY3RPckFycmF5IiwiTU9EVUxFIiwiTk9NT0RVTEUiLCJidW5kbGVLZXlzIiwiZW5zdXJlQnVuZGxlIiwiZW5zdXJlUm91dGUiLCJyb3V0ZSIsInBhdGgiLCJidW5kbGUiLCJzdHJpbmdLZXlzIiwiaXNPYmplY3QiLCJvdmVycmlkZGVuUHJvcCIsIndhcm4iLCJlbnN1cmVSb3V0ZXMiLCJyb3V0ZXMiLCJsb2FkU2NyaXB0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiX19keW5hbWljSW1wb3J0TG9hZGVkIiwiZmlyZVJvdXRlckV2ZW50IiwiZ2V0Tm90Rm91bmRFcnJvciIsImNvbnRleHQiLCJwYXRobmFtZSIsIm5vdEZvdW5kUmVzdWx0IiwidmFhZGluUm91dGVyR2xvYmFsQ2xpY2tIYW5kbGVyIiwiZGVmYXVsdFByZXZlbnRlZCIsInNoaWZ0S2V5IiwiY3RybEtleSIsIm1ldGFLZXkiLCJhbmNob3IiLCJjb21wb3NlZFBhdGgiLCJub2RlTmFtZSIsIm9yaWdpbiIsInBvcnQiLCJob3N0bmFtZSIsImdldEFuY2hvck9yaWdpbiIsInNlYXJjaCIsInNjcm9sbFRvIiwiQ0xJQ0siLCJhY3RpdmF0ZSIsImluYWN0aXZhdGUiLCJ2YWFkaW5Sb3V0ZXJHbG9iYWxQb3BzdGF0ZUhhbmRsZXIiLCJQb3BTdGF0ZUV2ZW50IiwiaW5UeXBlIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJQT1BTVEFURSIsInBhdGhUb1JlZ2V4cF8xIiwicGF0aFRvUmVnZXhwJDEiLCJkZWxpbWl0ZXIiLCJvcHRpb25hbCIsInJlcGVhdCIsInBhcnRpYWwiLCJyZWdleHBUb1JlZ2V4cCIsImZsYWdzIiwiYXJyYXlUb1JlZ2V4cCIsInRva2Vuc1RvUmVnRXhwIiwic3RyaW5nVG9SZWdleHAiLCJwYXJzZV8xIiwidG9rZW5zVG9GdW5jdGlvbl8xIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwXzEiLCJERUZBVUxUX0RFTElNSVRFUiIsIkRFRkFVTFRfREVMSU1JVEVSUyIsIlBBVEhfUkVHRVhQIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlcnMiLCJwYXRoRXNjYXBlZCIsImVzY2FwZWQiLCJtb2RpZmllciIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic2VnbWVudCIsInNlbnNpdGl2ZSIsInN0cmljdCIsImlzRW5kRGVsaW1pdGVkIiwiY29tcGlsZSIsImNhY2hlJDEiLCJkZWNvZGVQYXJhbSIsImRlY29kZVVSSUNvbXBvbmVudCIsIm1hdGNoUm91dGUiLCJpZ25vcmVMZWFkaW5nU2xhc2giLCJwYXJlbnRLZXlzIiwicGFyZW50UGFyYW1zIiwiY2hpbGRNYXRjaGVzIiwiY2hpbGRJbmRleCIsInJvdXRlcGF0aCIsInJvdXRlVG9Ta2lwIiwiX19jaGlsZHJlbiIsImV4YWN0IiwiY2FjaGVLZXkiLCJyZWdleHAiLCJtYXRjaFBhdGgiLCJjaGlsZFJvdXRlIiwibWF0Y2hlZExlbmd0aCIsImNoaWxkTWF0Y2giLCJyZXNvbHZlUm91dGUiLCJSZXNvbHZlciIsImVycm9ySGFuZGxlciIsIl9fc3ludGhldGljIiwiZ2V0Um91dGVzIiwic2V0Um91dGVzIiwibmV3Um91dGVzIiwiYWRkUm91dGVzIiwicmVtb3ZlUm91dGVzIiwicGF0aG5hbWVPckNvbnRleHQiLCJfX25vcm1hbGl6ZVBhdGhuYW1lIiwibmV4dE1hdGNoZXMiLCJjdXJyZW50Q29udGV4dCIsInByZXZSZXN1bHQiLCJwYXJlbnRSb3V0ZSIsImlzQ2hpbGRSb3V0ZSIsImNoYWluIiwidXBkYXRlQ2hhaW5Gb3JSb3V0ZSIsInJlc29sdXRpb24iLCJyb3V0ZVBhdGgiLCJnZW5lcmF0ZUVycm9yTWVzc2FnZSIsIkRPTUV4Y2VwdGlvbiIsIl9fY3JlYXRlVXJsIiwiX19lZmZlY3RpdmVCYXNlVXJsIiwibm9ybWFsaXplZFVybCIsInBhdGhUb1JlZ2V4cCIsImNhY2hlIiwiY2FjaGVSb3V0ZXMiLCJyb3V0ZXNCeU5hbWUiLCJjb21wb25lbnQiLCJnZXRSb3V0ZUJ5TmFtZSIsInJvdXRlTmFtZSIsImdldFJvdXRlUGF0aCIsImdlbmVyYXRlVXJscyIsInJvdXRlciIsImZ1bGxQYXRoIiwicnQiLCJ0b1BhdGgiLCJzdHJpbmdpZnlRdWVyeVBhcmFtcyIsInF1ZXJ5UGFyYW1zIiwidHJpZ2dlcnMiLCJzZXROYXZpZ2F0aW9uVHJpZ2dlcnMiLCJuZXdUcmlnZ2VycyIsInRyaWdnZXIiLCJhbmltYXRlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJ3aWxsQW5pbWF0ZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib3R0b20iLCJjYiIsIndhaXRGb3JBbmltYXRpb24iLCJpc1Jlc3VsdE5vdEVtcHR5IiwiY3JlYXRlTG9jYXRpb24iLCJyZWRpcmVjdEZyb20iLCJ1c2VyUGFyYW1zIiwiZ2V0UGF0aG5hbWVGb3JSb3V0ZXIiLCJSb3V0ZXIiLCJnZXRNYXRjaGVkUGF0aCIsImNyZWF0ZVJlZGlyZWN0IiwicnVuQ2FsbGJhY2tJZlBvc3NpYmxlIiwiYW1lbmQiLCJhbWVuZG1lbnRGdW5jdGlvbiIsImFtZW5kbWVudFJlc3VsdCIsInJlbW92ZURvbU5vZGVzIiwib3V0bGV0IiwiYmFzZUVsZW1lbnQiLCJiYXNlSHJlZiIsIl9fcmVzb2x2ZVJvdXRlIiwiTmF2aWdhdGlvblRyaWdnZXIiLCJzZXRUcmlnZ2VycyIsIl9fbGFzdFN0YXJ0ZWRSZW5kZXJJZCIsIl9fbmF2aWdhdGlvbkV2ZW50SGFuZGxlciIsIl9fb25OYXZpZ2F0aW9uRXZlbnQiLCJzZXRPdXRsZXQiLCJfX2NyZWF0ZWRCeVJvdXRlciIsIl9fYWRkZWRCeVJvdXRlciIsImNhbGxiYWNrcyIsImNvcHlDb250ZXh0V2l0aG91dE5leHQiLCJuZXdDaGlsZHJlbiIsImNoaWxkUm91dGVzIiwicHJvY2Vzc05ld0NoaWxkcmVuIiwiY29tbWFuZHMiLCJfX2lzTGF0ZXN0UmVuZGVyIiwiX19lbnN1cmVPdXRsZXQiLCJfX291dGxldCIsImdldE91dGxldCIsInNraXBSZW5kZXIiLCJfX3ByZXZpb3VzQ29udGV4dCIsIl9fdXJsRm9yTmFtZSIsInNob3VsZFVwZGF0ZUhpc3RvcnkiLCJyZW5kZXJJZCIsIl9fcmVuZGVySWQiLCJfX2Z1bGx5UmVzb2x2ZUNoYWluIiwicHJldmlvdXNDb250ZXh0IiwiX191cGRhdGVCcm93c2VySGlzdG9yeSIsIl9fc2tpcEF0dGFjaCIsIl9fY29weVVuY2hhbmdlZEVsZW1lbnRzIiwiX19hZGRBcHBlYXJpbmdDb250ZW50IiwiYW5pbWF0aW9uRG9uZSIsIl9fYW5pbWF0ZUlmTmVlZGVkIiwiX19ydW5PbkFmdGVyRW50ZXJDYWxsYmFja3MiLCJfX3J1bk9uQWZ0ZXJMZWF2ZUNhbGxiYWNrcyIsIl9fcmVtb3ZlRGlzYXBwZWFyaW5nQ29udGVudCIsInRvcE9mVGhlQ2hhaW5Db250ZXh0QmVmb3JlUmVkaXJlY3RzIiwiY29udGV4dEJlZm9yZVJlZGlyZWN0cyIsIl9fZmluZENvbXBvbmVudENvbnRleHRBZnRlckFsbFJlZGlyZWN0cyIsImNvbnRleHRBZnRlclJlZGlyZWN0cyIsInRvcE9mVGhlQ2hhaW5Db250ZXh0QWZ0ZXJSZWRpcmVjdHMiLCJpc0ZvdW5kIiwiZmluZE5leHRDb250ZXh0SWZBbnkiLCJuZXh0Q29udGV4dCIsIl9fYW1lbmRXaXRoT25CZWZvcmVDYWxsYmFja3MiLCJyZW5kZXJFbGVtZW50IiwiX19yZWRpcmVjdCIsIl9fcmVkaXJlY3RDb3VudCIsInN0cmluZ1R5cGUiLCJsb2dWYWx1ZSIsImNvbnRleHRXaXRoRnVsbENoYWluIiwiX19ydW5PbkJlZm9yZUNhbGxiYWNrcyIsImFtZW5kZWRDb250ZXh0IiwibmV3Q29udGV4dCIsInByZXZpb3VzQ2hhaW4iLCJuZXdDaGFpbiIsInByZXZlbnQiLCJfX2RpdmVyZ2VkQ2hhaW5JbmRleCIsIl9faXNSZXVzYWJsZUVsZW1lbnQiLCJfX3J1bk9uQmVmb3JlTGVhdmVDYWxsYmFja3MiLCJfX3J1bk9uQmVmb3JlRW50ZXJDYWxsYmFja3MiLCJjaGFpbkVsZW1lbnQiLCJhZnRlckxlYXZlRnVuY3Rpb24iLCJiZWZvcmVFbnRlckZ1bmN0aW9uIiwib3RoZXJFbGVtZW50IiwicmVkaXJlY3REYXRhIiwiY291bnRlciIsInVybEZvclBhdGgiLCJjaGFuZ2VTdGF0ZSIsImhpc3RvcnkiLCJkZWVwZXN0Q29tbW9uUGFyZW50IiwidW5jaGFuZ2VkRWxlbWVudCIsIl9fcmVtb3ZlQXBwZWFyaW5nQ29udGVudCIsIl9fYXBwZWFyaW5nQ29udGVudCIsIl9fZGlzYXBwZWFyaW5nQ29udGVudCIsInBhcmVudEVsZW1lbnQiLCJlbGVtZW50VG9BZGQiLCJ0YXJnZXRDb250ZXh0IiwiY3VycmVudENvbXBvbmVudCIsIm9uQWZ0ZXJMZWF2ZSIsIm9uQWZ0ZXJFbnRlciIsImxlYXZlIiwiZW50ZXIiLCJ1cmxGb3JOYW1lIiwiZ28iLCJERVZfTU9ERV9DT0RFX1JFR0VYUCIsIkZsb3dDbGllbnRzIiwiVmFhZGluIiwiRmxvdyIsImNsaWVudHMiLCJ1bmNvbW1lbnRBbmRSdW4iLCJkZXZlbG9wbWVudE1vZGUiLCJwcm9kdWN0aW9uTW9kZSIsImlzRGV2ZWxvcG1lbnRNb2RlIiwicmVnaXN0cmF0aW9ucyIsInJ1bklmRGV2ZWxvcG1lbnRNb2RlIiwiTmV3UHJvamVjdFBhZ2UiLCJjYWxjdWxhdGVkQ29zdCIsInByb2plY3RDb3N0IiwiQ29udHJhY3RzUGFnZSIsImNvbnRyYWN0QWJpIiwiY29udHJhY3RzUmVwb3NpdG9yeUxlbmd0aCIsImNvbnRyYWN0cyIsImdldENvbnRyYWN0cyIsImhhbmRsZXJTZXR1cCIsImhhbmRsZXIiLCJfZXZlbnRIYW5kbGVycyIsImV2ZW50SGFuZGxlciIsImRlc2NyaXB0b3IiLCJNb2R1bGVGb3JtIiwia2FuYUZvcm0iLCJtb2RlbFVwZGF0ZWQiLCJzZXRQYXJlbnQiLCJyZWYiLCJsb2FkIiwicmF3RGF0YSIsImxvYWRlZFJhd0RhdGEiLCJpbml0aWFsaXplckFCSSIsImZvcm1hdEhvb2siLCJhc1Vwc3RyZWFtIiwibG9jYWwiLCJNYXhVaW50MjU2Iiwic2V0dGVyIiwiYXR0ciIsImZhbGx0aHJvdWdoIiwiZWxlbWVudFByb3ZpZGVyIiwib3JpZ2luYWxTZXR0ZXIiLCJvcmlnaW5hbEdldHRlciIsImdldFRoaXNJbm5lckVsZW1lbnQiLCJnZXRJbm5lckVsZW1lbnQiLCJQdWxwaXRvQmFzZSIsImludmFsaWQiLCJlbGVtZW50SW50ZXJuYWxzIiwiYXR0YWNoSW50ZXJuYWxzIiwiaGFuZGxlSW5wdXREaXNjb25uZWN0ZWQiLCJoYW5kbGVJbnB1dENvbm5lY3RlZCIsIm9yaWdpbmFsQ29ubmVjdGVkQ2FsbGJhY2siLCJJbnB1dFR5cGUySW5wdXRUYWciLCJDSElMREZVTF9JTlBVVF9UQUdTIiwiUHVscGl0b0lucHV0IiwiaW5wdXRFbGVtZW50IiwiZ2V0U2VsZWN0ZWRPcHRpb25zIiwic2VsZWN0ZWQiLCJzZWwiLCJvcHQiLCJzZWxFbGVtIiwicXVlcnlTZWxlY3RvckFsbCIsIkVSQzIwX0ZPUk1fVEFHIiwiRVJDMjBGb3JtIiwibmV3Q29udHJhY3RCYXNlV2luZG93bGV0IiwiZm9ybUJhc2UiLCJfbmFtZSIsImNvbXBpbGVNb2R1bGVQYXJhbWV0ZXJzIiwibW9kZWwiLCJfc3ltYm9sIiwiX2RlY2ltYWxzIiwiX3N1cHBseSIsIkVxdWFsT3JNb3JlVGhhbiIsInNtYWxsIiwiRVJDMjBfTUlOVF9CVVJOX0ZPUk1fVEFHIiwiRVJDMjBNaW50QnVybkZvcm0iLCJlcmMyMEZvcm0iLCJtYXhTdXBwbHkiLCJCQVNJQ19NT0RVTEVTIiwiY3VzdG9tRWxlbWVudCIsIlBMVUdJTl9NT0RVTEVTIiwiY3QiLCJodCIsIl8kQ2J0IiwiXyRDWCIsIk1vZHVsZXNXaW5kb3dsZXQiLCJmb3JtQ2FjaGUiLCJvbmNoYWluTW9kdWxlcyIsInN0YXRlUmVjb3JkcyIsIm1vZHVsZUxpc3RDaGFuZ2VkIiwib25DbGlja1JhZGlvSGFuZGxlciIsInJhZGlvIiwiY3VycmVudFRhcmdldCIsImdldFNlbGVjdGVkTW9kdWxlcyIsImdldE1vZHVsZUZvcm0iLCJtb2QiLCJzZWxlY3RlZE1vZHVsZXMiLCJiYXNlTW9kdWxlIiwic2Nhbk1vZHVsZSIsImltcGxlbWVudGF0aW9uIiwiZ2V0QWN0aXZlTW9kdWxlIiwib25jaGFpbiIsIm1vZHVsZUVudHJ5IiwiYmFzaWMiLCJzY2FuIiwiZ2VuQ2hlY2tib3giLCJsb2FkaW5nIiwiVU5JTlNUQUxMIiwidXBzdHJlYW1EYXRhIiwiUkVJTklUSUFMSVpFIiwiSU5TVEFMTCIsImJhc2VNb2R1bGVQYXJhbXMiLCJvdGhlck1vZHVsZXMiLCJhdmFpbGFibGVNb2R1bGVzIiwiQ29udHJhY3RQYWdlIiwiYmFzaWNNb2R1bGVzIiwiYWxsTW9kdWxlcyIsIm1vZHVsZXNMaXN0IiwiZm9ybVdpbmRvd2xldCIsInByaWNlIiwiZXhwYW5kZWRNb2RlIiwidXNlIiwib3BzIiwiZ2V0Um9vdCIsImdldEludm9pY2UiLCJpbnZvaWNlIiwicHJvamVjdEFkZHJlc3MiLCJjYXB0dXJlU3VibWl0IiwiZXhwYW5kRm9ybSIsImJhc2VUeXBlU2VsZWN0ZWQiLCJjb250cmFjdFR5cGUiLCJzZWxlY3RlZEJhc2VNb2R1bGUiLCJzZWxlY3RlZE1vZHVsZXNVcGRhdGVkIiwicmVjYWxjdWxhdGVQcmljZSIsIm9wZXJhdGlvbnMiLCJFRElUX0NPTlRSQUNUIiwiZm9ybXMiLCJjb250cmFjdE5hbWUiLCJDb250cmFjdEJhc2VXaW5kb3dsZXQiLCJzZWxlY3RDb250cmFjdFR5cGUiLCJtb2R1bGVMaXN0IiwicHJlbGltaW5hcnlDb3N0IiwiYnV0dG9uQ29udGVudHMiLCJIb21lUGFnZSIsIm5hdlJvdXRlcyIsImljb24iLCJjdHgiLCJjbWQiLCJjb250cmFjdHNQYWdlIiwiY29udHJhY3RQYWdlIiwiS2FuYU5hdkJ1dHRvbiIsIkthbmFsb2FOYXZpZ2F0aW9uIiwib3BlbmVkIiwiS2FuYVdhbGxldEluZm8iLCJjb25uZWN0QnV0dG9uIiwiS2FuYWxvYURpc3BsYXkiLCJTdXBwcmVzc2VkRXJyb3IiLCJJY29uIiwiTWRJY29uIiwiZGVjb3JhdG9ycyIsImRlc2MiLCJkZWNvcmF0ZSIsIkthbmFsb2FBcHAiLCJpbm5lclRleHQiXSwic291cmNlUm9vdCI6IiJ9