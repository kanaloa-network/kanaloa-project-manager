"use strict";
(self["webpackChunkkanaloa_project_manager"] = self["webpackChunkkanaloa_project_manager"] || []).push([["node_modules_lion_validate-messages_translations_it_js"],{

/***/ "./node_modules/@lion/validate-messages/translations/it.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@lion/validate-messages/translations/it.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  error: {
    Required: 'Inserire anche un(a) {fieldName}.',
    EqualsLength: 'Inserire un(a) {fieldName} corretto(a) di esattamente {params} caratteri.',
    MinLength: 'Inserire un(a) {fieldName} corretto(a) (almeno {params}).',
    MaxLength: 'Inserire un(a) {fieldName} corretto(a) (fino a {params} caratteri).',
    MinMaxLength:
      'Inserire un(a) {fieldName} corretto(a) (tra {params.min} e {params.max} caratteri).',
    Pattern: 'Inserire un valore valido per {fieldName}.',
    IsNumber: 'Inserire un valore valido per {fieldName}.',
    MinNumber: 'Inserire un(a) {fieldName} superiore a {params}.',
    MaxNumber: 'Inserire un(a) {fieldName} inferiore a {params}.',
    MinMaxNumber: 'Inserire un(a) {fieldName} tra {params.min} e {params.max}.',
    IsDate: 'Inserire la data (GG MM AAAA).',
    MinDate: 'Inserire un(a) {fieldName} dopo {params, date, YYYYMMDD}.',
    MaxDate: 'Inserire un(a) {fieldName} prima di {params, date, YYYYMMDD}.',
    MinMaxDate:
      'Inserire un(a) {fieldName} tra {params.min, date, YYYYMMDD} e {params.max, date, YYYYMMDD}.',
    IsDateDisabled: "ТQuesta data non è disponibile, sceglierne un'altra.",
    IsEmail: 'Inserire un valore valido per {fieldName} nel formato "name@example.com".',
  },
  warning: {
    Required: 'Inserire anche un(a) {fieldName}.',
    EqualsLength: 'Inserire un(a) {fieldName} corretto(a) di esattamente {params} caratteri.',
    MinLength: 'Inserire un(a) {fieldName} corretto(a) (almeno {params}).',
    MaxLength: 'Inserire un(a) {fieldName} corretto(a) (fino a {params} caratteri).',
    MinMaxLength:
      'Inserire un(a) {fieldName} corretto(a) (tra {params.min} e {params.max} caratteri).',
    IsNumber: 'Inserire un valore valido per {fieldName}.',
    MinNumber: 'Inserire un(a) {fieldName} superiore a {params}.',
    MaxNumber: 'Inserire un(a) {fieldName} inferiore a {params}.',
    MinMaxNumber: 'Inserire un(a) {fieldName} tra {params.min} e {params.max}.',
    IsDate: 'Inserire la data (GG MM AAAA).',
    MinDate: 'Inserire un(a) {fieldName} dopo {params, date, YYYYMMDD}.',
    MaxDate: 'Inserire un(a) {fieldName} prima di {params, date, YYYYMMDD}.',
    MinMaxDate:
      'Inserire un(a) {fieldName} tra {params.min, date, YYYYMMDD} e {params.max, date, YYYYMMDD}.',
    IsDateDisabled: "ТQuesta data non è disponibile, sceglierne un'altra.",
    IsEmail: 'Inserire un valore valido per {fieldName} nel formato "name@example.com".',
  },
  success: {
    DefaultOk: 'OK',
    RandomOk:
      'success.DefaultOk,success.Correct,success.Succeeded,success.Ok,success.ThisIsRight,success.Changed,success.OkCorrect',
    Correct: 'Corretto',
    Succeeded: 'Operazione completata',
    Ok: 'Ok!',
    ThisIsRight: 'Operazione corretta.',
    Changed: 'Modifica effettuata',
    OkCorrect: 'Ok, corretto.',
  },
});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2xpb25fdmFsaWRhdGUtbWVzc2FnZXNfdHJhbnNsYXRpb25zX2l0X2pzLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsaUVBQWU7QUFDZjtBQUNBLHFDQUFxQyxVQUFVO0FBQy9DLG1DQUFtQyxXQUFXLDRCQUE0QixRQUFRO0FBQ2xGLGdDQUFnQyxXQUFXLHFCQUFxQixPQUFPO0FBQ3ZFLGdDQUFnQyxXQUFXLHFCQUFxQixRQUFRO0FBQ3hFO0FBQ0EsdUJBQXVCLFdBQVcsa0JBQWtCLFlBQVksR0FBRyxZQUFZO0FBQy9FLDZDQUE2QyxVQUFVO0FBQ3ZELDhDQUE4QyxVQUFVO0FBQ3hELGdDQUFnQyxXQUFXLGFBQWEsT0FBTztBQUMvRCxnQ0FBZ0MsV0FBVyxhQUFhLE9BQU87QUFDL0QsbUNBQW1DLFdBQVcsS0FBSyxZQUFZLEdBQUcsV0FBVztBQUM3RTtBQUNBLDhCQUE4QixXQUFXLE1BQU0sdUJBQXVCO0FBQ3RFLDhCQUE4QixXQUFXLFVBQVUsdUJBQXVCO0FBQzFFO0FBQ0EsdUJBQXVCLFdBQVcsS0FBSyw0QkFBNEIsR0FBRywyQkFBMkI7QUFDakc7QUFDQSw2Q0FBNkMsV0FBVztBQUN4RCxHQUFHO0FBQ0g7QUFDQSxxQ0FBcUMsVUFBVTtBQUMvQyxtQ0FBbUMsV0FBVyw0QkFBNEIsUUFBUTtBQUNsRixnQ0FBZ0MsV0FBVyxxQkFBcUIsT0FBTztBQUN2RSxnQ0FBZ0MsV0FBVyxxQkFBcUIsUUFBUTtBQUN4RTtBQUNBLHVCQUF1QixXQUFXLGtCQUFrQixZQUFZLEdBQUcsWUFBWTtBQUMvRSw4Q0FBOEMsVUFBVTtBQUN4RCxnQ0FBZ0MsV0FBVyxhQUFhLE9BQU87QUFDL0QsZ0NBQWdDLFdBQVcsYUFBYSxPQUFPO0FBQy9ELG1DQUFtQyxXQUFXLEtBQUssWUFBWSxHQUFHLFdBQVc7QUFDN0U7QUFDQSw4QkFBOEIsV0FBVyxNQUFNLHVCQUF1QjtBQUN0RSw4QkFBOEIsV0FBVyxVQUFVLHVCQUF1QjtBQUMxRTtBQUNBLHVCQUF1QixXQUFXLEtBQUssNEJBQTRCLEdBQUcsMkJBQTJCO0FBQ2pHO0FBQ0EsNkNBQTZDLFdBQVc7QUFDeEQsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy9pdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gIGVycm9yOiB7XG4gICAgUmVxdWlyZWQ6ICdJbnNlcmlyZSBhbmNoZSB1bihhKSB7ZmllbGROYW1lfS4nLFxuICAgIEVxdWFsc0xlbmd0aDogJ0luc2VyaXJlIHVuKGEpIHtmaWVsZE5hbWV9IGNvcnJldHRvKGEpIGRpIGVzYXR0YW1lbnRlIHtwYXJhbXN9IGNhcmF0dGVyaS4nLFxuICAgIE1pbkxlbmd0aDogJ0luc2VyaXJlIHVuKGEpIHtmaWVsZE5hbWV9IGNvcnJldHRvKGEpIChhbG1lbm8ge3BhcmFtc30pLicsXG4gICAgTWF4TGVuZ3RoOiAnSW5zZXJpcmUgdW4oYSkge2ZpZWxkTmFtZX0gY29ycmV0dG8oYSkgKGZpbm8gYSB7cGFyYW1zfSBjYXJhdHRlcmkpLicsXG4gICAgTWluTWF4TGVuZ3RoOlxuICAgICAgJ0luc2VyaXJlIHVuKGEpIHtmaWVsZE5hbWV9IGNvcnJldHRvKGEpICh0cmEge3BhcmFtcy5taW59IGUge3BhcmFtcy5tYXh9IGNhcmF0dGVyaSkuJyxcbiAgICBQYXR0ZXJuOiAnSW5zZXJpcmUgdW4gdmFsb3JlIHZhbGlkbyBwZXIge2ZpZWxkTmFtZX0uJyxcbiAgICBJc051bWJlcjogJ0luc2VyaXJlIHVuIHZhbG9yZSB2YWxpZG8gcGVyIHtmaWVsZE5hbWV9LicsXG4gICAgTWluTnVtYmVyOiAnSW5zZXJpcmUgdW4oYSkge2ZpZWxkTmFtZX0gc3VwZXJpb3JlIGEge3BhcmFtc30uJyxcbiAgICBNYXhOdW1iZXI6ICdJbnNlcmlyZSB1bihhKSB7ZmllbGROYW1lfSBpbmZlcmlvcmUgYSB7cGFyYW1zfS4nLFxuICAgIE1pbk1heE51bWJlcjogJ0luc2VyaXJlIHVuKGEpIHtmaWVsZE5hbWV9IHRyYSB7cGFyYW1zLm1pbn0gZSB7cGFyYW1zLm1heH0uJyxcbiAgICBJc0RhdGU6ICdJbnNlcmlyZSBsYSBkYXRhIChHRyBNTSBBQUFBKS4nLFxuICAgIE1pbkRhdGU6ICdJbnNlcmlyZSB1bihhKSB7ZmllbGROYW1lfSBkb3BvIHtwYXJhbXMsIGRhdGUsIFlZWVlNTUREfS4nLFxuICAgIE1heERhdGU6ICdJbnNlcmlyZSB1bihhKSB7ZmllbGROYW1lfSBwcmltYSBkaSB7cGFyYW1zLCBkYXRlLCBZWVlZTU1ERH0uJyxcbiAgICBNaW5NYXhEYXRlOlxuICAgICAgJ0luc2VyaXJlIHVuKGEpIHtmaWVsZE5hbWV9IHRyYSB7cGFyYW1zLm1pbiwgZGF0ZSwgWVlZWU1NRER9IGUge3BhcmFtcy5tYXgsIGRhdGUsIFlZWVlNTUREfS4nLFxuICAgIElzRGF0ZURpc2FibGVkOiBcItCiUXVlc3RhIGRhdGEgbm9uIMOoIGRpc3BvbmliaWxlLCBzY2VnbGllcm5lIHVuJ2FsdHJhLlwiLFxuICAgIElzRW1haWw6ICdJbnNlcmlyZSB1biB2YWxvcmUgdmFsaWRvIHBlciB7ZmllbGROYW1lfSBuZWwgZm9ybWF0byBcIm5hbWVAZXhhbXBsZS5jb21cIi4nLFxuICB9LFxuICB3YXJuaW5nOiB7XG4gICAgUmVxdWlyZWQ6ICdJbnNlcmlyZSBhbmNoZSB1bihhKSB7ZmllbGROYW1lfS4nLFxuICAgIEVxdWFsc0xlbmd0aDogJ0luc2VyaXJlIHVuKGEpIHtmaWVsZE5hbWV9IGNvcnJldHRvKGEpIGRpIGVzYXR0YW1lbnRlIHtwYXJhbXN9IGNhcmF0dGVyaS4nLFxuICAgIE1pbkxlbmd0aDogJ0luc2VyaXJlIHVuKGEpIHtmaWVsZE5hbWV9IGNvcnJldHRvKGEpIChhbG1lbm8ge3BhcmFtc30pLicsXG4gICAgTWF4TGVuZ3RoOiAnSW5zZXJpcmUgdW4oYSkge2ZpZWxkTmFtZX0gY29ycmV0dG8oYSkgKGZpbm8gYSB7cGFyYW1zfSBjYXJhdHRlcmkpLicsXG4gICAgTWluTWF4TGVuZ3RoOlxuICAgICAgJ0luc2VyaXJlIHVuKGEpIHtmaWVsZE5hbWV9IGNvcnJldHRvKGEpICh0cmEge3BhcmFtcy5taW59IGUge3BhcmFtcy5tYXh9IGNhcmF0dGVyaSkuJyxcbiAgICBJc051bWJlcjogJ0luc2VyaXJlIHVuIHZhbG9yZSB2YWxpZG8gcGVyIHtmaWVsZE5hbWV9LicsXG4gICAgTWluTnVtYmVyOiAnSW5zZXJpcmUgdW4oYSkge2ZpZWxkTmFtZX0gc3VwZXJpb3JlIGEge3BhcmFtc30uJyxcbiAgICBNYXhOdW1iZXI6ICdJbnNlcmlyZSB1bihhKSB7ZmllbGROYW1lfSBpbmZlcmlvcmUgYSB7cGFyYW1zfS4nLFxuICAgIE1pbk1heE51bWJlcjogJ0luc2VyaXJlIHVuKGEpIHtmaWVsZE5hbWV9IHRyYSB7cGFyYW1zLm1pbn0gZSB7cGFyYW1zLm1heH0uJyxcbiAgICBJc0RhdGU6ICdJbnNlcmlyZSBsYSBkYXRhIChHRyBNTSBBQUFBKS4nLFxuICAgIE1pbkRhdGU6ICdJbnNlcmlyZSB1bihhKSB7ZmllbGROYW1lfSBkb3BvIHtwYXJhbXMsIGRhdGUsIFlZWVlNTUREfS4nLFxuICAgIE1heERhdGU6ICdJbnNlcmlyZSB1bihhKSB7ZmllbGROYW1lfSBwcmltYSBkaSB7cGFyYW1zLCBkYXRlLCBZWVlZTU1ERH0uJyxcbiAgICBNaW5NYXhEYXRlOlxuICAgICAgJ0luc2VyaXJlIHVuKGEpIHtmaWVsZE5hbWV9IHRyYSB7cGFyYW1zLm1pbiwgZGF0ZSwgWVlZWU1NRER9IGUge3BhcmFtcy5tYXgsIGRhdGUsIFlZWVlNTUREfS4nLFxuICAgIElzRGF0ZURpc2FibGVkOiBcItCiUXVlc3RhIGRhdGEgbm9uIMOoIGRpc3BvbmliaWxlLCBzY2VnbGllcm5lIHVuJ2FsdHJhLlwiLFxuICAgIElzRW1haWw6ICdJbnNlcmlyZSB1biB2YWxvcmUgdmFsaWRvIHBlciB7ZmllbGROYW1lfSBuZWwgZm9ybWF0byBcIm5hbWVAZXhhbXBsZS5jb21cIi4nLFxuICB9LFxuICBzdWNjZXNzOiB7XG4gICAgRGVmYXVsdE9rOiAnT0snLFxuICAgIFJhbmRvbU9rOlxuICAgICAgJ3N1Y2Nlc3MuRGVmYXVsdE9rLHN1Y2Nlc3MuQ29ycmVjdCxzdWNjZXNzLlN1Y2NlZWRlZCxzdWNjZXNzLk9rLHN1Y2Nlc3MuVGhpc0lzUmlnaHQsc3VjY2Vzcy5DaGFuZ2VkLHN1Y2Nlc3MuT2tDb3JyZWN0JyxcbiAgICBDb3JyZWN0OiAnQ29ycmV0dG8nLFxuICAgIFN1Y2NlZWRlZDogJ09wZXJhemlvbmUgY29tcGxldGF0YScsXG4gICAgT2s6ICdPayEnLFxuICAgIFRoaXNJc1JpZ2h0OiAnT3BlcmF6aW9uZSBjb3JyZXR0YS4nLFxuICAgIENoYW5nZWQ6ICdNb2RpZmljYSBlZmZldHR1YXRhJyxcbiAgICBPa0NvcnJlY3Q6ICdPaywgY29ycmV0dG8uJyxcbiAgfSxcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=