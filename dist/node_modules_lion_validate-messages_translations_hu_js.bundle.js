"use strict";
(self["webpackChunkkanaloa_project_manager"] = self["webpackChunkkanaloa_project_manager"] || []).push([["node_modules_lion_validate-messages_translations_hu_js"],{

/***/ "./node_modules/@lion/validate-messages/translations/hu.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@lion/validate-messages/translations/hu.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  error: {
    Required: 'Továbbá adjon meg egy {fieldName} értéket.',
    EqualsLength: 'Adjon meg egy helyes {fieldName} értéket (pontosan {params} karakter).',
    MinLength: 'Adjon meg egy helyes {fieldName} értéket (legalább {params}).',
    MaxLength: 'Adjon meg egy helyes {fieldName} értéket (legfeljebb {params} karakter).',
    MinMaxLength:
      'Adjon meg egy helyes {fieldName} értéket ({params.min} és {params.max} karakter között).',
    Pattern: 'Kérjük, adjon meg érvényes {fieldName} értéket.',
    IsNumber: 'Kérjük, adjon meg érvényes {fieldName} értéket.',
    MinNumber: 'Adjon meg egy {params} értéknél nagyobb {fieldName} értéket.',
    MaxNumber: 'Adjon meg egy {params} értéknél alacsonyabb {fieldName} értéket.',
    MinMaxNumber: 'Adjon meg egy {params.min} és {params.max} közötti {fieldName} értéket.',
    IsDate: ' Adja meg a dátumot (ÉÉÉÉ HH NN).',
    MinDate: 'Adjon meg egy {params, date, YYYYMMDD} utáni {fieldName} értéket.',
    MaxDate: 'Adjon meg egy {params, date, YYYYMMDD} előtti {fieldName} értéket.',
    MinMaxDate:
      'Adjon meg egy {params.min, date, YYYYMMDD} és {params.max, date, YYYYMMDD} közötti {fieldName} értéket.',
    IsDateDisabled: 'Ez a dátum nem áll rendelkezésre, válasszon egy másikat.',
    IsEmail:
      'Adjon meg egy érvényes {fieldName} értéket, a következő formátumban: „név@példa.com”.',
  },
  warning: {
    Required: 'Továbbá adjon meg egy {fieldName} értéket.',
    EqualsLength: 'Adjon meg egy helyes {fieldName} értéket (pontosan {params} karakter).',
    MinLength: 'Adjon meg egy helyes {fieldName} értéket (legalább {params}).',
    MaxLength: 'Adjon meg egy helyes {fieldName} értéket (legfeljebb {params} karakter).',
    MinMaxLength:
      'Adjon meg egy helyes {fieldName} értéket ({params.min} és {params.max} karakter között).',
    IsNumber: 'Kérjük, adjon meg érvényes {fieldName} értéket.',
    MinNumber: 'Adjon meg egy {params} értéknél nagyobb {fieldName} értéket.',
    MaxNumber: 'Adjon meg egy {params} értéknél alacsonyabb {fieldName} értéket.',
    MinMaxNumber: 'Adjon meg egy {params.min} és {params.max} közötti {fieldName} értéket.',
    IsDate: ' Adja meg a dátumot (ÉÉÉÉ HH NN).',
    MinDate: 'Adjon meg egy {params, date, YYYYMMDD} utáni {fieldName} értéket.',
    MaxDate: 'Adjon meg egy {params, date, YYYYMMDD} előtti {fieldName} értéket.',
    MinMaxDate:
      'Adjon meg egy {params.min, date, YYYYMMDD} és {params.max, date, YYYYMMDD} közötti {fieldName} értéket.',
    IsDateDisabled: 'Ez a dátum nem áll rendelkezésre, válasszon egy másikat.',
    IsEmail:
      'Adjon meg egy érvényes {fieldName} értéket, a következő formátumban: „név@példa.com”.',
  },
  success: {
    DefaultOk: 'Rendben',
    RandomOk:
      'success.DefaultOk,success.Correct,success.Succeeded,success.Ok,success.ThisIsRight,success.Changed,success.OkCorrect',
    Correct: 'Helyes',
    Succeeded: 'Sikerült',
    Ok: 'OK!',
    ThisIsRight: 'Ez helyes.',
    Changed: 'Módosítva!',
    OkCorrect: 'OK, helyes.',
  },
});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2xpb25fdmFsaWRhdGUtbWVzc2FnZXNfdHJhbnNsYXRpb25zX2h1X2pzLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsaUVBQWU7QUFDZjtBQUNBLHNDQUFzQyxXQUFXO0FBQ2pELHlDQUF5QyxXQUFXLG1CQUFtQixRQUFRO0FBQy9FLHNDQUFzQyxXQUFXLG1CQUFtQixPQUFPO0FBQzNFLHNDQUFzQyxXQUFXLHFCQUFxQixRQUFRO0FBQzlFO0FBQ0EsNkJBQTZCLFdBQVcsVUFBVSxZQUFZLElBQUksWUFBWTtBQUM5RSwwQ0FBMEMsV0FBVztBQUNyRCwyQ0FBMkMsV0FBVztBQUN0RCwrQkFBK0IsUUFBUSxrQkFBa0IsV0FBVztBQUNwRSwrQkFBK0IsUUFBUSxzQkFBc0IsV0FBVztBQUN4RSxrQ0FBa0MsWUFBWSxJQUFJLFlBQVksU0FBUyxXQUFXO0FBQ2xGO0FBQ0EsNkJBQTZCLHdCQUF3QixPQUFPLFdBQVc7QUFDdkUsNkJBQTZCLHdCQUF3QixRQUFRLFdBQVc7QUFDeEU7QUFDQSxzQkFBc0IsNEJBQTRCLElBQUksNEJBQTRCLFNBQVMsV0FBVztBQUN0RztBQUNBO0FBQ0EsK0JBQStCLFdBQVc7QUFDMUMsR0FBRztBQUNIO0FBQ0Esc0NBQXNDLFdBQVc7QUFDakQseUNBQXlDLFdBQVcsbUJBQW1CLFFBQVE7QUFDL0Usc0NBQXNDLFdBQVcsbUJBQW1CLE9BQU87QUFDM0Usc0NBQXNDLFdBQVcscUJBQXFCLFFBQVE7QUFDOUU7QUFDQSw2QkFBNkIsV0FBVyxVQUFVLFlBQVksSUFBSSxZQUFZO0FBQzlFLDJDQUEyQyxXQUFXO0FBQ3RELCtCQUErQixRQUFRLGtCQUFrQixXQUFXO0FBQ3BFLCtCQUErQixRQUFRLHNCQUFzQixXQUFXO0FBQ3hFLGtDQUFrQyxZQUFZLElBQUksWUFBWSxTQUFTLFdBQVc7QUFDbEY7QUFDQSw2QkFBNkIsd0JBQXdCLE9BQU8sV0FBVztBQUN2RSw2QkFBNkIsd0JBQXdCLFFBQVEsV0FBVztBQUN4RTtBQUNBLHNCQUFzQiw0QkFBNEIsSUFBSSw0QkFBNEIsU0FBUyxXQUFXO0FBQ3RHO0FBQ0E7QUFDQSwrQkFBK0IsV0FBVztBQUMxQyxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL2h1LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgZXJyb3I6IHtcbiAgICBSZXF1aXJlZDogJ1RvdsOhYmLDoSBhZGpvbiBtZWcgZWd5IHtmaWVsZE5hbWV9IMOpcnTDqWtldC4nLFxuICAgIEVxdWFsc0xlbmd0aDogJ0Fkam9uIG1lZyBlZ3kgaGVseWVzIHtmaWVsZE5hbWV9IMOpcnTDqWtldCAocG9udG9zYW4ge3BhcmFtc30ga2FyYWt0ZXIpLicsXG4gICAgTWluTGVuZ3RoOiAnQWRqb24gbWVnIGVneSBoZWx5ZXMge2ZpZWxkTmFtZX0gw6lydMOpa2V0IChsZWdhbMOhYmIge3BhcmFtc30pLicsXG4gICAgTWF4TGVuZ3RoOiAnQWRqb24gbWVnIGVneSBoZWx5ZXMge2ZpZWxkTmFtZX0gw6lydMOpa2V0IChsZWdmZWxqZWJiIHtwYXJhbXN9IGthcmFrdGVyKS4nLFxuICAgIE1pbk1heExlbmd0aDpcbiAgICAgICdBZGpvbiBtZWcgZWd5IGhlbHllcyB7ZmllbGROYW1lfSDDqXJ0w6lrZXQgKHtwYXJhbXMubWlufSDDqXMge3BhcmFtcy5tYXh9IGthcmFrdGVyIGvDtnrDtnR0KS4nLFxuICAgIFBhdHRlcm46ICdLw6lyasO8aywgYWRqb24gbWVnIMOpcnbDqW55ZXMge2ZpZWxkTmFtZX0gw6lydMOpa2V0LicsXG4gICAgSXNOdW1iZXI6ICdLw6lyasO8aywgYWRqb24gbWVnIMOpcnbDqW55ZXMge2ZpZWxkTmFtZX0gw6lydMOpa2V0LicsXG4gICAgTWluTnVtYmVyOiAnQWRqb24gbWVnIGVneSB7cGFyYW1zfSDDqXJ0w6lrbsOpbCBuYWd5b2JiIHtmaWVsZE5hbWV9IMOpcnTDqWtldC4nLFxuICAgIE1heE51bWJlcjogJ0Fkam9uIG1lZyBlZ3kge3BhcmFtc30gw6lydMOpa27DqWwgYWxhY3NvbnlhYmIge2ZpZWxkTmFtZX0gw6lydMOpa2V0LicsXG4gICAgTWluTWF4TnVtYmVyOiAnQWRqb24gbWVnIGVneSB7cGFyYW1zLm1pbn0gw6lzIHtwYXJhbXMubWF4fSBrw7Z6w7Z0dGkge2ZpZWxkTmFtZX0gw6lydMOpa2V0LicsXG4gICAgSXNEYXRlOiAnIEFkamEgbWVnIGEgZMOhdHVtb3QgKMOJw4nDicOJIEhIIE5OKS4nLFxuICAgIE1pbkRhdGU6ICdBZGpvbiBtZWcgZWd5IHtwYXJhbXMsIGRhdGUsIFlZWVlNTUREfSB1dMOhbmkge2ZpZWxkTmFtZX0gw6lydMOpa2V0LicsXG4gICAgTWF4RGF0ZTogJ0Fkam9uIG1lZyBlZ3kge3BhcmFtcywgZGF0ZSwgWVlZWU1NRER9IGVsxZF0dGkge2ZpZWxkTmFtZX0gw6lydMOpa2V0LicsXG4gICAgTWluTWF4RGF0ZTpcbiAgICAgICdBZGpvbiBtZWcgZWd5IHtwYXJhbXMubWluLCBkYXRlLCBZWVlZTU1ERH0gw6lzIHtwYXJhbXMubWF4LCBkYXRlLCBZWVlZTU1ERH0ga8O2esO2dHRpIHtmaWVsZE5hbWV9IMOpcnTDqWtldC4nLFxuICAgIElzRGF0ZURpc2FibGVkOiAnRXogYSBkw6F0dW0gbmVtIMOhbGwgcmVuZGVsa2V6w6lzcmUsIHbDoWxhc3N6b24gZWd5IG3DoXNpa2F0LicsXG4gICAgSXNFbWFpbDpcbiAgICAgICdBZGpvbiBtZWcgZWd5IMOpcnbDqW55ZXMge2ZpZWxkTmFtZX0gw6lydMOpa2V0LCBhIGvDtnZldGtlesWRIGZvcm3DoXR1bWJhbjog4oCebsOpdkBww6lsZGEuY29t4oCdLicsXG4gIH0sXG4gIHdhcm5pbmc6IHtcbiAgICBSZXF1aXJlZDogJ1RvdsOhYmLDoSBhZGpvbiBtZWcgZWd5IHtmaWVsZE5hbWV9IMOpcnTDqWtldC4nLFxuICAgIEVxdWFsc0xlbmd0aDogJ0Fkam9uIG1lZyBlZ3kgaGVseWVzIHtmaWVsZE5hbWV9IMOpcnTDqWtldCAocG9udG9zYW4ge3BhcmFtc30ga2FyYWt0ZXIpLicsXG4gICAgTWluTGVuZ3RoOiAnQWRqb24gbWVnIGVneSBoZWx5ZXMge2ZpZWxkTmFtZX0gw6lydMOpa2V0IChsZWdhbMOhYmIge3BhcmFtc30pLicsXG4gICAgTWF4TGVuZ3RoOiAnQWRqb24gbWVnIGVneSBoZWx5ZXMge2ZpZWxkTmFtZX0gw6lydMOpa2V0IChsZWdmZWxqZWJiIHtwYXJhbXN9IGthcmFrdGVyKS4nLFxuICAgIE1pbk1heExlbmd0aDpcbiAgICAgICdBZGpvbiBtZWcgZWd5IGhlbHllcyB7ZmllbGROYW1lfSDDqXJ0w6lrZXQgKHtwYXJhbXMubWlufSDDqXMge3BhcmFtcy5tYXh9IGthcmFrdGVyIGvDtnrDtnR0KS4nLFxuICAgIElzTnVtYmVyOiAnS8OpcmrDvGssIGFkam9uIG1lZyDDqXJ2w6lueWVzIHtmaWVsZE5hbWV9IMOpcnTDqWtldC4nLFxuICAgIE1pbk51bWJlcjogJ0Fkam9uIG1lZyBlZ3kge3BhcmFtc30gw6lydMOpa27DqWwgbmFneW9iYiB7ZmllbGROYW1lfSDDqXJ0w6lrZXQuJyxcbiAgICBNYXhOdW1iZXI6ICdBZGpvbiBtZWcgZWd5IHtwYXJhbXN9IMOpcnTDqWtuw6lsIGFsYWNzb255YWJiIHtmaWVsZE5hbWV9IMOpcnTDqWtldC4nLFxuICAgIE1pbk1heE51bWJlcjogJ0Fkam9uIG1lZyBlZ3kge3BhcmFtcy5taW59IMOpcyB7cGFyYW1zLm1heH0ga8O2esO2dHRpIHtmaWVsZE5hbWV9IMOpcnTDqWtldC4nLFxuICAgIElzRGF0ZTogJyBBZGphIG1lZyBhIGTDoXR1bW90ICjDicOJw4nDiSBISCBOTikuJyxcbiAgICBNaW5EYXRlOiAnQWRqb24gbWVnIGVneSB7cGFyYW1zLCBkYXRlLCBZWVlZTU1ERH0gdXTDoW5pIHtmaWVsZE5hbWV9IMOpcnTDqWtldC4nLFxuICAgIE1heERhdGU6ICdBZGpvbiBtZWcgZWd5IHtwYXJhbXMsIGRhdGUsIFlZWVlNTUREfSBlbMWRdHRpIHtmaWVsZE5hbWV9IMOpcnTDqWtldC4nLFxuICAgIE1pbk1heERhdGU6XG4gICAgICAnQWRqb24gbWVnIGVneSB7cGFyYW1zLm1pbiwgZGF0ZSwgWVlZWU1NRER9IMOpcyB7cGFyYW1zLm1heCwgZGF0ZSwgWVlZWU1NRER9IGvDtnrDtnR0aSB7ZmllbGROYW1lfSDDqXJ0w6lrZXQuJyxcbiAgICBJc0RhdGVEaXNhYmxlZDogJ0V6IGEgZMOhdHVtIG5lbSDDoWxsIHJlbmRlbGtlesOpc3JlLCB2w6FsYXNzem9uIGVneSBtw6FzaWthdC4nLFxuICAgIElzRW1haWw6XG4gICAgICAnQWRqb24gbWVnIGVneSDDqXJ2w6lueWVzIHtmaWVsZE5hbWV9IMOpcnTDqWtldCwgYSBrw7Z2ZXRrZXrFkSBmb3Jtw6F0dW1iYW46IOKAnm7DqXZAcMOpbGRhLmNvbeKAnS4nLFxuICB9LFxuICBzdWNjZXNzOiB7XG4gICAgRGVmYXVsdE9rOiAnUmVuZGJlbicsXG4gICAgUmFuZG9tT2s6XG4gICAgICAnc3VjY2Vzcy5EZWZhdWx0T2ssc3VjY2Vzcy5Db3JyZWN0LHN1Y2Nlc3MuU3VjY2VlZGVkLHN1Y2Nlc3MuT2ssc3VjY2Vzcy5UaGlzSXNSaWdodCxzdWNjZXNzLkNoYW5nZWQsc3VjY2Vzcy5Pa0NvcnJlY3QnLFxuICAgIENvcnJlY3Q6ICdIZWx5ZXMnLFxuICAgIFN1Y2NlZWRlZDogJ1Npa2Vyw7xsdCcsXG4gICAgT2s6ICdPSyEnLFxuICAgIFRoaXNJc1JpZ2h0OiAnRXogaGVseWVzLicsXG4gICAgQ2hhbmdlZDogJ03Ds2Rvc8OtdHZhIScsXG4gICAgT2tDb3JyZWN0OiAnT0ssIGhlbHllcy4nLFxuICB9LFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==