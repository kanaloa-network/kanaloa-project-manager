"use strict";
(self["webpackChunkkanaloa_project_manager"] = self["webpackChunkkanaloa_project_manager"] || []).push([["node_modules_lion_validate-messages_translations_pl_js"],{

/***/ "./node_modules/@lion/validate-messages/translations/pl.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@lion/validate-messages/translations/pl.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  error: {
    Required: 'Proszę również podać wartość {fieldName}.',
    EqualsLength: 'Wprowadź prawidłową wartość w polu {fieldName} (maks. liczba znaków: {params}).',
    MinLength: 'Proszę podać prawidłową wartość {fieldName} (co najmniej {params} znaków).',
    MaxLength: 'Proszę podać prawidłową wartość {fieldName} (maks. {params} znaków).',
    MinMaxLength:
      'Proszę podać prawidłową wartość {fieldName} (od {params.min} do {params.max} znaków).',
    Pattern: 'Wprowadź prawidłową wartość w polu {fieldName}.',
    IsNumber: 'Wprowadź prawidłową wartość w polu {fieldName}.',
    MinNumber: 'Proszę podać wartość {fieldName} większą niż {params}.',
    MaxNumber: 'Proszę podać wartość {fieldName} mniejszą niż {params}.',
    MinMaxNumber: 'Proszę podać wartość {fieldName} o długości od {params.min} do {params.max}.',
    IsDate: 'Wprowadź datę (DD MM RRRR).',
    MinDate: 'Proszę podać wartość {fieldName} przypadającą po {params, date, YYYYMMDD}.',
    MaxDate: 'Proszę podać wartość {fieldName} przypadającą przed {params, date, YYYYMMDD}.',
    MinMaxDate:
      'Proszę podać wartość {fieldName} między {params.min, date, YYYYMMDD} a {params.max, date, YYYYMMDD}.',
    IsDateDisabled: 'Ta data jest niedostępna, wybierz inną.',
    IsEmail: 'Proszę podać prawidłowy {fieldName} w formacie „nazwa@example.com”.',
  },
  warning: {
    Required: 'Proszę również podać wartość {fieldName}.',
    EqualsLength: 'Wprowadź prawidłową wartość w polu {fieldName} (maks. liczba znaków: {params}).',
    MinLength: 'Proszę podać prawidłową wartość {fieldName} (co najmniej {params} znaków).',
    MaxLength: 'Proszę podać prawidłową wartość {fieldName} (maks. {params} znaków).',
    MinMaxLength:
      'Proszę podać prawidłową wartość {fieldName} (od {params.min} do {params.max} znaków).',
    IsNumber: 'Wprowadź prawidłową wartość w polu {fieldName}.',
    MinNumber: 'Proszę podać wartość {fieldName} większą niż {params}.',
    MaxNumber: 'Proszę podać wartość {fieldName} mniejszą niż {params}.',
    MinMaxNumber: 'Proszę podać wartość {fieldName} o długości od {params.min} do {params.max}.',
    IsDate: 'Wprowadź datę (DD MM RRRR).',
    MinDate: 'Proszę podać wartość {fieldName} przypadającą po {params, date, YYYYMMDD}.',
    MaxDate: 'Proszę podać wartość {fieldName} przypadającą przed {params, date, YYYYMMDD}.',
    MinMaxDate:
      'Proszę podać wartość {fieldName} między {params.min, date, YYYYMMDD} a {params.max, date, YYYYMMDD}.',
    IsDateDisabled: 'Ta data jest niedostępna, wybierz inną.',
    IsEmail: 'Proszę podać prawidłowy {fieldName} w formacie „nazwa@example.com”.',
  },
  success: {
    DefaultOk: 'Ok',
    RandomOk:
      'success.DefaultOk,success.Correct,success.Succeeded,success.Ok,success.ThisIsRight,success.Changed,success.OkCorrect',
    Correct: 'Prawidłowo',
    Succeeded: 'Zakończone pomyślnie',
    Ok: 'Ok!',
    ThisIsRight: 'Zgadza się.',
    Changed: 'Zmieniono!',
    OkCorrect: 'Tak, zgadza się.',
  },
});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2xpb25fdmFsaWRhdGUtbWVzc2FnZXNfdHJhbnNsYXRpb25zX3BsX2pzLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsaUVBQWU7QUFDZjtBQUNBLDZDQUE2QyxVQUFVO0FBQ3ZELHVEQUF1RCxXQUFXLHVCQUF1QixPQUFPO0FBQ2hHLGlEQUFpRCxXQUFXLGNBQWMsUUFBUTtBQUNsRixpREFBaUQsV0FBVyxRQUFRLFFBQVE7QUFDNUU7QUFDQSx3Q0FBd0MsV0FBVyxLQUFLLFlBQVksSUFBSSxZQUFZO0FBQ3BGLGtEQUFrRCxVQUFVO0FBQzVELG1EQUFtRCxVQUFVO0FBQzdELHNDQUFzQyxXQUFXLGFBQWEsT0FBTztBQUNyRSxzQ0FBc0MsV0FBVyxjQUFjLE9BQU87QUFDdEUseUNBQXlDLFdBQVcsZUFBZSxZQUFZLElBQUksV0FBVztBQUM5RjtBQUNBLG9DQUFvQyxXQUFXLGlCQUFpQix1QkFBdUI7QUFDdkYsb0NBQW9DLFdBQVcsb0JBQW9CLHVCQUF1QjtBQUMxRjtBQUNBLDZCQUE2QixXQUFXLFFBQVEsNEJBQTRCLEdBQUcsMkJBQTJCO0FBQzFHO0FBQ0EsdUNBQXVDLFdBQVc7QUFDbEQsR0FBRztBQUNIO0FBQ0EsNkNBQTZDLFVBQVU7QUFDdkQsdURBQXVELFdBQVcsdUJBQXVCLE9BQU87QUFDaEcsaURBQWlELFdBQVcsY0FBYyxRQUFRO0FBQ2xGLGlEQUFpRCxXQUFXLFFBQVEsUUFBUTtBQUM1RTtBQUNBLHdDQUF3QyxXQUFXLEtBQUssWUFBWSxJQUFJLFlBQVk7QUFDcEYsbURBQW1ELFVBQVU7QUFDN0Qsc0NBQXNDLFdBQVcsYUFBYSxPQUFPO0FBQ3JFLHNDQUFzQyxXQUFXLGNBQWMsT0FBTztBQUN0RSx5Q0FBeUMsV0FBVyxlQUFlLFlBQVksSUFBSSxXQUFXO0FBQzlGO0FBQ0Esb0NBQW9DLFdBQVcsaUJBQWlCLHVCQUF1QjtBQUN2RixvQ0FBb0MsV0FBVyxvQkFBb0IsdUJBQXVCO0FBQzFGO0FBQ0EsNkJBQTZCLFdBQVcsUUFBUSw0QkFBNEIsR0FBRywyQkFBMkI7QUFDMUc7QUFDQSx1Q0FBdUMsV0FBVztBQUNsRCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va2FuYWxvYS1wcm9qZWN0LW1hbmFnZXIvLi9ub2RlX21vZHVsZXMvQGxpb24vdmFsaWRhdGUtbWVzc2FnZXMvdHJhbnNsYXRpb25zL3BsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgZXJyb3I6IHtcbiAgICBSZXF1aXJlZDogJ1Byb3N6xJkgcsOzd25pZcW8IHBvZGHEhyB3YXJ0b8WbxIcge2ZpZWxkTmFtZX0uJyxcbiAgICBFcXVhbHNMZW5ndGg6ICdXcHJvd2FkxbogcHJhd2lkxYJvd8SFIHdhcnRvxZvEhyB3IHBvbHUge2ZpZWxkTmFtZX0gKG1ha3MuIGxpY3piYSB6bmFrw7N3OiB7cGFyYW1zfSkuJyxcbiAgICBNaW5MZW5ndGg6ICdQcm9zesSZIHBvZGHEhyBwcmF3aWTFgm93xIUgd2FydG/Fm8SHIHtmaWVsZE5hbWV9IChjbyBuYWptbmllaiB7cGFyYW1zfSB6bmFrw7N3KS4nLFxuICAgIE1heExlbmd0aDogJ1Byb3N6xJkgcG9kYcSHIHByYXdpZMWCb3fEhSB3YXJ0b8WbxIcge2ZpZWxkTmFtZX0gKG1ha3MuIHtwYXJhbXN9IHpuYWvDs3cpLicsXG4gICAgTWluTWF4TGVuZ3RoOlxuICAgICAgJ1Byb3N6xJkgcG9kYcSHIHByYXdpZMWCb3fEhSB3YXJ0b8WbxIcge2ZpZWxkTmFtZX0gKG9kIHtwYXJhbXMubWlufSBkbyB7cGFyYW1zLm1heH0gem5ha8OzdykuJyxcbiAgICBQYXR0ZXJuOiAnV3Byb3dhZMW6IHByYXdpZMWCb3fEhSB3YXJ0b8WbxIcgdyBwb2x1IHtmaWVsZE5hbWV9LicsXG4gICAgSXNOdW1iZXI6ICdXcHJvd2FkxbogcHJhd2lkxYJvd8SFIHdhcnRvxZvEhyB3IHBvbHUge2ZpZWxkTmFtZX0uJyxcbiAgICBNaW5OdW1iZXI6ICdQcm9zesSZIHBvZGHEhyB3YXJ0b8WbxIcge2ZpZWxkTmFtZX0gd2nEmWtzesSFIG5pxbwge3BhcmFtc30uJyxcbiAgICBNYXhOdW1iZXI6ICdQcm9zesSZIHBvZGHEhyB3YXJ0b8WbxIcge2ZpZWxkTmFtZX0gbW5pZWpzesSFIG5pxbwge3BhcmFtc30uJyxcbiAgICBNaW5NYXhOdW1iZXI6ICdQcm9zesSZIHBvZGHEhyB3YXJ0b8WbxIcge2ZpZWxkTmFtZX0gbyBkxYJ1Z2/Fm2NpIG9kIHtwYXJhbXMubWlufSBkbyB7cGFyYW1zLm1heH0uJyxcbiAgICBJc0RhdGU6ICdXcHJvd2FkxbogZGF0xJkgKEREIE1NIFJSUlIpLicsXG4gICAgTWluRGF0ZTogJ1Byb3N6xJkgcG9kYcSHIHdhcnRvxZvEhyB7ZmllbGROYW1lfSBwcnp5cGFkYWrEhWPEhSBwbyB7cGFyYW1zLCBkYXRlLCBZWVlZTU1ERH0uJyxcbiAgICBNYXhEYXRlOiAnUHJvc3rEmSBwb2RhxIcgd2FydG/Fm8SHIHtmaWVsZE5hbWV9IHByenlwYWRhasSFY8SFIHByemVkIHtwYXJhbXMsIGRhdGUsIFlZWVlNTUREfS4nLFxuICAgIE1pbk1heERhdGU6XG4gICAgICAnUHJvc3rEmSBwb2RhxIcgd2FydG/Fm8SHIHtmaWVsZE5hbWV9IG1pxJlkenkge3BhcmFtcy5taW4sIGRhdGUsIFlZWVlNTUREfSBhIHtwYXJhbXMubWF4LCBkYXRlLCBZWVlZTU1ERH0uJyxcbiAgICBJc0RhdGVEaXNhYmxlZDogJ1RhIGRhdGEgamVzdCBuaWVkb3N0xJlwbmEsIHd5YmllcnogaW5uxIUuJyxcbiAgICBJc0VtYWlsOiAnUHJvc3rEmSBwb2RhxIcgcHJhd2lkxYJvd3kge2ZpZWxkTmFtZX0gdyBmb3JtYWNpZSDigJ5uYXp3YUBleGFtcGxlLmNvbeKAnS4nLFxuICB9LFxuICB3YXJuaW5nOiB7XG4gICAgUmVxdWlyZWQ6ICdQcm9zesSZIHLDs3duaWXFvCBwb2RhxIcgd2FydG/Fm8SHIHtmaWVsZE5hbWV9LicsXG4gICAgRXF1YWxzTGVuZ3RoOiAnV3Byb3dhZMW6IHByYXdpZMWCb3fEhSB3YXJ0b8WbxIcgdyBwb2x1IHtmaWVsZE5hbWV9IChtYWtzLiBsaWN6YmEgem5ha8Ozdzoge3BhcmFtc30pLicsXG4gICAgTWluTGVuZ3RoOiAnUHJvc3rEmSBwb2RhxIcgcHJhd2lkxYJvd8SFIHdhcnRvxZvEhyB7ZmllbGROYW1lfSAoY28gbmFqbW5pZWoge3BhcmFtc30gem5ha8OzdykuJyxcbiAgICBNYXhMZW5ndGg6ICdQcm9zesSZIHBvZGHEhyBwcmF3aWTFgm93xIUgd2FydG/Fm8SHIHtmaWVsZE5hbWV9IChtYWtzLiB7cGFyYW1zfSB6bmFrw7N3KS4nLFxuICAgIE1pbk1heExlbmd0aDpcbiAgICAgICdQcm9zesSZIHBvZGHEhyBwcmF3aWTFgm93xIUgd2FydG/Fm8SHIHtmaWVsZE5hbWV9IChvZCB7cGFyYW1zLm1pbn0gZG8ge3BhcmFtcy5tYXh9IHpuYWvDs3cpLicsXG4gICAgSXNOdW1iZXI6ICdXcHJvd2FkxbogcHJhd2lkxYJvd8SFIHdhcnRvxZvEhyB3IHBvbHUge2ZpZWxkTmFtZX0uJyxcbiAgICBNaW5OdW1iZXI6ICdQcm9zesSZIHBvZGHEhyB3YXJ0b8WbxIcge2ZpZWxkTmFtZX0gd2nEmWtzesSFIG5pxbwge3BhcmFtc30uJyxcbiAgICBNYXhOdW1iZXI6ICdQcm9zesSZIHBvZGHEhyB3YXJ0b8WbxIcge2ZpZWxkTmFtZX0gbW5pZWpzesSFIG5pxbwge3BhcmFtc30uJyxcbiAgICBNaW5NYXhOdW1iZXI6ICdQcm9zesSZIHBvZGHEhyB3YXJ0b8WbxIcge2ZpZWxkTmFtZX0gbyBkxYJ1Z2/Fm2NpIG9kIHtwYXJhbXMubWlufSBkbyB7cGFyYW1zLm1heH0uJyxcbiAgICBJc0RhdGU6ICdXcHJvd2FkxbogZGF0xJkgKEREIE1NIFJSUlIpLicsXG4gICAgTWluRGF0ZTogJ1Byb3N6xJkgcG9kYcSHIHdhcnRvxZvEhyB7ZmllbGROYW1lfSBwcnp5cGFkYWrEhWPEhSBwbyB7cGFyYW1zLCBkYXRlLCBZWVlZTU1ERH0uJyxcbiAgICBNYXhEYXRlOiAnUHJvc3rEmSBwb2RhxIcgd2FydG/Fm8SHIHtmaWVsZE5hbWV9IHByenlwYWRhasSFY8SFIHByemVkIHtwYXJhbXMsIGRhdGUsIFlZWVlNTUREfS4nLFxuICAgIE1pbk1heERhdGU6XG4gICAgICAnUHJvc3rEmSBwb2RhxIcgd2FydG/Fm8SHIHtmaWVsZE5hbWV9IG1pxJlkenkge3BhcmFtcy5taW4sIGRhdGUsIFlZWVlNTUREfSBhIHtwYXJhbXMubWF4LCBkYXRlLCBZWVlZTU1ERH0uJyxcbiAgICBJc0RhdGVEaXNhYmxlZDogJ1RhIGRhdGEgamVzdCBuaWVkb3N0xJlwbmEsIHd5YmllcnogaW5uxIUuJyxcbiAgICBJc0VtYWlsOiAnUHJvc3rEmSBwb2RhxIcgcHJhd2lkxYJvd3kge2ZpZWxkTmFtZX0gdyBmb3JtYWNpZSDigJ5uYXp3YUBleGFtcGxlLmNvbeKAnS4nLFxuICB9LFxuICBzdWNjZXNzOiB7XG4gICAgRGVmYXVsdE9rOiAnT2snLFxuICAgIFJhbmRvbU9rOlxuICAgICAgJ3N1Y2Nlc3MuRGVmYXVsdE9rLHN1Y2Nlc3MuQ29ycmVjdCxzdWNjZXNzLlN1Y2NlZWRlZCxzdWNjZXNzLk9rLHN1Y2Nlc3MuVGhpc0lzUmlnaHQsc3VjY2Vzcy5DaGFuZ2VkLHN1Y2Nlc3MuT2tDb3JyZWN0JyxcbiAgICBDb3JyZWN0OiAnUHJhd2lkxYJvd28nLFxuICAgIFN1Y2NlZWRlZDogJ1pha2/FhGN6b25lIHBvbXnFm2xuaWUnLFxuICAgIE9rOiAnT2shJyxcbiAgICBUaGlzSXNSaWdodDogJ1pnYWR6YSBzacSZLicsXG4gICAgQ2hhbmdlZDogJ1ptaWVuaW9ubyEnLFxuICAgIE9rQ29ycmVjdDogJ1RhaywgemdhZHphIHNpxJkuJyxcbiAgfSxcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=