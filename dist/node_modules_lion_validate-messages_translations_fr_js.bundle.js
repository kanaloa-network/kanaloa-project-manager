"use strict";
(self["webpackChunkkanaloa_project_manager"] = self["webpackChunkkanaloa_project_manager"] || []).push([["node_modules_lion_validate-messages_translations_fr_js"],{

/***/ "./node_modules/@lion/validate-messages/translations/fr.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@lion/validate-messages/translations/fr.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  error: {
    Required: 'Veuillez également indiquer un(e) {fieldName}.',
    EqualsLength:
      'Veuillez saisir un(e) {fieldName} correct(e) comptant précisément {params} caractères.',
    MinLength: 'Veuillez indiquer un(e) {fieldName} correct(e) (au moins {params}).',
    MaxLength: "Veuillez indiquer un(e) {fieldName} correct(e) (jusqu'à {params} caractères).",
    MinMaxLength:
      'Veuillez indiquer un(e) {fieldName} correct(e) (entre {params.min} et {params.max} caractères).',
    Pattern: 'Indiquez un(e) {fieldName} valide.',
    IsNumber: 'Indiquez un(e) {fieldName} valide.',
    MinNumber: 'Veuillez indiquer un(e) {fieldName} supérieur(e) à {params}.',
    MaxNumber: 'Veuillez indiquer un(e) {fieldName} inférieur(e) à {params}.',
    MinMaxNumber: 'Veuillez indiquer un(e) {fieldName} entre {params.min} et {params.max}.',
    IsDate: ' Veuillez entrer la date (JJ-MM-AAAA).',
    MinDate: 'Veuillez indiquer un(e) {fieldName} après {params.min, date, YYYYMMDD}.',
    MaxDate: 'Veuillez indiquer un(e) {fieldName} avant {params.max, date, YYYYMMDD}.',
    MinMaxDate:
      'Veuillez indiquer un(e) {fieldName} entre {params.min, date, YYYYMMDD} et {params.max, date, YYYYMMDD}.',
    IsDateDisabled: "Cette date n'est pas disponible, veuillez en choisir une autre.",
    IsEmail: 'Veuillez indiquer un(e) {fieldName} au format "nom@exemple.com".',
  },
  warning: {
    Required: 'Veuillez également indiquer un(e) {fieldName}.',
    EqualsLength:
      'Veuillez saisir un(e) {fieldName} correct(e) comptant précisément {params} caractères.',
    MinLength: 'Veuillez indiquer un(e) {fieldName} correct(e) (au moins {params}).',
    MaxLength: "Veuillez indiquer un(e) {fieldName} correct(e) (jusqu'à {params} caractères).",
    MinMaxLength:
      'Veuillez indiquer un(e) {fieldName} correct(e) (entre {params.min} et {params.max} caractères).',
    IsNumber: 'Indiquez un(e) {fieldName} valide.',
    MinNumber: 'Veuillez indiquer un(e) {fieldName} supérieur(e) à {params}.',
    MaxNumber: 'Veuillez indiquer un(e) {fieldName} inférieur(e) à {params}.',
    MinMaxNumber: 'Veuillez indiquer un(e) {fieldName} entre {params.min} et {params.max}.',
    IsDate: ' Veuillez entrer la date (JJ-MM-AAAA).',
    MinDate: 'Veuillez indiquer un(e) {fieldName} après {params, date, YYYYMMDD}.',
    MaxDate: 'Veuillez indiquer un(e) {fieldName} avant {params, date, YYYYMMDD}.',
    MinMaxDate:
      'Veuillez indiquer un(e) {fieldName} entre {params.min, date, YYYYMMDD} et {params.max, date, YYYYMMDD}.',
    IsDateDisabled: "Cette date n'est pas disponible, veuillez en choisir une autre.",
    IsEmail: 'Veuillez indiquer un(e) {fieldName} au format "nom@exemple.com".',
  },
  success: {
    DefaultOk: 'Ok',
    RandomOk:
      'success.DefaultOk,success.Correct,success.Succeeded,success.Ok,success.ThisIsRight,success.Changed,success.OkCorrect',
    Correct: 'Correct',
    Succeeded: 'Bravo',
    Ok: 'Ok !',
    ThisIsRight: 'Bonne réponse.',
    Changed: 'Modifié !',
    OkCorrect: "Ok, c'est correct.",
  },
});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2xpb25fdmFsaWRhdGUtbWVzc2FnZXNfdHJhbnNsYXRpb25zX2ZyX2pzLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsaUVBQWU7QUFDZjtBQUNBLGtEQUFrRCxVQUFVO0FBQzVEO0FBQ0EsOEJBQThCLFdBQVcsaUNBQWlDLE9BQU87QUFDakYseUNBQXlDLFdBQVcsc0JBQXNCLE9BQU87QUFDakYseUNBQXlDLFdBQVcscUJBQXFCLFFBQVE7QUFDakY7QUFDQSxnQ0FBZ0MsV0FBVyxtQkFBbUIsWUFBWSxJQUFJLFlBQVk7QUFDMUYsOEJBQThCLFdBQVc7QUFDekMsK0JBQStCLFdBQVc7QUFDMUMseUNBQXlDLFdBQVcsZ0JBQWdCLE9BQU87QUFDM0UseUNBQXlDLFdBQVcsZ0JBQWdCLE9BQU87QUFDM0UsNENBQTRDLFdBQVcsT0FBTyxZQUFZLElBQUksV0FBVztBQUN6RjtBQUNBLHVDQUF1QyxXQUFXLE9BQU8sMkJBQTJCO0FBQ3BGLHVDQUF1QyxXQUFXLE9BQU8sMkJBQTJCO0FBQ3BGO0FBQ0EsZ0NBQWdDLFdBQVcsT0FBTyw0QkFBNEIsSUFBSSwyQkFBMkI7QUFDN0c7QUFDQSx1Q0FBdUMsV0FBVztBQUNsRCxHQUFHO0FBQ0g7QUFDQSxrREFBa0QsVUFBVTtBQUM1RDtBQUNBLDhCQUE4QixXQUFXLGlDQUFpQyxPQUFPO0FBQ2pGLHlDQUF5QyxXQUFXLHNCQUFzQixPQUFPO0FBQ2pGLHlDQUF5QyxXQUFXLHFCQUFxQixRQUFRO0FBQ2pGO0FBQ0EsZ0NBQWdDLFdBQVcsbUJBQW1CLFlBQVksSUFBSSxZQUFZO0FBQzFGLCtCQUErQixXQUFXO0FBQzFDLHlDQUF5QyxXQUFXLGdCQUFnQixPQUFPO0FBQzNFLHlDQUF5QyxXQUFXLGdCQUFnQixPQUFPO0FBQzNFLDRDQUE0QyxXQUFXLE9BQU8sWUFBWSxJQUFJLFdBQVc7QUFDekY7QUFDQSx1Q0FBdUMsV0FBVyxPQUFPLHVCQUF1QjtBQUNoRix1Q0FBdUMsV0FBVyxPQUFPLHVCQUF1QjtBQUNoRjtBQUNBLGdDQUFnQyxXQUFXLE9BQU8sNEJBQTRCLElBQUksMkJBQTJCO0FBQzdHO0FBQ0EsdUNBQXVDLFdBQVc7QUFDbEQsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2thbmFsb2EtcHJvamVjdC1tYW5hZ2VyLy4vbm9kZV9tb2R1bGVzL0BsaW9uL3ZhbGlkYXRlLW1lc3NhZ2VzL3RyYW5zbGF0aW9ucy9mci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gIGVycm9yOiB7XG4gICAgUmVxdWlyZWQ6ICdWZXVpbGxleiDDqWdhbGVtZW50IGluZGlxdWVyIHVuKGUpIHtmaWVsZE5hbWV9LicsXG4gICAgRXF1YWxzTGVuZ3RoOlxuICAgICAgJ1ZldWlsbGV6IHNhaXNpciB1bihlKSB7ZmllbGROYW1lfSBjb3JyZWN0KGUpIGNvbXB0YW50IHByw6ljaXPDqW1lbnQge3BhcmFtc33CoGNhcmFjdMOocmVzLicsXG4gICAgTWluTGVuZ3RoOiAnVmV1aWxsZXogaW5kaXF1ZXIgdW4oZSkge2ZpZWxkTmFtZX0gY29ycmVjdChlKSAoYXUgbW9pbnMge3BhcmFtc30pLicsXG4gICAgTWF4TGVuZ3RoOiBcIlZldWlsbGV6IGluZGlxdWVyIHVuKGUpIHtmaWVsZE5hbWV9IGNvcnJlY3QoZSkgKGp1c3F1J8OgIHtwYXJhbXN9IGNhcmFjdMOocmVzKS5cIixcbiAgICBNaW5NYXhMZW5ndGg6XG4gICAgICAnVmV1aWxsZXogaW5kaXF1ZXIgdW4oZSkge2ZpZWxkTmFtZX0gY29ycmVjdChlKSAoZW50cmUge3BhcmFtcy5taW59IGV0IHtwYXJhbXMubWF4fSBjYXJhY3TDqHJlcykuJyxcbiAgICBQYXR0ZXJuOiAnSW5kaXF1ZXogdW4oZSkge2ZpZWxkTmFtZX0gdmFsaWRlLicsXG4gICAgSXNOdW1iZXI6ICdJbmRpcXVleiB1bihlKSB7ZmllbGROYW1lfSB2YWxpZGUuJyxcbiAgICBNaW5OdW1iZXI6ICdWZXVpbGxleiBpbmRpcXVlciB1bihlKSB7ZmllbGROYW1lfSBzdXDDqXJpZXVyKGUpIMOgIHtwYXJhbXN9LicsXG4gICAgTWF4TnVtYmVyOiAnVmV1aWxsZXogaW5kaXF1ZXIgdW4oZSkge2ZpZWxkTmFtZX0gaW5mw6lyaWV1cihlKSDDoCB7cGFyYW1zfS4nLFxuICAgIE1pbk1heE51bWJlcjogJ1ZldWlsbGV6IGluZGlxdWVyIHVuKGUpIHtmaWVsZE5hbWV9IGVudHJlIHtwYXJhbXMubWlufSBldCB7cGFyYW1zLm1heH0uJyxcbiAgICBJc0RhdGU6ICcgVmV1aWxsZXogZW50cmVyIGxhIGRhdGUgKEpKLU1NLUFBQUEpLicsXG4gICAgTWluRGF0ZTogJ1ZldWlsbGV6IGluZGlxdWVyIHVuKGUpIHtmaWVsZE5hbWV9IGFwcsOocyB7cGFyYW1zLm1pbiwgZGF0ZSwgWVlZWU1NRER9LicsXG4gICAgTWF4RGF0ZTogJ1ZldWlsbGV6IGluZGlxdWVyIHVuKGUpIHtmaWVsZE5hbWV9IGF2YW50IHtwYXJhbXMubWF4LCBkYXRlLCBZWVlZTU1ERH0uJyxcbiAgICBNaW5NYXhEYXRlOlxuICAgICAgJ1ZldWlsbGV6IGluZGlxdWVyIHVuKGUpIHtmaWVsZE5hbWV9IGVudHJlIHtwYXJhbXMubWluLCBkYXRlLCBZWVlZTU1ERH0gZXQge3BhcmFtcy5tYXgsIGRhdGUsIFlZWVlNTUREfS4nLFxuICAgIElzRGF0ZURpc2FibGVkOiBcIkNldHRlIGRhdGUgbidlc3QgcGFzIGRpc3BvbmlibGUsIHZldWlsbGV6IGVuIGNob2lzaXIgdW5lIGF1dHJlLlwiLFxuICAgIElzRW1haWw6ICdWZXVpbGxleiBpbmRpcXVlciB1bihlKSB7ZmllbGROYW1lfSBhdSBmb3JtYXQgXCJub21AZXhlbXBsZS5jb21cIi4nLFxuICB9LFxuICB3YXJuaW5nOiB7XG4gICAgUmVxdWlyZWQ6ICdWZXVpbGxleiDDqWdhbGVtZW50IGluZGlxdWVyIHVuKGUpIHtmaWVsZE5hbWV9LicsXG4gICAgRXF1YWxzTGVuZ3RoOlxuICAgICAgJ1ZldWlsbGV6IHNhaXNpciB1bihlKSB7ZmllbGROYW1lfSBjb3JyZWN0KGUpIGNvbXB0YW50IHByw6ljaXPDqW1lbnQge3BhcmFtc33CoGNhcmFjdMOocmVzLicsXG4gICAgTWluTGVuZ3RoOiAnVmV1aWxsZXogaW5kaXF1ZXIgdW4oZSkge2ZpZWxkTmFtZX0gY29ycmVjdChlKSAoYXUgbW9pbnMge3BhcmFtc30pLicsXG4gICAgTWF4TGVuZ3RoOiBcIlZldWlsbGV6IGluZGlxdWVyIHVuKGUpIHtmaWVsZE5hbWV9IGNvcnJlY3QoZSkgKGp1c3F1J8OgIHtwYXJhbXN9IGNhcmFjdMOocmVzKS5cIixcbiAgICBNaW5NYXhMZW5ndGg6XG4gICAgICAnVmV1aWxsZXogaW5kaXF1ZXIgdW4oZSkge2ZpZWxkTmFtZX0gY29ycmVjdChlKSAoZW50cmUge3BhcmFtcy5taW59IGV0IHtwYXJhbXMubWF4fSBjYXJhY3TDqHJlcykuJyxcbiAgICBJc051bWJlcjogJ0luZGlxdWV6IHVuKGUpIHtmaWVsZE5hbWV9IHZhbGlkZS4nLFxuICAgIE1pbk51bWJlcjogJ1ZldWlsbGV6IGluZGlxdWVyIHVuKGUpIHtmaWVsZE5hbWV9IHN1cMOpcmlldXIoZSkgw6Age3BhcmFtc30uJyxcbiAgICBNYXhOdW1iZXI6ICdWZXVpbGxleiBpbmRpcXVlciB1bihlKSB7ZmllbGROYW1lfSBpbmbDqXJpZXVyKGUpIMOgIHtwYXJhbXN9LicsXG4gICAgTWluTWF4TnVtYmVyOiAnVmV1aWxsZXogaW5kaXF1ZXIgdW4oZSkge2ZpZWxkTmFtZX0gZW50cmUge3BhcmFtcy5taW59IGV0IHtwYXJhbXMubWF4fS4nLFxuICAgIElzRGF0ZTogJyBWZXVpbGxleiBlbnRyZXIgbGEgZGF0ZSAoSkotTU0tQUFBQSkuJyxcbiAgICBNaW5EYXRlOiAnVmV1aWxsZXogaW5kaXF1ZXIgdW4oZSkge2ZpZWxkTmFtZX0gYXByw6hzIHtwYXJhbXMsIGRhdGUsIFlZWVlNTUREfS4nLFxuICAgIE1heERhdGU6ICdWZXVpbGxleiBpbmRpcXVlciB1bihlKSB7ZmllbGROYW1lfSBhdmFudCB7cGFyYW1zLCBkYXRlLCBZWVlZTU1ERH0uJyxcbiAgICBNaW5NYXhEYXRlOlxuICAgICAgJ1ZldWlsbGV6IGluZGlxdWVyIHVuKGUpIHtmaWVsZE5hbWV9IGVudHJlIHtwYXJhbXMubWluLCBkYXRlLCBZWVlZTU1ERH0gZXQge3BhcmFtcy5tYXgsIGRhdGUsIFlZWVlNTUREfS4nLFxuICAgIElzRGF0ZURpc2FibGVkOiBcIkNldHRlIGRhdGUgbidlc3QgcGFzIGRpc3BvbmlibGUsIHZldWlsbGV6IGVuIGNob2lzaXIgdW5lIGF1dHJlLlwiLFxuICAgIElzRW1haWw6ICdWZXVpbGxleiBpbmRpcXVlciB1bihlKSB7ZmllbGROYW1lfSBhdSBmb3JtYXQgXCJub21AZXhlbXBsZS5jb21cIi4nLFxuICB9LFxuICBzdWNjZXNzOiB7XG4gICAgRGVmYXVsdE9rOiAnT2snLFxuICAgIFJhbmRvbU9rOlxuICAgICAgJ3N1Y2Nlc3MuRGVmYXVsdE9rLHN1Y2Nlc3MuQ29ycmVjdCxzdWNjZXNzLlN1Y2NlZWRlZCxzdWNjZXNzLk9rLHN1Y2Nlc3MuVGhpc0lzUmlnaHQsc3VjY2Vzcy5DaGFuZ2VkLHN1Y2Nlc3MuT2tDb3JyZWN0JyxcbiAgICBDb3JyZWN0OiAnQ29ycmVjdCcsXG4gICAgU3VjY2VlZGVkOiAnQnJhdm8nLFxuICAgIE9rOiAnT2sgIScsXG4gICAgVGhpc0lzUmlnaHQ6ICdCb25uZSByw6lwb25zZS4nLFxuICAgIENoYW5nZWQ6ICdNb2RpZmnDqSAhJyxcbiAgICBPa0NvcnJlY3Q6IFwiT2ssIGMnZXN0IGNvcnJlY3QuXCIsXG4gIH0sXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9